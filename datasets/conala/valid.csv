intent,snippet
Find the same pattern in two files python,"import pandas as pd

# change sep to use '\t' if those files actually are tab-delimited 
df1 = pd.read_csv('file1.txt', sep=r'\s+', header=None)
df2 = pd.read_csv('file2.txt', sep=r'\s+', header=None)

result = pd.merge(df1, df2, on=0)
result.to_csv('output.txt', sep='\t', header=False, index=False)
"
What are the main advantages of using a class over a callable function?,"Example
class A:
    def __init__(self,num):
        self.val = num

a = A(4)
b = A(5)

>>> print(a.val)
4
>>> a.val = 6
>>> print(a.val)
6
>>> print(b.val)
5
"
Groupby multiple columns,"colnames = [""measure"".format(i+1) for i in range(100)]  # make 100 fake columns

df = pd.DataFrame(np.ones((10, 100)), columns=colnames)
df['dim1'] = [np.random.choice(['foo', 'bar']) for _ in range(10)]   # add fake dimension to groupby

desired_columns = [col for col in df.columns if ""94"" in col or ""95"" in col]   # select columns 94 and 95

df.groupby(['dim1'])[desired_columns].sum()

Out[52]:
      measure94  measure95
dim1
bar           4          4
foo           6          6
"
matplotlib: how to plot concentric circles at a given set of radii,"ax.scatter(1, 0, s=100000, facecolors='none')
"
Get all the javascript file name and its contents in python perfectly,"l = [i.get('src') for i in soup.find_all('script') if i.get('src')] 
"
Getting the row of a tkinter button in grid on click,"def print_value(row, col):
    print find_in_grid(root, row, col).get()

#...

height = 5
width = 1
for i in range(height): #Rows
    for j in range(width): #Columns
        b = Button(root, text=""print value"", command=lambda i=i,j=j: print_value(i,j), width=10)
        b.grid(row=i, column=j+1)
"
Readlines() and calculations in for loop,"with open(filen, ""r"") as fileinput:
    for line in fileinput:
        x, y, z = line.split()
        y = float(y) - 316400
        output_text = ""{}   {:.3f}   {}\n"".format(x, y, z)   
        fileout.write(output_text)
"
sort list of floating-point numbers in groups,"from cluster import *

data = [10.01,5.001,4.89,5.1,9.9,10.1,5.05,4.99]
cl = HierarchicalClustering(data, lambda x,y: abs(x-y))
print [mean(cluster) for cluster in cl.getlevel(1.0)]
"
How do I initialize values in a dictionary?,">>> def very_expensive_initializer(field):
...     print 'Doing loads of work'
...     return set()
... 
>>> class subclassed_dict(dict):
...     def __missing__(self, key):
...         item = self[key] = very_expensive_initializer(key)
...         return item
... 
>>> stats = subclassed_dict()
>>> stats['foo'].add(2)
Doing loads of work
>>> stats['foo'].add(3)
>>> stats['foo'].add(4)
>>> stats['bar']
Doing loads of work
set([])
>>> stats['bar']
set([])
"
How can I check for a new line in string in Python 3.x?,"if ""\n"" in foo:
    print ""There's a newline in variable foo""
"
"ElementTree, Python - find element with sub-element containing certain text and add another sub-element to a list","root.findall('banner') != root.findall('Banner')
"
How to search for XML elements in python?,"def _get_elements_by_tagName_ns_helper(parent, nsURI, localName, rc):
    for node in parent.childNodes:
        if node.nodeType == Node.ELEMENT_NODE:
            if ((localName == ""*"" or node.localName == localName) and
                (nsURI == ""*"" or node.namespaceURI == nsURI)):
                rc.append(node)
            _get_elements_by_tagName_ns_helper(node, nsURI, localName, rc)
    return rc
"
sum of squares in a list in one line?,"sum(map(lambda x: x * x, l))"
Dropdown box representing a method call on a string,"# check if string A ends with string B
def endswith(A, B):
   return A.endswith(B)

# check if string A equals to string B
def stringsequal(A, B):
   return A == B
"
Adding lines to a function,"def call_all(*funcs):
    """"""Create a new wrapper to call each function in turn.""""""
    def wrapper(*args, **kwargs):
        """"""Call the functions and return a list of their outputs.""""""
        return [func(*args, **kwargs) for func in funcs]
    return wrapper
"
How to realize a very big int matrix with 5 string columns in numpy (python3)?,"In [122]: A0,A1=A['f0'],A['f1']
In [123]: with open('test.txt','w') as f:
    for a,b in zip(A0,A1):
        strs = (','.join(['%d']*10)%tuple(a),', '.join(b))
        astr = '%s; %s\n'%strs
        f.write(astr)
"
Python multiprocessing in Nuke causing Nuke to hang,"source
#!/bin/env python

import multiprocessing, threading, time
import logging, os, Queue, sys

logging.basicConfig(
    level=logging.INFO,
    format=""%(asctime)-4s %(levelname)s %(threadName)s %(message)s"", 
    datefmt=""%H:%M:%S"",
    stream=sys.stderr,
)

def scan_dir(topdir):
    try:
        for name in os.listdir(topdir):
            path = os.path.join(topdir, name)
            yield (path, os.path.isdir(path))
    except OSError:
        logging.error('uhoh: %s', topdir)

def scan_dir_queue(inqueue, outqueue):
    logging.info('start')
    while True:
        try:
            dir_item = inqueue.get_nowait()
        except Queue.Empty:
            break

        res = list( scan_dir(dir_item) )
        logging.debug('- %d paths', len(res))
        for path,isdir in res:
            outqueue.put( (path,isdir) )
            if isdir:
                inqueue.put(path)
    logging.info('done')

def thread_master(root):
    dir_queue = Queue.Queue() # pylint: disable=E1101
    dir_queue.put(root)
    result_queue = Queue.Queue()

    threads = [
        threading.Thread(
            target=scan_dir_queue, args=[dir_queue, result_queue]
        )
        for _ in range(multiprocessing.cpu_count())
    ]

    for th in threads:
        th.start()
    for th in threads:
        th.join()
    return result_queue.queue

if __name__ == ""__main__"":
    topdir = os.path.expanduser('~')

    start = time.time()
    res = thread_master(topdir)
    print 'threaded:', time.time() - start
    print len(res), 'paths'

    def mywalk(topdir):
        for (dirpath, _dirnames, filenames) in os.walk(topdir):
            for name in filenames:
                yield os.path.join(dirpath, name)
    start = time.time()
    res = list(mywalk(topdir))
    print 'os.walk:', time.time() - start
    print len(res), 'paths'
"
Overly complex list comprehension?,"matching = [system for system in systems if any(re.search('foo', i) for i in system.mgmt_classes)]
"
Overplotting dynamically,"
import random
from matplotlib import pyplot as plt
from matplotlib import animation

def data_generator_1(t):
    if t<100:
        x1.append(t)
        y1.append(random.randint(1, 100))

def data_generator_2(t):
    if t<100:
        x2.append(t)
        y2.append(random.randint(1, 100))

def init():
    global x1
    global y1
    x1 = []
    y1 = []

    global x2
    global y2
    x2 = []
    y2 = []

    l1, l2 = plt.plot(x1, y1, x2, y2)
    return l1, l2

def animate(i):
    data_generator_1(i)
    data_generator_2(i)
    l1, l2 = plt.plot(x1, y1, x2, y2)
    plt.setp(l1, ls='--', c='k')
    plt.setp(l2, c='gray')
    return l1, l2

fig = plt.figure()
anim = animation.FuncAnimation(fig, animate, init_func=init, frames=1000, interval=1000, blit=True)
plt.show()
"
Python: remove multiple character in list of string,"In [1]: x = ['+5556', '-1539', '-99','+1500']
"
Problems Parsing NBA Boxscore Data with BeautifulSoup,"try:
    stats = [re.search('[A-Z]?[a-z]?[A-Z][a-z]{1,} [A-Z][a-z]{1,}',player).group()] 
except:
    stats = [re.search('[A-Z]\.?[A-Z]?\.? [A-Z][a-z]{1,}',player).group()]
"
How to extract short sequence using window with specific step size?,"data = ""ACCCGATTT""
step = 2
chunk = 4
for i in range(0, len(data) - step, step):
    print(data[i:i+chunk])
"
Importing a shared library and the global namespace,"loc = locals()
glob = globals()

for key in loc:
    glob[key] = loc[key]
"
In Python how can I check how many times a digit appears in an input?,"from collections import Counter
Counter(""11234458881"")
"
Automatically run %matplotlib inline in iPython Notebook,"import matplotlib.pyplot as plt
import numpy as np
"
Pandas: Sort pivot table,"key1 = table.index.labels[0]
key2 = table.rank(ascending=False)

# sort by key1, then key2
sorter = np.lexsort((key2, key1))

sorted_table = table.take(sorter)
"
Python 2.7: How to get the list of static variables in a class?,"print([ getattr(myclass,x) for x in dir(myclass) if not x.startswith(""__"")])
[20, 30, 40]
"
How to clean up this string in python with strip?,"In [21]: res=[]
    ...: for s in string.splitlines():
    ...:     clean_s = s.strip()
    ...:     if clean_s:
    ...:         res.append(clean_s)
    ...:         

In [22]: res
Out[22]: ['data here', 'another_data', 'more data']
"
Instantiating object of a class using the name of the class,"klass = getattr(module, classname)
instance = klass(*args, **kw)
"
make a time delay,sleep(0.1)
how can I convert python tuple to dict,">>> t = [(""x"", ""1"",""11""),(""x"", ""2"",""22""),(""x"", ""3"",""33""),
...      (""y"", ""3"",""00""),(""z"", ""2"",""222""), (""z"", ""3"",""333"")]
>>> order = []
>>> mapping = {}
>>> for outer, inner, value in t:
...     if outer not in order:
...         order.append(outer)
...     mapping.setdefault(outer, {})[inner] = value
... 
>>> [(k, mapping[k]) for k in order]
[('x', {'1': '11', '3': '33', '2': '22'}), ('y', {'3': '00'}), ('z', {'3': '333', '2': '222'})]
>>> mapping.items()  # ignoring order
[('y', {'3': '00'}), ('x', {'1': '11', '3': '33', '2': '22'}), ('z', {'3': '333', '2': '222'})]
>>> from collections import OrderedDict
>>> mapping = OrderedDict()
>>> for outer, inner, value in t:
...     mapping.setdefault(outer, {})[inner] = value
... 
>>> mapping.items()
[('x', {'1': '11', '3': '33', '2': '22'}), ('y', {'3': '00'}), ('z', {'3': '333', '2': '222'})]
>>> from itertools import groupby
>>> from operator import itemgetter
>>> [(k, {k: v for _, k, v in g}) for k, g in groupby(t, itemgetter(0))]
[('x', {'1': '11', '3': '33', '2': '22'}), ('y', {'3': '00'}), ('z', {'3': '333', '2': '222'})]
"
"removing ""none"" result from the function which prints the prime number","for i in range(2,n):
    if n%i==0:
        a=0
        break
"
Python: Act upon (sub)list depending on elements,"'define a function that checks if a key is valid or not
def isValid(key, l):
    return all(_ in (x[1] for x in filter(lambda x:x[0] == key,l)) for _ in ['TXT','A'])

keys = list(set(x[0] for x in l))
keysValid = []
for key in keys: 
    if isValid(key, l): keysValid.append(key)

filtered_list = list(filter(lambda x: x[0] in keysValid, l))
"
python qt4 - passing arguments in QtCore.QObject.connect,"import sys
from PySide import QtGui, QtCore

class ExtendedQLabel(QtGui.QLabel):

    #Signal that emits on MouseRelease
    labelClickSignal_1 = QtCore.Signal(QtGui.QMouseEvent, int)

    # init to -1
    labelId = -1

    # This is the new Constructor, Please note the double underscore 
    # before and behind `init`
    def __init__(self, parent, labelId):
        self.labelId = labelId
        QtGui.QLabel.__init__(self, parent)

    # emit labelClickSignal
    def mouseReleaseEvent(self, event):
        self.labelClickSignal_1.emit(event, self.labelId)


class Test(QtGui.QMainWindow):

    def __init__(self, parent=None):

       # same as yours [...]

    def addLabel(self, name, row):

        # please note the added argument
        label = ExtendedQLabel(name,row)

        # connect the signal
        label.labelClickSignal_1.connect(self.onLabelClicked_1)

        self.grid.addWidget(label, row, 1)

        row = row + 1

    def onLabelClicked_1(self, event,labelId):    
        if event.button() == QtCore.Qt.RightButton:
            print('right')
            print(labelId)
        else:
            print('left')
            print(labelId)
"
Python numpy: sum every 3 rows (converting monthly to quarterly),"sumeveryxrows = lambda myarray, x: myarray.reshape((myarray.shape[0] / x, x)).sum(1)
"
"How to keep ""spaces"" although dict contains it?","message = f.read()
crypt = ''.join(i for i in message if i.lower() in monocrypt)
encrypted_message = []
for letter in crypt:
    encrypted_message.append(monocrypt[letter.lower()])
"
getting a grammar to read more than one keyword in the text,"kw = Combine(Word(alphas + nums) + Literal(';'))('KEY')
body1 = delimitedList(OneOrMore(Word(alphas + nums)) +~kw)('Body')
g1 = OneOrMore(Group(kw + body1))
"
Beginner Python: Extract List to integer,"def getDollarFormatText(dolAndCent):

    separateDolCent = [int(x) for x in str(dolAndCent).split('.')]

    return separateDolCent
"
Instantiate two 2D numpy arrays from a list of strings,"a, b = np.split(arr, arr.shape[1]/2, axis=1)
"
Sorting names containing numbers,"a = sorted(f1, key=lambda l: int(l.split()[0][6:]))
"
Adding Multiple Values to Single Key in Python Dictionary Comprehension,"d = {str(row.getValue(""Column1"")): (str(row.getValue(""Column2"")), str(row.getValue(""Column3"")), str(row.getValue(""Column4""))) for i in arcpy.SearchCursor(xls,""[Column1] = 'Lake_Huron'"")}
"
Can't get pygame font to render on image,"import pygame

pygame.init()
screen = pygame.display.set_mode((400, 400))
image = pygame.image.load('1.png')

sprite = pygame.sprite.Sprite()
sprite.image = image
sprite.rect = image.get_rect()

font = pygame.font.SysFont('Sans', 50)
text = font.render('This is a text', True, (255, 0, 0))

sprite.image.blit(text, sprite.rect)

group = pygame.sprite.Group()
group.add(sprite)
group.draw(screen)

pygame.display.flip()

print 'bits per pixel:'
print 'image', image.get_bitsize()
print 'screen', screen.get_bitsize()
"
Getting the indices of the top k numbers by value in a numpy array?,">> zip(*np.unravel_index(a.argsort(axis=None), dims=a.shape))[::-1][:n]
"
Appending data to ScraperWiki datastore,"import scraperwiki
superdictionary = {}
superlist       = []
superdictionary['1'] = {""a"":1, ""b"":""Foo""}
superdictionary['1'].update({""c"":""Bar""})
superdictionary['2'] = {""a"":2, ""b"":""Grue"", ""c"":""Gnu""}

for subdictionary in superdictionary:
    superlist.append(superdictionary[subdictionary])
scraperwiki.sqlite.save([""a""], superlist)
"
Tridiagonal Matrix with Matrix Blocks,"n = 3
I, T, A = np.identity(n), np.ones(n), np.zeros([n * n, n * n])
for i in range(n):
    a, b, c = i * n, (i + 1) * n, (i + 2) * n
    A[a:b, a:b] = T
    if i < n - 1: A[b:c, a:b] = A[a:b, b:c] = I
"
Adding elements in arrays that fall within a criteria in Python,">>> a[:, :, 2][a[:, :, 2] < 0.1] += 1.0
"
wxPython - Bitmap button won´t be destroyed,"import wx

class GameFrame(wx.Frame):

    def __init__(self,parent,id):

        self.shutdown_showing = False
        wx.Frame.__init__(self, parent, id, ""Project - Map"", size=(860, 640))
        wx.Frame.CenterOnScreen(self)
        self.SetBackgroundColour(""green"")
        self.wndwsbtn = wx.Bitmap(""Your Image"")
        self.wbtn = wx.StaticBitmap(self, -1, self.wndwsbtn)
        self.wbtn.SetPosition((2, 585))
        self.wbtn.Bind(wx.EVT_LEFT_DOWN, self.wstart)
        self.wbtn.SetToolTip(wx.ToolTip(""Start""))

    def wstart(self, event):
        if self.shutdown_showing:
            self.wstdwnbtn.Destroy()# Destroy self.wstdwnbtn
            self.Layout()
            print ""Destroyed""
            self.shutdown_showing = False
        # if not self.shutdown_showing: This was wrong.
        else:
            self.shutdownbtn = wx.Bitmap(""Your image"")
            # Create self.wstdwnbtn on self.wbtn instead.
            self.wstdwnbtn = wx.StaticBitmap(self.wbtn, -1, self.shutdownbtn)
            self.wstdwnbtn.SetPosition((0, 550))
            self.wstdwnbtn.Bind(wx.EVT_LEFT_DOWN, self.wexit)
            self.wstdwnbtn.SetToolTip(wx.ToolTip(""Exit to main menu.""))
            self.shutdown_showing = True

    def wexit(self, event):
        print ""Exit""

if __name__=='__main__':
    app=wx.App(redirect=False)
    frame=GameFrame(parent=None,id=-1)
    frame.Show()
    app.MainLoop()
"
Python keydown combinations (ctrl + key or shift + key),"import pygame
import pygame.locals

pygame.init()

screen = pygame.display.set_mode((300,200))

running = True

while running:

    #
    # events
    #

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False

    #
    # others
    #

    all_keys = pygame.key.get_pressed()

    #print 'shift:', all_keys[pygame.K_LSHIFT], all_keys[pygame.K_RSHIFT]

    if all_keys[pygame.K_a] and (all_keys[pygame.K_LSHIFT] or all_keys[pygame.K_RSHIFT]):
        print ""pressed: SHIFT + A""

pygame.quit()
"
Exclude last matching portion of the text,"result = next(filter(None, text.rpartition('(')))
"
How to create a date range until some date inclusive with python dateutils?,"def date_list(start, end):
    start = datetime.date(start.year, start.month, 1)
    end = datetime.date(end.year, end.month, 1)
    dates = [dt for dt in rrule(MONTHLY, dtstart=start, until=end)]
    return dates
"
random chars for word game python,"def dealHand2(n):
    while True:
        candidate = dealHand(n)
        if all(v <= 2 for v in candidate.values()):
            return candidate
"
Beautiful Soup processing,"from operator import itemgetter

listings = []
for item in soup.select(""div.Details_listing""):
    name = item.a.text
    rating = item.find('div', id='total_ratings_details').text
    rating = 0 if rating.startswith('Be The First To Rate') else float(rating.split(' ')[0])

    listings.append((name, rating))

print sorted(listings, key=itemgetter(1))
"
Why is my for loop skipping an element in my list?,"numbers = set([1,2,5,8,13,15,26,38])
target = 10
for first in numbers:
    second = target - first
    if second > first and second in numbers:
        print(first, second)
"
Getting a regex trie to run faster?,"names = set(word.strip().lower() for word in open('names.txt'))

def substrings(s, min_length=1):
    for start in range(len(s)):
        for length in range(min_length, len(s)-start+1):
            yield s[start:start+length]

s = 'johnsmith123'
print(sorted(names.intersection(substrings(s)))
"
Unable to scrape the text from a certain LI element,"print(v.get_text().strip())
"
Appending input from csv file to a dictionary including duplicate values for a unique key,"import csv
from collections import defaultdict
from dateutil import parser


def test_results(filename):
    with open(filename, ""rU"") as f:
        reader = csv.reader(f, delimiter=""\t"")
        result = defaultdict(list)
        # Skip header line
        next(reader)
        for row in reader:
            result[row[0]].append(parser.parse(' '.join(row[1:])))
"
Python not setting range correctly in plots,"fig, ax = subplots()
ax.plot(t, x, 'o-')
ax.set_xlim(1/(4*f)-1/fs*3, 1/(4*f)+1/fs*3)
ax.set_ylim(0, 1.1)
ax.set_xlabel('Time',fontsize =18)
ax.set_ylabel('Amplitude',fontsize = 18)
"
Import csv as list of list in python 3.3,"import pickle

list_of_ee = [[""a"",""m"",15],[""w"",""p"",34]]

with open(""test.pickle"", ""wb"") as f:
    f.write(pickle.dumps(list_of_ee))

with open(""test.pickle"", ""rb"") as f:
    bytes_data = f.read()
    lst = pickle.loads(bytes_data)

print(lst)
assert list_of_ee == lst
"
Python lookup list of values in list of dictionaries,"result1dict={row[""TextID""]: row[""RecID""] for row in results1}
result2dict={row[""TextID""]: row[""RecID""] for row in results2}
for row in cursor[:10]:
    if row[0]!=None:
        try:
            row[2]=result1dict[row[0]]
        except KeyError:
            row[2]='---'
    if row[1]!=None:
        try:
            row[3]=result2dict[row[1]]
        except KeyError:
            row[3]='---'
    print row

        if row[1]!=None:
            row[3]=result1dict[row[0]]
"
partial match between two arrays in python,">>> a2 += [x + '_111' for x in a1 if all(x not in y for y in a2)]
>>> a2
['a_111', 'd_111', 'b_111', 'c_111']
"
For loops clarity,"def cube(a):
    for x in a:
        return x**3
"
Generating Count Table in Python pandas,">>> df2 = df.reset_index().groupby(['Name', 'Purchase']).count().unstack('Purchase').fillna(0)
>>> df2.columns.rename('Value',level=0, inplace=True)
>>> df2.columns = df2.columns.set_levels(['Count'], level=0)
>>>
>>> totals = df2.sum(axis=1)
>>> totals.name = ('Count', 'all')
>>>
>>> df3 = df2.divide(df2.sum(axis=1), axis=0)
>>> df3.columns = df3.columns.set_levels(['Percent'], level=0)
>>>
>>> dff = pd.concat([totals, df2, df3], axis=1)
>>>
>>> print(dff)
      Count                Percent          
        all apple orange     apple    orange
Name                                        
alice     2     2      0  1.000000  0.000000
bob       3     2      1  0.666667  0.333333
dave      1     0      1  0.000000  1.000000
"
How can I tell if a structure in Python has order?,">>> result = {1,2,3,4,-1}
>>> isinstance(result, collections.Sequence)
False
>>> isinstance({1:2, 3:3}, collections.Sequence)
False
>>>
"
Crawling extratorrent.cc using Scrapy,"from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors import LinkExtractor
from extra.items import *


class extraSpider(CrawlSpider):

    name = 'extraSpider'
    allowed_domains = ['extratorrent.cc']
    start_urls = ['http://www.extratorrent.cc/torrent']
    rules = [Rule(LinkExtractor(allow=['/\d+/\S+']), 'parse_torrent')]

    def parse_torrent(self, response):
        url = response.url
        name = response.xpath(
            ""//h1/b/text()"").extract()
        name = name[0].strip() if name else 'N/A'
        description = response.xpath(
            '//div[@class=""borderdark""]//text()').extract()
        description = ' '.join(
            ' '.join(description).split()) if description else 'N/A'
        size = response.xpath(
            '//td[@class=""tabledata1"" and contains(text(), ""Total Size:"")]/following-sibling::td[@class=""tabledata0"" and position()=1]/text()').extract()
        size = size[0].strip().replace(u'\xa0', ' ') if size else 'N/A'
        torrent = TorrentItem(
            url=url,
            name=name,
            description=description,
            size=size)
        yield torrent
"
Sorting a list of different values by a specific field,"from dateutil.parser import parse
data.sort(key=lambda x: parse(x[6]))
"
How to write HTML into a function?,"#!/usr/bin/python

import re

def write_html(filename, title, content):

    # prepare the content... inject the title into the
    # content.

    content = re.sub(r'(?<=<title>"").*?(?=""</title>)', title, content)

    wfh = open(filename, 'w')
    wfh.write(content)
    wfh.close

if __name__ == '__main__':

    name = 'hello.html'
    title = ""This is a terrible title!""
    content = '<html><content><title>""TitleTitle""</title>' \
              '<p>""Hi brah!""</p></content></html>'

    write_html(name, title, content)
"
How to set an attribute to a vector in rpy2,"from rpy2.robjects.vectors import FloatVector, IntVector
pot = FloatVector((2.0, 3.2, 4, 5, 6, 7))
ts = IntVector((1,6,7,19,20,30))
pot.slots['times'] = ts
"
How to decorate a GTK window like eg. the gnome-panel?,"#!/usr/bin/env python

import gtk

pixmap_rc = """"""
pixmap_path ""/home/foo/images""
style ""bar"" {
    bg_pixmap[NORMAL] = ""logo.svg""
} widget ""*foo"" style ""bar""
""""""

color_rc= """"""
style ""bar"" {
    bg[NORMAL] = ""Hot Pink""
} widget ""*foo"" style ""bar""
""""""

def main ():
    window = gtk.Window()
    window.set_decorated(False)
    window.connect(""destroy"", gtk.main_quit)

    window.set_name(""foo"")
    gtk.rc_parse_string(color_rc)

    window.show_all()
    gtk.main()

if __name__ == ""__main__"":
    main ()
"
Python method for reading keypress?,"from msvcrt import getch
while True:
    print(ord(getch()))
"
Extracting two values from python regex,">>> line='1\t abc'
>>> re.search('^(\d+)\s+(.*)', line).groups()
('1', 'abc')
"
How to compute integrals dependent upon two variables with SciPy?,"import scipy as sp

#define some dummy p1 and p2
p1 = lambda y: 3*y+2
p2 = lambda y: -4*y-4

#define p_{xi1+xi2}
pplus = lambda x: sp.integrate.quad(lambda u,x=x: p1(u)*p2(x-u),0,x)[0]
#define p_{xi1/xi2}
pdivide = lambda x: sp.integrate.quad(lambda u,x=x: u*p1(u)*p2(u/x),0,sp.minimum(x,1))[0]/x**2

#use it
x = 0.2
outplus = pplus(x)
outdivide = pdivide(x)
"
Mask a 3d array with a 2d mask in numpy,"field3d_mask_1 = np.zeros(field3d.shape, dtype=bool)
field3d_mask_2 = np.zeros(field3d.shape, dtype=bool)

for t in range(nt):
    field3d_mask_1[t,:,:] = field2d > 0.3

field3d_mask_2[:,:,:] = field2d[np.newaxis,:,:] > 0.3

print((field3d_mask_1 == field3d_mask_2).all())
"
"How to find true positives, true negatives, false positives, false negatives in Python","from collections import Counter

truth      = [1, 2, 1, 2, 1, 1, 1, 2, 1, 3, 4, 1]
prediction = [1, 1, 2, 1, 1, 2, 1, 2, 1, 4, 4, 3]

confusion_matrix = Counter()

#say class 1, 3 are true; all other classes are false
positives = [1, 3]

binary_truth = [x in positives for x in truth]
binary_prediction = [x in positives for x in prediction]
print binary_truth
print binary_prediction

for t, p in zip(binary_truth, binary_prediction):
    confusion_matrix[t,p] += 1

print ""TP: {} TN: {} FP: {} FN: {}"".format(confusion_matrix[True,True], confusion_matrix[False,False], confusion_matrix[False,True], confusion_matrix[True,False])
"
How do you read in a text (.txt) file as a .py file in Python 2.7?,"with open('test.txt', 'rb') as f:
    exec(f)
    print d
"
Searching a string and returning only things I specify,">>> next(w for w in words if 'I=' in w)
'I=1mV'
"
How to map number to color using matplotlib's colormap?,"import matplotlib as mpl
import matplotlib.cm as cm

norm = mpl.colors.Normalize(vmin=-20, vmax=10)
cmap = cm.hot
x = 0.3

m = cm.ScalarMappable(norm=norm, cmap=cmap)
print m.to_rgba(x)
"
why are my contours not being totally filled in opencv?,"for xx in bigbadlistofcontours:
    cv2.drawContours(contourimage,xx,-1,(0,0,0),-1)
"
Non distinct prime factors of larger numbers,"from collections import defaultdict
from math import sqrt

def factor(n):
    i = 2
    limit = sqrt(n)    
    while i <= limit:
      if n % i == 0:
        yield i
        n = n / i
        limit = sqrt(n)   
      else:
        i += 1
    if n > 1:
        yield n

def pfac(num):
    d=defaultdict(int)
    for f in factor(num):
        d[f]+=1

    terms=[]
    for e in sorted(d.keys()):
        if d[e]>1:
            terms.append('{:,}^{}'.format(e,d[e]))
        else:
            terms.append('{:,}'.format(e))

    print ' * '.join(terms),'=','{:,}'.format(num)           

pfac(600851475143*1000000-1)
pfac(600851475143*1000000)
pfac(600851475143*1000000+1)
"
Creating a basic Table with Flask-SQLAlchemy,"likes_green = User.query.join(User.favorites).filter(
    UserFavorites.color == 'green'
).all()
print [u.email for u in likes_green]
"
In python convert day of year to month and fortnight,"In [11]: d
Out[11]: datetime.datetime(2004, 3, 28, 0, 0)

In [12]: d.replace(day=1 if d.day < 15 else 15)
Out[12]: datetime.datetime(2004, 3, 15, 0, 0)

In [13]: t = pd.Timestamp(d)

In [14]: t.replace(day=1 if t.day < 15 else 15)
Out[14]: Timestamp('2004-03-15 00:00:00')
"
BeautifulSoup Python script no longer working for mining a simple field,"soup.find(text='Religion:').parent.find_next_sibling('td').get_text(strip=True)
"
Finding minimum value of word from a lot of files in python?,"import os.path
import glob
import re
import itertools
from collections import namedtuple, deque
from operator import attrgetter

R_PREFIX_VALUE = re.compile(r'^(?P<prefix>[A-Z]+)(?P<suffix>\d+)\s+(?P<value>\d+)\s*$')

getvalue  = attrgetter('value')

def interleave(seq, val):
    return itertools.chain.from_iterable(itertools.izip(seq, itertools.repeat(val)))

class Fileline(namedtuple('Fileline', 'filename prefix suffix value')):
    @classmethod
    def _fromstr(cls, s, filename=None, rematch=R_PREFIX_VALUE.match):
        m = rematch(s)
        if not m:
            raise ValueError('No valid line found in %r' % s)
        d = m.groupdict()
        d['value'] = int(d['value'])
        d['filename'] = filename
        return cls(**d)

    def _asstr(self):
        return '{}{} {}'.format(self.prefix, self.suffix, self.value)

def max_value_with_prefix(lineseq, prefix, getvalue=getvalue):
    withprefix = (line for line in lineseq if line.prefix==prefix)
    return max_value(withprefix)

def filter_lt_line(lineseq, maxline):
    for line in lineseq:
        if line.prefix != maxline.prefix or line.value >= maxline.value:
            yield line

def extreme_value(fn, lineseq, getvalue=getvalue):
    try:
        return fn((l for l in lineseq if l is not None), key=getvalue)
    except ValueError:
        return None

def max_value(lineseq):
    return extreme_value(max, lineseq)

def min_value(lineseq):
    return extreme_value(min, lineseq)

def read_lines(fn, maker=Fileline._fromstr):
    with open(fn, 'rb') as f:
        return deque(maker(l, fn) for l in f)

def write_file(fn, lineseq):
    lines = (l._asstr() for l in lineseq)
    newlines = interleave(lines, '\n')
    with open(fn, 'wb') as f:
        f.writelines(newlines)

def write_output_file(fn, lineseq):
    lines = (""{} {}"".format(l.filename, l.value) for l in lineseq)
    newlines = interleave(lines, ""\n"")
    with open(fn, 'wb') as f:
        f.writelines(newlines)

def filter_max_returning_min(fn, prefix):
    lineseq = read_lines(fn)
    maxvalue = max_value_with_prefix(lineseq, prefix)
    filteredlineseq = deque(filter_lt_line(lineseq, maxvalue))
    write_file(fn, filteredlineseq)
    minline = min_value(filteredlineseq)
    return minline

def main(fileglob, prefix, outputfile):
    minlines = []
    for fn in glob.iglob(fileglob):
        minlines.append(filter_max_returning_min(fn, prefix))
    write_output_file(outputfile, minlines)
"
Python 3 Struct unpack int and bytearray,"timestamp, base64_data = ba_object[:4], ba_object[4:]
"
Handling markdown's return characters in JSON with Python," my_text = open(""some_text.json"").read()
 split1 = my_text.split('body"" :')
 fixed_body = split1[-1].rsplit('""',1)[0].replace(""\n"",""\\n"")
 fixed_text = split1[0] + 'body"" :' + fixed_body + '""}'
 d =json.loads(fixed_text)
"
Displaying 6.5235375356299998e-07 without exponential notation,">>> 6.5235375356299998e-07 * 10000000
6.5235375356300001

>>> 6.5235375356299998e-07 + 10000000
10000000.000000652
"
csv: writer.writerows() splitting my string inputs,"with open('example1.csv', 'w') as result:
    writer = csv.writer(result, delimiter="","")
    writer.writerow(('Correct?', 'Successes', 'Failures'))
    writer.writerows([c.strip() for c in r.strip(', ').split(',')]
                     for r in list_results)
"
How to copy content inside of a txt file to clipboard?,"import os 
data = ""hello world""
os.system(""echo '%s' | pbcopy"" % data)
"
How to treat the last element in list differently in Python?,"for item in list[:-1]:
    print ""Not last: "", item
print ""Last: "", list[-1]
"
"in Python 3, how to create a number-like object?","class x(float):
    def __str__(self):
        return ""{:e}"".format(self)

print (float(101))  # 101.0
print (x(101))      # 1.010000e+02
"
How to split pandas data frame by many criteria,"df[(df['emld'] == 'aol.com') & (df['bounce_type'] == 'hard')]
"
Dropbox /delta ignoring cursor,"import requests

access_token = '<REDACTED>'
member_id = '<REDACTED>'

has_more = True
params = {}
while has_more:
    response = requests.post('https://api.dropbox.com/1/delta', data=params, headers={
        'Authorization': 'Bearer ' + access_token,
        'X-Dropbox-Perform-As-Team-Member': member_id
    }).json()

    for entry in response['entries']:
        print entry[0]

    has_more = response['has_more']
    params['cursor'] = response['cursor']
"
Getting index of numpy.ndarray,"peakIndex = numpy.argmax(myArray)
"
What is the best way to implement different versions of the same function?,"def add_check(a, b):
    if isinstance(a, (float, int)) and isinstance(b, (float, int)):
        return add(a, b)

def add(a, b):
    return (a+b)
"
Python slice first and last element in list,"some_list[::len(some_list)-1]
"
Cherrypy form validation,"import re
from simplejson import JSONDecoder
from simplejson.decoder import JSONDecodeError
#from cherrypy._cperror import HTTPError
from decimal import Decimal

class ValidationException(Exception):
    pass 

class ArgumentException(ValidationException):
    pass

class MandatoryException(ValidationException):
    pass

class DenialException(ValidationException):
    pass

class ParameterTypeException(ValidationException):
    pass

class ParameterValueException(ValidationException):
    pass

def validate_parameters(args,kwargs,required_args=None
                                     ,deny_args=None
                                     ,requires=None
                                     ,deny=None
                                     ,deny_except=None
                                     ,types=None
                                     ,values=None
                                     ,filter=None
                                     ,json_decode=None
                                     ,defaults=None):
    """"""Validates input parameters of a callable

    @param required_arguments:   list of types, Required argument's types  & counts in order
    @param deny_args             string ,regex pattern, if any argument matches with the pattern, exception raises
    @param requires:             list of fields to check for mandatory
    @param deny:                 string ,regex pattern, if any parameter matches with the pattern, exception raises
    @param deny_except:          string ,regex pattern for excluding fields from deny
    @param types:                dict of key:name and value:type to check for types, if mismatch it will be raises exception
    @param values:               dict of key:name and value:regex pattern to check the values, & fire exception if mismatch
    @param filter:               string ,regex pattern of parameters to filter
    @param json_decode:          list of string: field to be decoded as json data    
    @param defaults:             dict of key:name and value:default_value

    @raise MandatoryException:           if any param in requires does not provided
    @raise ArgumentException:            if arguments are invalid , short or mismatch type.
    @raise DenialException:              if found param in deny list
    @raise ParameterTypeException:       if parameter types invalid
    @raise ParameterValueException:      if values are not in correct format
    """"""


    #check deny arguments
    if deny_args:
        for arg in args: 
            if re.match(deny_args, arg):
                raise DenialException('the argument %s was not allowed' % arg)

    #decoding json parameters
    if json_decode:
        decoder = JSONDecoder(parse_float=Decimal)
        def decode(d):
            try:
                return decoder.decode(d)
            except (JSONDecodeError,TypeError):
                return d

        if isinstance(json_decode,list):
            decoded_list =[(key,decode(kwargs[key])) for key in kwargs if key in json_decode]
        else:
            decoded_list =[(key,decode(kwargs[key])) for key in kwargs]
        kwargs.update(decoded_list) 



    #check required arguments
    if required_args: 
        try:
            new_args = list(args)
            for at in required_args:
                index = required_args.index(at)
                if not isinstance(new_args[index],at):
                    try:
                        #try to cast
                        new_args[index] = at(new_args[index])
                    except:
                        raise ParameterTypeException('argument at index:%s must be %s' % (required_args.index(at),at))
            args = tuple(new_args)
        except IndexError:
            raise ArgumentException('argument\'s length is too short')

    #check required parameters
    if requires: 
        for name in requires:
            if name not in kwargs:
                raise MandatoryException('the parameter:""%s"" is mandatory' % name)


    filtered_params = {}
    for param in kwargs:

        #checking requires
        if requires and param in requires and not kwargs[param]:
            raise MandatoryException('the parameter:""%s"" is mandatory' % param)

        #checking for denial
        if deny and re.match(deny,param) and  (not deny_except or not re.match(deny_except, param)):
            raise DenialException('Parameter: %s was denied' % param)

        #value checking
        if values and param in values and not re.match(values[param], kwargs[param]):
            raise ParameterValueException('Parameter:%s does not meet value pattern: given value:%s' % (param,kwargs[param]))

        #checking for types
        if types and param in types:
            if kwargs[param] and not isinstance(kwargs[param],types[param]):
                try:
                    #try to cast the type too needed type
                    kwargs[param] = types[param](kwargs[param])
                except:
                    raise ParameterTypeException('Parameter:%s must be type:%s, given type:%s' % (param,types[param],type(kwargs[param])))


        #filtering parameters
        if not filter or not re.match(filter,param):
            filtered_params[param] = kwargs[param]

    #add defaults if not supplied
    if defaults:
        for param in defaults:
            if param not in filtered_params:
                filtered_params[param] = defaults[param]

    return args,filtered_params


def validate(**val_cfg):
    def validecorator(func):
        def wrapper(*args,**kwargs):
                if len(func.func_code.co_varnames) and func.func_code.co_varnames[0] == 'self':
                    new_args,filtered_params = validate_parameters(args[1:], kwargs,**val_cfg)
                    return func(*(args[0],)+new_args,**filtered_params)
                else:
                    new_args,filtered_params = validate_parameters(args, kwargs,**val_cfg)
                    return func(*new_args,**filtered_params)
            #calling the callable!

        return wrapper
    return validecorator

validate.__doc__ = validate_parameters.__doc__
"
Summation of only consecutive values in a python array,"mask1 = np.convolve(mask.astype(int),np.ones(3),'same')>1
"
python create variable from first x letters in each line of a text file,"with open('test1.txt', 'r') as file1, open('test2.txt', 'r') as file2:
    print(""line\tfile1\tfile2\n"")
    for i, (line1, line2) in enumerate(zip(file1, file2), 1):
        if line1 != line2:
            print(""{}:\t\t{}\t{}"".format(i, line1.strip(), line2.strip()))
"
Python String to Bool conversion yields True for all cases,"for bit_1, bit_2 in zip(a, b):
    if bit_1 == '1' or bit_2 == '1':
        c += '1'
    else:
        c += '0'
"
"Converting JSON String to Dictionary, Not List (Python)","sum(p[0] for p in datapoints[0:5])/5. # Result is 35.8
"
How to create a list of date string in 'yyyymmdd' format with Python Pandas?,"[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]"
Python pandas data frame: how to perform operations on two columns with the same name,"import numpy as np
import pandas as pd

np.random.seed(0)
df = pd.DataFrame(np.random.rand(4,5), columns = list('abcab'))
print df
          a         b         c         a         b
0  0.548814  0.715189  0.602763  0.544883  0.423655
1  0.645894  0.437587  0.891773  0.963663  0.383442
2  0.791725  0.528895  0.568045  0.925597  0.071036
3  0.087129  0.020218  0.832620  0.778157  0.870012
"
Sieve of eratosthenes using dictionaries in python,"def sieve_using_set(b):
    seq_primes=list(range(2, b + 1))
    sieve_set=set(range(2, b + 1))
    c=0
    while (seq_primes[c]**2)<b:
        k=c
        while seq_primes[k]<=(b/seq_primes[c]):
            sieve_set.discard(seq_primes[k] * seq_primes[c])
            k+=1
        c+=1
    return list(sorted(sieve_set))
"
Populating a Python dictionary,"customers['customer1'].append(('milk', 3))
customers['customer1'].append(('bread', 5))
customers['customer2'].append(('cereal', 7))
"
What is the purpose of calling __init__ directly?,"class A:

     def __init__(self, x):
          self.x = x

class B(A):

     def __init__(self, x, y):
          A.__init__(self, x)
          self.y = y
"
Python - sobel x derivative,"r,c = input.shape
output = np.zeros([r, c -1])

for j in range(0, c - 1):
    output[:, j] = np.abs(input[:, j+1] - input[:, j])

print output
"
Convert Java byte array to Python byte array,"data = [1,2,-3,-143, ...]
binData = ''.join(map(lambda x: chr(x % 256), data))
"
Can the [a-zA-Z] Python regex pattern be made to match and replace non-ASCII Unicode characters?,"import re
print (re.sub(r""(?![\d_])\w"",""X"",""dfäg""))
# => XXXX
"
Rendering Text Calendar,">>> import calendar
>>> list(calendar.day_name)
['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
"
Rounding values for normalised variables,">>> from itertools import count
>>> c = count(0.0, 0.0001)
>>> c.next()
0.0
>>> c.next()
0.0001
>>> c.next()
0.0002
"
Vector algebra in functional,"print map(sum, izip(*twin))
"
Python: More efficient way to break down string and append it to a list,"example_string = ""Test""
example_list = list(example_string)
"
PyQt Node interface - Parrent to ItemIsMovable object,"#!/usr/bin/python
# -*- coding: utf-8 -*-

""""""
This is the base py file for the GUI

Todo list
-----------------
- Pop up menu for adding new Nodes
- node connectivity
- create data structure for storing 

""""""

import sys
from PyQt4 import QtGui, QtCore
from array import *

""""""
Base class for a node. Contains all the inilization, drawing, and containing inputs and outputs
""""""
class node(QtGui.QGraphicsRectItem):

    width = 100
    height = 100
    color = 1
    x = 90
    y = 60
    inputs=[]
    outputs=[]
    viewObj = None

    def __init__(self, n_x, n_y, n_width,n_height):
        QtGui.QGraphicsRectItem.__init__(self, n_x, n_y, n_width, n_height)
        self.width = n_width
        self.height = n_height
        self.x = n_x
        self.y = n_y
        self.setFlag(QtGui.QGraphicsItem.ItemIsMovable, True)
        self.setFlag(QtGui.QGraphicsItem.ItemIsSelectable, True)
        self.iniNodeData()

    def mousePressEvent(self, e):
        print(""Square got mouse press event"")
        print(""Event came to us accepted: %s""%(e.isAccepted(),))
        QtGui.QGraphicsRectItem.mousePressEvent(self, e)

    def mouseReleaseEvent(self, e):
        print(""Square got mouse release event"")
        print(""Event came to us accepted: %s""%(e.isAccepted(),))
        QtGui.QGraphicsRectItem.mouseReleaseEvent(self, e)

    """"""
    This is where inputs and outputs will be created based on node type
    """""" 
    def iniNodeData(self):
        print('making node data')
        for j in range(5):
            this = self
            x = input(this,0, 0+(j*10))
            self.inputs.append(x)

        for k in range(5):
            this = self
            x = output(this,self.x+self.width, self.y+(k*10))
            self.outputs.append(x)


    def mouseMoveEvent(self, event):
        print('Dragging@')
        QtGui.QGraphicsRectItem.mouseMoveEvent(self, event)


    def mousePressEvent(self, event):

        print('moving!')

""""""
Nodes will evaluate from the last node to the first node, therefore inputs are evaluted
""""""
class input(QtGui.QGraphicsRectItem):
    currentConnectedNode = None
    currentConnectedOutput = None
    parentNode = None
    width = 10
    height = 10
    x = 1
    y = 1
    color = 1
    drawItem = None

    def __init__(self, pnode, posX, posY):
        self.parentNode = pnode
        self.x = posX
        self.y = posY
        self.color = 1
        QtGui.QGraphicsRectItem.__init__(self, self.x+self.parentNode.x, self.y+self.parentNode.y, self.width, self.height, self.parentNode)



'''
Output value from a node
'''
class output(node):
    parentNode = None
    width = 10
    height = 10
    x = 1
    y = 1

    def __init__(self, pnode, posX, posY):
        self.parentNode = pnode
        self.x = posX
        self.y = posY
        self.color = 1
        QtGui.QGraphicsRectItem.__init__(self, self.x-self.width, self.y, self.width, self.height, self.parentNode)


'''
Check Click events on the scene Object
'''
class Scene(QtGui.QGraphicsScene):


    nodes = []

    def mousePressEvent(self, e):
        print(""Scene got mouse press event"")
        print(""Event came to us accepted: %s""%(e.isAccepted(),))
        QtGui.QGraphicsScene.mousePressEvent(self, e)

    def mouseReleaseEvent(self, e):
        print(""Scene got mouse release event"")
        print(""Event came to us accepted: %s""%(e.isAccepted(),))
        QtGui.QGraphicsScene.mouseReleaseEvent(self, e)

    def dragMoveEvent(self, e):
        print('Scene got drag move event')

    def addNode(self):
        newNode = self.addItem(node(250,250,100,150))
        self.nodes.append(newNode)


'''
Main Window Object
'''

class MainWindowUi(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        self.setWindowTitle('RIS RIB Generator')
        self.scene = Scene(0, 0, 800, 850, self)
        self.view = QtGui.QGraphicsView()
        self.setCentralWidget(self.view)
        self.view.setScene(self.scene)


        exitAction = QtGui.QAction(QtGui.QIcon('exit24.png'), 'Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('Exit application')
        exitAction.triggered.connect(self.close)

        newNodeAction = QtGui.QAction(QtGui.QIcon('exit24.png'), 'New Node', self)
        newNodeAction.setStatusTip('Add a blank node')
        newNodeAction.triggered.connect(self.scene.addNode)


        self.statusBar()
        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(newNodeAction)
        fileMenu.addAction(exitAction)


'''
Start Point
'''

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    win = MainWindowUi()
    win.show()
    sys.exit(app.exec_())
"
Python sort order unicode/ansi differs,"import locale
from functools import cmp_to_key

@cmp_to_key
def strcoll(a, b):
    if isinstance(a, str):
        a = a.decode('utf-8')
    if isinstance(b, str):
        b = b.decode('utf-8')
    return locale.strcoll(a, b)
"
including a bound string object in regular expression in python,">>> if re.match('^{0}'.format(x), y):
...     print ""success""
... 
success
"
Can a python script execute a function inside a bash script?,subprocess.call('test.sh otherfunc')
Converting an unknown data structure to a known data structure in Python,"from collections import Counter
from pprint import pprint as pp

data = [
    {'price_ex_tax': '99.0000', 'event_date': '', 'wrapping_name': '', 'price_tax': '0.0000', 'id': 3, 'cost_price_tax': '0.0000', 'bin_picking_number': '', 'ebay_transaction_id': '', 'wrapping_cost_ex_tax': '0.0000', 'base_total': '99.0000', 'quantity': 1, 'ebay_item_id': '', 'type': 'physical', 'product_id': 83, 'price_inc_tax': '99.0000', 'base_wrapping_cost': '0.0000', 'parent_order_product_id': None, 'option_set_id': 15, 'wrapping_message': '', 'weight': '3.0000', 'refund_amount': '0.0000', 'applied_discounts': [{'amount': 99, 'id': 'total-coupon'}], 'event_name': None, 'cost_price_ex_tax': '0.0000', 'base_price': '99.0000', 'wrapping_cost_tax': '0.0000', 'total_inc_tax': '99.0000', 'total_ex_tax': '99.0000', 'quantity_shipped': 0, 'fixed_shipping_cost': '0.0000', 'total_tax': '0.0000', 'sku': 'S-TIM-BAC-STD', 'return_id': 0, 'wrapping_cost_inc_tax': '0.0000', 'cost_price_inc_tax': '0.0000', 'name': 'University of Timbuktu Bachelor Set', 'is_bundled_product ': False, 'order_id': 614534, 'configurable_fields': [], 'order_address_id': 2, 'is_refunded': False, 'product_options': [{'display_style': 'Pick list', 'type': 'Product list', 'product_option_id': 95, 'display_value': 'Cambridge-Style Bachelor Gown, Size L', 'id': 2, 'option_id': 19, 'value': '77', 'display_name': 'Gown size', 'name': 'Bachelor gown size', 'order_product_id': 3}, {'display_style': 'Pick list', 'type': 'Product list', 'product_option_id': 97, 'display_value': 'Bachelor and Masters Trencher, Size L', 'id': 3, 'option_id': 20, 'value': '80', 'display_name': 'Trencher size', 'name': 'Trencher size', 'order_product_id': 3}], 'base_cost_price': '0.0000'},
    {'price_ex_tax': '0.0000', 'event_date': '', 'wrapping_name': '', 'price_tax': '0.0000', 'id': 4, 'cost_price_tax': '0.0000', 'bin_picking_number': '', 'ebay_transaction_id': '', 'wrapping_cost_ex_tax': '0.0000', 'base_total': '0.0000', 'quantity': 1, 'ebay_item_id': '', 'type': 'physical', 'product_id': 80, 'price_inc_tax': '0.0000', 'base_wrapping_cost': '0.0000', 'parent_order_product_id': 3, 'option_set_id': None, 'wrapping_message': '', 'weight': '0.0000', 'refund_amount': '0.0000', 'applied_discounts': [], 'event_name': None, 'cost_price_ex_tax': '0.0000', 'base_price': '0.0000', 'wrapping_cost_tax': '0.0000', 'total_inc_tax': '0.0000', 'total_ex_tax': '0.0000', 'quantity_shipped': 0, 'fixed_shipping_cost': '0.0000', 'total_tax': '0.0000', 'sku': 'G-CAM-BAC-L', 'return_id': 0, 'wrapping_cost_inc_tax': '0.0000', 'cost_price_inc_tax': '0.0000', 'name': 'Cambridge-Style Bachelor Gown, Size L', 'is_bundled_product ': True, 'order_id': 614534, 'configurable_fields': [], 'order_address_id': 2, 'is_refunded': False, 'product_options': [], 'base_cost_price': '0.0000'}, 
    {'price_ex_tax': '0.0000', 'event_date': '', 'wrapping_name': '', 'price_tax': '0.0000', 'id': 5, 'cost_price_tax': '0.0000', 'bin_picking_number': '', 'ebay_transaction_id': '', 'wrapping_cost_ex_tax': '0.0000', 'base_total': '0.0000', 'quantity': 1, 'ebay_item_id': '', 'type': 'physical', 'product_id': 87, 'price_inc_tax': '0.0000', 'base_wrapping_cost': '0.0000', 'parent_order_product_id': 3, 'option_set_id': None, 'wrapping_message': '', 'weight': '0.0000', 'refund_amount': '0.0000', 'applied_discounts': [], 'event_name': None, 'cost_price_ex_tax': '0.0000', 'base_price': '0.0000', 'wrapping_cost_tax': '0.0000', 'total_inc_tax': '0.0000', 'total_ex_tax': '0.0000', 'quantity_shipped': 0, 'fixed_shipping_cost': '0.0000', 'total_tax': '0.0000', 'sku': 'C-STD-B&M-L', 'return_id': 0, 'wrapping_cost_inc_tax': '0.0000', 'cost_price_inc_tax': '0.0000', 'name': 'Bachelor and Masters Trencher, Size L', 'is_bundled_product ': True, 'order_id': 614534, 'configurable_fields': [], 'order_address_id': 2, 'is_refunded': False, 'product_options': [], 'base_cost_price': '0.0000'}
]

def get_defaults(lst_of_dct):
    defaults = {}
    majority = (len(data) + 1) // 2
    for key in lst_of_dct[0]:
        try:
            ctr = Counter(d[key] for d in lst_of_dct)
            value,count = ctr.most_common(1)[0]
            defaults[key] = value if count >= majority else """"
        except TypeError:
            # Counter doesn't like unhashable type ie lists
            defaults[key] = []
    return defaults

defaults = get_defaults(data)
pp(defaults)
"
Django built-in timesince filter to show only Days,"@register.filter(expects_localtime=True)
def days_since(value, arg=None):
    try:
        tzinfo = getattr(value, 'tzinfo', None)
        value = date(value.year, value.month, value.day)
    except AttributeError:
        # Passed value wasn't a date object
        return value
    except ValueError:
        # Date arguments out of range
        return value
    today = datetime.now(tzinfo).date()
    delta = value - today
    if abs(delta.days) == 1:
        day_str = _(""day"")
    else:
        day_str = _(""days"")

    if delta.days < 1:
        fa_str = _(""ago"")
    else:
        fa_str = _(""from now"")

    return ""%s %s %s"" % (abs(delta.days), day_str, fa_str)
"
How to aggregate some rows based on their column value in Python,"import pandas as pd
import io
import numpy as np
import datetime

data = """"""
   c0   c1   c2   c3   c4  c5
0  1    a    d    3    4   0
1  1    a    c    0    0   6
2  1    b    d    3    1   0
1  1    b    c    0    0   1
    """"""

df = pd.read_csv(io.StringIO(data), delimiter='\s+')

df2 = pd.DataFrame(df.groupby('c1').sum().ix[:,1:].sum(axis=1), columns=['c6']).reset_index()

df3 = pd.merge(df,df2,on='c1').set_index(df.index)

print(df3)
"
How to escape special regex characters in a string?,">>> p in 'blablafoo+*bar123'
True
>>> 'foo+*bar foo+*bar'.count(p)
2
"
Why would MySQL execute return None?,"c = d.cursor()

c.execute(query)    # selected rows stored in cursor memory

rows = c.fetchall()    # get all selected rows, as Barmar mentioned
for r in rows:
    print(r)
"
"Save email attachment (python3, pop3_ssl, gmail)","str_message = email.message_from_string(""\n"".join(raw_message))
"
Convert a unixtime to a datetime object and back again (pair of time conversion functions that are inverses),"import calendar, datetime

# Convert a unix time u to a datetime object d, and vice versa
def dt(u): return datetime.datetime.utcfromtimestamp(u)
def ut(d): return calendar.timegm(d.timetuple())
"
Where did my dimensions go when I did a groupby in pandas?,">>> df = df.reset_index()
>>> df.head()
         date category    country         criteria     size  clicks  cpc_cpm_revenue  \
0  2013-11-05     Apps  Australia  referrer=direct  300x250       0          0.01942   
1  2013-11-05     Apps    Austria  referrer=direct  300x250       0          0.00500   
2  2013-11-05     Apps    Belgium  referrer=direct  300x250       0          0.00200   
3  2013-11-05     Apps     Brazil  referrer=direct  300x250       0          0.01220   
4  2013-11-05     Apps     Canada  referrer=direct  300x250       0          0.02090   

   impressions  
0           12  
1            1  
2            2  
3           14  
4           17  
"
Matplotlib pyplot axes formatter,"...

y_fmt = tick.FormatStrFormatter('%2.2e')
ax.yaxis.set_major_formatter(y_fmt)

...
"
How to make matrices in Python?,">>> matrix = [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E']]
>>> for row in matrix:
...     print ' '.join(row)
... 
A B C D E
A B C D E
A B C D E
A B C D E
A B C D E
>>> print '\n'.join([' '.join(row) for row in matrix])
A B C D E
A B C D E
A B C D E
A B C D E
A B C D E
"
Alter superclass' variable from subclass on Python,"class B(A):
    dictionary = dict(A.dictionary, key='value')
"
Reading .csv data from URL in python: extra lines,"import csv
import urllib2   
url = 'http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=KMDLAURE4&day=9&month=6&year=2013&graphspan=day&format=1'
response = urllib2.urlopen(url)
cr = csv.reader(response)

for row in cr:
    if len(row) <= 1: continue
    print row
"
create a column in a pandas dataframe which calculates the difference between two rows,"df['data'].diff().fillna(0)
"
increment a variable like */2.4.7 via python,">>> version = '*/2.4.7'
>>> prefix, _, sprint = version.rpartition('.')
>>> '{}.{}'.format(prefix, int(sprint) + 1)
'*/2.4.8'
>>> prefix, sprint = version.rsplit('.', 1)  # split just once
>>> '{}.{}'.format(prefix, int(sprint) + 1)
'*/2.4.8'
"
Keep duplicated item with lowest price in csv file,"import csv
from collections import OrderedDict

d = OrderedDict() # keep the order

with open('in.csv', 'r') as f1, open(""output.csv"", ""w"") as out:
    r = csv.reader(f1,delimiter="","")
    header = next(r) # store header
    writer = csv.writer(out,delimiter="","")
    for row in r:
        price = float(row[2])
        # first check price will be less than than inf so we will add the key/value
        if d.get(row[2], float(""inf"")) > price:
            d[row[0]] = row
    writer.writerow(header) # write header
    for tup in d.values(): # write updated items
        writer.writerow(tup)
"
Readably print out a python dict() sorted by key,"for k, v in sorted(object.items()):
"
how to check the result is multiples (python)?,"if x%3 == 0 and x%5 == 0:  
    print (""FizzBuzz"")

elif x%3 == 0 :
        print(""Fizz"")
elif x%5 == 0 :
        print(""Buzz"")
"
Python: Sort a list into multiple lists or dictionary,">>> from collections import defaultdict
>>> values = defaultdict(lambda : defaultdict(list))
>>> for wall in wallList:
...     if 'broken' in wall:
...         values[wall[:-3].replace('_broken', '')]['broken'].append(wall)
...     else:
...         values[wall[:-3]]['default'].append(wall)
... 
>>> values.items()
[('wall', defaultdict(<type 'list'>, {'default': ['wall_l0', 'wall_l1'], 'broken': ['wall_broken_l0', 'wall_broken_l1']})), ('wall_vpi', defaultdict(<type 'list'>, {'default': ['wall_vpi_l0', 'wall_vpi_l1'], 'broken': ['wall_vpi_broken_l0', 'wall_vpi_broken_l1']})), ('wall_vwh', defaultdict(<type 'list'>, {'default': ['wall_vwh_l0', 'wall_vwh_l1'], 'broken': ['wall_vwh_broken_l0', 'wall_vwh_broken_l1']}))]
>>>
"
Group and Check-mark using Python,"import sys
from collections import defaultdict
import csv

# see http://stackoverflow.com/questions/6180609/group-and-check-mark-using-python
def main():
    # files = [""group.txt""]
    files = sys.argv[1:]
    if len(files) < 1:
        print ""usage: ./python_checkmark.py file1 [file2 ... filen]""

    name_map = defaultdict(set)

    for f in files:
        file_handle = open(f, ""r"")
        process_file(file_handle, name_map)
        file_handle.close()

    print_csv(sys.stdout, name_map) 

def process_file(input_file, name_map):
    cur_name = """"
    for line in input_file:
        if "":"" in line:
            cur_name, item = [x.strip() for x in line.split("":"")]
        else:
            item = line.strip()
        name_map[cur_name].add(item)


def print_csv(output_file, name_map):
    names = name_map.keys()
    items = set([])
    for item_set in name_map.values():
        items = items.union(item_set)

    writer = csv.writer(output_file, quoting=csv.QUOTE_MINIMAL)
    writer.writerow( [""""] + names )
    for item in sorted(items):
        row_contents = map(lambda name:""X"" if item in name_map[name] else """", names)
        row = [item] + row_contents
        writer.writerow( row )


if __name__ == '__main__':
    main()
"
python : reading a datetime from a log file using regex,">>> re.compile(r"".*\[\s?(\d+/\D+?/.*?)\]"").search(line).group(1)
'1/Jul/2013 03:27:12.818'
"
How to filter by sub-level index in Pandas,df[df.index.map(lambda x: x[1].endswith('0630'))]
Scrollable Group with a List using TraitsUI,"    from traits.api import HasTraits, List, Instance
from traitsui.api import (
    View, ListEditor, Group,InstanceEditor, Item, CheckListEditor, Group,
    VGroup
)

class Foo(HasTraits):
    my_list = List()
    full_list = List()

    def _full_list_default(self):
        return [str(n) for n in range(10)]

    traits_view = View(Group(Item('my_list',
                                style='custom',
                                editor=CheckListEditor(name='full_list')),
                            orientation='vertical'),
                    scrollable=True,
                    height=100)

class FooContainingView(HasTraits):
    foo_1 = Instance(Foo)
    foo_2 = Instance(Foo)

    traits_view = View(
        VGroup(
            Item('foo_1',
                editor=InstanceEditor(),
                style='custom',
                show_label=False,
            ),
            Item('foo_2',
                editor=InstanceEditor(),
                style='custom',
                show_label=False,
            ),
        ),
        resizable=True,
    )


if __name__ == '__main__':
    f = Foo()
    fcv = FooContainingView(foo_1=Foo(), foo_2=Foo())
    fcv.configure_traits()
"
How to get the type of a variable defined in a protobuf message?,"import addressbook_pb2 as addressbook

typeDict = {""1"":""CGFloat"", ""2"":""CGFloat"", ""3"":""NSInteger"", ""4"":""NSUinteger"", ""5"":""NSInteger"", ""8"":""BOOL"", ""9"":""NSString"", ""13"":""NSUinteger"", ""17"":""NSInteger"", ""18"":""NSInteger""}

attrDict = {""CGFloat"":""assign"", ""NSInteger"":""assign"", ""NSUinteger"":""assign"", ""BOOL"":""assign"", ""NSString"":""copy""}

p = addressbook.Person()
all_fields = p.DESCRIPTOR.fields_by_name
field_keys = all_fields.keys()
for key in field_keys:
    one_field = all_fields[key]
    typeNumStr = str(one_field.type)
    className = typeDict.get(typeNumStr, ""NSObject"")
    attrStr = attrDict.get(className, ""retain"")
    propertyStr = ""@property (nonatomic, %s) %s *%s"" %(attrStr, className, key)
    print propertyStr
"
How does python do list slices and modification on the LHS?,">>> L[1:] = [5]
__setslice__ called with args: (1, 9223372036854775807, [5])
"
groupby issues of not recognizing numeric column pandas python,"#groupby and set rolling count from column Block
data[""Replicate""] = data.groupby([""Block"", ""Name""])[""Block""].transform(pd.rolling_count, window=3) 
"
proper xpath to roll up text of children,"
for row in tree.xpath(""//*[@class='asdf']""):
    print(""row: "", row.text_content())
"
How to make MxN piechart plots with one legend and removed y-axis titles in Matplotlib,"import matplotlib.pyplot as plt
import numpy as np
np.random.seed(123456)
import pandas as pd

def align_labels(labels):
    for text in labels:
        x, y = text.get_position()
        h_align = 'left' if x > 0 else 'right'
        v_align = 'bottom' if y > 0 else 'top'
        text.set(ha=h_align, va=v_align)

df = pd.DataFrame(3 * np.random.rand(4, 4), index=['a', 'b', 'c', 'd'],
                  columns=['x', 'y','z','w'])

plt.style.use('ggplot')
colors = plt.rcParams['axes.color_cycle']

fig, axes = plt.subplots(nrows=2, ncols=2)
for ax, col in zip(axes.flat, df.columns):
    artists = ax.pie(df[col], autopct='%.2f', pctdistance=1.05, colors=colors)
    ax.set(ylabel='', title=col, aspect='equal')
    align_labels(artists[-1])

fig.legend(artists[0], df.index, loc='center')

plt.show()
"
What is the best way to write a python iterator based on a generator,"class myIterator:
    def __init__(self, n):
        self.last = n
        self.next = self.myGenerator().next  # Use the generator `.next`

    def __iter__(self):
        return self

    def myGenerator(self):
        prev = 0
        fib = 1
        while fib < self.last:
            res = fib
            yield res
            fib += prev
            prev = res
"
Printing the values of a dictionary when its key is equal to the value of a list element,"for key in combo.viewkeys() & numb:
    print combo[key]
"
Replace part of a matched string in python,"from re import sub
with open(""/path/to/file"") as myfile:
    lines = []
    for line in myfile:
        line = sub('punctacros=""Tasla""(_.*)', r'TROGA\1', line)
        lines.append(line)
with open(""/path/to/file"", ""w"") as myfile:
    myfile.writelines(lines)
"
Python 3.4.3 and PySqlite3 not Inserting content on Table,"connection.close() 
"
Clock Based Methods in Python TKinter Window - Please Critique,"import Tkinter as tk

class ExampleApp(tk.Tk):
    def __init__(self):
        tk.Tk.__init__(self)
        self.label = tk.Label(self, text="""", width=10, font= (""Helvetica"",72), background='yellow', fg = 'red')
        self.label2 = tk.Label(self, text="""", width=10, font=(""Helvetica"",72), background='yellow', fg = 'blue')
        self.label.pack()
        self.label2.pack()
        self.intervals = [[30, ""Slow""], [60, ""Exercise 1""],
                          [30, ""Slow""], [60, ""Exercise 2""],
                          [30, ""Slow""], [60, ""Exercise 3""],
                          [30, ""Slow""], [60, ""Exercise 4""],
                          ]
        self.countdown()

    def countdown(self):
        (remaining, label) = self.intervals[0]
        self.label.configure(text=remaining)
        self.label2.configure(text=label)
        remaining -= 1
        if remaining < 0:
            self.intervals.pop(0)
        else:
            self.intervals[0][0] = remaining
        if len(self.intervals) > 0:
            self.after(1000, self.countdown)
        else:
            self.label.configure(text=""Done!"")

if __name__ == ""__main__"":
    app = ExampleApp()
    app.title(""Intense Workout"")
    app.geometry('550x550+200+200')
    app.configure(background='yellow')
    app.mainloop()
"
How to splice an audio file (wav format) into 1 sec splices in pyhton?,"from pydub import AudioSegment
from pydub.utils import make_chunks

myaudio = AudioSegment.from_file(""myAudio.wav"" , ""wav"") 
chunk_length_ms = 1000 # pydub calculates in millisec
chunks = make_chunks(myaudio, chunk_length_ms) #Make chunks of one sec

#Export all of the individual chunks as wav files

for i, chunk in enumerate(chunks):
    chunk_name = ""chunk{0}.wav"".format(i)
    print ""exporting"", chunk_name
    chunk.export(chunk_name, format=""wav"")
"
python - remove whitespaces that are not needed,">>> "" "".join(""text text                  blabla bla "".split())
'text text blabla bla'
"
Creating distinct objects in a function,"v = [ {} for _ in range(2)] 
"
How to line up columns when printing from 2d array in Python?,"myArray = [['Student Name','Marks','Level'],['Johnny',68,4],['Jennifer',59,3],['William',34,2]]
mx = len(max((sub[0] for sub in myArray),key=len))

for row in myArray:
    print("" "".join([""{:<{mx}}"".format(ele,mx=mx) for ele in row]))
"
"tkinter: slider (""scale"") with discrete steps?","def callback(event):
    current = event.widget.get()
    #compare value here and select nearest
    event.widget.set(newvalue)
"
Create many empty dictionary in Python,"from collections import OrderedDict
section_dict = OrderedDict((sec, {}) for sec in sections)
"
Weighted average using pivot tables in pandas,"import numpy as np
import pandas as pd

np.random.seed(0)

n = 50
df = pd.DataFrame({'count': np.random.choice(np.arange(10)+1, n),
                   'grid': np.random.choice(np.arange(10)+50, n),
                   'value': np.random.randn(n) + 12})

def wavg(val_col_name, wt_col_name):
    def inner(group):
        return (group[val_col_name] * group[wt_col_name]).sum() / group[wt_col_name].sum()
    inner.__name__ = 'wtd_avg'
    return inner

slick = df.groupby('grid').apply(wavg('value', 'count'))

print slick

grid
50      11.082474
51      11.801633
52      12.284358
53      11.368193
54      12.383458
55      11.300482
56      12.599349
57      12.724918
58      12.122797
59      12.009013
dtype: float64
"
Invert position of sublists,">>> list_1 = [[1,2,3], [4,5,6], [0,1,2], [6,5,3]]
>>> list(reversed(list_1))
[[6, 5, 3], [0, 1, 2], [4, 5, 6], [1, 2, 3]]
"
Python List Contraction,"from collections import defaultdict

friends = defaultdict(set)
friendpairs =  [[0,1], [0,4], [0,3], [0,432], [1,232], [1,2], [2,444], [2,12]]

for f1,f2 in friendpairs : friends[f1].add(f2)

friendOfFriends = dict( (guy,fr.copy()) for guy,fr in friends.iteritems())

for f1 in friendOfFriends:
    for f2 in friends[f1]:
        friendOfFriends[f1].update(friends[f2])
"
See what method was called on an object,"class Object(object):
    def __init__(self, real_obj):
        self.real_obj = real_obj

    def __getattr__(self, name):
        return getattr(self.real_obj, name)
"
"In Python's try... else... clause, why is the else claused parsed if try fails?","test = None
for num, line in enumerate(dataFile, 0):
    if myString in line:
        test = num
    if test is not None:
        if (num - test) <= 58:
            # do something
"
Lookarounds in python,">>> import re
>>> spacereplace = re.compile(r'(?<!\band)(?<!\bor)\s(?!or\b)(?!and\b)', re.I)
>>> q = ""a b (c or d)""
>>> spacereplace.sub("" and "", q)
'a and b and (c or d)' 
"
python numpy array / dict multiple inheritance,"# Let's suppose we have 30 observations with 5 variables each...
# The five variables are temp, pressure, x-velocity, y-velocity, and z-velocity
x = np.random.random((30, 5))

# Make a structured dtype to represent our variables...
dtype=dict(names=['temp', 'pressure', 'x_vel', 'y_vel', 'z_vel'],
           formats=5 * [np.float])

# Now view ""x"" as a structured array with the dtype we created...
data = x.view(dtype)

# Each measurement will now have the name fields we created...
print data[0]
print data[0]['temp']

# If we want, say, all the ""temp"" measurements:
print data['temp']

# Or all of the ""temp"" and ""x_vel"" measurements:
print data[['temp', 'x_vel']]
"
Optimize Double loop in python,"a = np.zeros((nx, nz))
stridetrick_einsum(c, rho[:-1,2:-3], a[1:-3,2:-3])
b = np.zeros((nx, nz))
b[2:-3,2:-3] = a[1:-4,2:-3]
a[1,2:-3] = 0.0
"
Sum values in a Python dict?,">>> from collections import Counter
>>> d =Counter()
>>> d.update({'key1':10,'key2':14,'key3':47})
>>> d['key1'] += 20
>>> d['key4'] += 50  # Also works for keys that are not present
>>> d
Counter({'key4': 50, 'key3': 47, 'key1': 30, 'key2': 14})
"
how to convert from longitude and latitude to country or city?,"from urllib2 import urlopen
import json
def getplace(lat, lon):
    url = ""http://maps.googleapis.com/maps/api/geocode/json?""
    url += ""latlng=%s,%s&sensor=false"" % (lat, lon)
    v = urlopen(url).read()
    j = json.loads(v)
    components = j['results'][0]['address_components']
    country = town = None
    for c in components:
        if ""country"" in c['types']:
            country = c['long_name']
        if ""postal_town"" in c['types']:
            town = c['long_name']
    return town, country


print(getplace(51.1, 0.1))
print(getplace(51.2, 0.1))
print(getplace(51.3, 0.1))
"
wxPython .SetFocus() on ID,"self.controls = []
for i in range(100):
    control = wx.TextCtrl(self, -1, '')
    self.controls.append(control)
    sizer.Add(control)

...

self.controls[12].SetFocus()
"
PYTHONPATH vs. sys.path (RELOADED),"from package import lib
lib.foo()
"
Datetime to decimal to pull into matplotlib with Python,"total_seconds = lambda td: (td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6 
"
Regex extract element after string,">>> prefix = 'Name: '
>>> s[len(prefix):].split(', ' + prefix)
['John', 'Abby', 'Kate']
"
How to make an argument in python accept multiple inputs,"def censored(sentence, words):
  for word in words:    
    if word in sentence:
        sentence = sentence.replace(word, ""*"" * len(word))
  return sentence
print censored(""foo off"", (""foo"", ""bar""))
print censored(""foo off"", [""foo"", ""bar""])
"
Better way to create fit functions with changing number of parameters in Python with Scipy curve_fit,"m_hat, residuals, rank, singular_vals = np.linalg.lstsq(x, y)
"
How to split 1D array into 2D array in NumPy by splitting the array at the last element?,"np.split(a, [-1])"
How do you find the IQR in Numpy?,"q75, q25 = np.percentile(x, [75 ,25])
iqr = q75 - q25
"
Permute a tuple by a list of indices,"In [1]: my_tuple = (10, 20, 30)
   ...: new_positions = [2, 0, 1]
   ...: 

In [2]: my_shuffled_tuple = tuple(my_tuple[i] for i in new_positions)

In [3]: my_shuffled_tuple
Out[3]: (30, 10, 20)
"
how to get tags when attribute is chinese in beautifulsoup,"img_urls = form_soup.findAll('a', title=u'\u67e5\u770b\u5927\u56fe')
"
How to replace the the diagonal elements of a matrix by a vector in SymPy?,"l = symbols('x1 x2 x3')
mat = diag(*l)-eye(3)+ones(3)
"
Python: most efficient way to convert date to datetime,">>> import datetime
>>> my_date = datetime.date.today()
>>> datetime.datetime.combine(my_date, datetime.time.min)
datetime.datetime(2013, 3, 27, 0, 0)
"
Get index of the top n values of a list in python,"sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]"
How to kill a process within a thread in python?,"import subprocess
import threading
import signal

def kill_this(procs, hard=False):
    """"""kill the process pids in the list""""""

    for proc in procs:
        if hard:
            os.kill(pid, signal.SIGKILL)
        else:
            proc.terminate(pid, signal.SIGTERM)
"
Perl unpack to Python Conversion,"
>>> val = 15
>>> int(str(val), base=16)
21
"
"numpy, named columns","a = range(100)
A = array(a).reshape( len(a)/2, 2)
A = A.ravel().view([('col1','i8'),('col2','i8'),]).astype([('col1','i4'),('col2','i8'),])
print(A[:5])
# array([(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)], 
#       dtype=[('col1', '<i4'), ('col2', '<i8')])

print(A.dtype)
# dtype([('col1', '<i4'), ('col2', '<i8')])
"
Directory listing,"for (dirname, dirnames, filenames) in os.walk('.'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass"
Can't figure out how to print * & whitespace vertically instead of hoirzontally,"numbers = [5,1,5,2,4]

for h in range(max(numbers), 0, -1):
   for x in numbers:
      if x >= h:
        print '*',
      else:
        print ' ',
   print """"
"
Python 2.7 Convert Letters to Phone Numbers,"# get input and join all converted char from generator
while True:
    phone = raw_input('enter phone number in the format xxxxxxx, or enter ""end"" for termination ').lower()

    if phone == 'end':
        break

    print ''.join(list(alph_to_num(phone)))
"
Using Pandas to export multiple rows of data to a csv,"In [18]: df = pd.DataFrame.from_records([""foobar,""+""bar""])

In [19]: df
Out[19]: 
   0  1  2  3  4  5  6  7  8  9
0  f  o  o  b  a  r  ,  b  a  r

In [20]: df = pd.DataFrame([""foobar,""+""bar""])

In [21]: df
Out[21]: 
            0
0  foobar,bar
"
How do I ignore the first(or certain) lines when parsing a string/file in python?,"country_id = 56451
country_url = ""http://www.blocgame.com/stats.php?id="" + str(country_id)
country_source = urllib.request.urlopen(country_url)

country_page = BeautifulSoup(country_source)
country_text = country_page.text
rawAirforce = country_text.split(""Airforce:"")[1]
navyArray = rawAirforce.split(""Navy:"")
airforce = navyArray[0].strip()
navy = navyArray[1].split(""Chemical Weapons:"")[0].strip()
print(""Airforce: "" + airforce + "" Navy: "" + navy)
"
csv: writer.writerows() splitting my string inputs,">>> import csv
>>> list_results = ['False, 60, 40 ', 'True, 70, 30, ']
>>> import csv
>>> import sys
>>> list_results = ['False, 60, 40 ', 'True, 70, 30, ']
>>> writer = csv.writer(sys.stdout)
>>> writer.writerow(('Correct?', 'Successes', 'Failures'))
Correct?,Successes,Failures
>>> for row in list_results:
...     columns = [c.strip() for c in row.strip(', ').split(',')]
...     writer.writerow(columns)
...
False,60,40
True,70,30
>>> writer.writerows([c.strip() for c in r.strip(', ').split(',')]
...                  for r in list_results)
False,60,40
True,70,30
"
How to remove duplicates from a list in python,"def levenshteinDistance (s, t):
    if len(s) == 0:
        return len(t)
    if len(t) == 0:
        return len(s)
    return min(levenshteinDistance(s[:-1], t) + 1, levenshteinDistance(s, t[:-1]) + 1, levenshteinDistance(s[:-1], t[:-1]) + (0 if s[-1] == t[-1] else 1))

def isSimilar (s, t):
    return levenshteinDistance(s, t) < 2
"
python bottle integration tests,"class TestBottleServer(object):
    """"""
    Starts a local instance of bottle container to run the tests against.
    """"""
    is_running = False

    def __init__(self, app=None, host=""localhost"", port=3534, debug=False, reloader=False, server=""tornado""):
        self.app = app
        self.host = host
        self.port = port
        self.debug = debug
        self.reloader = reloader
        self.server = server

    def ensured_bottle_started(self):
        if TestBottleServer.is_running is False:
            start_new_thread(self.__start_bottle__, (), {})
            #Sleep is required for forked thread to initialise the app
            TestBottleServer.is_running = True
            time.sleep(1)

    def __start_bottle__(self):
        run(
            app=self.app,
            host=self.host,
            port=self.port,
            debug=self.debug,
            reloader=self.reloader,
            server=self.server)

    @staticmethod
    def restart():
        TestBottleServer.is_running = False
        TestBottleServer.ensured_bottle_started()


TEST_BOTTLE_SERVER = TestBottleServer()
"
"How to generate documentation from python code looking like ""python shell output""","import code

console = code.InteractiveConsole()

more_input = False
with open('example.py') as source:
    for line in source:
        if not more_input:
            print('>>> ' + line.rstrip())
        else:
            print('... ' + line.rstrip())

        more_input = console.push(line)
"
Join a list of strings such that each string is within quotes and comma separated,"', '.join(['""{}""'.format(value) for value in lst])
"
pyparsing with starting and ending string being the same,"from pyparsing import *

test = """"""\
#
here
are
some
strings
#
and
some
others
 #
 with
 different
 levels
 #
 of
  #
  indentation
  #
 #
#""""""

# newlines are significant for line separators, so redefine 
# the default whitespace characters for whitespace skipping
ParserElement.setDefaultWhitespaceChars(' ')

NL = LineEnd().suppress()
HASH = '#'
HASH_SEP = Suppress(HASH + Optional(NL))

# a normal line contains a single word
word_line = Word(alphas) + NL


indent_stack = [1]

# word_block is recursive, since word_blocks can contain word_blocks
word_block = Forward()
word_group = Group(OneOrMore(word_line | ungroup(indentedBlock(word_block, indent_stack))) )

# now define a word_block, as a '#'-delimited list of word_groups, with 
# leading and trailing '#' characters
word_block <<= (HASH_SEP + 
                 delimitedList(word_group, delim=HASH_SEP) + 
                 HASH_SEP)

# the overall expression is one large word_block
parser = word_block

# parse the test string
parser.parseString(test).pprint()
"
how to test if there is any word matched the string in Python,"if any(x in string for x in word_list)
    print x
"
Variable web link in python,"""""""<h3><a href=""{}"">Download zip file</a></h3>"""""".format(movedZip)
"
"CSS selectors to query by attribute alone, with LXML","//*[@*[contains(.,'{%')]]
"
Python generator cannot be converted to list,">>> res = wrapper([1, 2, 3])
>>> res[0] is res[1]
True
>>> res[0] is res[2]
True
>>> res[0][0] = 42
>>> res
[[42, 2, 3], [42, 2, 3], [42, 2, 3], [42, 2, 3], [42, 2, 3], [42, 2, 3]]
"
Create a nested dictionary for a word python,">>> from collections import defaultdict
>>> def tree():
...     return defaultdict(tree)
... 
>>> nested = defaultdict(tree)
>>> words = ['Apple','Ape','Bark','Barn']
>>> for word in words:
...     node = nested
...     for char in word:
...         node = node[char.upper()]
... 
>>> nested
defaultdict(<function tree at 0x114e62320>, {'A': defaultdict(<function tree at 0x114e62320>, {'P': defaultdict(<function tree at 0x114e62320>, {'P': defaultdict(<function tree at 0x114e62320>, {'L': defaultdict(<function tree at 0x114e62320>, {'E': defaultdict(<function tree at 0x114e62320>, {})})}), 'E': defaultdict(<function tree at 0x114e62320>, {})})}), 'B': defaultdict(<function tree at 0x114e62320>, {'A': defaultdict(<function tree at 0x114e62320>, {'R': defaultdict(<function tree at 0x114e62320>, {'K': defaultdict(<function tree at 0x114e62320>, {}), 'N': defaultdict(<function tree at 0x114e62320>, {})})})})})
>>> def print_nested(d, indent=0):
...     for k, v in d.iteritems():
...         print '{}{!r}:'.format(indent * '  ', k)
...         print_nested(v, indent + 1)
... 
>>> print_nested(nested)
'A':
  'P':
    'P':
      'L':
        'E':
    'E':
'B':
  'A':
    'R':
      'K':
      'N':
"
How to sort two columns at once using sorted(),"sortedColumn = sorted(csv_opener, key=lambda row: (row[0], -int(row[1])))
"
"How to scrape onclick value (<li><a id=""FR123456"" onclick=) and its name and image using python?","from HTMLParser import HTMLParser

# create a subclass and override the handler methods
class MyHTMLParser(HTMLParser):

    srces = []
    datas = []
    onclicks = []

    def handle_starttag(self, tag, attrs):
        for attr in attrs:
            if attr[0] == 'src':
                 self.srces.append(attr[1])
            if  attr[0] == 'onclick':
                  self.onclicks.append(attr[1].split(""getit('"")[1].split(""',"")[0])


    def handle_data(self, data):
        if data != "" "" and not data.startswith('\n'):
           self.datas.append(data)

parser = MyHTMLParser()
parser.feed("""""" <li><a id=""FR123456"" onclick=""setFood(false);setSeasonFruitID('123456');getit('call.php?category=fruits&amp;fruitid=123456&amp;',detailFruit,false);"">mango season</a><img src=""http://imagehosting.com/images/fru_123456.png"">
                </li>

    <li><a id=""FR123457"" onclick=""setFood(false);setSeasonFruitID('123457');getit('call.php?category=fruits&amp;fruitid=123457&amp;',detailFruit,false);"">cherry season</a><img src=""http://imagehosting.com/images/fru_123457.png"">
                </li>""""""
)


#To fit your output
for i in range(0,len(parser.srces)):
    print ""1: "" + parser.onclicks[i] + ""\n"" + ""2: "" + parser.datas[i] + ""\n"" + ""3: "" + parser.srces[i] + ""\n""


#  Output
# 1: call.php?category=fruits&fruitid=123456&
# 2: mango season
# 3: http://imagehosting.com/images/fru_123456.png

# 1: call.php?category=fruits&fruitid=123457&
# 2: cherry season
# 3: http://imagehosting.com/images/fru_123457.png
"
How to get distinct values from PyMongo,"for testy in collection.distinct('stores', {'dept': 'A'}):
    print(testy)
"
Connecting rows in a list if they exist?,"    fid = open('out.txt','r')
    lines = fid.readlines()

    key = ''
    group = []
    graph = {}
    for l in lines:
        if l[0]=='-':
            graph[key]=group
            key = ''
            group = []
        else:
            sp = l.split()
            key = sp[0]
            group.append(sp[1])

    print(graph)
"
Changing textvariable for single OptionMenu in loop Tkinter,"for row_number, row_data in enumerate(info):
    self.variable = StringVar(...)
"
Aesthetic way of appending to a list in Python?,"In [78]: import numpy as np

In [79]: phi = np.array([1, 2, 3, 4])

In [80]: radius = 6

In [81]: 2 * np.pi * radius * np.cos(phi)
Out[81]: array([ 20.36891706, -15.68836613, -37.32183785, -24.64178397])
"
Getting values live from a logfile into a string for caculations using Python,"import re

# Suppose line has the data in your question
line = '1.190476e-05    ((6.882904e-04 3.133477e-04 -5.099806e+02) (8.595292e-08 1.222541e-08 -1.198233e-04) (0.000000e+00 0.000000e+00 0.000000e+00)) ((-1.555656e-05 2.712085e-05 2.977440e-06) (4.087154e-09 1.635450e-08 -2.306391e-08) (0.000000e+00 0.000000e+00 0.000000e+00))'

numbers = re.findall('[0-9]\.[0-9]+e[+-][0-9]{2}', line)
"
acount total number of letter ONLY alphabet,"def count():
    with open(""xxx.txt"",""r"") as file:
        return len(re.findall('[a-zA-Z]', file.read()))
"
Getting indices of True values in a boolean list,">>> from itertools import compress
>>> list(compress(xrange(len(t)), t))
[4, 5, 7]
>>> t = t*1000
>>> %timeit [i for i, x in enumerate(t) if x]
100 loops, best of 3: 2.55 ms per loop
>>> %timeit list(compress(xrange(len(t)), t))
1000 loops, best of 3: 696 µs per loop
"
Move given row to end of DataFrame,"In [210]:
df = pd.DataFrame({'a':np.arange(5)})
df

Out[210]:
   a
0  0
1  1
2  2
3  3
4  4

In [206]:
target_row = df.ix[[2],:]
target_row

Out[206]:
   a
2  2

In [211]:
df = df.shift()
df.iloc[0] = target_row.squeeze()
df

Out[211]:
   a
0  2
1  0
2  1
3  2
4  3
"
Python - extending properties like you'd extend a function,"class A(object):

    def __init__(self):
        self.__prop = None

    @property
    def prop(self):
        return self.__prop

    @prop.setter
    def prop(self, value):
        self.__prop = value

class B(A):

    def __init__(self):
        super(B, self).__init__()

    @property
    def prop(self):
        return A.prop.fget(self)

    @prop.setter
    def prop(self, value):
        value['extra'] = 'stuff'
        A.prop.fset(self, value)
"
"Get index from a list where the key changes, groupby","[tuple(group)[-1][0] for key, group in 
        groupby(enumerate(myList), key=itemgetter(1))][:-1]
"
Numpy: use reshape or newaxis to add dimensions,"In [94]: b.__array_interface__
Out[94]: 
{'data': (162400368, False),
 'descr': [('', '<f8')],
 'shape': (5,),
 'strides': None,
 'typestr': '<f8',
 'version': 3}

In [95]: b[None,:].__array_interface__
Out[95]: 
{'data': (162400368, False),
 'descr': [('', '<f8')],
 'shape': (1, 5),
 'strides': (0, 8),
 'typestr': '<f8',
 'version': 3}

In [96]: b.reshape(1,5).__array_interface__
Out[96]: 
{'data': (162400368, False),
 'descr': [('', '<f8')],
 'shape': (1, 5),
 'strides': None,
 'typestr': '<f8',
 'version': 3}
"
Getting the date of the last day of this [week/month/quarter/year],">>> d = datetime.date.today()
"
python string in-place modification,"from UserString import MutableString
x = MutableString('abc')
x[1], x[0] = x[0], x[1]
>>>>'bac'
"
Why is python skipping these lines of code?,"circles = []
countY = 750
circles.append((pygame.color.Color('black'), (150, countY), 25, 0))
circles.append((pygame.color.Color('black'), (250, countY), 25, 0))
circles.append((pygame.color.Color('white'), (450, countY), 25, 0))
circles.append((pygame.color.Color('white'), (550, countY), 25, 0))

while game:
    window.fill(grey)
    for event in pygame.event.get():
        # pygame.event.get() don't call pygame.event.get() twice

        if event.type == pygame.KEYDOWN and event.key == pygame.K_a:
            diceRoll = random.randint(1, 4)
            circles.append((pygame.color.Color('black'), (150, countY - 72 * diceRoll), 25, 0))

    for (color, pos, rad, w) in circles:
        pygame.draw.circle(window, color, pos, rad, w)
    pygame.display.flip()
"
Adding numpy arrays in specific way,"out = np.zeros(np.max(row_lengths) + nr - 1, a.dtype)

for ii, aa in enumerate(arr_list):
    out[ii:(ii + row_lengths[ii])] += aa

print(out)
# [ 1  4  9 12 10  6]
"
Proper way to destroy a file chooser dialog in pygtk for python,"def run_folder_chooser_dialog():
    result= []

    def run_dialog(_None):
        dialog = Gtk.FileChooserDialog(""Please choose a folder"", None,
        Gtk.FileChooserAction.SELECT_FOLDER,
            (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
            ""Select"", Gtk.ResponseType.OK))

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            result.append(dialog.get_filename())
        else:
            result.append(None)

        dialog.destroy()
        Gtk.main_quit()


    Gdk.threads_add_idle(GLib.PRIORITY_DEFAULT, run_dialog, None)
    Gtk.main()
    return result[0]
"
wxPython: Is there a way to change the colour of the Scrollbar in a wx.ScrolledWindow?,"sw = wx.ScrolledWindow(self)
for child in sw.GetChildren():
  if isinstance(child, wx.ScrollBar):
    print child
    child.SetBackgroundColour(...)
"
Python class instance not being destroyed at end of method,"class Reader:
    m_headers = []
    m_seclist = []


    def __init__(self, filename):
"
List Manipulation in Python with pop()," newlist = [x for x in oldlist if x not in ['a', 'c'] ]
"
Filter directory when using shutil.copytree?,"shutil.copytree('/Full/Path', 'target',
              ignore=lambda directory, contents: ['Common'] if directory == '/Full/Path/To/aDir' else [])
"
Padding specified in style ignored by Ttk Frame,">>> from tkinter import *
>>> from tkinter.ttk import *
>>> style = Style()
>>> style.theme_use('default') # select the Unix theme
>>> style.layout(""TFrame"")
[('Frame.border', {'sticky': 'nswe'})]
"
recursive closures (function generator),">>> counter = 0
>>> def adder(x, y):
...   global counter
...   counter += 1
...   return x + y
... 
>>> def op(d):
...   if d <= 1: return adder
...   return lambda x,y:reduce(op(d-1),(x for i in xrange(y)))
...
>>> op(5)(2,4)
32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230656L
>>> counter
65035
>>> counter = 0
>>> op(3)(4,100)
>>> counter
297
"
How to remove file when program exits?,"import shutil
import sys
import tempfile

from contextlib import contextmanager


@contextmanager
def tempdir():
    path = tempfile.mkdtemp()
    try:
        yield path
    finally:
        try:
            shutil.rmtree(path)
        except IOError:
            sys.stderr.write('Failed to clean up temp dir {}'.format(path))
"
Split string into a list,"text.split(',')"
Show hidden option using argparse,"import sys
show_hidden_args = '--help-long' in sys.argv

opt = argparse.ArgumentParser()
opt.add_argument('--hidden-arg', help='...' if show_hidden_args else argparse.SUPPRESS)
opt.add_argument('--help-long', help='Show all options.', action='help')


args = opt.parse_args()
"
Bradley adaptive thresholding algorithm,"import numpy as np

def adaptive_thresh(input_img):

    h, w = input_img.shape

    S = w/8
    s2 = S/2
    T = 15.0

    #integral img
    int_img = np.zeros_like(input_img, dtype=np.uint32)
    for col in range(w):
        for row in range(h):
            int_img[row,col] = input_img[0:row,0:col].sum()

    #output img
    out_img = np.zeros_like(input_img)    

    for col in range(w):
        for row in range(h):
            #SxS region
            y0 = max(row-s2, 0)
            y1 = min(row+s2, h-1)
            x0 = max(col-s2, 0)
            x1 = min(col+s2, w-1)

            count = (y1-y0)*(x1-x0)

            sum_ = int_img[y1, x1]-int_img[y0, x1]-int_img[y1, x0]+int_img[y0, x0]

            if input_img[row, col]*count < sum_*(100.-T)/100.:
                out_img[row,col] = 0
            else:
                out_img[row,col] = 255

    return out_img
"
updating XML attribute value in python,"for node in tree.findall('.//{XYZ}grandParent'):
    print node
"
Most Pythonic and efficient way to insert character at end of string if not already there,"b = b + 's' if not b.endswith('s') else b
"
Arranging one items per one column in a row of csv file in scrapy python,">>> inputs = [{
...  ""author"": [""TIM ROCK""], 
...  ""book_name"": [""Truk Lagoon, Pohnpei &amp; Kosrae Dive Guide""], 
...  ""category"": ""Travel"", 
... },
... {
...  ""author"": [""JOY""], 
...  ""book_name"": [""PARSER""], 
...  ""category"": ""Accomp"", 
... }
... ]
>>> 
>>> from csv import DictWriter
>>> from cStringIO import StringIO
>>> 
>>> buf=StringIO()
>>> c=DictWriter(buf, fieldnames=['author', 'book_name', 'category'])
>>> c.writeheader()
>>> c.writerows(inputs)
>>> print buf.getvalue()
author,book_name,category
['TIM ROCK'],""['Truk Lagoon, Pohnpei &amp; Kosrae Dive Guide']"",Travel
['JOY'],['PARSER'],Accomp
"
Access overridden class variable in parent of subclass,"class Foo():
    var = ""Foo""

    @classmethod
    def print_var(cls):
        print(cls.var)

class Bar(Foo):
    var = ""Bar""
"
Zip string-subset from tuples in a list,"[""|"".join(values) for values in zipped]
"
How can I speed up an iteration in python?,"In [76]: a=['a','b','c','d','e','f','g','h','i','j']

In [77]: b=['b','f','g','j']

In [78]: dic={x:i for i,x in enumerate(b)}

In [79]: dic
Out[79]: {'b': 0, 'f': 1, 'g': 2, 'j': 3}

In [81]: [dic.get(x,'-999') for x in a]
Out[81]: ['-999', 0, '-999', '-999', '-999', 1, 2, '-999', '-999', 3]
"
A regular expression using a list of words,"if m.groupdict()['name'] == 'sugar':
  …
amount = int(m.groupdict()['amount'])
unit = m.groupdict()['unit']
"
"Match two Python lists with regular expressions, and create dictionary output","ref_re = [ re.compile(r) for r in ref ]
output = { i : [ r.pattern for r in ref_re if r.match(i) ] for i in input }
"
Python: Get data BeautifulSoup,"soup.find_all(attrs={""face"":""arial"",""font-size"":""16px"",""color"":""navy""})
"
slicing a matrix in python vs matlab,"s = Mtx.sum(0)
newMtx = Mtx[:,(s.A1 > 0)]
"
Multiplying Rows and Columns of Python Sparse Matrix by elements in an Array,"numpy.dot(numpy.dot(a, m), a)"
Typo - For loop not working correctly with argument,"from random import randint

def digit_string(length):
    return ""{0:0{1}d}"".format(randint(0, 10**length - 1), length)
"
Create a decorator that has access to both the arguments and function,">>> def a(func):
...     def x(*args, **kwargs):
...             print(args, kwargs)
...             func(*args, **kwargs)
...     return x
...
>>> @a
... def b(y):
...     print(""In b"", y)
...
>>> b(""Hello"")
('Hello',) {}
In b Hello
"
Appending to every printed message,"from __future__ import print_function
# Note: If you are using Python 3 leave this line out
# This must be the first statement before other statements.
# You may only put a quoted or triple quoted string, 
# Python comments or blank lines before the __future__ line.
import sys

def print(*args, **kwargs):
    """"""My custom print() function.""""""
    # Adding new arguments to the print function signature 
    # is probably a bad idea.
    # Instead consider testing if custom argument keywords
    # are present in kwargs
    sys.stdout.write('hello')
    return __builtins__.print(*args, **kwargs)

print (""hello there"")
print ("" hi again"")
"
what would be the python code to add time to a specific timestamp?,"datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')"
Apply a comparison between two numpy.arrays to only one column but retrieve whole rows,"np.where((a[:,0] < b[:,0])[:,None],a,b)
"
Creating an array of objects in python without having to append in a loop,"my_objects = [MyClass(0) for _ in xrange(100)]
"
BeautifulSoup4 Python 3.4 Scraping Issue,"soup.find(""td"", class_=""pizza"", text=lambda text: text and text.strip() != ""cheese"")
"
SQLAlchemy: several counts in one query,"print (Query([
    Parent,
    func.count(Child.id),
    func.count(case(
        [((Child.naughty == True), Child.id)], else_=literal_column(""NULL""))).label(""naughty"")])

    .join(Parent.children).group_by(Parent)
    )
"
"read csv file with header and data, and convert to xls file","for rowi, row in enumerate(reader):
    for coli, value in enumerate(row):
        try:
            value = int(value)
        except ValueError as e:
            pass
        sheet.write(rowi, coli, value)
"
How to sort alphanumeric list of Django model objects,"l.sort(key=lambda x: _human_key(x.name))
print [o.name for o in l]
['a', 'AA', 'AB']
"
How to scroll Panel with GridBagSizer in wxPython,"import wx
import wx.lib.scrolledpanel as scrolled
class MyPanel(scrolled.ScrolledPanel):

    def __init__(self, parent):
        scrolled.ScrolledPanel.__init__(self, parent, -1)
        self.SetAutoLayout(1)
        self.SetupScrolling()
"
python3 interpret ascii string as unicode string,"data = rb'''\xF0\x9F\x98\x81
\xF0\x9F\x98\x82
\xF0\x9F\x98\x83
\xF0\x9F\x98\x84
\xF0\x9F\x98\x85'''

data = data.decode('unicode-escape').encode('latin-1').decode('utf8')
print(ascii(data))
print(data)
"
pandas: how to read file with divided rows,"print range(0, 10)[1::2]
[1, 3, 5, 7, 9]

#after testing replace io.StringIO(temp) to filename
df1 = pd.read_csv(io.StringIO(temp), 
                  sep='\s+', 
                  header=0, 
                  index_col=None, 
                  skiprows=(range(0, 10)[1::2]))
print df1
   var1  var2  var3
0     1     2     3
1     1     2     3
2     1     2     3

print range(2, 10)[::2]
[2, 4, 6, 8]

#after testing replace io.StringIO(temp) to filename
df2 = pd.read_csv(io.StringIO(temp), 
                  sep='\s+', 
                  header=1, 
                  index_col=None, 
                  skiprows=(range(2, 10)[::2]))
print df2
   var4  var5  var6
0     4     5     6
1     4     5     6
2     4     5     6
"
scale two matrices with scipy or sklearn,"from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(X1)
output = scaler.transform(X2)
"
"Unwrapping Numpy ""object"" dtypes","np.concatenate(A)
"
Python Dictionary Update and Append,">>> from collections import defaultdict
>>> d = defaultdict(set)
>>> d.update({""TIM"":set([('xx', 'yy'), ('aa', 'bb')]), ""SAM"":set([('yy', 'cc')])})
>>> d[""SAM""].add(('tt','uu'))
>>> d[""KIM""].add(('ii','pp'))
>>> d
defaultdict(<type 'set'>, {'TIM': set([('xx', 'yy'), ('aa', 'bb')]), 'KIM': set([('ii', 'pp')]), 'SAM': set([('tt', 'uu'), ('yy', 'cc')])})
"
Python regex string groups capture,"reportPat=re.compile(
   r'(Clinical details|indication)(.*)'
   r'(result|description|report)(.*?)'
   r'(?:(Interpretation|conclusion)(.*))?$',
   re.IGNORECASE|re.DOTALL)
"
Provide remote shell for Python script,"def initIPythonKernel():
  # You can remotely connect to this kernel. See the output on stdout.
  try:
    import IPython.kernel.zmq.ipkernel
    from IPython.kernel.zmq.ipkernel import Kernel
    from IPython.kernel.zmq.heartbeat import Heartbeat
    from IPython.kernel.zmq.session import Session
    from IPython.kernel import write_connection_file
    import zmq
    from zmq.eventloop import ioloop
    from zmq.eventloop.zmqstream import ZMQStream
    IPython.kernel.zmq.ipkernel.signal = lambda sig, f: None  # Overwrite.
  except ImportError, e:
    print ""IPython import error, cannot start IPython kernel. %s"" % e
    return
  import atexit
  import socket
  import logging
  import threading

  # Do in mainthread to avoid history sqlite DB errors at exit.
  # https://github.com/ipython/ipython/issues/680
  assert isinstance(threading.currentThread(), threading._MainThread)
  try:
    connection_file = ""kernel-%s.json"" % os.getpid()
    def cleanup_connection_file():
      try:
        os.remove(connection_file)
      except (IOError, OSError):
        pass
    atexit.register(cleanup_connection_file)

    logger = logging.Logger(""IPython"")
    logger.addHandler(logging.NullHandler())
    session = Session(username=u'kernel')

    context = zmq.Context.instance()
    ip = socket.gethostbyname(socket.gethostname())
    transport = ""tcp""
    addr = ""%s://%s"" % (transport, ip)
    shell_socket = context.socket(zmq.ROUTER)
    shell_port = shell_socket.bind_to_random_port(addr)
    iopub_socket = context.socket(zmq.PUB)
    iopub_port = iopub_socket.bind_to_random_port(addr)
    control_socket = context.socket(zmq.ROUTER)
    control_port = control_socket.bind_to_random_port(addr)

    hb_ctx = zmq.Context()
    heartbeat = Heartbeat(hb_ctx, (transport, ip, 0))
    hb_port = heartbeat.port
    heartbeat.start()

    shell_stream = ZMQStream(shell_socket)
    control_stream = ZMQStream(control_socket)

    kernel = Kernel(session=session,
                    shell_streams=[shell_stream, control_stream],
                    iopub_socket=iopub_socket,
                    log=logger)

    write_connection_file(connection_file,
                          shell_port=shell_port, iopub_port=iopub_port, control_port=control_port, hb_port=hb_port,
                          ip=ip)

    print ""To connect another client to this IPython kernel, use:"", \
          ""ipython console --existing %s"" % connection_file
  except Exception, e:
    print ""Exception while initializing IPython ZMQ kernel. %s"" % e
    return

  def ipython_thread():
    kernel.start()
    try:
      ioloop.IOLoop.instance().start()
    except KeyboardInterrupt:
      pass

  thread = threading.Thread(target=ipython_thread, name=""IPython kernel"")
  thread.daemon = True
  thread.start()
"
How to make Mac OS use the python installed by Hombrew,"$ which python3
/usr/local/bin/python3
"
How to only print certain text using BeautifulSoup,">>> import csv
>>> import sys
>>> csv_file = sys.stdout
>>> writer = csv.writer(csv_file, delimiter=""|"")
>>> soup = BeautifulSoup(""<tr><td>1<td>&nbsp;<td>3"",
...                      convertEntities=BeautifulSoup.HTML_ENTITIES)
>>> writer.writerows([''.join(t.encode('utf-8') for t in td(text=True))
...                   for td in tr('td')] for tr in soup('tr'))
1| |3
"
How to remove all non-integer values in python,"Examples
>>> your_string = 'asd8asdf798fad'
>>> print ''.join(x for x in your_string if x.isdecimal())
8798

>>> '1'.isdecimal()
True

>>> 'a'.isdecimal()
False
"
"Iterating over a numpy array, selectively picking one or two values, given a criterion","def np_unpack(data) :
    # find where condition is met
    mask = (data & 0x01).astype(bool)
    # Keep only 1st, 3rd, 5th... consecutive occurrences of True in mask
    new_mask = mask[:]
    mult = -1
    while new_mask.sum() :
        new_mask = np.logical_and(new_mask,
                                  np.concatenate(([False], new_mask[:-1])))
        mask +=  new_mask * mult
        mult *= -1
    del new_mask
    cond = np.nonzero(mask)[0]
    result = np.empty(data.shape, dtype='int16')
    result[:] = data.astype('int8') >> 1
    result[cond] <<= 8
    result[cond] += data[cond + 1]
    mask = np.ones(data.shape, dtype=bool)
    mask[cond + 1] = False
    return result[mask]
"
Import csv as list of list in python 3.3,"import ast
import csv

def convert_type(s):
    try:
        return ast.literal_eval(s)
    except (ValueError, SyntaxError):
        return s

def convert_csv_row(lst):
    return [convert_type(x) for x in lst]

data = csv.reader(open('pppp.csv','r', newline=''))
converted = [convert_csv_row(row) for row in data]
print(converted)
"
Python compare 2 lists filled with 3-tuples,"tuple1 = [(1,1,123),(1,2,124),(2,1,231),(2,2,123)]
tuple2 = [(1,1,123),(1,2,124),(2,1,231),(2,2,13), (0,0)]
changed = False
info = """"
if len(tuple1) != len(tuple2):
    info += ""Added "" + str(tuple2[-1])
for e1, e2 in zip(tuple1, tuple2):
    if e1 != e2:
        info += "" Changed a["" + str(tuple2.index(e2)) + ""] to "" + str(e2)
print(info)
"
chunk a text database into N equal blocks and retain header,"from itertools import islice

headers_count = 5
chunk_size = 250000

with open('file') as fin:
  headers = list(islice(fin, headers_count))

  part = 1
  while True:
    line_iter = islice(fin, chunk_size)
    try:
      first_line = line_iter.next()
    except StopIteration:
      break
    with open('part%d' % part, 'w') as fout:
      for line in headers:
        fout.write(line)
      fout.write(first_line)
      for line in line_iter:
        fout.write(line)
    part += 1
"
Extract data from HTML table using Python,"import lxml.html as lh

content='''\
<table border=1>
<tr>
<td><b>Component</b></td>
<td><b>Status</b></td>
<td><b>Time / Error</b></td>
</tr>
<tr><td>SAVE_DOCUMENT</td><td>OK</td><td>0.408 s</td></tr>
<tr><td>GET_DOCUMENT</td><td>OK</td><td>0.361 s</td></tr>
<tr><td>DVK_SEND</td><td>OK</td><td>0.002 s</td></tr>
<tr><td>DVK_RECEIVE</td><td>OK</td><td>0.002 s</td></tr>
<tr><td>GET_USER_INFO</td><td>OK</td><td>0.135 s</td></tr>
<tr><td>NOTIFICATIONS</td><td>OK</td><td>0.002 s</td></tr>
<tr><td>ERROR_LOG</td><td>OK</td><td>0.001 s</td></tr>
<tr><td>SUMMARY_STATUS</td><td>OK</td><td>0.913 s</td></tr>
</table>
'''
tree=lh.fromstring(content)
for key, status, t in zip(*[iter(tree.xpath('//td/text()'))]*3):
    print('''{k}_STATUS = ""{s}""
{k}_TIME = ""{t}""'''.format(k=key,s=status,t=t.rstrip(' s')))
"
Python Regular Expressions re.findall -- split a string into two,">>> import re
>>> s = ""C BOS  - Traded from Royal Disappointments""
>>> re.split(r'\s*-\s*', s)
['C BOS', 'Traded from Royal Disappointments']
"
Using NumPy in the correct way to apply a function to specific points in an array,"tmp = np.eye(3)
offsets = np.concatenate((tmp, -tmp, [[0, 0, 0]]), 0).astype(int)[:, None, :]

def fast_cF2(cArr, cEDA):
    cArr = cArr[:, 1:4]
    t = cArr[None,:,:] + offsets
    X0, Y0, Z0 = t[:, 0, :].T
    X1, Y1, Z1 = t[:, 1, :].T

    d1 = 0.4799/np.linalg.norm(t[:, 0, :] - cArr[1], axis=1)
    d0 = 0.4799/np.linalg.norm(t[:, 1, :] - cArr[0], axis=1)

    cEDA[X0, Y0, Z0, 0] = cEDA[X0, Y0, Z0, -2] - d1
    cEDA[X1, Y1, Z1, 1] = cEDA[X1, Y1, Z1, -2] + d0
    return cEDA

np.random.seed(42)
cArr = np.random.randint(0, 100, (2, 5))
cEDA = np.random.rand(100, 100, 100, 4)
r2 = fast_cF2(cArr, cEDA)
print np.allclose(r1, r2)
"
Using Selenium to select an anchor with specific content,"find_element_by_xpath("".//a[contains(text(), 'Columbia')])
"
How do I remove extra parsing characters in a list?,">>> from itertools import chain
>>> list(chain.from_iterable(animals))
['dog', 'cat', 'mouse', 'bird']
"
Read amplitude data from mp3,"import subprocess
import sys

inname = 'foo.mp3'
outname = 'out.wav'
try:
    subprocess.check_call(['mpg123', '-w', outname, inname])
except CalledProcessError as e:
    print e
    sys.exit(1)
"
What is the pythonic way to have conditional shadowing?,"def a(b): #Line 1
  print ""a"",b
def c(b):
  n = globals().copy()
  if b is None:
    def a2(b):
      print 'local',b
    n['a'] = a2
  n['a'](b) #Line 8
"
Summing dictionaries in a large dictionary,">>> a = {}
>>> a[""hello""]={'n': 1,'m': 2,'o': 3}
>>> a[""bye""]={'n': 2,'m': 1,'o': 0}
>>> a[""goodbye""]={'n': 0,'m': 2,'o': 1}
>>> import collections
>>> result = collections.Counter()
>>> for d in a.values():
...     result += collections.Counter(d)
...
>>> result
Counter({'m': 5, 'o': 4, 'n': 3})
>>> dict(result)
{'m': 5, 'o': 4, 'n': 3}
"
Django Python Shell,"import os
os.environ.setdefault(""DJANGO_SETTINGS_MODULE"", ""myproj.settings"")
from myapp.models import Stuff
# ...
"
"Multiply Values of two dictionaries, while appending the Keys in Python","from pprint import pprint

dict = {'S-NSW-BAC-ENG': 15, 'S-NSW-BAC-FBE': 30}
temporal_demand_distribution = {-60: 0.001187, -59: 0.001354}

result_dict = {}
for key, value in dict.items():
  for key2, value2 in temporal_demand_distribution.items():
    result_dict[""{}:{}"".format(key, key2)] = value * value2

pprint(result_dict)
"
What filter do I need? Want to keep high frequency values only,"def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return zip_longest(*args, fillvalue=fillvalue)
"
Python: Parsing a colon delimited file with various counts of fields,"[...]
s_line = line.rstrip()
if line.startswith('time:'):
    part = s_line.split(':', 1)
else:
    part = s_line.split(':')
print part
[...]
"
"How to add bunch of ""N's"" at the end of file in python?",">>> from cStringIO import StringIO
>>> sample = '''\
... >164778
... AATCTAGATTTGTGTTGAACAACCCTTGGTACAACAAATACTTGGCACTTTTATAACCCAACTGTATGGTATAATCGACA
... TCTGTGTTATGAAAGGAACTTGATTTGTTGTTAACATAAGCAATCACCATGAATACCTGATAATATTTACAAGTATTGGC
... ATTACTCGAATAAGATAATTAATGTAATCATGTTAACAATTTATAATCTAATTGAAACCTCCTTTGTGTGTGGTTTCCAA
... TTGGGCAATAAGAGTTTATAC
... >164779
... AAATCACTTTCAGTGGAAAATTATAAAACCTATTAATTTATTGCCGGCCCTCAAATCAACGCAACCCAAAACCTATTAAT
... TATAAAACCTATTAATTTATTTTTTCAATCAACTACGACTATTAATTATATTTGATGATAATGAATGAAATGACACCATG
... GTTATATAAAAAATATGTCAAAAGCTATTCTTAATAGGGTTT
... '''
>>> spacer = ""N"" * 64
>>> fh_in = iter(sample.splitlines(True))
>>> fh_out = StringIO()
>>> prev = next(fh_in)  # first line
>>> for line in fh_in:
...    if line.startswith('>'):
...        prev = prev.rstrip('\n') + spacer + '\n'
...    fh_out.write(prev)
...    prev = line
... 
>>> fh_out.write(prev.rstrip('\n') + spacer + '\n')
>>> print fh_out.getvalue()
>164778
AATCTAGATTTGTGTTGAACAACCCTTGGTACAACAAATACTTGGCACTTTTATAACCCAACTGTATGGTATAATCGACA
TCTGTGTTATGAAAGGAACTTGATTTGTTGTTAACATAAGCAATCACCATGAATACCTGATAATATTTACAAGTATTGGC
ATTACTCGAATAAGATAATTAATGTAATCATGTTAACAATTTATAATCTAATTGAAACCTCCTTTGTGTGTGGTTTCCAA
TTGGGCAATAAGAGTTTATACNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
>164779
AAATCACTTTCAGTGGAAAATTATAAAACCTATTAATTTATTGCCGGCCCTCAAATCAACGCAACCCAAAACCTATTAAT
TATAAAACCTATTAATTTATTTTTTCAATCAACTACGACTATTAATTATATTTGATGATAATGAATGAAATGACACCATG
GTTATATAAAAAATATGTCAAAAGCTATTCTTAATAGGGTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
"
Show the values in the grid using matplotlib,"import matplotlib.pyplot as plt
import numpy as np

data = np.random.random((4, 4))

fig, ax = plt.subplots()
# Using matshow here just because it sets the ticks up nicely. imshow is faster.
ax.matshow(data, cmap='seismic')

for (i, j), z in np.ndenumerate(data):
    ax.text(j, i, '{:0.1f}'.format(z), ha='center', va='center',
            bbox=dict(boxstyle='round', facecolor='white', edgecolor='0.3'))

plt.show()
"
Is it possible to post audio files with the python requests library,"with open(audiofile, 'rb') as fobj:
    requests.post(url, files={'fieldname', fobj})
"
Replacing spaces after any digit using re.sub,"mystring = re.sub(r'(?<=\d) ', r',',mystring)
"
Using python iscpy module,"import iscpy

# Read in an existing config file
with open('/tmp/named.conf') as input_config_file:
    config_string = input_config_file.read()
config_dict = iscpy.ParseISCString(config_string)

# Modify the configuration
config_dict['zone ""example.com""'] = {
    'file':'""zone/example.com""',
    'type':'master'
}

# Write out the new config
config_string = iscpy.MakeISC(config_dict)
with open('/tmp/named-new.conf', 'w') as output_config_file:
    output_config_file.write(config_string)
"
Python break if a condition stays false for some time,"def pitch_detection :

    result = []
    no_append = 0
    MAX_TIME_ALLOWED = 5 # seconds
    while True :

        // apply pitch detection algorithm

        if pitch_energy > threshold :
            result.append(pitch)
            no_append = 0
        else:
            no_append += 1
            if no_append > MAX_TIMES_ALLOWED:
                break

    return result 
"
Calling an external command,os.system('some_command with args')
What is the pythonic way to reverse a defaultdict(list)?,"import itertools as it

for key, values in original.items():
    target.update(zip(values, it.repeat(key)))
"
Is there any idiomatic way to add methods to object in Python?,"class Power_calc():
    def calculate(self, exp):
        methods = {
            '+': self.summ,
            '-': self.minus,
        }

        self.srt = exp.split("" "")
        self.x = float(self.srt[0])
        self.y = float(self.srt[2])
        operand = self.srt[1]
        return methods[operand](self.x, self.y)

    def summ(self, a, b):
        return a + b

    def minus(self, a, b):
        return a - b
"
python beginner - how to read contents of several files into unique lists?,"PathwayList = []
for InFileName in FileList:
    sys.stderr.write(""Processing file %s\n"" % InFileName)
    InFile = open(InFileName, 'r')
    PathwayList.append(InFile.readlines())
    InFile.close()  

for contents in PathwayList:
    # do something with contents which is a list of strings
    print contents  
"
iPython lprun not printing output,"%lprun -f rn  rn()
"
numpy add columns to array of arrays,"In [105]: Al=list(A)
In [106]: Al
Out[106]: [[[1, 2, 3], [5, 5, 5]], [4, 5, 6], [7, 8, 9]]
In [107]: for i,l in enumerate(Al):
    newC=np.empty(len(l))
    newC.fill(42)
    Al[i]=np.c_[l,newC]
   .....:    
In [108]: Al
Out[108]: 
[array([[  1.,   2.,   3.,  42.],
        [  5.,   5.,   5.,  42.]]), array([[  4.,  42.],
        [  5.,  42.],
        [  6.,  42.]]), array([[  7.,  42.],
        [  8.,  42.],
        [  9.,  42.]])]
"
How to make a character in a list appear only once?,"fracs = {str(Fraction(x, y)) for x, y in zip(ilist1, ilist2)}
"
Increase each list element in all possible ways,"from functools import partial
from operator import add
from itertools import imap

addone = partial(add, 1)

test = list(imap(addone, test))  # don't really use imap if you want a list
"
How do I get tkinter to display these unicode characters?,"import tkinter as tk

s = '\U0001d412\U0001d413\U0001d400\U0001d402\U0001d40a\U0001d40e\U0001d415\U0001d404\U0001d411\U0001d405\U0001d40b\U0001d40e\U0001d416.\U0001d402\U0001d40e\U0001d40c'

class Application(tk.Frame):
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.pack()
        self.createWidgets()

    def createWidgets(self):
        self.hi_there = tk.Button(self)
        self.hi_there[""text""] = s
        self.hi_there[""command""] = self.say_hi
        self.hi_there.pack(side=""top"")

        self.QUIT = tk.Button(self, text=""QUIT"", fg=""red"",
                                            command=root.destroy)
        self.QUIT.pack(side=""bottom"")

    def say_hi(self):
        print(""hi there, everyone!"")

root = tk.Tk()
app = Application(master=root)
app.mainloop()
"
lerp movement and keyboard movement buttons - fast pressing cause a character stuck in place,"# added constants
LEFT_KEY = K_a
RIGHT_KEY = K_d
LURU, LDRU, LURD, LDRD = range(4)  # velocity states
LD, RD, LU, RU = range(4)  # velocity key events
VEL_EVENTS = {LD, RD, LU, RU}  # every velocity key event value
NEW_VELOCITY_GOAL, NEW_STATE = range(2)  # indices of EVENT_DECISION_TABLE entries
MAX_VELOCITY = 200

# non-None entries represent new velocity_goal and state value for each event for each state
EVENT_DECISION_TABLE = [
# event       LD                     RD                    LU                    RU             # cur state
    [[-MAX_VELOCITY, LDRU], [MAX_VELOCITY, LURD], [None,         None], [None,          None]], # LURU
    [[None,          None], [None,         LDRD], [0,            LURU], [None,          None]], # LDRU
    [[None,          LDRD], [None,         None], [None,         None], [0,             LURU]], # LURD
    [[None,          None], [None,         None], [MAX_VELOCITY, LURD], [-MAX_VELOCITY, LDRU]], # LDRD
]

class EventManagement(object):
    ''' Handles keyboard event's.
    Toggles player variables according to the event's.
    '''
    def __init__(self, player):
        self.player = player
        self.state = LURU

    def is_doneloop(self, flag):
        global is_doneloop
        is_doneloop = flag
        return is_doneloop

    def listen(self):
        ''' Toggles player variables according to keyboard/mouse input.
        '''
        for event in pygame.event.get():
            vel_event = None

            if event.type == QUIT:
                self.is_doneloop(True)
                break
            elif event.type == KEYDOWN:
                if event.key == LEFT_KEY:
                    vel_event = LD
                elif event.key == RIGHT_KEY:
                    vel_event = RD
            elif event.type == KEYUP:
                if event.key == K_ESCAPE:
                    self.is_doneloop(True)
                    break
                elif event.key == LEFT_KEY:
                    vel_event = LU
                elif event.key == RIGHT_KEY:
                    vel_event = RU

            if vel_event in VEL_EVENTS:
                entry = EVENT_DECISION_TABLE[self.state][vel_event]
                if entry[NEW_VELOCITY_GOAL] is not None:
                    self.player.velocity_goal.x = entry[NEW_VELOCITY_GOAL]
                if entry[NEW_STATE] is not None:
                    self.state = entry[NEW_STATE]

    #-------------------------------------------------------------------------
"
"Split strings on whitespaces, but do not remove them",">>> re.split('([ .,;()]+)', text)
['This', ' ', 'is', ' ', 'a', ' ', 'text', '; ', 'this', ' ', 'is', ' ', 'another', '   ', 'text', '.,.', '']
"
"Itertools: selecting in pandas based on previous three rows, or previous elements in a list",">>> d.groupby('sid')['key'].apply(lambda c: list(c[::2]))
sid
1      ['m', 'x', 'x', 'n']
"
How to place numbers in a python list at the index of their magnitude,">>> max_len=max(l)
>>> new = [[0 for _ in range(max_len)] for _ in range(max_len)]
>>> for i,v in enumerate(l):
...     new[i][v-1] = v
... 
>>> new
[[0, 0, 0, 0, 5], [0, 2, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 0, 4, 0], [0, 0, 3, 0, 0]]
"
Is there a way to use an if statement as an argument?,"if all(conditions):
"
How can I merge and sort two sorted lists of QTreeWidgetItems?,"sortedItems = sorted(currentItems, key=lambda x: x.getTimestamp())
"
killing a thread in python before its done,"import signal

X = False

def handle_alarm(signum, frame):
    global X
    X = False

signal.signal(signal.SIGALRM, handle_alarm)

def set_X_true_then_false_later(secs=3600):
    global X
    X = True
    signal.alarm(secs)
"
Return multiple variables in a loop using dict(),"def next_one(i,n):
    while i < n:
        yield i
        i += 1

def main(variable):
    print next(variable)

variable = next_one(1,10)
main(variable)
main(variable)
main(variable)

[OUTPUT]
1
2
3
"
how to use a sentinel list in a comprehension?,">>> a = [1, 2, 3, 3, 2, 4]
>>> seen = set()
>>> [x for x in a if not (x in seen or seen.add(x))]
[1, 2, 3, 4]
>>> seen
set([1, 2, 3, 4])
"
Byte Array in Python,"# Python 3
key = bytes([0x13, 0x00, 0x00, 0x00, 0x08, 0x00])

# Python 2
key = ''.join(chr(x) for x in [0x13, 0x00, 0x00, 0x00, 0x08, 0x00])
"
Pandas DataFrame column values in to list,"In [11]: df.clusters.tolist()
Out[11]: [[4], [9, 14, 16, 19], [6, 7, 10, 17, 18, 20], [1, 2, 3, 5, 8, 11, 12, 13, 15]]
"
Find amount of times that the chosen letters appear,"In [49]: mystring="""".join(line[:2] for line in data)
"
Python lambda parameters,"g = lambda alist: sum(alist)
print g([4,6,7])
"
How to add multiple values to the same key in a Python Dictionary,"from collections  import defaultdict

audio = defaultdict(list)

if elementTree.find('./connections') is None:
    return
else:
    for connection_element in elementTree.findall('.//connections/connection'):
        # Get the type for this connection.
        controlType = connection_element.find('type')
        # Get the id for this connection.
        connectionID = connection_element.find('id')
        if controlType is not None and str(controlType.text) == '6':
            # Now find all of the classname(s) in this specific connection element.
            for class_name in connection_element.findall('classes/class/classname'):
                audio[connectionID.text].append(class_name.text)
    return audio
"
how should I order my statement in a short circuit and?,"=== ===== ====
c   exp1  exp2
=== ===== ====
0   20+25 25+20
1   20+0  25+0
2   20+25 25+0
3   20+0  25+0
=== ===== ====
    130   120
"
Solving a System of Algebraic Equations with SymPy,"from sympy import *

x = Symbol('x')
y = Symbol('y')
A = 1
B = 3
C = 6

xeq = solve(A*(1-x-y) + B*x + C*y - 4,x)[0]
print ('x = %s' % xeq)
yeq = solve(A*(1-x-y) + B*x - (8-C)*y,y)[0]
print ('y = %s' % yeq)

ysolve = 0.5
xval = xeq.subs(y, ysolve)
print ('If y = %f, x = %f' % (ysolve, xval))
yval = yeq.subs(x, xval)
print ('If x = %f, y = %f' % (xval, yval))
"
Python: Data validation using regular expression,"import re
data = ""asdsaq2323-asds""
if re.compile(""^[a-zA-Z0-9*]+$"").match(data):
    print ""match""
else:
    print ""no match""
"
Timestamp YYYY-MM-DDThh:mm:ss.sssTZD in Python,"In [1]: from dateutil.tz import tzoffset
In [2]: from datetime import datetime
In [3]: now = datetime.now(tzoffset('EDT', +4*60*60))
In [4]: print now.isoformat()
2016-05-28T01:43:14.702253+04:00
"
About mysql cursor and iterator,"cursor.execute(sql)
for row in cursor:
    print row
    ...
"
Ignoring noncharacters in cypher text,"for char in phrase:
    if char.isalpha():
        # process
    else:
        pass # ignore spaces, punctuation, numbers
"
Python numerical integration with Simson's rule,"from mpmath import mp

# set precision
mp.dps = 20

for x in range(21):
    print(x, mp.besselj(0, x), mp.besselj(1, x), mp.besselj(2, x))
"
Translating letters not in 7bit ASCII to ASCII (like ń to n and ą to a),"def normalize(s):
    return ''.join(normalize_char(c) for c in s)

normalize('Móżdżek') == 'Mozdzek'
"
Set player's main region depending on location - Python,"loc2reg = {}
def populate_loc2reg():
    for region in regionList:
        for location_name in region:
            loc2reg[location_name] = [region[0], location_name]
"
Find all text files not containing some text string,"def scanFiles2(rdir, sstring, extens, start='', cSens=False): 
    if not cSens: 
        # This only need to called once.
        sstring = sstring.lower() 
    fList = []
    for fol, fols, fils in os.walk(rdir): 
        for fil in fils: 
            if not (fil.startswith(start) and fil.endswith(extens)):
                continue
            fil = os.path.join(fol, fil)
            with open(fil) as rFil:
                for line in rFil: 
                    if not cSens: 
                        line = line.lower()
                    if sstring in line:
                        break
                else:
                    fList.append(fil)
    ...
"
python wand: creating text dropshadow,"from wand.color import Color
from wand.drawing import Drawing
from wand.image import Image

# -size 320x100 xc:lightblue
with Image(width=320, height=100, background=Color('lightblue')) as image:
    with Drawing() as draw:
        # -font Candice
        draw.font = 'Candice'
        # -pointsize 72
        draw.font_size = 72.0
        draw.push()
        # -fill black
        draw.fill_color = Color('black')
        # -draw ""text 28,68 'Anthony'""
        draw.text(28, 68, 'Anthony')
        draw.pop()
        draw.push()
        # -fill white
        draw.fill_color = Color('white')
        # -draw ""text 25,65 'Anthony'""
        draw.text(25, 65, 'Anthony')
        draw.pop()
        draw(image)
    # font_shadow.jpg
    image.save(filename='font_shadow.jpg')
"
re.search : a lack of understanding through 2 exemples,"if re.search(re.escape(""Crude protein (min.)""),""Crude protein,protein,Protein,Protein    (crude),Crude protein (min.)"") : print(""ok"")
...
ok
"
Looking to assign print output (string) to a variable,"for path in filepath:
  dirname, filename = os.path.split(path)
  print(filename[0:-19])
  var1 = filename
  var2 = filename[0:-25]
"
Creating a heatmap without a colorbar in matplotlib,"import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.axes_grid1 import AxesGrid

# Sample data. You can get yours with np.genfromtxt('/path/to/performance.dat')
data1 = np.random.rand(20,20)*2
data2 = np.random.rand(20,20)*2
data3 = np.random.rand(20,20)*2

fig = plt.figure(figsize=(9,3))

fig.subplots_adjust(bottom=0.2)
plt.viridis()

grid = AxesGrid(fig, 111,
                nrows_ncols=(1, 3),
                axes_pad=0.2,
                share_all=True,
                label_mode=""L"",
                cbar_location=""right"",
                cbar_mode=""single"",
                )

for ax,data in zip(grid,[data1,data2,data3]):
    p=ax.pcolor(data,vmin=0,vmax=2)
    ax.set_xlabel(r""$\log \, \sigma_1$"", size=28)

grid[0].set_ylabel(r""$\log \, \sigma_2$"", size=28)

grid.cbar_axes[0].colorbar(p)

plt.show()
"
How to remove the tzinfo completely from the time after converting to UTC in Python?,"assert aware.tzinfo is not None and aware.utcoffset() is not None
# local time = utc time + utc offset (by definition)
# -> utc = local - offset
naive_utc = aware.replace(tzinfo=None) - aware.utcoffset()
"
GridSearch for an estimator inside a OneVsRestClassifier,"from sklearn.datasets import load_iris
from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import SVC
from sklearn.grid_search import GridSearchCV
from sklearn.metrics import f1_score

iris = load_iris()

model_to_set = OneVsRestClassifier(SVC(kernel=""poly""))

parameters = {
    ""estimator__C"": [1,2,4,8],
    ""estimator__kernel"": [""poly"",""rbf""],
    ""estimator__degree"":[1, 2, 3, 4],
}

model_tunning = GridSearchCV(model_to_set, param_grid=parameters,
                             score_func=f1_score)

model_tunning.fit(iris.data, iris.target)

print model_tunning.best_score_
print model_tunning.best_params_
"
How to proceed with this python program,"    @property
    def solution(self):
        for camel in self.camels[self.camels.index(fCamel) + 1:]:
            if camel == bCamel:
                return False
        return True
"
get a list of locally installed Python modules,help('modules')
Counting vowels using nested loop in python,"def get_list_of_vowel_count(name_list):
    vowels = ""aeiouAEIOU""
    for name in name_list:
        yield len([c for c in name if c in vowels])
"
Creating a 3-dimensional OrderedDict with natural subscripting,"from collections import OrderedDict

class DefaultOrderedDict(OrderedDict):
    def __missing__(self, key):
        self[key] = type(self)()
        return self[key]
"
Creating a Python list from a list of tuples,">>> a = [(1,2)] * 4
>>> [t[0] for t in a]
[1, 1, 1, 1]
"
Capture logs in apscheduler,"import logging

import Queue
from apscheduler import events
from apscheduler.scheduler import Scheduler
import time


#logging.basicConfig(level=logging.INFO,format='%(asctime)s : %(name)s : %(levelname)s : %(module)s.%(funcName)s(%(lineno)d) : %(thread)d %(threadName)s: %(message)s')

#enable logger to see exceptions caught by apscheduler
logging.basicConfig()



q = Queue.Queue()

sched = Scheduler()


@sched.interval_schedule(seconds=1)
def some_job():
    msg = ""Decorated job : %s"" % time.time()
    print msg
    logging.info(msg)
    q.put(msg)
    q.put(""message 2"")


def job_listener(event):
    #print str(event)
    while not q.empty():
        get_ = ""msg from job '%s': '%s'"" % (event.job, q.get())
        print get_
        logging.info(get_)


sched.add_listener(job_listener,
                   events.EVENT_JOB_EXECUTED |
                   events.EVENT_JOB_MISSED |
                   events.EVENT_JOB_ERROR)

config = {'apscheduler.jobstores.file.class': 'apscheduler.jobstores.shelve_store:ShelveJobStore',
          'apscheduler.jobstores.file.path': '/temp/dbfile'}

sched.configure(config)


sched.start()

q.join()
while True:
    pass
"
How to check if a word appears in ID(location in element list) of another word(key),"my_dict = {1: ['make', 'your', 'choice'], 2: ['put', 'something', 'and', 'make'], 3: ['make', 'something', 'happens'], 4: ['giulio', 'took', 'his', 'choice', 'so', 'make'], 5: ['make', 'your', 'choice'], 6: ['put', 'something', 'and', 'make'], 7: ['make', 'something', 'happens'], 8: ['giulio', 'took', 'his', 'choice', 'so', 'make'], 9: ['make', 'your', 'choice'], 10: ['put', 'something', 'and', 'make'], 11: ['make', 'something', 'happens'], 12: ['giulio', 'took', 'his', 'choice', 'so', 'make']}
words = {'and': (set([]), set([2, 10, 6])), 'happens': (set([]), set([11, 3, 7])), 'his': (set([]), set([8, 12, 4])), 'giulio': (set([]), set([8, 12, 4])), 'make': (set([]), set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])), 'took': (set([]), set([8, 12, 4])), 'choice': (set([]), set([1, 4, 5, 8, 9, 12])), 'so': (set([]), set([8, 12, 4])), 'something': (set([]), set([2, 3, 6, 7, 10, 11])), 'put': (set([]), set([2, 10, 6])), 'your': (set([]), set([1, 5, 9]))}

for k, v in words.items():
    flatten_list = [elem for id_ in v[1] for elem in my_dict[id_]]
    words[k][0].update(set([word for word in flatten_list if word != k if flatten_list.count(word) == len(v[1])]))

print words
"
Matplotlib imshow/matshow display values on plot,"import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

min_val, max_val = 0, 10
ind_array = np.arange(min_val + 0.5, max_val + 0.5, 1.0)
x, y = np.meshgrid(ind_array, ind_array)

for i, (x_val, y_val) in enumerate(zip(x.flatten(), y.flatten())):
    c = 'x' if i%2 else 'o' 
    ax.text(x_val, y_val, c, va='center', ha='center')
#alternatively, you could do something like
#for x_val, y_val in zip(x.flatten(), y.flatten()):
#    c = 'x' if (x_val + y_val)%2 else 'o'

ax.set_xlim(min_val, max_val)
ax.set_ylim(min_val, max_val)
ax.set_xticks(np.arange(max_val))
ax.set_yticks(np.arange(max_val))
ax.grid()
"
empty a list,del lst1[:]
"Python, Writing Multiple Lines","with open('xyz.txt', 'w') as fp:
    fp.writelines([ each_line + '\n' for each_line in ['line_1','line_2','line_3']])
"
Unstack or Pivot Only Some Columns,"#  COL1  COL2  COL3   COL4  year
#0    A     1     2  11032  2016
#1    A     2     2   1960  2017
#2    A     3     4  11400  2018
#3    B     1     2  11355  2019
#4    B     2     2      8  2020
#5    B     3     4      7  2021

DF = DF.set_index(['COL1', 'COL2', 'COL3'])
DF = DF.unstack(0).reset_index()
print DF
#     COL2 COL3   COL4         year
#COL1                A      B     A     B
#0       1    2  11032  11355  2016  2019
#1       2    2   1960      8  2017  2020
#2       3    4  11400      7  2018  2021

levels = DF.columns.levels
labels = DF.columns.labels
DF.columns = levels[0][labels[0]]
print DF
#   COL2  COL3   COL4   COL4  year  year
#0     1     2  11032  11355  2016  2019
#1     2     2   1960      8  2017  2020
#2     3     4  11400      7  2018  2021
DF.columns = ['COL2','COL3','COL4','COL5','COL6','COL7']
print DF
#   COL2  COL3   COL4   COL5  COL6  COL7
#0     1     2  11032  11355  2016  2019
#1     2     2   1960      8  2017  2020
#2     3     4  11400      7  2018  2021
"
launch HTML code without opening web-browser,"import urllib
urlilb.urlopen('http://10.16.16.96/set?params=default').read()
"
merge to dictionaries preserving different values,"d = {k: {a: int(b) for a, b in (v[i:i+2] for i in range(0, len(v), 2))} 
     for k, v in d.items()}
"
Select dataframe rows between two dates,"import numpy as np
import pandas as pd

df = pd.DataFrame(np.random.random((200,3)))
df['date'] = pd.date_range('2000-1-1', periods=200, freq='D')
df = df.set_index(['date'])
print(df.loc['2000-6-1':'2000-6-10'])
"
"python regular expression findall, need to remove inexact matches",">>> text='4/13'
>>> reg = ""((?:(?:1[0-2])|(?:0?[1-9]))/(?:(?:1[0-9])|(?:2[0-9])|(?:3[0-1])|(?:0?[0-9])))""
>>> re.findall(reg, text, re.IGNORECASE)
['4/13']
"
Parse through an xml in python,"from lxml import etree
import pandas as pd

tree = etree.parse(""http://charts.realclearpolitics.com/charts/1044.xml"")

date = [s.text for s in tree.xpath(""series/value"")]
approve = [float(s.text) if s.text else 0.0
           for s in tree.xpath(""graphs/graph[@title='Approve']/value"")]
disapprove = [float(s.text) if s.text else 0.0
              for s in tree.xpath(""graphs/graph[@title='Disapprove']/value"")]

assert len(date) == len(approve) == len(disapprove)

finalresult = pd.DataFrame({'Date': date, 'Approve': approve, 'Disapprove': disapprove})
print finalresult
"
Python - testing if an object attribute is equal to a given value,"from collections import defaultdict

nameindex = defaultdict(list)
for person in people:
    nameindex[person.name.lower()] = person

nameindex['bob']  # a list of people named Bob.
"
Downloading mulitple images through scrapy in a single page,"def parse(self, response):
    item = DmozItem()
    images = response.xpath('//div[@class=""overhid""]//img')
    item['image_urls'] = [image.xpath('@src | @lazysrc').extract()[0] 
                          for image in images]
    return item
"
replace multiple strings in python,"command = """"""Application.exe inputFile=./Input.txt 
outputFile=""Output/Output.txt"" outputFileSize=20Kb""""""

inputfilename = './File1.txt'
outputfilename = 'Output/File2.txt'
outputfilesize = '90Kb'

command = command.replace(""./Input.txt"", inputfilename)
command = command.replace(""Output/Output.txt"", outputfilename)
command = command.replace(""20Kb"", outputfilesize)

print command
"
"In Python, determine if a function calls another function","import ast
call_names = [c.func.id for c in ast.walk(ast.parse(inspect.getsource(source)))
              if isinstance(c, ast.Call)]
return 'target' in call_names
"
Txt file substitution in Python,">>> def transformed(it):
...     it = iter(it)
...     for char in it:
...             if char.isalpha():
...                     yield ord(char) - ord(""a"")
...
>>> list(transformed(""hello, world""))
[7, 4, 11, 11, 14, 22, 14, 17, 11, 3]
"
Python 2.7 Counting number of dictionary items with given value,"sum(1 for x in d.values() if some_condition(x))
"
Include changing variables into name of output file in Python,"filename = ""simple"" + str(minLength) + str(minBF) + "".csv""
resfile = open(filename,""w"")
"
Python remove first number from string if its 0,"In [11]: s = '07123456789'

In [12]: '44{}'.format(s[1:] if s.startswith('0') else s)
Out[12]: '447123456789'
"
Overriding list method,"class LI(list):
    def append(self, item):
        list.append(self,item)
        list.append(self,item)
"
Python CSV - Need to Group and Calculate values based on one key,"import csv
from collections import defaultdict

# a dictionary whose value defaults to a list.
data = defaultdict(list)
# open the csv file and iterate over its rows. the enumerate()
# function gives us an incrementing row number
for i, row in enumerate(csv.reader(open('data.csv', 'rb'))):
    # skip the header line and any empty rows
    # we take advantage of the first row being indexed at 0
    # i=0 which evaluates as false, as does an empty row
    if not i or not row:
        continue
    # unpack the columns into local variables
    _, zipcode, level = row
    # for each zipcode, add the level the list
    data[zipcode].append(float(level))

# loop over each zipcode and its list of levels and calculate the average
for zipcode, levels in data.iteritems():
    print zipcode, sum(levels) / float(len(levels))
"
How can I dynamically refer to a variable in Python,"class Foo(object):

  def __init__(self):
    self.my_attrs = {
      'frontend': ['name','ip_address','mode','port','max_conn'],
      'backend': ['name','balance_method','balance_mode'],
    }

  def sanity_check_data(self):
    self.check_section('frontend')
    self.check_section('backend')

  def check_section(self, section):
    # maybe use self.my_attrs.get(section) and add some error handling?
    my_attrs = self.my_attrs[section]
    for attr in my_attrs:
      print attr
"
modifying iterator in for loop in python,"for i in [1,2,3,4,5,'cat','fish']:
    i = i + i
    print i
"
How to convert numbers into characters?,">>> chr(82)
'R'
"
Average two rows in Python while ignoring NaN,"numpy.ma.average(numpy.ma.masked_invalid(x).reshape(-1, 2, x.shape[-1]), 1)
"
Database on the fly with scripting languages,"from sqlalchemy import create_engine, Column, String, Integer, MetaData, Table
from sqlalchemy.orm import mapper, create_session
import csv
CSV_FILE = 'foo.csv'
engine = create_engine('sqlite://') # memory-only database

table = None
metadata = MetaData(bind=engine)
with open(CSV_FILE) as f:
    # assume first line is header
    cf = csv.DictReader(f, delimiter=',')
    for row in cf:
        if table is None:
            # create the table
            table = Table('foo', metadata, 
                Column('id', Integer, primary_key=True),
                *(Column(rowname, String()) for rowname in row.keys()))
            table.create()
        # insert data into the table
        table.insert().values(**row).execute()

class CsvTable(object): pass
mapper(CsvTable, table)
session = create_session(bind=engine, autocommit=False, autoflush=True)
"
extract multidimensional dictionary to list,"def flatten_dicts(d):
    for v in d.itervalues():
        try:
            for n in flatten_dicts(v):
                yield n
        except AttributeError:
            yield v
"
No minor grid lines on the x-axis only,"axes.xaxis.grid(False, which='minor')
"
Vectorize addition into array indexed by another array,"def for_loop(A):
    N1 = B.shape[0]
    for i in xrange(N1):
       A[y[i]] -= B[i,:]
    return A
"
"Basic Kivy Q, Positioning Canvas Child {kivy language}","from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.lang import Builder

kv_string = '''
<MyWidget>:
    Widget:
        pos_hint: {'center_y': 0.5, 'center_x': 0.5}
        size_hint: 0.2, 0.2
        canvas:
            Color:
                rgb: 0.1, 0.6, 0.3
            Rectangle:
                size: self.size
                pos: self.pos
    Widget:
        pos_hint: {'center_y': 0.5, 'center_x': 0.2}
        size_hint: 0.2, 0.2
        canvas:
            Color:
                rgb: 0.1, 0.6, 0.3
            Rectangle:
                size: self.size
                pos: self.pos
    Widget:
        pos_hint: {'center_y': 0.5, 'center_x': 0.8}
        size_hint: 0.2, 0.2
        canvas:
            Color:
                rgb: 0.1, 0.6, 0.3
            Rectangle:
                size: self.size
                pos: self.pos
    Widget:
        pos_hint: {'center_y': 0.2, 'center_x': 0.5}
        size_hint: 0.2, 0.2
        canvas:
            Color:
                rgb: 0.1, 0.6, 0.3
            Rectangle:
                size: self.size
                pos: self.pos
    Widget:
        pos_hint: {'center_y': 0.8, 'center_x': 0.5}
        size_hint: 0.2, 0.2
        canvas:
            Color:
                rgb: 0.1, 0.6, 0.3
            Rectangle:
                size: self.size
                pos: self.pos
'''

Builder.load_string(kv_string)

class MyWidget(FloatLayout):
    pass

class TestApp(App):
    def build(self):
        return MyWidget()

if __name__ == '__main__':
    TestApp().run()
"
Reset List When Condition Met,"d = {}
k = [1,2,3]
d['a'] = k
d
#  {'a': [1, 2, 3]}
id(d['a']) == id(k)
#  True
"
Randomly generated text will not update in entry widget,"from Tkinter import *
import random

class MYGUI:
    def __init__(self):

        root=Tk()
        root.title('Password Helper')
        label = Label(root, text=""Welcome to Password Helper! \n \n Choose from the options below to continue. \n"")
        self.button=Button(root, text='Generate a New Password', command=lambda: self.genpass())
        self.word=Label(root)

        label.pack()
        self.button.pack()
        self.word.pack()
        mainloop()

    genpass(self):
        word = ''
        for i in range(10):
            word += random.choice(string.ascii_letters + string.punctuation + string.digits)
        self.word['text']=word

if __name__ == '__main__':
    MYGUI()
"
How to adjust the size of matplotlib legend box?,"import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 100)

fig, ax = plt.subplots()
for i in range(1, 6):
    ax.plot(x, i*x + x, label='$y={i}x + {i}$'.format(i=i))
ax.legend(loc='upper left', borderpad=1.5, labelspacing=1.5)
plt.show()
"
Join two timelines / list of tuples,"import pandas as pd

l1 = [(1, 100), (2, 1000),           (4, 1500), (5, 5400),          (7, 7800)]
l2 = [(1, 20),  (2, 400),  (3, 240), (4, 500),  (5, 100),  (6, 27),          ]

s1 = pd.Series(dict(l1))
s2 = pd.Series(dict(l2))
"
easy_install or pip install doesn't find a package,"→ pip search pythonmagick
PythonMagickWand          - Python wrapper for the ImageMagick wand API
PythonMagick              - Wrapper around GraphicsMagick

→ pip search pgmagick
pgmagick                  - Yet Another Python wrapper for GraphicsMagick
"
Return minimum X (that can contain Y items) for arbitrary number of items,"n=(y*z+x-1)//x
"
python: sort a list of lists by an item in the sublist,"sorted(li, key=operator.itemgetter(1), reverse=True)"
Create random time stamp list in python,"from random import randrange
import datetime 


def random_date(start,l):
   current = start
   while l >= 0:
    current = current + datetime.timedelta(minutes=randrange(10))
    yield current
    l-=1



startDate = datetime.datetime(2013, 9, 20,13,00)


for x in reversed(list(random_date(startDate,10))):
    print x.strftime(""%d/%m/%y %H:%M"")
"
Python List methods,"class B(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def replace(self, x):
        self.x.s = self.x.s.replace(self.y, x)
class A(object):
    def __init__(self, s):
        self.s = s
    def __getattr__(self, name):
        return B(self, name)

a = A('abc')
a.b.replace('X')
print a.s
"
how to convert a set in python into a dictionary,"input_set = {'1438789225', '1438789230'}
output_dict = {item:val for val,item in enumerate(input_set)}
"
Get the order of parameters for python function?,">>> import inspect
>>> inspect.getargspec(foo)
ArgSpec(args=['a', 'b', 'c'], varargs=None, keywords=None, defaults=None)
"
NumPy: Execute function over each ndarray element,"import numpy as np

data = np.array([[[1704, 1240],
                  [1745, 1244],
                  [1972, 1290],
                  [2129, 1395],
                  [1989, 1332]],

                 [[1712, 1246],
                  [1750, 1246],
                  [1964, 1286],
                  [2138, 1399],
                  [1989, 1333]],

                 [[1721, 1249],
                  [1756, 1249],
                  [1955, 1283],
                  [2145, 1399],
                  [1990, 1333]]])

point = [1989, 1332]

#-- Calculate distance ------------
# The reshape is to make it a single, Nx2 array to make calling `hypot` easier
dist = data.reshape((-1,2)) - point
dist = np.hypot(*dist.T)

# We can then reshape it back to AxBx1 array, similar to the original shape
dist = dist.reshape(data.shape[0], data.shape[1], 1)
print dist
"
Python 2D list slice,">>> R = [5,6,7]
>>> R+=zip(*S)[j][i:]
>>> R
[5, 6, 7, 6, 10]
"
Can this Python loop be expressed more succinctly?,"for ssid in filter(lambda s: s != subseq_id and s not in merged, overlaps):
    # ...
"
"Updating a list of python dictionaries with a key, value pair from another list","[dict(d, count=n) for d, n in zip(l1, l2)]"
Python file delimited with double tabs,"with open('data.csv') as data:
    for line in data:
        print line.strip().split('\t\t')
"
remove the keys which has blank values,">>> {k:v for k, v in d.items() if v != ''}
{'N': [-6.626999855041504, -2.318000078201294, 7.9029998779296875], 'CA': [-7.5269999504089355, -2.2330000400543213, 6.748000144958496], 'C': [-8.081000328063965, -3.619999885559082, 6.406000137329102]}
"
"Python: Associating Function Output to Strings, then Combining into Dictionary","import commands

node_free_mem = {}

for n in node_names:
    sys_output = commands.getoutput(""ssh %s 'free -m'"" % n)
    free_memory = sys_output.split()[9]
    node_free_mem[n] = int(free_memory)
"
Hiding command prompt in wxpython app,"# -*-coding: utf-8 -*-
#!python

# @file: example.pyw

import wx

class AppFrame(wx.Frame):
  def __init__(self, title, *args, **kwargs):
    super(AppFrame, self).__init__(None, title=title, *args, **kwargs)
    self.panel = wx.Panel(self)


class AppMain(wx.App):
  def OnInit(self):
    self.frame = AppFrame(""Example"")
    self.frame.Show()
    return True


AppMain(True).MainLoop()
"
TraitsUI CheckListEditor changing the case of values,"from traits.api import HasTraits, List, on_trait_change
from traitsui.api import Item, View, CheckListEditor


class Foo(HasTraits):
    stuff = List()

    traits_view = View(Item('stuff', style='custom', label='stuff',
        editor=CheckListEditor(values=['.state.First', '.state.Last', '.state.Any'],
                               format_func=lambda x: x)))

    @on_trait_change('stuff[]')
    def show_stuff(self):
        print ""stuff ="", self.stuff


if __name__ == ""__main__"":
    f = Foo()
    f.configure_traits()
"
Why doesn't this code save my figures with titles?,"import matplotlib.pyplot as plt
test_y=range(10)
test_x=[8,13,59,8,81,2,5,6,2,3]

def subplotsave_test():
    for i in range(5):
        fig = plt.figure(i)
        txt = fig.suptitle('Page '+str(i)+' of '+str(5),fontsize='20')
        for j in range(16):
            plt.subplot(4,4,j+1)
            plt.plot(test_y,test_x)          
        plt.savefig(str(i)+'.png',bbox_inches='tight',orientation='landscape')

if __name__ == '__main__':                
    subplotsave_test()
"
user selects substring in python,"string1 = 'IIXIIXIIXIIX'
substring = 'X'
replacement='B'
ss = input(""Which substring would you like to replace: "")
list1= string1.split(substring)
print  substring.join(list1[:ss])+replacement+substring.join(list1[ss:])
"
Concise way to remove elements from list by index in Python,"import numpy as np

myList = ['a','b','c','d']
toRemove = [0,2]

new_list = np.delete(myList, toRemove)
"
Return a list containing the number with most repeats from a list of numbers,">>> a = [1,1,1,1,2,2,3,4,5,5,5,5]
>>> [x for x in set(a) if a.count(x) == max(map(a.count, a))]
[1, 5]
"
comparing itemgetter objects,"from collections import defaultdict
from operator import itemgetter
from itertools import count

def cmp_getters(ig1, ig2):
   if any(not isinstance(x, itemgetter) for x in (ig1, ig2)):
      return False
   d1 = defaultdict(count().next)
   d2 = defaultdict(count().next)
   ig1(d1)                                 # populate d1 as a sideeffect
   ig2(d2)                                 # populate d2 as a sideeffect
   return d1==d2
"
multiprocessing threadpool not terminating as expected,"import multiprocessing.pool
from time import sleep

def timeout(seconds, function, *args, **kwargs):
    pool = multiprocessing.pool.ThreadPool(processes=1)
    result = pool.apply_async(function, args, kwargs)
    try:
        result.get(timeout=seconds)
    except multiprocessing.TimeoutError:
        print(""Process timed out"")
    pool.terminate()
#    pool.join()  # Don't need this, all worker threads have been stopped.
    print(""Pool terminated"")

def worker():
    for n in range(5):
        sleep(1)
        print(n+1)
    print(""Process succeeded"")

timeout(2.5, worker)
"
"In python, how can I can I code this sense: ""when true for all members of the list, do this."" [Solved]",">>> lst = [2, 5, 6, 8, 10]
>>> [x % 2 == 0 for x in lst]
[True, False, True, True, True]
>>> all(x % 2 == 0 for x in lst)
False
"
Python - Outputting two data sets (lists?) to data file as two columns,"with open('test.csv', 'wb') as f:
    writer = csv.writer(f)
    for row in rows:
        writer.writerow(row)
"
Split data into sub cubes in numpy,"funcList = [lambda m: m[0] < 2, 
            lambda m: m[1] < 2, 
            lambda m: m[2] < 2]
"
Scrape MTA Subway data?,"from bs4 import BeautifulSoup
import requests

url = ""http://web.mta.info/nyct/service/threelin.htm""
response = requests.get(url)

soup = BeautifulSoup(response.content)
table = soup.find('table', summary='Table of 3 Subway Line Stops')
stops = [tr('td')[2].text.strip().replace('\n', '').split(' /') 
         for tr in table('tr', height=25)]
print stops
"
Python convert int to unsigned short then back to int,"def int_to_signed_short(value):
    return -(value & 0x8000) | (value & 0x7fff)

def xy_from_index(index):
    x, y = index & 65535, (index >> 16) + 16
    return map(int_to_signed_short, [x, y])
"
Set XML root with libxml2 Python bindings,"#-*- coding:utf-8 -*-
#!/usr/bin/env python


import xml.dom.minidom

info = '''
<Head>
<child>this is text for child</child>
</Head>
'''

dom = xml.dom.minidom.parseString(info)
dom.firstChild.tagName = 'parent'
# save it to any file you want
xml_file = 'C:\\temp\\lch.xml'
f = open(xml_file, 'wb')
dom.writexml(f)
f.close()
"
Python 3.4 JSON sort by key as int,">>> d = {'9': 800, '1': 800, '3': 800, '8': 800, '6': 800, '5': 800, '7': 800, '10': 700, '4': 800, '2': 800}
>>> sorted(d.items(), key=lambda i: int(i[0]))
[('1', 800), ('2', 800), ('3', 800), ('4', 800), ('5', 800), ('6', 800), ('7', 800), ('8', 800), ('9', 800), ('10', 700)]
"
How do I find the time of a particular keyframe using cmds.selectKey?,"import maya.cmds as cmds
keyFrame = (cmds.keyFrame(""myAnimCurve"", q=True))[-1]
"
pydoc-like program to browse content/code of Python files in a browser?,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import with_statement
import SimpleHTTPServer, BaseHTTPServer
import os  
from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter

class SourceViewer(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        path = os.path.join(os.getcwdu(), self.path[1:])
        if os.path.exists(path) and path.endswith(u'.py'):
            with open(path) as file:
                code = file.read()
                hl = highlight(code, PythonLexer(), HtmlFormatter(noclasses=True, linenos=u'table'))
                self.send_response(200)
                self.end_headers()
                self.wfile.write(hl)
                return
        else:    
            SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)

if __name__ == u""__main__"":
    server = BaseHTTPServer.HTTPServer((u'localhost', 8080), SourceViewer)
    server.serve_forever()
"
transpose dictionary (extract all the values for one key from a list of dictionaries),"import timeit
from operator import itemgetter
from itertools import imap

x = range(100)
y = reversed(range(100))
d = [dict((('x',xx), ('y', yy))) for (xx, yy) in zip(x,y)]
# d is [{'y': 99, 'x': 0}, {'y': 98, 'x': 1}, ... ]
D={x:y for x,y in zip(range(10),reversed(range(10)))}


def test_list_comp(d):
    return [dd['x'] for dd in d]

def test_list_comp_v2(d):
    return [(x[""x""], x[""y""]) for x in d]

def testD_keys_values(d):
    return d.keys()

def test_map(d):
    return map(itemgetter('x'), d)

def test_positional(d):
    return [dd.values()[1] for dd in d]

def test_lambda(d):
    return list(imap(lambda x: x['x'], d))

def test_imap_iter(d):
    return list(imap(itemgetter('x'), d))

for test in sorted(globals()):
    if test.startswith(""test_""):
        print ""%30s : %s"" % (test, timeit.Timer(""f(d)"", 
              ""from __main__ import %s as f, d"" % test).timeit())
for test in sorted(globals()):
    if test.startswith(""testD_""):
        print ""%30s : %s"" % (test, timeit.Timer(""f(D)"", 
              ""from __main__ import %s as f, D"" % test).timeit())
"
numpy: extending arrays along a new axis?,"import scipy
X = scipy.rand(9,4,1)
Y = X.repeat(4096,2)
"
How to write a DownloadHandler for scrapy that makes requests through socksipy?,"class TorProxyDownloadHandler(HTTP11DownloadHandler):

    def download_request(self, request, spider):
        """"""Return a deferred for the HTTP download""""""
        agent = ScrapyTorAgent(contextFactory=self._contextFactory, pool=self._pool)
        return agent.download_request(request)


class ScrapyTorAgent(ScrapyAgent):
    def _get_agent(self, request, timeout):
        bindaddress = request.meta.get('bindaddress') or self._bindAddress
        proxy = request.meta.get('proxy')
        if proxy:
            _, _, proxyHost, proxyPort, proxyParams = _parse(proxy)
            scheme = _parse(request.url)[0]
            omitConnectTunnel = proxyParams.find('noconnect') >= 0
            if  scheme == 'https' and not omitConnectTunnel:
                proxyConf = (proxyHost, proxyPort,
                             request.headers.get('Proxy-Authorization', None))
                return self._TunnelingAgent(reactor, proxyConf,
                    contextFactory=self._contextFactory, connectTimeout=timeout,
                    bindAddress=bindaddress, pool=self._pool)
            else:
                _, _, host, port, proxyParams = _parse(request.url)
                proxyEndpoint = TCP4ClientEndpoint(reactor, proxyHost, proxyPort,
                    timeout=timeout, bindAddress=bindaddress)
                agent = SOCKS5Agent(reactor, proxyEndpoint=proxyEndpoint)
                return agent

        return self._Agent(reactor, contextFactory=self._contextFactory,
            connectTimeout=timeout, bindAddress=bindaddress, pool=self._pool)
"
Reading the CSV file and extract the desired amount of data using python,"di = [('Dates', 'Rates', 'Items'),
      ('2013/03/07', '$114', 'Tissot'),
      ('2013/03/07', '$140', 'Adidas'),
      ('2013/03/07', '$344', 'Nike'),
      ('', '', ''),
      ('', '', ''),
      ('','The rate for EVERY item is FIXED', 'No RETURN or EXCHANGE!')]

d2 = []
for x in di:
    if len(''.join(x)) == 0:
        break
    else:
        d2.append(x)

print (d2)
"
Python: How to find n-gram patterns in the text?,"import re
from collections import Counter

p = re.compile('|'.join(map(re.escape, p_words)))
d = Counter(p.findall(s))
# -> Counter({'limited time offer': 2, 'cash': 2})
"
Efficient way of counting True and False,">>> def category(vals):
...     return 1 if all(vals) else 2 if any(vals) else 0
... 
"
How to quickly find first multiple of 2 of list element in list of large integers?,"l = [1, 3, 5, 7, 10, 12, 15]

# ...
j = 0
for i in range(0, len(l)):
    while l[j] < 2*l[i]:
        j += 1
        if j == len(l):
            return -1
    if l[j] == 2*l[i]:
        return i
"
fastest way to convert bitstring numpy array to integer base 2,"# Convert to int array and thus convert each bit of input string to numerals
str2num = np.remainder(A.astype(np.int)//(10**np.arange(3,-1,-1)),10)

de2bi_convarr = 2**np.arange(3,-1,-1)
out = str2num.dot(de2bi_convarr)
"
How to convert a pymongo.cursor.Cursor into a dict?,">>> import pymongo
>>> conn = pymongo.MongoClient()
>>> db = conn.test #test is my database
>>> col = db.spam #Here spam is my collection
>>> cur = col.find()  
>>> cur
<pymongo.cursor.Cursor object at 0xb6d447ec>
>>> for doc in cur:
...     print(doc)
... 
{'a': 1, '_id': ObjectId('54ff30faadd8f30feb90268f'), 'b': 2}
{'a': 1, 'c': 3, '_id': ObjectId('54ff32a2add8f30feb902690'), 'b': 2}
"
Python: find closest key in a dictionary from the given input key,"data.get(num) or data[min(data.keys(), key=lambda k: abs(k-num))]
"
Give a list of strings to a sql-query [Python],"wortliste = ['Bruch', 'Verwerfung']
print(','.join(['%s'] * len(wortliste)))
print(','.join(""'%s'"" % w for w in wortliste))
"
producer/consumer problem with python multiprocessing,"from multiprocessing import Process, Queue, cpu_count
import random
import time


def serve(queue):
    works = [""task_1"", ""task_2""]
    while True:
        time.sleep(0.01)
        queue.put(random.choice(works))


def work(id, queue):
    while True:
        task = queue.get()
        if task is None:
            break
        time.sleep(0.05)
        print ""%d task:"" % id, task
    queue.put(None)


class Manager:
    def __init__(self):
        self.queue = Queue()
        self.NUMBER_OF_PROCESSES = cpu_count()

    def start(self):
        print ""starting %d workers"" % self.NUMBER_OF_PROCESSES
        self.workers = [Process(target=work, args=(i, self.queue,))
                        for i in xrange(self.NUMBER_OF_PROCESSES)]
        for w in self.workers:
            w.start()

        serve(self.queue)

    def stop(self):
        self.queue.put(None)
        for i in range(self.NUMBER_OF_PROCESS):
            self.workers[i].join()
        queue.close()


Manager().start()
"
Python - Remove accents from all files in folder,"if options.remove_nonascii:
    nERROR = 0
    print _(""# Removing all acentuation from coding files in %s"") % (options.folder)
    exts = ('.f90', '.f', '.cpp', '.c', '.hpp', '.h', '.py'); files=set()
    for dirpath, dirnames, filenames in os.walk(options.folder):
        for filename in (f for f in filenames if f.endswith(exts)):
            files.add(os.path.join(dirpath,filename))   
    for i,f in enumerate(files):
        os.rename(f,f+'.BACK')
        with open(f,'w') as fout:
            with open(f+'.BACK','r') as fin:
                for line fin:
                    try:
                        try:
                            line=line.decode('cp1252')
                        except UnicodeDecodeError:
                            line=line.decode('utf-8')
                            # If this still raises an UnicodeDecodeError, let the outer
                            # except block handle it
                        newLine = unicodedata.normalize('NFKD',line).encode('ascii','ignore')
                        fout.write(newLine)
                    except UnicodeDecodeError:
                        nERROR +=1
                        print ""ERROR n %i - Could not remove from Line: %i"" % (nERROR,i)
                        newLine = line
                        fout.write(newLine)
"
Transpose of a Matrix,"In [21]: [[row[i] for row in t] for i in range(len(t[1]))]
Out[21]: [[1, 4], [2, 5], [3, 6]]
"
Extracting what each package provides from a text file using regex in python,"import re
from pprint import pprint

with open('Packages') as fp:
    data = fp.read()

data = re.findall(
    r'''
    (?smx)                  # Dot matches all, Multiline, Verbose
    ^Package:\s*(.*?)$      # The package line
    .*?                 #     Arbitrary lines
    (?:
        ^Provides:\s*(.*?$) # The provides line
        |                   # OR
        ^$                  #  an empty line
    )
    ''',
    data)

data = {k:v.split(',') if v else [] for k,v in data}

pprint(data)
"
How to get function object inside a function (Python),"def f(n):
    return n**2
sqr = f

def f(n):
    return n**3
cube = f
"
Creating matrix from dataframe,">>> df = pd.DataFrame({'C': range(5)})   
   C
0  0
1  1
2  2
3  3
4  4

>>> df.C.values - np.vstack(df.C.values)
array([[ 0,  1,  2,  3,  4],
       [-1,  0,  1,  2,  3],
       [-2, -1,  0,  1,  2],
       [-3, -2, -1,  0,  1],
       [-4, -3, -2, -1,  0]], dtype=int64)
"
"in python, get the output of system command as a string","tmp = os.popen(""ls"").read()
"
"Guess the number game optimization (user creates number, computer guesses)","def computer_guess(num):
    low = 1
    high = 100
    guess = 50
    while guess != num:
        guess = (low+high)//2
        print(""The computer takes a guess..."", guess)
        if guess > num:
            high = guess
        elif guess < num:
            low = guess + 1

    print(""The computer guessed"", guess, ""and it was correct!"")


def main():
    num = int(input(""Enter a number: ""))
    if num < 1 or num > 100:
        print(""Must be in range [1, 100]"")
    else:
        computer_guess(num)

if __name__ == '__main__':
    main()
"
How to search by Date given Datetime index,"print df1.index.date
[datetime.date(2011, 1, 13) datetime.date(2011, 1, 14)
 datetime.date(2011, 1, 18)]

print df2['Date'].dt.date.isin(df1.index.date)
0      True
1      True
2     False
3     False
4     False
5     False
6     False
7     False
8     False
9     False
10    False
11    False
12    False
Name: Date, dtype: bool

print df2[df2['Date'].dt.date.isin(df1.index.date)]
        Date
0 2011-01-13
1 2011-01-13
"
Reshaping a numpy array in python,">>> a.reshape((17520,-1))
array([[    0,     1,     2],
       [    3,     4,     5],
       [    6,     7,     8],
       ..., 
       [52551, 52552, 52553],
       [52554, 52555, 52556],
       [52557, 52558, 52559]])
"
Python argparse.RawTextHelpFormatter with line wrap,"def _split_lines(self, text, width):
    text = self._whitespace_matcher.sub(' ', text).strip()
    return _textwrap.wrap(text, 40)
"
Find and replace value in XML (dynamically),"from lxml import etree

parser = etree.XMLParser(remove_blank_text=True)
tree = etree.parse('thread_group.xml', parser)

for e in tree.xpath('//*'):
    name = e.get('name')
    if name == 'LoopController.loops':
        e.text = '10+10'
    elif name == 'ThreadGroup.num_threads':
        e.text = '1000+1000'


print(etree.tostring(tree, pretty_print=True))
"
appending code to create multiple random moving sprites - python tkinter,"import random

import tkinter as tk

# --- constants --- # UPPERCASE name

RES_X = 800
RES_Y = 600

# --- classes --- # CamelCase name 

class Enemy(object):
    '''single enemy'''

    def __init__(self, canvas):

        # access to canvas
        self.canvas = canvas

        self.radius = 12.5 # random

        self.color = random.choice( ('black', 'red', 'green', 'blue', 'yellow') )

        self.x = random.uniform(self.radius, RES_X-self.radius)
        self.y = random.uniform(self.radius, RES_Y-self.radius)

        self.x1 = self.x-self.radius
        self.y1 = self.y-self.radius

        self.x2 = self.x+self.radius
        self.y2 = self.y+self.radius

        self.oval = self.canvas.create_oval(self.x1, self.y1, self.x2, self.y2, fill=self.color, outline=self.color)

        self.moving = True

        self.start()


    def start(self):
        '''start moving'''

        self.moving = True

        # move this enemy after random time
        random_time = random.randint(150, 3000)
        root.after(random_time, self.move)


    def stop(self):
        '''stop moving'''

        self.moving = False


    def move(self):

        if self.moving: # to stop root.after

            direction = random.randint(1,4)

            if direction == 1: # up
                self.y -= self.radius
                self.y1 -= self.radius
                self.y2 -= self.radius
            elif direction == 2: # down
                self.y += self.radius
                self.y1 += self.radius
                self.y2 += self.radius
            elif direction == 3: # left
                self.x -= self.radius
                self.x1 -= self.radius
                self.x2 -= self.radius
            elif direction == 4: # right
                self.x += self.radius
                self.x1 += self.radius
                self.x2 += self.radius

            self.canvas.coords(self.oval, self.x1, self.y1, self.x2, self.y2)
            # move this enemy after random time
            random_time = random.randint(150, 3000)
            root.after(random_time, self.move)

# --- functions --- # lower_case name 

def add_new_enemy():

    enemies.append(Enemy(canvas))

    # add next enemy after random time
    timer = random.randint(150, 3000)
    root.after(random_time, add_new_enemy)

# --- main ---

root = tk.Tk()
root.title("""")

canvas = tk.Canvas(root, width=RES_X, height=RES_Y, bg=""white"")
canvas.pack()

# 5 enemies at the beginning
enemies = list()

for _ in range(5):
    enemies.append(Enemy(canvas))

# add new enemy after random time
random_time = random.randint(150, 3000)
root.after(random_time, add_new_enemy)

root.mainloop()
"
"Python, SQlite and string substitution","for replacement, replacables in replacements.iteritems():
    query = 'update foo set value=? where value in ({})'.format("","".join(""?""*len(replacables)))
    c.execute(query, [replacement]+replacables)
"
Result the second element of a list in python,"In [14]: names = dict(list) # first name -> second name

In [15]: x = input('Type the first name: ')
Type the first name: Bob

In [16]: names[x] # search the `names` dictionary and return the second name
Out[16]: 'Marley'
"
Count and sum all previous like terms,"from collections import Counter
termList = [""A"", ""A"", ""B"", ""C"", ""C"", ""C"", ""E""]
otherList = [[""A"", ""E""], [""A"", ""B"", ""C"", ""C""], [""B"", ""B""], [""A"", ""C""]]

term_count = Counter(termList)
c = Counter()
for lst in otherList:
    c += Counter(lst)
    if any(c[v] > term_count[v] for v in c):
        break
    print(c)
else:
    print('Exhausted')
"
Python group data into one hour intervalls,"df.groupby(df['date'].map(lambda x: x.hour)
"
strings match after a certain character,"def end_matches(*phrases):           # phrases becomes a tuple that will take any number
    phrase_endings = set()           # number of positional parameters
    for phrase in phrases:
        end = phrase.split('-')[-1]  # take the last element of the split list
        phrase_endings.add(end)
    return len(phrase_endings) == 1  # the set holds only unique values, so a set of
                                     # length 1 means all values in the set are the same
"
Printing out different color text with each button press?,"from random import choice

COLORS = (""blue"", ""red"", ""yellow"")
def b1():
    bl = Label(master, text=""Hell yeah!"", fg=choice(COLORS), bd = 3).pack()       
"
python - parse a bot true a list of bots ( bot_list ),"if not len(filter(lambda x: x in r[""bot""], bot_list)):
"
how to extract some text by use lxml?,"from BeautifulSoup import BeautifulSoup
import urllib

def getit(pagetext, howmany=0):
  soup = BeautifulSoup(pagetext)
  results = []
  dls = soup.findAll('dl')
  for adl in dls:
    thedt = adl.dt
    while thedt:
      thea = thedt.a
      if thea:
        print 'SUBJECT:', thea.string
      thedd = thedt.findNextSibling('dd')
      if thedd:
        print 'CONTENT:',
        while thedd:
          for x in thedd.findAll(text=True):
            print x,
          thedd = thedd.findNextSibling('dd')
        print
      howmany -= 1
      if not howmany: return
      print
      thedt = thedt.findNextSibling('dt')

theurl = ('http://news.search.naver.com/search.naver?'
          'sm=tab%5Fhty&where=news&query=times&x=0&y=0')
thepage = urllib.urlopen(theurl).read()
getit(thepage, 3)
"
"Python: Number of letters in file, simple yet efficient way","with open('yourfile.txt') as f:
    print len( filter(lambda x: ('a' <= x <= 'z') or ('A' <= x <= 'Z'), f.read()) )
"
How to read line in python using defaultdict?,"lookup = defaultdict(list)
wholelookup = defaultdict(list)
pat = re.compile('[a-z](\d+)[a-z]', re.I)

with open('summaryfile.txt') as mydata:
    for s_line in mydata:
        values = s_line.split('\t')
        code = re.match(pat, values[-1])
        if code: 
            lookup[values[-2]].append(code.group(1))
            wholelookup[values[-2]].append(s_line)
"
Assigning the same value to different positions in a list in python,">>> import numpy as np
>>> x = np.array([1,2,3,4,5,6,7,8,9,10])
>>> indices = [0,7,9]
>>> x[indices] = 0  # or just x[[0,7,9]] = 0
>>> x
array([0, 2, 3, 4, 5, 6, 7, 0, 9, 0])
"
Python Generators and yield : How to know which line the program is at,"def f():

    ...
    yield
    ...
    yield
    ... 


for step, value in enumerate(f()):
    try:
        time.sleep(2)
    except KeyboardInterrupt:
        print(step) # step holds the number of the last executed function
"
while loop counter comparing two lists,"color =['orange', 'green', 'yellow', 'violet', 'blue']
sentences = ['The green monkey age the blue egg', 'How many yellow monkey""s are in the green forest']

for sent in sentences:
  print sent
  for col in color:
    print """", col, sent.count(col)
"
Converting list to numpy array issues,">>> img = Image.open('./edgewalker-cat.png')
>>> pix = img.load()
>>> pix
<PixelAccess object at 0x7f1afac932f0>
>>> pix[0,0]
(0, 0, 0)
"
vigenere cipher - not adding correct values,"from itertools import cycle

plaintext = input('enter message: ')
keyword = input('enter keyword: ')

def chr_to_int(char):
    return 0 if char == 'z' else ord(char)-96
def int_to_chr(integer):
    return 'z' if integer == 0 else chr(integer+96)
def add_chars(a, b):
    return int_to_chr(( chr_to_int(a) + chr_to_int(b) ) % 26 )

def vigenere(plaintext, keyword):
    keystream = cycle(keyword)
    ciphertext = ''
    for pln, key in zip(plaintext, keystream):
        ciphertext += add_chars(pln, key)
    return ciphertext

ciphertext = vigenere(plaintext, keyword)
print(ciphertext)
"
"sum squared values in FreqDist, python","sum([i**2 for i in lst])
"
python- searching dictionary sublists; converting dictionary keys to values,">>> dict2 = {}
>>> for word in all_words:
...     # Iterate over the dict1's items
...     for key, sublist in dict1.items():
...         # If the word is found in the sublist
...         if word in sublist:
...             # If the current word is found in dict2's keys
...             if word in dict2:
...                 # Append the current key as a one element tuple
...                 dict2[word] += (key,)
...             else:
...                 # Create a one element tuple and assign it to the word
...                 dict2[word] = (key,)
... 
>>> dict2
{'item': (1, 2, 3), 'word': (1, 2), 'thing': (1, 3)}
"
Write a list to columns,"with open('data.txt','w') as f:
    lis=[[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]
    for x in zip(*lis):
        f.write(""{0}\t{1}\t{2}\n"".format(*x))
"
PyEnchant weird behavior for numbers,"import enchant

b = enchant.Broker()
b.set_ordering(""en_US"",""myspell,aspell"")
print b.describe()
d=b.request_dict(""en_US"")
print d.provider
s = '50'
print d.suggest(s)

b = enchant.Broker()
b.set_ordering(""en_US"",""aspell,myspell"")
print b.describe()
d=b.request_dict(""en_US"")
print d.provider
s = '50'
print d.suggest(s)
"
What is an efficient way to exchange the order of keys in nested dictionaries in Python?,"from collections import defaultdict
d = defaultdict(dict)
for k, v in mydictionary.items():
    for ik, iv in v.items():
            d[ik][k] = iv
"
Passing values of unknown variables Python,"mod = __import__('script2')
for name in [v for v in dir(mod) if not v.startswith('__')]:
    fvar = getattr(mod, name)
    print(fvar)
"
Unusual behaviour when using string concatenation inside for loop,"def disemvowel(string):

    # Letters to remove & the new, vowel-free string
    vowels_list = 'aeiouAEIOU'
    new_string = """"

    # Go through each character in the string
    for character in string:

        # Skip over vowels, include everything else
        if character not in vowels_list:
            new_string += character

    return new_string


print disemvowel('Nasty Comment: Stack exchange sucks!')
"
`uniq` for 2D Theano tensor,"def compile_theano_uniq(x):
    diffs = x[1:] - x[:-1]
    diffs = tt.concatenate([tt.ones_like([x[0]], dtype=diffs.dtype), diffs])
    y = diffs.nonzero_values()
    return theano.function(inputs=[x], outputs=y)

theano_uniq = compile_theano_uniq(tt.vector(dtype='int32'))
"
different colors for rows in barh chart from pandas dataframe python,"import matplotlib.pyplot as plt
import pandas as pd

df = pd.DataFrame({'a':[23, 13, 20, 17, 14, 22],
                   'b':[25, 21, 19, 14, 23, 11]},
                   index=['bob', 'john', 'paul', 'david', 'michael', 'neil'])

a_vals = df.a
b_vals = df.b
ind = np.arange(df.shape[0])
width = 0.35

# Set the colors
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'g']


def autolabel(bars):
    # attach some text labels
    for bar in bars:
        width = bar.get_width()
        ax.text(width*0.95, bar.get_y() + bar.get_height()/2,
                '%d' % int(width),
                ha='right', va='center')

# make the plots
fig, ax = plt.subplots()
a = ax.barh(ind, a_vals, width, color = colors) # plot a vals
b = ax.barh(ind + width, b_vals, width, color = colors, alpha=0.5)  # plot b vals
ax.set_yticks(ind + width)  # position axis ticks
ax.set_yticklabels(df.index)  # set them to the names
ax.legend((a[0], b[0]), ['a', 'b'], loc='center right')

autolabel(a)
autolabel(b)

plt.show()
"
pandas dataframe: index is DatetimeIndex and 4 columns. Some NaN,"anyNA = frame[frame.T.isnull().any()]
"
lxml find tags by regex,"result = root.xpath(""//tag[1]/*[starts-with(local-name(), 'TEXT')]"")
assert(' '.join(e.text for e in result) == 'one two three')
"
Delete a repeating pattern in a string using Python,"import re

print(re.sub('T.*$', '', 'YR-MM-DDT00:00:10'))
"
Is there a more pythonic way to write,"z = np.zeros((nmax+1, mmax))
for i in range(nmax+1):
    z[i] = spe.jn_zeros(i, mmax)
"
Python statement as method's argument,"GLOB_CONTENT = []


def read_file_content(path):
    global GLOB_CONTENT
    with open(path) as f:
        # get file content
        content = f.read()
        # do some content processing here
        GLOB_CONTENT.append(content)
"
pythonic way to match dictionaries,"c = {k: a[k]/v for k,v in b.iteritems()}
"
python regex: match a string with only one instance of a character,"re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')"
Python pygame Detect if mouse is over non transparent part of surface,"for i in range(len(self.OBJECTS)):
    #img = Texture(see op)
    img = self.OBJECTS[i].IMAGE
    print(img)
    e = None
    if self.OBJECTS[i].zOrder == 4: # is isometric image
        # tx and ty are translated positions for screen2iso. See Below
        if ((self.tx >= 0 and self.tx < self.SETTING['MAP_WIDTH']) and (self.ty >= 0 and self.ty < self.SETTING['MAP_HEIGHT'])):
            # map_x and map_y are starting points for the map its self.
            ix, iy = self.screen2iso(
                (x - (self.map_x + (self.SETTING['TILE_WIDTH'] / 2))),
                (y - (self.map_y))
            )
            imgx, imgy = self.screen2iso(
                (img.x - (self.map_x + (self.SETTING['TILE_WIDTH'] / 2))),
                (img.y - (self.map_y))
            )
            if (imgx+2) == ix:
                if (imgy+1) == iy:
                    e = self.OBJECTS[i]
                else:
                    continue
            else:
                continue
    else: # Not an isometric image
        if x > img.x and x < (img.x + img.rect[2]):
            if y > img.y and y < (img.y + img.rect[3]):
                #is click inside of visual area of image?
                if self.getCordInImage(x, y, self.OBJECTS[i].IMAGE):
                    if self.getAlphaOfPixel(self.OBJECTS[i]) != 0:
                        e = self.OBJECTS[i]
                else:
                    continue
            else:
                continue
        else:
            continue
    if e != None:
        if self.CLICKED['zOrder'] < e.getZ():
            self.CLICKED['zOrder'] = e.getZ()
            self.CLICKED['e'] = e
        else:
            continue
    else:
        continue
"
How to prepend data to the binary file?,"with open(""oldfile"", ""rb"") as old, open(""newfile"", ""wb"") as new:
    for chunk in iter(lambda: old.read(1024), b""""):
        new.write(chunk)
"
How do I make functions run as subprocesses in Python?,"import multiprocessing as mp

def print_mynumber(foo):
    """"""This function is obviously more complicated in my script.
    It should be run as a subprocess.""""""
    print(foo)

if __name__ == '__main__':
    for foo in [1,2,3]:
        proc = mp.Process(target = print_mynumber, args = (foo, ))
        proc.start()
"
choosing reads with Hamming distance zero,"def hamming(s1, s2):
    #Return the Hamming distance between equal-length sequences
    if len(s1) != len(s2):
        raise ValueError(""Undefined for sequences of unequal length"")
    return sum(ch1 != ch2 for ch1, ch2 in zip(s1, s2))

for x in Bio.SeqIO.parse(""reads.fastq"",""fastq""):
        reads_array.append(x)

nmer = 7

l_chosen = ['gttattt','attattt','tgctagt']
chosen_reads = []

for x in reads_array:
        s2 = str(x.seq)
        breakFlag = False
        for s in [s2[i:i+nmer] for i in range(len(s2)-nmer-1)]:
                for ds in l_chosen:
                        dist = hamming(ds,s)
                        if dist == 0:
                                print s2, s,ds,dist
                                chosen_reads.append(x)
                                breakFlag = True
                                break;
                if breakFlag:
                        break;
"
Numpy genfromtxt Column Names,"data.dtype.names
"
Calculate most common string in a wxListBox,"c =  Counter()

for name in names:
    c.update(name)

c = c.most_common()
most_com, least_com = c[0][0],c[-1][0]
"
pygame - particle effects,"class classsmoke(pygame.Rect):
    'classsmoke(location)'
    def __init__(self, location):
        self.width=1
        self.height=1
        self.center=location
    def update(self):
        self.centery-=3#You might want to increase or decrease this
        self.centerx+=random.randint(-2, 2)#You might want to raise or lower this as well

#use this to create smoke
smoke=[]
for i in range(20):
    smoke.append(classsmoke(insert location here))
#put this somewhere within your game loop
for i in smoke:
    i.update()
    if i.centery<0:
        smoke.remove(i)
    else:
        pygame.draw.rect(screen, GREY, i)
"
Find() a specified amount of records in mongo/python,">>> rooms = list(db.rooms.find().limit(1000))
>>> print(rooms)
"
auto-name keyword arguments after variable names,"print '{myvariable} {another}'.format(**locals())
"
Need help removing duplicates numbers in Python exercise,"alist = numbers.split()
"
appending LinkedLists items to list using Recursion,"def make_ppend(n, lis):  # add lis as a parameter to be explicit, but you could rely on scope instead of adding this extra parameter
    if n.rest is not None:
        lis.append(n.first)
        make_ppend(n.rest, lis)

def ppend(n):
    lis = []  # now in the local scope
    make_ppend(n, lis)
    return lis
"
Is it possible to override __setattr__ for a class?,"class SetAttrMeta(type):
    def __setattr__(cls, name, value):
        print(""Hey, you can't set {0} to {1}!"".format(name, value))

class C(metaclass=SetAttrMeta):
    pass
"
Python regex findall numbers and dots,"re.findall(r""Test([0-9.]*[0-9]+)"", text)
"
Random function with break command in Python,"import random
z = 0
while(z < 0.5625):
    z = square_of_average(random.random(), random.random(), random.random())
print z
"
How to sort a dictionary based on a list in python,">>> a = {'ground': 'obj1', 'floor 1': 'obj2', 'basement': 'obj3'}
>>> a_list = ('floor 1', 'ground', 'basement')
>>> sorted(a.items(), key=lambda pair: a_list.index(pair[0]))
[('floor 1', 'obj2'), ('ground', 'obj1'), ('basement', 'obj3')]
>>> index_map = {v: i for i, v in enumerate(a_list)}
>>> sorted(a.items(), key=lambda pair: index_map[pair[0]])
[('floor 1', 'obj2'), ('ground', 'obj1'), ('basement', 'obj3')]
"
Looping Function to Define variables,"example_list = ['turtle','cow','goat','pig','swag']
number_of_ones = 1
for item in example_list:
    globals()['a'+('1'*number_of_ones)] = item
    number_of_ones += 1

print(a11111) # prints 'swag'
"
Do something to line and next lines until a symbol is hit,"block =''
with open(filename, 'r') as fil:
    for line in fil:
        if line.startswith('//'):
            if block:
                do_something_with(block)
            block = line
        else:
            block += line
if block:
    do_something_with(block)
"
Regex to match MAC address and also extract it's values,"mac_regx = re.compile(r'^([0-9A-F]{1,2})\:([0-9A-F]{1,2})\:([0-9A-F]{1,2})\:([0-9A-F]{1,2})\:([0-9A-F]{1,2})\:([0-9A-F]{1,2})$', re.IGNORECASE)
"
Should I be using regex in Python,">>> mystr = 'cathy is a singer on fridays'
>>> x = mystr.split()
>>> "" "".join(x[:3] + [""dancer""] + x[4:])
'cathy is a dancer on fridays'
>>>
"
How can I increase number in input statement in python?,"for i in range(1, number_classes + 1):
    p = input(""What is the name of class "" + i)
"
how to select specific words and put them into tuple - list?,"out = [] # store lists of lists
for self.div in self.soup.findAll('li',{'class':'has-sub'}):
     out.append([x[""href""] for x in self.div.find_all('a',href=True)])
     print([x[""href""] for x in self.div.find_all('a',href=True)])



['#', '#', '/onepiece_book', '/onepiece', '#', '/naruto_book', '/naruto', '#', '/bleach_book', '/bleach', '/kingdom', '/tera', '/torico', '/titan', '/seven', '/fairytail', '/soma', '/amsal', '/berserk', '/ghoul', '/kaizi', '/piando']
['#', '/onepiece_book', '/onepiece']
['#', '/naruto_book', '/naruto']
['#', '/bleach_book', '/bleach']
['#', '/conan', '/silver', '/hai', '/nise', '/hunterbyhunter', '/baku', '/unhon', '/souleater', '/liargame', '/kenichi', '/dglayman', '/magi', '/suicide', '/pedal']
['#', '/dobaku', '/gisei', '/dragonball', '/hagaren', '/gantz', '/doctor', '/dunk', '/susi', '/reborn', '/airgear', '/island', '/crows', '/beelzebub', '/zzang', '/akira', '/tennis', '/kuroco', '/claymore', '/deathnote']
"
Python Pandas reads_csv skip first x and last y rows,"nrows : int, default None
Number of rows of file to read. Useful for reading pieces of large files
"
how to make langton's ant move a step in python,"def ant_coordinates(ant_row, ant_col, orientation):
    color = orig_grid[ant_row][ant_col]
    if color == 'white':
        if orientation == 'East':
            ant_row += 1
        elif orientation == 'South':
            ant_col -= 1
    return ant_row, ant_col, orientation
"
How to extract only text from the div containing more divs using scrapy,"In [2]: map(unicode.strip, hxs.select('id(""breadcrumbs"")//text()').extract())
Out[2]: 
[u'',
 u'Home',
 u'',
 u'>',
 u'',
 u'Men',
 u'',
 u'>',
 u'',
 u'Shoes',
 u'',
 u'>',
 u'',
 u'Casual Shoes',
 u'',
 u'>',
 u'',
 u'Moccasins',
 u'',
 u'>',
 u'',
 u'Olive Mocassins',
 u'',
 u'',
 u'']

In [3]: 
"
manipulating lists to find different variables,"map( lambda l: l[0], lists )
"
Faster and more consise way to reverse sentences in a string?,"zhangxaochen's example
> python -m timeit <<EOF
t=""One two three. Four five six.""
' '.join(' '.join(sentence.lower().split()[::-1]).capitalize()+'.' for sentence in t.split('.')[:-1])
EOF                                                                  
100000000 loops, best of 3: 0.012 usec per loop
"
Python: How can I use ggplot with a simple 2 column array?,"from pandas import DataFrame
data2 = []
for i in range(0,len(power_data)):
    data2.append({'TIME': power_data[i][0], 'Watts': power_data[i][1]})

powd = DataFrame(data2)
print powd

# the above can be changed with this line:
# powd = DataFrame(power_data, columns=['TIME', 'Watts'])
# see sugestion in comments 

print ggplot(aes(x='TIME', y='Watts'), data=powd) + \
    geom_point(color='lightblue') + \
    geom_line(alpha=0.25) + \
    stat_smooth(span=.05, color='black') + \
    ggtitle(""Power comnsuption over 13 hours"") + \
    xlab(""Time"") + \
    ylab(""Watts"")
"
format python output to json,"json.dumps({'success': True, 'data': [dict(d, Week=k) for k, d in celldict.iteritems()]})
"
Caesar Cipher validation," if all(ch.isalpha() or ch.isspace() for ch in message):
            return message
"
urllib2 file name,">>> 'http://example.com/somefile.zip'.split('/')[-1]
'somefile.zip'
>>> 'http://example.com/somedir/somefile.zip'.split('/')[-1]
'somefile.zip'
"
How to invoke a function at an exactly given time point in Python?,"import sched
import time

def print_something(x):
    print(x)

def busy_wait(target):
    while time.monotonic() < target:
        pass

s = sched.scheduler(delayfunc=busy_wait)

s.enter(1, 0, print_something, ['first'])
s.enter(2, 0, print_something, ['second'])
s.run()
"
Count occurrence of tuples with Python,">>> from collections import Counter
>>> c = Counter(elem[1] for elem in given_list)
"
beautiful soup extracting parent/sibling tr table class,"for date_row in soup.select('table tbody.body tr.date'):
    for elem in date_row.next_siblings:
        if not elem.name:
            # NavigableString (text) element between rows
            continue
        if 'right' not in elem.get('class', []):
            # all done, found a row that doesn't have class=""right""
            break
"
Python: how does inspect.ismethod work?,"bound_mth = getattr(an_instance_of_MyClass, ""mymethodname"")
"
Alternating sum of integers in Python using lambda,"mults = itertools.cycle([1,-1])
answer = 0
for elem, mult in zip(L, mults):
    answer += elem, mult
"
CPU usage increasing over time,"python -m cProfile myscript.py
"
Python csv reader-zipping reader with range,"import csv

def process(rows, chunk_no):
    for no, data in rows:
        print no, data
    print 'chunk no {} process {} rows'.format(chunk_no, len(rows))

csv_file='really_simple.csv'
with open(csv_file) as fo:
    reader = csv.reader(fo)
    _headers = reader.next()

    chunk_no = 1
    tobesaved = []
    for row in reader:
        tobesaved.append(row)
        if len(tobesaved) == 10:
            process(tobesaved, chunk_no)
            chunk_no += 1
            tobesaved = []
    if tobesaved:
        process(tobesaved, chunk_no)
"
Use Python xmlrpclib with unix domain sockets?,"class UnixStreamHTTPConnection(httplib.HTTPConnection, object):
    def __init__(self, *args, **kwargs):
        self.socketpath = kwargs.pop('socketpath')
        super(UnixStreamHTTPConnection, self).__init__(*args, **kwargs)

    def connect(self):
        self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.sock.connect_ex(self.socketpath)

class UnixStreamTransport(xmlrpclib.Transport, object):
    def __init__(self, *args, **kwargs):
        self.socketpath = kwargs.pop('socketpath')
        super(UnixStreamTransport, self).__init__(*args, **kwargs)
"
Descriptors as instance attributes in python,"class Prop(object):
     def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        return obj._value * obj._multiplier[self]

    def __set__(self, obj, value):
        if obj is None:
            return self
        obj._value = value

class Obj(object):
    val = Prop()

    def __init__(self):
        self._value = 1
        self._multiplier = {Obj.val: 0}
"
Is there a cross-platform way to open a file browser in Python?,"if sys.platform=='win32':
    import _winreg
    path= r'SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon')
    for root in (_winreg.HKEY_CURRENT_USER, _winreg.HKEY_LOCAL_MACHINE):
        try:
            with _winreg.OpenKey(root, path) as k:
                value, regtype= _winreg.QueryValueEx(k, 'Shell')
        except WindowsError:
            pass
        else:
            if regtype in (_winreg.REG_SZ, _winreg.REG_EXPAND_SZ):
                shell= value
            break
    else:
        shell= 'Explorer.exe'
    subprocess.Popen([shell, d])
"
Send a string message to multiple threads,"#!/usr/bin/python3

import threading
from queue import Queue


class IRCBetBot(threading.Thread):
    def __init__(self, q, playerName, channelName, currencyName):
        super().__init__()
        self.channel = channelName
        self.playerName = playerName
        self.currencyName = currencyName
        self.queue = q 

    def run(self):
        readbuffer = """"
        while 1:
            readbuffer = self.queue.get()  # This will block until a message is sent to the queue.
            print(""{} got msg {}"".format(self.channel, readbuffer))

if __name__ == ""__main__"":

    authorisedChannels = [[""user1"",""#channel1"",""coin1""],
                          [""user2"",""#channel2"",""coin2""],
                          [""user3"",""#channel3"",""coin3""]]

threads = {}
for item in authorisedChannels:
    try:
        userName = item[0]
        channelName = item[1]
        currencyPrefix = item [2]
        myTuple = (userName,channelName,currencyPrefix)
        q = Queue() 
        thread = IRCBetBot(q, *myTuple )
        thread.start()
        threads[channelName] = (q, thread)
    except Exception as e:
        print(""An error occurred while creating threads."")
        print(str(e))

while 1:
    a = input(""Input your message (channel: msg): "")
    channel, msg = a.split("":"")
    threads[channel][0].put(msg)  # Sends a message using the queue object
"
Convert float to comma-separated string,"""""""{0:,.2f}"""""".format(24322.34)"
Catch multiple string occurrences in multiline text,">>> re.findall(r'RX\[(\d+)\].*rxPackets\s+:\s+(\d+)', txt, re.S)
[('0', '0')]
"
How can I use a string with the same name of an object in Python to access the object itself?,"getattr(your_obj, x)"
Python XML parsing - multisections,"from xml.etree import ElementTree as ET

def get_items(elements):
    D = {elem.get(""id""): dict((child.tag, child.text) for child in elem) 
         for elem in elements}
    return D

tree = ET.parse(""item.xml"")
options = tree.findall("".//option"")
sections = tree.findall("".//section"")

print ""options:""
print get_items(options)
print ""sections:""
print get_items(sections)
"
How to get a reference to the module of a class,"import sys

mod = sys.modules[cls.__module__]
"
How do I make a list a key value in a dictionary?,"dict.fromkeys((tuple(i) for i in [[1,2],[3,4]]), 0)
"
Remove mean from numpy matrix,"Using numpy.newaxis
>>> A - mean[:, np.newaxis]
array([[-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.],
       [-1.,  0.,  1.]])
"
Replacing specific values in numpy 2D Array,">>> l=[['a', '(junk, b)', '(junk, c)'],
...  ['d', '(junk, e)', '(junk, f)'],
...  ['g', '(junk, h)', '(junk, i)']]
>>> 
>>> np.array([[re.search(r'\b[a-z]\b',x).group() for x in i] for i in l])
array([['a', 'b', 'c'],
       ['d', 'e', 'f'],
       ['g', 'h', 'i']], 
      dtype='|S1')
>>> 
"
how to speed up enumerate for numpy array / how to enumerate over numpy array efficiently?,">>> def somefunc(a):
...     a += 1
...     a /= 15
... 
>>> a = numpy.random.random(10)
>>> b = a
>>> somefunc(a)
>>> a
array([ 0.07158446,  0.07052393,  0.07276768,  0.09813235,  0.09429439,
        0.08561703,  0.11204622,  0.10773558,  0.11878885,  0.10969279])
>>> b
array([ 0.07158446,  0.07052393,  0.07276768,  0.09813235,  0.09429439,
        0.08561703,  0.11204622,  0.10773558,  0.11878885,  0.10969279])
"
Scripting Python for Linux commands,"def runScript():
    script = ""%s %s %s@%s %s::%s %s"" %(rdiff,rdiffVerbosity,rdiffStatistics,clientName,clientHost,clientDir,serverDir)    
    os.system(script)
"
"Anything behind 'if __name__ == ""__main__"":' not executing","def world_tick(self):
    if __name__ == '__main__':
        print ""World tick""
        actor_chunk = len(self.actors)/self.numThreads
        if len(self.processes)==0:
            for _ in range(self.numThreads):
                new_process = multiprocessing.Process(WorldThread.WorldProcess.work, args=(_, self.actors[_*actor_chunk,(_+1)*actor_chunk]))
"
Problems stopping a thread when signaled from a menu event?,"def OnConnect(self, event):
    #print [event.IsChecked()]
    mon = Monitor("""", """", """", self.path, ""60"", self.StatusBar)
    if event.IsChecked():
        print ""Set Menu Label Disconnected""
        self._Connect.SetItemLabel(""Disconnect"")
        print ""Start Monitor""
        mon.Start()
        print ""Start Finished""
    else:
        print ""Set Menu Label Connected""
        self._Connect.SetItemLabel(""Connect"")
        print ""Stop Monitor""
        mon.Stop()
        print ""Stop Finished""
"
Using variables from a returned function as arguments in another function,"def call(arg1=None, arg2=None, **kwargs):
    pass

kwargs = {'arg1': 'test', 'arg3': 'whatever'}
call(**kwargs)
"
Python importing class attributes into method local namespace,"class Test:

    def __init__(self):
        self.a = 10
        self.b = 20
        self.c = 30

    def _read_vars(self):
        return self.a, self.b, self.c

    def dosomething(self):
        a, b, c = self._read_vars()
        return a + b * c

    def dosomethingelse(self):
        a, b, c = self._read_vars()
        return a - b * c
"
Appending a value to a key in Python?,"highscores.setdefault(name, []).append(score)
"
Convert generator object to a dictionary,{i: (i * 2) for i in range(10)}
Initialising a vector field in numpy,"# we make these [2,] arrays to broadcast over the last output dimension
c = np.array([5, 5])
s = np.array([-2, 2])

# this creates a [100, 100, 2] mesh, where the last dimension corresponds
# to (y, x)
yx = np.mgrid[0:nx * dx:dx, 0:ny * dy:dy].T

yxdiff = yx - c[None, None, :]
r = np.hypot(yxdiff[..., 0], yxdiff[..., 1])[..., None]
v3 = s[None, None, :] * yxdiff / r
v3[np.isnan(v3)] = 0
"
Creating multi line text string from list of lists,"lines = ""\n"".join(list(itertools.chain.from_iterable(table))
"
Mapping Int to a List - Python,"[int(x) for x in MyList]
"
Using a tuples of values in sqlalchemy mapped collection,"from sqlalchemy import Integer, Boolean, String, Column, create_engine, \
    ForeignKey
from sqlalchemy.orm import Session, relationship
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.orm.collections import attribute_mapped_collection

Base = declarative_base()

class SomeClass(Base):
    __tablename__ = 'sometable'

    id = Column(Integer, primary_key=True)
    tuple_elements = relationship(
                ""TupleAssociation"", 
                collection_class=attribute_mapped_collection(""name""),
                cascade=""all, delete-orphan""
            )
    items = association_proxy(""tuple_elements"", ""as_tuple"")

class TupleAssociation(Base):
    __tablename__ = 'tuple_association'
    parent_id = Column(Integer, ForeignKey('sometable.id'), primary_key=True)
    tuple_id = Column(Integer, ForeignKey(""tuple_data.id""), primary_key=True)
    name = Column(String)

    tuple_element = relationship(""TupleElement"")

    def __init__(self, key, tup):
        self.name = key
        self.tuple_element = TupleElement(tup)

    @property
    def as_tuple(self):
        return self.tuple_element.as_tuple

class TupleElement(Base):
    __tablename__ = 'tuple_data'

    id = Column(Integer, primary_key=True)
    col1 = Column(Integer)
    col2 = Column(Boolean)

    def __init__(self, tup):
        self.col1, self.col2 = tup

    @property
    def as_tuple(self):
        return self.col1, self.col2


e = create_engine('sqlite://')
Base.metadata.create_all(e)
s = Session(e)

collection = SomeClass()
collection.items[""item name 1""] = (3, True)
collection.items[""item name 2""] = (1, False)
print collection.items

s.add(collection)
s.commit()

collection = s.query(SomeClass).first()
print collection.items
"
How do I initialize values in a dictionary?,"if field not in stats:
    stats[field] = very_expensive_initializer(field)
"
Python eig for generalized eigenvalue does not return correct eigenvectors,">>> a.dot(v[:,0])
array([-0.05349434,  0.0181527 ,  0.01397614])
>>> w[0] * b.dot(v[:,0])
array([-0.05349434+0.j,  0.01815270+0.j,  0.01397614+0.j])
"
Summation of TFIDF sparse vector values for each document in Spark with Python,"rdd = sc.parallelize([
  SparseVector(1048576,[558379],[1.43841036226]),
  SparseVector(1048576, [181911,558379,959994],  
      [0.287682072452,0.287682072452,0.287682072452]),
  SparseVector(1048576,[181911,959994],[0.287682072452,0.287682072452])])

rdd.map(lambda v: v.values.sum())
"
Script Loop through files in directory,"    driver = ogr.GetDriverByName('ESRI Shapefile')

    datasource = driver.Open(i, 0)
    if datasource is None:
        print 'Could not open file'
        sys.exit(1)

    layer = datasource.GetLayer()

    feature = layer.GetNextFeature()
    while feature:

        id = feature.GetFieldAsString('ID')
        Distanta = feature.GetFieldAsString('DIST')
        Z = feature.GetFieldAsString('Z')
        geom = feature.GetGeometryRef()
        x = str(geom.GetX())
        y = str(geom.GetY())

        file.write(id + "" "" + Distanta + "" "" + ""[X]:"" + "" "" + x + ' ' + '[Y]:' + "" ""  + y + "" "" + "" "" + ""[Z]"" + Z + "" "" +  ""\n"")

        feature.Destroy()
        feature = layer.GetNextFeature()

    datasource.Destroy()
    file.close()
"
"SQLite3, Python: fetchone() works on table1 but not table2 but fetchall() works on both","cur.execute('select * from ' + tablename1)
for row in cur:
    print row
"
Anonymous Inner Class in Python,"In [5]: def callback(self):
   ...:     print('World')
   ...: button = type('', (Button,), {'callback': callback})()
   ...: 

In [6]: button.callback()
World
"
binning a dataframe in pandas in Python,"import numpy as np
import pandas

df = pandas.DataFrame({""a"": np.random.random(100),
                       ""b"": np.random.random(100),
                       ""id"": np.arange(100)})

# Bin the data frame by ""a"" with 10 bins...
bins = np.linspace(df.a.min(), df.a.max(), 10)
groups = df.groupby(np.digitize(df.a, bins))

# Get the mean of each bin:
print groups.mean() # Also could do ""groups.aggregate(np.mean)""

# Similarly, the median:
print groups.median()

# Apply some arbitrary function to aggregate binned data
print groups.aggregate(lambda x: np.mean(x[x > 0.5]))
"
Python Pandas - Moving Average with uneven period lengths,"# Random data parameters
num_sample = (0, 100)
nb_sample = 1000
start_date = '2016-06-02'
freq = '2T'

random_state = np.random.RandomState(0)

# Generating random data
df = pd.DataFrame({'data': random_state.randint(num_sample[0], num_sample[1], nb_sample)},
                          index=random_state.choice(
                              pd.date_range(start=pd.to_datetime(start_date), periods=nb_sample * 3,
                                            freq=freq),
                              nb_sample))
# Removing duplicate index
df = df.groupby(df.index).first()
# Removing data for closed periods
df.loc[(df.index.hour >= 22) | (df.index.hour <= 7),'data'] = np.nan
# Resampling
df = df.resample('1T').ffill()
# Moving average by hours
df['avg'] = df['data'].rolling(window=60).mean()

ax = df.plot(kind='line', subplots=True)
"
Tkinter importing without *?,"from tkinter import *
gui = Tk()
Label = ""hello""
Label1 = Label(gui, text=Label)

# Traceback (most recent call last):
#   File ""stackoverflow.py"", line 98, in <module>
#     Label1 = Label(gui, text=Label)
# TypeError: 'str' object is not callable
"
Remove inf from Theano array,"import theano
import theano.tensor as T
import numpy as np

vec = T.vector()
compare = T.isinf(vec)
out = vec[(1-compare).nonzero()]

v = [  1.,   1.,   1.,   1.,  np.inf,   3.,   4.,   5.,   6.,  np.inf]
v = np.asarray(v)

out.eval({var:v})
array([ 1.,  1.,  1.,  1.,  3.,  4.,  5.,  6.])
"
Django TypeError: 'bar' is an invalid keyword argument for this function," class Foo(models.Model):
    name = models.CharField('...............')
    bar = models.ForeignKey(Bar, editable=False, verbose_name=_('Bar'))

    def __init__(self, *args, bar=None, **kwargs):
        super(Foo, self).__init__(*args, **kwargs)
        self.bar = bar
"
Tuple of string and list,">>> import random
>>> from collections import Counter
>>> days_week = ['mon', 'tues', 'wed', 'thurs', 'fri', 'sat']
>>> random_list = [random.choice(days_week) for x in range(10)]
>>> random_list
['wed', 'mon', 'mon', 'tues', 'tues', 'mon', 'wed', 'mon', 'wed', 'sat']
>>> c = Counter(random_list)
>>> c.most_common(1)[0][0]
'mon'
>>> [c.get(k, 0) for k in days_week]
[4, 2, 3, 0, 0, 1]
>>> c.most_common(1)[0][0], [c.get(k, 0) for k in days_week]
('mon', [4, 2, 3, 0, 0, 1])
"
"Does ""for line in file"" work with binary files in Python?","def read_in_chunks(infile, chunk_size=1024):
    while True:
        chunk = infile.read(chunk_size)
        if chunk:
            yield chunk
        else:
            # The chunk was empty, which means we're at the end
            # of the file
            return
"
What is the best way to split a line of numbers separated by a marker and spaces and store it into a tuple?,">>> import re
>>> numpairs = re.compile(r'\b(-?\d+)\s*:\s*(-?\d+)\b')
>>> example = '0:-83 1: -51 2: -69 3: -82 4: -85 8: -90 9: -69 QUAD'
>>> numpairs.findall(example)
[('0', '-83'), ('1', '-51'), ('2', '-69'), ('3', '-82'), ('4', '-85'), ('8', '-90'), ('9', '-69')]
"
How to parse code (in Python)?,"data = """"""Group(""GroupName"") { 
    /* C-Style comment */ 
    Group(""AnotherGroupName"") { 
        Entry(""some"",""variables"",0,3.141); 
        Entry(""other"",""variables"",1,2.718); 
    } 
    Entry(""linebreaks"", 
          ""allowed"", 
          3, 
          1.414 
         ); 
} """"""

from pyparsing import *

# define basic punctuation and data types
LBRACE,RBRACE,LPAREN,RPAREN,SEMI = map(Suppress,""{}();"")
GROUP = Keyword(""Group"")
ENTRY = Keyword(""Entry"")

# use parse actions to do parse-time conversion of values
real = Regex(r""[+-]?\d+\.\d*"").setParseAction(lambda t:float(t[0]))
integer = Regex(r""[+-]?\d+"").setParseAction(lambda t:int(t[0]))

# parses a string enclosed in quotes, but strips off the quotes at parse time
string = QuotedString('""')

# define structure expressions
value = string | real | integer
entry = Group(ENTRY + LPAREN + Group(Optional(delimitedList(value)))) + RPAREN + SEMI

# since Groups can contain Groups, need to use a Forward to define recursive expression
group = Forward()
group << Group(GROUP + LPAREN + string(""name"") + RPAREN + 
            LBRACE + Group(ZeroOrMore(group | entry))(""body"") + RBRACE)

# ignore C style comments wherever they occur
group.ignore(cStyleComment)

# parse the sample text
result = group.parseString(data)

# print out the tokens as a nice indented list using pprint
from pprint import pprint
pprint(result.asList())
"
How to set last column header to a fixed size and maintain it,"myQTreeWidget = QtGui.QTreeWidget()
.
.
.
myQHeaderView = myQTreeWidget.header()
myQHeaderView.setStretchLastSection(False)
myQHeaderView.setResizeMode(6, QtGui.QHeaderView.Stretch)
"
Issue Getting Nested Elements in xml File using minidom,"filename = 'TestProc.xml'
import xml.etree.ElementTree as ET

xmldoc = ET.parse(filename)

variables = xmldoc.findall("".//Procedure/Data2/Variable"")

varName=[e.get('name') for e in variables]
varType=[e.get('type') for e in variables]

print varName, varType
"
strange output when using flags in python,"def find_kmers( arguments=sys.argv[1:] ):
    required_opts = ['-f','-c','-k']

    opts, args = getopt.getopt(arguments,'f:k:c:')

    opt_dic = dict(opts)

    for opt in required_opts:
        if opt not in opt_dic:
            return ""incorrect arguments, please format as: python_script.py -f <filename> -k <kmer> -c <chromosome_name>""

    def rev_comp(sequence):
        reversed_dic = {'A':'T','T':'A','C':'G','G':'C'}
        return ''.join(reversed_dic[_] for _ in sequence[::-1])

    kmer = opt_dic['-k']
    # Replaces grep with temp file with trivial Python equivalent
    with open('S288C_R64.fasta') as f:
        chromosomes = [line[1:].strip() for line in f if '>' in line]

    # No need for any loop when just checking for exact value
    if opt_dic['-c'] not in chromosomes:
        return 'chromosome not found in %s. \n chromosomes in file are:%s'%(opt_dic['-f'],', '.join(str(_) for _ in chromosomes))


    def get_sequence(file):
        sequence = ''
        for line in file:
            if line.startswith('>'): break
            sequence += line.strip()
        return sequence.upper()

    with open(opt_dic['-f']) as ofile:
        for line in ofile:
            if line.startswith('>'):
                if line[1:].strip() == opt_dic['-c']:
                    sequence = get_sequence(ofile)
                    break


    kmer_matches1 = re.finditer('(?=%s)'%opt_dic['-k'],sequence)
    kmer_matches2 = re.finditer('(?=%s)'%opt_dic['-k'],rev_comp(sequence))

    def print_statement(start,strand):
        return '%s\thw1_script\tkmer=%s\t%s\t%s\t.\t%s\t.\tID=S288C;Name=S288C\n'%(opt_dic['-c'],opt_dic['-k'],start,start+len(opt_dic['-k'])-1,strand)

    pos_strand = collections.deque()
    neg_strand = collections.deque()
    for match1,match2 in itertools.izip(kmer_matches1,kmer_matches2):
        pos_strand.append(match1.start()+1)
        neg_strand.append(match2.start()+1)

    with open('answer.gff3','w') as wfile:
        while pos_strand and neg_strand:
            if pos_strand[0]<neg_strand[0]:
                start = pos_strand.popleft()
                wfile.write(print_statement(start,'+'))
            else:
                start = neg_strand.popleft()
                wfile.write(print_statement(start,'-'))

        for start in pos_strand:
            wfile.write(print_statement(start,'+'))
        for start in neg_strand:
            wfile.write(print_statement(start,'-'))

    return 'percent-GC = %s'%str(sum(sequence.count(gc) for gc in [""G"",""C""])/float(len(sequence)))
"
Performance - searching a string in a text file - Python,"def dates(data, dates1):
    r = re.compile(""\d+/\d+/\d+"")
    dict_days = Counter((dt for dt in r.findall(data) if dt in dates1))
    return dict_days.most_common(5)
"
Organize dictionary by frequency,"
>>> Counter('abracadabra').most_common(3)
[('a', 5), ('r', 2), ('b', 2)]
"
Regular expression multi-line replacement in Python,"print 'this works:', re.sub('START.*END', 'NEWTEXT', text, flags=re.DOTALL)
"
BeautifulSoup passing div,"from bs4 import BeautifulSoup
import requests

headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}

# initialize session
session = requests.Session()

# getting playlist
response = session.get('http://animedigitalnetwork.fr/video/naruto-shippuden', headers=headers)
soup = BeautifulSoup(response.content)
playlist = soup.find('a', {'data-playlist': True})['data-playlist']

# getting list of videos
url = 'http://animedigitalnetwork.fr/index.php?option=com_vodvideo&view=playlist&format=raw'
response = session.post(url, data={
    'playlist': playlist,
    'season': '',
    'order': 'DESC'
}, headers=headers)

soup = BeautifulSoup(response.content)
for video in soup.select('div.adn-video'):
    print video.a.get('title')
"
Writing to a CSV with python without brackets,"print ""Tmin="", "", "".join(Tmin)
"
Find the first instance of a variable in a .txt file and delete the line it is in,"def skip_line_with(it, name):
    for line in it:
        if line.startswith(name):
            break
        yield line
    for line in it:
        yield line

with open('a.txt', 'r+') as f:
    replaced = list(skip_line_with(f, 'Name 2,'))
    f.seek(0)
    f.writelines(replaced)
    f.truncate()
"
Estimating the Posterior Predictive in Regression,"lm = lambda x, sample: sample['Intercept'] + sample['x'] * x ## linear model
samples=50 ## Choose to be the same as in plot call
trace_det = np.empty([samples, len(x)]) ## initialise
for i, rand_loc in enumerate(np.random.randint(0, len(trace), samples)):
    rand_sample = trace[rand_loc]
    trace_det[i] = lm(x, rand_sample)
y = trace_det.T
y[0]
"
How to change value for item in a list of dict in python in a simple way?,">>> a = [{1: u'100'}, {2: u'200'}, {3: u'300'}]
>>> [{k:float(v) for k,v in d.iteritems()} for d in a]
[{1: 100.0}, {2: 200.0}, {3: 300.0}]
"
How to apply a function on every row on a dataframe?,"def EOQ(D,p,ck,ch):
    p,D = Partmaster
    Q = math.sqrt((2*D*ck)/(ch*p))
    return Q
ch=0.2
ck=5
df['Q'] = df.apply(lambda row: EOQ(row['D'], row['p'], ck, ch), axis=1)
df
"
Python: split string by a multi-character delimiter unless inside quotes,"x='Coord=""GLOB""AL   Axis=X   Type=""Y   ZR""   Color=""Gray Dark""   Alt=""Q   Z""qz   Loc=End'
print re.split(r'\s+(?=(?:[^""]*""[^""]*"")*[^""]*$)',x)
"
Indexing in Python,"def sem1Sort(semester1, selectionSEM1):
    for period in semester1:
        if period == '1':
            for cls in semester1[period]:
                if cls in selectionSEM1:
                     print cls
"
Django wildcard query,"provider = request.POST.get('provider')

order_items = OrderItem.objects.all()
if provider is not None:
    order_items = order_items.filter(provider=provider)
"
"Create parser with subcommands in argparse, customize positional argument(s)","parent_parser = argparse.ArgumentParser(description=""Read text files."")
parent_parser.add_argument('filename', help='TXT file', type=file, nargs='+')
"
Can I add a second name to a variable,"class MyClass:
    SomeStr = ""Any Val""

A = MyClass
A.SomeStr = ""Bob""
B=A
B.SomeStr = ""Alice""

print(A.SomeStr)
print(B.SomeStr)
"
Parsing diff results (list of tuples) with python,"indexed_changes = enumerate(input)
indexed_and_sorted_by_length = sorted(indexed_changes, key=lambda change: len(change[1][1]), reverse=True)
largest_3_indexed_changes = indexed_and_sorted_by_length[:3]
largest_3_indexed_sorted_by_index = sorted(largest_3_indexed_changes)
largest_3_changes_in_original_order = [indexed_change[1] for indexed_change in largest_3_indexed_sorted_by_index]
"
Construct a tree from list os file paths (Python) - Performance dependent,"from collections import defaultdict

input_ = '''dir/file
dir/dir2/file2
dir/file3
dir2/alpha/beta/gamma/delta
dir2/alpha/beta/gamma/delta/
dir3/file4
dir3/file5'''

FILE_MARKER = '<files>'

def attach(branch, trunk):
    '''
    Insert a branch of directories on its trunk.
    '''
    parts = branch.split('/', 1)
    if len(parts) == 1:  # branch is a file
        trunk[FILE_MARKER].append(parts[0])
    else:
        node, others = parts
        if node not in trunk:
            trunk[node] = defaultdict(dict, ((FILE_MARKER, []),))
        attach(others, trunk[node])

def prettify(d, indent=0):
    '''
    Print the file tree structure with proper indentation.
    '''
    for key, value in d.iteritems():
        if key == FILE_MARKER:
            if value:
                print '  ' * indent + str(value)
        else:
            print '  ' * indent + str(key)
            if isinstance(value, dict):
                prettify(value, indent+1)
            else:
                print '  ' * (indent+1) + str(value)



main_dict = defaultdict(dict, ((FILE_MARKER, []),))
for line in input_.split('\n'):
    attach(line, main_dict)

prettify(main_dict)
"
Load RGBA bitmap with PIL,"from BmpAlphaImagePlugin import BmpAlphaImageFile

x = BmpAlphaImageFile('gearscolor.bmp')
print x.mode
x.save('abc1.png')
"
"""Initializing"" a constant containing a file in python?","if infile:
  data = infile.read(1024)
else:
  data = ''
"
How to prevent rounding in python,"$ cat test.py
a = 10.456878798
print ""{0:.2f}"".format(a)
a = 10.555546877796546
print ""{0:.15f}"".format(a)
"
Find the index of a given combination (of natural numbers) among those returned by `itertools` Python module,"from operator import mul
from functools import reduce # In python 3
def nck_safe(n, k):
    if k < 0 or n < k: return 0
    return reduce(mul, range(n, n-k, -1), 1) // reduce(mul, range(1, k+1), 1)
"
increasing string size through loop,"def iterate_strings(n):
    yield ''
    if n <= 0:
        return
    for c in string.ascii_lowercase:
        for s in iterate_strings(n - 1):
            yield c + s
"
Does python create an object for string constants in equality comparisons?,"from __future__ import print_function
from dis import dis

def f1(s):
    a = ""help""
    print('f1', id(s), id(a))
    return s > a 

def f2(s):
    a = ""help""
    print('f2', id(s), id(a))
    return s > a 

a = ""help""
print(id(a))
print(f1(""he"" + ""lp"")) 
b = ""h""
print(f2(b + ""elp"")) 

print(""\nf1"")
dis(f1)    
"
How to find x to make sure sum(row[i])-sum(clo[i])=bi in python?,">>> def f1(p, b=array([5,-4,5,-6])):
    mp=matrix(array(p).round().reshape((4,4))) #or reshape((b.size, b.size))
    return sum(array(dot(mp-mp.T, array([1,1,1,1]))-b)**2) #or ones((b.size,))

>>> rlist=[]
>>> for i in range(-500, 500): #constrain to a desired range, and just get the one of the possible answers
    q=optimize.fmin(f1, range(i, i+16), disp=False).round()
    rlist.append((q, f1(q)))
    if f1(q)==0:
        break   
>>> rlist[-1]
(array([-501., -498., -495., -493., -497., -499., -494., -492., -496.,
        -491., -494., -487., -498., -490., -490., -489.]), 0.0)

>>> rlist[-1][0].reshape((4,4))
array([[-501., -498., -495., -493.],
       [-497., -499., -494., -492.],
       [-496., -491., -494., -487.],
       [-498., -490., -490., -489.]])
"
Algorithm to acquire location id from piece number,"piecenum=7
row=piecenum/4
column=piecenum%4-1
value you want = puzzle[row][column] 
"
Python : How to access file from different directory,"import pkgutil

data = pkgutil.get_data(""conf"", ""constants.cfg"")
"
Isolating lists based on value in python3,"idx = index_of_max(lists, key=lambda item: [sum(item)]+item)
"
Building an array in a loop,"import random

data = []
for _ in range(100):
    data.append(random.randint(1, 100))
# Ok, a is populated with 100 integers. 

# Grab chunks of 10 ""points""
chunks=[data[x:x+10] for x in xrange(0, len(data), 10)]

# Initialization for the example done. Now, to your max list:
maxes = []
for chunk in chunks:
    maxes.append(max(chunk))
    print ""The max number in chunk %s was: %s"" % (chunk, maxes[-1])
print maxes #prints out the 10 max values of the 10 arrays of 10 numbers
"
Python: HTML generation performance improvement,"def to_string(self):
    return """"""<{tag}{attributes}>{content}</{tag}>"""""".format(
        tag=self.tag,
        attributes=' '.join('%s=""%s""' % (attr, val) for
                            attr, val in self.attributes),
        content=''.join(
            (n if isinstance(n, basestring) else n.to_string()) for
            n in self.contents))
"
Random prime Number in python,"import random
primes = [i for i in range(p,q) if isPrime(i)]
n = random.choice(primes)
"
Python - How to modify text output using %s?,"In [4]: iFile = open(""/tmp/foo.txt"", ""w"")

In [5]: ""Successfully created the file: {0}.txt"".format(iFile)
Out[5]: ""Successfully created the file: <_io.TextIOWrapper name='/tmp/foo.txt' mode='w' encoding='UTF-8'>.txt""

In [6]: ""Successfully created the file: {0}.txt"".format(iFile.name)
Out[6]: 'Successfully created the file: /tmp/foo.txt.txt'
"
"Classes in python, get attribute","for point in self.__points:
    x = point.get_x()
    # do something with this x coordinate
"
Subclassing in python of instantiated superclass,"class ColoredRectangle(Rectangle):
    def __init__(self, rect, color):
        self.rect = rect
        self.color = color
    def __getattr__(self,attr):
        return getattr(self.rect,attr)
eve = Rectangle(3, 5)
"
Python os.isfile assert failing,"assert os.path.isfile(""D:\\Work\\Python Workspace\\Android_API_Parser\\test.txt"")
assert os.path.isfile(r""D:\Work\Python Workspace\Android_API_Parser\test.txt"")
assert os.path.isfile(""D:/Work/Python Workspace/Android_API_Parser/test.txt"")
assert os.path.isfile(os.path.join(""D:"", ""Work"", ""Python Workspace"",
                                   ""Android_API_Parser"", ""test.txt""))
"
How do you filter a string to only contain letters?,"def letters(input):
    return ''.join([c for c in input if c.isalpha()])
"
Container list in Python: standard list vs numpy array,"result = sum(e.calculate_result(i).real for e in element_list for i in xrange(10000))
"
"python csv reader, loop from the second row","first_row = next(csvreader)  # Compatible with Python 3.x (also 2.7)
for row in csvreader:  # begins with second row
    # ...
"
Plane fitting to 4 (or more) XYZ points,"import numpy as np

# coordinates (XYZ) of C1, C2, C4 and C5
XYZ = np.array([
        [0.274791784, -1.001679346, -1.851320839, 0.365840754],
        [-1.155674199, -1.215133985, 0.053119249, 1.162878076],
        [1.216239624, 0.764265677, 0.956099579, 1.198231236]])

# Inital guess of the plane
p0 = [0.506645455682, -0.185724560275, -1.43998120646, 1.37626378129]

def f_min(X,p):
    plane_xyz = p[0:3]
    distance = (plane_xyz*X.T).sum(axis=1) + p[3]
    return distance / np.linalg.norm(plane_xyz)

def residuals(params, signal, X):
    return f_min(X, params)

from scipy.optimize import leastsq
sol = leastsq(residuals, p0, args=(None, XYZ))[0]

print ""Solution: "", sol
print ""Old Error: "", (f_min(XYZ, p0)**2).sum()
print ""New Error: "", (f_min(XYZ, sol)**2).sum()
"
Parsing colon delimited data,"def parse(s):
    d = {}
    lastkey = None
    for fullline in s:
        line = fullline.strip()
        if not line:
            pass
        elif ':' not in line:
            indent = len(fullline) - len(fullline.lstrip())
            if lastindent is None:
                lastindent = indent
            if lastindent == indent:
                lastval.append(line)
        else:
            if lastkey:
                d[lastkey] = lastval
                lastkey = None
            if line.endswith(':'):
                lastkey, lastval, lastindent = key, [], None
            else:
                key, _, value = line.partition(':')
                d[key] = value.strip()
    if lastkey:
        d[lastkey] = lastval
        lastkey = None
    return d

import pprint
pprint(parse(string.splitlines()))
"
Convert Python dict to object?,">>> from collections import namedtuple
>>> MyStruct = namedtuple('MyStruct', 'a b d')
>>> s = MyStruct(a=1, b={'c': 2}, d=['hi'])
>>> s
MyStruct(a=1, b={'c': 2}, d=['hi'])
>>> s.a
1
>>> s.b
{'c': 2}
>>> s.c
>>> s.d
['hi']
"
Getting a list with new line characters,"from itertools import groupby
print ["""".join(grp) for char, grp in groupby(s)]
"
searching string containing 6 words for real words,"In [2]: words = ['word1', 'word2', 'word3', 'word4', 'word5', 'word6', 'word7']

In [3]: phrase1 = 'bla bla word1 bla word2 bla word7'

In [4]: phrase2 = 'bla bla word1 bla word2 bla word7 word6, word4 word3'

In [5]: def match(phrase):
   ...:     n_matches = 0
   ...:     for w in words:
   ...:         if w in phrase:
   ...:             n_matches += 1
   ...:     return n_matches == 6
   ...: 

In [6]: match(phrase1)
Out[6]: False

In [7]: match(phrase2)
Out[7]: True
"
How to flatten a list of list with variable lengths into a single list? python,"def go(it):
    for x in it:
        if x == 'b':
            yield [x] + list(go(it))
        else:
            yield x
            if x == 'c':
                break
"
"Convert ""unknown format"" strings to datetime objects?","In [13]: import dateutil.parser as parser

In [14]: parser.parse(""19970902T090000"")
Out[14]: datetime.datetime(1997, 9, 2, 9, 0)

In [15]: import datetime as dt

In [16]: now = dt.datetime.now()

In [17]: now.isoformat()
Out[18]: '2012-11-06T15:08:51.393631'

In [19]: parser.parse('2012-11-06T15:08:51.393631')
Out[19]: datetime.datetime(2012, 11, 6, 15, 8, 51, 393631)

In [20]: parser.parse('November 6, 2012')
Out[20]: datetime.datetime(2012, 11, 6, 0, 0)
"
How do I generate circular thumbnails with PIL?,"from PIL import Image, ImageOps

mask = Image.open('mask.png').convert('L')
im = Image.open('image.png')
output = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))
output.putalpha(mask)
output.save('output.png')
"
Pandas multiindex dataframe set first row in a column to 0,"In [34]: %timeit df.loc[grouped['index']] = 0
100 loops, best of 3: 7.33 ms per loop
"
Using a nested element's text as a selector in BeautifulSoup,"mapping = {}
key = None
for item in soup.find_all('p'):
    if item.strong:
        key = item.strong.get_text(strip=True).rstrip(':')
        value = item.strong.next_sibling.strip()
    else:
        value = mapping[key] + ' ' + item.get_text(strip=True)
    mapping[key] = value
"
Update Tkinter Label,"from tkinter import *
import math

x, y = 135, 135

def gravitation (obj1,obj2):
    a, b, c, d = can.coords (obj1)
    e, f, g, h = can.coords (obj2)
    dist = math.sqrt ((((a+c)/2)-((e+g)/2))**2+(((b+d)/2)-((f+h)/2))**2)
    grav = 6.67384/dist
    ##################
    lbl[""text""] = grav
    ##################

def move (ov, lr, tb):
    coo = can.coords(ov)
    coo[0] = coo[0] + lr
    coo[1] = coo[1] + tb
    coo[2] = coo[0]+30
    coo[3] = coo[1]+30
    can.coords(ov, *coo)
    ########################
    gravitation(oval1, oval2)
    ########################


def moveLeft ():
    move(oval1, -10, 0)

def moveRight ():
    move(oval1, 10, 0)


def moveTop ():
    move(oval1, 0, -10)

def moveBottom ():
    move(oval1, 0, 10)

def moveLeft2 ():
    move(oval2, -10, 0)

def moveRight2 ():
    move(oval2, 10, 0)

def moveTop2 ():
    move(oval2, 0, -10)

def moveBottom2 ():
    move(oval2, 0, 10)



wind = Tk()
wind.title (""Move Da Ball"")
can = Canvas (wind, width = 300, height = 300, bg = ""light blue"")
can.pack (side = LEFT,padx = 5, pady = 5)
Button(wind, text = 'Quit', command=wind.destroy).pack(padx = 5, pady = 5)

oval1 = can.create_oval(x,y,x+30,y+30,width=2,fill='orange') #Planet 1 moving etc
Button(wind, text = 'Left', command=moveLeft).pack(padx = 5, pady = 5)
Button(wind, text = 'Right', command=moveRight).pack(padx = 5, pady = 5)
Button(wind, text = 'Top', command=moveTop).pack(padx = 5, pady = 5)
Button(wind, text = 'Bottom', command=moveBottom).pack(padx = 5, pady = 5)

oval2 = can.create_oval(x+50,y+50,x+80,y+80,width=2,fill='orange') #Planet 2 moving etc
Button(wind, text = 'Left', command=moveLeft2).pack(padx = 5, pady = 5)
Button(wind, text = 'Right', command=moveRight2).pack(padx = 5, pady = 5)
Button(wind, text = 'Top', command=moveTop2).pack(padx = 5, pady = 5)
Button(wind, text = 'Bottom', command=moveBottom2).pack(padx = 5, pady = 5)

###############################
lbl = Label(wind, bg = 'white')
lbl.pack(padx=5, pady=5)
gravitation(oval1, oval2)
##############################

wind.mainloop()
"
getting the index of a row in a pandas apply function,"In [182]:

df = pd.DataFrame([[1,2,3],[4,5,6]], columns=['a','b','c'])
def rowFunc(row):
    return row['a'] + row['b'] * row['c']

def rowIndex(row):
    return row.name
df['d'] = df.apply(rowFunc, axis=1)
df['rowIndex'] = df.apply(rowIndex, axis=1)
df
Out[182]:
   a  b  c   d  rowIndex
0  1  2  3   7         0
1  4  5  6  34         1
"
Plotting python object attribute and objects are stored in list,"import numpy as np
import matplotlib.pyplot as plt

class Particle(object):
    def __init__(self, value = 0, weight = 0):
        self.value = value
        self.weight = weight
lst = []
for x in range(0,10):
    lst.append(Particle(value=np.random.random_integers(10), weight = 1))

values = [x.value for x in lst]

plt.plot(values, 'ro')
plt.show()
"
Search all drives for a file,"drives = ['{}:\\' for letter in 'CDEFGHIJKLMNOPQRSTUVWXYZ']
for drive in drives:
    if os.path.isdir(drive):
        filepath = find_file(target, drive)
        if filepath is not None:
            break
"
How to reference a static attribute from within a class in Python?,"class MyClass:
    var = 1

    # we are executing this code as a single block
    # so you must reference the variable as is usual
    print(var)

    # default values are *not* inside the definition.
    # they are evaluated in the outer scope, so use plain ""var"" here
    def method(self, a_default=var):
        print(a_default)

    def other_method(self):

        # inside methods you are in a different scope
        print(MyClass.var)

        # equivalent *if* no ""var"" instance attributes exists
        print(self.var)
"
A Text Table Writer/Printer for Python,"
>>> import texttable
>>> x = texttable.Texttable()
>>> x.add_rows([[""Length"", ""Time""], [0, 0.00000], [250, 0.00600], [500, 0.02100], [750, 0.04999]])
>>> print x.draw()
+--------+-------+
| Length | Time  |
+========+=======+
| 0      | 0     |
+--------+-------+
| 250    | 0.006 |
+--------+-------+
| 500    | 0.021 |
+--------+-------+
| 750    | 0.050 |
+--------+-------+
"
Element-wise Addition of 2 Lists in Python?,">>> from operator import add
>>> map(add, list1, list2)
[5, 7, 9]
"
How do I add tags to certain strings in python using re.sub?,">>> regex = re.compile(r'(\b(iphone|games|mac)\b(\s*(iphone|games|mac)\b)*)', re.I)
>>> regex.sub(r'<em>\1</em>', 'I love downloading iPhone games from my mac')
'I love downloading <em>iPhone games</em> from my <em>mac</em>'
>>> regex.sub(r'<em>\1</em>', 'I love downloading iPhone gameses from my mac')
'I love downloading <em>iPhone</em> gameses from my <em>mac</em>'
>>> regex.sub(r'<em>\1</em>', 'I love downloading iPhoney games from my mac')
'I love downloading iPhoney <em>games</em> from my <em>mac</em>'
>>> regex.sub(r'<em>\1</em>', 'I love downloading iPhoney gameses from my mac')
'I love downloading iPhoney gameses from my <em>mac</em>'
>>> regex.sub(r'<em>\1</em>', 'I love downloading miPhone gameses from my mac')
'I love downloading miPhone gameses from my <em>mac</em>'
>>> regex.sub(r'<em>\1</em>', 'I love downloading miPhone games from my mac')
'I love downloading miPhone <em>games</em> from my <em>mac</em>'
>>> regex.sub(r'<em>\1</em>', 'I love downloading iPhone igames from my mac')
'I love downloading <em>iPhone</em> igames from my <em>mac</em>'
"
unzip extract in python,"def unzip_artifact( local_directory, file_path ):
    fileName, ext = os.path.splitext( file_path )
    if ext == "".zip"":
        print 'unzipping file ' + basename(fileName) + ext
        try:
            with zipfile.ZipFile(file_path) as zf:
                for member in zf.infolist():
                        # Path traversal defense copied from
                        # http://hg.python.org/cpython/file/tip/Lib/http/server.py#l789
                        zf.extract(member, local_directory)
        except zipfile.error, e:
            print ""Bad zipfile: %s"" % (e)
        return
"
"Is it possible to take an ordered ""slice"" of a dictionary in Python based on a list of keys?","res = [(x, my_dictionary[x]) for x in my_list]
"
python: retrieve names of all builtins,">>> dir(__builtins__)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']
"
Ignoring unrecognized options when parsing argv?,"Python 2.6.6 (r266:84292, Jun 16 2011, 16:59:16) 
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> from getopt import getopt
>>>
>>> argv = ['-v', '--plugin=foo', '--', '--extra=bar', '-c']
>>> opts, extra = getopt(argv, 'v', 'plugin=')
>>>
>>> opts
[('-v', ''), ('--plugin', 'foo')]
>>>
>>> extra
['--extra=bar', '-c']
"
Replace sequences between files using Biopython,"ids_not_wanted = [x.id for x in SeqIO.parse(r""c:\Users\Sergio\Desktop\wsp.fasta"", ""fasta"")]
records_to_save_2 = [x for x in SeqIO.parse(r""c:\Users\Sergio\Desktop\wsp.fasta"", ""fasta"") if (x.id not in ids_not_wanted)]

records_to_save.append(records_to_save_2)
# If duplicate records are a problem, eliminate them using ""set""
records_to_save = list(set(records_to_save))
SeqIO.write(records_to_save, r""c:\Users\Sergio\Desktop\nuevsp.fasta"", ""fasta"")
"
loading issue of subpackages in astropy 0.3 in ubuntu 14.04,"from astropy.cosmology import WMAP9 as cosmo
H0 = cosmo.H(0)
H0.value, H0.unit
"
Building a dictionary from a tab delimited file in a pythonic way,"import csv
import StringIO
results = ""sku\tdelivered-price-gbp\tdelivered-price-euro\tid\n32850238\t15.53\t35.38\t258505\n""

data = list(csv.DictReader(StringIO.StringIO(results), delimiter='\t'))
print(data)
"
How to preserve and reverse a string?,"input_string = ""this is a sample test""
words = input_string.split()
output_string = """"
for word in words:
    for c in reversed(word):
        output_string += c
    output_string += "" ""
print(output_string)
"
Form class __init__ not working,"def createFormClass(validate):
    class MyClass(object):
        if validate:
            def clean_email(self):
                pass

    return MyClass

MyClassValidated = createFormClass(True)
MyClassNotValidated = createFormClass(False)
"
"django-rest-framework, how to paginate","from rest_framework.pagination import PageNumberPagination
@csrf_exempt
def app_berria_list(request):
    if request.method == 'GET':
        berriak = Berria.objects.all()
        paginator = PageNumberPagination()
        page = paginator.paginate_queryset(berriak, request)
        serializer = BerriaSerializer(page, many=True, context={'request': request})
        return paginator.get_paginated_response(serializer.data)
"
xpath why i got empty result in this expth,"import requests

with requests.Session() as session:
    session.get('http://www.justproperty.com/search/uae/apartments/filter__cid/0/sort/score__desc/per_page/20/page/1')

    params = {
        'url': 'filter__cid/0/sort/score__desc/per_page/20/page/1',
        'ajax': 'true'
    }
    response = session.get('http://www.justproperty.com/search/featured-properties/', params=params)
    results = response.json()

    for result in results:
        print result['description']
"
"Python script, runs well, but not perfectly, debugging help","random.shuffle(required_playlist)
"
"python parsing input, making a sum of the input","with open(inputfilename) as inputfh:
    for line in inputfh:
        columns = line.rsplit(None, 2)
        if len(columns) < 3:
            continue  # not a line with name and numbers
        percentage = int(columns[2])
        if 70 <= percentage <= 80:
            # we have a line that falls within your criteria
"
How to extract zip file recursively in Python,"import os
import io
import zipfile

def extract(filename):
    z = zipfile.ZipFile(filename)
    for f in z.namelist():
        # get directory name from file
        dirname = os.path.splitext(f)[0]  
        # create new directory
        os.mkdir(dirname)  
        # read inner zip file into bytes buffer 
        content = io.BytesIO(z.read(f))
        inner_zip = zipfile.ZipFile(content)
        for inner_zip in sub_zip.namelist():
            sub_zip.extract(inner_zip, dirname) 
"
Many-To-Many Relationship in ndb,"class Person(ndb.Model):
    guilds = ndb.KeyProperty(kind=""Guild"", repeated=True)

class Guild(ndb.Model):
    @property
    def members(self):
        return Person.query().filter(Person.guilds == self.key)

    def add_person(self, person):
        person.guilds.append(self.key)
        person.put()
"
Python: Grocery list/ comparing two sets of user input,"item_numN = int(raw_input(""Please enter the number of items on your grocery list.\n""))
item_list = [str(raw_input(""What is the item #"" + str(count + 1) + "" on your list?\n"")) for count in range(item_numN)]

item_numB = int(raw_input(""Please enter the number of items you bought.\n""))
item_bought = [str(raw_input(""What is the item #"" + str(count + 1) + "" that you bought?\n"")) for count in range(item_numB)]

items_needed = set(item_list) - set(item_bought)
print 'You still need {}.'.format(', '.join(items_needed))
"
Replace for-loop across week with list comprehension,"week_matrix = [[i,j,0] for i in range(7) for j in range(n_day_cells)]
"
Take the average only of two consecutive values in pandas,"print df.groupby(df.a.isnull().cumsum().fillna(0)).mean().set_index('index')
                  a       b       c
index                              
1368725625  482.455     NaN     NaN
1368725730      NaN  429.90     NaN
1368725760      NaN  433.39     NaN
1368725850      NaN     NaN  415.94
1368726225  432.230     NaN  401.59
1368726660      NaN  424.08     NaN
1368727120  472.560     NaN  411.67
1368727410      NaN  440.76     NaN
1368727990  465.195  438.82     NaN
print df.groupby(df.a.isnull().cumsum().fillna(0)).mean().set_index('index')[['a']]
                 a
index              
1368725625  482.455
1368725730      NaN
1368725760      NaN
1368725850      NaN
1368726225  432.230
1368726660      NaN
1368727120  472.560
1368727410      NaN
1368727990  465.195
"
Find matching rows in 2 dimensional numpy array,">>> np.where((vals == (0, 1)).all(axis=1))
(array([ 3, 15]),)
"
how to get the last part of a string before a certain character?,"print(x.rsplit('-', 1)[0])"
Insert XML Value/Element with Python,"with open('newxml.xml','w') as of:
    of.write(ET.tostring(xml.getroot()).decode())
"
Returning empty list -1,"def findMiniRow(numlst):
    x = []
    for lst in numlst:
        x.append(sum(lst))
        m = min(x)
    return [i for i, j in enumerate(x) if j == m] if numlst else -1
"
"How can I create an ""ID"" column in one dataframe based on the index of another dataframe?","import io
import pandas as pd

df = pd.read_table(io.BytesIO('''\
Sample_Artist Sample_Song Sampled_Artist Sampled_Song
A+            foo         B+             bar
A+            foobar      C+             barfoo
B+            5           A+             foobar
A+            foo         B+             5'''), sep='\s+')

df1 = pd.read_table(io.BytesIO('''\
Artist Song
A+     foo
A+     foobar
B+     bar
B+     5
C+     barfoo'''), sep='\s+')


df1.index.names = ['Sampled_ID']
df1 = df1.reset_index()

grouped = df.groupby(['Sample_Artist', 'Sample_Song'])
df['Sample_ID'] = grouped['Sample_Artist'].transform(
    lambda grp: grp.index.get_level_values(0)[0])

result = pd.merge(df, df1, left_on=['Sampled_Artist', 'Sampled_Song'],
     right_on=['Artist', 'Song'],
     how='left')

result = result[['Sample_Artist',
                 'Sample_Song',
                 'Sampled_Artist',
                 'Sampled_Song',
                 'Sample_ID',
                 'Sampled_ID']]


print(result)
"
Getting all columns in a list with the same tablename,"d = collections.defaultdict(list)
for t, c, n in get_data_from_table:
    d[t].append(c)
tables = [[key] + values for key, values in d.items()]
"
Splitting list of python dictionaries by repeating dictionary key values,">>> from collections import defaultdict
>>> dd = defaultdict(list)
>>> foo = [
      {'host': 'localhost', 'db_name': 'test', 'table': 'partners'},
      {'host': 'localhost', 'db_name': 'test', 'table': 'users'},
      {'host': 'localhost', 'db_name': 'test', 'table': 'sales'},
      {'host': 'localhost', 'db_name': 'new', 'table': 'partners'},
      {'host': 'localhost', 'db_name': 'new', 'table': 'users'},
      {'host': 'localhost', 'db_name': 'new', 'table': 'sales'},
]
>>> for d in foo:
        dd[(d['host'], d['db_name'])].append(d)
"
Avoid screen overlap in Tkinter,"import Tkinter
from Tkinter import Tk, Frame, Menu
from Tkinter import IntVar, BOTH
class App(Frame):

    def __init__(self, parent):
        Frame.__init__(self, parent)            
        self.parent = parent        
        self.initUI()

    def initUI(self):      
        self.parent.title(""Test"")        
        menubar = Menu(self.parent)
        self.parent.config(menu=menubar)        
        fileMenu = Menu(menubar)     
        menubar.add_cascade(label=""Discrepancy"", menu=fileMenu)
        fileMenu.add_command(label=""View current case"", command=self.view)
        fileMenu.add_command(label=""OK Process"", command=self.OK)

        self.var = IntVar()

        self.frame_view = Frame(self)
        self.view_label1 = Tkinter.Label(self.frame_view, text=""RMA"", relief=Tkinter.RIDGE)
        self.view_label2 = Tkinter.Label(self.frame_view, text=""SN"", relief=Tkinter.RIDGE)
        self.view_label1.grid(row=0, column=0, sticky=Tkinter.W)
        self.view_label2.grid(row=0, column=1, sticky=Tkinter.W)
        #self.frame_view.pack(fill=BOTH, expand=1)

        self.frame_ok = Frame(self)
        self.ok_label1 = Tkinter.Label(self.frame_ok, text=""RMA"")
        self.ok_label2 = Tkinter.Label(self.frame_ok, text=""SN"")
        self.ok_entry1 = Tkinter.Entry(self.frame_ok, width=50)
        self.ok_entry2 = Tkinter.Entry(self.frame_ok, width=50)
        self.ok_label1.grid(row=0)
        self.ok_label2.grid(row=1)
        self.ok_entry1.grid(row=0, column=1, pady=4)
        self.ok_entry2.grid(row=1, column=1, pady=4)
        #self.frame_ok.pack(fill=BOTH, expand=1)

        self.pack(fill=BOTH, expand=1)

    def view(self):
        self.frame_ok.grid_forget()

        self.frame_view.grid()

    def OK(self):
        self.frame_view.grid_forget()

        self.frame_ok.grid()


def main():

    root = Tk()
    root.geometry(""1280x720"")
    app = App(root)
    root.mainloop()

if __name__ == '__main__':
    main() 
"
Python dictionaries: changing the order of nesting,"dict((n, [nested_dicts[i][n] for i in range(1,301)]) for n in [""name1"",""name2"",""name3""])
"
Flattening nested loops / decreasing complexity - complementary pairs counting algorithm,"
def complementary_pairs_number(complementary_diff, values):
    value_key = {} # dictionary storing indexes indexed by values
    for index, item in enumerate(values):
        value_key.setdefault(item,[]).append(index)
    # print(value_key)
    num_pairs = 0
    seen = set()
    for pos_value in value_key: 
        if pos_value in seen: continue
        sym_value = complementary_diff - pos_value
        seen.add(sym_value)
        if sym_value in value_key: 
            # print(pos_value, sym_value, value_key[pos_value],value_key[sym_value])
            n = len(value_key[pos_value])*len(value_key[sym_value])
            if pos_value == sym_value:
                num_pairs += n
            else:
                num_pairs += 2*n
    return num_pairs
"
Dictionary key in python are RegExp,">>> di={r'^\w\w?a': '""a"" is second or third letter' , r'^[^aeiou][aeiou]': ""vowel after non-vowel""}
>>> for s in ('aaa', 'bag', 'box', 'drag'):
...     print s, [di[k] for k in di if re.search(k, s)]
... 
aaa ['""a"" is second or third letter']
bag ['vowel after non-vowel', '""a"" is second or third letter']
box ['vowel after non-vowel']
drag ['""a"" is second or third letter']
"
Update dict with extra values,"show = {
        'episodes': [
                    {'episode': 0, 'season': 1}, {'episode': 1, 'season': 1}, {'episode': 2, 'season': 1},
                    {'episode': 0, 'season': 2}, {'episode': 1, 'season': 2}, {'episode': 2, 'season': 2},
                ], 
            'imdbnumber': '260449', 'title': 'Vikings'
        }


trakt_show = {'ids':{}}

if 'imdbnumber' in show:
    if show['imdbnumber'].startswith('tt'):
        trakt_show['ids']['imdb'] = show['imdbnumber']
    else:
        trakt_show['ids']['tvdb'] = show['imdbnumber']
try:
    trakt_show['ids']['tvdb'] = show['tvdb']
except:
    pass
try:
    trakt_show['ids']['imdb'] = show['imdb']
except:
    pass
try:
    trakt_show['title'] = show['title']
except:
    pass

if 'episodes' in show and show['episodes']:
    ep = {}
    for episode in show['episodes']:
        try:
            ep[episode[""season""]].append(episode[""episode""])
        except:
            ep[episode[""season""]] = [episode[""episode""]]

    ep1 = {""seasons"":[]}
    for i in ep:
        tmp = dict()
        tmp[""number""] = i
        tmp[""episodes""] = []
        for j in ep[i]:
            tmp[""episodes""].append({""number"":j})
        ep1[""seasons""].append(tmp)
    trakt_show.update(ep1)
print trakt_show
"
Finding intersection between straight line and contour,"#for contour 
def p_0(num,t) :
    esc_p = np.sum((((-1)**n)*(np.exp(t)**n)*((math.factorial(n)*((n+1)**0.5))**-1)) for n in range(1,num,1))
    return esc_p+1

tau = np.arange(-2,3,0.1)

x,y= np.meshgrid(tau,tau)
cs = plt.contour(x, y, np.log(p_0(51, y)/p_0(51, x)),[0.2],colors='k')

p=0.75
logp = (np.log(p*np.exp(tau)))
plt.plot(tau,logp)

from shapely.geometry import LineString
v1 = cs.collections[0].get_paths()[0].vertices

ls1 = LineString(v1)
ls2 = LineString(np.c_[tau, logp])
points = ls1.intersection(ls2)
x, y = points.x, points.y

from scipy import optimize

def f(p):
    x, y = p
    e1 = np.log(0.75*np.exp(x)) - y
    e2 = np.log(p_0(51, y)/p_0(51, x)) - 0.2
    return e1, e2

x2, y2 = optimize.fsolve(f, (x, y))

plt.plot(x, y, ""ro"")
plt.plot(x2, y2, ""gx"")

print x, y
print x2, y2
"
wxpython how to display button label into xlwt,"import wx
from xlwt import *

w = Workbook()
ws1 = w.add_sheet('sheet 1')

class MyFrame(wx.Frame):

    def __init__(self,parent,id):
        wx.Frame.__init__(self,parent,id,'Button to Excel', size = (300,300))
        panel=wx.Panel(self)

        extBtn = wx.Button(panel, label=""Exit"",pos=(100,150))
        extBtn.Bind(wx.EVT_BUTTON, self.onClose)

        btn = wx.Button(panel,label = ""Mem 1"",pos=(100,100))
        btn.Bind(wx.EVT_BUTTON, self.onButton)

    def onClose(self, event):
        w.save('a.xls')
        self.Close()

    def onButton(self,event):
        btn = event.GetEventObject()
        lbl = btn.GetLabel()
        ws1.write(0, 0, lbl)


if __name__ == '__main__':
    app=wx.PySimpleApp()
    frame=MyFrame(parent=None,id=-1)
    frame.Show()
    app.MainLoop()
"
Python: get corresponding information of data points interactively with mouse,"import matplotlib.pyplot as plt
from mpldatacursor import datacursor
import random

fig, ax = plt.subplots()
ax.set_title('Click on a dot to display its label')

# Plot a number of random dots
for i in range(1, 1000):
    ax.scatter([random.random()], [random.random()], label='$ID: {}$'.format(i))

# Use a DataCursor to interactively display the label for a selected line...
datacursor(formatter='{label}'.format)

plt.show()
"
How to convert DMS to Radian with a given format : DD-MM-SS in python,"import numpy

def dms_string_to_radians(dms_string):
    degrees = numpy.sum(numpy.fromstring(dms_string, sep='-') * 
            [1.0, 1/60.0, 1/3600.0])

    return numpy.radians(degrees)

print dms_string_to_radians('47-39-28')
"
Is it possible to use einsum to transpose everything?,"In [44]: np.matrix(B).T
Out[44]: 
matrix([[0],
        [1],
        [2],
        [3],
        [4]])

In [45]: np.matrix(A).T
Out[45]: 
matrix([[ 0,  5, 10, 15, 20],
        [ 1,  6, 11, 16, 21],
        [ 2,  7, 12, 17, 22],
        [ 3,  8, 13, 18, 23],
        [ 4,  9, 14, 19, 24]])
"
Pandas: transposing one column in a multiple column df,"pvt = pd.pivot_table(df, index=df.index, columns='cmte_id',
                     values='amount', aggfunc='sum', fill_value=0)
"
Exit to command line in Python,"def do_the_thing():
    if not ""id"" in dir():
         print ""id not set, cannot continue""
         return
         # exit here!
    # otherwise continue with the rest of the script...
    print ""alright...""
    # [ more code ]

# Call the method
do_the_thing()
"
Using 'r+' mode to overwrite a line in a file with another line of the same length,"with open(""vegetables"",""r+"") as t:
  data = t.read()
  t.seek(data.index(""apples_""))
  t.write(""lettuce"")
"
python dict add and modify operation,"for k in li:
    d[k] = d.get(k,0) + 2
"
Send e-mail to Gmail with inline image using Python,"import smtplib
import socket
import ssl
import sys

class SMTP_SSL(smtplib.SMTP_SSL):
    """"""Add support for additional ssl options.""""""
    def __init__(self, host, port=0, **kwargs):
        self.ssl_kwargs = kwargs.pop('ssl_kwargs', {})
        self.ssl_kwargs['keyfile'] = kwargs.pop('keyfile', None)
        self.ssl_kwargs['certfile'] = kwargs.pop('certfile', None)
        smtplib.SMTP_SSL.__init__(self, host, port, **kwargs)

    def _get_socket(self, host, port, timeout):
        if self.debuglevel > 0:
            print>>sys.stderr, 'connect:', (host, port)
        new_socket = socket.create_connection((host, port), timeout)
        new_socket = ssl.wrap_socket(new_socket, **self.ssl_kwargs)
        self.file = getattr(smtplib, 'SSLFakeFile', lambda x: None)(new_socket)
        return new_socket
"
Find minimum and maximum values of a function,"import numpy as np
from scipy.optimize import fmin
import math

def f(x):
    exp = (math.pow(x[0], 2) + math.pow(x[1], 2)) * -1
    return math.exp(exp) * math.cos(x[0] * x[1]) * math.sin(x[0] * x[1])

fmin(f,np.array([0,0]))
"
reading in files line by line and storing the content of each line in a list for further processing,"f1 = open('file1', 'r')
f2 = open('file2', 'r')

for i in range(3): # your actual conditions go here
    # read in next line from each of the files and store them in a list of ints
    varlist1 = f1.readline().strip().split(', ')
    varlist1 = [int(x) for x in varlist1] # use float(x) here if a,b,... are floats
    varlist2 = f2.readline().strip().split(', ')
    varlist2 = [int(x) for x in varlist2] # use float(x) here if g,h,... are floats
    # do something more interesting with varlist1, varlist2 here
    # than just printing them
    print(varlist1)
    print(varlist2)

f1.close()
f2.close()
"
Creating an Attribute class that allows adjusting a base value?,"class AttributeDescriptor(object):
    def __init__(self):
        self.initialized = False
        self.base = 0
        self.adjustments = []

    def compute(self):
        return self.base + sum(self.adjustments)

    def __set__(self, inst, value):
        if not self.initialized:
            self.base = value
            self.initialized = True
            print(""Attribute initialized to %s"" % value)
        else:
            # Calculate delta
            delta = (value - self.compute())
            self.adjustments.append(delta)
            print(""Adjustment added: %s"" % delta)

    def __get__(self, inst, owner):
        return self.compute()

class Creature(object):
    health = AttributeDescriptor()
    armor  = AttributeDescriptor()

    def __init__(self, health=100, armor=0):
        self.health = health
        self.armor  = armor


c1 = Creature(50)
c1.health = 60      # Adds a +10 adjustment
print c1.health     # 60
c1.health += 10     # Add a +10 adjustment
print c1.health     # 70
#print c1.health.adjustments     # This won't work ('int' object has no attribute 'adjustments')
"
Flask-RESTful - don't return object property instead of returning null,"class ClientList(Resource):
    def get(self):
       return [client_marshal(client) for client in model.Client.query.all()]
"
Slicing different rows of a numpy array differently,">>> pastpresent2 = np.array([[1, 7], [3, 9]])
>>> (pastpresent2[:,0][:,np.newaxis] < np.arange(nlayers+2)) & 
    (pastpresent2[:,1][:,np.newaxis] + 1 > np.arange(nlayers+2)).astype(int)       
array([[0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0]])
"
"Regex: How to find attribute in html, that includes another attribute","from bs4 import BeautifulSoup

html = """"""<frameset border=""0"" framespacing=""0"" frameborder=""0"" rows=""85,*"">
<frame border=""0"" marginheight=""0"" name=""logoframe"" scrolling=""no"" noresize target=""middle"" src=""a.html"" onload=""reload()"">

<frameset cols=""235,*"">
<frame border=""0"" name=""left"" src=""b.html"" scrolling=""no""><frame border=""0"" noresize name=""main"" src=""c.html""  scrolling=""auto""></frameset><noframes>
<body topmargin=""0"" leftmargin=""0"">
<p>This page uses frames, but your browser doesn't support them.</p></body>         
</noframes>
</frameset></html>""""""

soup = BeautifulSoup(html)

frame = soup.find('frame', attrs={'name': 'main'})
print frame['src']
"
Matching between two ! in a file in python,">>> m = re.search('^!.*vserver\s+(\w+).*^!', text, re.MULTILINE | re.DOTALL)
>>> m.group(0)
'!\n vserver XXXX\n virtual XX.xx.XX.XX tcp 389\n owner LDAP\n serverfarm XXX\n idle 5\n persistent rebalance\n inservice\n!'
>>> m.group(1)
'XXXX'
"
sql query in python--debugging appending values,"if row[0] != checkID:
    if output != """":
        print output, ""this is a test""

    checkID=row[0]
    output=row[0:11]


else:
    output=output + (row[8:11])
"
How to read UTF file char by char in Python,"with open(""myfile.txt"", ""r"", encoding=""utf-8-sig"") as myfile:
    contents = myfile.read()
    for char in contents:
        # do something with character
"
Python 2.7 formatting data for writing as csv,">>> list(reversed([1,2,3,4,5]))
[5, 4, 3, 2, 1]
"
Dictionary Comprehension for list values,"from itertools import groupby
from operator import itemgetter
{v: ids for v, ids in groupby(enumerate(sorted(A)), itemgetter(1))}
"
urllib2 multiple Set-Cookie headers in response,"import httplib
from StringIO import StringIO

msg = \
""""""Set-Cookie: Foo
Set-Cookie: Bar
Set-Cookie: Baz

This is the message""""""

msg = StringIO(msg)

msg = httplib.HTTPMessage(msg)

assert msg['Set-Cookie'] == 'Foo, Bar, Baz'
"
stdtr in python giving nan for p-value while doing t-test,"In [6]:

import numpy as np
from scipy.special import stdtr
​
dof = -2176568
tf = -11.374250
2*stdtr(dof, -np.abs(tf))
Out[6]:
nan
"
How to sort IP addresses stored in dictionary in Python?,"import socket
items = sorted(ipCount.items(), key=lambda item: socket.inet_aton(item[0]))
"
Generate random integers between 0 and 9,"randint(0, 9)"
get previous value of pandas datetime index,"In [1]: df = pd.read_clipboard(sep='\s\s+', header=None, parse_dates=[0], names=['Date', None])

In [2]: df
Out[2]: 
                 Date          
0 2013-02-22 00:00:00  0.280001
1 2013-02-25 00:00:00  0.109999
2 2013-02-26 00:00:00 -0.150000
3 2013-02-27 00:00:00  0.130001
4 2013-02-28 00:00:00  0.139999

In [3]: df1 = df.set_index('Date')

In [4]: df1
Out[4]:                
Date                
2013-02-22  0.280001
2013-02-25  0.109999
2013-02-26 -0.150000
2013-02-27  0.130001
2013-02-28  0.139999
"
"write a text file in Python, line by line","import re
with open('test.txt') as test_f, open('result.txt', 'w') as result_f:
    for line in test_f:
        new_str = re.sub('[^a-zA-Z0-9\n\.]',"" "", line)
        result_f.write(new_str)
"
How to recompile the Python 2.5 bytecode to 2.7?,"#!/usr/bin/env python
import byteplay, sys, imp, struct, marshal, time
if __name__ == '__main__':
    byteplay.labels = dict([(i, byteplay.Label()) for i in xrange(10000)])
    if sys.platform == ""win32"":
        import os, msvcrt
        msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
    asm = sys.stdin.read()
    c = eval(asm, byteplay.__dict__)
    c = byteplay.Code(c, (), (), 0, 0, 0, '', '', 0, '').to_code()
    sys.stdout.write(imp.get_magic())
    sys.stdout.write(struct.pack('<L', time.time()))
    marshal.dump(c, sys.stdout)
"
Print list of strings to file with newline inserted after n items,"from itertools import izip_longest

def grouper(iterable, n, fillvalue=None):
    ""Collect data into fixed-length chunks or blocks""
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
"
"NumPy dtype issues in genfromtxt(), reads string in as bytestring","alttype = np.dtype([('f0', 'U12'), ('f1', 'U3'), ('f2', 'U2'), ('f3', '<f8'), ('f4', 'U9')])
all_data_u = np.genfromtxt(csv_file, dtype=alttype, delimiter=',')
"
Python - How to make a local variable (inside a function) global,"x = 0   # The initial value of x, with global scope

def other_function():
    global x
    x = x + 5

def main_function():
    print x    # Just printing - no need to declare global yet
    global x   # So we can change the global x
    x = 10
    print x
    other_function()
    print x
"
Python arguments are read as code,">>> import sys
>>> sys.argv = ['test.py', '\xe2\x80\x94-test', '\xe2\x80\x9cTest\xe2\x80\x9d']
>>> map = {0x2014: u'-', 0x201c: u""'"", 0x201d: u""'""}
>>> sys.argv[1:] = [s.decode('utf8').translate(map).encode('utf8') for s in sys.argv[1:]]
>>> sys.argv
['test.py', '--test', ""'Test'""]
"
Using os.walk to get my file path in Python,"import os

wallet = 'test.txt'
filepath = r'C:\\'

def search():
    for root,dirs,files in os.walk(filepath):
        if wallet in files:
            return os.path.join(root, wallet)
        else:
            return 'Nope.. not here'
print(search())
"
Key to Value to Key in Python Dictionary,"df.loc[df.issuer.str.contains(w).fillna(False), ""website""] = issuer[w]
"
Converting datetime.date to UTC timestamp in Python,"timestamp = (dt - datetime(1970, 1, 1)).total_seconds()"
Command output parsing in Python2.7,"for line in input_lines:
    m = re.match(r'''
        ^\(                  # at the beginning of the line look for a (
        [A-Z]+               # then a group of upper-case letters, i.e. OUTPUT
        \)                   # followed by a )
        \s*                  # some space
        \*                   # a literal *
        \s*                  # more space
        (?P<tag>[A-Z0-9]+)   # create a named group (tag) that matches HDMI1, ie. upper case letters or numbers
        \s*                  # more space
        (?P<nums>[\d\.]+)    # followed by a sequence of numbers and .
        $                    # before reaching the end of the line
        ''', line, re.VERBOSE)
    if m: 
        break
else:  # note: this else goes with the for-loop
    raise ValueError(""Couldn't find a match"")
# we get here if we hit the break statement
tag = m.groupdict()['tag']    # HDMI1
nums = m.groupdict()['nums']  # 124.124.124
"
"Python: Converting ('Monday', 'Tuesday', 'Wednesday') to 'Monday to Wednesday'","def weekdays_consecutive(days):
    indexes = [day_indexes[d] for d in days]
    return all(indexes[i + 1] % 7 == (indexes[i] + 1) % 7
               for i in range(len(indexes) - 1))
"
Set a Python property using a function call,"objectList.append(DataObject(foo.c, lambda val: setattr(foo, 'c', val)))
"
Use index in pandas to plot data,"monthly_mean.reset_index().plot(x='index', y='A')"
How to flush the input stream in python?,"#!/usr/bin/python

import time
import subprocess
import sys
import msvcrt

alarm1 = int(raw_input(""How many seconds (alarm1)? ""))

while (1):
    time.sleep(alarm1)
    print ""Alarm1""
    sys.stdout.flush()

    # Try to flush the buffer
    while msvcrt.kbhit():
        msvcrt.getch()

    print ""Continue (Y/N)?[Y]""
    doit = msvcrt.getch()
    print ""Input"",doit
    if doit == 'N' or doit=='n':
        print ""Exiting.....""
        break
"
Sum a nested list of a nested list of a nested list of integers,"from collections import Iterable
def flatten(collection):
  for element in collection:
    if isinstance(element, Iterable):
      for x in flatten(element):
        yield x
    else:
      yield element
"
How do I perform HTML decoding/encoding using Python/Django?,"def escape(html):
    """"""Returns the given HTML with ampersands, quotes and carets encoded.""""""
    return mark_safe(force_unicode(html).replace('&', '&amp;').replace('<', '&l
t;').replace('>', '&gt;').replace('""', '&quot;').replace(""'"", '&#39;'))
"
"Appending to a list of lists in Python, with conditions","from itertools import Counter
values = Counter()
for o in my_object:
    values += Counter({o.day: o.seconds})
"
Print out indexes of same values in file/list,"for s, t in zip(stuffs, types):
    if t == ""animal"":
         print(s)
"
apply command to list of files in python,"import glob
for f in glob.glob('*-C_'):
    os.system('xRITDecompress {}'.format(f))
"
add xml node to xml file with python,"data='''\
<root>
<node1>
  <node2 a1=""x1""> ... </node2>
  <node2 a1=""x2""> ... </node2>
  <node2 a1=""x1""> ... </node2>
</node1>
</root>
'''
doc = lxml.etree.XML(data)
e=doc.find('node1')
child = lxml.etree.Element(""node3"",attrib={'a1':'x3'})
child.text='...'
e.insert(1,child)
print(lxml.etree.tostring(doc))
"
Django - Group By with Date part alone,"from pprint import pprint
from datetime import datetime
from itertools import groupby

rows = [('Frodo party', datetime(3018, 9, 22, 10, 38)),
        ('Nazgul defeat Rangers', datetime(3018, 9, 22, 11, 57)),
        ('Frodo finishes packing', datetime(3018, 9, 23, 10, 59)),
        ('Gandalf tames Shadowfax', datetime(3018, 9, 23, 13, 11)),
        ('Gandalf crosses the Isen', datetime(3018, 9, 24, 18, 46))]

for key, values in groupby(rows, key=lambda row: row[1].date()):
    print('-')
    pprint(key)
    pprint(list(values))
"
Variable assignments prints out output,"   418 def retrlines(self, cmd, callback = None):
   419     """"""Retrieve data in line mode.  A new port is created for you.
   420 
   421     Args:
   422       cmd: A RETR, LIST, NLST, or MLSD command.
   423       callback: An optional single parameter callable that is called
   424                 for each line with the trailing CRLF stripped.
   425                 [default: print_line()]
   426 
   427     Returns:
   428       The response code.
   429     """"""
   430     if callback is None: callback = print_line
   431     resp = self.sendcmd('TYPE A')
   432     conn = self.transfercmd(cmd)
   433     fp = conn.makefile('rb')
   434     while 1:
   435         line = fp.readline()
   436         if self.debugging > 2: print '*retr*', repr(line)
   437         if not line:
   438             break
   439         if line[-2:] == CRLF:
   440             line = line[:-2]
   441         elif line[-1:] == '\n':
   442             line = line[:-1]
   443         callback(line)
   444     fp.close()
   445     conn.close()
   446     return self.voidresp()
"
Prefixing the results of string.split with the substring indices of each result,"data = ""AAABAABAAABIAABIAABAA""

result, count = [], 0
for s in data.split('B'):
    result.append([(count, count+len(s)), s])
    count += len(s)
print(result)
"
Translating a 2D Array to nested dictonary,"r = {reduce(lambda x, y : '{0};{1}'.format(x,y), l[j][:3]):{t[0]: t[1] for t in zip(k, l[j])} for j in range(1, len(l))}
"
Building tuple arguments for function,"import multiprocessing
from functools import partial

def func(a, b, c, d):
   print(""{} {} {} {}"".format(a, b, c, d))

def func_star(a, b, c_d):
   func(a, b, *c_d)

if __name__ == ""__main__"":
    pool = multiprocessing.Pool()
    partfunc = partial(func_star, '1', '2') # '1' and '2' are the fixed args
    var_list1 = ['a', 'b', 'c']
    var_list2 = ['x', 'y', 'z']
    pool.map(partfunc, zip(var_list1, var_list2))
"
Form an unordered list with regex,"def htmlize(txt):
    return re.sub('  - ([^\n]*)', r'<li>\1</li>',
        re.sub('((  - [^\n]*(\n|$))+)', r'<ul>\n\1\n</ul>', txt))
"
Multiply ticklabel values in colorbar when plotting matrix with imshow,"pl.imshow(factor*matrix)
"
Creating a dictionary from a string,">>> s = 'A - 13, B - 14, C - 29, M - 99'
>>> dict(e.split(' - ') for e in s.split(','))
{'A': '13', 'C': '29', 'B': '14', 'M': '99'}
"
Python Socket Listening,"import socket
import threading
import sys
host = ''
port = 50000

class client(threading.Thread):
    def __init__(self, conn):
        super(client, self).__init__()
        self.conn = conn
        self.data = """"

    def run(self):
        while True:
            self.data = self.data + self.conn.recv(1024)
            if self.data.endswith(u""\r\n""):
                print self.data
                self.data = """"

    def send_msg(self,msg):
        self.conn.send(msg)

    def close(self):
        self.conn.close()

class connectionThread(threading.Thread):
    def __init__(self, host, port):
        super(connectionThread, self).__init__()
        try:
            self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.s.bind((host,port))
            self.s.listen(5)
        except socket.error:
            print 'Failed to create socket'
            sys.exit()
        self.clients = []

    def run(self):
        while True:
            conn, address = self.s.accept()
            c = client(conn)
            c.start()
            c.send_msg(u""\r\n"")
            self.clients.append(c)
            print '[+] Client connected: {0}'.format(address[0])



def main():
    get_conns = connectionThread(host, port)
    get_conns.start()
    while True:
        try:
            response = raw_input() 
            for c in get_conns.clients:
                c.send_msg(response + u""\r\n"")
        except KeyboardInterrupt:
            sys.exit()

if __name__ == '__main__':
    main()
"
combine 2-d array to existing 3-d array,"import numpy as np
d1 = np.array([[1, 2, 3], [4, 5, 6]])
d2 = np.array([[7, 8, 9], [1, 2, 3]])
d3 = np.array([d1, d2])

dnew = np.array([[6, 5, 4], [3, 2, 1]])
d3 = np.array([dnew] + [d3[a, ...] for a in range(d3.shape[0])])

# Add to the end of the array
dlast = np.array([[6, 5, 4], [3, 2, 1]])
d3 = np.array([d3[a, ...] for a in range(d3.shape[0])] + [dlast])
"
GitPython tags sorted,"reversed(repo.tags)
"
Manipulating curves with python,"linearValues = map(lambda x:x/90,range(90,-1,-1))
blueCurveValues = map(lambda x:math.sin(x*90*math.pi/180),linearValues)
yellowCurveValues = map(lambda x,y:x-(y-x),linearValues,blueCurveValues)
"
Python - substitute inplace - removing .bak backup files with close()?,"import fileinput
import re
files = [""FileToSub1.sbs"", ""FileToSub2.sbs""]
for line in fileinput.FileInput(files, inplace=1):
    line = re.sub('whatever', 'thing', line)
    print line,
"
Compare values of two arrays in python,"import collections

def f(a, b):
    a_app = collections.Counter(a)
    for i in b:
        print i, '=>',
        if i in a_app and a_app[i] > 0:
            a_app[i] -= 1
            print i, ' is in a',
        print '.'
    print ''

f([1,1,2],[1,1])
f([3,2,5,4],[2,4,2])
f([3,2,2,4],[2,4,2])
f([3,2,5,4],[2,3,2])
"
Method count per class in PyDev,"import inspect

class MyClass():
    def __init__(self):
        pass
    def method1(self):
        pass
    def method2(self):
        pass

# exclude __...__ methods
actual_methods = [member for member in inspect.getmembers(MyClass)
                  if not member[0].startswith('__')]
print(len(actual_methods))
"
lxml[.objectify] documentElement tagName,">>> from lxml import objectify
>>> import StringIO
>>> tree = objectify.parse(StringIO.StringIO('<parent><child>Billy</child><child>Bob</child></parent>'))
>>> root = tree.getroot()
>>> root.tag
'parent'
>>> [(foo.tag, foo.text) for foo in root.getchildren()]
[('child', 'Billy'), ('child', 'Bob')]
>>>
"
extracting IP values,"with open('fileD.txt') as f:
    for line in f:
        last_two_nums = line.split()[1][-5:].split('.') # gives for ex: ['17', '13']
        # do what you've got to do here
"
Python csv without header,"with open('data.csv') as f:
    cf = csv.reader(f)
    for row in cf:
        print row[0]
"
Using Selenium to select an anchor with specific content,"find_element_by_css_selector(""a[href='/es-co']"")
"
How can I write to my CSV file in my booking system [STUCK],"from pprint import pprint as pp
missing = ((""B"",4),(""C"",4),(""D"",4),(""E"",4))

seats = {(x,y):""x"" if (x,y) not in missing else ""-"" for x in [""A"",""B"",""C"",""D"",""E""] for y in range(1,8)}

pp(seats)
{('A', '1'): '+',
 ('A', '2'): '+',
 ('A', '3'): '+',
 ('A', '4'): '+',
 ('A', '5'): '+',
 ('A', '6'): '+',
 ('A', '7'): '+',
 ('B', '1'): '+',
 ('B', '2'): '+',
 ('B', '3'): '+',
 ('B', '4'): '-',
 ('B', '5'): '+',
 ('B', '6'): '+',
 ('B', '7'): '+',
 ('C', '1'): '+',
 ('C', '2'): '+',
 ('C', '3'): '+',
 ('C', '4'): '-',
 ('C', '5'): '+',
 ('C', '6'): '+',
 ('C', '7'): '+',
 ('D', '1'): '+',
 ('D', '2'): '+',
 ('D', '3'): '+',
 ('D', '4'): '-',
 ('D', '5'): '+',
 ('D', '6'): '+',
 ('D', '7'): '+',
 ('E', '1'): '+',
 ('E', '2'): '+',
 ('E', '3'): '+',
 ('E', '4'): '-',
 ('E', '5'): '+',
 ('E', '6'): '+',
 ('E', '7'): '+'}
"
Zipping two list of lists,">>> m1 = [['A', 'B', 'C'],
...       ['D', 'E'],
...       ['F', 'G']]
>>> m2 = [['s1', 's2', 's3'],
...       ['s4', 's5'],
...       ['s1', 's3']]
>>> [zip(*paired) for paired in zip(m1, m2)]
[[('A', 's1'), ('B', 's2'), ('C', 's3')], [('D', 's4'), ('E', 's5')], [('F', 's1'), ('G', 's3')]]
"
save re.match in variable to use after elif,"add_check = re.match(r'add (.+)', message)    
if add_check:
    print(add_check.group(1))
else:
    del_check = re.match(r'del (.+)', message)
    if del_check:
        print(del_check.group(1))
    else:
        print(""bar"")
"
Executing different queries using mysql-python,"...
CONNECTION = MySQLdb.connect(host=..., port=...,
                             user=..., passwd=..., db=...,
                             cursorclass=MySQLdb.cursors.DictCursor,
                             charset = ""utf8"")
cursor = CONNECTION.cursor()
cursor.execute(""SELECT ... FROM ... WHERE ... AND some_field=%s"", (""first"", ""amazing"", ""topic""))
first_result = cursor.fetchall()

cursor.execute(""SELECT ... FROM ... WHERE ... AND some_field=%s"", ((""first"", ""amazing"", ""topic"")))
second_result = cursor.fetchall()

cursor.close()
...
"
How to delete all the odd ordinal items in a list?,">>> x = ['apple', 'fruit', 'orange', 'fruit', 'lemon', 'fruit']
>>> x[1::2]
['fruit', 'fruit', 'fruit']
>>> x[::2]
['apple', 'orange', 'lemon']
"
Python regex: search for HTML tags and modify them,"import lxml.etree, os, urlparse
root = lxml.etree.HTML(html)
for img in root.iter(""img""):
    src = img.get(""src"", None)
    if src is not None:
        if urlparse.urlparse(src).scheme in (""http"", ""https""):
            src_path = urlparse.urlparse(src).path
            src_path_base = os.path.basename(src)
            src = ""id:"" + os.path.basename(src)
            img.set(""src"", src)
html = lxml.etree.tostring(root)
"
calling the indexed position of a string,">>> import re
>>> # Windows supports both / and \
>>> if os.path.altsep:
...     sep=os.path.sep + os.path.altsep
... else:
...     sep=os.path.sep
...
>>> pseps = re.compile('[%s]' % re.escape(sep))
>>> pseps.split(os.path.relpath(path,base), 1)[0]
'Bob'
"
Python if-elif statements order,"directions = []
if <the obstacle has a free tile on its RIGHT>:
    directions.append(move_right)
if <the obstacle has a free tile on its LEFT>:
    directions.append(move_left)

if not directions:
    stop()
else:
    random.choice(directions)()  # pick an available direction at random
"
Removing duplicates in lists,list(set(t))
get escaped unicode code from string,"''.join('\\u' + x.encode('utf_16_be').encode('hex') for x in u'MESSAGE:')
# output: '\\u004d\\u0045\\u0053\\u0053\\u0041\\u0047\\u0045\\u003a'
"
"Convert pandas timezone-aware DateTimeIndex to naive timestamp, but in certain timezone","In [6]: t.tz_localize(None)
Out[6]: DatetimeIndex(['2013-05-18 12:00:00', '2013-05-18 13:00:00'], 
                      dtype='datetime64[ns]', freq='H')
"
How do I find all tuples with a specific value?,">>> tups = [(1, 2, 4.56), (2, 1, 1.23), (1, 3, 2.776)]
>>> [t for t in tups if t[0] == 1] # starting_with 1
[(1, 2, 4.56), (1, 3, 2.776)]
>>> [t for t in tups if t[1] == 3] # (_, 3, _)
[(1, 3, 2.776)]
"
Concatenate elements of a list,">>> l=['a', 'b', 'c']
>>> ''.join(l)
'abc'
>>> '-'.join(l)
'a-b-c'
>>> ' - spam ham and eggs - '.join(l)
'a - spam ham and eggs - b - spam ham and eggs - c'
"
PUT Request to REST API using Python,"response = requests.put(url, data=json.dumps(data), headers=headers)"
Efficient way to swap bytes in python,"original[0::2], original[1::2] = original[1::2], original[0::2]
"
Tornado and Unicode,"#coding: utf-8 (there is # dont know how to show it here...)
import tornado.ioloop
import tornado.web

class Abdou(tornado.web.RequestHandler):
    def get(self):
        self.write(""hi"")

miaw = tornado.web.Application([
(tornado.escape.url_escape(u'/ééé'), Abdou),
])

if __name__ == ""__main__"":
    miaw.listen(8000)
    tornado.ioloop.IOLoop
"
Make one list from two list applying constraint,"
C = [[a, b] if a < b else [b, a] for a, b in zip(A, B)]
for sublist in C:
    for i in sublist:
        yield i
"
I want to choose the Transport Layer Security protocol in urllib2,">>> import ssl
>>> import urllib2
>>> import urllib2_ssl # https://gist.github.com/zed/1347055
>>> opener = urllib2.build_opener(urllib2_ssl.HTTPSHandler(
...     ssl_version=ssl.PROTOCOL_TLSv1, #XXX you need to modify urllib2_ssl
...     ca_certs='cacert.pem')) # http://curl.haxx.se/ca/cacert.pem.bz2
>>> opener.open('https://example.com/').read()
"
Weighted random from int list,">>> random_choice(list('ABCD'), weights=[20,40,80,60])
'C'
"
"How to Open, Read, and Write files in Python 2.7 -- Converting code from fortran 90 to Python","items=[]
while len(items)<nrequired:items.extend(file.readline().split())
"
"Split multiple nested key,values and extract to text file","from itertools import count, groupby

def make_login_key():
    counter = count()
    current_key = None
    def key(line):
        nonlocal current_key
        if line.startswith('login'):
            # we found the start of a new step, so change key
            current_key = next(counter)
        return current_key
    return key

def find_steps(fobj):
    for _, group in groupby(fobj, key=make_login_key()):
        step = []
        for line in group:
            step.extend(line.split()[1:])
        yield step



def format_steps(steps, fobj):
    for i, step in enumerate(steps):
        for part in step:
            fobj.write('step{}.{}={}\n'.format(i, *part.split('=')))
"
Find and Replace Percent Signs - Python,"data = [[i.replace('%', '') for i in j] for j in data]
"
Replacing certain values in a pandas dataseries?,">>> d.str
<pandas.core.strings.StringMethods object at 0x93918ec>
"
Opening File (Tkinter),"from Tkinter import Frame, Tk, BOTH, Text, Menu, END
import tkFileDialog 

class Example(Frame):

    def __init__(self, parent):
        Frame.__init__(self, parent)   

        self.parent = parent        
        self.initUI()

    def initUI(self):

        self.parent.title(""File dialog"")
        self.pack(fill=BOTH, expand=1)

        menubar = Menu(self.parent)
        self.parent.config(menu=menubar)

        fileMenu = Menu(menubar)
        fileMenu.add_command(label=""Open"", command=self.onOpen)
        menubar.add_cascade(label=""File"", menu=fileMenu)        

        self.txt = Text(self)
        self.txt.pack(fill=BOTH, expand=1)


    def onOpen(self):

        ftypes = [('Python files', '*.py'), ('All files', '*')]
        dlg = tkFileDialog.Open(self, filetypes = ftypes)
        fl = dlg.show()

        if fl != '':
            text = self.readFile(fl)
            self.txt.insert(END, text)

    def readFile(self, filename):

        f = open(filename, ""r"")
        text = f.read()
        return text


def main():

    root = Tk()
    ex = Example(root)
    root.geometry(""300x250+300+300"")
    root.mainloop()  


if __name__ == '__main__':
    main()  
"
Read latest character sent from Arduino in Python,"try:
  data = [struct.unpack('<HHL', handle.read(8)) for i in range(PACKETS_PER_TRANSMIT)]
except OSError:
  self.emit(SIGNAL(""connectionLost()""))
  self.connected = False
"
How can i use multiple lists as arguments in a function and receive them differently?,">>> def foo(*x):
...     print(x)
...     for i in x:
...         print(i)
... 
"
writing pandas dataframe columns to csv rows staggered,"bigList = []
for group in g:
    rowList = []
    rowList.append(group[0])
    for c in group[1].C.iteritems():
        rowList.append(c[1])
    bigList.append( rowList )
"
Need to extract data from a website and store in list using regex,"soup = BeautifulSoup(respText, ""html.parser"")
for item in soup.find_all(""td"", {""class"" : ""titleColumn""}):
    print(item.find(""a"").text)
"
How to modify a Numpy array with conditional and function,"mask = (flat >= 0.2) & (flat < 0.7)
flat[mask] = func(flat[mask], 0)
"
Editing keys of a dictionary in Python,">>> d = {""key1\t234"": ""foo"", ""key2\t678"": ""bar""}
>>> {k.split()[0]: v for k, v in d.items()}
{'key1': 'foo', 'key2': 'bar'}
"
Dataframe columns from Dataframe rows in Pandas,"In [283]: df1 = pd.DataFrame(np.random.normal(size=8).reshape(4,2),index=[1,2,3,4],columns=['a','b'])

In [284]: df2 = pd.DataFrame(np.random.normal(size=8).reshape(2,4),index=['c','d'],columns=[5,6,7,8])

In [285]: df1.join(df2.T.set_index(df1.index))
Out[285]: 
          a         b         c         d
1 -1.196281  0.222283  1.247750 -0.121309
2  1.188098  0.384871 -1.324419 -1.610255
3 -0.928642 -0.618491  0.171215 -1.545479
4 -0.832756 -0.491364  0.100428 -0.525689
"
Python - Using Random with No Repeated Words and Selecting a Spare Word from a List,"import random

with open(""file.txt"") as x:
    words = x.read().splitlines()


def c_grid(l):
    grid = [listofwords[i:i + 5] for i in range(0, len(listofwords), 5)]
    for l in grid:
        print("""".join(""{:10}"".format(i) for i in l))



listofwords = []
for i in range(25):
    myLen = len(words)
    res = random.choice(range(myLen))
    listofwords.append(words.pop(res))

print(listofwords)
c_grid(listofwords)
"
Model.objects.all() returns integers for ForeignKeys and choice fields - how to force it to return names instead?,"from django.db import models

# Get field_name, is_foreign_key pairs from model meta
fields_foreign = [(
   field.name, 
   isinstance(field, models.ForeignKey)
) for field in Contact._meta.fields]

# Assume every related model has a 'name' field,
# if you want to get 'name' fields of these models, 
# construct the list of field names to pass to values():
# something like ['url', 'email', 'person', 'bonus_field__name']
value_fields = [
    f[0] if not f[1] else ""{}__name"".format(f[0])
    for f in fields_foreign
]

# Now get the values
Contact.objects.values(*value_fields)
"
Sorting data by multiple columns,"import itertools
def field1(line):
    data = line.split()
    try:
        return data[0]
    except IndexError:
        return None

def fields(line):
    data = line.split()
    return data[0],int(data[1]),int(data[2])

with open('test.dat') as fin, open('output.dat','w') as fout:
    for k,v in itertools.groupby(fin,key=field1):
        if k is None:
            fout.write('\n')
        else:
            fout.writelines(sorted(v,key=fields))
"
python. How to find whether a text contains zero.?,"if ""0"" in myString:
  print ""%s contains 0"" % myString
"
Permutations of list of lists,"def product(*args, **kwds):
    # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
"
How to check if list element is present in array in python,"orders = [['520', '521', '524', '527', '532'], ['528'], ['531'], ['525', '526', '533'], ['519', '523', '529', '534', '535'], ['530']]
remove_order_with_ids = ['523'] # or bulk_order 
orders = [order for order in orders if not set(remove_order_with_ids).intersection(set(order))]
print orders
# [['520', '521', '524', '527', '532'], ['528'], ['531'], ['525', '526', '533'], ['530']]
"
Different parts of regex matching same text depending on what comes afterwards,">>> import re
>>> 
>>> reg = re.compile(r'(?P<indent>\s*)(""""""|\'\'\'|blockquote:)(\((?P<type>\w*)\s*([""\'](?P<citation>.+?)[""\'])?\s*(\((?P<format>\w+?)\))?(?P<other>.+?)?\))?')
>>> 
>>> 
>>> s2 = '             """"""(book ""Moby Dick"" (MLA))'
>>> 
>>> m2 = reg.match(s2)
>>> m2.groupdict()
{'indent': '             ', 'citation': 'Moby Dick', 'type': 'book', 'other': None, 'format': 'MLA'}
>>> 
>>> s3 = '             """"""(book ""Moby Dick"")'
>>> m3 = reg.match(s3)
>>> 
>>> m3.groupdict()
{'indent': '             ', 'citation': 'Moby Dick', 'type': 'book', 'other': None, 'format': None}
"
Assignment to value returned from list,"class Test(object):
    def __init__(self):
        self.a = (1,2,3,4,5,6,7,8,9)
        self.b = (10,20,30,40,50,60,70,80,90)
        self.c = (-1,-2,-3,-4,-5,-6,-7,-8,-9)

    def iter_over(self, *args):
        items = [getattr(self, arg) for arg in args]
        return zip(*items)

t = Test()
for a, c in t.iter_over('a', 'c'):
    print a, c

1 -1
2 -2
3 -3
4 -4
5 -5
6 -6
7 -7
8 -8
9 -9
"
subprocess.Popen in different console,"from subprocess import *

c = 'dir' #Windows

handle = Popen(c, stdin=PIPE, stderr=PIPE, stdout=PIPE, shell=True)
print handle.stdout.read()
handle.flush()
"
python backports for some methods,"def any(iterable):
    for element in iterable:
        if element:
            return True
    return False

def all(iterable):
    for element in iterable:
        if not element:
            return False
    return True
"
Print from List Python,"In [41]: a = [{ 'a':'z', 'b':'x', 'c':'w', 'd':'v'}, { 'a':'f', 'b':'g', 'c':'h', 'd':'i'}]

In [42]: a[0].get('a')
Out[42]: 'z'
"
Replace an underscore separated substring in the middle of a comma separated string,"def solve(strs, rep):                                                                                                   first, sep, rest = strs.partition(',')
    lis = first.rsplit('_', 2)
    lis[1] = rep
    return ""_"".join(lis) + sep + rest
... 
>>> solve("" 'AMS_Investigation|txtt.co_BigtittedBlondOtherNight_1371078139195_+14155186442', {'cf:rv': '0'}"", ""1111"")
"" 'AMS_Investigation|txtt.co_BigtittedBlondOtherNight_1111_+14155186442', {'cf:rv': '0'}""
>>> solve(""'AMS_Investigation|txtt.co_23456_BigtittedBlondOtherNight_1371078139195_14155186442', {'cf:rv': '0'}"", ""2222"")
""'AMS_Investigation|txtt.co_23456_BigtittedBlondOtherNight_2222_14155186442', {'cf:rv': '0'}""
>>> solve(""'AMS_Investigation|txtt.co_1371078139195_BigtittedBlondOtherNight_1371078139195_1371078139195', {'cf:rv': '0'}"", ""2222"")
""'AMS_Investigation|txtt.co_1371078139195_BigtittedBlondOtherNight_2222_1371078139195', {'cf:rv': '0'}""
"
"How to replace all words in a series with a few specified words in Pandas,Python?","Df['Description'].str.replace('macbook air 11.*' , 'macbook air 11')
"
"If else condition with or, return variable that evalutes to FALSE","def foo(a, b):
    if a == 0 or b == 0:
       return a or b
"
"copy 2D array into 3rd dimension, N times (Python)","d = a[..., None] + c[None, None, :]
"
Simplify this dictionary of lists into a single list containing all/only unique values,">>> my_dict = {""a"": [1, 6, 8, 4],
...            ""b"": [2, 7, 4, 9, 13],
...            ""c"": [9, 5, 6, 8, 11]
...           }
>>> set().union(*my_dict.values())
set([1, 2, 4, 5, 6, 7, 8, 9, 11, 13])
"
Python: comprehension to compose two dictionaries,"result = {k: d2.get(v) for k, v in list(d1.items())}"
Build diagonal matrix without using for loop,"np.eye(1E6)
# ValueError: array is too big.

sparse.eye(1E6)
# <1000000x1000000 sparse matrix of type '<type 'numpy.float64'>'
# with 1000000 stored elements (1 diagonals) in DIAgonal format>
"
Extracting Numbers from a String Without Regular Expressions,"def StringThings(strng):
    nums = []
    number = """"
    for each in range(len(strng)):
        if strng[each].isdigit():
            number += strng[each]

        if each == len(strng)-1:
            if number != '':
                nums.append(number)

        if each != 0:
            if strng[each].isdigit() == False:
                 if strng[each-1].isdigit():
                     nums.append(number)
                     number = """" 
                     continue;
    return nums

print StringThings(""shsgd89shs2011%%5swts34"");
// returns ['89', '2011', '5', '34']
"
How to change the scope of a variable in a function? Python,"x=2
y=3

def func(x,y):
    x=200
    y=300

func(x,y) #inside this function, x=200 and y=300
#but by this line the function is over and those new values are discarded
print(x,y) #so this is looking at the outer scope again
"
python pandas: get fiscal quarter from fiscal year and month (for UK),"import pandas as pd
df = pd.DataFrame({'date': ['2015-11-01', '2014-10-01', '2016-02-01'],
                   'fiscal year': ['FY15/16', 'FY14/15', 'FY15/16']})
df['Quarter'] = pd.PeriodIndex(df['date'], freq='Q-MAR').strftime('Q%q')
print(df)
"
Intercept operator lookup on metaclass,"operators = [""add"", ""mul""]

class OperatorHackiness(object):
  """"""
  Use this base class if you want your object
  to intercept __add__, __iadd__, __radd__, __mul__ etc.
  using __getattr__.
  __getattr__ will called at most _once_ during the
  lifetime of the object, as the result is cached!
  """"""

  def __init__(self):
    # create a instance-local base class which we can
    # manipulate to our needs
    self.__class__ = self.meta = type('tmp', (self.__class__,), {})


# add operator methods dynamically, because we are damn lazy.
# This loop is however only called once in the whole program
# (when the module is loaded)
def create_operator(name):
  def dynamic_operator(self, *args):
    # call getattr to allow interception
    # by user
    func = self.__getattr__(name)
    # save the result in the temporary
    # base class to avoid calling getattr twice
    setattr(self.meta, name, func)
    # use provided function to calculate result
    return func(self, *args)
  return dynamic_operator

for op in operators:
  for name in [""__%s__"" % op, ""__r%s__"" % op, ""__i%s__"" % op]:
    setattr(OperatorHackiness, name, create_operator(name))


# Example user class
class Test(OperatorHackiness):
  def __init__(self, x):
    super(Test, self).__init__()
    self.x = x

  def __getattr__(self, attr):
    print ""__getattr__(%s)"" % attr
    if attr == ""__add__"":
      return lambda a, b: a.x + b.x
    elif attr == ""__iadd__"":
      def iadd(self, other):
        self.x += other.x
        return self
      return iadd
    elif attr == ""__mul__"":
      return lambda a, b: a.x * b.x
    else:
      raise AttributeError

## Some test code:

a = Test(3)
b = Test(4)

# let's test addition
print a + b # this first call to __add__ will trigger
            # a __getattr__ call
print a + b # this second call will not!

# same for multiplication
print a * b
print a * b

# inplace addition (getattr is also only called once)
a += b
a += b
print a.x # yay!
"
How could all combinations of a set of possible arguments of a function be tried and the resultant values be collected?,"import itertools

epochs = [10, 100]
architecture = [5, 10]

for epock in epochs:
    for nodes_count in xrange(1, 4):
        combinations = itertools.product(architecture, repeat=nodes_count)
        for combination in combinations:
            print epock, list(combination)
"
BeautifulSoup webcrawling: How to get piece of text,"soup.find(text=""Genre: "").next_sibling.text
"
Python QuickSort returning original input,"def quicksort(A):
    if len(A) > 1:
        pivot = A[0]
        L = []
        E = []
        R = []
        for i in A:
            if i < pivot:
                L.append(i)
            elif i == pivot:
                E.append(i)
            else:
                R.append(i)
        quicksort(L)
        quicksort(R)
        A[:] = L + E + R
"
Why does python's imp.reload() not delete old classes and functions?,"import hashlib

for attr in dir(hashlib):
    if attr not in ('__name__', '__file__'):
        delattr(hashlib, attr)

hashlib = imp.reload(hashlib)
"
Python count 0-9 then a-z,"import string, itertools


for p in itertools.product(string.digits + string.ascii_lowercase, repeat=3):
    print '&#xf' + ''.join(p)
"
matplotlib: inset axes for multiple boxplots,"import matplotlib.pyplot as plt

from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes
from mpl_toolkits.axes_grid1.inset_locator import mark_inset

import numpy as np

def get_demo_image():
    from matplotlib.cbook import get_sample_data
    import numpy as np
    f = get_sample_data(""axes_grid/bivariate_normal.npy"", asfileobj=False)
    z = np.load(f)
    # z is a numpy array of 15x15
    return z, (-3,4,-4,3)


fig = plt.figure(1, [5,4])
ax = fig.add_subplot(111)

# prepare the demo image
Z, extent = get_demo_image()
Z2 = np.zeros([150, 150], dtype=""d"")
ny, nx = Z.shape
Z2[30:30+ny, 30:30+nx] = Z

# extent = [-3, 4, -4, 3]
ax.imshow(Z2, extent=extent, interpolation=""nearest"",
          origin=""lower"")

axins = zoomed_inset_axes(ax, 6, loc=1) # zoom = 6
axins.imshow(Z2, extent=extent, interpolation=""nearest"",
             origin=""lower"")

# sub region of the original image
x1, x2, y1, y2 = -1.5, -0.9, -2.5, -1.9
axins.set_xlim(x1, x2)
axins.set_ylim(y1, y2)

axins1 = zoomed_inset_axes(ax, 8, loc=2) # zoom = 6
axins1.imshow(Z2, extent=extent, interpolation=""nearest"",
             origin=""lower"")

# sub region of the original image
x1, x2, y1, y2 = -1.2, -0.9, -2.2, -1.9
axins1.set_xlim(x1, x2)
axins1.set_ylim(y1, y2)

plt.xticks(visible=False)
plt.yticks(visible=False)

# draw a bbox of the region of the inset axes in the parent axes and
# connecting lines between the bbox and the inset axes area
mark_inset(ax, axins, loc1=2, loc2=4, fc=""none"", ec=""0.5"")
mark_inset(ax, axins1, loc1=2, loc2=4, fc=""none"", ec=""0.5"")

plt.draw()
plt.show()
"
duplicating values in a certain way inside a list inside a dictionary,">>> dict1 = {'a':(1, 4, 7), 'b':(2, 5, 8), 'c':(3, 6, 9)}
>>> {x:tuple(z for z in y for _ in range(2)) for x,y in dict1.items()}
{'a': (1, 1, 4, 4, 7, 7), 'c': (3, 3, 6, 6, 9, 9), 'b': (2, 2, 5, 5, 8, 8)}
>>>
"
Something in python similar to index method for multiple ocurrences,"def find_indexes(lst, val):
    return [i for i,v in enumerate(lst) if v == val]
"
Dynamically adding key-arguments to method,"import os, new

class DynamicKargs(object):
    """"""
    Class that makes a run method with same arguments
    as those given to the constructor
    """"""
    def __init__(self, **kargs):
        karg_repr = ','.join([str(key)+'='+repr(value) \
                              for key,value in kargs.iteritems()])
        exec 'def run(self,' + karg_repr + ',**kargs):\n    return self._run(' + karg_repr + ',**kargs)'

        self.run = new.instancemethod(run, self)

    def _run(self, **kargs):
        print kargs

# this can also be done with a function
def _run(**kargs):
    print kargs

def dynamic_kargs(**kargs):
    karg_repr = ','.join([str(key)+'='+repr(value) for key,value in kargs.iteritems()])
    exec 'def run(' + karg_repr + ',**kargs):\n    return _run(' + karg_repr + ',**kargs)'
    return run


# example of use
# --------------
def example():
    dyn_kargs = DynamicKargs(question='ultimate', answer=42)
    print 'Class example \n-------------'
    print 'var number:', dyn_kargs.run.im_func.func_code.co_argcount
    print 'var names: ', dyn_kargs.run.im_func.func_code.co_varnames
    print 'defaults:  ', dyn_kargs.run.im_func.func_defaults
    print 'run print: ', 
    dyn_kargs.run()
    print ''

    dyn_kargs = dynamic_kargs(question='foo', answer='bar')
    print 'Function example \n----------------'
    print 'var number:', dyn_kargs.func_code.co_argcount
    print 'var names: ', dyn_kargs.func_code.co_varnames
    print 'defaults:  ', dyn_kargs.func_defaults
    print 'run print: ', 
    dyn_kargs()
"
list comprehension with multiple assignments,"def factors(n):
    l = []
    append = l.append
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            append(i)
            append(n//i)
    return l
"
Selection of rows by condition,"df_total_data[df_total_data.apply(lambda x: 'secure' not in  x['BBBlink'],1 ).values]
"
"Contour plot data (lat,lon,value) within boundaries and export GeoJSON","from shapely.ops import unary_union, polygonize
boundary = GeoDataFrame.from_file('your_geojson')
# Assuming you have a boundary as linestring, transform it to a Polygon:
mask_geom = unary_union([i for i in polygonize(boundary.geometry)])
# Then compute the intersection:
gdf.geometry = gdf.geometry.intersection(mask_geom)
"
Python - Removing an element in list,"import re
l[0]=re.sub(""@[a-zA-Z]*"",'',l[0])
"
Best approach to detect subnet overlap in a postgresql db,"import netaddr
import bisect

def subnets_overlap(subnets):
    # ranges will be a sorted list of alternating start and end addresses
    ranges = []
    for subnet in subnets:
        # find indices to insert start and end addresses
        first = bisect.bisect_left(ranges, subnet.first)
        last = bisect.bisect_right(ranges, subnet.last)
        # check the overlap conditions and return if one is met
        if first != last or first % 2 == 1:
            return True
        ranges[first:first] = [subnet.first, subnet.last]
    return False
"
sorting numbers into ascending order on a line,"with open('input.txt') as f, open('output.txt', 'w') as out:
    for line in f:
        line = line.split()  #splits the line on whitespaces and returns a list
        #sort the list based on the integer value of the item on the left side of the `:`
        line.sort(key = lambda x: int(x.split(':')[0]))
        out.write("" "".join(line) + '\n')
"
Navigating to second string text using BeautifulSoup,"names = soup.select('ul#secondaryconsumers > li.secondaryconsumerlist > div.name')
numbers = soup.select('ul#secondaryconsumers > li.secondaryconsumerlist > div.number')

print [name.text for name in names]
print [number.text for number in numbers]
"
Generating random vertices that don't repeat,">>> lst1 = random.sample(range(20), 10)
>>> lst2 = random.sample(range(20), 10)
>>> zip(lst1, lst2)
[(19, 5), (5, 11), (9, 19), (0, 9), (4, 6), (12, 0), (7, 12), (16, 1), (10, 7), (15, 16)]
"
"Python lightweight case insensitive if ""x"" in variable","def case_insensitive_in(phrase, string):
    return phrase.lower() in string.lower()
"
Numpy Array index problems,"xs = np.random.random((100,200))
ys = np.random.random((100,200))

f(xs,ys) 
"
Transposing a 3d list (Python),">>> [zip(*[m4c[j][i] for j in range(len(m4c))]) for i in range(len(m4c[0]))]
"
Data processing with adding columns dynamically in Python Pandas Dataframe,"In [35]: dfg = groups.groupby(level=0).apply(lambda x: Series(x.values.ravel()))

In [36]: %timeit groups.groupby(level=0).apply(lambda x: Series(x.values.ravel()))
dfg.head()
groups.info()
1 loops, best of 3: 14.5 s per loop
In [40]: dfg.columns = [ ""{0}_{1}"".format(f,i) for i in range(1,5) for f in features ]

In [41]: dfg.head()
Out[41]: 
   f1_1  f2_1  f3_1  f1_2  f2_2  f3_2  f1_3  f2_3  f3_3  f1_4  f2_4  f3_4
A                                                                        
0     0     0     0     1     1     1     2     2     2     7     7     7
1     0     0     0     1     1     1     2     2     2     9     9     9
2     0     0     0     1     1     1     2     2     2     8     8     8
3     0     0     0     1     1     1     2     2     2     8     8     8
4     0     0     0     1     1     1     2     2     2     9     9     9

[5 rows x 12 columns]

In [42]: dfg.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 70000 entries, 0 to 69999
Data columns (total 12 columns):
f1_1    70000 non-null int64
f2_1    70000 non-null int64
f3_1    70000 non-null int64
f1_2    70000 non-null int64
f2_2    70000 non-null int64
f3_2    70000 non-null int64
f1_3    70000 non-null int64
f2_3    70000 non-null int64
f3_3    70000 non-null int64
f1_4    70000 non-null int64
f2_4    70000 non-null int64
f3_4    70000 non-null int64
dtypes: int64(12)
"
Regular Expression to match string inside parentheses,"def expressions(s):
    stack = []
    for n, c in enumerate(s):
        if c == '(':
            stack.append(n+1)
        elif c == ')':
            yield s[stack.pop():n]

for x in expressions(s):
    print x
"
Convert formatted log string back to LogRecord,"sample = '2014-07-28 16:46:39,221--sys.log--DEBUG--hello:61---hello world'
fields = ('asctime', 'name', 'levelname', 'funcName', 'message')
values = { k: v for k, v in zip(fields, sample.split('--', len(fields) - 1)) }
# and do some mending
values['funcName'], values['lineno'] = values['funcName'].split(':')
values['message'] = values['message'][1:]
"
Python 2.7 - Write and read a list from file,"with open(the_filename, 'w') as f:
    for s in my_list:
        f.write(s + '\n')

with open(the_filename, 'r') as f:
    my_list = [line.rstrip('\n') for line in f]
"
Sorting all rows in numpy matrix by target-column,"In [175]: np.lexsort([data.A[:,0],data.A[:,1]])
Out[175]: array([4, 3, 1, 2, 0], dtype=int32)
"
NumPy: 2D array from a list of arrays and scalars,"In [179]: np.column_stack(np.broadcast(x, 0, x))
Out[179]: 
array([[ 1.,  1.,  1.,  1.,  1.],
       [ 0.,  0.,  0.,  0.,  0.],
       [ 1.,  1.,  1.,  1.,  1.]])
"
pyparsing whitespace match issues,"from pyparsing import *
TAB = White('\t')

# each value consists of printable words separated by at most a 
# single space (a space that is not followed by another space)
value = Combine(OneOrMore(~TAB + (Word(printables) | White(' ',max=1) + ~White())))

# each line has one or more of these values
linedefn = OneOrMore(value)
# do not expand tabs before parsing
linedefn.parseWithTabs()


data = ""Library\tSSHClient    with name\tnode""

# replace tabs with 2 spaces
#data = data.replace('\t', '  ')

print linedefn.parseString(data)


linedefn = OneOrMore(locatedExpr(value))('values')
# do not expand tabs before parsing
linedefn.parseWithTabs()
print linedefn.parseString(data).dump()
"
python literal binary to hex conversion,"f2.write(struct.pack('B', int(byte,2))) # unsigned 8 bit int
"
Python: How to add a custom function to a pre-existing object?,"class new_string(str):
    def reverse(self):
        blah

s = new_string('hello')
s.reverse()
"
Insert data from one sorted array into another sorted array,"a = np.array( [(1,0,0,0,0),
               (2,0,0,0,0),
               (5,0,0,0,0),
               (3,0,0,0,0),
               (4,0,0,0,0),
               (6,0,0,0,0),
               (7,0,0,0,0),
               (8,0,0,0,0),
               ])

b = np.array([(3, 1),
              (5, 18),
              (7, 2)])

perm = np.argsort(a[:,0])
a[:,1][perm[a[:,0][perm].searchsorted(b[:,0])]] = b[:,1]
print(a)
"
Bash style process substitution with Python's Popen,"import os
import tempfile
from subprocess import check_output

with tempfile.NamedTemporaryFile() as file:
    file.write(generate_kmers(3))
    file.delete = False

try:
    p = Popen([""pram_axdnull"", str(kmer), input_filename, file.name],
              stdout=PIPE)
    output = p.communicate()[0]
    # or
    # output = check_output([""pram_axdnull"", str(kmer), input_filename, 
                             file.name])
finally:
    os.remove(file.name)
"
pandas timeseries resampling ending a given day,"from pandas.tseries.offsets import (as_datetime, as_timestamp, apply_nat, 
                               DateOffset, relativedelta, datetime)
class MonthAnchor(DateOffset):
    """"""DateOffset Anchored to day in month

        Arguments:
        day_anchor: day to be anchored to
    """"""

    def __init__(self, n=1, **kwds):
        super(MonthAnchor, self).__init__(n)

        self.kwds = kwds
        self._dayanchor = self.kwds['day_anchor']

    @apply_nat
    def apply(self, other):
        n = self.n

        if other.day > self._dayanchor and n <= 0:  # then roll forward if n<=0
            n += 1
        elif other.day < self._dayanchor and n > 0:
            n -= 1

        other = as_datetime(other) + relativedelta(months=n)
        other = datetime(other.year, other.month, self._dayanchor)
        return as_timestamp(other)

    def onOffset(self, dt):
        return dt.day == self._dayanchor

    _prefix = ''
"
Issue to play a mp3 file with a Python script from Arduino data,"import subprocess
def play_music_file(filename):
    subprocess.call(('mplayer', filename))
"
How to eliminate all strings from a list,"[element for element in lst if not isinstance(element, str)]"
object properties in python,"In [1]: class test(object):
   ...:     a = 'hi'
   ...:     def __getattr__(self, val):
   ...:         print 'you are accessing ', val
   ...:         
   ...:         

In [2]: t = test()

In [3]: t.b
you are accessing  b

In [4]: t.c
you are accessing  c

In [5]: t.a
Out[5]: 'hi'
"
Parsing CSV to list of tuples without using CSV module,"for line in filename:
    fields = line.split(',')
    fields = [x.strip() for x in fields] # Remove whitespace
"
Iterate over pandas columns with row-wise comparisons,"df = pd.DataFrame(np.random.randint(3, size=(10, 4)),
                  columns=['col1', 'col2', 'col3', 'label'])
print(df)

   col1  col2  col3  label
0     0     0     2      1
1     1     0     0      2
2     2     1     0      2
3     1     1     1      0
4     0     0     2      1
5     2     2     1      2
6     0     2     1      1
7     1     1     0      0
8     1     0     0      2
9     0     2     1      2

results = []
for col in df.columns:
    val = len(df[(df[col]==1) & (df.label==1)])
    results.append(val)
results

[0, 0, 1, 3]

df.loc[df['label'] == 1][df == 1].sum().fillna(0).tolist()

[0.0, 0.0, 1.0, 3.0]
"
List Comprehension of Lists Nested in Dictionaries,"any('a' in lst for lst in dictA.itervalues())
"
python for loop using lambda syntax,"for a, b, c, d in map(lambda y: x[y*4:y*4+4], range(len(x)//4)):

    ...  more code ...
"
Finding a string in a string in a list python,"for row in range(len(board)):
    for col, value in enumerate(board[row]):
        if value == 'd':
            print('[{},{}]'.format(row,col))
"
Students at Table Permutation,"l1 = range(1, 33)
l2 = shift(l1, -1)
l3 = shift(l2, -2)
l4 = shift(l3, -4)

for i in range(0:len(l1)):
  print l1[i], l2[i], l3[i], l4[i]
"
I have been trying to write a program python,"L = ['San Francisco', 'Christchurch ', 'Sydney ', 'Bangkok ', 'Copenhagen ']

max_length = len(max(L, key = lambda x : len(x)))

new_L = []

for e in L:
    new_L.append(e + ' ' * (max_length - len(e)))

for e in zip(*new_L):
    for el in e:
        if el != ' ':
            print el,
"
Find the permutations that sums to the three smallest numbers,">>> import random
>>> N = 5
>>> random.seed(1024)
>>> lists = [sorted(random.sample(range(10*N), 2*N-1)) for _ in xrange(N)]
>>> for p in find_smallest_sum_permutations(lists):
...     print p, sum(p)

[4, 4, 1, 6, 0] 15
[4, 6, 1, 6, 0] 17
[4, 4, 3, 6, 0] 17
[4, 4, 1, 6, 4] 19
[4, 6, 3, 6, 0] 19
"
Python Kivy write/read file to SD card,"Copy to SD card
import shutil

sdpathfile = os.path.join(sdpath, 'filename')
shutil.copyfile(os.path.join('folder', 'filename2'), sdpathfile)
"
Compare two files report difference in python,"for line in difflib.unified_diff(lines1, lines2, fromfile='file1', tofile='file2', lineterm='', n=0):
    for prefix in ('---', '+++', '@@'):
        if line.startswith(prefix):
            break
    else:
        print line
"
How to create methods dynamically in Python ( name + code ),"class BaseFilter(object):
    setters = ('SampleRate', 'Gain', 'BitDepth',)

    def set(self, method_id, value):
        print 'BaseFilter.set(): setting {} to {}'.format(method_id, value)

class Filter(BaseFilter):
    def __getattribute__(self, name):
        method_id = name.lstrip('set')
        if name.startswith('set') and method_id in super(Filter, self).setters:
            def _set(value):
                return self.set(method_id, value)
            return _set
        else:
            return super(Filter, self).__getattribute__(name)
"
Regex to extract characters within json,"s = '"":""1434919817660.wFzJl5KnFq1tyg5X0juKeQmbW8A=""'

if len(s) > 5:
    print(s.translate(None,"""""":""'""""""))
1434919817660.wFzJl5KnFq1tyg5X0juKeQmbW8A=
"
How to get .avi files length,"#!/usr/bin/env python
import sys

# $ pip install hachoir-{core,parser,metadata}
from hachoir_core.cmd_line import unicodeFilename
from hachoir_core.i18n import getTerminalCharset
from hachoir_metadata import extractMetadata
from hachoir_parser import createParser


filename = sys.argv[1]
charset = getTerminalCharset()
filename, real_filename = unicodeFilename(filename, charset), filename
parser = createParser(filename, real_filename=real_filename)
metadata = extractMetadata(parser)
print(""Duration (hh:mm:ss.f): %s"" % metadata.get('duration'))
"
Python - Is it possible to have a dictionary in a list?,">>> ServerList = [
...
...  {
... 'IP_' : '@IPADDR1',
... 'Username_' : '@USER',
... 'Password_' : '@PASSWD',
... 'dirlocation' : '@DIR'
... },
...
...  {
... 'IP_' : '@IPADDR2',
... 'Username_' : '@USER',
... 'Password_' : '@PASSWD',
... 'dirlocation' : '@DIR'
... }
... ]
"
Creating a list in python using the same string but with different values attached to it,"def code(noncelist):
    while True:
        client = blocktrail.APIClient(api_key=""x"", api_secret=""x"", network=""BTC"", testnet=False)
        address = client.address('x')
        latest_block = client.block_latest()
        nonce = latest_block['nonce']
        blockhash = latest_block['hash']    
        print(nonce)   
        noncestr = str(nonce)
        noncelist.append(noncestr)
        print(noncelist)
        time.sleep(60)


code([])
"
Python dict of dicts with default value,"values.get(key1, {}).get(key2, defaultValue)
"
Choose random element in list influenced by its position,"random.triangular(0, length, 0)
"
pygame error: TypeError: must be 2-item sequence,"screen = pygame.display.set_mode((screen_width, screen_height), 0, 32)
"
Delete all items in a list that don't contain a regular expression string,"regex = re.compile(...)
new_list = [s for s in old_list if regex.match(s)]
"
What does it mean to put a dot in a Python class argument?,"from protorpc import messages
class HelloRequest(messages.Message):
"
Combining Lists in python with common elements,">>> from itertools import starmap
>>> from operator import or_ #bitwise or for the function passed to starmap
>>> list(starmap(or_, zip_longest(l1,l2, fillvalue=0)))
[1, 1, 1, 1, 1, 1, 0, 0, 1]
"
Python reading files in a directory,"import csv
import os.path
with open(""C:/*my dir*/UCSC to Ensembl.csv"", ""rb"") as f:
    reader = csv.reader(f, delimiter = ',')
    for row in reader:
        graph_filename = os.path.join(""C:/folder"", row[0] + ""_nt_counts.txt"")
        if os.path.exists(graph_filename):
            print (row[1])
"
How to read python dictionary and tuples,">>> D = {}
>>> if 5 in D: # key present, use that value
...     val = D[5]
... else:      # otherwise create a default value and sets it
...     val = list()
...     D[5] = val
... 
>>> val.append(3)
>>> D[5]
[3]
"
groupby in pandas with different functions for different columns,"import numpy as np
result = df.groupby(['col1','col2']).agg({'col3':'sum','col4':'sum','col5':np.average})
"
remove None value from a list without removing the 0 value,">>> from operator import is_not
>>> from functools import partial
>>> L = [0, 23, 234, 89, None, 0, 35, 9]
>>> filter(partial(is_not, None), L)
[0, 23, 234, 89, 0, 35, 9]
"
Minimum of Numpy Array Ignoring Diagonal,"mask = np.ones(a.shape, dtype=bool)
np.fill_diagonal(mask, 0)
max_value = a[mask].max()
"
"With index, open(file) as enumerate(filepointer)","with open(filename) as f:
    for index, line in enumerate(f):
        # Do stuff with each line.
"
Generate all combinations from a nested python dictionary and segregate them,"import itertools
import random

def generate_combinations(thing, positive=""valid"", negative=None):

    """""" Generate all possible combinations, walking and mimicking structure of ""thing"" """"""

    if isinstance(thing, dict):  # if dictionary, distinguish between two types of dictionary
        if positive in thing:
            if negative is None:
                return thing[positive]  # here it's OK if it's empty
            elif thing[positive]:  # here it's not OK if it's empty
                return [random.choice(thing[positive])] + thing[negative]
            else:
                return []
        else:
            results = []
            for key, value in thing.items():  # generate all possible key: value combinations
                results.append([(key, result) for result in generate_combinations(value, positive, negative)])
            return [dict(result) for result in itertools.product(*results)]

    elif isinstance(thing, (list, tuple)):  # added tuple just to be safe (thanks Padraic!)
        # generate recursive result sets for each element of list
        results = [generate_combinations(element, positive, negative) for element in thing]
        return [list(result) for result in itertools.product(*results)]

    else:  # not a type we know how to handle
        raise TypeError(""Unexpected type"")


def generate_boundary_combinations(thing):

    """""" Generate all possible boundary combinations """"""

    valid = generate_combinations(thing)

    return [result for result in generate_combinations(thing, negative='boundary') if result not in valid]
"
How can I add two elements of same indices of two 2D arrays in python?,"mat_C = [[a+b for a,b in zip(row_A, row_B)] for row_A, row_B in zip(mat_A, mat_B)]
"
Is there a function to transpose matrices (lists of lists) in python? if rows not equal column,"l = [[1,2,3],[4,5,6],[7,8,9]]
print zip(*l)
"
Evaluating a string-producing statement 'later' when stored in a dict,">>> class Demo():
...     good = 'Spice'
...     price = 10
...     location = 'Betazed'
...     fromsys = 'Arrakis'
...     tosys = 'Endor'
... 
>>> formats = {
...     'Price': '{0.good} is worth {0.price} at {0.location}',
...     'Wormhole': '{0.fromsys} has a wormhole to {0.tosys}',
... }
>>> formats['Price'].format(Demo())
'Spice is worth 10 at Betazed'
>>> formats['Wormhole'].format(Demo())
'Arrakis has a wormhole to Endor'
"
"list extend() to index, inserting list elements not only to the end","a_list[1:1] = b_list
"
How does the functools partial work in Python?,"def partial(func, *part_args):
    def wrapper(*extra_args):
        args = list(part_args)
        args.extend(extra_args)
        return func(*args)

    return wrapper
"
Fastest way to create dict from a large list of Dict,"from collections import defaultdict

seen = set()
drepr = lambda d: tuple(sorted(d.items()))

output = defaultdict(list)

for el in input:
    if drepr(el) not in seen:
        output[el['id']].append(el)
        seen.add(drepr(el))
"
How do I display real-time graphs in a simple UI for a python program?,"import numpy as np
import matplotlib.pyplot as plt

plt.ion()
mu, sigma = 100, 15
fig = plt.figure()
x = mu + sigma*np.random.randn(10000)
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='green', alpha=0.75)
for i in range(50):
    x = mu + sigma*np.random.randn(10000)
    n, bins = np.histogram(x, bins, normed=True)
    for rect,h in zip(patches,n):
        rect.set_height(h)
    fig.canvas.draw()
"
Python converting string to list and then some,"#! /usr/bin/env python

line = '""bromine "";"" 00:23:AE:90:FA:C6 "";"" 144.38.198.130"";151'
print line

line = [s.strip() for s in line.replace('""', '').split(';')]
print line

name, macAddress, ipAddress, roomNum = line
d = {'ip': ipAddress, 'mac': macAddress, 'name': name, 'room': roomNum}

print d
"
Adding spaces on word boundaries in text extraction with lxml,"from lxml import html
doc = html.document_fromstring('<p>Hello<br>world!</p>')

for br in doc.xpath(""*//br""):
    br.tail = "" "" + br.tail if br.tail else "" ""

doc.text_content()
"
explode list to another list at space characters,">>> L = ['John', 'House', '23 4500', 'grass', '542 3256']
>>> [y for x in L for y in x.split()]
['John', 'House', '23', '4500', 'grass', '542', '3256']
"
Extract list of Persons and Organizations using Stanford NER Tagger in NLTK,"from nltk import pos_tag
from nltk.chunk import conlltags2tree
from nltk.tree import Tree

def stanfordNE2BIO(tagged_sent):
    bio_tagged_sent = []
    prev_tag = ""O""
    for token, tag in tagged_sent:
        if tag == ""O"": #O
            bio_tagged_sent.append((token, tag))
            prev_tag = tag
            continue
        if tag != ""O"" and prev_tag == ""O"": # Begin NE
            bio_tagged_sent.append((token, ""B-""+tag))
            prev_tag = tag
        elif prev_tag != ""O"" and prev_tag == tag: # Inside NE
            bio_tagged_sent.append((token, ""I-""+tag))
            prev_tag = tag
        elif prev_tag != ""O"" and prev_tag != tag: # Adjacent NE
            bio_tagged_sent.append((token, ""B-""+tag))
            prev_tag = tag

    return bio_tagged_sent


def stanfordNE2tree(ne_tagged_sent):
    bio_tagged_sent = stanfordNE2BIO(ne_tagged_sent)
    sent_tokens, sent_ne_tags = zip(*bio_tagged_sent)
    sent_pos_tags = [pos for token, pos in pos_tag(sent_tokens)]

    sent_conlltags = [(token, pos, ne) for token, pos, ne in zip(sent_tokens, sent_pos_tags, sent_ne_tags)]
    ne_tree = conlltags2tree(sent_conlltags)
    return ne_tree

ne_tagged_sent = [('Rami', 'PERSON'), ('Eid', 'PERSON'), ('is', 'O'), 
('studying', 'O'), ('at', 'O'), ('Stony', 'ORGANIZATION'), 
('Brook', 'ORGANIZATION'), ('University', 'ORGANIZATION'), 
('in', 'O'), ('NY', 'LOCATION')]

ne_tree = stanfordNE2tree(ne_tagged_sent)

print ne_tree
"
How can I accelerate the array assignment in python?,"def foo3(annot, simi_matrix_word):
    N = annot.shape[0]
    A = annot.astype(bool)
    simi_matrix_img = np.eye(N,dtype=float)
    for i,j in zip(*np.tril_indices(N,-1)):
        score = simi_matrix_word[A[i],:][:,A[j]]
        simi_matrix_img[i, j] = score.mean()
    return simi_matrix_img
"
Trying to split strings into multiple parts with Python,"import re
text = u""Hello this is a string.\uf8ff-2.34 This is an example1 string.""
print(re.split(u'\uf8ff(-*\d+\.*\d+)', text))
"
Python how to choose what to print in a networkX graph,"C = B.subgraph(filter(lambda x:x[1]>10, B.degree(data['domain']).items()))
"
Checking a String's format,"import re

abb_pattern = re.compile(r'^ABB+$')

def has_abb(string):
    return abb_pattern.match(string) is not None
"
PyGame Moniter dimming during game,"import win32api, win32con
def move(x,y,press=False):
    win32api.SetCursorPos((x,y))
    if press:
        click(x,y)
def click(x,y):
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN,x,y,0,0)
    win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP,x,y,0,0)
move(10,10,True)
"
"Global variables, member variables and instance variables in Python","glb_var_1 = ""some value""
glb_var_2 = ""some other value""

def f1():
   local_var_1 = ""this is local inside f1""

   print(""f1(): We can use here all variables defined locally, i.e. inside f1():"", local_var_1)
   print(""f1(): We can use global var anywhere in program:"", glb_var_1)

def f2():
   local_var_1 = ""this is local inside f2""
   glb_var_1   = ""this is local variable which is hiding global var of same name""

   print(""f2(): locally inside f2():"", local_var_1)
   print(""f2(): same name as global var, but local to f2():"", glb_var_1)

def f3():
    print(""f3(): global var value would be one defined globally, not the one as defined in f2():"", glb_var_1)
"
How do I parse out the following HTML in python beautifulsoup?,">>> a = soup.findAll(""a"", href=""whatever"")
"
Pipe into raw_input() in Python,"import subprocess

text = ""This is the text""

data = subprocess.Popen(['python', 'other_script.py'], stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate(input=text)
print data[0]
"
How to find a group of consecutive leters and check cases with python re,"p = re.compile(r""[A-Z]{3}[a-z][A-Z]{3}"")

word = """".join(re.findall(p, 'udkehtEOajidfEEfjaiERBdEHY alijdfilaOEPvOEG'))
"
What is the preferred way to import pylab at a function level in Python 2.7?,"def Time_Domain_Plot(Directory,Title,X_Label,Y_Label,X_Data,Y_Data):
    # Directory: The path length to the directory where the output file is 
    #            to be stored
    # Title:     The name of the output plot, which should end with .eps or .png
    # X_Label:   The X axis label
    # Y_Label:   The Y axis label
    # X_Data:    X axis data points (usually time at which Yaxis data was acquired
    # Y_Data:    Y axis data points, usually amplitude

    import matplotlib
    from matplotlib import rcParams, pyplot as plt

    rcParams.update({'figure.autolayout': True})
    Output_Location = Directory.rstrip() + Title.rstrip()
    fig,fft_plot = plt.subplots()
    matplotlib.rc('xtick',labelsize=18)
    matplotlib.rc('ytick',labelsize=18)
    fft_plot.set_xlabel(X_Label,fontsize=18)
    fft_plot.set_ylabel(Y_Label,fontsize=18)
    plt.plot(X_Data,Y_Data,color='red')
    plt.savefig(Output_Location)
    plt.close()
"
letter/word guessing game in python,"print ', '.join(sorted(availletters))
"
How to find duplicate values in next lines?,"from collections import OrderedDict as od
with open(""abc"") as f:
   dic = od()
   for line in f:
       row  = map(int,line.split())
       idx, num  = row[2], row[0]
       val = [num] + [row[3:-1]]
       dic.setdefault(idx,[]).append(val)

for k,v in dic.items():
    for val in v:
        print k,val
"
"These 8 lines of python + pandas would take ~1 month to execute, help me speed them up?","from collections import defaultdict

df = pd.read_csv('emails.csv')
grouped = defaultdict(str)
for i, text in zip(df.sender_id, df.text):
    grouped[i] += text + ' '

with open('/storage/test.csv', 'w') as csvfile:
    test_writer = csv.writer(csvfile)
    for i in grouped.items():  # use iteritems in Python2
        test_writer.writerow(i)
"
Python: pairwise comparison between two lists: list a >= list b?,"print(np.greater_equal(a,b).all())

print(np.all(a >= b))
"
Flask Display Json in a Neat Way,"app.route('/<major>/')
def major_res(major):
    course_list = list(client.db.course_col.find({""major"": major.encode('utf8', 'ignore').upper() }))
    return flask.jsonify(**course_list)
"
Python: unpacking string of integers to complex numbers,"In [34]: np.frombuffer(struct.pack('2H', 1,2), dtype='i2').astype(np.float32).view(np.complex64)
Out[34]: array([ 1.+2.j], dtype=complex64)
"
How can I use non-ASCII characters?,"import requests as rq
from lxml import html

url = ""http://www.lun.ua/%D0%BF%D1%80%D0%BE%D0%B4%D0%B0%D0%B6%D0%B0-%D0%BA%D0%B2%D0%B0%D1%80%D1%82%D0%B8%D1%80-%D0%BA%D0%B8%D0%B5%D0%B2""
r = rq.get(url)
tree = html.fromstring(r.text)

divs = tree.xpath(""//div[@class='obj-left']"")

for div in divs:

    name = div.xpath(""./h3/span/a/text()"")[0]
    details = div.xpath("".//div[@class='obj-params-col'][1]"")[0]
    room = details.xpath(""./p[1]/text()[last()]"")[0]
    square = details.xpath(""./p[2]/text()[last()]"")[0]
    floor = details.xpath(""./p[3]/text()[last()]"")[0]

    print name.encode(""utf-8"")
    print room.encode(""utf-8"")
    print square.encode(""utf-8"")
    print floor.encode(""utf-8"")
"
python [:] notation and range,">>> a = [1, 2, 3]
>>> b = a           # b is now the same list as a
>>> a[0] = 10       # so changing that list is visible to b
>>> b
[10, 2, 3]

>>> a = [1, 2, 3]
>>> b = a[:]        # b is now a new list, with a copy of a
>>> a[0] = 10       # so changing the original list doesn't affect b
>>> b
[1, 2, 3]

>>> a = [1, 2, 3]
>>> b = a           # b is now the same list as a
>>> a = [4, 5]      # but now a is a different list
>>> a[0] = 10
>>> b
[1, 2, 3]

>>> a = [1, 2, 3]
>>> b = a           # b is now the same list as a
>>> a[:] = [4, 5]   # and we've replaced the contents
>>> b
[4, 5]
"
I cant get the return function working,"class Weapon:
    def __str__(self):
        return self.name

class WoodenStaff(Weapon):
    def __init__(self):
        self.name = ""Wooden Staff""
        self.description = ""Basic Staff""
        self.damage = 5

inventory = [WoodenStaff()]
for weapon in inventory:
    print(weapon)
>> Wooden Stuff
"
Unique zero-based id for values in pandas,"data = pd.DataFrame({'id' : [50,50,30,10,50,50,30]})
print pd.factorize(data.id)[0]
"
How to access global variable in Python?,"class Test(object): #Inherit from `object` to make it a new-style class(Python 2)
    x = ""me""
    def hello(self):
        if self.x == ""me"":
            type(self).x = ""Hei..!""
            return ""success""

Test().hello()
print Test.x
"
Find closed shapes in image,"from collections import namedtuple
from copy import deepcopy

def find_groups(inpixels):
    """"""
    Group the pixels in the image into three categories: free, closed, and
    border.
        free: A white pixel with a path to outside the image.
        closed: A white pixels with no path to outside the image.
        border: A black pixel.

    Params:
        pixels: A collection of columns of rows of pixels. 0 is black 1 is
                white.

    Return:
        PixelGroups with attributes free, closed and border.
        Each is a list of tuples (y, x).
    """"""

    # Pad the entire image with white pixels.
    width = len(inpixels[0]) + 2
    height = len(inpixels) + 2
    pixels = deepcopy(inpixels)
    for y in pixels:
        y.insert(0, 1)
        y.append(1)
    pixels.insert(0, [1 for x in range(width)])
    pixels.append([1 for x in range(width)])

    # The free pixels are found through a breadth first traversal.
    queue = [(0,0)]
    visited = [(0,0)]
    while queue:
        y, x = queue.pop(0)

        adjacent = ((y+1, x), (y-1, x), (y, x+1), (y, x-1))
        for n in adjacent:
            if (-1 < n[0] < height and -1 < n[1] < width and
                                        not n in visited and 
                                    pixels[n[0]][n[1]] == 1):
                queue.append(n)
                visited.append(n)

    # Remove the padding and make the categories.
    freecoords = [(y-1, x-1) for (y, x) in visited if
                 (0 < y < height-1 and 0 < x < width-1)]
    allcoords = [(y, x) for y in range(height-2) for x in range(width-2)]
    complement = [i for i in allcoords if not i in freecoords]
    bordercoords = [(y, x) for (y, x) in complement if inpixels[y][x] == 0]
    closedcoords = [(y, x) for (y, x) in complement if inpixels[y][x] == 1]

    PixelGroups = namedtuple('PixelGroups', ['free', 'closed', 'border'])
    return PixelGroups(freecoords, closedcoords, bordercoords)

def print_groups(ysize, xsize, pixelgroups):
    ys= []
    for y in range(ysize):
        xs = []
        for x in range(xsize):
            if (y, x) in pixelgroups.free:
                xs.append('.')
            elif (y, x) in pixelgroups.closed:
                xs.append('X')
            elif (y, x) in pixelgroups.border:
                xs.append('#')
        ys.append(xs)
    print('\n'.join([' '.join(k) for k in ys]))
"
asked to calculate the logical matrix P=mn," for i in range(len(M)):
     for j in range(len(N[0])):
         for k in range(len(N)):
             P[i][j] += M[i][k] * N[k][j]
"
initializing Arrays in python,"from array import *
a = array('u', u""unicode string"")
"
Python - Parsing a text file,"textfile = ""tos 0x0, ttl 62, offset 0, length:40, bad cksum 0 (->4203)!) 150.100.15.6.49153 > 150.100.0.2.57300:""

ttlToSearchFor = 62
ipToSearchFor = ""150.100.15""
ipSide = ""right""

#Get rid of colon in the length record
lengthRename = textfile.replace( ""length:"", ""length "" )
#Split by row
individualRow = lengthRename.split( "":"" )
#Loop for each record (assuming they're separated by colons)
for i in range( len( individualRow ) ):
    splitByComma = individualRow[i].split( "","" )
    #Make sure the record is valid
    if len( splitByComma ) == 5:
        #Get the ttl or any other info here
        ttl = splitByComma[1].rstrip().lstrip()
        #Remove the ttl text and any spaces to leave the number
        ttlNumber = ttl.replace( ""ttl"", """" ).replace( "" "", """" )
        if ttlNumber == str( ttlToSearchFor ):
            #Get IPs
            splitBySpace = individualRow[i].split( "" "" )
            rightIP  = splitBySpace[-1]
            leftIP = splitBySpace[-3]
            #Search the left or right (or both) IPs for a match
            if (ipSide == ""right"" and ipToSearchFor in rightIP) or (ipSide == ""left"" and ipToSearchFor in leftIP) or (ipSide == ""both"" and (ipToSearchFor in leftIP or ipToSearchFor in rightIP)):
                print individualRow[i]
                #You found the record
"
How to write output of web scrape to column instead of rows in Beautiful Soup,"headers = table.find('tr', class_=""yfnc_modtitle1"").find_all('th')
revenue = table.tr.td.table.tr.next_sibling.td.next_siblings

with open('/home/kwal0203/Desktop/Apple.csv', 'a') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow([value.get_text(strip=True).encode(""utf-8"") for value in headers])
    writer.writerow([value.get_text(strip=True).encode(""utf-8"") for value in revenue])
"
Python metaclass default attributes,"import inspect

class AttributeInitType(type):        
    def __call__(self, *args, **kwargs):
        obj = super(AttributeInitType, self).__call__(*args, **kwargs)
        argspec = inspect.getargspec(obj.__init__)
        defaults = dict(zip(argspec.args[-len(argspec.defaults):], argspec.defaults))
        defaults.update(kwargs)
        for key, val in defaults.items():
            setattr(obj, key, val)
        return obj
"
Pandas Dataframe: Operations on columns without iterrows(),"def make_dist_mat(xy):
    d0 = np.subtract.outer(xy[:,0], xy[:,0])
    d1 = np.subtract.outer(xy[:,1], xy[:,1])
    return np.hypot(d0, d1)

make_dist_mat(df[['X', 'Y']].astype(float).values)
"
Creating time series DataFrame from event data,"df.set_index('sell_date', inplace=True) 
resampled = df.resample('7D', [sum, len])
"
Build slice objetcs from subscript notation,">>> slice(1, 2)
slice(1, 2, None)
>>> slice(1, 2, 3)
slice(1, 2, 3)
>>>
"
Noob Python While Loop,"a = int(input(""Enter a number: ""))
more = input(""Please enter Y or N if you want to add more numbers: "")
summ=a          #intialize sum to a
count=1         # no. of integers entered, to calculate mean
while more.lower()==""y"":
    b = int(input(""Enter another number: ""))
    count+=1          #increase count by 1
    summ+= b          #add b to sum
    abMean = summ/float(count)         #used float(count) to get actual value

    print(""sum="",summ)
    print(""mean="",abMean)    
    more = input(""Please enter Y or N if you want to add more numbers: "") #ask for user input
print(""sum="",summ)
print(""mean="",abMean)  
"
Break string into list elements based on keywords,"import re
print re.findall('[A-Z][a-z]?|[0-9]+', 'Na2SO4MnO4')
"
define aggfunc for each values column in pandas pivot table,">>> df1 = pd.pivot_table(df, values=['D'], rows=['B'], aggfunc=np.sum)
>>> df2 = pd.pivot_table(df, values=['E'], rows=['B'], aggfunc=np.mean)
>>> pd.concat((df1, df2), axis=1)
          D         E
B                    
A  1.810847 -0.524178
B  2.762190 -0.443031
C  0.867519  0.078460
"
"Python: Determine if an unsorted list is contained in a 'list of lists', regardless of the order to the elements","def doSomething(myListOfLists, otherInputs):
    s = set(otherInputs)
    return any(s.issubset(item) for item in myListOfLists)
... 
>>> doSomething([[6, 8, 7],[6, 5, 4], [10, 8, 10]], [7, 6, 8])
True
>>> doSomething([[6, 8, 7, 10],[6, 5, 4], [10, 8, 10]], [7, 6, 8])
True
>>> doSomething([[1, 2, 7],[6, 5, 4], [10, 8, 10]], [7, 6, 8])
False
"
For loop syntax in Python without using range() or xrange(),"for ind, i in enumerate(lst):
    for j in lst[ind+1: ]: 
        #Do Something
"
Django: How to access originating instance from a RelatedManager?,"class BarManager(models.Manager):
    use_for_related_fields = True

    def bar(self, foo=None):
        if foo == None:
            qs = Foo.objects.all()
            for field_name, field_val in self.core_filters.items():
                field_name = field_name.split('__')[1]
                qs = qs.filter(**{ field_name: field_val })
            foo = qs.get()
        # do k00l stuff with foo
"
Specify `next` url passed to login view by Django login_required decorator,"def user_passes_test(test_func, next=None, login_url=None, redirect_field_name=REDIRECT_FIELD_NAME):
    """"""
    Decorator for views that checks that the user passes the given test,
    redirecting to the log-in page if necessary. The test should be a callable
    that takes the user object and returns True if the user passes.
    """"""

    def decorator(view_func):
        @wraps(view_func, assigned=available_attrs(view_func))
        def _wrapped_view(request, *args, **kwargs):
            if test_func(request.user):
                return view_func(request, *args, **kwargs)
            path = request.build_absolute_uri()
            resolved_login_url = resolve_url(login_url or settings.LOGIN_URL)
            # If the login url is the same scheme and net location then just
            # use the path as the ""next"" url.
            login_scheme, login_netloc = urlparse(resolved_login_url)[:2]
            current_scheme, current_netloc = urlparse(path)[:2]
            if ((not login_scheme or login_scheme == current_scheme) and
                    (not login_netloc or login_netloc == current_netloc)):
                path = request.get_full_path() 
            resolved_next_url = resolve_url(next or path)
            from django.contrib.auth.views import redirect_to_login
            return redirect_to_login(
                resolved_next_url, resolved_login_url, redirect_field_name)
        return _wrapped_view
    return decorator


def login_required(function=None, next=None, redirect_field_name=REDIRECT_FIELD_NAME, login_url=None):
    """"""
    Decorator for views that checks that the user is logged in, redirecting
    to the log-in page if necessary.
    """"""
    actual_decorator = user_passes_test(
        lambda u: u.is_authenticated,
        next=next
        login_url=login_url,
        redirect_field_name=redirect_field_name,
    )
    if function:
        return actual_decorator(function)
    return actual_decorator
"
get all combination of n binary value,"lst = map(list, itertools.product([0, 1], repeat=n))"
How can I sum the product of two list items using for loop in python?,"sum(x * y for x, y in zip(a, b))"
round exponential float to 2 decimals,">>> format(4.311237638482733e-91, '.3g')
'4.31e-91'
"
Python/Boto + AWS S3 versioning: how do I replace the current key with older version?,"> versions = list(bucket.list_versions('my_file.pdf'))
> print [k.version_id for k in versions]
[u'tsbfD0oKQ87a.cWyImABs5lVhVv84dnC', u'0nKieCek8C4q4GegjXKh8UhJCoiAMrqM', u'null']
> key.name
'my_file.pdf'
> bucket.copy_key(key.name, 'bucket-name', key.name, src_version_id=u'0nKieCek8C4q4GegjXKh8UhJCoiAMrqM')
"
Have HTMLParser differentiate between link-text and other data?,"from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):

    lasttag = None

    def handle_starttag(self, tag, attr):
        self.lasttag = tag.lower()

    def handle_data(self, data):
        if self.lasttag == ""a"" and data.strip():
            print data
"
Reading a CR2 (Raw Canon Image) header using Python,"from struct import *

recognised_tags = { 
    0x0100 : 'imageWidth',
    0x0101 : 'imageLength',
    0x0102 : 'bitsPerSample',
    0x0103 : 'compression',
    0x010f : 'make',    
    0x0110 : 'model',
    0x0111 : 'stripOffset',
    0x0112 : 'orientation', 
    0x0117 : 'stripByteCounts',
    0x011a : 'xResolution',
    0x011b : 'yResolution',
    0x0128 : 'resolutionUnit',
    0x0132 : 'dateTime',
    0x8769 : 'EXIF',
    0x8825 : 'GPS data'};

def GetHeaderFromCR2( buffer ):
    # Unpack the header into a tuple
    header = unpack_from('HHLHBBL', buffer)

    print ""\nbyte_order = 0x%04X""%header[0]
    print ""tiff_magic_word = %d""%header[1]
    print ""tiff_offset = 0x%08X""%header[2]
    print ""cr2_magic_word = %d""%header[3]
    print ""cr2_major_version = %d""%header[4]
    print ""cr2_minor_version = %d""%header[5]
    print ""raw_ifd_offset = 0x%08X\n""%header[6]

    return header

def FindDateTimeOffsetFromCR2( buffer, ifd_offset, endian_flag ):
    # Read the number of entries in IFD #0
    (num_of_entries,) = unpack_from(endian_flag+'H', buffer, ifd_offset)
    print ""Image File Directory #0 contains %d entries\n""%num_of_entries

    # Work out where the date time is stored
    datetime_offset = -1

    # Go through all the entries looking for the datetime field
    print "" id  | type |  number  |  value   ""
    for entry_num in range(0,num_of_entries):

        # Grab this IFD entry
        (tag_id, tag_type, num_of_value, value) = unpack_from(endian_flag+'HHLL', buffer, ifd_offset+2+entry_num*12)

        # Print out the entry for information
        print ""%04X | %04X | %08X | %08X ""%(tag_id, tag_type, num_of_value, value),
        if tag_id in recognised_tags:
            print recognised_tags[tag_id]

        # If this is the datetime one we're looking for, make a note of the offset
        if tag_id == 0x0132:
            assert tag_type == 2
            assert num_of_value == 20
            datetime_offset = value

    return datetime_offset

if __name__ == '__main__':
    with open(""IMG_6113.CR2"", ""rb"") as f:
        # read the first 1kb of the file should be enough to find the date/time
        buffer = f.read(1024) 

        # Grab the various parts of the header
        (byte_order, tiff_magic_word, tiff_offset, cr2_magic_word, cr2_major_version, cr2_minor_version, raw_ifd_offset) = GetHeaderFromCR2(buffer)

        # Set the endian flag
        endian_flag = '@'
        if byte_order == 0x4D4D:
            # motorola format
            endian_flag = '>'
        elif byte_order == 0x4949:
            # intel format
            endian_flag = '<'

        # Search for the datetime entry offset
        datetime_offset = FindDateTimeOffsetFromCR2(buffer, 0x10, endian_flag)

        datetime_string = unpack_from(20*'s', buffer, datetime_offset)
        print ""\nDatetime: ""+"""".join(datetime_string)+""\n""
"
Parsing bitcoin address in html,"import re
from bs4 import BeautifulSoup

html = '''
<div class=""roundpic qrcode"" data-height=""80"" data-text=""bitcoin:1JL7kugm1vDLqyzrVPAPdcbjH3PTxcPcud?amount=0.0573"" data-width=""80"" style=""margin: auto""></div>
<div class=""roundpic qrcode"" data-height=""160"" data-text=""bitcoin:1JL7kugm1vDLqyzrVPAPdcbjH3PTxcPcud?amount=0.0573"" data-width=""160"" style=""padding: 10px""></div>
'''

soup = BeautifulSoup(html)

for div in soup.find_all('div', {'data-text': re.compile(r'^bitcoin:')}):
    address, amount = div.get('data-text').replace('bitcoin:', '').split('?amount=')
"
How to test if all rows are equal in a numpy,"(arr == arr[0]).all()
"
Unexpected behavior of a function built to replace split (),"def better_split(text,markersString):
    # simple and better way for 'for e in markerString...'
    markers = list(markersString)
    splited = []

    # there is no need to assign variable n, we all know it should be 1
    # n = 1    

    def iter_text(text):
        # check if text is an empty string,
        # NOTE this `text` will cover `text` in upper function as to local scope,
        # so it's actually the text everytime iter_text() get,
        # not the one better_split() get.
        if not text:
            return
        # [UPDATES 2012-03-17 01:07 EST]
        # add a flag to judge if there are markers in `text`
        _has_marker = False
        for character in text:
            if character in markers:
                # set `_has_marker` to True to indicate `text` has been handled
                _has_marker = True
                point = text.find(character)
                word = text[:point]
                splited.append(word)
                # check if text[point] is legal, to prevent raising of IndexError
                while point + 1 <= len(text) and text[point] in markers:
                    point = point + 1
                text = text[point:]
                # break the loop when you find a marker
                # and change `text` according to it,
                # so that the new loop will get started with changed `text`
                break
        # if no marker was found in `text`, add the whole `text` to `splited`
        if not _has_marker:
            splited.append(text)
        else:
            iter_text(text)

    iter_text(text)

    print 'final splited = ', splited
"
printing out dictionnaires,"    elif population == 2 or 3:
"
Defining virtual fields in peewee,"@hybrid_property
def radius(self):
    return abs(self.length) / 2

@radius.expression
def radius(cls):
    return fn.ABS(cls.length) / 2
"
"Python: Reading thru CSV file, finding columns with same value and appending their other column values","from collections import OrderedDict

od = OrderedDict()
import csv
with open(""in.csv"") as f,open(""new.csv"" ,""w"") as out:
    r = csv.reader(f)
    wr= csv.writer(out)
    header = next(r)
    for row in r:
        loc,rest = row[0], row[1:]
        od.setdefault(loc, []).extend(rest)
    wr.writerow(header)
    for loc,vals in od.items():
        wr.writerow([loc]+vals)
"
"Python Continue inside nested loops, getting to the right level of the nesting","def get_message():
    message = stomp.get
    return simplejson.loads(message.body)

message = get_message()
while message[0]['fieldname1']:
    try:
        # get the first item in message[0]['fieldname2'][0]['fieldname2-1']
        # such item['fieldname2-1-1'] is true.  Whether we
        # find one and do this code, or don't and catch the
        # StopIteration, we wrap back to the while loop.
        item = next(x
                    for x in message[0]['fieldname2'][0]['fieldname2-1']
                    if item['fieldname2-1-1'])
        list1_new[len(list_new),:] = item['fieldname2-1-2']
        list1_state = (set(list1) == set(list1_new))

        if not list1_state:
            list1 = list1_new # should print the new list1 and then reset the while loop
            print list1
    except StopIteration:
        # There was no such item.
        pass
    message = get_message()

global ShutdownState
ShutdownState = True
"
How do you define a variable in one function and change it in another with the first function recognizing it,"while True:
    option = raw_input(""What would you like to do?"")
    if option == ""exit"":
        break
"
How to read a randomly imported text file and store it in a list,"import tkinter
from tkinter.filedialog import askopenfile

f = askopenfile(filetypes=[(""Text files"",""*.txt"")])

import_list = []

txt = f.read()

import_list.append(txt)
# import_list[-1] now contains txt

# ... any other operations on f.

f.close()
"
"5*5 grid, in every 3*3 square of the grid must be 4 ""lights""","recursive_trial(0, 0, 6)
print grid
"
2D Color coded scatter plot with user defined color range and static colormap,"import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

cm = plt.cm.get_cmap('RdYlBu')
x = [1,5,10]
y = [2,6,9]
vel = [7,2,1]

# Plot the data
fig=plt.figure()
fig.patch.set_facecolor('white')
ax=fig.add_subplot(111)
s = ax.scatter(x,y,c=vel,edgecolor=''))
norm = mpl.colors.Normalize(vmin=0, vmax=10)
ax1 = fig.add_axes([0.95, 0.1, 0.01, 0.8])
cb = mpl.colorbar.ColorbarBase(ax1,norm=norm,cmap=cm,orientation='vertical')
cb.set_clim(vmin = 0, vmax = 10)
cb.set_label('Value of \'vel\'')
plt.show()
"
Passing integer lists to python,"import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--l1', type=str)
parser.add_argument('--l2', type=str)
args = parser.parse_args()
l1_list = args.l1.split(',') # ['1','2','3','4']
"
Pandas: interpolation where first and last data point in column is NaN,"print df
#      col 1  col 2
#0       NaN    NaN
#1       NaN    NaN
#1000      1    NaN
#1001    NaN      1
#1002      3    NaN
#1003      4      3
#3999    NaN    NaN
#4000    NaN    NaN

df.loc[df['col 1'].idxmin(): df['col 1'].idxmax()] = df.loc[df['col 1'].idxmin(): df['col 1'].idxmax()].fillna(method='ffill')
df.loc[df['col 2'].idxmin(): df['col 2'].idxmax()] = df.loc[df['col 2'].idxmin(): df['col 2'].idxmax()].fillna(method='ffill')
print df
#      col 1  col 2
#0       NaN    NaN
#1       NaN    NaN
#1000      1    NaN
#1001      1      1
#1002      3      1
#1003      4      3
#3999    NaN    NaN
#4000    NaN    NaN
"
Sorting a List of List in Python by frequency,"from collections import Counter

freq = Counter(item[-1] for item in a)
result = sorted(a, key=lambda i: freq[i[-1]], reverse=True)
"
Parsing HTML with str.split in Python,"import re
target = '<a class=""post-list-subject"" href=""(.*)"">'
results = re.findall(target, htmltext)
"
Automatizing a Python Web Crawler - How to prevent raw_input all the time?,"import requests
from lxml import html


def searchRecordInSpecificPosition(url, position):
    ## Making request to the specified URL
    response = requests.get(url)

    ## Parsing the DOM to a tree
    tree = html.fromstring(response.content)

    ## Creating a dict of links.
    links_dict = dict()

    ## Format of the dictionary:
    ##
    ##  {
    ##      1: {
    ##          'href': ""http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Medina.html"",
    ##          'text': ""Medina""
    ##      },
    ##      
    ##      2: {
    ##          'href': ""http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Chiara.html"",
    ##          'text': ""Chiara""
    ##      },
    ##  
    ##      ... and so on...
    ## }

    counter = 1

    ## For each <a> tag found, extract its text and link (href) and insert it into links_dict
    for link in tree.xpath('//ul/li/a'):
        href = link.xpath('.//@href')[0]
        text = link.xpath('.//text()')[0]
        links_dict[counter] = dict(href=href, text=text)
        counter += 1

    return links_dict[position]['text'], links_dict[position]['href']


times_to_search = int(raw_input(""Enter the amount of times to search: ""))
position = int(raw_input('Enter position: '))

count = 0

print """"

while count < times_to_search:
    if count == 0:
        name, url = searchRecordInSpecificPosition(""http://pr4e.dr-chuck.com/tsugi/mod/python-data/data/known_by_Brenae.html"", position)
    else:
        name, url = searchRecordInSpecificPosition(url, position)
    print ""[*] Name: {}"".format(name)
    print ""[*] URL: {}"".format(url)
    print """"
    count += 1
"
Problems with a python function that return a list of strings?,"def fancy_function(directory, regex):
    preprocessed_list = []
    for set the path of the directory:
        with open the file names and walk over them:
            preprocessing1 = [....]
            preprocessing2 = [ remove some punctuation from preprocessing1]

            preprocessed_list.append(preprocessing2)
    return preprocessed_list
"
Print lyrics by python,"print (' hurrah! Hurrah!\n'.join([""The ants go marching %s by %s,"" % tuple([numbers[i]]*2)]*3) )
"
Python beautifulsoup trying to remove html tags 'span',">>> import re
>>> s='[<span class=""street-address"">\n            510 E Airline Way\n           </span>]'
>>> re.sub(r'\[|\]|\s*<[^>]*>\s*', '', s)
'510 E Airline Way'
"
python list.iteritems replacement,"j = 0
l2 = []
for i in range(len(l)):
    if condition(l[i]):
        l[j] = l[i]
        j += 1
    else:
        l2.append(l[i])
del l[j:]
"
Converting a dict into a list,print([y for x in list(dict.items()) for y in x])
LXML add an element into root,"
import lxml.etree as ET
filename = ""file1.xml""
appendtoxml = ""file2.xml""
output_file = appendtoxml.replace('.xml', '') + ""_editedbyed.xml""

parser = ET.XMLParser(remove_blank_text=True)
tree = ET.parse(filename, parser)
root = tree.getroot()

out_tree = ET.parse(appendtoxml, parser)
out_root = out_tree.getroot()
for path in ["".//Device"", "".//Speaker""]:
    for elt in root.findall(path):
        out_root.append(elt)

out_tree.write(output_file, pretty_print=True)
"
Python - Locking a shared resource (Multiprocessing),"import datetime
import multiprocessing
from multiprocessing import Queue

def worker(work_queue):
    if work_queue.get() == ""Start"":
            for i in range(1,10):
                if i == 5:
                    # do something
                    print datetime.datetime.now() 

def main():
    worker_queues = {}
    for i in xrange(1, 6):
        q = Queue()
        worker_queues[i] = q # one queue per process here
        d = multiprocessing.Process(target = worker, args = (q,))
        d.daemon = True
        d.start()
    for wq in worker_queues.values():
        wq.put(""Start"")

if __name__ == ""__main__"":
    main()
"
Comparing Image Files,"import ImageChops
import math, operator

def rmsdiff(im1, im2):
    ""Calculate the root-mean-square difference between two images""

    h = ImageChops.difference(im1, im2).histogram()

    # calculate rms
    return math.sqrt(reduce(operator.add,
        map(lambda h, i: h*(i**2), h, range(256))
    ) / (float(im1.size[0]) * im1.size[1]))
"
"Convert this list, tuple in list only in Python?",">>> lis = [[(2L,)], [(3L,)]]
>>> [ y[0] for x in lis for y in x]
[2L, 3L]
"
Changing the date range and running in loop,"https://graph.facebook.com/fql?q=SELECT post_id, comments, like_info.like_count, message FROM stream WHERE source_id = 263738183707778 and like_info.like_count > 1000 and created_time > 1325376000&access_token=
"
convert a full string type time into datetime type - Python,"dateobj = datetime.datetime.strptime(inputstring, '%B %d, %Y %I:%M:%S %p').date()
"
python sorting objects in a list using to criteria,"search_result.sort(key=lambda x: (x.last_name, x.first_name))
"
Programmatic binding of accelerators in wxPython,"import wx

class MyForm(wx.Frame):

    #----------------------------------------------------------------------
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, ""Programmatic binding of accelerators in wxPython"", size=(450,150))

        # Add a panel so it looks the correct on all platforms
        panel = wx.Panel(self, wx.ID_ANY)
        bindings = [
                  (wx.ACCEL_CTRL,  wx.WXK_UP, 'up'),
                  (wx.ACCEL_CTRL,  wx.WXK_DOWN, 'down'),
                  (wx.ACCEL_CTRL,  wx.WXK_LEFT, 'left'),
                  (wx.ACCEL_CTRL,  wx.WXK_RIGHT, 'right'),
                  ]


        accelEntries = []

        for binding in bindings:
            eventId = wx.NewId()
            accelEntries.append( (binding[0], binding[1], eventId) )

            self.Bind(wx.EVT_MENU, lambda evt, temp=binding[2]: self.on_move(evt, temp), id=eventId)

        accelTable  = wx.AcceleratorTable(accelEntries)
        self.SetAcceleratorTable(accelTable )
     #----------------------------------------------------------------------

    def on_move(self, Event, direction):
        print ""You pressed CTRL+""+direction

# Run the program
if __name__ == ""__main__"":
    app = wx.App(False)
    frame = MyForm()
    frame.Show()
    app.MainLoop()
"
Display a .txt file in alphabetical order in python,"for line in sorted(open('file.txt')):
    print(line, end='')
"
How to write a cell with multiple columns in xlwt?,"top_row = 0
bottom_row = 0
left_column = 0
right_column = 1
sheet.write_merge(top_row, bottom_row, left_column, right_column, 'Long Cell')
"
Python: how to get a number followed by a specific key word from a string,"d = dict((k,v) for k,v in (i.split(':') for i in a.split(""\r\n\t"")[2:]))
"
Returning function values based on argument?,"def func2():
    list1=[]
    list2=[]
    value=10
    if somePredicate():
        (list3,list4)=func3(value)
        return list1, list2, list3, list4
    else:
        return list1, list2
"
Python simple string cycle,"def repeat(word, num):
    for i in range(1,num+1):
        print('+'.join(word for _ in range(i)))
"
Fill missing dates by group in pandas,"df.groupby('name')[""fill""].fillna(method='ffill')
"
how to change the size of the sci notation above the y axis in matplotlib?,"plt.rc('font', **{'size': '30'})"
"Python remove word containing ""l""","words = ''
with open(ifile_name,""r"") as file:
    for line in file:
        list_of_words = line.split(' ')
        for key, word in enumerate(list_of_words):
            if 'l' in word:
                list_of_words[key] = ''

        words += ' '.join(w for w in list_of_words if w != '')
        words += '\n'

with open(ofile_name, ""w+"") as file:
    file.write(words)
"
select a specific range from a numpy 2d array to plot values,"import matplotlib.pyplot as plt

plt.plot(x,y)
plt.axis((2,4,None,None)) 
plt.show()
"
Define function stubs enmasse,"class CallableHierarchyWrapper(object):

    def __init__(self, wrapped_object):
        self.wrapped_object = wrapped_object

    def __getattribute__(self, name):
        attr = self.wrapped_object.__getattribute__(name)
        if callable(attr):
            return hierarchywrapper(attr)
        else:
            return attr
"
From string in a csv cell to dict,"dict((a,int(b)) for a,b in (t.split('=') for t in s.split(',')))
"
How to check in Python from which class methods is derived?,"def getMethodClass(unbound_method):
    cls = unbound_method.im_class
    attr = unbound_method.__name__
    # rest of implementation is the same as before...

getMethodClass(B.a)
=> __main__.A
"
Python Classes: adding dynamic attributes to methods,"class AttributeDict(dict): 
    __getattr__ = dict.__getitem__

class Foo (object):
    def __init__(self,d):
        self.d=d

    @property
    def return_d(self):
        return AttributeDict(self.d)
"
How can I use sum() function for a list in Python?,numlist = [float(x) for x in numlist]
Put counter into a frequency ordered list,"sorted(yourcounter, key=lambda i: yourcounter[i])
"
Fill array from raw_input,"my_array = []
for i in xrange(number_of_times):
    my_array.append(raw_input('Input: '))

print my_array  # Shows you the results
"
Iterate over a list of objects getting ke/value pairs,"def items(lis):
    for l in lis:
        for k, v in l.iteritems():
            yield k, v

for k, v in items(y):
    print k, v
"
How to find the count of a word in a string?,"from collections import Counter

words = input_string.split()
wordCount = Counter(words)
"
Update list elements based on a second list as index,"setB = set(listB)
listC = [value if index not in setB else 0 for index, value in enumerate(listA)]
"
Setting colormap limits in pandas df.plot,"In [30]:

from matplotlib import colors
from matplotlib import cm
D={item: cm.Purples_r._segmentdata[item][3:-3] for item in ['blue', 'green', 'red']}
#only use the middle range of color
for item in ['blue', 'green', 'red']:
    seg=np.linspace(0,1,len(D[item]))
    for i in range(len(D[item])):
        D[item][i]=(seg[i],D[item][i][1],D[item][i][2]) 
In [31]:

New_cm = colors.LinearSegmentedColormap('New_cm', D)
df=pd.DataFrame(np.random.random((5,5)))
In [32]:

fig, ax = plt.subplots(1, 1)
ax.get_xaxis().set_visible(False)
df.plot(marker='o', colormap=cm.Purples_r, ax=ax)
plt.title('Original Purples_r')
plt.savefig('1.png')
"
"Python, creating objects","class Student(object):
    name = """"
    age = 0
    major = """"

def make_student(name, age, major):
    student = Student()
    student.name = name
    student.age = age
    student.major = major
    # Note: I didn't need to create a variable in the class definition before doing this.
    student.gpa = float(4.0)
    return student
"
Python 3 - cumulative functions alternatives,"for chain in chains:
    for doc in documents:
        doc.list_strippedtext = reduce(lambda data, func: func(data), chain, doc.text)
    bow = createBOW(documents)  
"
Pythonic way to parse preflib Orders with Ties files,">>> [tuple(x) if isinstance(x, set) else (x,) for x in literal_eval(s)]
[(1,), (2,), (3, 4, 5), (6,)]
"
XML parsing with XMLtree or MINIDOM,"from xml.dom import minidom

xmldoc = minidom.parse('file.xml')
nodes = xmldoc.getElementsByTagName('node')

for node in nodes:
    node_id = node.attributes['id'].value
    for ngh in node.getElementsByTagName('ngh'):
        ngh_id = ngh.attributes['id'].value
        ngh_text = ngh.firstChild.nodeValue

        print node_id, ngh_id, ngh_text
"
Pythonic way to copy a key/value from one dict to another,">>> d1 = [{'name': 'john', 'uid': 'ax01', 'phone': '555-555-5555'},
...     {'name': 'jane', 'uid': 'ax02', 'phone': '555-555-5555'},
...     {'name': 'jimmy', 'uid': 'ax03', 'phone': '555-555-5555'}]
>>> d2 = [{'uid': 'ax01', 'orderid': '9999', 'note': 'testing this'},
...       {'uid': 'ax02', 'orderid': '6666', 'note': 'testing this'},
...       {'uid': 'ax03', 'orderid': '7777', 'note': 'testing this'}]
>>> uid_to_orderid = {d['uid']: d['orderid'] for d in d2}
>>> [dict(d, orderid=uid_to_orderid[d['uid']]) for d in d1]
[{'orderid': '9999', 'phone': '555-555-5555', 'name': 'john', 'uid': 'ax01'}, {'orderid': '6666', 'phone': '555-555-5555', 'name': 'jane', 'uid': 'ax02'}, {'orderid': '7777', 'phone': '555-555-5555', 'name': 'jimmy', 'uid': 'ax03'}]
"
wanting to add an age gate to my quiz,"play_again = True
while play_again:
    score = 0
    counter = 0

    #intro and instruction
    print (""""""Welcome to the translation quiz"""""")
    print(""""""You will be ask a series of questions and have 2 tries per questions
    If you get the correct answer you will get one point, half a point for getting it
    your second try and zero points if you get it wrong twice.
    GOOD LUCK!!! """""")

    age = int(input(""Please enter your age: ""))
    for question, options, correct in question_list:
        if counter == 5 and age <= 5:
            break
        else:
            print(question)
            print(options)
            ans = input(""Hit 'a', 'b', 'c' or 'd' for your answer\n"")
            if ans.lower() == correct:
                    print (""Correct\n"")
                    score += 1
            else:
                    print(""Wrong. Try again.\n"")
                    ans = input(""Hit 'a', 'b', 'c' or 'd' for your answer\n"")
                    if ans.lower() == correct:
                        print (""Correct\n"")
                        score += 0.5
                    else:
                        print(""Wrong. You ran out of attempts\n"")

        counter += 1


    print (""Your score was"", str(score) + '/' + str(counter))


    response = input(""Do you want to play again (y/n)?"").strip().lower()
    if response not in ('', 'y', 'yes'):
        play_again = False
"
Checking if for-loop variable resides at two indexes of a list,">>> c = 'Long string'
>>> d = 'Long string'
>>> c is d
False
>>> c = intern(c)
>>> d = intern(d)
>>> c is d
True
"
Python regex format,"import re

print """"""\n----------------------------------------
WANTED
('1234',   '0040_rev_2_1')
('1122Ae', '1150_rev2_1')
('0124e',  '50')
('1980',   '2234a_2')
('5098',   '2270_2_1')
('7659Ae', '1450sp_rev_2_1')""""""
print '----------- eyquem ----------------------'
ri = re.compile('^\D+'
                '(\d{4}[a-zA-Z]{0,3})'
                '[_-]+'
                '(.+?)'
                '(?:[_-]+NC.*)?$',
                re.MULTILINE)

for match in ri.findall(inputtext):
    print match

print '----------- Martijn ----------------------'
ro     = re.compile(
              r""""""
              ([0-9]{4}
              [A-Z]{0,3})
              [_-]{1,3}
              ([0-9]{2,4}
              [0-9A-Z_-]{0,16}?)
              (?:[-_]NC)?
              """""",
              re.IGNORECASE | re.VERBOSE)

for match in ro.findall(inputtext):
    print match
"
Subtract transpose from a matrix but keep the original diagonal,">>> m = (mat - mat.T)
>>> np.fill_diagonal(m, mat.diagonal())
>>> m
array([[ 69,  -4,  56],
       [  4,  17, -39],
       [-56,  39,  39]])
"
how to transfer an numpy array into another array,"array_collect = np.array([[25.,50.,25.,25.,50.],[1.,1.,1.,1.,1.]])
array_a = np.array([[2.,5.,2.,2.,5.],[1.,1.,1.,1.,1.]])


array_collect=np.vstack((array_collect,array_a))
"
"Injecting ""global imports"" into Python functions","get_average(lists, average=pkg1.average, get_lengths=pkg2.get_lengths):
    return average(*get_lengths(*lists))

print get_average(([1,2], [10, 4, 5, 6]))
print get_average(([1,2], [10, 4, 5, 6]), get_lengths=adjusted_length)
"
How do I used 2 quotes in os.system? PYTHON,"subprocess.check_call(['ls', 'some directory with spaces in'])
"
Python Challenge #3: Loop stops way too early,"import re
text = """"""kAewtloYgcFQaJNhHVGxXDiQmzjfcpYbzxlWrVcqsmUbCunkfxZWDZjUZMiGqhRRiUvGmYmvnJ""""""
print(re.search(r""[A-Z]{3}[a-z][A-Z]{3}"", text).group(0))
"
Python - unpack struct into multiple tuples,"import struct
import itertools as IT

def unpack_formats(fmts, data):
    data = iter(data)
    return [struct.unpack(fmt, ''.join(IT.islice(data, struct.calcsize(fmt))))
            for fmt in fmts]

data = struct.pack('<?3h3h', True, 1,2,3,4,5,6)
fmts = ('<?', '<3h', '<3h')
(is_enabled,), cmd_speed, tach_speed = unpack_formats(fmts, data)
print(is_enabled, cmd_speed, tach_speed)
"
How to slice and extend a 2D numpy array?,"q=array([[1, 2, 3, 4, 5, 6,],
         [7, 8, 9, 10, 11, 12]])
r=q.T.reshape(-1,2,2)
s=r.swapaxes(1,2)
t=s.reshape(-1,2)
"
Recursive function using lambda expression,"def repeat3(fn, n, x):
    if n == 1:
        return fn(x)
    else:
        return fn(repeat3(fn, n-1, x))

def repeat(fn, n):
    return functools.partial(repeat3, fn, n)
"
String formating in wx.ListBox,"index=[1,2,3,4]
text=['animal','gv','asdfasdfasd','adfasdfasdf']
size=['1kb','2kb','3kb','4kb']
displaylist=[]

for i in zip(index,text,size):
    s=""""
    for j in range(0,3):
        s +='{0:{fill}{align}16}'.format(i[j], fill=' ', align='<')

    print s
    displaylist.append(s)

for i in displaylist:
    print i
"
How do i speed up this piece of code?,"def assemble_fast1(x, n):
    res = list(x)
    while len(res) <= n:
        res.extend(['01'[c=='0'] for c in res])
    return ''.join(res)
"
convert strings from special char to no special char,">>> import re
>>> def fix_id(s, split=re.compile('[^a-zA-Z0-9]+|^[0-9]+').split):
...     result = ''.join(x.capitalize() for x in split(s))
...     if not result:
...         raise ValueError('Invalid ID (empty after edits)')
...     return result
... 
>>> fix_id(""Test with-name and_underscore"")
'TestWithNameAndUnderscore'
>>> fix_id(""123 Test 456 with-name and_underscore 789"")
'Test456WithNameAndUnderscore789'
>>> fix_id(""Thisshouldbeunmolested"")
'Thisshouldbeunmolested'
>>> fix_id('123')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin>"", line 4, in fix_id
ValueError: Invalid ID (empty after edits)
"
Find matching values in a list of lists using python,"list3 = [e for e in list2 if e[0] in list1]
"
Extract items of integers from a regularly spaced list in Python,">>> lis = [[0, 3], [1, 2], [2, 1], [3, 0]]
>>> [""x"" + """".join(map(str,x))  for x in lis]
['x03', 'x12', 'x21', 'x30']

>>> lis = [[0, 0, 3], [0, 1, 2], [0, 2, 1], [0, 3, 0], [1, 0, 2], [1, 1, 1], [1, 2, 0], [2, 0, 1], [2, 1, 0], [3, 0, 0]]
>>> [""x"" + """".join(map(str,x))  for x in lis]
['x003', 'x012', 'x021', 'x030', 'x102', 'x111', 'x120', 'x201', 'x210', 'x300']
"
Search for few options in string (if .. in),"In [10]: st = ""foobar bar""   
In [11]: ""foo"" in st
Out[11]: True    
In [12]: ""foo"" in st.split()
Out[12]: False
"
Python - function to do string comparison,">>> ('a' or 'b' or 'c')
'a'
>>> ('b' or 'a' or 'c')
'b'
>>> ('' or '' or 'a')
'a'
>>> (0 or 0 or 1)
1
>>> (False or False or True)
True
"
Get text between two identical lines in Python,"with open(""in.txt"") as f:
    prev = """"
    for line in f:
        if not line.startswith(""!NAME:""):
            print(prev.rstrip())
            print(line.rstrip())
            for line in f:
                if line.startswith(""!NAME:""):
                    prev = line
                    break
                print(line.rstrip())
                prev = line
        prev = line
"
Regex to match everything between (potentially multiple) pairs of tags,"import re
from functools import partial

text = u'''
[...]
'''
# The key is the external tag to extract
# The value a list of attributes whose content has to be replaced
sub_dict = {""RoomRatesWithoutServices"": ['CurrencyCode1', 'CurrencyCode2'],
            ""AnotherTag"": ['AnotherAttr']}

replacement = '_REPLACED_'


def closure(attr, replacement, m):
    attr_pattern = '(?<=(?:%s)="")[^""]+(?="")' % attr
    return re.sub(attr_pattern, replacement, m.group())

for ext_tag, attr_list in sub_dict.iteritems():
    attr = r""|"".join(attr_list)
    tag_pattern = r""(?s)<%s>.*?</%s>"" % (ext_tag, ext_tag)
    text = re.sub(tag_pattern, partial(closure, attr, replacement), text)

print text
"
Importing file as list. \n after every item,">>> a.rstrip()
'b'
"
How to differentiate between two different type of files in python 2.7?,"if filename.endswith('.json'):
    # it's json
else:
    # it's not 
"
Inquiry about removing duplicates,"b="""".join(a)  # doesn't do anything useful since `a` is already a string
lst=list(b)   # this is converting the string to a list of characters
"
Use loop to print an array,"for x in range(0,len(tuesday)):
 print("" -"",tuesday[x])
"
PYTHON parameter passing with lists,"if 1 <= List[listpos] < 35:
"
Taking each item in a list and writing them on a text file,"g = open('output.txt', 'w')
for num in numlist:
    g.write(""%f\n"" % num)
g.close()
"
Clearing Python lists,">>> a = [1, 2, 3]
>>> b = a
>>> del a[:]      # equivalent to   del a[0:len(a)]
>>> print(a)
[]
>>> print(b)
[]
>>> a is b
True
"
"Problem with 2D interpolation in SciPy, non-rectangular grid","from mpl_toolkits.mplot3d import Axes3D
Znew = griddata( R,T,Z, Rnew,Tnew )
ax = Axes3D(fig)
ax.plot_surface( Rnew * np.cos(Tnew), Rnew * np.sin(Tnew), Znew )
"
How to access private variable of Python module from class,"__a = 3

l = [__a]

class B:
    def __init__(self):
        self.a = l[0]
b = B()
"
How to sort in decreasing value first then increasing in second value,"print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))"
How to write pop(item) method for unsorted list,"def pop(self, index=None):
    if index is not None:
        #Do whatever your default behaviour should be
"
Verifying arithmetic sequence python,"np.all(np.diff(l, 2) == 0)
"
Pandas(Python) to_clipboard with comma decimal parameter,"class CommaFloatFormatter:
    def __mod__(self, x):
        return str(x).replace('.',',')

df.to_clipboard(float_format=CommaFloatFormatter())
"
run another .py file when condition is true,"if condition:
    import fileA as file
else:
    import fileB as file
file.foo()
"
how to print array as a table in python,"for line in Table:
    print ' '.join(map(str, line))
"
Numpy-y way to build a polynomial array from set of points,"import numpy as np
square_points = np.array([
    [37,  44],  # x1,y1
    [67,  74],  # x2,y2
    [97,  104], # x3,y3
    [247, 194], # x4,y4
    [157, 97],  # x5,y5
    ])
x, y = square_points.T

P = np.ones((5,4))
P[:,1] = x
P[:,2] = y
P[:,3] = x * y
"
Change default arguments of function in python,">>> def foo(x, y=5):
...    return x, y
...
>>> foo(10)
(10, 5)
>>> foo.func_code.co_varnames
('x', 'y')
>>> foo.func_defaults
(5,)
>>> foo.func_defaults = (7,)
>>> foo(10)
(10, 7)
"
Appending input from csv file to a dictionary including duplicate values for a unique key,"from collections import defaultdict
import csv

def test_results(filename):
    with open(filename, ""rU"") as f:
        reader = csv.reader(f, delimiter=""\t"")
        result = defaultdict(list)
        # Skip header row
        next(reader)
        for row in reader:
            result[row[0]].append(row[1:])
"
Converting a CSV file for Hydrologic Model,"import csv

with open('Results.csv', 'rb') as inf, open('SSF1.txt', 'wb') as outf:
    site_id = inf.next().rstrip()  # read past site id on first line
    HBVout = csv.DictReader(inf, skipinitialspace=True)  # will read header line
    ssf = csv.writer(outf, delimiter='\t')

    for data in HBVout:
        date = data['Date']  # convert date from YYYYMMDD to MM/DD/YYYY 
        date = '/'.join((date[4:6], date[6:8], date[0:4]))
        ssf.writerow([site_id, date, '00:00:00', data['Qsim']])
"
Python Inheritance : Return subclass,"class Parent(object):
    @classmethod
    def new(cls,*args,**kwargs):
        return cls(*args,**kwargs)
class Child(Parent): pass

p=Parent()
p2=p.new()
assert isinstance(p2,Parent)
c=Child()
c2=c.new()
assert isinstance(c2,Child)
"
Python do a lookup between 2 dictionaries,"from collections import defaultdict
result = defaultdict(int)
for key, value in mydict.items():
    result[value] += mytb[key]
"
Why is my for loop skipping an element in my list?,"for i in range(len(l)):
    for k in range(i+1, len(l)):
        print(l[i], l[k])
"
Shell_NotifyIcon from RGB data,"def img_to_bitmap(image, pixel_value):
    hdc = win32gui.CreateCompatibleDC(0)
    dc = win32gui.GetDC(0)
    hbm = win32gui.CreateCompatibleBitmap(dc, size, size)
    hbm_save = win32gui.SelectObject(hdc, hbm)
    for x in range(size):
        for y in range(size):
            pixel = image.getpixel((x, y))
            v = pixel_value(pixel)
            win32gui.SetPixelV(hdc, x, y, v)
    win32gui.SelectObject(hdc, hbm_save)
    win32gui.ReleaseDC(self.hwnd, hdc)
    win32gui.ReleaseDC(self.hwnd, dc)
    return hbm
"
Working with tuples and dictionaries,"for i in dict:
    # i is now equal to (3, 13), or (11, 4) etc
    x, y = i
"
Rewind the file pointer to the beginning of the previous line,"
import itertools as IT
import csv

inFile = 'curious.dat'
outFile = 'curious.out'

def mykey(row):
    return (row['mrn'], row['specimen_id'], row['lab_num'])

fieldnames = 'mrn specimen_id date    lab_num Bilirubin   Lipase  Calcium Magnesium   Phosphate'.split()

with open(inFile, 'rb') as ifd:
    reader = csv.DictReader(ifd, delimiter = '\t')
    with open(outFile, 'wb') as ofd:
        writer = csv.DictWriter(
            ofd, fieldnames, delimiter = '\t', lineterminator = '\n', )
        writer.writeheader()
        for key, group in IT.groupby(reader, key = mykey):
            new = {}
            row = next(group)
            for key in ('mrn', 'specimen_id', 'date', 'lab_num'):
                new[key] = row[key]
                new[row['labtest']] = row['result_val']                
            for row in group:
                new[row['labtest']] = row['result_val']
            writer.writerow(new)
"
using python itertools to generate custom iteration,"from itertools import product, chain, imap

def all_prod(s):
    return imap(''.join, chain.from_iterable(product(s, repeat=i) for i in range(len(s)+1)))

print(list(all_prod('ABC')))

for s in all_prod('abc'):
    print(s)
"
Store a list (ArrayList?) of integers in python,"the_list=[] # create list
the_list.append(1) # add number
for x in the_list:
    print(x) # print number
the_list=[] # clear list
"
Compare two lists in python and print the output,"items = {item[4] for item in main_list}
for child in xml_data:
    value = child.get('value')
    if value in items:
        print(value)
"
Transpose multiple txt data files and import into excel or database,"files = [""file1.txt"", ""file2.txt"", ""file3.txt"", etc]
for each in  files:
    text=[]
    with open(str(each),'r') as f:
        for line in f:
            for word in line.split("": ""):
                text.append(word)

    sorted = [lst[i:i+2] for i in range(0, len(lst), 2)]

    with open('save_file.csv', 'a') as f:
        writer = csv.writer(f)
        writer.writerows([zip(*sorted)[1]])
"
Read multiple lines in a single excel cell using python,"import win32com.client as win32
excel = win32.gencache.EnsureDispatch('Excel.Application')

wb = excel.Workbooks.Open(r""E:\Python temp\example.xls"")
ws = wb.Worksheets(""Sheet 1"")
print ws.Range(""A1"").Value.split('\n')
excel.Application.Quit()
"
Remove focus from Entry widget,"Option 1
from tkinter import *

top = Tk()

Entry(top, width=""20"").pack()
b = Frame(top, width=200, height=200, bg='blue')
g = Frame(top, width=200, height=200, bg='green')
y = Frame(top, width=200, height=200, bg='yellow')

b.pack()
g.pack()
y.pack()

b.bind(""<1>"", lambda event: b.focus_set())
g.bind(""<1>"", lambda event: g.focus_set())
y.bind(""<1>"", lambda event: y.focus_set())

top.mainloop()
"
ANSI graphic codes and Python,"import django.utils.termcolors as termcolors
red_hello = termcolors.colorize(""Hello"", fg='red') # '\x1b[31mHello\x1b[0m'
print red_hello
"
Removing Corresponding Entries from Two Numpy Arrays,"In [20]: m = np.ma.masked_invalid(flux)
In [21]: time2 = time[~m.mask]
In [22]: time2
Out[22]: array([  0.,   1.,   2.,   3.,   4.,   8.,   9.,  10.])

In [23]: flux2
Out[23]: array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])
In [22]: flux2 = flux[~m.mask]
"
Python/wxPython: How to reset wx.Choice to a default value,"    self.Color_Options.SetStringSelection(val)
"
"How to analyse bitmap image in python, using PIL?","import PIL

# The conversion should work equally with a bitmap
img = PIL.Image.open(""blackline.jpg"")
rgb_im = img.convert('RGB')

rgb_im.size
"
Check string for multiple occurrence of character in Python,">>> set('----') == set('-')
True
>>> set('--x') == set('-')
False
"
TensorFlow: Max of a tensor along an axis,"ind_max = tf.argmax(x, dimension=1)
y = tf.constant([[1, 2, 3], [6, 5, 4])

flat_y = tf.reshape(y, [-1])  # Reshape to a vector.

# N.B. Handles 2-D case only.
flat_ind_max = amax + tf.cast(tf.range(tf.shape(y)[0]) * tf.shape(y)[1], tf.int64)

y_ = tf.gather(flat_y, flat_ind_max)

print sess.run(y_) # ==> ""array([2, 6], dtype=int32)""
"
How to terminate process in python in certain situation,"import os
with open(""output.txt"",""w"") as f:
    f.write(""\n"".join(os.listdir(""C:\\"")))
"
getbbox method from python image library (PIL) not working,"import ImageOps
im=Image.open(""flowers_white_border.jpg"")
invert_im = ImageOps.invert(im)
print invert_im.getbbox()
# output:
(16, 16, 288, 216)
"
add leading zeros to a list of numbers in Python,">>> map(formatter, data)
['000001', '000010', '000313', '004000', '051234', '123456']
"
python attribute lookup without any descriptor magic?,">>> class C(object):
...     @property
...     def prop(self):
...         return 'abc'
... 
>>> C.prop
<property object at 0xb7eb0b6c>
>>> C.prop.fget
<function prop at 0xb7ea36f4>
"
Line numbers and Syntax Highlighting don't work on different tabs,"import tkinter as tk
import tkinter.ttk as ttk

class TextLineNumbers(tk.Canvas):
    def __init__(self, *args, **kwargs):
        tk.Canvas.__init__(self, *args, **kwargs)
        self.textwidget = None

    def attach(self, text_widget):
        self.textwidget = text_widget

    def redraw(self, *args):
        '''redraw line numbers'''
        self.delete(""all"")

        i = self.textwidget.index(""@0,0"")
        while True:
            dline= self.textwidget.dlineinfo(i)
            if dline is None: break
            y = dline[1]
            linenum = str(i).split(""."")[0]
            self.create_text(5,y,anchor=""nw"", text=linenum, font=(""Courier"", 9))
            i = self.textwidget.index(""%s+1line"" % i)

class CustomText(tk.Text): 
    def __init__(self, *args, **kwargs):
        tk.Text.__init__(self, *args, **kwargs)

        self.tk.eval('''
            proc widget_proxy {widget widget_command args} {

                # call the real tk widget command with the real args
                set result [uplevel [linsert $args 0 $widget_command]]

                # generate the event for certain types of commands
                if {([lindex $args 0] in {insert replace delete}) ||
                    ([lrange $args 0 2] == {mark set insert}) || 
                    ([lrange $args 0 1] == {xview moveto}) ||
                    ([lrange $args 0 1] == {xview scroll}) ||
                    ([lrange $args 0 1] == {yview moveto}) ||
                    ([lrange $args 0 1] == {yview scroll})} {

                    event generate  $widget <<Change>> -when tail
                }

                # return the result from the real widget command
                return $result
            }
            ''')
        self.tk.eval('''
            rename {widget} _{widget}
            interp alias {{}} ::{widget} {{}} widget_proxy {widget} _{widget}
        '''.format(widget=str(self)))

        self.comment = False

class Tab:
    def __init__(self, parent, filename):
        self.parent = parent
        self.filename = filename
        self.tab1 = ttk.Frame(parent)
        self.text = CustomText(self.tab1, bd=0, font=(""Courier"", 9))  

        self.vsb = tk.Scrollbar(self.tab1, orient=tk.VERTICAL)
        self.text.configure(yscrollcommand=self.vsb.set)
        self.vsb.configure(command=self.text.yview)

        self.linenumbers = TextLineNumbers(self.tab1, width=55)
        self.linenumbers.attach(self.text)

        self.vsb.pack(side=tk.RIGHT, fill=tk.Y)
        self.linenumbers.pack(side=""left"", fill=""y"")
        self.text.pack(side=""right"", fill=""both"", expand=True)

        parent.add(self.tab1, text=filename)

        self.text.bind(""<<Change>>"", self._on_change)
        self.text.bind(""<Configure>"", self._on_change)

    def _on_change(self, event):
        self.linenumbers.redraw()


class Window(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.fileName = ""Untitled Document""
        self.content = """"
        self.previousContent = """"
        self.language = ""Python""
        self.row = ""0""
        self.column = ""0""
        self.startCol = 0

        self.notebook = ttk.Notebook(self)
        self.tabs = []
        self.menubar()
        self.createtext()

    def createtext(self):
        self.notebook.pack(fill=tk.BOTH, expand=True)
        t = Tab(self.notebook, self.fileName)
        self.tabs.append(t)

    def addtab(self):
        t = Tab(self.notebook, self.fileName)
        self.tabs.append(t)

    def removetab(self):
        numberOfTabs = self.notebook.index(""end"")

        if numberOfTabs > 1:
            tabIndex = self.notebook.index(self.notebook.select())
            self.notebook.forget(tabIndex)
            del self.tabs[tabIndex]

    def menubar(self):
        self.menu = tk.Menu(self)
        self.master.config(menu=self.menu)

        self.fileMenu = tk.Menu(self.menu, font=(""Courier"", 9))
        self.fileMenu.add_command(label=""New Window"", command=self.addtab)
        self.fileMenu.add_command(label=""Close Window"", command=self.removetab)
        self.menu.add_cascade(label=""File"", menu=self.fileMenu)

if __name__ == ""__main__"":
    root = tk.Tk()
    root.title(""Window"")
    root.geometry(""1024x600"")
    window = Window(root).pack(side=""top"", fill=""both"", expand=True)
    root.mainloop()
"
Stripping content using regular expressions in python,">>>re.sub(""<.*?>"","""",""<h1>heading</h1>"")
 heading
"
"Duck-typable classes, ABC, iheritance, __new__",">>> import logging
>>> log = logging.getLogger('hello')
>>> vars(log)
{'name': 'hello', 'parent': <logging.RootLogger object at 0x17ce850>, 'handlers': [], 'level': 0, 'disabled': 0, 'manager': <logging.Manager object at 0x17ce910>, 'propagate': 1, 'filters': []}
>>> type(log)
<class 'logging.Logger'>
"
element-wise operations of matrix in python,"[[i * j for i, j in zip(*row)] for row in zip(matrix1, matrix2)]
"
Smart way to delete tuples,"index = next(i for i, (t1, t2) in enumerate(myTup) if t2 < threshold)
del myTup[index:]
"
how to have multirow cells in Python table,"import textwrap

class Table:

    def __init__(self,
                 contents,
                 wrap,
                 wrapAtWordEnd = True,
                 colDelim = ""|"",
                 rowDelim = ""-""):

        self.contents = contents
        self.wrap = wrap
        self.colDelim = colDelim
        self.wrapAtWordEnd = wrapAtWordEnd

        # Extra rowDelim characters where colDelim characters are
        p = len(self.colDelim) * (len(contents[0]) - 1)

        # Line gets too long for one concatenation
        self.rowDelim = self.colDelim
        self.rowDelim += rowDelim * (self.wrap * max([len(i) for i in l]) + p)
        self.rowDelim += self.colDelim + ""\n""

    def withoutTextWrap(self):

        string = self.rowDelim

        for row in self.contents:
            maxWrap = (max([len(i) for i in row]) // self.wrap) + 1
            for r in range(maxWrap):
                string += self.colDelim
                for column in row:
                    start = r * self.wrap
                    end = (r + 1) * self.wrap 
                    string += column[start : end].ljust(self.wrap)
                    string += self.colDelim
                string += ""\n""
            string += self.rowDelim

        return string

    def withTextWrap(self):

        print(self.wrap)

        string = self.rowDelim

        # Restructure to get textwrap.wrap output for each cell
        l = [[textwrap.wrap(col, self.wrap) for col in row] for row in self.contents]

        for row in l:
            for n in range(max([len(i) for i in row])):
                string += self.colDelim
                for col in row:
                    if n < len(col):
                        string += col[n].ljust(self.wrap)
                    else:
                        string += "" "" * self.wrap
                    string += self.colDelim
                string += ""\n""
            string += self.rowDelim

        return string

    def __str__(self):

        if self.wrapAtWordEnd:

            return self.withTextWrap() 

        else:

            return self.withoutTextWrap()

if __name__ == ""__main__"":

    l = [[""heading 1"", ""heading 2"", ""asdf""],
         [""some text"", ""some more text"", ""Lorem ipsum dolor sit amet.""],
         [""lots and lots and lots and lots and lots of text"", ""some more text"", ""foo""]]

    table = Table(l, 20, True)

    print(table)
"
Most efficient way to extract parts of one array based on another,"def get_waveforms_views(data, spiketimes, lookback=100, lookahead=100) :
    ret = []
    for j in spiketimes :
        if j < lookback or j + lookahead >= len(data) :
            ret.append(None)
        else :
            ret.append(data[j - lookback:j + lookahead])
    return ret
"
Running two methods (with arguments) simultaneously?,"Process(target=functools.partial(standard_download, link)).start()
"
Forcing compatibility of inherited types (Python),"class unique_collection(non_unique_collection):

    # ...

    def overlap(self, other):
        if not isinstance(other, unique_ranked_collection):
            raise TypeError('expected an unique_ranked_collection')
        return super(unique_collection, self).overlap(other)
"
Accessing function from class and from instance of this class,">>> class Descriptor(object):
...     def __get__(self, obj, type=None):
...         print '__get__(%r, %r)' % (obj, type)
...
>>> class A(object):
...     desc = Descriptor()
...
>>> A.desc
__get__(None, <class '__main__.A'>)
>>> A().desc
__get__(<__main__.A object at 0x020F5B50>, <class '__main__.A'>)
"
Speed up NumPy's where function," b=a[a>threshold]
"
solution to this recursive function questions?,"lets=("""", """", ""abc"", ""def"", ""ghi"", ""jkl"", ""mno"", ""pqrs"", ""tuv"", ""wxyz"")

def trans(pnum, res = """"):           # res is the current result (initially the empty string)
    if not pnum:
        yield res                    # phone number is empty string, so we're done, return res
    else:
        digit = pnum[0]              # get first digit
        try:
            repls = lets[int(digit)] # if it is an integer, get replacements
            if not repls:            # if replacements is an empty string,
                repls = digit        #    fall back to initial digit
        except ValueError:
            repls = digit            # not an integer  - fall back to initial character
        for i in repls:              # for every replacement character
            yield from trans(pnum[1:], res+i) # recursively process the rest of the phone number

for pnum in [""borla63"", ""h3llo""]:
    print(list(trans(pnum)))
"
"split on char, but leave that char - python","def splitOnChars(text, chars):
    answer = []
    start = 0
    for i,char in enumerate(text):
        if char in chars:
            answer.append(text[start:i+1])
            start = i+1
    answer.append(text[i+1:])
    return answer
"
Proper way to deal with string which looks like json object but it is wrapped with single quote,"def fix_json(string_):
    if string_[0] == string_[-1] == ""'"":
        return '""' + string_[1:-1] +'""'
    return string_
"
How to populate a list with items.count() from a queryset sorted by a datetime field,"cursor = connection.cursor()
cursor.execute(
     ""SELECT COUNT(0) FROM `mymodel_table` ""
     ""GROUP BY `mydatetimefield`;""
)
counts = cursor.fetchall()
"
Fast way to find lists contains two particular items?,"selection = [L for L in lists
             if x1 in L and x2 in L[L.index(x1)+1:]]
"
more efficient way to calculate distance in numpy?,"from numpy.core.umath_tests import inner1d
dist = inner1d(deltas, deltas)
"
How to crawl a specific value out of a HTML page with python HTMLParser,"from bs4 import BeautifulSoup
s = '''<html><body><div id=""pagecontent""><div id=""container""><div id=""content""><div id=""tab-description""><div id=""attributes"">
<div class=""attr"">
    <span class=""name"">Ugug</span>
    <span class=""value"">dfgd454</span>
</div>'''
soup = BeautifulSoup(s)
print soup.select('div > span.value')[0].text
"
Split by suffix with Python regular expression,"x='dord word'
import re
print re.split(r""d\b"",x)
"
How can I treat a section of a file as though it's a file itself?,"import os

class View:
    def __init__(self, f, offset, length):
        self.f = f
        self.f_offset = offset
        self.offset = 0
        self.length = length

    def seek(self, offset, whence=0):
        if whence == os.SEEK_SET:
            self.offset = offset
        elif whence == os.SEEK_CUR:
            self.offset += offset
        elif whence == os.SEEK_END:
            self.offset = self.length+offset
        else:
            # Other values of whence should raise an IOError
            return self.f.seek(offset, whence)
        return self.f.seek(self.offset+self.f_offset, os.SEEK_SET)

    def tell(self):
        return self.offset

    def read(self, size=-1):
        self.seek(self.offset)
        if size<0:
            size = self.length-self.offset
        size = max(0, min(size, self.length-self.offset))
        self.offset += size
        return self.f.read(size)

if __name__ == ""__main__"":
    f = open('test.txt', 'r')

    views = []
    offsets = [i*11 for i in range(10)]

    for o in offsets:
        f.seek(o+1)
        length = int(f.read(1))
        views.append(View(f, o+2, length))

    f.seek(0)

    completes = {}
    for v in views:
        completes[v.f_offset] = v.read()
        v.seek(0)

    import collections
    strs = collections.defaultdict(str)
    for i in range(3):
        for v in views:
            strs[v.f_offset] += v.read(3)
    strs = dict(strs) # We want it to raise KeyErrors after that.

    for offset, s in completes.iteritems():
        print offset, strs[offset], completes[offset]
        assert strs[offset] == completes[offset], ""Something went wrong!""
"
Python: Storing data in a text file and appending particular/individual lines,"newline = (oldline+"" ""+(str(score)))
"
Python - How to transform a list of tuple to a tuple,">>> tuple(chain.from_iterable(a))
(34.2424, -64.2344, 76.3534, 45.2344)
"
How to write a simple lexer/parser for user input commands in Python?,"from pyparsing import *
ParserElement.enablePackrat()
import string

name = Word(alphanums)

filter = (Combine(oneOf(list(string.ascii_lowercase)) + Optional('~')) +
          dblQuotedString.setParseAction(removeQuotes))
# convert parsed filter to dict
filter.setParseAction(lambda t:{t[0]:t[1]})

expr = operatorPrecedence(filter | name, 
            [
            (oneOf('. % -'), 2, opAssoc.LEFT),
            ('+', 2, opAssoc.LEFT),
            ])

test = r'foo . bar - (a""hello \""world\"""" % (b~""foo"" + bar) . (fooZ.(bar2+(c""foo bar"".d""bar foo""))))'

print expr.parseString(test, parseAll=True).asList()
"
How does the axis parameter from NumPy work?,"e.sum(axis=0).shape == (2, 2)
e.sum(axis=1).shape == (3, 2)
e.sum(axis=2).shape == (3, 2)
"
Colouring the area under curve of plotted list,"where = np.zeros(len(a),dtype=bool)
where[3:21] = True
plt.fill_between(np.arange(len(a)),a,where=where)
"
How to treat a hex as string?,"'{:#x}'.format(0x61cc1000)
"
How do I create a dictionary where I add points to names form a text file?,"from operator import itemgetter
print(sorted(final_list.items(),key=itemgetter(1),reverse=True))
"
Python - Is a dictionary slow to find frequency of each character?,"
Previous comparison:
* python (dict) : 0.5  seconds
* python (list) : 0.5  (ascii) (0.2 if read whole file in memory)
* perl          : 0.5
* python (numpy): 0.07 
* c++           : 0.05
* c             : 0.008 (ascii)
"
Read data with NAs into python and calculate mean row-wise,">>> np.nanmean(arr, axis=1)
array([ 5.82569998,  4.98298407,  1.        ])
"
Frame list with Tkinter and python,"frameGroup = []

for i in range(2):

    frameGroup.append([None, None, None])
    frameGroup[i][0] = Frame(root)
    frameGroup[i][1] = Frame(frameGroup[i][0])
    frameGroup[i][2] = Frame(frameGroup[i][0])

    #add some widgets to the frames

    frameGroup[i][0].grid(row=i, column=0)
    frameGroup[i][1].grid(row=0, column=0)
    frameGroup[i][2].grid(row=1, column=0)
"
python list.pop() modifies original list (not just copy),"original = [[1, 2], [3, 4]]
shallow = original[:]
deep = deepcopy(original)

print([id(l) for l in original])
# [2122937089096, 2122937087880]

print([id(l) for l in shallow])
# [2122937089096, 2122937087880]

print([id(l) for l in deep])
# [2122937088968, 2122937089672]
"
Recursion in function causing return variable to equal 'None',"def getKey():
    print(""Enter the key you want to use to decrypt/encrypt the message"")
    while True:
        key = int(input()) # key input
        if key >= 1 and key <= 26: #checking if key is in between range
            return key #giving back the key
        else: # this should run whenever the input is invalid
            print (""The key must be inbetween 1 and 26"")
            # Don't stop the loop.  Just try again.
"
Adding 2 ascii converted characters using nested loops in Python 3.2,"input1 = input(""Enter word: "")
input2 = ""goodbye""
# make input1 at least as long as input2
while len(input1) <= len(input2):
    input1 += input1
for x, y in zip(input1, input2):
    total = ord(x) + ord(y)
    print(total)
"
Sum of values across all nested dictionaries in python,"sum(sum(c.values()) for c in numbers.values())
"
Need to add all the integers between 2 other integers,"for i in range(num1, num2 + 1):
        print(i)
"
"Python: Trying to create the equivalent of and(or(value,value,value))","#Define Key Words
##################################
#System Requirements Definitions
sysReq1 = set(['system', 'requirements'])
sysReq2 = [set(['can'])
          ,set(['handle', 'play', 'run'])
          ,set(['netbook', 'notebook', 'pc', 'mac', 'macbook', 'laptop', 'comp', 'computer'])
          ]
def test(testString):
    if not testString.endswith('?'):
        return False

    lowerTestString = set(testString.rstrip('?').lower().split())
    return  lowerTestString.issuperset(sysReq1) or all(not lowerTestString.isdisjoint(i) for i in sysReq2)
#System Requirements Response
sysReqResponse = 'PROGRESS'
##################################
testString1 = ""i hate this""
#intended result for 1: nothing
testString2 = ""is that real?""
#intended result for 2: nothing
testString3 = ""What are the system requirements?""
#intended result for 3: 'PROGRESS'
testString4 = ""Can my PC handle it?""
#intended result for 4: 'PROGRESS'
print testString1
if test(testString1):
    print sysReqResponse
print testString2
if test(testString2):
    print sysReqResponse
print testString3
if test(testString3):
    print sysReqResponse
print testString4
if test(testString4):
    print sysReqResponse
"
How can I type-check variables in Python?,"type(n) is int
"
how to import dates in python,"data.ts_placed = pd.to_datetime(data.ts_placed)
if(not isinstance(data.ts_placed[0], pd.lib.Timestamp)):
    print 'Dates not converted correctly'
"
Python sum of ASCII values of all characters in a string,"sum(map(ord, string))"
How to import a module given the full path?,"import importlib.util
spec = importlib.util.spec_from_file_location(""module.name"", ""/path/to/file.py"")
foo = importlib.util.module_from_spec(spec)
spec.loader.exec_module(foo)
foo.MyClass()
"
python ascii to unicode conversion,"from io import open

with open(filename, 'r', encoding=""unicode_escape"") as inputfile:
    for line in inputfile:
        print(inputfile)
"
How can I list function calls by using exec in python?,"class Printer(dict):
    def __missing__(self, key):
        def wrapped(*args, **kwargs):
            print('{} called: args={}, kwargs={}'.format(key, args, kwargs))
        return wrapped

code = '''
foo()
bar(1, 2, baz=3)
'''

exec(code, Printer())
"
Python string formatting: % vs concatenation,"errorString = ""Exception occurred ({}) while executing '{}': {}"".format(
    e.__class__.__name__, task.name, str(e)
)
"
Call a method on the parent class of an initialized object,"import random

def any_intro(self):
    cls = random.choice(type(self).__mro__[:-1])
    return cls.intro(self)
"
Numpy array with different datatypes behaves strange,"[[  1.28000000e+02   0.00000000e+00   8.33333333e-02]
 [  1.28000000e+02   0.00000000e+00   4.16666667e-02]]
"
How to parse a zcat output,"a = zcat_output.split('\n\n')
a.pop(len(a)-1)
c = dict()
for x in [x.splitlines() for x in a]:
    pkg = """"
    for y in [y for y in x if y.startswith('Package:') or y.startswith('Version:')]:
        z = y.split(':')
        if z[0] == 'Package':
            pkg = z[1].strip()
        else:
            c[pkg] = {z[0]: z[1].strip()}

print c.get('whois')
"
Setting column equal to value depending on another column pandas,"d = {'NONANE':9, 'OCTANE':8, 'HEPTANE':7, 'HEXANE':6}
df['num'] = df['solvent'].map(d)
"
Apache Spark CombineByKey with list of elements in Python,"from collections import Counter

def merge_value(acc, x):
    acc.update(x)
    return acc

def merge_combiners(acc1, acc2):
    acc1.update(acc2)
    return acc1

aggregated_counts_ = (data
    .combineByKey(Counter, merge_value, merge_combiners)
    .mapValues(lambda cnt: (cnt, sum(cnt.values()))))

aggregated_counts_.collect()
## [('a', (Counter({'u': 1, 'v': 1}), 2)), ('b', (Counter({'w': 1, 'x': 2}), 3))]
"
Matching multiple regex patterns with the alternation operator?,"re.findall('\\(.+?\\)|\\w', '(zyx)bc')"
Crawling Unix for All .php Files in Specific Subdirectories,"for root, dirnames, filenames in os.walk('./'):
    if not fnmatch.fnmatch(root, './*/www/[pP]3*'):
        continue    
    for filename in fnmatch.filter(filenames, '*.php'):
            matches.append(os.path.join(root, filename))
"
Can AppEngine *pull* in data over 32MB?,"def get(self):
    # Work with GAE's 32MB-per-request limit, set to 30MB to stay under
    RANGE = 30*(1024**2)

    url = self.request.get('url')
    request = urllib2.Request(url)

    request.get_method = lambda: 'HEAD'
    response = urllib2.urlopen(request)
    info = response.info()
    logging.debug('Downloading {}B video'.format(info.get('Content-length')))

    request.get_method = lambda: 'GET'
    _buffer = ''
    start = 0
    while True:
        end = start + RANGE
        request.headers['Range'] = 'bytes={}-{}'.format(start, end)
        logging.debug('Buffering bytes {} to {}'.format(start, end))
        _bytes = urllib2.urlopen(request, timeout=60).read()
        _buffer += _bytes
        logging.info('Buffered bytes {} to {}'.format(start, end))

        # If there are less bytes than requested then all bytes
        # have been received, break to avoid an HTTP 416
        if len(_bytes) < (end - start):
            break

        start += (RANGE + 1)

    filename = '/MY-BUCKET/video/test_large.mp4'
    with gcs.open(filename, 'w', content_type='video/mp4') as f:
        f.write(_buffer)
    logging.info('Wrote {}B video to GCS'.format(len(_buffer)))
"
"Read a file, and print a specific line of it in Python","file = open('c:\\1.txt','r')
searchLetter = ""A""
for line in file.readlines():
    if searchLetter in line:
        positionOfA = line.index(searchLetter)
        if line[positionOfA+1].isdigit() & line[positionOfA+2].isdigit():
            print searchLetter+line[positionOfA+1]+line[positionOfA+2]
"
Terminating raw_input() if other text displays,"from Tkinter import *
root = Tk()
topframe=Frame(root)
bottomframe=Frame(root)
bottomframe.pack(side=BOTTOM,fill=X)
topframe.pack(side=TOP,fill=BOTH)
scrollbar = Scrollbar(topframe)
scrollbar.pack(side=RIGHT,fill=Y)
text = Text(topframe,yscrollcommand=scrollbar.set)
text.pack(side=LEFT,fill=BOTH)
scrollbar.config(command=text.yview)
text.config(state=DISABLED)
v = StringVar()
e = Entry(bottomframe,textvariable=v)
def submit():
    command = v.get()
    v.set('')
    #your input handling code goes here.
    wprint(command)
    #end your input handling
e.bind('<Return>',submit)
button=Button(bottomframe,text='RUN',command=submit)
button.pack(side=RIGHT)
e.pack(expand=True,side=LEFT,fill=X)
def wprint(obj):
    text.config(state=NORMAL)
    text.insert(END,str(obj)+'\n')
    text.config(state=DISABLED)
root.mainloop()
"
How to emulate 4-bit integer in Python 3?,"from functools import wraps

class Int4(int):
    def __new__(cls, i):
        return super(Int4, cls).__new__(cls, i & 0xf)

def add_special_method(cls, name):
    mname = '__{}__'.format(name)
    @wraps(getattr(cls, mname))
    def convert_to_cls(self, other):
        bound_original = getattr(super(cls, self), mname)
        return type(self)(bound_original(other))
    setattr(cls, mname, convert_to_cls)

for m in ('add', 'sub', 'mul', 'floordiv', 'mod', 'pow',
          'lshift', 'rshift', 'and', 'xor', 'or'):
    add_special_method(Int4, m)
    add_special_method(Int4, 'r' + m)  # reverse operation
"
Converting a nested tuples into nested dictionaries,"dic2 = {key: {k: v for sublist in value for k, v in sublist} for key, value in dic1.items()}
"
Saving DataFrame names as .csv file names in Pandas,"In [5]:

blue.name = 'blue'
blue.csv_path = 'blue.csv'
red.name = 'red'
red.csv_path = 'red.csv'
df_list = [blue, red]
for df in df_list:
    print(df.name)
    print(df.csv_path)
    df.to_csv(df.csv_path)
blue
blue.csv
red
red.csv
"
Pandas: Reconstruct dataframe from strings of key:value pairs,"list(set( val for dic in d for val in dic.keys()))
"
"Discarding the '\n' symbol when reading a file, python","with open('data.txt') as infp:
   for line in infp:
       line = line.rstrip()
       # rest of processing
"
How to detect the nearest square to the image center points?,"import
import cv2
img = cv2.imread('L3h9H.png')
"
creating n nested loops from a dictionary of lists,"from itertools import product

# don't shadow the built-in name `dict`
d = {'key1': ['str0','str1','str2','strn'], 'key2': ['apples','bananas','mangos'], 'key3': ['spam','eggs','more spam']}

# dicts aren't sorted, but you seem to want key1 -> key2 -> key3 order, so 
# let's get a sorted copy of the keys
keys = sorted(d.keys())
# and then get the values in the same order
values = [d[key] for key in keys]

# perform the Cartesian product
# product(*values) means product(values[0], values[1], values[2], ...)
results = product(*values)

# each `result` is something like ('str0', 'apples', 'spam')
for result in results:
    # pair up each entry in `result` with its corresponding key
    # So, zip(('key1', 'key2', 'key3'), ('str0', 'apples', 'spam'))
    # yields (('key1', 'str0'), ('key2', 'apples'), ('key3', 'spam'))
    # schematically speaking, anyway
    for key, thing in zip(keys, result):
        print key + '.' + thing, 
    print
"
extracting string using regular expression,"input= """"""\
href=""http://www.sciencedirect.com/science/article/pii/S0167923609002097"" onmousedown=""return scife_clk(this.href,'','res','2')"">Using <b>text mining </b>and sentiment analysis for online forums hotspot detection and forecast</a></h3><div class=""gs_a"">N Li, <a href=""/citations?
href=""http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3309177/"" onmousedown=""return scife_clk(this.href,'ggp','res','1')"">How to link ontologies and protein–protein interactions to literature: <b>text</b>-<b>mining </b>approaches and the BioCreative experience</a></h3><div class=""gs_a""><a href=""/citations?
href=""http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3309177/"" onmousedown=""return scife_clk(this.href,'gga','gga','1')""><span class=""gs_ggsL""><span class=gs_ctg2>[HTML]</span> from nih.gov</span><span class=""gs_ggsS"">nih.gov <span """"""

import re

for line in input.splitlines():
    m=re.search(r'onmousedown=.*?"">(.*)</a>',line)
    if m:
        print(m.group(1))
"
"Interleaving two numpy index arrays, one item from each array","ab = np.hstack((a, b))
s = np.argsort(ab)
t = np.hstack((np.zeros_like(a), np.ones_like(b)))[s]
ab[s][np.concatenate(([True], t[1:] != t[:-1]))]
array([ 1,  5,  7, 13, 17, 19])
"
Assigning columns to a pandas dataframe constructed from a string,"import pandas
from StringIO import StringIO

pathToFile = 'test/file.txt'
f = open(pathToFile)
s = StringIO()
cur_ID = None
for ln in f:
    #replace multiply spaces to one ;
    ln = ';'.join(ln.split())
    if  ln.startswith('BD;'):
        ln = ln.replace('BD;', 'BD ') 
    if  (ln.startswith('19')) | (ln.startswith('20')):
        continue;        
    s.write(ln + '\n')
s.seek(0)

df = pandas.read_csv(s, skiprows=3, sep=';', names=['0','1','2','3','TOT'])
"
sort list of lists by specific index of inner list,">>> l1 = [['test', 'hello', '60,'], ['why', 'to', '500,'], ['my', 'choice', '20,']]
>>> sorted(l1, key=lambda l: int(l[2].rstrip(',')))
[['my', 'choice', '20,'], ['test', 'hello', '60,'], ['why', 'to', '500,']]
"
Find closest value in array column 4 where array column 1 and 2 match data of another array. Create a new array extracting the results,"from pylab import *
a=array(rand(10000,4))*[[20,20,200,1]] # data in a 20*20*200 space
a[:,:2] //= 1 # int coords for X,Y
bj=a.T[0]+1j*a.T[1] # trick for sorting on 2 cols.
b=np.unique(bj)
ib=bj.argsort() #  indices for sorting /X,Y
splits=bj[ib].searchsorted(b) # indices for splitting.
xy=np.split(a[ib],splits)  # list of subsets of data grouped by (x,y)
c=array([s[abs(s.T[2]-100).argmin()] for s in xy[1:]]) #locate the good point in each list 
print(c[:10])
"
Typed input in python?,"print [t(tok) for (t, tok) in zip((int, str, int), raw_input().split())]
"
Python 2d grid : Assigning values to coordinates in the grid,"from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.gca(projection='3d')
X = np.arange(-5, 5, 0.25)
Y = np.arange(-5, 5, 0.25)
X, Y = np.meshgrid(X, Y)
R = np.sqrt(X**2 + Y**2)
Z = np.sin(R)
surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,
                       linewidth=0, antialiased=False)
ax.set_zlim(-1.01, 1.01)

ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))

fig.colorbar(surf, shrink=0.5, aspect=5)

plt.show()
"
python function that returns a function from list of functions,"func_dict = {}

def collected_func(func):
    func_dict[func.__name__] = func
    return func
"
what is the right way to treat Python argparse.Namespace() as a dictionary?,">>> d['baz'] = 'store me'
>>> args.baz
'store me'
"
"Python, best way to write a sum of two for loops","try:
   x=sum(similarity(i,j) for i in a for j in b)
except TypeError:
   x=0
"
How to modify a Numpy array with conditional and function,"flat[(flat >= 0.2) & (flat < 0.7)] = ...
"
How to calculate numbers from loop?,"zeros_count = 0
for i in myNum:
    divideNum = int(myNum) % int(i)
    print(divideNum)
    if divideNum == 0:
        # value is 0, add 1 to the count
        zeros_count = zeros_count + 1
print(""number of zeros: %d"" % zeros_count)
"
Appending numbers into a list in reverse,"items[0][1].extend([i for i in reversed(range(1, num + 1))])
"
trim whitespace,s.strip()
How can i change a string that counts how many letters in a sentence into counting the occurence of one letter?,">>> sentence = 'The cat sat on the mat.'
>>> sentence.count('a')
3
"
How to parse all children and grandchildren elements from a current node using xml.etree.ElementTree in python,">>> for element in root:
...     print 'parent: ', element.tag, '|', element.attrib
...     print element.text
...     for all_tags in element.findall('.//'):
...         print 'child: ', all_tags.tag, '|', all_tags.attrib
...         if all_tags.text:
...             print all_tags.text, '|', all_tags.tail
... 
parent:  p | {'num': 'p-0003'}

Protein kinases are involved in the signal transduction pathways linking growth factors, hormones and other cell regulation molecules to cell growth, survival and metabolism under both normal and pathological conditions. One such protein kinase, protein kinase B (also known as Akt), is a serine/threonine kinase that plays a central role in promoting the proliferation and survival of a wide range of cell types, thereby protecting cells from apoptosis (programmed cell death) (Khwaja,

child:  i | {}
Nature | 
33-34 (1990)). Three members of the Akt/PKB subfamily of second-messenger regulated serine/threonine protein kinases have been identified and are termed Akt1/PKBα, Akt2/PKBβ, and Akt3/PKBγ. A number of proteins involved in cell proliferation and survival have been described as substrates of Akt in cells. Two examples of such substrates include glycogen synthase kinase-3 (GSK3) and Forkhead transcription factors (FKs). See Brazil and Hemmings,

child:  i | {}
Trends in Biochemical Sciences | 
26, 675-664.

parent:  p | {'num': 'p-0004'}

A number of protein kinases and phosphatases regulate the activity of Akt; For instance, activation of Akt is mediated by phosphatidylinositol 3-kinase (PI3-K), which initiates the binding of second messenger phospholipids to the pleckstrin homology (PH) binding domain of Akt. The binding anchors Akt to plasma membrane and results in phosphorylation and activation of the enzyme. Amplifications of the catalytic subunit of PI3-K, p110α, or mutations in the PI3-K regulatory subunit, p85α, lead to activation of Akt in several types of human cancer. (Vivanco and Sawyers,

child:  i | {}
Nature Reviews in Cancer | 
(2002) 2: 489-501.

parent:  p | {'num': 'p-0005'}

The tumor suppressor, PTEN, is a critical negative regulator of Akt activation by PI3-K. Myers et al.
"
Python 3 installation on windows running from command line,"""C:\path to\Python 3.X\python.exe"" %*
"
Django - determining if geographic coordinates are inside of an circle,"from django.db import connection
cursor = connection.cursor()
cursor.execute( query )
rows = cursor.fetchall()
"
Reducing pandas series with multiple nan values to a set gives multiple nan values,"In [160]: [type(item) for item in pd.Series(l).tolist()]
Out[160]: [numpy.float64, numpy.float64, numpy.float64, numpy.float64]
"
Remove empty element but keep zeros as values,">>> lst2 = [x for x in lst if x != '']
>>> lst2
[-1.33, -1.33, -3.95, 0, -2.66, 1.41, 0, 0, 1.4, 1.37, 0]
>>>
"
Adding Lists Elements to 'Mega List',">>> ww2 = []
>>> for mp in mayorPowers:
...     ww2.extend(mp)
...
>>> ww2
['germany', 'italy', 'japan', 'russia', 'uk', 'us']
"
How to calculate percentage with Pandas' DataFrame,">>> p = pd.DataFrame(a.items(), columns=['item', 'score'])
>>> p['perc'] = p['score']/10
>>> p
Out[370]: 
     item  score  perc
0  Test 2      1   0.1
1  Test 3      1   0.1
2  Test 1      4   0.4
3  Test 4      9   0.9
"
mechanize - how to select links based on adjacent tags?,"from bs4 import BeautifulSoup

# Read the input file. I am assuming the above html is part of test.html
html = """"
with open('test.html', 'r') as htmlfile:
    for line in htmlfile:
        html += line
htmlfile.close()

bs = BeautifulSoup(html)
links_to_follow = []


ul = bs.find('ul')
for li in ul.find_all('li'):
    height = int(li.find('div').get_text().strip().split()[1])
    price = int(li.find('div').get_text().strip().split()[3])
    if height > 10 and price > 20: # I am assuming this to be the criteria
        links_to_follow.append(li.find('a').get('href'))

print links_to_follow
"
making arrays/lists of selected items from a dictionary in python,"zip(*[(k,v['Eng']) for k,v in data.iteritems() if not 'Bio' in v and 'Eng' in v])
"
Python avoiding lambda for key which needs two callables (function composition),"def compose(f1, f2):
    def composition(*args, **kwargs):
        return f1(f2(*args, **kwargs))
    return composition

def compose_many(*funcs):
    return reduce(compose, funcs)
"
Sorting function works differently when imported rather then called in script,"return sorted(ob.items(), key=lambda x: x[1])[:default]
"
How to partially copy using python an Hdf5 file into a new one keeping the same structure?,"fd.create_group('A')
fs.copy('A/B', fd['/A'])
"
How to extract the uris lists by regex?,">>> a =  ""[{'index': '1', 'selected': 'true', 'length': '0', 'completedLength': '0', 'path': '', 'uris': [{'status': 'used', 'uri': 'http://www.single.com'}]}]""
>>> b = ""[{'index': '1', 'selected': 'true', 'length': '0', 'completedLength': '0', 'path': '', 'uris': [{'status': 'used', 'uri': 'http://www.mirrors.com'}, {'status': 'used', 'uri': 'http://www.mirrors2.com'}]}]""
>>> c = ""[{'index': '1', 'selected': 'true', 'length': '103674793', 'completedLength': '0', 'path': '/home/dr/Maher_Al-Muaiqly_(MP3_Quran)/002.mp3', 'uris': []}, {'index': '2', 'selected': 'true', 'length': '62043128', 'completedLength': '0', 'path': '/home/dr/Maher_Al-Muaiqly_(MP3_Quran)/004.mp3', 'uris': []}, {'index': '3', 'selected': 'true', 'length': '57914945', 'completedLength': '0', 'path': '/home/dr/Maher_Al-Muaiqly_(MP3_Quran)/003.mp3', 'uris': []}]""
"
How to make comparisons between two large lists fast python,"for i in pixels:
    for j in tabela:
        if i == j[0]:
            arrayBits.append(j[1])
"
Pythonic way of converting integers to string,">>> example = 'bar'
>>> str(example)
'bar'
>>> repr(example)
""'bar'""
>>> `example`
""'bar'""
"
remove None value from a list without removing the 0 value,">>> L = [0, 23, 234, 89, None, 0, 35, 9]
>>> [x for x in L if x is not None]
[0, 23, 234, 89, 0, 35, 9]
"
How do I derive from hashlib.sha256 in Python?,"a = ""hello""
b = a.upper
b()
"
Beautifulsoup showing duplicates,"for tag in soup.body or soup:  # prefer the body tag if exists
    print tag
"
Regular expression to extract words before a slash,"result = re.findall(r'\w+:?(?=/)',data)
"
How can I use functools.singledispatch with instance methods?,"class Patchwork(object):

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)

    @methdispatch
    def get(self, arg):
        return getattr(self, arg, None)

    @get.register(list)
    def _(self, arg):
        return [self.get(x) for x in arg]
"
python re.sub with variable,"def fn(match):
  return unichr(int(match.group(1)))

re.sub('&#([^;]*);', fn, inputtext, flags=re.UNICODE)
"
Pythonic way to select elements of an array based on values?,"mask = (2 < x0) & (x0 < 8)
"
Python print formatted byte(s),"#! /usr/bin/env python
from __future__ import print_function

addr = 204
val = 123
print('%s, %s' % (hex((addr << 1) & 0x7E), hex(val)))
"
Are Python built-in containers thread-safe?,"import threading
list1Lock = threading.Lock()

with list1Lock:
    # change or read from the list here
# continue doing other stuff (the lock is released when you leave the with block)
"
How Can One Make This Code More Pythonic?,"def zeroify_if_has_zero(matrix):
    matrix[:] = [[0]*len(row) if 0 in row else row for row in matrix]
"
python - create a dynamic list of parameter for a method,"worksheet.write_rich_string('A1', *my_list_of_parm)
"
Setting Yaxis in Matplotlib using Pandas,"ax1 = df2250.plot()
df2260.plot(ax=ax1)
etc...
"
Sorting a list of lists in Python,"c2.sort(key=lambda row: (row[2], row[1]))"
Problems faced while scraping webpages in Python,"print doc.body.text_content()
"
Using argparse to convert csv to xml in python,"import os
import sys
import argparse
import csv
import indent
from xml.etree.ElementTree import ElementTree, Element, SubElement, Comment, tostring

def get_args(args):
    parser=argparse.ArgumentParser(description='Convert wordlist text files to various formats.', prog='Text Converter')
    parser.add_argument('-v','--verbose',action='store_true',dest='verbose',help='Increases messages being printed to stdout')
    parser.add_argument('-c','--csv',action='store_true',dest='readcsv',help='Reads CSV file and converts to XML file with same name')
    parser.add_argument('-x','--xml',action='store_true',dest='toxml',help='Convert CSV to XML with different name')
    #parser.add_argument('-i','--inputfile',type=str,help='Name of file to be imported',required=True)
    #parser.add_argument('-o','--outputfile',help='Output file name')
    parser.add_argument('inputfile',type=str,help='Name of file to be imported')
    parser.add_argument('outputfile',help='(optional) Output file name',nargs='?')
    args = parser.parse_args()
    if not (args.toxml or args.readcsv):
        parser.error('No action requested')
        return None
    if args.outputfile is None:
        args.outputfile = os.path.splitext(args.inputfile)[0] + '.xml'
    return args

def main(argv):
    args = get_args(argv[1:])
    if args is None:
        return 1
    inputfile = open(args.inputfile, 'r')
    outputfile = open(args.outputfile, 'w')
    reader = read_csv(inputfile)
    if args.verbose:
        print ('Verbose Selected')
    if args.toxml:
        if args.verbose:
            print ('Convert to XML Selected')
        generate_xml(reader, outputfile)
    if args.readcsv:
        if args.verbose:
            print ('Reading CSV file')
    return 1 # you probably want to return 0 on success

def read_csv(inputfile):
      return list(csv.reader(inputfile))

def generate_xml(reader,outfile):
    root = Element('Solution')
    root.set('version','1.0')
    tree = ElementTree(root)

    head = SubElement(root, 'DrillHoles')
    head.set('total_holes', '238')

    description = SubElement(head,'description')
    current_group = None
    i = 0
    for row in reader:
        if i > 0:
            x1,y1,z1,x2,y2,z2,cost = row
            if current_group is None or i != current_group.text:
                current_group = SubElement(description, 'hole',{'hole_id':""%s""%i})

                collar = SubElement (current_group, 'collar',{'':', '.join((x1,y1,z1))}),
                toe = SubElement (current_group, 'toe',{'':', '.join((x2,y2,z2))})
                cost = SubElement(current_group, 'cost',{'':cost})
        i+=1
    indent.indent(root)
    tree.write(outfile)

if (__name__ == ""__main__""):
    sys.exit(main(sys.argv))
"
select 1 line per category based on number,"from collections import OrderedDict

d = OrderedDict()
spl = sheet.splitlines()
header = spl[0]
for line in spl[1:]:
    # unpack five elements after splitting
    # using name as key and f to cast to float and compare
    name, _, _, _, f = line.split()
    # if key exists compare float value to current float value
    # keeping or replacing the values based on the outcome
    if name in d and float(d[name].split()[-1]) > float(f):
        d[name] = line
    # else if first time seeing name just add it
    elif name not in d:
        d[name] = line

print(header)
for v in d.values():
    print(v)

cmn1 cmn2 cmn3 cmn4 cmn5
rob   45  bar  foo  0.0000001
Steve 32  foo  spam 0.01
"
How to iterate over particular keys in a dict to get values,">>> List = [{'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6},
...         {'a':10, 'b':20, 'c':30, 'd':40, 'e':50, 'f':60},
...         {'a':100, 'b':200, 'c':300, 'd':400, 'e':500, 'f':600}]
>>> keys = ('c', 'd', 'e')
>>> [{k: d[k] for k in keys} for d in List]
[{'c': 3, 'e': 5, 'd': 4}, {'c': 30, 'e': 50, 'd': 40}, {'c': 300, 'e': 500, 'd': 400}]
>>> List = [{'a':1, 'b':2, 'd':4, 'e':5, 'f':6},
...         {'a':10, 'b':20, 'c':30, 'd':40, 'f':60},
...         {'a':100, 'b':200, 'e':500, 'f':600}]
>>> keys = {'c', 'd', 'e'}
>>> [{k: d[k] for k in d.viewkeys() & keys} for d in List]
[{'e': 5, 'd': 4}, {'c': 30, 'd': 40}, {'e': 500}]
"
Python Not Web Linking Entire variable in str.ljust,"title, spaces = (str(item.title).ljust(25)+"" "").split("" "", 1)
content += '<a href=""/%s/"">%s</a>%s  %s' % (item.slug, title, 
                                            spaces, item.date.ljust(10))
"
Python: how to save a list with objects in a file?,"import pickle
import random

def load_data():
    try:
        with open(""bin.dat"") as f:
            x, y = pickle.load(f)
    except:
        x, y = [], []
    return x, y

def save_data(data):
    with open(""bin.dat"", ""wb"") as f:
        pickle.dump(data, f)

if __name__ == ""__main__"":
    x, y = load_data()
    print x, y
    x.append(random.randint(1, 10))
    y.append(random.randint(1, 10))
    save_data([x, y])
"
Python: how to retrieve some values from the elements of a list?,"res = [i.lstrip('event_').split('of')[0] for i in mylist]

print(res)
['100', '17', '1000']
"
Extract value from tag python,"from BeautifulSoup import BeautifulSoup as bs

your_string = """"""<test name1="""" name2="""" name3=""0.0.0.0"" name4=""Linux""></test>""""""

soup = bs(your_string)
res = soup.findAll('test')
for i in res:
    print i.get('name4')
"
Python arguments inside triple quotes,"AGE = raw_input(""Enter your age: "")

vdf = vertica.select_dataframe(""""""
    Select
        col1,
        col2,
        coln
    FROM
        TableX
    WHERE
        col2 IN (21, 22, %s)
    Group BY 1
"""""" % AGE)
"
How do I run Python script from a subdirectory?,"import subprocess
subprocess.call([""python"", ""local_script_name.py""], cwd=""script_dir"")
"
Find repeated string after specified location in a file using python,"def find(file, paragrapgh_number, search_string):
    paragraph = 'paragraph {}'.format(paragrapgh_number)
    for line in file:
        if line.find(paragraph) >= 0:
            break
    for line in file:
        if line.find(search_string) >=0:
            print('Found:', line)
        elif line.find('paragraph') >= 0:
            print('Not found')
            return

with open( ""./test.txt"", ""r"" ) as file:
    find(file, 2, 'intranet 2')

>>>Found: 04 intranet 2
"
Generate IMEI in python,"def getImei(N):
    part = ''.join(str(random.randrange(0,9)) for _ in range(N-1))
    res = luhn_residue('{}{}'.format(part, 0))
    return '{}{}'.format(part, -res%10)
"
repeated numpy subarrays,"import numpy as np
x = np.arange(4)
numrepeats = 3

y = np.lib.stride_tricks.as_strided(x, (numrepeats,)+x.shape, (0,)+x.strides)

print y
x[0] = 9
print y
"
"wxPython, PyQwt or C# for plotting graph and manually drawing lines on plot","import wx
import math
from matplotlib import pyplot

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)
        self.button1 = wx.Button(self.panel, label=""Sine"")
        self.button2 = wx.Button(self.panel, label=""Cosine"")

        self.button1.Bind(wx.EVT_BUTTON, self.DrawSine)
        self.button2.Bind(wx.EVT_BUTTON, self.DrawCosine)

        self.sizer = wx.BoxSizer()

        self.sizer.Add(self.button1)
        self.sizer.Add(self.button2)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

    def Draw(self):
        x = [a*(math.pi/50) for a in range(100)]
        y = [self.f(a) for a in x]
        pyplot.plot(x, y)
        pyplot.grid(True, which='both', axis=""both"")
        pyplot.show()

    def DrawCosine(self, e):
        self.f = math.cos
        self.Draw()

    def DrawSine(self, e):
        self.f = math.sin
        self.Draw() 

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
"
Terminate multiple threads when any thread completes a task,"import threading

def crawl():
    import urllib2
    data = urllib2.urlopen(""http://www.google.com/"").read()

    print ""Read google.com""

threads = []

for n in range(10):
    thread = threading.Thread(target=crawl)
    thread.start()

    threads.append(thread)

# to wait until all three functions are finished

print ""Waiting...""

for thread in threads:
    thread.join()

print ""Complete.""
"
python urllib2 download size,"import requests
import progressbar

ISO = ""http://www.ubuntu.com/start-download?distro=desktop&bits=32&release=lts""
CHUNK_SIZE = 1024 * 1024 # 1MB

r = requests.get(ISO)
total_size = int(r.headers['content-length'])
pbar = progressbar.ProgressBar(maxval=total_size).start()

file_contents = """"
for chunk in r.iter_content(chunk_size=CHUNK_SIZE):
    file_contents += chunk
    pbar.update(len(file_contents))
"
Python: How can i find new folders/directories created in last hour in a specific directory in Linux,"import subprocess
directories = subprocess.check_output(
    ['find', '/data1/realtime', '-type', 'd', '-mmin', '-60']
).splitlines()
# directories content: ['/data1/realtime/dir1000', ...]
"
(Python) Breaking an output text file into tokens,"import csv

with open(""test.txt"") as f, open('test_output.txt', ""w"") as out:
    wr = csv.writer(out, delimiter="","")
    table = str.maketrans(""|"","","")
    for line in f:
        wr.writerow(list(filter(None, line.rstrip().translate(table).split("",""))
"
drop duplicates in Python Pandas DataFrame not removing duplicates,"df = df.ix[~df.apply(np.round, args=[4]).duplicated()]
"
Python: unpacking string of floats to complex numbers,">>> binary_string = struct.pack('2f', 1,2)
>>> binary_string
'\x00\x00\x80?\x00\x00\x00@'
>>> numpy.frombuffer(binary_string, dtype=np.dtype('complex64'))
array([ 1.+2.j], dtype=complex64)
>>> 
"
Arranging elements of a list of tuples,"from collections import defaultdict

l = [('apple',4), ('carrot',2), ('apple',1), ('carrot',7)]

d = defaultdict(list)
for i, j in l:
    d[i].append(j)

result = sorted([tuple([x, tuple(sorted(y))]) for x, y in d.items()])

print(result)
"
JSON value parse with Python,">>> import json
>>> import datetime
>>> your_json_value = '''\
... {
...   ""boolean"": true,
...   ""null"": null,
...   ""number"": 123,
...   ""values"": [
...     [
...       ""95"", 
...       ""2011-12-04""
...     ], 
...     [
...         ""90"", 
...         ""2011-10-03""
...     ]
...   ]
... }
... '''
>>> for _, date in data['values']:
...     date = datetime.datetime.strptime(date, '%Y-%m-%d').date()
...     print('{:%a %d %B %Y}'.format(date))
... 
Sun 04 December 2011
Mon 03 October 2011
"
Optimal strategy for choosing pairs from a list of combinations,"import itertools

def hasNoRepeats(matching):
    flattenedList = list(itertools.chain.from_iterable(matching))
    flattenedSet = set(flattenedList)
    return len(flattenedSet) == len(flattenedList)

def getMatchings(users, groupSize=2):
#   Get all possible pairings of users
    pairings = list(itertools.combinations(users, groupSize))
#   Get all possible groups of pairings of the correct size, then filter to eliminate groups of pairings where a user appears more than once
    possibleMatchings = filter(hasNoRepeats, itertools.combinations(pairings, len(users)/groupSize))
#   Select a series of the possible matchings, making sure no users are paired twice, to create a series of matching cycles.
    cycles = [possibleMatchings.pop(0)]
    for matching in possibleMatchings:
        # pairingsToDate represents a flattened list of all pairs made in cycles so far
        pairingsToDate = list(itertools.chain.from_iterable(cycles))
        # The following checks to make sure there are no pairs in matching (the group of pairs being considered for this cycle) that have occurred in previous cycles (pairingsToDate)
        if not any([pair in pairingsToDate for pair in matching]):
            # Ok, 'matching' contains only pairs that have never occurred so far, so we'll add 'matching' as the next cycle
            cycles.append(matching)
    return cycles

# Demo:

users = [""A"",""B"",""C"",""D"",""E"",""F""]

matchings = getMatchings(users, groupSize=2)

for matching in matchings:
    print matching
"
How to make positional argument optional in argparser based on some condition in python,"import argparse

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='sub-command help')

init_parser = subparsers.add_parser('init', help='do the init stuff')

snap_parser = subparsers.add_parser('snap', help='do the snap stuff')
snap_parser.add_argument('--file', '-f', required=True)

check_parser = subparsers.add_parser('check', help='do the check stuff')
check_parser.add_argument('--file', '-f', required=True)

args = parser.parse_args()

print args
"
Python: Produce increments from a list to form an array,">>> b = [np.linspace(0, j, 10, endpoint=False) for j in a]

>>> d = map(np.concatenate, zip(b, c))
>>> d
[array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
         1.2,  1.4,  1.6,  1.8,  2. ]),
 array([ 0.  ,  0.11,  0.22,  0.33,  0.44,  0.55,  0.66,  0.77,  0.88,
         0.99,  1.1 ,  1.28,  1.46,  1.64,  1.82,  2.  ]),
 ...
 array([ 0.  ,  0.15,  0.3 ,  0.45,  0.6 ,  0.75,  0.9 ,  1.05,  1.2 ,
         1.35,  1.5 ,  1.6 ,  1.7 ,  1.8 ,  1.9 ,  2.  ])]
"
Selenium webdriver: How do I find ALL of an element's attributes?,">>> from bs4 import BeautifulSoup
>>> html = element.get_attribute('outerHTML')
>>> attrs = BeautifulSoup(html, 'html.parser').a.attrs
>>> pprint(attrs)
{u'class': [u'topbar-icon',
            u'icon-site-switcher',
            u'yes-hover',
            u'js-site-switcher-button',
            u'js-gps-track'],
 u'data-gps-track': u'site_switcher.show',
 u'href': u'//stackexchange.com',
 u'title': u'A list of all 132 Stack Exchange sites'}
"
Extracting untagged text using beautifulsoup,"html = """"""
<body>
        <p>The prognosis of patients with rectal cancer has improved since the introduction of total mesorectal excision (TME) surgery [
            <xref ref-type=""bibr"" rid=""CR1"">1</xref>&#x02013;
            <xref ref-type=""bibr"" rid=""CR3"">3</xref>]. Using this surgical technique the mesorectal compartment including the rectum and perirectal fat is completely excised by sharp dissection along the mesorectal fascia (MRF) [
            <xref ref-type=""bibr"" rid=""CR1"">1</xref>]. Additionally, large randomized trials have shown that neo-adjuvant therapy improves local tumor control even further, regardless of optimized surgical techniques [
            <xref ref-type=""bibr"" rid=""CR3"">3</xref>, 
            <xref ref-type=""bibr"" rid=""CR4"">4</xref>]. The advances in rectal cancer treatment have provoked differentiated neo-adjuvant treatment strategies based on anatomical preoperative identifiable risk factors for local tumor recurrence as can be visualized with magnetic resonance imaging (MRI) [
            <xref ref-type=""bibr"" rid=""CR5"">5</xref>]. One of the most important risk factors is the tumor relationship to the MRF, which actually defines the surgical circumferential resection margin (CRM) in TME surgery [
            <xref ref-type=""bibr"" rid=""CR6"">6</xref>, 
            <xref ref-type=""bibr"" rid=""CR7"">7</xref>]. Long courses of neo-adjuvant chemoradiation have emerged as the preferential treatment of patients with anticipated tumor invasion of the MRF on MRI in order to downstage/downsize the tumor and to obtain tumor free resection margins [
            <xref ref-type=""bibr"" rid=""CR5"">5</xref>].
            </p>

</body>
""""""

import re
re.search('<xref ref-type=""bibr"" rid=""CR3"">3</xref>(.*)', a).group(1)
"
Python: Replace dataframe values row by row,"import pandas as pd

tmp= pd.DataFrame({
'A': pd.Series([1,2,3,4,5,6,7,8,9,10], index=range(0,10)),
'B': pd.Series([3,4,1,33,10,9,7,3,10,10], index=range(0,10))
} )


tmp = pd.concat([tmp]*10000).reset_index(drop=True)
t1 = tmp.copy()

print (tmp[tmp.eq(tmp.max(axis=1), axis=0)])


def top(row):
    data = row.tolist()
    return [d if d == max(data) else None for d in data]

def gh(tmp1):
    return tmp1.apply(top, axis=1)

print (gh(t1))
"
run python script with html button,"exec('python /path/to/file.py');
"
List of dictionaries - subtract a constant from each dictionary value,"for d in lst:
    d['score'] -= 1
"
Python - Truncate unknown file names,"import shutil, re, os, fnmatch
directory = 'your_path'

for root, dirnames, filenames in os.walk(directory):
    for filename in fnmatch.filter(filenames, '*.dat'):
        filename_new = re.sub(r'_[A-Za-z0-9]{2}', '', filename)
        shutil.move(os.path.join(root, filename), os.path.join(root, filename_new))
"
Mathemmatical formula for incremental breakdowns,"# # # # #
# # # # #
# # # # #
# # # #
"
Evaluate image in html table using Python,"for row in table.find_all('tr'):
    rows.append([1 if val.img else 0 for val in row.find_all('td')])
"
Break string into list of characters in Python,"fd = open(filename,'rU')
chars = []
for line in fd:
   for c in line:
       chars.append(c)
"
How to read interpreted data strings in Python?,"print(*[s.encode('latin1').decode('unicode_escape') for s in all_strings])
"
How can I count unique terms in a plaintext file case-insensitively?,"#! /usr/bin/python2.4
import sys
h = set()
for line in sys.stdin.xreadlines():
  for term in line.split():
    h.add(term)
print len(h)
"
get all parents of xml node using python,">>> import lxml.etree as ET
>>> root = ET.fromstring(s)
>>> for target in root.xpath('.//Department/orgID[text()=""126""]'):
...     d = {
...         dept.find('name').text: int(dept.find('orgID').text)
...         for dept in target.xpath('ancestor-or-self::Department')
...     }
...     print(d)
...
{'A': 124, 'C': 126, 'B': 125}
"
How can I search through Stack Overflow questions from a script?,">>> from urllib import urlencode
>>> params = urlencode({'q': 'python best practices', 'sort': 'relevance'})
>>> params
'q=python+best+practices&sort=relevance'
>>> from urllib2 import urlopen
>>> html = urlopen(""http://stackoverflow.com/search?%s"" % params).read()
>>> import re
>>> links = re.findall(r'<h3><a href=""([^""]*)"" class=""answer-title"">([^<]*)</a></h3>', html)
>>> links
[('/questions/5119/what-are-the-best-rss-feeds-for-programmersdevelopers#5150', 'What are the best RSS feeds for programmers/developers?'), ('/questions/3088/best-ways-to-teach-a-beginner-to-program#13185', 'Best ways to teach a beginner to program?'), ('/questions/13678/textual-versus-graphical-programming-languages#13886', 'Textual versus Graphical Programming Languages'), ('/questions/58968/what-defines-pythonian-or-pythonic#59877', 'What defines &#8220;pythonian&#8221; or &#8220;pythonic&#8221;?'), ('/questions/592/cxoracle-how-do-i-access-oracle-from-python#62392', 'cx_Oracle - How do I access Oracle from Python? '), ('/questions/7170/recommendation-for-straight-forward-python-frameworks#83608', 'Recommendation for straight-forward python frameworks'), ('/questions/100732/why-is-if-not-someobj-better-than-if-someobj-none-in-python#100903', 'Why is if not someobj: better than if someobj == None: in Python?'), ('/questions/132734/presentations-on-switching-from-perl-to-python#134006', 'Presentations on switching from Perl to Python'), ('/questions/136977/after-c-python-or-java#138442', 'After C++ - Python or Java?')]
>>> from urlparse import urljoin
>>> links = [(urljoin('http://stackoverflow.com/', url), title) for url,title in links]
>>> links
[('http://stackoverflow.com/questions/5119/what-are-the-best-rss-feeds-for-programmersdevelopers#5150', 'What are the best RSS feeds for programmers/developers?'), ('http://stackoverflow.com/questions/3088/best-ways-to-teach-a-beginner-to-program#13185', 'Best ways to teach a beginner to program?'), ('http://stackoverflow.com/questions/13678/textual-versus-graphical-programming-languages#13886', 'Textual versus Graphical Programming Languages'), ('http://stackoverflow.com/questions/58968/what-defines-pythonian-or-pythonic#59877', 'What defines &#8220;pythonian&#8221; or &#8220;pythonic&#8221;?'), ('http://stackoverflow.com/questions/592/cxoracle-how-do-i-access-oracle-from-python#62392', 'cx_Oracle - How do I access Oracle from Python? '), ('http://stackoverflow.com/questions/7170/recommendation-for-straight-forward-python-frameworks#83608', 'Recommendation for straight-forward python frameworks'), ('http://stackoverflow.com/questions/100732/why-is-if-not-someobj-better-than-if-someobj-none-in-python#100903', 'Why is if not someobj: better than if someobj == None: in Python?'), ('http://stackoverflow.com/questions/132734/presentations-on-switching-from-perl-to-python#134006', 'Presentations on switching from Perl to Python'), ('http://stackoverflow.com/questions/136977/after-c-python-or-java#138442', 'After C++ - Python or Java?')]
"
Python add a string to all set's elements,">>> s = set(['s1','s2','s3'])
>>> set(x + '!' for x in s)
set(['s1!', 's2!', 's3!'])
"
searching & comparing valuse in csv files with python,"import csv

mas = csv.reader(open('master.csv','rb'))
upd = csv.reader(open('update.csv','rb'))

set24 = set((row[2],row[4]) for row in mas)
print set24
print

updkept = [ row for row in upd if (row[2],row[4]) not in set24]
print '\n'.join(map(str,updkept))
"
Sort a list based on a given distribution,"from numpy import take,argsort

take(opt,argsort(argsort(perc)[::-1]))
"
How to swap one value with next value in Python?,"myList = [25,3,26,27,56]
for i in range(0, len(myList) - 1, 2):
    myList[i], myList[i + 1] = myList[i + 1], myList[i]
print myList
"
Calling a function on every column of a pandas DataFrame,"import numpy as np
import pandas as pd
from scipy import stats

df = pd.DataFrame({'sample': np.random.choice([1, 2], 100, replace=True),
                   'x': np.random.uniform(size=100),
                   'y': np.random.normal(size=100),
                   'z': np.random.choice([1,5,7,3,9],100, replace=True)})

def ttest(x):
    y = stats.ttest_ind(df.ix[df['sample']==1, x], 
        df.ix[df['sample']==2, x], 
        equal_var= False)
    return y


for col in df.columns:
    print col, ttest(col)
"
Python: Pass inequality as string in dict for evaluation,"gt5 = lambda x: x > 5
"
Is there a way to append the name of a function to a list automatically?,"mylist = []
def listed(func):
    mylist.append(func)
    return func

@listed
def function1():
    pass

@listed
def function2():
    pass
"
unable to scrape,"import requests
from bs4 import BeautifulSoup
import time

# post url
js = ""https://angel.co/company_filters/search_data""

# X-Requested-With is important
headers = {""X-Requested-With"": ""XMLHttpRequest"",
           ""User-Agent"": ""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.75 Safari/537.36""}


# get url
u = ""https://angel.co/companies/startups?ids%5B%5D={}&total={}&page={}&sort=signal&new=false&hexdigest={}""


def get_next_pages(js, u, start_page=1):
    with requests.Session() as s:
        params = s.post(js, data={""sort"": ""signal"",""page"":start_page}, headers=headers).json()
        companies = s.get(
            u.format(""&ids%5B%5D="".join(map(str, params[""ids""])), params[""page""], params[""total""], params[""hexdigest""]),
            headers=headers)
        soup = BeautifulSoup(companies.json()[""html""])
        comps = soup.select(""div.company.column"")
        yield comps
        while True:
            # increment page count from previous.
            page = params[""page""] + 1
            params = s.post(js, data={""sort"": ""signal"", ""page"": page}, headers=headers).json()
            # keep going until we have reached the maximum queries
            if ""ids"" not in params:
                break
            companies = s.get(u.format(""&ids%5B%5D="".join(map(str, params[""ids""])), params[""page""], params[""total""],
                                       params[""hexdigest""]),
                              headers=headers)
            soup = BeautifulSoup(companies.json()[""html""])
            comps = soup.select(""div.company.column"")
            # don't hammer with requests
            time.sleep(.3)
            yield comps

for comps in get_next_pages(js, u):
    print(comps)
"
Writing to a specific column of a text file in python,"arr = ['ABCD', 1, 'P', '15-06-2015', 0, 'Name of the account']
print ""{:16}{:<3}{:3}{:29}{:<3}{:40}"".format(*arr)
"
"Python, context sensitive string substitution","# b == ""234ab6""
"
How to add an exit option on my Pig Latin Translator (Python),"import sys
while True:

    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')

    statement = input('Please enter a word to translate: ')

    if statement == ""EXIT"":
        print (""Exiting program."")
        sys.exit()

    if statement in vowels:
        print(statement[0] + ('way'))
    else:
        print(statement[1:] + statement[0] + ('ay'))**strong text**
"
Standard way to serialize and plot IP addresses?,">>> import ipaddress
>>> i = ipaddress.ip_address('10.9.8.7')
>>> int(i)
168364039
"
pandas filling gaps of missing data,"print df1.combine_first(df2)
     a  b
A 1  1  1
  2  2  2
B 1  3  3
  2  4  4

print df1.fillna(df2) 
     a  b
A 1  1  1
  2  2  2
B 1  3  3
  2  4  4
"
Python Regex Sort and Print into a New Document with line breaks,"for line in xfile:
    l=line.strip()
    n=re.sub(""(\B)(?=((MTH|ENG|SCN|HST)[|]))"",""\n"",line)

    if len(n) > 0:
        nl=split.(""\n"")
        for item in nl:
            log.write(item+'\n')
"
"Inserting an element in list, at exact location, without array sizing in Python?","d = {}

def dfs(x):
    if isleaf(x):
        d[x[0]] = x
        return
    for y in x[1]: 
        dfs(y)
dfs(data)

res = [None] * (max(d) + 1)
for i, v in d.items():
    res[i] = v
"
Create a dictionary of all letter transitions from a previous dictionary of words?,">>> pairs = {}
>>> n = 2
>>> word = 'banana'
>>> for i in range(len(word)):
...     pair = word[i:i+n]
...     pairs[pair] = pairs.get(pair, 0) + 1
... 
>>> pairs
{'a': 1, 'na': 2, 'ba': 1, 'an': 2}
>>> 
"
How to center Tkinter wiget?,"from tkinter import *

wd = Tk()
wd.config(height=500, width=500)
can = Canvas(wd, bg = 'red', height=100, width=100)
can.place(relx=0.5, rely=0.5, anchor=CENTER)
"
Regex help needed for splitting CSV file,"import re
DataL = [ 
        '''Grand Total for ATHLET:,,,""1,312 "",,62:58:18,130.62 ,,''',
        '''Grand Total for SELF:,,,""6,589 "",,397:57:58,708.53 ,,'''
    ]   
Pattern = re.compile(r''',(?=[^""']*(?:(?:[^'""]*[""'][^""']*){2})*$)''')
for (i, d) in enumerate(DataL):
    print Pattern.split(d)
"
Python: a better way to write a if-then block with join?,"location = [l for l in (self.room, self.floor, self.building) if l is not None][:1]
"
How to remove blank element in between non-blank elements in list?,"myList = ['', '', 'foo', '', 'bar', '', '', 'fizz', '', 'buzz']

from itertools import groupby, chain

def consec(l):
    for k, v in groupby(l):
        lst = list(v)
        if len(lst) > 1 or lst[0]:
            yield lst

myList[:] = chain.from_iterable(consec(myList))
print(myList)
"
Regex Python / group quantifiers,"import re

regx = re.compile('(?:(?<=\A)|(?<=/)).+?(?=/|\Z)')


for ss in ('Same/Same2/Foot/Ankle/Joint/Actuator/Sensor/Temperature/Value=4.123',
           'Same/Same2/Battery/Name=SomeString',
           'Same/Same2/Home/Land/Some/More/Stuff=0.34'):

    print ss
    print regx.findall(ss)
    print
"
How to use map for converting a list of decimals to hex in python,"map(hex,map(int, a))
"
re-size elements in a list based on index,"a = [ [1, 'test', 12, 'toronto'], [2, 'test', 145, 'montreal'] ]
a = [ [e [:5] if i == 3 else e for i, e in enumerate (line)] for line in a]
print (a)
"
Conditional loop in python,"from itertools import groupby

data = ['a','a','x','c','e','e','f','f','f']
for k, g in groupby(data):
    if len(list(g)) > 1:
        print k
"
Python - to check if a char is in dictionary and if not to deal with it,"tokenMapping = {""&&"" : ""and""}

for token in source file: # <-- pseudocode
    translatedToken = tokenMapping[token] if token in tokenMapping else ""transliteration unknown""
"
How to do profiling for this?,"def numbers_string1(count):
    result = """"
    for i in range(count):
        result += str(i)
    return result

def numbers_string2(count):
    nums = range(count)
    num_strings = map(str, nums)
    return "","".join(num_strings)

def numbers_string3(count):
    num_strings = [str(i) for i in range(count)]
    return "","".join(num_strings)

def num_strings4(count):
    num_strings = [str(i) for i in xrange(count)]
    return "","".join(num_strings)

if __name__ == '__main__':
    import time
    cnts = (10, 100, 1000, 10000)
    funcs = (numbers_string1, numbers_string2, numbers_string3, num_strings4)
    for func in funcs:
        for cnt in cnts:
            tms = []
            for _ in xrange(5):   
                begin_time = time.clock()
                func(cnt)
                tms.append(time.clock() - begin_time)
            print ""%s, count = %d, min = %s , actuals = %s"" % (func.__name__, cnt, min(tms), tms)
"
Python Increment Int variable in a String,"id = 1
for x in range(1, 4):
    studentID = ""Bart: {}"".format(id)
    print(studentID)
    id += 1
"
Create multiple unique copies of an array,"b, c, d = [a.copy() for _ in range(3)]
"
Python check string indentation,">>> a = ""\t\tindented string""
>>> leading_spaces = len(a) - len(a.lstrip())
>>> print leading_spaces
2
"
Sort list of strings by a part of the string,">>>s = ['variable1 (name3)', 'variable2 (name2)', 'variable3 (name1)']
>>> sorted(s)
['variable1 (name3)', 'variable2 (name2)', 'variable3 (name1)']
>>> sorted(s, key = lambda x: x.split()[1])
['variable3 (name1)', 'variable2 (name2)', 'variable1 (name3)']
>>> 
"
Create a decorator that has access to both the arguments and function,">>> def arg(*args, **kwargs):
...     def _decorator(func):
...         def _wrapper(*args1, **kwargs1):
...             # check for funcs args
...             for k,v in kwargs.items():
...                 print(""For key - "",k,v == kwargs1.get(k))
...             func(*args1, **kwargs1)
...         return _wrapper
...     return _decorator
...
>>>
>>> @arg(l = 1)
... def b(l):
...     print(""In B"", l)
...
>>> b(l=1)
For key -  l True
In B 1
>>> b(l=2)
For key -  l False
In B 2
"
How to include third party Python libraries in Google App Engine?,"sys.path.insert(0, 'libs')"
Counting jump(no of lines) between first two 'String' occurrences in a file,"from itertools import groupby

def block_start(line, start=[None]):
    if 'Rank' in line:
       start[0] = not start[0]
    return start[0]

with open(filename) as file:
     block_sizes = [sum(1 for line in block) # find number of lines in a block
                    for _, block in groupby(file, key=block_start)] # group
print(block_sizes)
# -> [4, 4, 1]
"
Implementing intereaved products and sums in Python without loop overhead,"def precalc1(jmat):
  # calc all the 'outer' sums/diffs, and zero the k=i,j terms
  ii = np.arange(jmat.shape[0])
  JM1 = jmat[:,:,None] + jmat[:,None,:]
  JM2 = jmat[:,:,None] - jmat[:,None,:]
  JM1[ii,ii,:] = 0
  JM2[ii,ii,:] = 0
  JM1[ii,:,ii] = 0
  JM2[ii,:,ii] = 0
  JM1 = JM1.transpose([1,2,0])
  JM2 = JM2.transpose([1,2,0])
  return JM1, JM2
"
Get frequency count of elements in an array,">>> [c[i] for i in xrange( min(c) , max(c)+1)]
[1, 2, 3, 0, 2, 2, 3, 0, 3]
"
Modify the Ramer–Douglas–Peucker (RDP) algorithm in numpy to return a mask instead of the values,"def dsquared_line_points(P1, P2, points):
    '''
    Calculate only squared distance, only needed for comparison
    http://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line
    '''
    xdiff = P2[0] - P1[0]
    ydiff = P2[1] - P1[1]
    nom  = (
        ydiff*points[:,0] - \
        xdiff*points[:,1] + \
        P2[0]*P1[1] - \
        P2[1]*P1[0]
    )**2
    denom = ydiff**2 + xdiff**2
    return np.divide(nom, denom)

def rdp_numpy(M, epsilon = 0):

    # initiate mask array
    # same amount of points
    mask = np.empty(M.shape[0], dtype = bool)

    # Assume all points are valid and falsify those which are found
    mask.fill(True)

    # The stack to select start and end index
    stack = [(0 , M.shape[0]-1)]

    while (len(stack) > 0):
        # Pop the last item
        (start, end) = stack.pop()

        # nothing to calculate if no points in between
        if end - start <= 1:
            continue

        # Calculate distance to points
        P1 = M[start]
        P2 = M[end]
        points = M[start + 1:end]
        dsq = dsquared_line_points(P1, P2, points)

        mask_eps = dsq > epsilon**2

        if mask_eps.any():
            # max point outside eps
            # Include index that was sliced out
            # Also include the start index to get absolute index
            # And not relative 
            mid = np.argmax(dsq) + 1 + start
            stack.append((start, mid))
            stack.append((mid, end))

        else:
            # Points in between are redundant
            mask[start + 1:end] = False

    return mask
"
How does all() in python work on empty lists,"def all(list, condition):
  for a in list:
    if not condition(a):
      return false
  return true
"
xgettext from a csv file,"import csv
import gettext

t = gettext.translation('api_trans', '/path/to/locale/', fallback=True)
_ = t.ugettext

string_list = []
with open('/path/to/csv/file') as csvfile:
  with open('/path/to/some/other/file', 'w') as out:
    reader = csv.reader(csvfile, delimiter=',', quotechar='""')
    for row in reader:
      if row:
          if row[0] != '':
              out.write(""print _(%s)\n"" % (repr(row[0],))
"
Pickle python class instance plus definition,">>> class More(object):
...   def squared(self, x):
...     return x*x
... 
>>> import pathos
>>> 
>>> p = pathos.pp.ParallelPythonPool(servers=('localhost,1234',))
>>> 
>>> m = More()
>>> p.map(m.squared, range(5))
[0, 1, 4, 9, 16]
"
Python Remove Item from list,"new_dc_files = [dc for dc in dc_files if 'NoCover' not in dc]
"
How to find and extract link from webpage?,"from lxml import html

url = ""http://site.com""
doc = html.parse(url).getroot() # download & parse webpage
doc.make_links_absolute(url)
for element, attribute, link, _ in doc.iterlinks():
    if (attribute == 'href' and element.tag == 'a' and
        'somepage' in link): # or e.g., re.search('somepage', link)
        print(link)
"
Transpose Census Flat Files in Python,"df = pd.read_csv(""2013indiv_unit_reported_data.txt"", delim_whitespace=True, 
                 names=[""rowcol"", ""data""])
df[""row""] = df[""rowcol""].str[:14]
df[""col""] = df[""rowcol""].str[14:]
df_new = df.pivot(index=""row"", columns=""col"", values=""data"")
df_new = df_new.fillna("""")
df_new.to_csv(""table.dat"", index=False)
"
How to convert unsigned value to byte string,">>> struct.pack('!QQ', *divmod(0xdeadbeef0cafe0deadbeef, 2**64))
b'\x00\x00\x00\x00\x00\xde\xad\xbe\xef\x0c\xaf\xe0\xde\xad\xbe\xef'
"
Extract a 2-element tuple and convert it to String,"[''.join(t) for t in list_of_tuples]
"
Python name variable from string,"with open(""yourFile"") as fd:
    l = [x.strip().split() for x in fd.read().split(""done"")][:-1]
    print dict(zip(map(str,range(len(l))),l))
"
upload file with Python Mechanize,"br.form.add_file(open(filename), 'text/plain', filename)"
Python BeautifulSoup Error In Parsing HTML,"from bs4 import BeautifulSoup

html = """"""<table style=""padding-top:10px;"">
    <tr><th>ISP:</th><td>Brighthouse Networks</td></tr>
    <tr><th>Services:</th><td><a href=""/ip-services"">None Detected</a></td></tr>
    <tr><th>City:</th><td>Miami</td></tr>
    <th>Region:</th><td>Florida</td>
    <tr><th>Country:</th><td>United States</td></tr>
</table>""""""

soup = BeautifulSoup(html)
table = soup.findAll('table', {""style"":""padding-top:10px;""})[0]

trs = table('tr')
for tr in trs:
    print tr.th.text,
    print tr.td.text

#and this for the 'Region'
print table(""th"")[3].text,
print table(""td"")[3].text
"
Python - Locating the position of a regex match in a string?,"re.search('is', String).start()"
python sum the values of lists of list,"result = map(sum, a)
"
python pyparsing word excludeChars,"Word(nums+'_', excludeChars='_')
"
extracting downsampled timeseries from a normalised csv using pandas,"import pandas as pd
import numpy as np

df= pd.DataFrame.from_csv('sample.csv')

resamp = df.groupby(['event','user']).resample('W', how='sum')
"
Python Selenium: Find object attributes using xpath,"browser.find_elements_by_xpath(""//*[@type='submit']"").get_attribute('value')"
How to write a special for loop case of C++ in Python?,"start_value = 10;
end_value = 20;
for i in range(start_value, end_value):
  print(i)
"
How do I re-map python dict keys,"for row in rows:
    row = {name_map[name]: val for name, val in row.items()}
"
'gi.repository.Gtk' object has no attribute 'gdk',"
""""""Show a shell command's output in a gtk.TextView without freezing the UI""""""

import os
import locale
import subprocess
import shlex
import gi.repository.Gtk as gtk
from gi.repository import GObject
PIPE = subprocess.PIPE

encoding = locale.getpreferredencoding()


def utf8conv(x):
    return unicode(x, encoding).encode('utf8')


class MyWindow:
    def __init__(self):
        sw = gtk.ScrolledWindow()
        sw.set_policy(gtk.PolicyType.AUTOMATIC, gtk.PolicyType.AUTOMATIC)
        textview = gtk.TextView()
        textbuffer = textview.get_buffer()
        sw.add(textview)
        win = gtk.Window()
        win.resize(300, 500)
        win.connect('delete-event', gtk.main_quit)

        self.button_sim = gtk.Button(u""Press me!"")
        self.button_abort = gtk.Button(""Abort"")
        self.button_quit = gtk.Button(""Quit"")

        command = 'ls -R %s' % (os.getcwd(),)
        self.button_sim.connect(
            ""clicked"", self.on_button_clicked, textview, textbuffer, command)
        self.button_abort.connect(""clicked"", self.on_abort)
        self.button_quit.connect(""clicked"", self.main_quit)

        vbox = gtk.VBox()
        vbox.pack_start(self.button_sim, expand=False, fill=False, padding=0)
        vbox.pack_start(self.button_abort, expand=False, fill=False, padding=0)
        vbox.pack_start(self.button_quit, expand=False, fill=False, padding=0)
        vbox.pack_start(sw, expand=True, fill=True, padding=0)
        win.add(vbox)
        win.show_all()

    def read_output(self, view, buffer, command):
        yield True  # allow the UI to refresh
        proc = subprocess.Popen(
            shlex.split(command), stderr=PIPE, stdout=PIPE)
        while True:
            if self.job_aborted:
                print('user aborted')
                proc.terminate()
                break

            try:
                line = proc.stdout.readline()
                if line:
                    it = buffer.get_end_iter()
                    buffer.place_cursor(it)
                    buffer.insert(it, utf8conv(line))
                    view.scroll_to_mark(buffer.get_insert(), 0.1,
                                        use_align=False, xalign=0.5, yalign=0.5)

            except IOError:
                pass

            yield True

        yield False

    def on_button_clicked(self, button, view, buffer, command):
        self.job_aborted = False
        GObject.idle_add(self.read_output(view, buffer, command).next)

    def on_abort(self, button):
        self.job_aborted = True

    def main_quit(self, obj):
        self.job_aborted = True
        gtk.main_quit()


if __name__ == ""__main__"":
    app = MyWindow()
    gtk.main()
"
"Is it possible to take an ordered ""slice"" of a dictionary in Python based on a list of keys?","dict(zip(my_list, map(my_dictionary.get, my_list)))"
Column values distributed to adjacent columns,"import csv

with open(""input.csv"", ""r"") as f_input, open(""output.csv"", ""wb"") as f_output:
    csv_input = csv.reader(f_input, delimiter="" "")
    csv_output = csv.writer(f_output, delimiter="" "")
    headings = csv_input.next()     # skip the header row

    for row in csv_input:
        for col in row[1:]:
            csv_output.writerow([row[0], col])
"
Filter DataFrame rows that are lists,"mask = df['business'].apply(pd.Series).isin(restaurant_categories_list).sum(axis=1) > 0
print(df[(mask)])
"
call php function from python,"# shell execute PHP
def php(code):
  # open process
  p = Popen(['php'], stdout=PIPE, stdin=PIPE, stderr=STDOUT, close_fds=True)

  # read output
  o = p.communicate(code)[0]

  # kill process
  try:
    os.kill(p.pid, signal.SIGTERM)
  except:
    pass

  # return
  return o
"
Python datetime,"def itertime(start, end, int_step):
    current_time = start
    step = datetime.timedelta(0, int_step)
    while current_time < end:
        yield current_time
        current_time += step
"
avoid scrapy revisit on a different run,"
pipelines.py
from mybot.utils import connect_url_database

class DedupPipeline(object):

    def __init__(self):
        self.db = connect_url_database()

    def process_item(self, item, spider):
        url = item['url']
        self.db.insert(url)
        yield item
"
Python: Regex v. BeautifulSoup to remove from text <TYPE>,"soup.find_all('TYPE', text=re.compile('^\s*(?:EX|XML)', re.I))
"
what is the name parameter in Pandas Series?,"In [1]: s = pd.Series([""A"",""B"",""C""], name=""foo"")

In [2]: s
Out[2]: 
0    A
1    B
2    C
Name: foo, dtype: object

In [3]: pd.DataFrame(s)
Out[4]: 
  foo
0   A
1   B
2   C
"
Executing mathematical user inputed statements as code in Python 3,"import sys
import operator
from pyparsing import nums, oneOf, Word, Literal, Suppress
from pyparsing import ParseException, Forward, Group

op_map = { '*' : operator.mul,\
           '+' : operator.add,\
           '/' : operator.div,\
           '-' : operator.sub}

exp = Forward()

number = Word(nums).setParseAction(lambda s, l, t: int(t[0]))
lparen = Literal('(').suppress()
rparen = Literal(')').suppress()
op = oneOf('+ - * /').setResultsName('op').setParseAction(lambda s, l, t: op_map[t[0]])

exp << Group(lparen + op + (number | exp) + (number | exp) + rparen)

def processArg(arg):
    if isinstance(arg, int):
        return arg
    else:
        return processList(arg)

def processList(lst):
    args = [processArg(x) for x in lst[1:]]
    return lst.op(args[0], args[1])


def handleLine(line):
    result = exp.parseString(line)
    return processList(result[0])

while True:
    try:
        print handleLine(raw_input('> '))
    except ParseException, e:
        print >>sys.stderr,\
              ""Syntax error at position %d: %s"" % (e.col, e.line)
    except ZeroDivisionError:
        print >>sys.stderr,\
              ""Division by zero error""
"
python/numpy: negate or complement a slice,"def process(data, a_mask=None):
    if a_mask is None:
        a_mask = slice(None)  # every element
        b_mask = slice(0)     # no elements
    else:
        b_mask = -a_mask
    res_a = func_a(data[a_mask])
    res_b = func_b(data[b_mask])
    return res_a, res_b
"
List of all unique characters in a string?,""""""""""""".join(set('aaabcabccd'))"
How to change a string in a file to strings froma a list,"def interleave(original, tag, replacements):
    items = original.split(tag)
    return """".join((text+repl for text,repl in zip(items, replacements+[""""])))
"
how to do math calculation on each number in a specific column in panda,"rchdcayf1=(-N_DATA['column_name']*0.008).apply(math.exp)
print (rchdcayf1)
0    0.992032
1    0.984127
2    0.976286
Name: column_name, dtype: float64
"
Is there a way to shallow copy an existing file-object?,"fh1, fh2, fh3 = [open(""somefile.txt"") for i in range(3)]
"
Search for a pattern in a string in python,"def matchPat(str1, str2):
    index1 = 0
    index2 = 0
    while index1 < len(str1):
        c = str1[index1]
        #Check if the str2 has run it's course.
        if index2 >= len(str2):
            #This needs to be checked,assuming matchPatch(""*"", """") to be true
            if(len(str2) == 0 and str1 == ""*""):
                return True
            return False
        #If c is not ""*"", then it's normal comparision.
        if c != ""*"":
            if c != str2[index2]:
                 return False
            index2 += 1
        #If c is ""*"", then you need to increment str1,
        #search for the next value in str2,
        #and update index2
        else:
            index1 += 1
            if(index1 == len(str1)):
                return True       
            c = str1[index1]
            #Search the character in str2
            i = str2.find(c, index2)
            #If search fails, return False
            if(i == -1):
                return False
            index2 = i + 1
        index1 += 1
    return True
"
How to TABLESAMPLE with SQLAlchemy?,"from sqlalchemy.ext.compiler import compiles
from sqlalchemy.sql import Alias, FromClause
from sqlalchemy.orm import aliased


class TableSample(Alias):

    __visit_name__ = 'tablesample'

    def __init__(self, selectable, argument=None, method=None,
                 seed=None):
        super(TableSample, self).__init__(selectable)
        self.method = method
        self.argument = argument
        self.seed = seed 


def tablesample(element, argument=None, method=None, seed=None):
    if isinstance(element, FromClause):
        return TableSample(element, argument=argument, method=method, seed=seed)
    else:
        return aliased(element, TableSample(element.__table__,
            argument=argument, method=method, seed=seed))


@compiles(TableSample)
def compile_tablesample(element, compiler, **kwargs):
    s = ""%s TABLESAMPLE %s(%s)"" % (
        compiler.visit_alias(element, **kwargs),
        element.method or 'SYSTEM',
        element.argument)

    if element.seed:
        s += "" REPEATABLE (%s)"" % compiler.process(element.seed, **kwargs)

    return s
"
Changing the value of an item in a list in a Python for loop,"for line in tmp:
"
how to get the length of a 2-d counter,"class NestedArray(object):
    def __init__(self, x, y, defaultValue=0):
        self.x = x
        self.y = y
        self.array = [[defaultValue]*y for a in xrange(x)]

    def __len__(self):
        return self.x * self.y

    def __getitem__(self, key):
            return self.array[key]

    def __setitem__(self, key, value):
            self.array[key] = value
"
Append new list every iteration of the for loop,">>> def chunk(l,n):
...  result=[]
...  for i in range(n):
...    result.append(l[i::n])
...  return result
...
>>> A,B,C=chunk(X,3)
>>> A,B,C
([10, 13, 16, 19], [11, 14, 17], [12, 15, 18])
>>> A,B,C,D=chunk(X,4)
>>> A,B,C,D
([10, 14, 18], [11, 15, 19], [12, 16], [13, 17])
"
Multi-dimensional array indexing using a single dimensional array in Python,"import numpy as np

ncol = 10  # 10 in your case
nrow = 500  # 500 in your case
# just creating some test data:
x = np.arange(ncol*nrow).reshape(nrow,ncol)
y = (ncol * np.random.random_sample((nrow, 1))).astype(int)

print(x)
print(y)
print(x[np.arange(nrow),y.T].T)
"
Doesn't accept the list index?,"players=int(input(""How many players?\n""))
player_names=set()
while len(player_names)<players:
  player_names.add(input(""What is player {}'s name?\n"".format(len(player_names)+1)))
"
Is there a string-collapse library function in python?,"' '.join(my_string.split())
"
How do I find all unique words(no duplicates)?,"new = 'this is a bunch of words'
new2 = 'this is another bunch of words'

unique_words = set(new.split())
unique_words.update(new2.split())
sorted_unique_words = sorted(list(unique_words))
print('\n'.join(sorted_unique_words))
"
Identifying price swings/trends in pandas dataframe with stock quotes,"def get_pivots():
    data = pd.DataFrame.from_csv('tmpData.txt')
    data['swings'] = np.nan

    pivot = data.irow(0).open
    last_pivot_id = 0
    up_down = 0

    diff = .3

    for i in range(0, len(data)):
        row = data.irow(i)

        # We don't have a trend yet
        if up_down == 0:
            if row.low < pivot - diff:
                data.ix[i, 'swings'] = row.low - pivot
                pivot, last_pivot_id = row.low, i
                up_down = -1
            elif row.high > pivot + diff:
                data.ix[i, 'swings'] = row.high - pivot
                pivot, last_pivot_id = row.high, i
                up_down = 1

        # Current trend is up
        elif up_down == 1:
            # If got higher than last pivot, update the swing
            if row.high > pivot:
                # Remove the last pivot, as it wasn't a real one
                data.ix[i, 'swings'] = data.ix[last_pivot_id, 'swings'] + (row.high - data.ix[last_pivot_id, 'high'])
                data.ix[last_pivot_id, 'swings'] = np.nan
                pivot, last_pivot_id = row.high, i
            elif row.low < pivot - diff:
                data.ix[i, 'swings'] = row.low - pivot
                pivot, last_pivot_id = row.low, i
                # Change the trend indicator
                up_down = -1

        # Current trend is down
        elif up_down == -1:
             # If got lower than last pivot, update the swing
            if row.low < pivot:
                # Remove the last pivot, as it wasn't a real one
                data.ix[i, 'swings'] = data.ix[last_pivot_id, 'swings'] + (row.low - data.ix[last_pivot_id, 'low'])
                data.ix[last_pivot_id, 'swings'] = np.nan
                pivot, last_pivot_id = row.low, i
            elif row.high > pivot - diff:
                data.ix[i, 'swings'] = row.high - pivot
                pivot, last_pivot_id = row.high, i
                # Change the trend indicator
                up_down = 1

    print data
"
Python: Find indices which are *not* contained in a list of lists,"import numpy as np

a = np.array(your_list_of_lists)

np.setdiff1d(np.arange(21000), a.flatten())
"
How to convert list of lists (tuples) to string in python with nice delimiters,"import collections

def a2s(a):
    res = ''
    if isinstance(a, collections.Iterable):
        for item in a:
            res +=  str(a2s(item)) + ' '
    else:
        res = str(a)
    return res
"
Change Date Format In Python,"import datetime
import re
p = ""/home/vivek/Desktop/input.txt""
with open(p, ""rb"") as fp:
    content = fp.read()

date_values = set(re.findall(""\[([^]]+)\]"", content))
for i in date_values:
    do = datetime.datetime.strptime(i, ""%b %d %H:%M:%S"")
    content = content.replace(""[%s]""%i, ""%s""%(do.strftime(""%H:%M:%S"")) )

p = ""/home/vivek/Desktop/output.txt""
with open(p, ""wb"") as fp:
    fp.write(content)
"
Place random character in string if not a certain word,"import random

def misspeller(word):
    characters = 'qwertyuioplkjhgfdsazxcvbnm,. '
    rand_word_position = random.randint(-1,len(word))
    rand_characters_position = random.randint(0,len(characters)-1)

    if rand_word_position == -1:
        misspelled_word = characters[rand_characters_position] + word 
    elif rand_word_position == len(word):
        misspelled_word = word + characters[rand_characters_position] 
    else:
        misspelled_word = list(word)
        misspelled_word[rand_word_position] = characters[rand_characters_position]
        misspelled_word = ''.join(misspelled_word)        
    return misspelled_word

s = 'Hello how are you today, [name]?'
misspelled_s = ''
misspelled_list = []
for item in s.split(' '):
    if '[name]' in item:
        misspelled_list.append(item)
    else:
        misspelled_list.append(misspeller(item))
misspelled_s = ' '.join(misspelled_list)
print misspelled_s
"
"Printing first field and (and only) matching fields in record, using awk","#data = [
    #'offspr84 175177 200172 312312 310326 338342 252240 226210 113129 223264',
    #'male28 197175 172200 308312 310338 262338 256252 190226 113129 223219',
    #'female13 197177 172172 312308 318326 342350 240248 210218 129113 267247']

data = [
'offspr85 181177 192160 320312 290362 358330 238238 214178 133129 263223',
'male65 197181 176192 320268 322286 358330 238244 206214 137133 267263',
'female17 181177 160172 280312 362346 350326 230238 126178 129129 223167' ]

for i, line in enumerate(data):
    data[i] = line.split(' ')

for item in data[0]:
    if data[1].count(item) > 0:
        print data[0][0], item
        print data[1][0], item

    if data[2].count(item) > 0:
        print data[0][0], item
        print data[2][0], item
"
How to check if something exists in a postgresql database using django?,"Entry.objects.filter(name='name', title='title').exists()"
Get seconds since midnight in python,"from datetime import datetime

now = datetime.now()
seconds_since_midnight = (now - now.replace(hour=0, minute=0, second=0, microsecond=0)).total_seconds()
"
Pythonic way to get the first AND the last element of the sequence,"a = np.arange(27)
indices = [0, -1]
b = a[indices] # array([0, 26])
"
Python dictionary get multiple values,"keys = ['firstKey', 'secondKey', 'thirdKey']
for key in keys:
    myDictionary.get(key)
"
Python find kmers in large lists,"def kmer_count(k,*args):
  f = {}
  for dna in args: 
    for x in range(len(dna)+1-k):
        kmer = dna[x:x+k]
        f[kmer] = f.get(kmer, 0) + 1
    yield(f)
"
Manipulating dictionary data structures,"import itertools

hand_dict = {'hand': [['hand','ball_1_r1','cake_1'],
                      ['hand','ball_1_r1','cake_2'],
                      ['hand','ball_1_r1','cake_3'],
                      ['hand','ball_1_r2','cake_1'],
                      ['hand','ball_1_r2','cake_2'],
                      ['hand','ball_1_r2','cake_3'],
                      ['hand','ball_2_r1','cake_1'],
                      ['hand','ball_2_r1','cake_2'],
                      ['hand','ball_2_r1','cake_3'],
                      ['hand','ball_2_r2','cake_1'],
                      ['hand','ball_2_r2','cake_2'],
                      ['hand','ball_2_r2','cake_3']]}

for key, value in hand_dict.iteritems():
    # unflatten the entries in ""value""
    for k, v in itertools.groupby(value, lambda row: [row[0], row[1]]):
        k.extend([n[2] for n in v])
        print k
"
Python runtime determine which module to load,"import sys
import importlib

if sys.argv[1] = '-a':
    sys.modules['foo'] = importlib.import_module('foo_PC_A')
else:
    sys.modules['foo'] = importlib.import_module('foo_PC_A')
"
sorting a graph by its edge weight. python,"lst.sort(key=lambda x: (-x[2],x[0])) #relying on tuples
"
Search and filter pandas dataframe with regular expressions,"mask = df[['col1', 'col2']].apply(lambda x: x.str.contains('vhigh|high', regex=True)).any(axis=1)
print df[mask]
"
How can lists in a list be overwritten by new lists in a new list in Python?,"def magic(original, update):
    for i in range(len(update)):
        found_match = False

        for j in range(len(original)):
            # if there's a matching 'key' in an index of the original list
            if update[i][0] == original[j][0]:
                found_match = True
                original[j][1] = update[i][1]

        # if there's no entry to override, place a new entry in
        if not found_match:
            original.append(update[i])
"
Loading a list into seperate Entry widgets,"entries = []
for item in selectiondetails:
    entry = Entry(top1)
    entry.insert(0, item)
    entry.pack()
    entries.append(entry)
"
Numbers with hyphens or strings of numbers with hyphens,"import pandas as pd

df = pd.DataFrame({'foo':['100-200','1000-1100','1100-1200','200-300']})
order = sorted(range(len(df)),
               key=lambda idx: map(int, df.ix[idx, 'foo'].split('-')))
df = df.take(order)
print(df)
"
python: check file extension and prompt again input if invalid file extension,"def ask_exe(prompt='Executable file name? '):
    name = input(prompt)
    if name[-4:] in {'.exe', '.bat'}: return name
    return ask_exe(prompt='The name has to end in "".exe"" or "".bat"", please retry: ')
"
Why is only the innermost of these nested while loops working?,"for a in xrange(5+1): # Note xrange(n) produces 0,1,2...(n-1) and does not include n.
    for b in xrange (3+1):
        for c in xrange (8+1):
            print a,b,c
"
How do I check the content of iterable object?,"import itertools

peek = iterable.next()
iterable = itertools.chain([peek], iterable)
"
Create a list of integers with duplicate values in Python,">>> f = lambda rep, src: reduce(lambda l, e: l+rep*[e], src, [])
>>> f(2, xrange(5))
[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]
>>> f(3, ['a', 'b'])
['a', 'a', 'a', 'b', 'b', 'b']
"
Check list item against multiple lists and remove if present in any of them. Python,"search_set = set().union(searchlst1, searchlst2, searchlst3)
mainlst = [x for x in mainlst if x not in search_set]
"
Print csv input file into a table of columns/rows,"import itertools

row_template = """"""\
{{0:{idx_length}}}{{<1:{teamname_length}}}{{>2:{point_length}}}{{>3:{diff_length}}}{{=4:{goals_length}}}""""""

with open('path/to/output.csv') as inf:  # same filename we used before
    reader = csv.reader(inf)
    pre_process, reader = itertools.tee(reader)

    # fun with pre-processing for field length!
    columns = zip(*pre_process)

    keys = ['teamname_length', 'point_length', 'diff_length', 'goals_length']
    col_widths = {k:0 for k in keys}
    for key, column in zip(keys, columns):
        col_widths['idx_length'] = max([col_widths['idx_length'], len(column) // 10 + 1])
        col_widths[key] = max((col_widths[key],max([len(c) for c in column)))

    col_widths['idx_length'] += 1  # to account for the trailing period

    row_format = row_template.format(**col_widths)
    # puts those field widths in place

    header = next(reader)
    print(row_format("""", *header))  # no number in the header!
    for idx, row in enumerate(reader, start=1):  # let's do it!
        print(row_format(""{}."".format(idx), *row))
"
How to read data from Excel and write it to text file line by line?,"file = open('Output.txt', 'a')"
How to extract part of xml file,"root = ET.parse('file.xml')
tree = root.getroot()
...
"
plotting 3d scatter in matplotlib,"index = 0
for data, curr_color in zip(datasets, colors):
    ax.scatter(np.log2(data[:, 0]), np.log2(data[:, 1]), 
                   np.log2(data[:, 2]), 'o', c=curr_color, label=my_labels[index])
    ax.plot([], [], 'o', c = curr_color, label=my_labels[index])                    
    index += 1
"
Why beautiful soup does not return the results in order?,"for container in soup.select('.results > li'):
    for name in container.select('.prefNameLink, .art-abs-url span'):
        print name.text.strip()
"
Getting adjective from an adverb in nltk or other NLP library,">>> from itertools import chain
>>> from nltk.corpus import wordnet as wn
>>> from difflib import get_close_matches as gcm
>>> possible_adjectives = [k.name for k in chain(*[j.pertainyms() for j in chain(*[i.lemmas for i in wn.synsets('terribly')])])]
['terrible', 'atrocious', 'awful', 'rotten']
>>> gcm('terribly',possible_adjectives)
['terrible']
"
Python: How to create a function? e.g. f(x) = ax^2,"In [1]: def f(x):
   ...:     a = 2.5
   ...:     return a * x**2
   ...: 

In [2]: f(3)
Out[2]: 22.5
"
comparing list of tuple elements python,"all_keys = list(set(a.keys()+b.keys()))
l = list()
for key in sorted(all_keys):
    try:
        l.append(diff_unique(a[key][1],b[key][1]))
    except KeyError:
        l.append(""whatever you want"")
return l
"
Python won't write small object to file but will with large object,"lista = [i for i in range(10)]          

file=open(""file.txt"",""a"") 
file.write(""\n"")
file.write("""".join(str(lista)))
file.close()
"
Smooth contour plot in matplotlib from 3 lists of different size,"X, Y = np.meshgrid(x, y, copy=False)
Z = function(X, Y) # I don't know how you are getting the z values from...

import matplotlib.pyplot as plt
plt.contour(X, Y, Z) # non-filled contour
"
How to iterate through the synset list generated from wordnet using python 3.4.2,"from nltk.corpus import wordnet as wn

synonyms = wn.synsets('good','a')

for synset in synonyms:
    print(synset.name())
    print(synset.pos())
"
python: how to get all members of an array except for ones that match a condition,"ignored_files = ['baz.a',
                 'foo.a',
                 'xyzzy.a',
                 ]
projfiles['buildasm'] = ['#build/'+os.path.splitext(x)[0]+'.asm' for x in projfiles['a'] if x not in ignored_files]
"
Sum float values at each index point in nested lists,"result = []
for i in range(len(fruits)):
    total = 0
    for j in range(len(values)):
        total += values[j][i]
    result.append([total, fruits[i]])
print result
"
python while loop to break up sorted list/array,"hugelist = [(0,0,0), (1,0,0), (3,0,0), (4,1,1), (4,2,2), (5,0,0)]
maxx = 0
deltax = 1
istart = 0
while istart < len(hugelist):
    ifinish = bisect_left(hugelist, (maxx, 0, 0), lo=istart)
    # Now work on the slice hugelist[istart:ifinish].
    # It's possible that istart == ifinish, i.e. that the
    # slice is empty!
    print ""for maxx ="", maxx, hugelist[istart:ifinish]
    maxx += deltax
    istart = ifinish
"
How to read in a file with a mixture of different delimiters using Python csv module?,">>> [line.split() for line in csv.splitlines()]  
[['A', 'B', 'C'], ['D', 'E', 'F']]
"
Removing last character from each element in array (Python),"[word+""$"" for word in words]
"
Logging handlers not working without basicConfig,"logger = logging.getLogger('test.important_module')
logger.setLevel(logging.DEBUG)
"
Sort a list based on a given distribution,"zip(*sorted(zip(sorted(range(len(perc)), key=perc.__getitem__)[::-1],opt)))[1]
"
how to speed up enumerate for numpy array / how to enumerate over numpy array efficiently?,">>> a = numpy.random.random(10)
>>> ind = numpy.indices(a.shape)
>>> numpy.rec.fromarrays([ind[0], a])
rec.array([(0, 0.092473494150913438), (1, 0.20853257641948986),
       (2, 0.35141455604686067), (3, 0.12212258656960817),
       (4, 0.50986868372639049), (5, 0.0011439325711705139),
       (6, 0.50412473457942508), (7, 0.28973489788728601),
       (8, 0.20078799423168536), (9, 0.34527678271856999)], 
      dtype=[('f0', '<i8'), ('f1', '<f8')])
"
Python printing Formatted text with lists nested in dict,"processors_info = ""\n\t\t\t"".join(machine_info['processors'])
print ""Processor(s):\t{}"".format(processors_info)
"
Python use split with arrays,"class SplitableList(list):
    def split(self,sep): return separate(self,sep)

a = SplitableList([1,3,4,6,8,5,3,4,5,8,4,3])
b = a.split([3,4]) # returns desired result
"
Code transformation from BS4 to lxml parser,"tree = xml.getroot()
nsmap = {""ix"":tree.nsmap[""ix""]}

fractions = xml.xpath(""//ix:nonFraction[contains(@name, 'AuditFeesExpenses')]"", namespaces=nsmap)

for fraction in fractions:
    print(fraction.get(""name""))
    print(fraction.text)
"
looping dictionaries of {tuple:NumPy.array},"for i in filarr:
    for j in buiarr:
        for l in datarr:
            a = data[l][(i, j)]
            np.putmask(a, np.abs(a)<.01, np.nan)
            data[l].update({(i, j):a})
"
How to order these lines for a highscore table in Python,"print ''.join(sorted(open('infile'), key=lambda l: -int(ast.literal_eval(l)[1]))),
"
"""Group By"" multiple columns on Large Data in HDFStore","import numpy as np
import pandas as pd
import os

fname = 'groupby.h5'

# create a frame
df = pd.DataFrame({'A': ['foo', 'foo', 'foo', 'foo',
                         'bar', 'bar', 'bar', 'bar',
                         'foo', 'foo', 'foo'],
                   'B': [1,1,1,2,
                         1,1,1,2,
                         2,2,1],
                   'C': ['dull', 'dull', 'shiny', 'dull',
                         'dull', 'shiny', 'shiny', 'dull',
                         'shiny', 'shiny', 'shiny'],
                   'D': np.random.randn(11),
                   'E': np.random.randn(11),
                   'F': np.random.randn(11)})


# create the store and append, using data_columns where I possibily
# could aggregate
with pd.get_store(fname,mode='w') as store:
    store.append('df',df,data_columns=['A','B','C'])

    print ""\ndf:\n%s"" % store['df']

    # get the groups
    A = store.select_column('df','A')
    B = store.select_column('df','B')
    idx = pd.MultiIndex.from_arrays([A,B])
    groups = idx.unique()

    # iterate over the groups and apply my operations
    l = []
    for (a,b) in groups:

        grp = store.select('df',where = [ 'A=%s and B=%s' % (a,b) ])

        # this is a regular frame, aggregate however you would like
        l.append(grp[['D','E','F']].sum())

print ""\nresult:\n%s"" % pd.concat(l, keys = groups)

os.remove(fname)
"
Where to put event handlers and pass variables to it?,"class Schedule_Label(tk.Label):
    def __init__(self, parent, *args, **kwargs):
        tk.Label.__init__(self, parent, *args, **kwargs)
        self.bind(""<Button-1>"", lambda event, p=parent: mouse_1(event, p)) # ---  new ---

...
class Schedule, this class uses Schedule_Label

class MainApp(tk.Frame):
    def __init__(self, parent, *args, **kwargs):
        tk.Frame.__init__(self, parent, *args, **kwargs)

        #class schedule is used here
        ...
        self.schedule_widgets = self.schedule.New(date, stafflist) #------------  new ---
        ...

def mouse_1(event, parent): #---------------------------------------------------  new ---
    r = event.widget.grid_info()['row']
    c = event.widget.grid_info()['column']
    parent.schedule_widgets[(r,c)].configure(state=""active"") #------------------  new ---
if __name__ == ""__main__"":
    root = tk.Tk()
    app = MainApp(root)
    app.pack()
    root.mainloop()
"
Changing axis without changing data (Python),"import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)
plt.xlim([0,5])
plt.ylim([0,5])
plt.plot([0,1,2,3,4,5])
locs, labels = plt.xticks()
labels = [float(item)*5 for item in locs]
plt.xticks(locs, labels)
plt.show()
"
storing for loop iteration data,"files = []
for file in input:
    files.append({
        ""path"": get_path(file),
        ""name"": get_name(file),
        ""size"": get_size(file),
        ...
    })
"
How do I get the position of a result in the list after an order_by?,"from django.db.models import Count

class Model(models.Model):
    score = models.IntegerField()
    ...

    def ranking(self):
        aggregate = Model.objects.filter(score__lt=self.score).aggregate(ranking=Count('score'))
        return aggregate['ranking'] + 1
"
How to access a variable defined inside a function from out side?,"c = None

def fib(n):
    global c

    result = []
    a, b = 0, 1
    while b < n:
        result.append(b)    
        a, b = b, a+b
        c = result
    return result

f100 = fib(100)
print result
print c
"
Python subprocess access result in script,"status = subprocess.run('csvstat --count --c ""col1"" myfile.csv', output=subprocess.PIPE)
output = status.stdout.decode('ascii')
output = output.split()
result = output[-1]
print(result)
"
output of fixture in params in pytest,"import pytest

@pytest.fixture
def make_1():
    return 1

@pytest.fixture
def make_2():
    return 2

@pytest.fixture
def all_makes(make_1, make_2):
    return (make_1, make_2)

def _test_thing(make):
    # Run your test
    pass

def test_main(all_makes):
    for make in all_makes:
        try:
            _test_thing(make)
        except AssertionError:
            print ""Failed for make {}"".format(make)
            raise
"
Iteritems return formatted strings,"def Something(somedict):
    return '.'.join(['%s and %s' % (key, value) for key, value in somedict.iteritems()])
"
How can I select all keys in a python dictionary?,"if input_a not in dictionary.values():
        print('Sorry, try again')
"
Automated Action Birthday =19,"@api.model
def get_age_comp(self):
    to_add = {}
    # getting all male older than 19 years from fci.student
    for student in self.search([('gender','=','m'), ('birth_date', '<=', date.today() - relativedelta(years=20))]):
        to_add[student.name] = student.birth_date
    # ignoring the students already in stat
    for stat in self.env['stat'].search([('name', 'in', to_add.keys())]):
        del to_add[stat.name]
    # adding the new ones
    for name, birth_date in to_add.iteritems():
        stat_model.create({'name': name, 'birth_date': birth_date})
"
numpy squeeze along an axis wont work,"# Random input array
A = np.random.rand(4,3,1,5,1)

# Axis to be removed
rem_axis = 2

# Squeezed output array
A_squeezed = A.reshape(np.delete(A.shape,rem_axis))
"
get array values in python,"array1 = arr1.split(',')
array2 = arr2.split(',')
for i,value in enumerate(array1):
   print value, array2[i]
"
How can I replace named vars in a string in python from an incomplete dictionary?,"my_data_dict = {'first_name':'','last_name':'','blah':'','something_else':''} #defaults with all values from format string
my_data_dict.update(form) #replace any values we got
 msg = """"""<html><p>%(Frist_Name)s</p><p>%(Last_Name)s</p></html> """""" % my_data_dict
"
Python and Floats - Print only the Whole Number,"print ""%g"" % 1.0
"
"Taking proportional samples, no bad sampling","image_counts = [16, 2, 14]
total_images = sum(image_counts)

proportions = [1.0 * i / total_images for i in image_counts]
counts = [int(15 * i) for i in proportions]
if sum(counts) < 15:
    counts[counts.index(min(counts))] += 1
"
Python - Intersection of two lists of lists,"In [4]: intersection = set(tuple(x) for x in l1).intersection(set(tuple(x) for x in l2))

In [5]: [x for x in l1 if tuple(x) in intersection]
Out[5]: [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4]]
"
How can I exit Fullscreen mode in Pygame?,"if e.type is KEYDOWN and e.key == K_w:
    pygame.display.set_mode(size)
if e.type is KEYDOWN and e.key == K_f:
    pygame.display.set_mode(size, FULLSCREEN)
"
Pandas: Insert variable substrings into column B from column A with help of dictionary,"df = pd.DataFrame([""LONG AAPL 2X CBZ"", ""SHORT GOOG 10X VON"", ""BULL AXP UN X3 VON"",""LONG AXP X3 VON""], columns=[""Name""])

maps = {""AAPL"": ""Apple"", ""GOOG"": ""Google""}
signs = {""SHORT"": ""-""}

def split(i):
    spl = i.split()
    a, b, c = spl[0], spl[1], spl[-2]
    val = maps.get(b, b) # if name is not to be replaced keep original
    return ""Tracks  {} with {}{} leverage"".format(val, signs.get(a, """"), c)

df[""Description""]  = df[""Name""].map(split)
"
How to sniff specific packets using python module Scapy?,"#!/usr/bin/env python

from scapy.all import *

def PacketHandler(pkt):     
    if pkt.haslayer(Dot11) and pkt.type == 0 and pkt.subtype == 0xC:
        print ""Deauth packet sniffed: %s"" % (pkt.summary())

sniff(iface=""mon0"", prn = PacketHandler)
"
Why is win32com so much slower than xlrd?,"tests= [
    ""A/B/C/D"",
    ""A//C//"",
    ""A//C//E"",
    ""A///D"",
    ""///D"",
    ]
for test in tests:
    print ""\nTest:"", test
    row = test.split(""/"")
    ncols = len(row)
    # modelling the OP's code
    # (using xlrd-style 0-relative column indexes)
    d = {}
    for cnum in xrange(ncols):
        if row[cnum]:
            k = row[cnum]
            v = (cnum, ncols) #### BUG; should be ncols - 1 (""inclusive"")
            print ""outer"", cnum, k, '=>', v
            d[k] = v
            for cend in xrange(cnum + 1, ncols):
                if row[cend]:
                    k = row[cnum]
                    v = (cnum, cend - 1)
                    print ""inner"", cnum, cend, k, '=>', v
                    d[k] = v
                    break
    print d
    # modelling a slightly better algorithm
    d = {}
    prev = None
    for cnum in xrange(ncols):
        key = row[cnum]
        if key:
            d[key] = [cnum, cnum]
            prev = key
        elif prev:
            d[prev][1] = cnum
    print d
    # if tuples are really needed (can't imagine why)
    for k in d:
        d[k] = tuple(d[k])
    print d
"
"regex does not match only upper case letters, despite being instructed to do so","[A-Z0-9_]+(?==\d).{2,}
"
Accessing dictionary by key in Django template,{{json.key1}}
Limiting Fps in python,"import time
import random
from itertools import count

fps = 5
loop_delta = 1./fps

current_time = target_time = time.clock()
for i in count():
    #### loop frequency evaluation
    previous_time, current_time = current_time, time.clock()
    time_delta = current_time - previous_time
    print 'loop #%d frequency: %s' % (i, 1. / time_delta)

    #### processing
    # processing example that sleeps a random time between 0 and loop_delta/2.
    time.sleep(random.uniform(0, loop_delta / 2.))

    #### sleep management
    target_time += loop_delta
    sleep_time = target_time - time.clock()
    if sleep_time > 0:
        time.sleep(sleep_time)
    else:
        print 'took too long'
"
How to open multiple directories and read the files inside,"directories = ['folder1','folder2',...]
for i,folder in enumerate(directories):
    sys.stdout = open(""citation{}.txt"".format(i), ""w"")

    ...
    [put the rest of your code here]
"
Square root of a negative array Python,"lst = [-1, 3, -8]
results = map(cmath.sqrt, lst)
"
Python regex: How to match an empty string?,"r'foo_(?:(abc)_)?bar'
"
python find if newline is in string,"if errors.text: # skips empty strings
    fixedText = errors.text.split(""\n"")[0]
"
Python: Build a dictionary from a file's contents,"def get_entries( infile ):
    with open( infile, 'rt') as file:
        for line in file:
            name, nums = line.split(':', 1)
            yield name, tuple(int(x) for x in nums.split(','))

# dict takes a sequence of  `(key, value)` pairs and turns in into a dict
print dict(get_entries( infile ))
"
TfidfVectorizer in sklearn how to specifically INCLUDE words,"# calculate the most frequent features first
vect = TfidfVectorizer(vocabulary=emoticons)
matrix = vect.fit_transform(traindata, max_features=10)
top_features = vect.vocabulary_
n = len(top_features)

# insert the emoticons into the vocabulary of common features
emoticons = {"":)"":0, "":P"":1, "":("":2)}
for feature, index in emoticons.items():
    top_features[feature] = n + index

# re-vectorize using both sets of features
# at this point len(top_features) == 13
vect = TfidfVectorizer(vocabulary=top_features)
matrix = vect.fit_transform(traindata)
"
Remove System.out statements from For Loops blocks only,"#!/usr/bin/perl
use strict; use warnings;

clean($_) for map glob($_), @ARGV;

sub clean {
    local @ARGV = @_;
    local $^I = "".bak"";
    my $depth = 0;
    while (<>) {
        $depth ||= /^\s*for\b/ ? ""0 but true"" : 0;
        my $delta = ( ()= /\{/g ) - ( ()= /\}/g );
        $depth += $delta if $depth && $delta;
        $depth = 0 if $depth < 0;
        print unless $depth && /^\s*System\.out\.println/;
    }
    return !!1;
}
"
Python to group elements in specified column,"from collections import Counter
with open(""Input.txt"") as inFile:
    print Counter(["" "".join(line.split()[::2]) for line in inFile])
"
Rounding up with pennies in Python?,"def change(amount):

    # this can be removed if you pass the amount in pennies
    # rather than dollars
    amount = int(round(amount*100))

    values = [2000, 1000, 500, 100, 25, 10, 5, 1]
    denom = ['twenties', 'tens', 'fives', 'ones', 'quarters', 'dimes', 'nickels', 'pennies']

    for i in range(len(values)):
        num = amount / values[i]
        amount -= num * values[i]
        print str(num) + "" "" + denom[i]
"
DataFrame transformation in Python Pandas,"# Split the 'Name' column as a Series, setting the appropriate name and index.
split_names = df['Name'].str.split(', ', expand=True).stack()
split_names.name = 'Name'
split_names.index = split_names.index.get_level_values(0)

# Drop the existing 'Name' column, and join the split names.
df.drop('Name', axis=1, inplace=True)
df = df.join(split_names)
"
Access function from within scripts and from commandline,"class test:
    def quicktest(params):
         pprint(params)

if __name__ == '__main__':
    if sys.argv[1] == ""quicktest"":
        testObj = test()
        testObj.quicktest(sys.argv)
    else:
        print ""Wrong call.""
"
python: run interactive python shell from program,"import pdb

pdb.set_trace()
"
Capture screen and find reference image,"import autopy

needle = autopy.bitmap.Bitmap.open('needle.png')

while True:
        haystack = autopy.bitmap.capture_screen()
        found = haystack.find_every_bitmap(needle)
        print(found)
"
python replace word in text file without going line by line,"import re
with open(""Input.txt"") as open_file:
    data = open_file.read()
for key, value in wordReplacements.iteritems():
    data = re.sub(key, value, data)
with open(""Input.txt"", ""wb"") as open_file:
    open_file.write(data)
"
How do you store formatted strings in a config file in Python?,"from ConfigParser import ConfigParser

config = ConfigParser()
config.read('myconfig.cfg')
print(config.get('Section Name', 'my_string'))
"
Writing List of Strings to Excel CSV File in Python,"import csv
RESULTS = [
    ['apple','cherry','orange','pineapple','strawberry']
]
resultFile = open(""output.csv"",'wb')
wr = csv.writer(resultFile, dialect='excel')
wr.writerows(RESULTS)
"
add new line to output file python,">>> a=['\n:001000 ', '\r:10111 ', ' :000 ', '!:01101111101 ', '"":0010011 ', ""':0010010110 "", '(:00100101111110110 ', '):00100101111110111 ', ',:101100 ', '-:1011011011 ', '.:0100100 ', '0:011011111001101 ', '1:0110111110010 ', '2:1011011000111 ', '3:011011111001110 ']
>>> with open(""Output.txt"", ""wb"") as f:
        for t in a:
            f.write(t + "" "")


>>> with open(""Output.txt"", ""rb"") as f:
        print repr(f.read()) # representation


'\n:001000  \r:10111   :000  !:01101111101  "":0010011  \':0010010110  (:00100101111110110  ):00100101111110111  ,:101100  -:1011011011  .:0100100  0:011011111001101  1:0110111110010  2:1011011000111  3:011011111001110  '
"
Python -- divisibility and count,"def count(n):
    return sum(i//2 for i in range(n, 0, -1))
"
Escape string to be valid python expression,">>> example = 'Foo \'"" \\ Bar'
>>> print(example)
Foo '"" \ Bar
>>> print(example.encode('unicode_escape'))
b'Foo \'"" \\\\ Bar'
>>> example.encode('unicode_escape')
b'Foo \'"" \\\\ Bar'
"
Finding and sorting average in list,"#!/usr/bin/python
import collections
Job = collections.namedtuple('Job', ['title', 'salary'])
salaries = {}
with open(""jobs.txt"", ""r"") as job_file:
    headers = job_file.readline()
    for line in job_file:
        (title, fsal) = line.rstrip().split('\t')
        fsal = float(fsal.replace('""', '').replace(',', ''))
        if title in salaries:
            salaries[title].append(fsal)
        else:
            salaries[title] = [fsal]
average = lambda alist: sum(alist) / len(alist)
average_salaries = [Job(title, average(salaries[title]))
                    for title in salaries]
sorted_salaries = sorted(
    average_salaries, key=lambda job: job.salary, reverse=True)
for i, j in enumerate(sorted_salaries):
    print '%i. %s \t%g' % (i + 1, j.title, j.salary)
"
Most pythonic way to remove tuples from a list if first element is a duplicate,">>> orig = [(1,2),(1,3),(2,3),(3,3)]
>>> list(dict(orig).items())
[(1, 3), (2, 3), (3, 3)]
"
Python DictWriter writing UTF-8 encoded CSV files,"# coding: utf-8
import csv
import cStringIO
import codecs

class DictUnicodeWriter(object):

    def __init__(self, f, fieldnames, dialect=csv.excel, encoding=""utf-8"", **kwds):
        # Redirect output to a queue
        self.queue = cStringIO.StringIO()
        self.writer = csv.DictWriter(self.queue, fieldnames, dialect=dialect, **kwds)
        self.stream = f
        self.encoder = codecs.getincrementalencoder(encoding)()

    def writerow(self, D):
        self.writer.writerow({k:v.encode(""utf-8"") for k,v in D.items()})
        # Fetch UTF-8 output from the queue ...
        data = self.queue.getvalue()
        data = data.decode(""utf-8"")
        # ... and reencode it into the target encoding
        data = self.encoder.encode(data)
        # write to the target stream
        self.stream.write(data)
        # empty queue
        self.queue.truncate(0)

    def writerows(self, rows):
        for D in rows:
            self.writerow(D)

    def writeheader(self):
        self.writer.writeheader()

D1 = {'name':u'马克','pinyin':u'Mǎkè'}
D2 = {'name':u'美国','pinyin':u'Měiguó'}
f = open('out.csv','wb')
f.write(u'\ufeff'.encode('utf8')) # BOM (optional...Excel needs it to open UTF-8 file properly)
w = DictUnicodeWriter(f,sorted(D.keys()))
w.writeheader()
w.writerows([D1,D2])
f.close()
"
how does the python min function works,">>> min([3, 5, 2, 1, 5])
1
>>> d = {'a': 1, 'b': 2, 'c': 3}
>>> for i in d:
...     print i
b
c
a
>>> d.get('b')
2
>>> d.get('d')  # Nothing is returned
>>> min(d, key=d.get)
'a'
"
pandas find strings in common among Series,"masked = map(lambda x: any(_ in x for _ in w.apply(str.lower)), \
             df['Tweet'].apply(str.lower))
"
Is there a Python 'shortcut' to define a class variable equal to a string version of its own name?,"#!/usr/bin/env python


import sys


def nifty_thing(*names):
    frame = sys._getframe(1)
    locals = frame.f_locals

    for name in names:
        locals[name] = None


class foo(object):

    nifty_thing(""foo"", ""bar"", ""baz"")


f = foo()

print f.foo, f.bar, f.bar
"
"Make a list of 50 random numbers in the range 1-50, such that adjacent numbers are not within 15 of each other","import random

def get_shuffled_list(length):
    output = range(1, length+1)
    i = 0
    sanity = 0

    while i < length and sanity == 0:
        random.shuffle(output)
        for i in range(1, length):
            sanity = length - i + 1

            while abs(output[i-1] - output[i]) <= 15 and sanity:
                output.append(output[i])
                del output[i]
                sanity -= 1

            if sanity == 0:
                break

    return output

print get_shuffled_list(50)
"
How to update a counter variable when reading a file in Python?,"file_name = input(""\nEnter name of data file: "")
text_file = open(file_name,'r')
latitude = None
longitude = None

for line in text_file:
   line = line.strip()
   rows = line.split("" "")
   latitude_two = float(rows[0])
   longitude_two = float(rows[1])
   if latitude != None:
       distance = float(calculate_distance(latitude,longitude,latitude_two,longitude_two))
       print(distance)

   longitude = longitude_two
   latitude = latitude_two
"
How to implement c++ type structures in python?,"class xyz(object):
    def __init__(self, a, b, c, d, e):
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        self.e = e

>>> my_var = xyz(0x64, 0x32, 0x16, True, 'a')
>>> print my_var.a
100
"
Why none of Kivy's layouts work as expected?,"<SubjectButton@Button>:                                                                                                                            
    # size rules deleted                                                                                                                           

BoxLayout:                                                                                                                                         

    orientation: ""vertical""                                                                                                                        

    Label:                                                                                                                                         
        text: ""Choose Subject:""                                                                                                                    
        font_size: ""16sp""                                                                                                                          
        bold: True                                                                                                                                 
        halign: ""left""                                                                                                                             
        valign: 'middle'                                                                                                                           
        text_size: self.size                                                                                                                       


    BoxLayout:                                                                                                                                     
        Widget:                                                                                                                                    
            size_hint_x: None                                                                                                                      
            width: 10                                                                                                                              
        BoxLayout:                                                                                                                                 

            orientation: ""vertical""                                                                                                                
            padding_horizontal: 20                                                                                                                 

            SubjectButton:                                                                                                                         
                text: ""Subject 1""                                                                                                                  

            SubjectButton:                                                                                                                         
                text: ""Subject 2""                                                                                                                  

            SubjectButton:                                                                                                                         
                text: ""Subject 3""                                                                                                                  

            SubjectButton:                                                                                                                         
                text: ""Subject 4""                                                                                                                  
        Label:                                                                                                                                     
            text: 'free space'              
"
Does Python have anonymous classes?,"class Bunch(object):
    def __init__(self, **kwds):
        self.__dict__.update(kwds)

    def __eq__(self, other):
        return self.__dict__ == other.__dict__
"
Python 3 Print Variables,"'http://{username}:{password}@{server}:{port}'.format(
    username=username,
    password=password,
    server=server,
    port=port
)
"
Fasted Python way to bulk csv convert outside of using pandas,"import numpy
import timeit


def makebigfile(outname):
    data = numpy.random.standard_normal((100000, 7))
    numpy.savetxt(outname, data, delimiter="","")


def csvdump(files, original=True):

        date, time, opens, high, low, close, vol = numpy.genfromtxt(str(files)+'.csv', unpack=True, delimiter=',')
        if original:
            for line in high:
                x=str(1/line)
                outr=open(str(files)+""inverse-original.txt"", ""a"")
                outr.write(x)
                outr.write('\n')
        else:
            numpy.savetxt(str(files)+""inverse-savetxt.txt"",1/high)



makebigfile('foo.txt')


print timeit.timeit(stmt='__main__.csvdump(""foo"",True)',setup='import __main__',number=1000)
print timeit.timeit(stmt='__main__.csvdump(""foo"",False)',setup='import __main__',number=1000)
"
Serializing a Python namedtuple to json,"from collections import namedtuple
from json import JSONEncoder

class MyEncoder(JSONEncoder):

    def _iterencode(self, obj, markers=None):
        if isinstance(obj, tuple) and hasattr(obj, '_asdict'):
            gen = self._iterencode_dict(obj._asdict(), markers)
        else:
            gen = JSONEncoder._iterencode(self, obj, markers)
        for chunk in gen:
            yield chunk

class foobar(namedtuple('f', 'foo, bar')):
    pass

enc = MyEncoder()
for obj in (foobar('a', 1), ('a', 1), {'outer': foobar('x', 'y')}):
    print enc.encode(obj)

{""foo"": ""a"", ""bar"": 1}
[""a"", 1]
{""outer"": {""foo"": ""x"", ""bar"": ""y""}}
"
Create dictionary from lists of keys and multiple values,"dict([('Name', 'Joe'), ('Age', 22)])"
How to strip punctuation from a text file,"remove = dict.fromkeys(map(ord, '\n ' + string.punctuation))
f.translate(remove)
"
How to get the index of an integer from a list if the list contains a boolean?,"next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)"
Remove odd elements from list in Python,"del lst[1::2]
"
Python: path between nodes in directed graph,"import collections
import itertools as IT

def find_shortest_path(graph, start, end, path=[]):
    path = path + [start]
    if start == end:
        return path
    if start not in graph:
        return None
    shortest = None
    for node in graph[start]:
        if node not in path:
            newpath = find_shortest_path(graph, node, end, path)
            if newpath:
                if not shortest or len(newpath) < len(shortest):
                    shortest = newpath
    return shortest

G={'a':['b','c'], 'c':['d']}

for node1, node2 in IT.combinations(list('abcd'), 2):
    print('{} -> {}: {}'.format(node1, node2, find_shortest_path(G, node1, node2)))
"
Python Dataframe rolling_sum with numbers not date,"import pandas as pd
import numpy as np

df = pd.DataFrame({'Days': [1, 4, 5, 9, 1, 4, 5, 9],
                   'IS_TRUE': [1, 1, 0, 1, 1, 1, 0, 1],
                   'person_num': [1, 1, 1, 1, 2, 2, 2, 2]})

def window(group):
    diff = np.subtract.outer(group.Days, group.Days)
    group['IS_TRUE_7day_WINDOW'] = np.dot((diff > 0) & (diff <= 7),
                                          group['IS_TRUE'])
    return group

f.groupby('person_num').apply(window)
"
Python - Convert list of single key dictionaries into a single dictionary,">>> from itertools import chain, imap
>>> from operator import methodcaller
>>> 
>>> dict(chain.from_iterable(map(methodcaller('iteritems'), lst)))
{'1': 'A', '3': 'C', '2': 'B'}
"
Automatic in python,"data = 'EV|0|EV|1|OD;OD|0|OD|1|EV'

# output: {even: {0:even, 1:odd}, odd: {0:odd, 1:even}}

information = data.split(';')
output = {}
for piece in information:  # Each piece is like EV|0|EV|1|OD
    parts = piece.split('|')
    head = parts[0]  # Our dictionary key, eg. [EV]
    tail = parts[1:]  # Stuff that makes up the inner dict, e.g. [0, EV, 1, OD]

    # Use step = 2 to get key:value pairs from tail:
    inner = {tail[i]: tail[i+1] for i in range(0, len(tail)-1, 2)}

    if head not in output:
        output[head] = inner
    else:
        # What do we do here?
        pass

print(output)
"
Dividing a square into N smaller squares and finding center coordinates of the N smaller squares,"import numpy as np
dx = 2.
dy = 2.
N = 5
centers = np.mgrid[dx/2:N*dx:dx, dy/2:N*dy:dy]
"
"Tkinter, enclosing_frame.grid_propogate(0) to prevent resizing also prevents updating label text","from tkinter import *
root = Tk()
canv = Canvas(root,height=17)
canv.grid_propagate(0)
lbl1 = Label(canv,text=""First line\nSecond Line"")
lbl1.grid(column=0,row=0)
canv.grid(column=0,row=0)
root.mainloop()
"
Find rpm dependencies using python yum/rpm API?,"import os
import rpm
import sys

ts = rpm.TransactionSet()
mi = ts.dbMatch('name', sys.argv[1])
for ind in range(mi.count()):
    h = mi.next()
    for dep in h[rpm.RPMTAG_REQUIRENAME]:
        print dep
"
Python regex equivalent of bash's {1..4},"r = ['text' + str(i) + '.txt' for i in range(19, 22)]
[x for x in words if x in r]
"
How can I check to see the number of iterations Newton's method takes to run?,"def newtons_method(x_init, fn, max_iter=100):
    """"""
    returns: approx. val of root of the function passed in, fn;
    pass in: x_init, initial value for the root; 
    max_iter, total iteration count not exceeded;
    fn, a function of the form: 
    def f(x): return x**3 - 2*x
    """"""
    x = x_init
    eps = .0001
    # set initial value different from x_init so at lesat 1 loop
    x_old = x + 10 * eps        
    step = .1
    c = 0
    # (x - x_old) is convergence criterion
    while (abs(x - x_old) > eps) and (c < max_iter):
        c += 1
        fval = fn(x)
        dfdx = (fn(x + step)) - fn(x) / step
        x_old = x
        x = x_old - fval / dfdx
    return x, c
"
How to sort an itertools grouper array in python,"sorted(lst, key=lambda x: x[1])
"
Python selenium webdriver click functionality,"# assume driver is an instance of WebDriver
# NOTE: this code is untested
driver.find_element_by_xpath("".//a[@href='http://www.testsite.com/pageOne.html']"")
"
How to add all the elements inside loop in Python?,"def get_file_sizes(parent_dir, files):
    import os
    return sum([os.path.getsize(os.path.join(parent_dir, f)) for f in files])
"
Python dealing with dates and times,"def previousym(adate):
    y = adate.year
    m = adate.month - 1
    return (y, m) if m else (y - 1, 12)

import os, datetime
def cym(filename):
    ts = os.stat(filename).st_ctime
    dt datetime.date.fromtimestamp(ts)
    return cym.year, cym.month

def fileswithcym(dirname, whatym):
    results = []
    for f in os.listdir(dirname):
        fullname = os.path.join(dirname, f)
        # if you need to avoid subdirs, uncomment the following line
        # if not os.path.isfile(fullname): continue
        if whatym == cym(fullname):
            results.append(fullname)
    return results
"
How to read just lists in a text file in Python?,"import ast
with open(""test.txt"") as f:
    user_info = ''
    for i,line in enumerate(f):
        user_info += line
        if  i==5:
            break
    registros = [ast.literal_eval(x) for x in f if x.startswith('[')]
"
PyYAML automatically converting certain keys to boolean values,"class Loader(Reader, Scanner, Parser, Composer, Constructor, Resolver):

    def __init__(self, stream):
        Reader.__init__(self, stream)
        Scanner.__init__(self)
        Parser.__init__(self)
        Composer.__init__(self)
        Constructor.__init__(self)
        Resolver.__init__(self)
"
"Find duplicates in string, and return single result for only duplicates","words = re.findall('\w+', string)
"
Numpy tensor: Dot product along third axis,"np.tensordot(arr,w,axes=([2],[0]))
"
Read HEAD contents from HTML,"from BeautifulSoup import BeautifulSoup
import urllib2

page = urllib2.urlopen('http://www.example.com')
soup = BeautifulSoup(page.read())
print soup.find('head')
"
Speed up loop to fill an array with closest values from another array,"def fast_samp_2(refs, lim=10000, blocksize=10000):

    samp = np.random.choice(refs, size=blocksize, replace=True)
    samp_sum = np.cumsum(samp)

    # is the sum of our current block of samples >= lim?
    while samp_sum[-1] < lim:

        # if not, we'll sample another block and try again until it is
        newsamp = np.random.choice(refs, size=blocksize, replace=True)
        samp = np.hstack((samp, newsamp))
        samp_sum = np.hstack((samp_sum, np.cumsum(newsamp) +  samp_sum[-1]))

    last = np.searchsorted(samp_sum, lim, side='right')
    return samp[:last + 1]
"
looping over multiple patterns in python regular expressions,"import re

counter = None

def datacnv( st ):
    global counter
    return ""<rvn=\""""+ next(counter) +""\"">"" + st + ""</rvn>\n""

def rowcnv( st ):
    global counter

    counter = iter("""".join([str(x) for x in range(1,10)]))

    st = re.sub(""(?i)<R>(.*?)</R>"", lambda m: datacnv(m.group(1)), st)

    return ""<row>\n"" + st + ""</row>\n""

def tblcnv( st, val ):
    Tcolspec = ''
    Endval = int(val) + 1
    for i in range(1, Endval):
        l = str(i)
        Tcolspec += ""<colspec col='"" + l + ""' colwidth=''/>\n""
    Theader = re.sub(r""(?i)<table.*?>"",""\n<table ct='"" + val +""'>\n"" + Tcolspec + ""\n"", st)

    Theader = re.sub(""(?i)<ROW>(.*?)</ROW>"", lambda m: rowcnv(m.group(1)), Theader)

    return Theader

in_data = open(""in.txt"", ""r"")
out_data = open(""out.txt"", ""w"")
Rdata = in_data.read().lower()
in_data.close()
Rval = Rdata.replace(""\n"", "" "")

Rval = re.sub(""(?i)(<TABLE.*?cols=\""(\d+).*?</TABLE>)"", lambda m: tblcnv(m.group(1), m.group(2)), Rval)
out_data.write(Rval)

out_data.close()
"
Get only numbers from string in python,"price = just.split("":"")[1]
"
Method to convert object from class to subclass in Python,"from math import sqrt    

class Vector(object):

    def __init__(self, x, y, z, normalized=False):
        self.v = [x, y, z]
        if normalized in [True, False]:
            self.normalized = normalized
        else:
            raise Exception(""Please set normalized to either True or False"")

    def __repr__(self):
        return ""Vector ({}, {}, {})"".format(*self.v)

    def normalize(self):
        x,y,z = self.v
        norm = sqrt(x**2 + y**2 + z**2)
        self.v = [x/norm, y/norm, z/norm]
        self.normalized = True

    def isNormalized(self):
        return self.normalized

    # other methods follow  

v1 = Vector(10, 20, 30)
print v1.isNormalized()
v1.normalize()
print v1.isNormalized()

v2 = Vector(40, 50, 60, normalized=True)
print v2.isNormalized()
"
"Sort string-matrix [[a, b, c], ...] by a, -c, b, maintaining order?","def sort_key(a):
    return a[0], -int(a[2]), a[1]

for i in sorted(m, key=sort_key): print i
"
calculate dates in python,"import datetime as dt

def main(filename, from_str, to_str):
    date_from = dt.datetime.strptime(from_str, ""%Y-%m-%d %H:%M"")
    date_to = dt.datetime.strptime(to_str, ""%Y-%m-%d %H:%M"")
    print date_from, date_to
    days = (date_from - date_to).days
    print days
"
Index of \n in Python list,">>> lst = ['abc', '\n', 'def', 'ghi', '\n', 'jkl']
>>> [i for i, val in enumerate(lst) if val == '\n']
[1, 4]
"
Python: Check if uploaded file is jpg,"from PIL import Image
def is_jpg(filename):
    try:
        i=Image.open(filename)
        return i.format =='JPEG'
    except IOError:
        return False
"
GAE load data into datastore without using CSV,"class JSONLoader(bulkloader.Loader):
    def generate_records(self, filename):
        for item in json.load(open(filename)):
            yield item['fields']
"
Using user defined variables/functions in eval [Python 3.4.2]?,"def calculator(user_input):
    global ans
    if any(c not in config.valid_cal_chars for c in user_input):
        print(""- Invalid Equation | Bad characters"")
        return
    sys.stdout.write(""calculating "" + ""-"".join(gfx.load_sequence))
    time.sleep(0.1)
    print ("" | 100%"")
    try:
        ans = eval(user_input, {'ans':ans,'sqrt':sqrt},{})
    except (SyntaxError, ZeroDivisionError, NameError, TypeError, ValueError):
        print (""- Invalid Equation | Error"")
        return
    config.ans = ans
    print (ans)
"
Python: adding xml schema attributes with lxml,"import lxml.etree as ET
import lxml.builder
import glob

dbchangelog = 'http://www.host.org/xml/ns/dbchangelog'
xsi = 'http://www.host.org/2001/XMLSchema-instance'
E = lxml.builder.ElementMaker(
    nsmap={
        None: dbchangelog,
        'xsi': xsi})

ROOT = E.databaseChangeLog
DOC = E.include

# grab all the xml files
files = [DOC(file=f) for f in glob.glob(""*.xml"")]

the_doc = ROOT(*files)
the_doc.attrib['{{{pre}}}schemaLocation'.format(pre=xsi)] = 'www.host.org/xml/ns/dbchangelog'

print(ET.tostring(the_doc,
                  pretty_print=True, xml_declaration=True, encoding='utf-8'))
"
Select rows from a DataFrame based on values in a column in pandas,"print(df.loc[df['B'].isin(['one','three'])])
"
Need help to parallelize a loop in python,"import numpy
import multiprocessing

x = numpy.linspace(0,20,10000)
p = multiprocessing.Pool(processes=4)

print p.map(numpy.sqrt, x)
"
Combinations between values of lists,"from itertools import permutations

data = {'letters': ['a','b','c'],
        'numbers': ['one','two'],
        'others': ['here','there']}

poss = [(v,k) for k, vv in data.items() for v in vv]
results = (list(zip(*p)) for p in permutations(poss, 2))
results = [p[0] + ('-'.join(p[1]),) for p in results]
"
keeping same formatting for floating point values,"import re

def parse_float(str):
  re_float = re.compile(r'(-?)(\d+)\.(\d+)')
  grps = re_float.search(str)
  sign, decimal, fraction = grps.groups()
  float_val = float('%s%s.%s' % (sign, decimal, fraction))
  total_len = len(grps.group(0))
  print '%*.*f'  % (total_len, len(fraction), float_val)

parse_float('1.2345678')
parse_float('1.234')
parse_float('1.2340000')
"
Looking to see if an item in a list is in a string Python 2.7,"if any(x in email for x in domain):
    # good: email contains one of the domains
"
Disable Caching for Python,"import glob
import subprocess
filelist=glob.glob('/path/to/file/*.fileending')
for dat in filelist:    
    subprocess.call(""cachedel ""+dat, shell=True)
"
Button Colour Doesn't Change in Function (Python tkinter),"def flash(event):
    b.config(bg = 'orange')
    b.update_idletasks()
    sleep(1)
    b.config(bg='green')
"
Function that insert words into text,"  solution=' like '.join(map(' '.join, zip(*[iter(text.split())]*3)))
"
Python add a string to all set's elements,">>> s = {'s1','s2','s3'}
>>> {x + '!' for x in s}
set(['s1!', 's2!', 's3!'])
"
isinstance check if any of the variables has a certain class,"def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
"
Python: Simplify inheritor method,"class Base:
    def do( self ):
        self._member1 = 0
        self._member2 = 1

def add_do(a, b):
    def deco(cls):
        original_do = cls.do
        def do(self):
            original_do(self)
            self._member3 = a
            self._member4 = b
        cls.do = do
        return cls
    return deco

@add_do(0, 1)
class Derived1(Base): pass

@add_do(2, 3)
class Derived2(Base): pass

@add_do(9, 3)
class Derived3(Base): pass
"
Check if Rhythmbox is running via Python,"bus = dbus.SessionBus()
if bus.name_has_owner('org.gnome.Rhythmbox'):
    # ...
"
dsl in python example needed like in ruby,"from pyparsing import *

def give_desired_output(s):
    return ""desired""

TAKE_THIS = Suppress(""take_this"") + Suppress(Word(printables))
AND_PROC = Suppress(""and_process_it"")
AND_GIVE = Keyword(""and_give_me_the_output"")
AND_GIVE.setParseAction(give_desired_output)

LANGUAGE_LINE = TAKE_THIS | AND_PROC | AND_GIVE

LANGUAGE = ZeroOrMore(LANGUAGE_LINE)


def parse_language(text):
    lst = LANGUAGE.parseString(text)
    assert len(lst) == 1  # trivial language returns a single value
    return lst[0]

if __name__ == ""__main__"":
    from_a_dsl_file = \
""""""
   take_this 'abc'
   and_process_it
   and_give_me_the_output
""""""

    print(parse_language(from_a_dsl_file))  # prints the word: desired
"
Path manipulation,"import os

path = '/home/chris/sources/a/b/c/d/e/test.py'.split('sources')
if len(path) > 1:
    print os.path.join(path[0], 'sources')
"
"Printing an List without brackets, without quotations, without commas and additional spacing","print(' '.join(map(str, attrlist)))
"
Python how to read lines and how to output the new lines,"buffer = ''
while True:
    line = raw_input()
    if not line: break

    buffer += '\n' + line
print(buffer)
"
converting list to dict and averaging the values of duplicates in python,"from collections import defaultdict
l = [('a',1),('b',2),('a',3)]
temp_d = defaultdict(list)
for pair in l:
    temp_d[pair[0]].append(pair[1])
#CHANGES HERE
final = dict((k,sum(v)/len(v)) for k,v in temp_d.items())
print(final)
>>> 
{'a': 2, 'b': 2}
"
Python3 for loop with multiprocessing,"from multiprocessing import Pool

def f(x):
    return (x[0], x[1]*x[1])

if __name__ == '__main__':
    p = Pool(5)
    d = {'a':1, 'b':2, 'c':3}
    print list(d.iteritems())
    print(p.map(f, d.iteritems()))
"
Why the id of an object would change depending on the line in the python shell,">>> a = A()
>>> assert a.a.__self__ is a
"
Python: How do I use DictReader twice?,"with open(""blurbs.csv"",""rb"") as f:
    blurbs = csv.DictReader(f, delimiter=""\t"")
    for row in blurbs:
        print row
    f.seek(0)
    for row in blurbs:
        print row
"
Find all files in directory with extension .txt in Python,"import os
for file in os.listdir(""/mydir""):
    if file.endswith("".txt""):
        print(file)
"
Python returning empty lists,">>> a = ['a', 'b', 'c']
>>> e = 'd'
>>> a.append(e)
>>> a
['a', 'b', 'c', 'd']
>>> flist=[]
>>> flist.append(a)
>>> flist
[['a', 'b', 'c', 'd']]
>>> del a[-1]
>>> a
['a', 'b', 'c']
>>> flist
[['a', 'b', 'c']]
"
Numpy: multiplying with NaN values without using nan_to_num,"masked_a = np.ma.masked_invalid(a)

result2 = masked_a * b
"
Extract link from XPath using Selenium Webdriver and Python?,"element = driver.find_element_by_xpath("".//*[@id='toplevel_page_menu']/ul/li[2]/a"")
href = element.get_attribute('href')
print href
"
Python: Split string with multiple delimiters,"re.split('; |, ', str)"
"Python 2.7 : Tkinter, How to use the bind method?","class LabelUpdater(object):
    def create_variabletext_intlabel(self,root,col,row):
        val=IntVar()
        self.label=label=Label(root,textvariable=val)
        label.grid(column=col,row=row)
        return val, label

    #this is the function creating the entry
    def create_entry_string(self,root,width,col,row,columnspan,rowspan):
        val=StringVar()
        entry=ttk.Entry(root,width=width,textvariable=val)
        entry.grid(column=col,row=row,columnspan=columnspan,rowspan=rowspan)
        entry.bind(""<Any-KeyPress>"",self.bind_entry)
        #Here is my problem, when I call the function bind_entry.
        return val, entry

     def bind_entry(self,event):
        self.label.set(m.counting_point(char(event))) 

#At this point, I don't understand your code anymore since I don't know what g
#is or how it's create_entry_string method calls your create_entry_string function...
#I'll assume that the module where g's class is defined imports this file...
#If that's how it works, then the following may be ok, although probably not because
#of circular imports...

container=LabelUpdater()
create_variabletext_intlabel=container.create_variabletext_intlabel
create_entry_string=container.create_entry_string

val_entry_word, entry_word =g.create_entry_string(root,15,1,1,1,1) #somehow calls create_variabletext_intlabel which is mapped to container.create_variable_intlabel???

# I call the function create_variabletext_intlabel in another file
# initiating all the widget for the GUI
val_points,label_points=g.create_variabletext_intlabel(root,1,2)
"
Web crawler - following links,"for url in my_list:
    soup = BeautifulSoup(urllib2.urlopen(url).read())
    # then parse each page individually here
"
BeautifulSoup Iteration not working,"tbl = soup.find(""table"")
out = (tag.find('a') for tag in tbl.find_all(""tr"")[6:])

for a in out:
    print(a[""href""])
"
Get IP Mask from IP Address and Mask Length in Python,">>> import ipaddr
>>> mask = ipaddr.IPv4Network('192.192.45.1/25')
>>> mask.netmask
IPv4Address('255.255.255.128')
>>>
"
Parsing a file that looks like JSON to a JSON,"import ast
import json
import re

pat = re.compile(r""""""(?P<key>\w+)\s*:\s*(?P<value>.+)$"""""")

data_dict = {}
with open('log.txt', 'rU') as f:
    braces = 0
    for line in (line.strip() for line in f):
        if braces > 0:
            match = pat.search(line)
            if match and len(match.groups()) == 2:
                key = match.group('key')
                value = ast.literal_eval(match.group('value'))
                data_dict[key] = value
        elif '{' in line:
            braces += 1
        elif '}' in line:
            braces -= 1
        else:
            pass  # ignore line

print(json.dumps(data_dict, indent=4))
"
Python time format with three-digit hour,"hours = (0 if time_string.split("":"")[0] == ""000"" else int(time_string.split("":"")[0].lstrip(""0"")) * 3600)
mins = (0 if time_string.split("":"")[1] == ""00"" else int(time_string.split("":"")[1].lstrip(""0"")) * 60)
secs = (0 if time_string.split("":"")[2] == ""00"" else int(time_string.split("":"")[2].lstrip(""0"")))

return hours + mins + secs
"
Best way to separate data into 3 classes,"import numpy as np

data = [['6.5', '3.2', '5.1', '2.0', 'Iris-virginica'],
['6.1', '2.8', '4.0', '1.3', 'Iris-versicolor'] ,
['4.6', '3.2', '1.4', '0.2', 'Iris-setosa'],
['6.0', '2.2', '4.0', '1.0', 'Iris-versicolor'],
['4.7', '3.2', '1.3', '0.2', 'Iris-setosa'],
['6.7', '3.1', '5.6', '2.4', 'Iris-virginica']]

filtered = [map(float, item[:4]) for item in data if item[4] == 'Iris-virginica']
print 'mean', np.mean(filtered, axis=0)
print 'var ', np.var(filtered, axis=0)
"
Why does the code : os.popen('move *.bin tmp) only move one file?,"import glob, shutil
for f in glob.glob('c:/files/*.bin'):
    shutil.move(f, 'c:/tmp/')
"
Sharing data among instances of a mapping function in Python,"x = 5
def something(d):
    d['x'] = 10
something(locals())
print(x)   # now prints 10
"
"How do I change an element in a list, and keep a copy of the original list?",">>> a = [1, 2, 3, 4]
>>> b = a
>>> a
[1, 2, 3, 4]
>>> b
[1, 2, 3, 4]
>>> a[2] = 'x'
>>> a
[1, 2, 'x', 4]
>>> b
[1, 2, 'x', 4]
"
pandas series containing arrays,"import pandas as pd

s = pd.Series([""['cheese', 'milk']"", ""['yogurt', 'cheese']"", ""['cheese', 'cream']""])

#remove []
s = s.str.strip('[]')
print s
0      'cheese', 'milk'
1    'yogurt', 'cheese'
2     'cheese', 'cream'
dtype: object

df = s.str.split(',', expand=True)
#remove ' and strip empty string
df = df.applymap(lambda x: x.replace(""'"", '').strip())
print df
        0       1
0  cheese    milk
1  yogurt  cheese
2  cheese   cream

l = df.values.flatten()
print l.tolist()
['cheese', 'milk', 'yogurt', 'cheese', 'cheese', 'cream']
"
Conditional regular expression to split on commas,"import re
split_on_commas = re.compile(r'[^,]*"".*""[^,]*|[^,]+|(?<=,)|^(?=,)').findall
"
Incrementing variable counter when iterating through a list,"cities = {""London"": (10, 15), ""New York"": (20, 50)}
def find_closest_city(location):
    ...

city_count = collections.Counter([find_closest_city(el) for el in elements])
"
Translating PHP’s preg_match_all to Python,"import re
links = re.findall('(https?://\S+)', text)
"
How do I use BeautifulSoup to move tag contents from one soup to a template soup,"from bs4 import BeautifulSoup

html = """"""<html><body><div id=""here""></div></body></html>""""""

soup = BeautifulSoup(html)
div = soup.find(""div"", id=""here"")

html2 = """"""<html><body><script   src=""//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js""></script>
           <script src=""//cdn.sstatic.net/Js/stub.en.js?v=283ea58c715b""></script>
           <link rel=""stylesheet"" type=""text/css""  href=""//cdn.ss  tatic.net/stackoverflow/all.css?   v=71d362e7c10c"">
           </body></html>""""""

soup1 = BeautifulSoup(html2)
value = soup1.body.extract()

div.append(value)
print div
"
python 2.7 XML lxml namespace prefix attribute issues,"RDFNS = ""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
root = lxml.etree.Element('{%s}RDF' % RDFNS, nsmap={'rdf': RDFNS})
rdf_description = lxml.etree.SubElement(
    root,
    '{%s}Description' % RDFNS,
    {""{%s}about"" % RDFNS: ""http://purl.org/NET/FOO""})
"
"How to convert a Python datetime.datetime.utctime() to an Obj-C NSDate, and back again?",">>> datetime.datetime.utcnow().strftime(""%Y-%m-%dT%H:%M:%SZ"")
'2012-03-08T00:07:31Z'
"
nesting of properties vs setters and getters in python,"class OurAttr(object):
    def __init__(self):
        self._log = False

    @property
    def log(self):
        return self._log

    @log.setter
    def log(self, value):
        raise AttributeError(""Cannot set 'log' attribute directly."")

    @log.deleter
    def log(self):
        raise AttributeError(""Cannot delete 'log' attribute directly."")

    def setLog(self):
        self._log = True
        print ""Log is"", self._log

    def clearLog(self):
        self._log = False
        print ""Log is"", self._log

class OurClass(object):
    def __init__(self):
        self.OurAttr = OurAttr()

oc = OurClass()
oc.OurAttr.setLog()
oc.OurAttr.clearLog()
oc.OurAttr.log = False   # Raises exception
"
Get last element of type string in a list,"[el for el in lst if isinstance(el, given_type)][-1]
# Gives the last element if there is one, else IndexError
"
"Python objects confusion: a=b, modify b and a changes!",">>> a = range(3)
>>> b = a[:]                  # make b a new copy of a
>>> b.append(3)
>>> a, b                      # a is left unchanged
([0, 1, 2], [0, 1, 2, 3])
"
Remove duplicate rows in CSV comparing data in only two columns with Python,"with open(""test.csv"") as f, open(""file_out.csv"",""w"") as out:
    from collections import Counter
    header = next(f) # get header
    next(f) # skip blank line
    counts = Counter(tuple(map(str.lower,line.split("","", 2)[:2])) for line in f)
    f.seek(0) # back to start of file
    next(f), next(f) # skip again
    out.write(header) # write original header ?
    out.writelines(line for line in  f
                   if counts[map(str.lower,line.split("","", 2)[:2])] == 1)
"
Fastest way to compare and replace key value pairs in Python,"import multiprocessing as mp

def split_seq(seq, num_pieces):
    # Splits a list into pieces
    start = 0
    for i in xrange(num_pieces):
        stop = start + len(seq[i::num_pieces])
        yield seq[start:stop]
        start = stop   

def detect_active_keys(keys, data, queue):
    # This function MUST be at the top-level, or
    # it can't be pickled (multiprocessing using pickling)
    queue.put([k for k in keys if k in data])

def mass_replace(data, mappings):
    manager = mp.Manager()
    queue = mp.Queue()
    # Data will be SHARED (not duplicated for each process)
    d = manager.list(data) 

    # Split the MAPPINGS KEYS up into multiple LISTS, 
    # same number as CPUs
    key_batches = split_seq(mappings.keys(), mp.cpu_count())

    # Start the key detections
    processes = []
    for i, keys in enumerate(key_batches):
        p = mp.Process(target=detect_active_keys, args=(keys, d, queue))
        # This is non-blocking
        p.start()
        processes.append(p)

    # Consume the output from the queues
    active_keys = []
    for p in processes:
        # We expect one result per process exactly
        # (this is blocking)
        active_keys.append(queue.get())

    # Wait for the processes to finish
    for p in processes:
        # Note that you MUST only call join() after
        # calling queue.get()
        p.join()

    # Same as original submission, now with MUCH fewer keys
    for key in active_keys:
        data = data.replace(k, mappings[key])

    return data

if __name__ == '__main__':
    # You MUST call the mass_replace function from
    # here, due to how multiprocessing works
    filenames = <...obtain filenames...>
    mappings = <...obtain mappings...>
    for filename in filenames:
        with open(filename, 'r+') as f:
            data = mass_replace(f.read(), mappings)
            f.seek(0)
            f.truncate()
            f.write(data)
"
"Python 2.7.1, codecs, and MySQLdb; why is setting file encoding not needed","con.set_character_set('utf8')
"
Decoding a Cryptic Python statement,"def f1(f):
    def f2(a):
        return a(a)

    def f3(b):
        def f4(*args):
            return b(b)(*args)

        return f(f4)

    return f2(f3)
"
autoscroll of text and scrollbar in python text box,"import time
try:
    # python 2.x
    import Tkinter as tk
except ImportError:
    # python 3.x
    import tkinter as tk

class Example(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)

        self.text = tk.Text(self, height=6, width=40)
        self.vsb = tk.Scrollbar(self, orient=""vertical"", command=self.text.yview)
        self.text.configure(yscrollcommand=self.vsb.set)
        self.vsb.pack(side=""right"", fill=""y"")
        self.text.pack(side=""left"", fill=""both"", expand=True)

        self.add_timestamp()

    def add_timestamp(self):
        self.text.insert(""end"", time.ctime() + ""\n"")
        self.text.see(""end"")
        self.after(1000, self.add_timestamp)

if __name__ == ""__main__"":
    root =tk.Tk()
    frame = Example(root)
    frame.pack(fill=""both"", expand=True)
    root.mainloop()
"
Python check if all elements of a list are the same type,"def homogeneous_type(seq):
    iseq = iter(seq)
    first_type = type(next(iseq))
    return first_type if all( (type(x) is first_type) for x in iseq ) else False
"
How to approach for a list comprehension solution?," for line1, line2 in zip(first, second):
     for word1, word2 in zip(line1.split(), line2.split():
         outputlist.append((word1, word2))
"
How to check dictionary items are present in the list ? PYTHON,"found_in_data_portgroup  = [pg for pg in portgroups if pg in data_portgroup[""data_portgroup""]]
found_in_mgmt_portgroup  = [pg for pg in portgroups if pg in mgmt_portgroup[""mgmt_portgroup""]]
found_in_trunk_portgroup = [pg for pg in portgroups if pg in trunk_portgroup[""trunk_portgroup""]]

print found_in_data_portgroup
print found_in_mgmt_portgroup
print found_in_trunk_portgroup
"
"execute python script with function from command line, Linux","if __name__ == ""__main__"":
    command= "" "".join( sys.argv[1:] )
    eval( command )
"
Formatting regular expressions in Python,">>> import re
>>> wordlist = ['hypothesis' , 'test' , 'results' , 'total']
>>> sentence = ""The total results for the test confirm the hypothesis""
>>> for word in wordlist:
...     if re.search(r'\b' + word + r'\b', sentence):
...             print word
...
hypothesis
test
results
total
"
Python class members confusion,"class MyClass(object):
    def __init__(self, member):
        self.member = member
"
Filling a strange webform in python,"Request Header
POST /en_US/hi/search/findhotels/index.htm?WT.bid=Home,,,find_button HTTP/1.1
Host: www3.hilton.com
Connection: keep-alive
Content-Length: 475
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Origin: http://www3.hilton.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Referer: http://www3.hilton.com/en/index.html
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
Cookie: mmcore.tst=0.626; ClrCSTO=T; ClrSSID=1382526492268-11812; ClrOSSID=1382526492268-11812; ClrSCD=1382526492268; mmid=-1914085652%7CAQAAAAq0Q+DZtwkAAA%3D%3D; mmcore.pd=-1914085652%7CAQAAAAq0Q+DZtwkAAA%3D%3D; mmcore.srv=ldnvwcgus01; K3R7=3U24QMiCUbjeh65LoEI31TTjisY8czr4zkIUe06gsA4A5lc0bIKrEhQ; GWSESSIONID=qYDpSnSLNFnJ5CrJrwlSWW7CNBHL7vXSMndGmnxghGns1rLjt2lX!-1490734837; __atuvc=1%7C43; mm_pc_HHonorsPoints=false; mm_pers_storage=loggedin%3Ano%7CStayDuration%3A1-2%20nights%7CDaysToBooking%3A0-1%7CSatStay%3Ano%7CChildren%3Ano%7CBrand%3Ahi%7CHHonorsPoints%3Afalse%7CFlexDates%3Afalse%7CPromoCode%3Ano%7Cproperties8%3Ano%7Chotelcode%3Ano; WT_FPC=id=6f7c5181-8354-430b-b943-9bb95bf2c75c:lv=1382490515002:ss=1382490495203
"
Print an ordered dict info at specific lines in python,"for y in range(1, 11):
    print ' '.join(board[x, y] for x in range(1, 11))
"
"Python: creating dictionary from a bunch of ""key: value"" strings?","info = ['apple: 1', 'orange: 2', 'grape: 3']
info = {fruit:num for fruit, num in (line.split(': ') for line in info)}
"
how to keep data from lines in file until condition met later in file python,"gene1, gene2 = None, None
for line in file:
    if matches_gene1(line):
        gene1 = parse_gene1(line)
    elif matches_gene2(line):
        gene2 = parse_gene2(line)
    elif matches_gene0(line):
        gene0 = parse_gene0(line)
        do_stuff_with(gene0, gene1, gene2)
        gene1, gene2 = None, None
"
Splitting a list of tuples by 2nd element - python,">>> from collections import defaultdict
>>> tup = [('x',1),('y',2),('z',1)]
>>> numbered = defaultdict(list)
>>> for i in tup:
...     numbered[i[1]].append(i)
... 
>>> numbered
defaultdict(<type 'list'>, {1: [('x', 1), ('z', 1)], 2: [('y', 2)]})
>>> numbered[1]
[('x', 1), ('z', 1)]
>>> numbered[2]
[('y', 2)]
"
How to iterate over all optional arguments and related values?,"$ python test_argparse.py --opt value1 --opt value2 --opt value3
['value1', 'value2', 'value3']
"
Python: Change a number into a word inside a table,"for number in range(1, 11):
    line_contents = []
    for j in range(10):
        n = number + j * 10
        if (n % 3 == 0):
            line_contents.append(""Biff"")
        else:
            line_contents.append(""{0:4d}"".format(n))
    print("" "".join(line_contents))
"
Pandas DataFrame column to cell in pivot table,">>> f = lambda obj: set(obj[['C', 'D']].values.ravel())
>>> df.groupby(['B', 'A']).apply(f).unstack()
A               a            b
B                             
c  set([g, e, h])          NaN
d             NaN  set([i, f])
"
BeautifulSoup: Replace anchor text with text from another tag,"from bs4 import BeautifulSoup
soup = BeautifulSoup(html)
for a in soup.find_all('a'):
    # here is how you get the text from 'h3' tag
    header = a.parent.find_previous_sibling('h3').text
    # here is how you set the text of the anchor tag to be the text of 'h3' tag
    a.string = header
    print a
"
Splitting letters from numbers within a string,"In [8]: %timeit re.findall('\d+|\D+', s*1000)
100 loops, best of 3: 2.15 ms per loop

In [9]: %timeit [''.join(g) for _, g in groupby(s*1000, str.isalpha)]
100 loops, best of 3: 8.5 ms per loop

In [10]: %timeit re.split('(\d+)', s*1000)
1000 loops, best of 3: 1.43 ms per loop
"
How it to implement custom multiprocessing continuous (async) control in python?,"from multiprocessing import Pool, Manager
from Queue import Empty
import time

ff_tests = [1,2,3,4,5]
chrome_tests = [10, 11, 12, 13, 14, 15]
general_tests = [20, 21,22, 23,24,25]

def process_func(spec_queue, general_queue, browser):
    while True:
        try:
            test = spec_queue.get_nowait()
            print(""Processing {} in {} process"".format(test, browser))
            time.sleep(2)
        except Empty:
            break

    while True:
        try:
            test = general_queue.get_nowait()
            print(""Processing {} in {} process"".format(test, browser))
            time.sleep(2)
        except Empty:
            break


if __name__ == ""__main__"":
    m = Manager()
    ff_queue = m.Queue()
    chrome_queue = m.Queue()
    general_queue = m.Queue()

    for queue, tests in [(ff_queue, ff_tests), (chrome_queue, chrome_tests),
                         (general_queue, general_tests)]:
        for test in tests:
            queue.put(test)


    pool = Pool(8)
    for _ in range(4):
        pool.apply_async(process_func, args=(ff_queue, general_queue, ""firefox""))
        pool.apply_async(process_func, args=(chrome_queue, general_queue, ""chrome""))
    pool.close()
    pool.join()
"
Python3: sorting a list of dictionary keys,">>> sorted(keys, key=lambda k: int(k) if k.isdigit() else float('-inf'))
['filename', '2', '10', '555', '764']
"
Python regex multiline replacement,"description = re.sub(pattern, ""<a href=\""http://crucible.app.com:9090/\2?cs=\1\"">\1</a>"", description)
"
python nosetests setting the test description,"from unittest import TestCase

from nose.tools import istest


def my_verification_method(param):
    """""" description """"""
    print ""this is param="", param
    assert param > 0, ""something bad...""


def method_name(param):
    """""" this is how you name the tests from param values """"""
    return ""test_with_param(%i)"" % param


def doc_name(param):
    """""" this is how you generate doc strings from param values """"""
    return ""test with param=%i"" % param


def _create(param):
    """""" Helper method to make functions on the fly """"""

    @istest
    def func_name(self):
        my_verification_method(param)

    return func_name


def populate(cls, params):
    """""" Helper method that injects tests to the TestCase class """"""

    for param in params:
        _method = _create(param)
        _method.__name__ = method_name(param)
        _method.__doc__ = doc_name(param)
        setattr(cls, _method.__name__, _method)


class AppsTest(TestCase):
    """""" TestCase Container """"""

    pass

test_params = [-1, 1, 2]
populate(AppsTest, test_params)
"
Getting number of characters through it's memory size in python,"import sys

def estimate_chars():
    ""size in bytes""
    s = """"
    for idx in range(100):
        print idx * 10, sys.getsizeof(s), len(s)
        s += '1234567890'

estimate_chars()
"
Integrating a multidimensional integral in scipy,"import mcint
import random
import math

def w(r, theta, phi, alpha, beta, gamma):
    return(-math.log(theta * beta))

def integrand(x):
    r     = x[0]
    theta = x[1]
    alpha = x[2]
    beta  = x[3]
    gamma = x[4]
    phi   = x[5]

    k = 1.
    T = 1.
    ww = w(r, theta, phi, alpha, beta, gamma)
    return (math.exp(-ww/(k*T)) - 1.)*r*r*math.sin(beta)*math.sin(theta)

def sampler():
    while True:
        r     = random.uniform(0.,1.)
        theta = random.uniform(0.,2.*math.pi)
        alpha = random.uniform(0.,2.*math.pi)
        beta  = random.uniform(0.,2.*math.pi)
        gamma = random.uniform(0.,2.*math.pi)
        phi   = random.uniform(0.,math.pi)
        yield (r, theta, alpha, beta, gamma, phi)


domainsize = math.pow(2*math.pi,4)*math.pi*1
expected = 16*math.pow(math.pi,5)/3.

for nmc in [1000, 10000, 100000, 1000000, 10000000, 100000000]:
    random.seed(1)
    result, error = mcint.integrate(integrand, sampler(), measure=domainsize, n=nmc)
    diff = abs(result - expected)

    print ""Using n = "", nmc
    print ""Result = "", result, ""estimated error = "", error
    print ""Known result = "", expected, "" error = "", diff, "" = "", 100.*diff/expected, ""%""
    print "" ""
"
Transposing dataframe and sorting,"df = df.reset_index() #Make your index into a column
df = pd.melt(df, id_vars = ['index']) #Reshape data
df = df[df['index'] <= df['variable']].sort_values(by = 'value') #Remove duplicates, sort
df ['col'] = df['index'] +','+ df['variable'] #Concatenate strings
df = df[['col','value']] #Remove unnecessary columns
df = df.set_index('col') #Set strings to index
df
"
Decorate methods per instance in Python,"import functools

def counted(method):
    @functools.wraps(method)
    def wrapped(obj, *args, **kwargs):
        if hasattr(obj, 'count'): 
            obj.count += 1
        else:
            obj.count = 1
        return method(obj, *args, **kwargs)
    return wrapped
"
How to capture the entire string while using 'lookaround' with chars in regex?,"re.findall('\\b(?:b+a)+b+\\b', mystring)"
How to convert this list in a given format?,">>> shared_username = ['[<User: mr--adhikari>]', '[<User: mr--adhikari>]', '[<User: mr--adhikari>]', '[<User: mr--adhikari>]', '[<User: mr--adhikari>, <User: awesome>]', '[<User: mr--adhikari>]', '[<User: mr--adhikari>]', '[<User: mr--adhikari>]', '[<User: mr--adhikari>]']
>>> [r.findall(item) for item in shared_username]
[['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari', 'awesome'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari'], ['mr--adhikari']]
"
wxPython wx.TextCtrl dynamically resizing to fill panel width,"self.GetSizer().Add(self.fileNameSizer)
"
Django: How to provide context for a FormView?,"class SomeMixin(object):

    def get_context_data(self, **kwargs):
        context = super(SomeMixin, self).get_context_data(**kwargs)
        something = something
        context['something'] = something
        return context
"
Converting long numpy array for string efficiently,"import numpy as np

# Generate some random floating-point data
x = np.random.random(100)

# Convert it to fixed-length strings with a maximum length of 5 characters
y = x.astype('|S5')

print 'Original Array'
print x
print 'Converted to fixed-length strings'
print y
"
What is the most pythonic way to pop a random element from a list?,"lst = [1,2,3]
random.shuffle(lst)
for x in lst:
  # ...
"
Midrule in LaTeX output of Python Pandas,"import pandas as pd
import numpy as np

# use a DataFrame df with some sample data
df = pd.DataFrame(np.random.random((5, 5)))

# get latex string via `.to_latex()`
latex = df.to_latex()

# split lines into a list
latex_list = latex.splitlines()

# insert a `\midrule` at third last position in list (which will be the fourth last line in latex output)
latex_list.insert(len(latex_list)-3, '\midrule')

# join split lines to get the modified latex output string
latex_new = '\n'.join(latex_list)
"
Extraploation with 'nearest' method in Python,"def fast_nearest_interp(xi, x, y):
    """"""Assumes that x is monotonically increasing!!.""""""
    # Shift x points to centers
    spacing = np.diff(x) / 2
    x = x + np.hstack([spacing, spacing[-1]])
    # Append the last point in y twice for ease of use
    y = np.hstack([y, y[-1]])
    return y[np.searchsorted(x, xi)]
"
convert string to lowercase,s.decode('utf-8').lower()
How to access key in Python dictionary,"print ', '.join(set(itertools.chain(*lst)))
"
How to make Python Interactive Shell print cyrillic symbols?,"In [4]: terms
Out[4]: 
[u'\u041f\u0430\u0432\u0435\u043b',
 u'\u0445\u043e\u0434\u0438\u0442',
 u'\u0434\u043e\u043c\u043e\u0439'] # repr

In [5]: print terms[0] # str 
Павел

In [6]: print terms[1]
ходит
"
How to replace an instance in __init__() with a different object?,"def thingy(theirnumber):
    if theirnumber > 10:
        return ClassB.ClassB(theirnumber)
    else:
        return ClassA.ClassA(theirnumber)
"
split ndarray into chunks - whilst maintaining order,"In [147]: X=np.arange(4**3).reshape(4,4,4)
"
how to get python list from other list which has dict as elements,">>> my_list=[{'Key':'Apple','Value':'Fruit'},
    {'Key':'Car','Value':'Automobile'},
    {'Key':'Dog','Value':'Animal'},
    {'Key':'Bolt','Value':'Runner'}]
>>> new_list = ['='.join([i['Key'], i['Value']]) for i in my_list]
>>> new_list
['Apple=Fruit', 'Car=Automobile', 'Dog=Animal', 'Bolt=Runner']
"
OSError: [WinError 193] %1 is not a valid Win32 application,"subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])"
How to efficiently process a large file with a grouping variable in Python,"import csv
import random
from collections import defaultdict

reader = csv.DictReader(open(inputname), delimiter=' ')
out1 = open(output1name,'wb')
out2 = open(output2name,'wb')

# create a dictionary with a random default integer value [0, 1] for
# keys that are accessed for the first time
group_scores = defaultdict(lambda: random.randint(0,1))

for row in reader:
    # set a score for current row according to it's group
    # if none found - defaultdict will call it's lambda for new keys
    # and create a score for this row and all who follow
    score = group_scores[row['Group']]
    if score==0:
        out1.write(row['ID'])
        out1.write(""\n"")
    if score==1:
        out2.write(row['ID'])
        out2.write(""\n"")

out1.close()
out2.close()
"
django submit two different forms with one submit button,"if request.method == 'POST':
        form1 = Form1( request.POST,prefix=""form1"")
        form2 = Form2( request.POST,prefix=""form2"")
        print(request.POST)
        if form1.is_valid() or form2.is_valid(): 
else:
        form1 = Form1(prefix=""form1"")
        form2 = Form2(prefix=""form2"")
"
python matplotlib save plot,"In [5]: os.path.splitext('foo/bar/baz.bat')[0] + '.png'
Out[5]: u'foo/bar/baz.png'
"
python comprehension for loop with if statement and other actions following that,"from collections import defaultdict

l = [""test1"", ""pattern"", ""test2"", ""pattern""]

d = defaultdict(list)
for index, key in enumerate(l):
    if key == ""pattern"":
        d[key].append(index)

print(d)
"
Extract specific elements from numpy array by column,"import numpy as np

A = np.array([[14,  7, 30],
              [44, 76, 65],
              [42, 87, 11]])

print A[[0, 1, 2], range(len(A))]
print A[[0, 1, 1], range(len(A))]
"
Looping through columns in a .csv files in Python,"import csv
from StringIO import StringIO

total = 0
for row in csv.reader(StringIO(""1,2,3,4"")):
    for col in row:
        total += int(col)

print total    # prints 10
"
Backreferencing twice to the same name in sqlalchemy,"class Team(Base):
    __tablename__ = ""teams""

    id = Column(Integer, primary_key=True)
    name = Column(String)

    @property
    def matches(self):
        return self.matches_to + self.matches_from


class Match(Base):
    __tablename__ = ""matches""
    id = Column(Integer, primary_key=True)
    first_opponent_id = Column(Integer, ForeignKey(""teams.id""))
    second_opponent_id = Column(Integer, ForeignKey(""teams.id""))

    first_opponent = relationship(
        ""Team"", backref=backref('matches_to'),
        foreign_keys=[first_opponent_id],
    )
    second_opponent = relationship(
        ""Team"", backref=backref('matches_from'),
        foreign_keys=[second_opponent_id],
    )
"
KeyError in pandas to_datetime using custom format,"In [1058]: TradeData.index
Out[1058]: Index([u'09/30/2013 : 04:14 PM', u'09/30/2013 : 03:53 PM', u'09/30/2013 : 03:53 PM'], dtype=object)

In [1059]: index_name = TradeData.index.name

In [1060]: TradeData = TradeData.reset_index()

In [1061]: TradeData[index_name] = TradeData[index_name].map(lambda x: datetime.strptime(x, ""%m/%d/%Y
: %I:%M %p""))

In [1062]: TradeData = TradeData.set_index(index_name)

In [1063]: TradeData.index
Out[1063]:
<class 'pandas.tseries.index.DatetimeIndex'>
[2013-09-30 16:14:00, ..., 2013-09-30 15:53:00]
Length: 3, Freq: None, Timezone: None
"
Geting results from database one by one,"for row in db_session.query(Data).yield_per(10):
    do_something_with_data(row)
"
What is correct python syntax for this kind of list comprehension?,"[i * j for i, j in zip(xrange(40, 100), xrange(60))]
"
Multi-condition regex in Python,"In [4]: import re

In [5]: any(re.search(r""\b{0}\b"".format(x),strs) for x in lis)
Out[5]: True

In [6]: strs=""foo bar""

In [7]: any(re.search(r""\b{0}\b"".format(x),strs) for x in lis)
Out[7]: False
"
Python: Split numpy array,"import numpy as np
arr=np.array([
    ( 54.51399994, -12.10200024, -11.88099957),
    ( 56.23899841, -8.30799961, -2.03500009)])
print(arr.astype('|S10'))
"
How to make List from Numpy Matrix in Python,numpy.array(a).reshape(-1).tolist()
Escaped string of bytes to bytestring,"parser.add_argument(""-d"", ""--data"", default='00')
"
a program to replace a line in a .yml file(PYTHON),"import sys
from os import listdir 
from os.path import isfile, join

onlyfiles = [ f for f in listdir() if isfile(f) and str(f)[-4:]=="".yml"" ]

for file in onlyfiles:
  wdata = ''
  with open(file, 'r') as a: #Lets open it make sure it is good
    for line in a: 
        if line == ""  world: Trolling\n"":
            line = ""  world: world\n"" # You already know what it should be
        print line
        wdata += line
  with open(file, 'w') as repl: 
    repl.write(wdata)
"
Proper indentation for Python multiline strings,"def foo():
    string = """"""line one
             line two
             line three""""""
"
Class and function scope,"class Thing(object):
    instances = {}
    def __init__(self, name, **properties):
        self.name = name
        self.properties = properties
        self.instances[name] = self
    def __repr__(self):
        t = '<""{self.name}"" thing, {self.properties}>'
        return t.format(self=self)
"
How do i find the percentage of the most common element in a list?,"from collections import Counter
l = [1, 1, 2, 2, 2, 2, 2, 3, 4, 10, 10, 10, 10, 10]
[(i, Counter(l)[i] / float(len(l)) * 100.0) for i in Counter(l)]
"
get current directory - Python,os.path.basename(os.path.dirname(os.path.realpath(__file__)))
Python - BeautifulSoup findParent by attribute,">>> from bs4 import BeautifulSoup
>>> sample = '''\
... <monograph>
...     <section id=""1234"">
...         <head>Test Heading</head>
...         <p>Here's a paragraph with some text in it.</p>
...     </section>
... </monograph>
... '''
>>> soup = BeautifulSoup(sample, 'xml')
>>> str(soup.p)
""<p>Here's a paragraph with some text in it.</p>""
>>> print(soup.p.find_parent(id=True).prettify())
<section id=""1234"">
 <head>
  Test Heading
 </head>
 <p>
  Here's a paragraph with some text in it.
 </p>
</section>

>>> print(soup.p.find_parent(id=False).prettify())
<monograph>
 <section id=""1234"">
  <head>
   Test Heading
  </head>
  <p>
   Here's a paragraph with some text in it.
  </p>
 </section>
</monograph>
"
Generator recovery using decorator,"def _auto_reconnect_wrapper(func):
    ''' Tries to reconnects dead connection
    '''

    def inner(self, *args, _retry=True, **kwargs):
        try:
            gen = func(self, *args, **kwargs)
            if inspect.isgenerator(gen):
                value = next(gen)
                return itertools.chain([value], gen)
            else: # Normal function
                return gen
        except StopIteration:
            return gen
        except Mysql.My.OperationalError as e:
            ...
            # Retry
            return inner(self, *args, _retry=False, **kwargs)
    return inner
"
Python - Parse String,"import re
result = re.sub(""\D"", """", a['onclick'])
"
How do I sort a list of dictionaries by values of the dictionary in Python?,"newlist = sorted(l, key=itemgetter('name'), reverse=True)"
"wxPython, PyQwt or C# for plotting graph and manually drawing lines on plot","import wx
import math
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas

class Graph(wx.Panel):
    def __init__(self, *args, **kwargs):
        wx.Panel.__init__(self, *args, **kwargs)
        self.figure = Figure()
        self.canvas = FigureCanvas(self, -1, self.figure)
        self.Bind(wx.EVT_SIZE, self.OnSize)

    def OnSize(self, event):
        size = self.GetSize()
        self.canvas.SetSize(size)

    def Draw(self):
        self.figure.clear()
        self.subplot = self.figure.add_subplot(111)
        x = [a*(math.pi/50) for a in range(100)]
        y = [self.f(a) for a in x]
        self.subplot.plot(x, y)
        self.canvas.draw()

    def DrawCosine(self, e):
        self.f = math.cos
        self.Draw()

    def DrawSine(self, e):
        self.f = math.sin
        self.Draw()        


class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)
        self.button1 = wx.Button(self.panel, label=""Sine"")
        self.button2 = wx.Button(self.panel, label=""Cosine"")
        self.graph = Graph(self.panel)
        self.graph.DrawSine(None)

        self.button1.Bind(wx.EVT_BUTTON, self.graph.DrawSine)
        self.button2.Bind(wx.EVT_BUTTON, self.graph.DrawCosine)

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer2 = wx.BoxSizer()

        self.sizer.Add(self.graph, 1, wx.ALL | wx.EXPAND)
        self.sizer2.Add(self.button1, 1, wx.ALL | wx.EXPAND)
        self.sizer2.Add(self.button2, 1, wx.ALL | wx.EXPAND)
        self.sizer.Add(self.sizer2, 0, wx.ALL | wx.EXPAND)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
"
get csv data from a website,"import csv
import urllib2

downloaded_data  = urllib2.urlopen('http://...')
csv_data = csv.reader(downloaded_data)

for row in csv_data:
    print row
"
Actual name of the passed parameter,"def a(name):
    global_variables = globals()
    try:
        name_of_passed_in_variable = [x for x in global_variables if id(global_variables[x]) == id(name)][0]
    except Exception:
        name_of_passed_in_variable = ""unknown""
    print name_of_passed_in_variable, name

my_name = ""Tom""
a(my_name)

a(""Mike"")

second_name = my_name
a(second_name)
"
Python List & for-each access (Find/Replace in built-in list),"class C:
    def __init__(self, n):
        self.num = n
    def __repr__(self):
        return str(self.num)

my_list = [C(i) for i in xrange(3)]
for member in my_list:
    member.num += 42
print my_list
"
Debugger attribute view for python,"def __repr__(self):
    return ""<Token %s>"" % self.id   # or wherever `X9999` is stored

Token.__repr__ = __repr__
"
Specific String replacement,"def convert(text):
    def replace(match):
        d = {'1': 'one', '2': 'two', '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine', 'N': 'North', 'E': 'East', 'S': 'South', 'W': 'West'}
        source = match.group(1).strip()

        if 'km' in source:
            source = source.split(""km"")[0].strip()
            return ""{} kilometre{}"".format(d.get(source, source), '' if source == '1' else 's')
        else:
            return d.get(source, source) + ' '

    return re.sub(r'(\d+ *km|[NESW]\s+(?=of))', replace, text)  

print convert('1 km N of Piedmont, California')
print convert('1km N of China')
"
"Scrapy: If key exists, why do I get a KeyError?","In [1]: import scrapy

In [2]: class CraigslistSampleItem(scrapy.Item):
   ...:         title = scrapy.Field()
   ...:         link = scrapy.Field()
   ...:     

In [3]: item = CraigslistSampleItem()

In [4]: item[""title""] = ""test""

In [5]: item
Out[5]: {'title': 'test'}

In [6]: ""link"" in item
Out[6]: False

In [7]: item[""link""] = ""test link""

In [8]: ""link"" in item
Out[8]: True
"
Python - Erase the first word in a line in a nested loop,"for age in range(20, 70, 5):
    print(age, end="" "") #end is space
    for percentage in range(4, 12, 2):
        result = calc_final_balance(age, amount_saved, percentage)
        print(""\t $"" + format(result, '.2f').rjust(10), end="" "")
    print()
"
Parsing a string with defined data dictionary into a list efficiently,"sorted_columns = sorted(columns, key=operator.itemgetter(1))
formats = []
offset = 0
for name, start, length, vtype in sortedcolumns:
    # add padding bytes
    if start > offset:
        formats.append('{}x'.format(start-offset))
    formats.append('{}s'.format(length))
format = struct.Struct('=' + ''.join(formats))
"
Image analysis on scientific chromatograms,"import Image
import numpy as np

def get_data(im, x_range, x_offset, y_range, y_offset):
    x_data = np.array([])
    y_data = np.array([])
    width, height = im.size
    im = im.convert('1')
    for x in xrange(width):
        for y in xrange(height):
            if im.getpixel((x, y)) == 0:
                x_data = np.append(x_data, x)
                y_data = np.append(y_data, height - y)
                break
    x_data = (x_data / width) * x_range + x_offset
    y_data = (y_data / height) * y_range + y_offset
    return x_data, y_data

im = Image.open('clean_data_2.png')
x_data, y_data = get_data(im,4.4-0.55,0.55,23000-2500,2500)

from pylab import *
plot(x_data, y_data)
grid(True)
savefig('new_data.png')
show()
"
Fastest way to replace space for underscore for a list of words in text,"def repl(x):
    if x:
        return x.group().replace("" "", ""_"")
    return x


def replace_re(fle, dct):
    with open(fle) as f:
        for line in f:
            spl = set(line.split())
            phrases = chain.from_iterable(dct[word] for word in spl if word in dct)
            line = re.sub(""|"".join(phrases), repl, line)
            yield line


def replace_re2(fle, dct):
    cached = {}
    with open(fle) as f:
        for line in f:
            phrases = tuple(chain.from_iterable(dct[word] for word in set(line.split()) if word in dct))
            if phrases not in cached:
                r = re.compile(""|"".join(phrases))
                cached[phrases] = r
                line = r.sub(repl, line)
            else:
                line = cached[phrases].sub(repl, line)
            yield line
"
Catch multiple string occurrences in multiline text,">>> txt='''\
... RX[0]
... qpn : 0x48
... cqn : 0x80
... rxBytes : 179531811
... rxPackets : 296242
... rxPacketsDropped : 0
... rxCheckSumOk : 225257
... rxCheckSumNone : 200
... RX[1]
... qpn : 0x49
... cqn : 0x81
... rxBytes : 0
... rxPackets : 0
... rxPacketsDropped : 0
... rxCheckSumOk : 0
... rxCheckSumNone : 0**
... '''
>>> import re 
>>> re.search(r'RX\[(\d+)\].*?rxPackets\s+:\s+(\d+)', txt, re.S).groups()
('0', '296242')
"
Merge nested list items based on a repeating value,"for p in res:
    if not p[-1]:
        p.pop()
"
How can I check if a string has the same characters? Python,"len(str1) == len(str2) and sorted(str1) == sorted(str2)
"
How do I get rid of dotted line on x axis of Pandas/Matplotlib bar plot?,"ax.get_lines()[0].set_visible(False)
"
Build query string using urlencode python,"encoded = ""&"".join( ""%s=%s"" % (key, quote(parameters[key], safe=""+"")) 
    for key in ordered(parameters.keys()))
"
Between double curly braces: replace particular text,"re.sub(r""(\{\{[^}]+}\})"", lambda m: re.sub(""&quot;"", '""', m.group(1)), word_docxml)
"
Outputting unicode text to an RTF file in python,"def rtf_encode_char(unichar):
    code = ord(unichar)
    if code < 128:
        return str(unichar)
    return '\\u' + str(code if code <= 32767 else code-65536) + '?'

def rtf_encode(unistr):
    return ''.join(rtf_encode_char(c) for c in unistr)
"
Cannot return string from python class,"def __str__(self):
    return ''.join([getattr(self, attr) for attr in (
        'dst_addr', 'src_addr', 'type', 'payload', 'arptype', 'src_mac_addr',
        'src_ip_addr', 'dst_mac_addr', 'dst_ip_addr')])
"
What is the best way to create a python dictionary from a string?,"import re
regex = re.compile(r'(\d+):(\d+)')

def optionA(line):
    _id, info = line.split(""@"")
    data = {}
    for g_info in info.split("";""):
        k, v = g_info.split("":"")
        data[k] = v
    return data

def optionAA(line):
    data = {}
    for g_info in line[2:].split("";""):
        k, v = g_info.split("":"")
        data[k] = v
    return data

def optionB(line):
    _id, info = line.split(""@"")
    return dict(map(lambda i: i.split("":""), info.split("";"")))

def optionC(line):
    return dict(regex.findall(line))

line = 'A@1:100;2:240;3:250;4:260;5:100;6:100;7:100;8:100;9:100;10:100'
"
getting max(dict_name.values()) to ignore strings,"print max(names.values(), key=lambda x: x if not isinstance(x, str) else float(""-inf""))
"
Python reading first four lines from readlines(),"with open('/tmp/redirect.log', 'a') as log:
    while True: #If you need to continuously check for more.
        needed = {""GET"", ""User-Agent""}
        for line in sys.stdin:
            for item in needed:
                if line.startswith(item):
                    log.write(line)
                    break
            needed.remove(item)
            if not needed: #The set is empty, we have found all the lines we need.
                break
"
Converting Sage symbolic Expression to string,"def var_counter(someexpr, v):
    tor = someexpr.operator()
    if tor is None:
        return int(v in someexpr.variables())
    else:
        return sum(var_counter(operand, v) for operand in someexpr.operands())
"
boost python overload operator (),"#include <iostream>

#include <boost/python.hpp>

// Mockup classes.
struct AgentBase   {};
struct MessageBase {};
struct QueueBase   {};
struct SpamBase    {};
struct Agent:   AgentBase   {};
struct Message: MessageBase {};
struct Queue:   QueueBase   {};
struct Spam:    SpamBase    {};

// Class with overloaded operator().
class Queuer
{ 
public:

  void operator()(const AgentBase&, const MessageBase&) const
  {
    std::cout << ""Queuer::operator() with Agent."" << std::endl;
  }

  void operator()(const QueueBase&, const MessageBase&) const
  {
    std::cout << ""Queuer::operator() with Queue."" << std::endl;
  }

  void operator()(const SpamBase&, const MessageBase&) const
  {
    std::cout << ""Queuer::operator() with Spam."" << std::endl;
  }
};

/// Depending on the overlaod signatures, helper types may make the
/// code slightly more readable by reducing pointer-to-member-function syntax.
template <typename A1>
struct queuer_overload
{
  typedef void (Queuer::*type)(const A1&, const MessageBase&) const;
  static type get(type fn) { return fn; }
};

BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;
  // Expose only the base class types.  Do not allow the classes to be
  // directly initialized in Python.
  python::class_<AgentBase  >(""AgentBase"",   python::no_init);
  python::class_<MessageBase>(""MessageBase"", python::no_init);
  python::class_<QueueBase  >(""QueueBase"",   python::no_init);
  python::class_<SpamBase   >(""SpamBase"",    python::no_init);

  // Expose the user types.  These classes inerit from their respective
  // base classes.
  python::class_<Agent,   python::bases<AgentBase>   >(""Agent"");
  python::class_<Message, python::bases<MessageBase> >(""Message"");
  python::class_<Queue,   python::bases<QueueBase>   >(""Queue"");
  python::class_<Spam,    python::bases<SpamBase>    >(""Spam"");

  // Disambiguate via a varaible.
  queuer_overload<AgentBase>::type queuer_op_agent = &Queuer::operator();

  python::class_<Queuer>(""Queuer"")
    // Disambiguate via a variable.
    .def(""__call__"", queuer_op_agent)
    // Disambiguate via a helper type.
    .def(""__call__"", queuer_overload<QueueBase>::get(&Queuer::operator()))
    // Disambiguate via explicit cast.
    .def(""__call__"",
         static_cast<void (Queuer::*)(const SpamBase&, 
                                      const MessageBase&) const>(
             &Queuer::operator()))
    ;
}
"
Parsing Data From Long to Wide Format in Python,"positions, scores = Counter(), Counter()
for sequence, position, strand, score in reader:
    positions[sequence] += position
    scores[sequence] += scores

for sequence in positions:
    writer.writerow(sequence, positions[sequence], scores[sequence])
"
I want to list up string in python followed example,"from collections import OrderedDict
od = OrderedDict()
with open(""match.txt"") as f:
    key = next(f)
    for line in f:
        if line.startswith((""a"",""b"")):
            od.setdefault(key,[]).append(line)
        else:
            key = line
"
How can I check that a list has one and only one truthy value?,"# file: test.py
from itertools import ifilter, islice

def OP(l):
    true_found = False
    for v in l:
        if v and not true_found:
            true_found=True
        elif v and true_found:
             return False #""Too Many Trues""
    return true_found

def DavidRobinson(l):
    return l.count(True) == 1

def FJ(l):
    return len(list(islice(ifilter(None, l), 2))) == 1

def JonClements(iterable):
    i = iter(iterable)
    return any(i) and not any(i)

def moooeeeep(l):
    true_found = False
    for v in l:
        if v:
            if true_found:
                # found too many True's
                return False 
            else:
                # found the first True
                true_found = True
    # found zero or one True value
    return true_found
"
Python how to find a list of string that's inbetween 2 substring?,"
--------------------------------------------------------- Solution: 2 -----------------------------------------------------------
Demo on repl.it
Code:
import re

text = """"""
something = $/I want to get this string A:blah blah 
somethingB = ($/I want to get this string as well B:blah blah blah)
""""""

def findBetween(first, second):
    first = '\\' + first[0] + '\\' + first[1]
    found = re.findall(r'' + first + '(.+?)' + second, text)
    print found

findBetween('$/', ':')
"
Removing rows in a 2D array that have the same value,">>> seen = set()
>>> np.array([x for x in a if seen.isdisjoint(x) and not seen.update(x)])
array([[0, 1],
       [3, 4],
       [2, 5]])
"
Generate Random and Print List on 1 Line,"def list_n(n):
    if n < 2:
       return False
    list = []
    for x in range(n):
       list.append(random.randrange(1,5))
    return list
"
Extract all keys from a list of dictionaries,{k for d in LoD for k in list(d.keys())}
Python: list filtering using list comprehension,"from itertools import zip_longest

[tup[0] for tup in zip_longest(mylist,mylist[1:]) if len(set(tup)) == 2]
Out[11]: [1, 2, 3, 6, 7, 9, 11]
"
"Scrapy: If key exists, why do I get a KeyError?","if 'link' not in item:
    print ""link has not been given a value""
"
Incrementing itertools.imap without reading to object in Python for performance,"from itertools import islice
from collections import deque

def consume(iterator, n):
    ""Advance the iterator n-steps ahead. If n is none, consume entirely.""
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
"
Python itertools: Best way to unpack product of product of list of lists,"for (xrange, yrange), zrange in product(product(rangeList,rangeList),rangeList):
    print xrange, yrange, zrange
"
Get to nested dictionary in list,"only_last_and_first = [d for d in L if 'firstname' in d and 'lastname' in d]
"
How can I wait until an element gains or loses a class?,"from selenium.webdriver.support import expected_conditions as EC

class wait_for_class(object):
    def __init__(self, locator, class_name):
        self.locator = locator
        self.class_name = class_name

    def __call__(self, driver):
        try:
            element_class = EC._find_element(driver, self.locator).get_attribute('class')
            return element_class and self.class_name in element_class
        except StaleElementReferenceException:
            return False
"
How to visualize scalar 2D data with Matplotlib?,"from pylab import *
origin = 'lower'

delta = 0.025

x = y = arange(-3.0, 3.01, delta)
X, Y = meshgrid(x, y)
Z1 = bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
Z = 10 * (Z1 - Z2)

nr, nc = Z.shape

CS = contourf(
    X, Y, Z,
    levels = linspace(Z.min(), Z.max(), len(x)),
    ls = '-',
    cmap=cm.bone,
    origin=origin)

CS1 = contour(
    CS,
    levels = linspace(Z.min(), Z.max(), len(x)),
    ls = '-',
    cmap=cm.bone,
    origin=origin)

show()
"
Need to delete part of text lines in python,"with open('C:\\middlelist3.txt') as datafile:
    list = (line.split(',', 1)[0] for line in datafile)
    with open('C:\\nocommas.txt', 'w') as smallfile:
        smallfile.writelines(list)
"
How to extract the n-th elements from a list of tuples in python?,[x[1] for x in elements]
Speed up for loop with numpy,"In [196]: C[d[:,np.newaxis], e[:,np.newaxis], f[:,np.newaxis] + b].mean(axis=0).dot(g)
Out[196]: 13.582349962518608

In [197]: %timeit C[d[:,np.newaxis], e[:,np.newaxis], f[:,np.newaxis] + b].mean(axis=0).dot(g)
1000 loops, best of 3: 461 µs per loop
"
Conversion of a specific character in a string to Upper Case,">>> a.replace('a',""A"")
'AhdhkhkAhfkAhAfAfkh'
"
Looping through a list of strings and tuples and appending unique combinations,"gen = ['A', ('x', 'y'), ('t', 'u'), 'B', ('y', 't'), 'B', ('a', 'z')]

result = []
lastStringSeen = None
for i in gen:
    if isinstance(i, str):
        lastStringSeen = i
    else: #must be a tuple
        result.append((lastStringSeen, i))
print result
"
Why is this tag empty when parsed with beautiful soup?,">>> import re
>>> import requests
>>> import bs4
>>> 
>>> page = requests.get(""https://au.finance.yahoo.com/q/is?s=AAPL"")
>>> soup = bs4.BeautifulSoup(page.content)
>>> 
>>> table = soup.find(""table"", class_=""yfnc_tabledata1"")
>>> total_revenue_label = table.find(text=re.compile(r'Total Revenue'))
>>> total_revenue_label.parent.parent.next_sibling.get_text(strip=True)
42,123,000
"
how to groupby pandas dataframe on some condition,"# this function is applied to all buyers
def find_good_buyers(buyer):
    # which dates the buyer has made a purchase
    buyer_dates = buyer.groupby('date')
    # a string representing the unique items purchased at each date
    items_on_date = buyer_dates.agg({'item_id': lambda x: '-'.join(x.unique())})
    # if there is more than 1 combination of item_id, then it means that
    # the buyer has purchased different things in different dates
    # so this buyer must be flagged to 1
    good_buyer = (len(items_on_date.groupby('item_id').groups) > 1) * 1
    return good_buyer


df['item_id'] = df['item_id'].astype('S')
buyers = df.groupby('buyer_id') 

good_buyer = buyers.apply(find_good_buyers)
df.set_index('buyer_id', inplace=True)
df['good_buyer'] = good_buyer
df.reset_index(inplace=True)
"
Python look for a format that match specific format,"[A-Za-z] : matches any alphabet
[0-9]+ : matches one or more digits
[A-Za-z]{2} : matches two alphabets
"
How to iterate over Unicode characters in Python 3?,">>> s = ""abc\u20ac\U00010302\U0010fffd""
>>> len(s)
8
>>> for c in s:
...     print('U+{:04X}'.format(ord(c)))
...     
U+0061
U+0062
U+0063
U+20AC
U+D800
U+DF02
U+DBFF
U+DFFD
"
requests module return json with items unordered,"
import json
from collections import OrderedDict
result = json.loads(request.text,
                    object_parir_hook=OrderedDict)
"
How can I merge two files in one using BASH or Python script?,"#!/bin/bash

while IFS= read -r line1; do
    while IFS= read -r line2; do
        printf ""C: %s  %s\n"" ""$line2"" ""${line1/#F: }""
    done < file2
done < file1
"
Reading in repeated blocks of data using pandas and python,"import pandas as pd
import numpy as np
from StringIO import StringIO
pathToFile = 'test/file.txt'
f = open(pathToFile)
s = StringIO()
cur_atm = np.nan

for ln in f:
    #replace multiply spaces to one ;
    ln = ';'.join(ln.split())
    if('ppm' in ln):
        cur_atm = ln.split(';')
        #items of list cur_atm
        print cur_atm
        #get 2 item from back of list cur_atm
        cur_atm = cur_atm[-2]
        continue
    if (ln.startswith('20')) | (ln.startswith('19')):
        continue;
    #remove rows start with string SOIL and 1;1, remove empty rows
    if  (ln.startswith('SOIL')) | (ln.startswith('1;1')) | (ln == ''):
        continue;
    if  ln.startswith('BD;'):
        ln = ln.replace('BD;', 'BD ') 
        continue;        

    #print ln to StringIO s
    s.write(str(cur_atm) + "";"" + ln + '\n')
s.seek(0)

# create new dataframe with desired column names
df = pd.read_csv(s, sep="";"", index_col=[1], names=['ATM','','1','2','3','4','5', 'TOT'])
"
How do i add headers to my list (csv),"import csv

FILE_NAME = ""paintingJobs.txt""
COL_HEADERS = ['title 1', 'title 2', '3', '4', '5', '6']
NUM_COLS = len(COL_HEADERS)

# read file once to determine maximum width of data in columns
with open(FILE_NAME) as f:
    reader = csv.reader(f, delimiter=',')
    # determine the maximum width of the data in each column
    max_col_widths = [len(col_header) for col_header in COL_HEADERS]
    for columns in reader:
        if ""A"" in columns and int(columns[5]) < int(columns[3]):
            for i, col in enumerate(columns):
                    max_col_widths[i] = max(max_col_widths[i], len(repr(col)))
    # add 1 to each for commas
    max_col_widths = [col_width+1 for col_width in max_col_widths]

# read file second time to display its contents with the headers
with open(FILE_NAME) as f:
    reader = csv.reader(f, delimiter=',')
    # display justified column headers
    print(' ' + ' '.join(col_header.ljust(max_col_widths[i])
                            for i, col_header in enumerate(COL_HEADERS)))
    # display column data
    for columns in reader:
        if ""A"" in columns and int(columns[5]) < int(columns[3]):
            print(columns)
"
"extract substring from string, python","print(pth[pth.rindex(""/"") + 1:])
"
Theano Dimshuffle equivalent in Google's TensorFlow?,"input = tf.placeholder(tf.float32, [None])  # Defines an arbitrary-sized vector.
result = tf.expand_dims(input, 1)

print result.get_shape()  # ==> TensorShape([Dimension(None), Dimension(1)])
"
Python: Acessing index numbers within an if statement nested within a for loop,"def find_sublists(seq, sublist):
    length = len(sublist)
    for index, value in enumerate(seq):
        if value == sublist[0] and seq[index:index+length] == sublist:
            yield index
"
Using a for loop in python with more than 1 variable,"#Make every codon by zipping the sequence offset by one each time
codon_sequence = [''.join(z) for z in zip(seq,seq[1:],seq[2:])]
#Print every 3rd codon - starting at zero...
print 'aaseq1 = ',''.join([codons[c] for c in codon_sequence[::3]])
#...then starting at 1...
print 'aaseq2 = ',''.join([codons[c] for c in codon_sequence[1::3]])
#...you get the picture...
print 'aaseq3 = ',''.join([codons[c] for c in codon_sequence[2::3]])
"
Construct dictionary from mixed type list,"from itertools import groupby

grouped = groupby(rooms, type)
rooms = {}
for key, grp in grouped:
    roomname = 'room{}'.format(next(grp))
    rooms[roomname] = list(next(grouped)[1])
"
"In a matplotlib figure window (with imshow), how can I remove, hide, or redefine the displayed position of the mouse?","scale_val = 1
ax.format_coord = lambda x, y: 'r=%d,c=%d' % (scale_val * int(x + .5), 
                                             scale_val * int(y + .5))
"
How to match beginning of string or character in Python,"re.findall('[^a]', 'abcd')"
Pythonic way to convert an integer into a hex-escaped string,"x = []
while n:
    x.append(n % 256)
    n //= 256
s = ''.join(r'\x{:02x}'.format(b) for b in reversed(x))
"
eliminate entries in dictionary based on a certain value,"{key: [sublist for sublist in value if sublist[1] != 8]
 for key, value in a.iteritems()}
"
How to replace all Negative Numbers in Pandas DataFrame for Zero,"In [1]: import pandas as pd

In [2]: df = pd.DataFrame({'a': [0, -1, 2], 'b': [-3, 2, 1]})

In [3]: df
Out[3]: 
   a  b
0  0 -3
1 -1  2
2  2  1

In [4]: df[df < 0] = 0

In [5]: df
Out[5]: 
   a  b
0  0  0
1  0  2
2  2  1
"
How to loop through a function for each item in list?,"item = stock.stock_list(location_name)
complete_list = [stock.stock_price(x) for x in sorted(item)] 
"
IplImage inside IplImage,"cv.SetImageROI(blue,(100,100,50,50))
cv.Copy(red, blue)
cv.ResetImageROI(blue)
"
How are all member variables of a Pygame rect updated when only one member is modified?,"class PyRect(object):
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self._topright = None
    @property
    def topright(self):
        if self._topright is None:
            self._topright = (self.x + self.w, self.y)
        return self._topright
    @topright.setter
    def topright(self, newx, newy):
        self.x = newx - self.w
        self.y = newy
        self._topright = (newx, newy)
"
Python descriptors __get__ and __set__,"class Blub(object):
    def __get__(self, instance, owner):
        print('Blub gets ' + instance._blub)
        return instance._blub

    def __set__(self, instance, value):
        print('Blub becomes ' + value)
        instance._blub = value


class Quish(object):
    blub = Blub()

    def __init__(self, value):
        self.blub = value
"
Python loop through list starting at index,"[item for sublist in values[1:] for item in sublist]
"
perform a google search and return the number of results,"import requests
from bs4 import BeautifulSoup
import argparse

parser = argparse.ArgumentParser(description='Get Google Count.')
parser.add_argument('word', help='word to count')
args = parser.parse_args()

r = requests.get('http://www.google.com/search',
                 params={'q':'""'+args.word+'""',
                         ""tbs"":""li:1""}
                )

soup = BeautifulSoup(r.text)
print soup.find('div',{'id':'resultStats'}).text
"
iterate through existing keys and update dictionary python,"
# assumes Python 2.7

from Bio import SeqIO
from collections import Counter
from itertools import izip, product, tee

def get_aligned_quads(seq, length=4):
    args = [iter(seq)] * length
    return (''.join(letters) for letters in izip(*args))

def get_unaligned_quads(seq, length=4):
    args = tee(iter(seq), length)
    for steps,arg in enumerate(args):
        for step in range(steps):
            next(arg, None)
    return (''.join(letters) for letters in izip(*args))

all_quads = [''.join(seq) for seq in product(""ACGT"", repeat=4)]

def quad_freq(sequence, aligned=True):
    get_quads = get_aligned_quads if aligned else get_unaligned_quads
    counts    = {quad:[] for quad in all_quads}

    for i,record in enumerate(SeqIO.parse(sequence, 'fasta')):
        for quad in all_quads:
            counts[quad].append(0)
        for quad in get_quads(record.seq):
            counts[quad][i] += 1
    return counts

print(quad_freq(""$foo""))
"
Removing 'Counter' from Dictionary python,">>> from collections import Counter
>>> tp = {1:Counter({u'x':1, u'b':1, u'H':3}),2:Counter({u'j':1, u'm':4, u'e':2})}
>>> dict((k, dict(v)) for k, v in tp.iteritems())
{1: {u'x': 1, u'b': 1, u'H': 3}, 2: {u'e': 2, u'j': 1, u'm': 4}}
"
How would I make a car move the direction it's pointing (After use of pygame.translation.rotate),"dx = math.cos(math.radians(degree))
dy = math.sin(math.radians(degree))
position = (position[0] + dx * SPEED, position[1] - dy * SPEED)
"
Ignore str.format(**foo) if key doesn't exist in foo,"from string import Template

practise_dict = {""Additional_Details"":""blah blah blah blah"", ""Title"": ""Mr"", ""Surname"": ""Smith"", ""URL"": ""/test/tester""}

msg = """"""From: John Smith <no-reply@somethingsomething.co.uk>
To: $Title $Surname <blah@blahblah.co.uk>
MIME-Version: 1.0
Content-type: text/html
Subject: New Website Enquiry
This is an e-mail message to be sent in HTML format
$Additional_Details
$Date
<b>This is HTML message.</b>
<h1>This is headline.</h1>
`""""""

s = Template(msg).safe_substitute(**practise_dict)
print(s)
"
How to switch nodes at an index with the head of a list?,"def switch(ll, i):
  head = ll
  currentItem = ll      # The head again
  prevItem = None       # The item that links to tempItem
  for x in range(i):    # Find the item to swap
    prevItem = currentItem
    currentItem = currentItem.next

  # Now we swap. We're rotating three items' .next values, so we can't
  # do the really optimized way.
  temp = currentItem.next
  currentItem.next = head.next
  head.next = prevItem.next
  prevItem.next = temp
"
Python - How do I get the process name of the focused window on Ubuntu?(not the window title),"from Xlib import X, XK, protocol, display, Xcursorfont
from Xlib.ext import xtest
from Xlib.protocol import request

disp = display.Display()

root = disp.screen().root
pointer_info = request.QueryPointer(display = disp.display,
                                    window = root)
root_xpos, root_ypos = (pointer_info._data['root_x'], pointer_info._data['root_y'])
targetwindow = disp.get_input_focus().focus
"
Is possible to save render_to_response template from django to server?,"from django.core.cache import cache

def my_mongo_view(request):
    ret = cache.get('home-rendered')
    if ret is None:
        ret = render_to_response('home.html', ...)
        cache.set('home-rendered', ret)
    return ret
"
Python Extend List Comprehension,"csv_ip = '192.168.1.1,192.168.1.20'
single_ip = '33.44.33.22'
empty_ip = None

ip_list = [ip for ip in csv_ip.split(',') + [single_ip] + [empty_ip] if ip]
print ip_list
>>> ['192.168.1.1', '192.168.1.20', '33.44.33.22']
"
Python: list iteration only returns last value,"data = dict()
for covar_type in covs:
    for num in num_comp:
        # covar_type is the same for all iterations of this loop
        # hence only the last one ""survives""
        data[covar_type] = GMM(...)
"
ECDF in python without step function?,">>> xx = np.random.randn(nobs)
>>> ecdf = sm.distributions.ECDF(xx)
>>> plt.plot(ecdf.x, ecdf.y)
[<matplotlib.lines.Line2D object at 0x07A872D0>]
>>> plt.show()
"
How to get a list of the elements in TreeView? PyGtk,"model = self.treeview.get_model()
"
How to do a conditional join in python Pandas?,"windows['beg_date'] = (windows['end_date'].values.astype('datetime64[D]') -
                       np.timedelta64(30,'D'))

def cond_merge(g,windows):
    g = g.merge(windows,on='company',how='left')
    g = g[(g.date >= g.beg_date) & (g.date <= g.end_date)]
    return g.groupby('end_date')['measure'].sum()

print df.groupby('company').apply(cond_merge,windows)

company  end_date  
0        2010-02-01    20
         2010-03-15    30
1        2010-04-01    10
         2010-05-15    15
"
How to add repeating occurences of elements in two lists in python,"filtered_symbolic_path = ['A', 'B', 'C', 'D', 'B', 'C']
filtered_symbolic_path_times = [ 3, 4, 5, 6, 5, 3]
mydict={}
for i,j in zip(filtered_symbolic_path,filtered_symbolic_path_times):
    mydict.setdefault(i,0)
    mydict[i]=j+mydict[i]
"
several replacements in single regular expression,"line='0.2741564350068515+2.6100840481550604*^-10*I\n'
print(""({})"".format(line.strip().replace(""*^"", ""e"").replace(""*I"", ""j"")))
# => (0.2741564350068515+2.6100840481550604e-10j)
"
Best way to store fixed-keys key:value datasets that are accessed by keys in python?,"class Data:
    __slots__ = [""key1"", ""key2""]

    def __init__(self, k1, k2):
        self.key1, self.key2 = k1, k2

    def __getitem__(self, key):
        if key not in self.__slots__:
            raise KeyError(""%r not found"" % key)
        return getattr(self, key)
"
Python list of list selective insertion,"for i, idx in enumerate(idx_n):
    print i, idx
    cluster_entries[ int(idx) ].append( list_from_files[i] )
"
How would I extract this with Python regular expressions?,">>> html = '''<time datetime=""2015-07-25T10:06:46-0700"">2015-07-25 10:06am</time>'''
>>> from bs4 import BeautifulSoup
>>> soup = BeautifulSoup(html)
>>> soup.findAll('time')[0].text
'2015-07-25 10:06am'
"
how to combine the elements of a list representing the elements of a Bash command to a new list featuring the equals symbol,">>> commandOptionsAndArguments = ['myBigTool', '--num-callers', '30', '--leak-check', 'full', '--tool', 'memcheck', '--suppressions', 'etc/valgrind-root.supp', '--suppressions', 'Gaudi.supp/Gaudi.supp', '--suppressions', 'oracleDB.supp', '--suppressions', 'valgrindRTT.supp', '--suppressions', 'root.supp/root.supp', '--mySpecialFlag', '$(which python)', '$(which athena.py)', 'athenaConf.pkl']
>>> re.split(r'\s+(?![^()]*\))', re.sub(r'(--\S+)\s+(\w\S+)', r'\1=\2', ' '.join(commandOptionsAndArguments)))
['myBigTool', '--num-callers=30', '--leak-check=full', '--tool=memcheck', '--suppressions=etc/valgrind-root.supp', '--suppressions=Gaudi.supp/Gaudi.supp', '--suppressions=oracleDB.supp', '--suppressions=valgrindRTT.supp', '--suppressions=root.supp/root.supp', '--mySpecialFlag', '$(which python)', '$(which athena.py)', 'athenaConf.pkl']
"
Why does the code : os.popen('move *.bin tmp) only move one file?,"import glob
import shutil

dest = 'c:/tmp/'

# Get all the files as a list with glob
files = glob.glob('c:/files/*.bin')

# move each file seperatly
for filename in files:
    shutil.move(filename, dest)
"
Python - In a string find a character and print remaining part of string in a new line,">>> import re
>>> with open('abc') as f:
...     for line in f:       
...         line = re.sub(r'\+|;','\n',line.strip())
...         print line                              
...                                                 
abc
abc
bcd
cdf
adf
asfg
"
Effective closures in python,"class myobj(object):
    def __init__(self):
        self.count = 0
    @staticmethod
    def addOne(n):
        return n + 1
    def addOneTimesTwo(self, n):
        return self.addOne(n) * 2
    def __getitem__(self, attrname):
        ""Allows attributes to accessed as if they were key/value pairs in a map.""
        return getattr(self, attrname)

myObj = myobj()
assert myObj[""addOneTimesTwo""](1) == 4
"
Increase the data size,"def generate_random_data():
   hex1 = '%012X' % random.randint(0,10000000000)
   hex2 = '%012X' % random.randint(0,10000000000)
   flt = float(random.randint(0,100000)) # change this value as required
   int1 = random.randint(0,1000000) 
   int2 = random.randint(0,1000000) 
   int3 = random.randint(0,1000000) 
   int4 = random.randint(0,1000000) 

   s = '%s %s %.1f %d %d %d %d' % (hex1.lower(), \
                                   hex2.lower(), \
                                   flt, \
                                   int1, \
                                   int2, \
                                   int3, \
                                   int4)
   return s

def generate_random_data_strings(n):
    for i in xrange(n):
        print generate_random_data()
"
Copying mutable lists in python,"c = a[:]
"
How to deal with a different format in a specific tag using BeautifulSoup,"from bs4 import BeautifulSoup

data = """"""
<table>
    <tr>
      <th>GPU Name:</th>
      <td>BLABLA</td>
    </tr>
        <tr>
      <th>GPU Variant:</th>
      <td>BLABLA</td>
    </tr>
        <tr>
      <th>Process Size: </th>
      <td>BLABLA</td>
    </tr>
    <tr>
      <th>Transistors:</th>
      <td>BLABLA</td>
    </tr>
    <tr>
      <th>Process Size:</th>
      <td>
        Something
                <br />
                Something Else
              </td>
    </tr>
</table>
""""""

soup = BeautifulSoup(data)
section = soup.find_all(""td"")

for section in section:
    if section.parent(text=""GPU Name:""):
        print(section.text)
    elif section.parent(text=""GPU Variant:""):
        print (section.text)
    elif section.parent(text=""Process Size:""):
        print ('/'.join(item.strip() for item in section.find_all(text=True)))
    elif section.parent(text=""Transistors:""):
        print (section.text)
"
How to read and organize text files divided by keywords,"with open('test.txt') as f:
    x = {y.split('\n')[0]:[z.split() for z in y.strip().split('\n')[1:]] for y in f.read().split('*')[1:]}
"
Replace object with another in the entire process / become in Python,"# pylung.py
import sys

def deutsch():
    import os
    os.durchlaufe = os.walk
    # etc...
    import collections
    sys.modules['kollektionen'] = sys.modules['collections']
"
"Python threading, weird result","import threading
import time
import random

print_lock = threading.Lock()
def atomic_print(msg):
    print_lock.acquire()
    print msg
    print_lock.release()


def loop_fn(i):
    n = random.randint(1,5)
    atomic_print(""process {} started "".format(i))
    time.sleep(n)
    atomic_print(""process {} finished"".format(i))

threads = []
for i in range(1,5):
    t = threading.Thread(target=loop_fn, args=(i,))
    t.start()
    threads.append(t)

for t in threads:
    t.join()
print ""end""
"
"How can I intercept calls to python's ""magic"" methods in new style classes?","class Wrapper(object):
    """"""Wrapper class that provides proxy access to an instance of some
       internal instance.""""""

    __wraps__  = None
    __ignore__ = ""class mro new init setattr getattr getattribute""

    def __init__(self, obj):
        if self.__wraps__ is None:
            raise TypeError(""base class Wrapper may not be instantiated"")
        elif isinstance(obj, self.__wraps__):
            self._obj = obj
        else:
            raise ValueError(""wrapped object must be of %s"" % self.__wraps__)

    # provide proxy access to regular attributes of wrapped object
    def __getattr__(self, name):
        return getattr(self._obj, name)

    # create proxies for wrapped object's double-underscore attributes
    class __metaclass__(type):
        def __init__(cls, name, bases, dct):

            def make_proxy(name):
                def proxy(self, *args):
                    return getattr(self._obj, name)
                return proxy

            type.__init__(cls, name, bases, dct)
            if cls.__wraps__:
                ignore = set(""__%s__"" % n for n in cls.__ignore__.split())
                for name in dir(cls.__wraps__):
                    if name.startswith(""__""):
                        if name not in ignore and name not in dct:
                            setattr(cls, name, property(make_proxy(name)))
"
Implementing Flask-Login with multiple User Classes,"class User(db.Model):

    __tablename__ = 'User'
    id = db.Column(db.Integer,primary_key=True)
    username = db.Column(db.String(80),unique=True)
    pwd_hash = db.Column(db.String(200))
    email = db.Column(db.String(256),unique=True)
    is_active = db.Column(db.Boolean,default=False)
    urole = db.Column(db.String(80))


    def __init__(self,username,pwd_hash,email,is_active,urole):
            self.username = username
            self.pwd_hash = pwd_hash
            self.email = email
            self.is_active = is_active
            self.urole = urole

    def get_id(self):
            return self.id
    def is_active(self):
            return self.is_active
    def activate_user(self):
            self.is_active = True         
    def get_username(self):
            return self.username
    def get_urole(self):
            return self.urole
"
using unicode strings with white space as Django url variable,"http://domain.com/{{ some_string_with_spaces|slugify }}/
"
Returning a value at random based on a probability weights,"import random

def myRand(i, w):
    r = random.uniform(0, sum(w))

    # loop through a list of inputs and max cutoff values, returning
    # the first value for which the random num r is less than the cutoff value
    for n,v in map(None, i,[sum(w[:x+1]) for x in range(len(w))]):
        if r < v:
            return n
"
"Django QuerySet: filter by date, then select one more","next = Resource.objects.filter(date__gt=now()).order_by('date')[:1]
archive = Resource.objects.filter(date__lt=now())
qs = list(chain(archive, next))
"
How to remove duplicates from a list in python,">>> from itertools import combinations
>>> def filterSimilar (d):
        while True:
            filteredOne = False
            for s, t in combinations(d, 2):
                if isSimilar(s, t):
                    d.remove(t)
                    filteredOne = True
                    break
            if not filteredOne:
                break
>>> d = ['asdf', 'asxf', 'foo', 'bar', 'baz']   
>>> filterSimilar(d)
>>> d
['asdf', 'foo', 'bar']
"
Creating a dictionary that maps an object to the amount of times it occurs in a list? In Python,"from collections import Counter
lst = [obj1, obj2, obj2, obj2, obj3, obj4, obj4]
counter = Counter(lst)
"
Print a new line in between a list in python,"def parse_list(mylist):
    for seq in mylist:
        if seq: #is not empty
            yield ""\n"".join(map(str,seq))

#with print function
print(*parse_list(stuff), sep=""\n\n"")

#old print statement (but still forward compatible)
print (""\n\n"".join(parse_list(stuff)))
"
Most pythonic way to convert a list of tuples,">>> list_of_tuples = [('day1', 'name1', 'value1'), ('day2', 'name2', 'value2'), ('day3', 'name3', 'value3')]
>>> [list(t) for t in zip(*list_of_tuples)]
[['day1', 'day2', 'day3'], ['name1', 'name2', 'name3'], ['value1', 'value2', 'value3']]
"
Group a list by word length,"class Dicto(dict):
    def __missing__(self, key):
        self[key]=[]
        return self[key]

d=Dicto()
for word in li:
    d[len(word)].append(word)

result=[d[n] for n in sorted(d, reverse=True)] 
print result
"
Get unique list items by nested dictionary key,">>> from collections import OrderedDict
>>> data = OrderedDict([
... (""top1"", OrderedDict([
...     (""key1"", [
...         ""there is no spoon"", ""but dictionaries are hard"",
...     ]),
...     (""key2"", [
...         ""mad max fury road was so good"",
...     ])
... ])),
... (""top2"", OrderedDict([
...     (""key1"", [
...         ""my item"", ""foo bar""
...     ]),
...     (""key2"", [
...         ""blah"", ""more junk""
...     ])
... ]))])
>>>
>>> def get_uniq_by_value(data, val_name):
...     return list(OrderedDict.fromkeys(val for value in data.values() for val in value.get(val_name,[])))
...
>>> get_uniq_by_value(data,""key1"")
['there is no spoon', 'but dictionaries are hard', 'my item', 'foo bar']
"
Python MongoDB (PyMongo) Mutliprocessing cursor,"START = time.time()
def remaining_time(a, b):
    if START:
        y = (time.time() - START)
        z = ((a * y) / b) - y
        d = time.strftime('%H:%M:%S', time.gmtime(z))
        e = round(b / y)
        progress(""{0}/{1} | Tiempo restante {2} ({3}p/s)"".format(b, a, d, e), b, a)


def progress(p, c, t):
    pc = (c * 100) / t
    sys.stdout.write(""%s [%-20s] %d%%\r"" % (p, '█' * (pc / 5), pc))
    sys.stdout.flush()

def dowork(args):
    p, i, pcount  = args
    remaining_time(pcount, i)

def main():
    queue = multiprocessing.Queue()

    procs = [multiprocessing.Process(target=dowork, args=(queue,)) for _ in range(CONFIG_POOL_SIZE)]
    pool = multiprocessing.Pool(CONFIG_POOL_SIZE)
    mongo_query = {}
    products = MONGO.mydb.items.find(mongo_query, no_cursor_timeout=True)
    pcount = products.count()
    pool.map(dowork, ((p, idx, pcount) for idx,p in enumerate(products)))
    pool.close()
    pool.join()
"
Xpath extract dates between certain characters AND use as dates,"In [2]: response.xpath(""p[last()]/text()[contains(., '[')]"").re(r""\d+ \w+ \d{4}"")
Out[2]: [u'15 May 2015']
"
How to pipe parameter string to excutable in python?,"import subprocess
subprocess.call(['a.out'], stdin=file('a.inp'))
"
Join string containg quotation marks,"print '<img src=""{0}"">'.format(site)
"
Multi-level QTreeView,"from PySide.QtGui import *
import sys
import types

class MainFrame(QWidget):
    def __init__(self):
        QWidget.__init__(self)

        tree = {'root': {
                    ""1"": [""A"", ""B"", ""C""],
                    ""2"": {
                        ""2-1"": [""G"", ""H"", ""I""],
                        ""2-2"": [""J"", ""K"", ""L""]},
                    ""3"": [""D"", ""E"", ""F""]}
        }

        self.tree = QTreeView(self)
        layout = QHBoxLayout(self)
        layout.addWidget(self.tree)

        root_model = QStandardItemModel()
        self.tree.setModel(root_model)
        self._populateTree(tree, root_model.invisibleRootItem())

    def _populateTree(self, children, parent):
        for child in sorted(children):
            child_item = QStandardItem(child)
            parent.appendRow(child_item)
            if isinstance(children, types.DictType):
                self._populateTree(children[child], child_item)

if __name__ == ""__main__"":
    app = QApplication(sys.argv)
    main = MainFrame()
    main.show()
    sys.exit(app.exec_())
"
Python append list in loop,">>> root = ['A', 'B', 'C', 'D']
>>> b = root
>>> b[0] = 1
>>> root
[1, 'B', 'C', 'D']
"
Python: 'before' and 'after' for multiprocessing workers,"from multiprocessing import Pool
from collections import Counter
import glob


def build_histogram(filepath):
    """"""This function is run by a worker process.
    The `filepath` argument is communicated to the worker
    through a pipe. The return value of this function is
    communicated to the manager through a pipe.
    """"""
    hist = Counter()
    with open(filepath) as f:
        for line in f:
            hist[line.strip()] += 1
    return hist


def main():
    """"""This function runs in the manager (main) process.""""""

    # Collect paths to data files.
    datafile_paths = glob.glob(""data*.txt"")

    # Create a pool of worker processes and distribute work.
    # The input to worker processes (function argument) as well
    # as the output by worker processes is transmitted through
    # pipes, behind the scenes.
    pool = Pool(processes=3)
    histograms = pool.map(build_histogram, datafile_paths)

    # Properly shut down the pool of worker processes, and
    # wait until all of them have finished.
    pool.close()
    pool.join()

    # Merge sub-histograms. Do not create too many intermediate
    # objects: update the first sub-histogram with the others.
    # Relevant docs: collections.Counter.update
    merged_hist = histograms[0]
    for h in histograms[1:]:
        merged_hist.update(h)

    for word, count in merged_hist.items():
        print ""%s: %s"" % (word, count)


if __name__ == ""__main__"":
    main()
"
Ordering a list of dictionaries in python,"mylist.sort(key=lambda d: (d['weight'], d['factor']))
"
Python - Move elements in a list of dictionaries to the end of the list,"sorted(lst, key=lambda x: x['language'] != 'en')"
using numpy repeat simultaneously on arrays with distinct multiplicities but same dimension,"# Two 1D color arrays
tmp1 = np.array(['red', 'red', 'red', 'green'])
tmp2 = np.array(['white', 'black', 'blue', 'blue'])

# Multiplicity arrays
color1_occupations = [1, 0, 1, 2]
color2_occupations = [0, 2, 0, 1]

# Stack those two color arrays and two multiplicity arrays separately
tmp12 = np.column_stack((tmp1,tmp2))
color_occupations = np.column_stack((color1_occupations,color2_occupations))

# Use np.repeat to get stacked multiplicities for stacked color arrays
out = np.repeat(tmp12,color_occupations.ravel())
"
Store and retreive coordinates using python and yaml,"import yaml

with open('points.yml', 'r') as f:
     doc = yaml.load(f)

print([tuple(p['point']) for p in doc['type']])
"
How to set the current working directory in Python?,os.chdir('c:\\Users\\uname\\desktop\\python')
Pre-process data file before pandas read_csv,"
import pandas as pd
import os
import csv
import io

caminho = r'C:\Users\u5en\Documents\SAP\Testes\\'
arquivo = os.path.join(caminho, ""ExpComp_01.txt"")
arquivo_csv = os.path.splitext(arquivo)[0] + '.csv'

def desmembra(linha, limites):
    # This functions receives each delimiter's index and cuts around it
    return [linha[limites[i]+1:limites[i+1]].strip()
            for i in range(len(limites[:-1]))]

def pre_processa(arquivo, enc):
    # Translates SAP output into an iterator of lists of strings
    with io.open(arquivo, ""r"", encoding=enc) as entrada:
        for line in entrada:
            # Find heading
            if line[0] == ""|"":
                delimitadores = [x for x, v in enumerate(line) if v == '|']
                if line[-2] != ""|"": 
                    delimitadores.append(None)
                cabecalho_teste = line[:50]
                yield desmembra(line, delimitadores)
                break
        for line in entrada:
            if line[0] == ""|"" and line[:50] != cabecalho_teste:
                yield desmembra(line, delimitadores)                

def post_process(dados):
    dados['LEADTIME'] = dados['LEADTIME'].astype('int16')
    for col in ('SEND_TIME', 'LOAD_TIME', 'PRICE'):
        dados[col] = dados[col].str.replace(r'.', '')
    for col in ('SEND_TIME', 'LOAD_TIME', 'APPR_TIME'):
        dados[col] = pd.to_datetime(dados[col], format=""%Y%m%d%H%M%S"")
    return dados

enc = 'mbcs'  
saida = pre_processa(arquivo, enc)
header = next(saida)
dados = pd.DataFrame(saida, columns=header)
dados = post_process(dados)
print(dados)
"
Counting consecutive characters in a string,">>> from collections import Counter
>>> strs=""assassin""
>>> Counter(strs)
Counter({'s': 4, 'a': 2, 'i': 1, 'n': 1})
"
Making each key store a maximum of 5 values in Python Dictionary,"import collections

d = collections.defaultdict(lambda: collections.deque(maxlen=4))
# defaultdict accepts as an argument a function that returns the default
#   state of the value of undefined keys. In this case we make an anonymous
#   function that returns a `collections.deque` with maxlen of 4.

# we could also do
# # import functools, collections
# # d = collections.defaultdict(functools.partial(collections.deque,
# #                                               maxlen=4))

with open('path/to/file.txt', 'r') as infile:
    for line in infile:
        player,score = line.strip().split("":"")
        d[player].append(int(score))
"
addition of int and str,"' ' * (70 - sub) + 'Allen'
"
Django: How to get/set model field value if it is put into any data structure?,"def add_vote(self,choice):
    attname = 'votes_{0}'.format(choice) # get the attribute name
    value = getattr(self, attname) # get the value
    setattr(self, attname, value+1) # set the value
"
Pandas read_csv dtype specify all columns but one,"cols = df.columns[df.columns.str.contains('X')]
df[cols] = df[cols].replace({'True': True, 'False': False})
"
What hash algorithm does Python's dictionary mapping use?,"def hash(tuple):
    mult = 1000003
    x = 0x345678
    for index, item in enumerate(tuple):
        x = ((x ^ hash(item)) * mult) & (1<<32)
        mult += (82520 + (len(tuple)-index)*2)
    return x + 97531
"
pandas: merge several dataframes,"reduce(lambda df1, df2: pd.merge(df1, df2, how='outer'), dfs)
"
pandas - apply replace function with condition row-wise,"df['0'].str.contains('nl') & df['2'].str.contains('fil')
"
How to pass variables in parent to subprocess in python?,"import multiprocessing
import os
import sys

import analysis

parent_dir = os.path.realpath(sys.argv[0])

paths = [os.path.join(folderpath, file) 
         for file in os.listdir(folderpath)]

with multiprocessing.Pool(processes=6) as pool:
    results = pool.map(analysis.analyze, paths)
"
Most efficient/quickest way to parse pixel data with Python?,"import win32ui
window_name = ""Target Window Name"" # use EnumerateWindow for a complete list
wd = win32ui.FindWindow(None, window_name)
dc = wd.GetWindowDC() # Get window handle
j = dc.GetPixel (60,20)  # as practical and intuitive as using PIL!
print j
dc.DeleteDC() # necessary to handle garbage collection, otherwise code starts to slow down over many iterations
"
Processing a sub-list of variable size within a larger list,"print('Current construct number is: #' + row[0] + ' on row ' + str(counter) + ', which is a Gibson assembly')
"
"extracting contents from a tag ""extract"" from Beautifulsoup","def __getattr__(self, tag):
    if len(tag) > 3 and tag.endswith('Tag'):
        # BS3: soup.aTag -> ""soup.find(""a"")
        tag_name = tag[:-3]
        warnings.warn(
            '.%sTag is deprecated, use .find(""%s"") instead.' % (
                tag_name, tag_name))
        return self.find(tag_name)
    # We special case contents to avoid recursion.
    elif not tag.startswith(""__"") and not tag==""contents"":
        return self.find(tag)
    raise AttributeError(
        ""'%s' object has no attribute '%s'"" % (self.__class__, tag))
"
Make all tuples with no more 1s than 0s,"A = [x for x in itertools.product([0, 1], repeat=n) if sum(x)*2<=n]
"
testing for equality using itemgetter,"from operator import itemgetter, eq
from functools import partial

def take_items(a):
    return takewhile(compose(partial(eq, 1), itemgetter(1)), a)
"
improve this very-simple dictionary generator in python,"import itertools

def dict_gen(n):
    letr = 'abcdefghijklmnopqrstuvwxyz'
    return itertools.chain(''.join(j) for i in range(n) 
                           for j in itertools.product(letr, repeat=i+1))
"
Best way to get a variables value,">>> myvar = ['say1','say2','say3','say4','say5']
>>> for index, var in enumerate(myvar, 1):
    print ""{}-{}"".format(index ,var)


1-say1
2-say2
3-say3
4-say4
5-say5
"
Remove all the words from a list of lists which occur in a given set,">>> from collections import Counter
>>> from itertools import chain
>>> L=[['a','b'],['foo','bar'],['spam','eggs'],['b','c'],['spam','bar']]
>>> S=Counter(chain(*L))
>>> S
Counter({'b': 2, 'bar': 2, 'spam': 2, 'a': 1, 'c': 1, 'eggs': 1, 'foo': 1})

>>> [[y for y in x if S[y]!=1] for x in L]
[['b'], ['bar'], ['spam'], ['b'], ['spam', 'bar']]
"
Sensing new line?,"var = open(""test.jel"")
var = var.read()
print var.replace('\n', '\\n\n')
"
How to empty a Python list without doing list = []?,"del a[:]
"
Convert generator object to a dictionary,"dict((i, i * 2) for i in range(10))"
Can't use {{MEDIA_URL}} in Django Flatpages?,"from django import template
from django.conf import settings
from django.template.defaultfilters import stringfilter

register = template.Library()

@register.filter
@stringfilter
def media_url(value):
    """"""Searches for {{ MEDIA_URL }} and replaces it with the MEDIA_URL from settings.py""""""
    return value.replace('{{ MEDIA_URL }}', settings.MEDIA_URL)
media_url.is_safe = True
"
"Python, how to put 32-bit integer into byte array","struct.pack_into(fmt, buffer, offset, v1, v2, ...)
"
Transpose this matrix(python3),"def transpose_matrix(matrix):
    return list(map(list, zip(*matrix)))
"
Numpy sum function returns 1.67772e+07,"print (abs(H1 - H2) < 1e-30).sum()
"
Python: execfile from other file's working directory?,"import os

def makeascript(where):
  f = open(where, 'w')
  f.write('import os\nprint ""Dir in file:"", os.getcwd()\n')
  f.close()

def main():
  where = '/tmp/bah.py'
  makeascript(where)
  execfile(where)
  os.chdir('/tmp')
  execfile(where)

if __name__ == '__main__':
  main()
"
* vs ** for a power of 2 operation,"""""""Evaluating the difference in execution time between n*n and n**2""""""

from time import time

n = 2
t = time()
for i in range(5000000):
    n**2
print(""Time for n**2:\t%0.3f"" % (time()-t))
t = time()
for i in range(5000000):
    n*n
print(""Time for n*n:\t%0.3f"" % (time()-t))


def test(n):
    """"""
    Difference in execution time between n*n and n**2
    within function scope.
    """"""
    t = time()
    for i in range(5000000):
        n**2
    print(""Time for n**2:\t%0.3f"" % (time()-t))
    t = time()
    for i in range(5000000):
        n*n
    print(""Time for n*n:\t%0.3f"" % (time()-t))

test(n)
"
Python3 - default keyword for default values for type?,">>> A = np.array([1, 2, 3, 4, float(""nan"")]) # common type is float64
>>> A
array([  1.,   2.,   3.,   4.,  nan])
>>> A[np.isnan(A)] = A.dtype.type() # nan is replaced with 0.0
>>> A
array([ 1.,  2.,  3.,  4.,  0.])
>>> B = np.array([1, 2, 3, -1, 5]) # common type is int64
>>> B
array([ 1,  2,  3, -1,  5])
>>> B[B == -1] = B.dtype.type() # -1 is replaced with 
>>> B
array([1, 2, 3, 0, 5]) 
"
"How to make a python script which can logoff, shutdown, and restart a computer?","subprocess.call(['shutdown', '/l '])"
Data Nitro and regular expression (Python),"import re
text = r'''    20530 mark@ucvxcx.gov
    20530 kidafd@gmail.com
    20530 vladfeodsaf@usdodfaadj.govv
    20530 syadfadsbil.vvbvx@vnvnvn.gov
    20004 safdbnvis9dfg@infdda.gov
    20530 vhlhsdlf8dlfha@vbvbcxbUI.GOV
    90012-3308  h.james@asdfad.gov
    90012-3308  madsfl.hjlkdjd@pkdoi.gov
    90012 mark.fraser@ruskgb.zx'''
re.compile(r'([\d\-]+)\s+[\w@\.]+').findall(text)
"
Nested regular expression,">>> re.search('(?<=abc)\d+', string).group(0)
'10'
"
Outputting Multi-row CSV Files from Multiple Dictionaries,"import csv

symbol = [""msft"", ""cvx"", ""baba""]
header = [""symbol"",""ev_ebitda"",""asset""]

with open('output.csv', 'wb') as f_output:
    csv_output = csv.DictWriter(f_output, fieldnames=header)
    csv_output.writeheader()

    for s in symbol:
        row = {'asset': 60, 'ev_ebitda': 40, 'symbol': s}
        csv_output.writerow(row)
"
Extract text inside HTML paragraph using BeautifulSoup in Python,"from bs4 import BeautifulSoup

data = """"""
<p>
    <a name=""533660373""></a>
    <strong>Title: Point of Sale Threats Proliferate</strong><br />
    <strong>Severity: Normal Severity</strong><br />
    <strong>Published: Thursday, December 04, 2014 20:27</strong><br />
    Several new Point of Sale malware families have emerged recently, to include LusyPOS,..<br />
    <em>Analysis: Emboldened by past success and media attention, threat actors  ..</em>
    <br />
</p>
""""""

soup = BeautifulSoup(data)
print ''.join(text.strip() for text in soup.p.find_all(text=True, recursive=False))
"
"Replacing a string between two strings on more then one occation with regex, python","_file = re.sub(r'BEGIN COPYRIGHT[\w\s]*?END COPYRIGHT',_copyright, _file)
"
Operation with Arrays in Python,"def countSeq(src):
  last = src[0]
  count = 0
  current = 1
  while current < len(src):
    if src[current] != last:
      count += 1
      last = src[current]
    current += 1
  return count + 1 # last
"
How to insert a blank space(&nbsp) into a Beautifulsoup tag?,"# There are five possible values for the ""formatter"" argument passed in
# to methods like encode() and prettify():
#
# ""html"" - All Unicode characters with corresponding HTML entities
#   are converted to those entities on output.
# ""minimal"" - Bare ampersands and angle brackets are converted to
#   XML entities: &amp; &lt; &gt;
# None - The null formatter. Unicode characters are never
#   converted to entities.  This is not recommended, but it's
#   faster than ""minimal"".
"
Passing a Django model attribute name to a function,"def do_something(attribute, objects):
    results = []
    for object in objects:
        if hasattr(object, attribute):
            results.append(getattr(object, attribute))
    return results
"
Python matplotlib plot3d contour length,"import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
from scipy.interpolate import griddata

def randrange(n, vmin, vmax):
    return (vmax - vmin)*np.random.rand(n) + vmin

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
n = 100
for c, m, zl, zh in [('r', 'o', -50, -25), ('b', '^', -30, -5)]:
    xs = randrange(n, 23, 32)
    ys = randrange(n, 0, 100)
    zs = randrange(n, zl, zh)
    ax.scatter(xs, ys, zs, c=c, marker=m)

# define grid
xi = np.linspace(np.min(xs),np.max(xs),n)
yi = np.linspace(np.min(ys),np.max(ys),n)
zi = griddata((xs, ys), zs, (xi[None,:], yi[:,None]), method='cubic')

# set desire levels and plot contour
levels = [(np.min(zs)+np.max(zs))/2.]
cs = plt.contour(xi,yi,zi,linewidths=1.25,colors='k', levels=levels)

# get x,y of contour lines' segments and calc contour lines length
print ""x, y of contour lines "", levels
length = 0
x0,y0 =  cs.allsegs[0][0][0]
startx = x0
starty = y0
print x0, y0
for coords in cs.allsegs[0][0][1:]:
    x1,y1 =  coords[0], coords[1]
    length += np.sqrt((x1-x0)**2 + (y1-y0)**2)
    x0,y0 = x1,y1
    print x0,y0

length += np.sqrt((startx-x0)**2 + (starty-y0)**2)
print ""length: "", length

plt.show()
"
Python side-by-side merge of comma-delimited text files,"from collections import OrderedDict
d= OrderedDict()

import fileinput
import os

with open(""joined.txt"",""w"") as f:
    for line in fileinput.input(os.listdir(""path_to"")):
        spl = line.strip().split("","")
        d.setdefault(spl[0],[])
        d[spl[0]] += spl[1:]
    for k,v in d.items():
        f.write(""{} {}\n"".format(k,"","".join(v)))
"
Python-load data and do multi Gaussian fit,"err3 = np.sqrt(errfunc3(optim3, data[:,0], data[:,1])).sum()
err2 = np.sqrt(errfunc2(optim2, data[:,0], data[:,1])).sum()
print('Residual error when fitting 3 Gaussians: {}\n'
    'Residual error when fitting 2 Gaussians: {}'.format(err3, err2))
# Residual error when fitting 3 Gaussians: 3.52000910965
# Residual error when fitting 2 Gaussians: 3.82054499044
"
Python: split string and get position,"from itertools import groupby

str_ = '  d     A7    g7'

for k, g in groupby(enumerate(str_), lambda x: not x[1].isspace()):
    if k:
        pos, first_item = next(g)
        print pos, first_item + ''.join([x for _, x in g])
"
Python: Split list in to sets,"items = [1,2,3,4,5,6,7,8,9]

def SplitSets(iterable,set_size):
    for i, elem in enumerate(iterable):
        yield i/set_size, i%set_size, elem

for a,b,c in SplitSets(items,3):
    print a,b,c
"
How to delete a character off a string with variables and functions in Python?,"print(*range(50, 150), sep='; ')
"
Help with speeding up dictionary sort loop in Python?,"for k, v in A_dict.items():
    for i, value in B_dict.items():
        if k == value[0]:
            outfile.write('{0}\t{1}\t{2}\t{3}\t{4}\t{5}\n'.format(
                i, k, v, value[1], value[2], value[3])
"
How can I make my code more readable and DRYer when working with XML namespaces in Python?,"from lxml import etree as ET
from pprint import pprint
data = """"""<?xml version=""1.0""?>
<d:data xmlns:d=""dns"">
    <country name=""Liechtenstein"">
        <rank>1</rank>
        <year>2008</year>
        <gdppc>141100</gdppc>
        <neighbor d:name=""Austria"" direction=""E""/>
        <neighbor name=""Switzerland"" direction=""W""/>
    </country>
    <country name=""Singapore"">
        <rank>4</rank>
        <year>2011</year>
        <gdppc>59900</gdppc>
        <neighbor name=""Malaysia"" direction=""N""/>
    </country>
</d:data>""""""
root = ET.fromstring(data)
my_namespaces = {'x':'dns'}
xp=root.xpath(""/x:data/country/neighbor/@x:name"", namespaces=my_namespaces)
pprint(xp)
xp=root.xpath(""//@x:name"", namespaces=my_namespaces)
pprint(xp)
xp=root.xpath(""/x:data/country/neighbor/@name"", namespaces=my_namespaces)
pprint(xp)
"
Python3 defining room conditions,"dark = True
def isdark():
     return dark

if isdark():
    print('bt')
else:
     print('dasd')
"
Modify the Ramer–Douglas–Peucker (RDP) algorithm in numpy to return a mask instead of the values,"import numpy as np

def pldist(x0, x1, x2):
    return np.divide(np.linalg.norm(np.linalg.det([x2 - x1, x1 - x0])),
                     np.linalg.norm(x2 - x1))

def rdp_index(M, epsilon=0, dist=pldist):

    dmax = 0.0
    index = -1

    for i in xrange(1, M.shape[0]):
        d = dist(M[i], M[0], M[-1])

        if d > dmax:
            index = i
            dmax = d

    if dmax > epsilon:
        r1 = rdp_index(M[:index + 1], epsilon, dist)
        r2 = rdp_index(M[index:], epsilon, dist)

        return np.vstack((r1[:-1], r2))
    else:
        part_mask = np.empty_like(M, dtype = bool)
        part_mask.fill(False)
        part_mask[0] = True
        part_mask[-1] = True
        return part_mask
"
How to convert *any* Python object into a string?,">>> a=1             # integer
>>> class X: pass
...
>>> x=X()           # class
>>> y='\u5000'      # Unicode string
>>> z=b'\xa0'       # non-ASCII byte string
>>> ' '.join(ascii(i) for i in (a,x,y,z))
""1 <__main__.X object at 0x0000000002974B38> '\\u5000' b'\\xa0'""
"
HTML-escaping replacement fields when using str.format() in Python,"""Hello, {user.first_name}!"".format(user=django.utils.html.escape(my_user))
"
What is the best way to print a table with delimiters in Python,print('\n'.join('\t'.join(str(col) for col in row) for row in tab))
Saving Raw_input to a list when used in a While Loop,"while True:
        moduleName = raw_input(""Please enter module name: "") 
        if moduleName == ""-1"":
            break
        grade = raw_input (""Please enter students grade for "" + moduleName+"": "")
"
in python which would be the fastest way to compare / test with an lists,">>> from timeit import timeit
>>> l1 = [''] * 1000
>>> l2 = [''] * 1000
>>> timeit(lambda:l1 == l2)
4.670141935348511
>>> timeit(lambda:l1.count('') == len(l1))
4.50224494934082
"
Fill a list in a loop,"DU = []

for index, line in enumerate(oz):

   line = line.strip() if (index +1) % 15 != 0 else line.strip().split(' ')[0]

   for i in range(0,len(line)-3,3):

      DU.append(line[i:i+3])
"
Select dataframe rows between two dates,"df = df.loc[mask]
"
One int for every python object,"class MyObject(object):
    ID = 0

    def __init__(self):
       self.id = MyObject.ID = MyObject.ID + 1
"
Find the permutations that sums to the three smallest numbers,">>> lists = [
    [1, 2, 30, 40],
    [1, 2, 30, 40],
    [10, 20, 30, 40],
    [10, 20, 30, 40],
]
>>> for p in find_smallest_sum_permutations(lists):
...     print p, sum(p)

[1, 1, 10, 10] 22
[2, 1, 10, 10] 23
[1, 2, 10, 10] 23
[2, 2, 10, 10] 24
"
Python break list values into sub-components and maintain key,">>> t = ['2925729', 'Patrick did not shake our hands nor ask our names. He greeted us promptly and politely, but it seemed routine.']
>>> [ [t[0], a + '.'] for a in t[1].rstrip('.').split('.')]
[['2925729', 'Patrick did not shake our hands nor ask our names.'], ['2925729', ' He greeted us promptly and politely, but it seemed routine.']]
"
Multiple functions to write into a single log file using Python,"import logging
logging.basicConfig(filename='example.log',level=logging.DEBUG)

def log1():
    logging.info('log1')

def log2():
    logging.info('log2')

if __name__ == '__main__':
    log1()
    log2()
"
How to run a line in Powershell in Python 2.7?,"import subprocess

product    = '765377'
scriptPath = './uploadImageToBigcommerce.ps1'

def qq(s):
    return ""'%s'"" % s

def process_image(sku, fileType, searchDirectory, destinationPath, scriptPath):
    psCode = '. ' + scriptPath + '; Process-Image ' + qq(fileType) + ' ' + \
             qq(searchDirectory) + ' ' + qq(destinationPath)
    subprocess.call(['powershell', '-Command', '& {'+psCode+'}'], shell=True)

process_image(product, '.jpg', 'C:\Images', 'C:\webDAV', scriptPath)
"
Printing all possible phrases (consecutive combinations of words) in a given string,"from itertools import combinations
text = ""the big fat cat sits on the mat eating a rat""
lst = text.split()
for start, end in combinations(range(len(lst)), 2):
    print lst[start:end+1]
"
How do I force recv() in Socket to NOT convert my hex values into ASCII if it can (python),">>> s = b'\x18c\xd8\xd6\x1f\x01 \x18'
>>> "" "".join([""{:02X}"".format(ord(c)) for c in s])
'18 63 D8 D6 1F 01 20 18'
"
Python: add decision column from string (Pandas),"In [16]:
cuts = ""(Var1 < 0.8) & (Var2 < 0.8)""
df.loc[df.query(cuts).index, 'Decision'] = True
df.loc[~df.index.isin(df.query(cuts).index), 'Decision'] = False
df

Out[16]:
       Var1      Var2 Decision
0  0.982730  0.370334    False
1  0.269056  0.099330     True
2  0.697314  0.204711     True
3  0.272982  0.647933     True
4  0.096770  0.111819     True
5  0.278602  0.353552     True
6  0.959481  0.566532    False
7  0.552109  0.973224    False
8  0.563421  0.298835     True
9  0.395232  0.968710    False
"
Remove values from lists of values in a dictionary,"for k, toremove in values_to_remove.viewitems():
    t_dict.get(k, set()).difference_update(toremove)
"
Python lambda with double loops,"lambda_function = lambda height, width, src, mask: [[src[h][w] if mask[h][w] > 0 else mask[h][w] for w in range(width)] for h in range(height)]
"
Scrapy start_urls are not parsed,"from scrapy.spider import Spider
from scrapy.selector import Selector


class wildberries(Spider):
    name = ""wildberries""
    allowed_domains = ['wildberries.ru']
    start_urls      = ['http://www.wildberries.ru/']

    def parse(self, response):
        selector = Selector(response)
        print ""Hello World"", response.url
        maincats = selector.xpath('//div[@class=""topmenu""]/ul[@class=""green_menu""]/li/a/@href').extract()
        print maincats
"
Performance issue with Python list operations,"n=input()
l = list(range(1, n))
step = 2
while step <= len(l):
    l = [num for ind, num in enumerate(l) if (ind + 1) % step != 0]
    step += 1
print(l)
"
"How to use iter(v,w) with a function?","for line in iter(fileobject.readline, ''):
"
Python: elegant way of creating a list of tuples?,"[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"
delete every nth row or column in a matrix using Python,"np.delete(a, list(range(0, a.shape[1], 8)), axis=1)"
Setting Different Bar color in matplotlib Python,">>> f=plt.figure()
>>> ax=f.add_subplot(1,1,1)
>>> ax.bar([1,2,3,4], [1,2,3,4])
<Container object of 4 artists>
>>> ax.get_children()
[<matplotlib.axis.XAxis object at 0x6529850>, 
 <matplotlib.axis.YAxis object at 0x78460d0>,  
 <matplotlib.patches.Rectangle object at 0x733cc50>, 
 <matplotlib.patches.Rectangle object at 0x733cdd0>, 
 <matplotlib.patches.Rectangle object at 0x777f290>, 
 <matplotlib.patches.Rectangle object at 0x777f710>, 
 <matplotlib.text.Text object at 0x7836450>, 
 <matplotlib.patches.Rectangle object at 0x7836390>, 
 <matplotlib.spines.Spine object at 0x6529950>, 
 <matplotlib.spines.Spine object at 0x69aef50>,
 <matplotlib.spines.Spine object at 0x69ae310>, 
 <matplotlib.spines.Spine object at 0x69aea50>]
>>> ax.get_children()[2].set_color('r') 
 #You can also try to locate the first patches.Rectangle object 
 #instead of direct calling the index.
"
Python: Automatically initialize instance variables?,"from functools import wraps
import inspect

def initializer(fun):
   names, varargs, keywords, defaults = inspect.getargspec(fun)
   @wraps(fun)
   def wrapper(self, *args, **kargs):
       for name, arg in zip(names[1:], args) + kargs.items():
           setattr(self, name, arg)
       fun(self, *args, **kargs)
   return wrapper
"
Python - Remove Braces and Commas from a Tuple CSV File,"t = [(u'My', u'D'), (u'dog', u'N')]

print("" "".join(["" "".join(v) for v in t]))
My D dog N
"
Python Crawler - need help with my algorithm,"import time

lastResult = 100

def checkNextID(ID, lastResult = lastResult, diff = [8,18,7,17,6,16,5,15]):
    runs = 0
    SEEN = set()
    while True:
        if ID>lastResult:
            print ('\n=========================='
                   '\nID==%s'
                   '\n   ID>lastResult is %s : program STOPS')\
                  % (ID,ID>lastResult,)
            break
        runs += 1
        if runs % 10 == 0:  time.sleep(0.5)
        if ID in SEEN:
            print '-----------------\n%s\nID==%s  already seen, not examined' % (SEEN,ID)
            ID += 1
        else:
            curRes = isValid(ID)
            if curRes:
                print '--------------------------\n%s\nID==%s  vaaaalid'  % (SEEN,ID)
                while True:
                    for i in diff:
                        runs += 1
                        if runs % 10 == 0:  time.sleep(0.5)
                        curRes = isValid(ID+i)
                        print '   '+str(SEEN)
                        if i==diff[0]:
                            SEEN = set([ID+i])
                        else:
                            SEEN.add(ID+i)
                        if curRes:
                            print '   i==%2s   ID+i==%s   valid' % (i,ID+i)
                            ID += i
                            print '--------------------------\nID==%s' % str(ID)
                            break
                        else:
                            print '   i==%2s   ID+i==%s   not valid' % (i,ID+i)
                    else:
                        ID += 1
                        break
            else:
                print '--------------------------\n%s\nID==%s  not vaaaaalid' % (SEEN,ID)
                ID += 1


def isValid(ID, valid_ones = (1,9,17,25,30,50,52,60,83,97,98)):
    return ID in valid_ones


checkNextID(0)
"
Get tz offset from sting,">>> from datetime import datetime
>>> dt = datetime.strptime(""2013-12-02 22:00:00"", ""%Y-%m-%d %H:%M:%S"")
>>> dt = dt.replace(tzinfo=FixedOffset(-8*60, ""GMT+0800""))
>>> dt.isoformat()
'2013-12-02T22:00:00-08:00'
"
using a python list as input for linux command that uses stdin as input,"import subprocess
data = [""list"", ""of"", ""stuff""]
proc = subprocess.Popen([""sql"", ""-c"", ""COPY table FROM stdin""], stdin=subprocess.PIPE)
proc.communicate(""\n"".join(data))
"
Sum of calculation in a variable,"def calc(x=0, y=0, z=0):
    expression = raw_input('Enter an expression: ')

    return eval(expression, None, locals())
"
Reading specific line from string,"import re
....
re.split(""\n"", file_variable)
"
python time + timedelta equivalent,"from datetime import date, datetime, time, timedelta

dt = datetime.combine(date.today(), time(23, 55)) + timedelta(minutes=30)
print dt.time()
"
Maya to deadline job submission python command,"Here is my python code
""""""
This script will submit current file to deadline for render
""""""
import os
import sys
import subprocess
import maya.cmds as cmds


def maya_deadline_job():
    """"""
    this function will collect scene file information and write a job file
    :return:
    """"""
    renderer_name = 'File'
    version = cmds.about(version=True)
    project_path = cmds.workspace(q=True, directory=True)
    width = cmds.getAttr(""defaultResolution.width"")
    height = cmds.getAttr(""defaultResolution.height"")
    output_file_path = cmds.workspace(expandName=""images"")
    output_file_prefix = cmds.getAttr(""defaultRenderGlobals.imageFilePrefix"")
    scene_file = cmds.file(q=True, location=True)
    info_txt = 'Animation=1\n' \
               'Renderer={}\n' \
               'UsingRenderLayers=0\n' \
               'RenderLayer=\n' \
               'RenderHalfFrames=0\n' \
               'LocalRendering=0\n' \
               'StrictErrorChecking=1\n' \
               'MaxProcessors=0\n' \
               'AntiAliasing=low\n' \
               'Version={}\n' \
               'Build=64bit\n' \
               'ProjectPath={}\n' \
               'ImageWidth={}\n' \
               'ImageHeight={}\n' \
               'OutputFilePath={}\n' \
               'OutputFilePrefix={}\n' \
               'Camera=\n' \
               'Camera0=\n' \
               'Camera1=RENDERShape\n' \
               'Camera2=frontShape\n' \
               'Camera3=perspShape\n' \
               'Camera4=sideShape\n' \
               'Camera5=topShape\n' \
               'SceneFile={}\n' \
               'IgnoreError211=0'.format(renderer_name
                                         version,
                                         project_path,
                                         width,
                                         height,
                                         output_file_path,
                                         output_file_prefix,
                                         scene_file)

    maya_deadline_job_file = r'{}\maya_deadline_job.job'.format(os.getenv('TEMP'))
    with open(maya_deadline_job_file, 'w') as job_file:
        job_file.write(info_txt)
    return maya_deadline_job_file


def maya_deadline_info():
    """"""
    this function will collect maya deadline information and write a job file
    :return:
    """"""
    info_txt = 'Plugin=MayaBatch\n' \
               'Name=MY_FILE_NAME\n' \
               'Comment=Render Launch by Python\n' \
               'Pool=none\n' \
               'MachineLimit=0\n' \
               'Priority=50\n' \
               'OnJobComplete=Nothing\n' \
               'TaskTimeoutMinutes=0\n' \
               'MinRenderTimeMinutes=0\n' \
               'ConcurrentTasks=1\n' \
               'Department=\n' \
               'Group=none\n' \
               'LimitGroups=\n' \
               'JobDependencies=\n' \
               'InitialStatus=Suspended\n' \
               'OutputFilename0=C:/Users/raijv/Documents/maya/projects/default/images/masterLayer_2.iff.????\n' \
               'Frames=1-10\n' \
               'ChunkSize=1'

    maya_deadline_info_file = r'{}\maya_deadline_info.job'.format(os.getenv('TEMP'))
    with open(maya_deadline_info_file, 'w') as job_file:
        job_file.write(info_txt)
    return maya_deadline_info_file


def submit_to_deadline():
    """"""
    this function will send current scene to deadline for rendering
    :return:
    """"""
    deadline_cmd = r""C:\Program Files\Thinkbox\Deadline\bin\deadlinecommand.exe""
    job_file = maya_deadline_job()
    info_file = maya_deadline_info()
    command = '{deadline_cmd} ""{job_file}"" ""{info_file}""'.format(**vars())
    process = subprocess.Popen(command, stdout=subprocess.PIPE)
    lines_iterator = iter(process.stdout.readline, b"""")
    #  Lets print the output log to see the Error / Success 
    for line in lines_iterator:
        print(line)
        sys.stdout.flush()

submit_to_deadline()
"
Python3: Calling functions saved as values (strings) in a dictionary,"eval(fnc)(conn_name) # or eval(fnc(conn_name))
"
Get Xpath dynamically using ElementTree getpath(),"tree = etree.parse(xmlFileUrl)
nsmap = {'def':'http://www.w3.org/2005/Atom'}
for entry in tree.xpath('//def:entry', namespaces=nsmap):
    category = entry.xpath('category')
"
Adding scikit-klearn (sklearn) prediction to pandas data frame,"import numpy as np

import pandas as pd
from sklearn import datasets, linear_model

# Load the diabetes dataset
diabetes = datasets.load_diabetes()

# Use only one feature
diabetes_X = diabetes.data[:, np.newaxis, 2]

# Split the data into training/testing sets
diabetes_X_train = diabetes_X[:-20]
diabetes_X_test = diabetes_X[-20:]

# Split the targets into training/testing sets
diabetes_y_train = diabetes.target[:-20]
diabetes_y_test = diabetes.target[-20:]

# Create linear regression object
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(diabetes_X_train, diabetes_y_train)

print(regr.predict(diabetes_X_test))

df = pd.DataFrame(regr.predict(diabetes_X_test))

print(df)
"
How can I apply a math operation on a list of tuples with `map()`?,"[[float(v) / 10000 for v in t] for t in b]
"
Python Recursive Search of Dict with Nested Keys,"def _get_recursive_results(d, iter_key, get_keys, h=None):
    if h is None:
        h = []
    h.append({k:d.get(k) for k in get_keys})
    d2 = d.copy()
    for k in iter_key:
        if not d2:
            continue
        d2 = d2.get(k)
    for td in d2:
        d3 = td.copy()
        for k in iter_key:
            if not d3:
                continue
            d3 = d3.get(k)
        if d3:
            return _get_recursive_results(td, iter_key, get_keys, h)
        h.append({k:td.get(k) for k in get_keys})
    else:
        l = [k for k in h]
        return l
"
Suggestions for parsing these data and rounding numbers,"In [36]: strs=""4.00""

In [37]: float(strs)
Out[37]: 4.0

In [39]: format(float(strs),"".2f"")
Out[39]: '4.00'

In [40]: ""{0:.2f}"".format(float(strs))
Out[40]: '4.00'
"
SQLAlchemy memory hog on select statement,"   from sqlalchemy import create_engine, MetaData
   import MySQLdb.cursors
   engine = create_engine('mysql://root:zenoss@localhost/e2', connect_args={'cursorclass': MySQLdb.cursors.SSCursor})
   meta = MetaData(engine, reflect=True)
   conn = engine.connect()
   rs = s.execution_options(stream_results=True).execute()
"
How to access all dictionary keys in template,"{% if i in mydict.keys %} ok {% endif %}
"
Extracting data from generator object,"top_n = 5  # The number of top items returned.
goal = pd.DataFrame([[None] * 4] * top_n,  # 4 = number of columns
                    columns=['custIndex', 'value', 'time_set', 'Column'])
for time_set in time_sets:
    grouped = data.asfreq(time_set).groupby(df.custIndex).sum()
    t = (group for group in grouped.unstack().iteritems())
    for [column, custIndex], val in t:
        if val > min(goal.value):
            # Append item to end of goal DataFrame and then re-sort.
            goal.iloc[-1] = [custIndex, val, time_set, column]
            goal.sort('value', ascending=False, inplace=True)

goal.set_index(['custIndex', 'time_set', 'Column'], inplace=True)

>>> goal
                          value
custIndex time_set Column          
12        W-Tue    B       3.048822
5         W-Fri    A        2.63997
18        W-Wed    B       2.570899
10        W-Wed    B       2.493457
19        W-Thu    B       2.164974
"
Python2.7 - Passing argument to command line to filter CSV according to parameter,"def find_by_val(col, k, fle, delim="",""):
    with open(fle) as f:
        names = next(f).rstrip().split(delim)
        if col not in names:
            print(""Column does not exist."")
            return
        r, found = csv.DictReader(f, fieldnames=names), False
        for d in r:
            if un_id == d[col]:
                if not found:
                    print("","".join(names))
                    print("","".join([d[n] for n in names]))
                    found = True
                else:
                    print("","".join([d[n] for n in names]))
        if not found:
            print(""No matching value for {} found"".format(k))
"
Python: list filtering using list comprehension,"seen = set()

[x for x in mylist if x not in seen and not seen.add(x)]
Out[3]: [1, 2, 3, 6, 7, 9, 11]
"
Breaking ties in Python sort,"sorted(yourlst, key=lambda t: (abs(t[0] - t[1])), t[0]), reverse=True)
"
Python: saving image from web to disk,"import urllib
urllib.urlretrieve('http://chart.apis.google.com/...', 'outfile.png')
"
How do I apply a style to the whole row using XLWT Python Excel?,"for row_index, cell_values in enumerate(csv_input):
    # Determine what style to use for the whole row
    if row_index == 0:
        common_style = headerStyle
    elif row_index == 3:
        common_style = subheadStyle
    elif ""Assets"" in cell_values:
        # perhaps elif any(""Assets"" in cell_value for cell_value in cell_values):
        # perhaps elif cell_values and cell_values[0] == ""Assets"":
        # perhaps elif cell_values and ""Assets"" in cell_values[0]:
        common_style = highlightStyle
    else:
        common_style = rowStyle
    # Iterate over the columns
    for col_index, cell_value in enumerate(cell_values):
        if common_style == rowStyle and is_number(cell_value):
            cell_value = float(cell_value)
        sheet.write(row_index, col_index, cell_value, common_style)
"
Listing all combinations of a list up to length n (Python),"from itertools import combinations

x = ['a','b','c','d','e']
n = 2
c = [comb for i in range(n) for comb in combinations(x, i + 1)]
print(c)
"
Split check_output return value,"#!/usr/bin/env python
import subprocess
from subprocess import check_output

def RunFPing(command):
    output = check_output(command.split("" ""),stderr=subprocess.STDOUT))
    output = str(output).split("" : "")
    return output

if __name__ == ""__main__"":
    print RunFPing(""fping -C 1 -q 192.168.1.25"")
"
What is the easiest way to print 10 characters in Python?,"print(""A""*10)
"
"Learn Python the Hard Way, ex60 Extra Credit 3","target.write(""%s\n,%s\n,%s\n"")
"
Remove a parameter from string,"import urllib.parse as parse

paramstr = 'orderby=alphabetical&other=param&page=1234'
params = parse.parse_qsl(paramstr)
params = [(name, val) for name, val in params if name != 'page']
print(parse.urlencode(params))
"
python 2.6-removing and counting duplicates in a list of dictionaries effeciently,"from itertools import groupby

def canonicalize_dict(x):
    ""Return a (key, value) list sorted by the hash of the key""
    return sorted(x.items(), key=lambda x: hash(x[0]))

def unique_and_count(lst):
    ""Return a list of unique dicts with a 'count' key added""
    grouper = groupby(sorted(map(canonicalize_dict, lst)))
    return [dict(k + [(""count"", len(list(g)))]) for k, g in grouper]

a = [{'text': 'hallo world', 'num': 1},  
     #....
     {'text': 'hallo world', 'num': 1}]

print unique_and_count(a)
"
how to check if a cell is empty in openpyxl python,"newstocks.append(prevsymbol)
"
Set the hover background color of a Gtk3 MenuItem,"from gi.repository import Gtk, Gdk
import sys


class TrayIcon:

    def __init__(self):
        self.statusicon = Gtk.StatusIcon()
        self.statusicon.set_from_stock(Gtk.STOCK_MEDIA_PLAY)
        self.statusicon.connect(""popup-menu"", self.OnShowPopupMenu)
        self.statusicon.set_tooltip_text(""HELLO"")
        window = Gtk.Window()

    def OnShowPopupMenu(self, icon, button, time):

        display = Gdk.Display.get_default()
        screen = display.get_default_screen()

        css_provider = Gtk.CssProvider()

        gtk3Css = """"""GtkMenuItem {
                        border:@bg_color;
                        background:@bg_color;
                    }

                    GtkMenuItem:hover
                    {
                        background:@selected_bg_color;
                    }

                    GtkWidget
                    {
                        border: @bg_color;
                    }

                    #mymenu:hover
                    {
                        color:@fg_color;
                        background: @bg_color;
                        -unico-inner-stroke-width: 0;
                    }""""""
        css_provider.load_from_data(gtk3Css)
        context = Gtk.StyleContext()
        context.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

        menu = Gtk.Menu()
        #menu.set_name('mymenu')
        first = self.GetMenuItem(""First"")
        first.set_name('mymenu')
        second = self.GetMenuItem(""Second"")
        menu.append(first)
        menu.append(second)
        menu.show_all()
        menu.popup(None, None, lambda w,x: self.statusicon.position_menu(menu, self.statusicon), self.statusicon, 3, time)

    def GetMenuItem(self, txt):
    menuItem = Gtk.MenuItem()
    menuItem.set_label(txt)

    menuItem.connect(""button_press_event"", self.exit)

    return menuItem

    def exit(self, a,b):
    sys.exit()


TrayIcon()
Gtk.main()
"
How to make a buffered writer?,"count = (size+chunksize-1) // chunk size
for chunk in range(count):
    f.seek(start + chunk * chunksize + deleted_line_size, 0)
    buf = f.read(chunksize)
    f.seek(start + chunk * chunksize, 0)
    f.write(buf)
"
BeautifulSoup - scraping a forum page,"from bs4 import BeautifulSoup
import csv
import urllib2

# get page source and create a BeautifulSoup object based on it
print ""Reading page...""
page = urllib2.urlopen(""https://silkroad5v7dywlc.onion.to/index.php?action=printpage;topic=28536.0"")
soup = BeautifulSoup(page)

# if you look at the HTML all the titles, dates, 
# and authors are stored inside of <dt ...> tags
metaData = soup.find_all(""dt"")

# likewise the post data is stored
# under <dd ...>
postData = soup.find_all(""dd"")

# define where we will store info
titles = []
authors = []
times = []
posts = []

# now we iterate through the metaData and parse it
# into titles, authors, and dates
print ""Parsing data...""
for html in metaData:
    text = BeautifulSoup(str(html).strip()).get_text().encode(""utf-8"").replace(""\n"", """") # convert the html to text
    titles.append(text.split(""Title:"")[1].split(""Post by:"")[0].strip()) # get Title:
    authors.append(text.split(""Post by:"")[1].split("" on "")[0].strip()) # get Post by:
    times.append(text.split("" on "")[1].strip()) # get date

# now we go through the actual post data and extract it
for post in postData:
    posts.append(BeautifulSoup(str(post)).get_text().encode(""utf-8"").strip())

# now we write data to csv file
# ***csv files MUST be opened with the 'b' flag***
csvfile = open('silkroad.csv', 'wb')
writer = csv.writer(csvfile)

# create template
writer.writerow([""Time"", ""Author"", ""Title"", ""Post""])

# iterate through and write all the data
for time, author, title, post in zip(times, authors, titles, posts):
    writer.writerow([time, author, title, post])


# close file
csvfile.close()

# done
print ""Operation completed successfully.""
"
FTP_ASCII in Python,">>> s = ""STRING""
>>> str.lower(s) # unbound method
'string'
>>> s.lower()    # bound method
'string'
"
python ipaddress()reverse_pointer equivalent for 3.4,"def _reverse_pointer(self):
    """"""Return the reverse DNS pointer name for the IPv6 address.

    This implements the method described in RFC3596 2.5.

    """"""
    reverse_chars = self.exploded[::-1].replace(':', '')
    return '.'.join(reverse_chars) + '.ip6.arpa'
"
Create name value pairs in python,"jvmData = ""..."" #the string holding the data
jvmLines = jvmData.split(""\n"") #a list of the lines in the string
lines = filter(lambda x: ""name="" in x, jvmLines) #filter all data lines
result = {}
for line in lines:
    data = dict(map(lambda x: x.split(""=""), line.split("", "")))
    if data[""name""] == ""HeapSize"":
        result[data[""name""]] = data[""current""]
    else:
        result[data[""name""]] = data[""count""]
"
Shift all indices in NumPy array,"y = numpy.roll(x, 1)
y[0] = 0
"
Why is string search fastest as compared to list search and set search?,">>> timeit.Timer(""'A' in l"", ""from string import ascii_letters, digits, whitespace; l = list(ascii_letters + digits + whitespace)"").timeit(999999)
0.38520193099975586
>>> timeit.Timer(""'A' in s"", ""from string import ascii_letters, digits, whitespace; s = set(ascii_letters + digits + whitespace)"").timeit(999999)
0.046868085861206055
>>> timeit.Timer(""'A' in s"", ""from string import ascii_letters, digits, whitespace; s = ascii_letters + digits + whitespace"").timeit(999999)
0.06492304801940918
"
"Max() returns highest list, not number","print tuple(max(lst) for lst in scores[0:3])
"
"python tesseract ""AttributeError: setImage""","def SetImage(self, *args): return _tesseract.TessBaseAPI_SetImage(self, *args)
"
Check if a list is a rotation of another list that works with duplicates,"def cyclic_equiv(u, v):
    n, i, j = len(u), 0, 0
    if n != len(v):
        return False
    while i < n and j < n:
        k = 1
        while k <= n and u[(i + k) % n] == v[(j + k) % n]:
            k += 1
        if k > n:
            return True
        if u[(i + k) % n] > v[(j + k) % n]:
            i += k
        else:
            j += k
    return False
"
Python dictionary replace values,"current_dict = {'corse': 378, 'cielo': 209, 'mute': 16}
print(current_dict)
def replace_value_with_definition(key_to_find, definition):
    for key in current_dict.keys():
        if key == key_to_find:
            current_dict[key] = definition

replace_value_with_definition('corse', 'Definition of ""corse""')
print(current_dict)
"
Python : Get many list from a list,">>> tuple(tuple(n for n in t if n) for t in grouper(3, (1,2,3,4,5)))
((1, 2, 3), (4, 5))
"
Rearranging a (list of lists) matrix using list comprehensions only,">>> matrix = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]
>>> it = (y for x in matrix for y in x)
>>> [[next(it) for _ in range(3)] for _ in range(4)]
[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]
"
"Python str.format() --- passing in list, outputting list",">>> listex = range(0, 101, 25)
>>> [""https://thisisan{}example.com"".format(i) for i in listex]
['https://thisisan0example.com', 'https://thisisan25example.com', 'https://thisisan50example.com', 'https://thisisan75example.com', 'https://thisisan100example.com']
"
How to split rows into two columns in Pandas,">>> new_cols = df.pop(""probegene"").str.split().apply(pd.Series)
>>> new_cols.columns = [""probe"",""gene""]
>>> df = df.join(new_cols)
>>> df
   (5)foo.ID.LN.x1  (5)foo.ID.LN.x2         probe     gene
0             20.3              130    1431492_at     Lipn
1             25.3              150    1448678_at  Fam118a
2              3.1              173  1452580_a_at   Mrpl21
"
"Regex for ampersand, alphabetic characters and equal sign in python","import re
p = re.compile(ur'&\w+=')
test_str = u""asdfasdf&asdf=asdfffff&abc123=asdf\n\n\n""

re.findall(p, test_str)
"
Python: Compare Filenames in Folder,"import datetime as dt

def round_time(dto, round_to=60):
    seconds = (dto - dto.min).seconds
    rounding = (seconds+round_to/2) // round_to * round_to
    return dto + dt.timedelta(0,rounding-seconds,-dto.microsecond)  
"
test for membership in a 2d numpy array,"a = a.ravel().view((np.str, a.itemsize*a.shape[1]))
"
Python Tkinter - Find image file path from PhotoImage,"import sys
import Tkinter

def nothing():
    print(""Nothing"")

class Application(Tkinter.Frame):
    def __init__(self, master = None):
        Tkinter.Frame.__init__(self, master)

        self.button = Tkinter.Button(text = ""Button 1"", command = nothing)
        self.button.pack()

        class StdoutRedirector(Tkinter.Text):
            def __init__(self):
                Tkinter.Text.__init__(self)
             def write(self, message):
                 printout.insert(Tkinter.END, message)
        printout = StdoutRedirector()
        printout.pack()
        sys.stdout = printout

root = Tkinter.Tk()
app = Application(root)
app.mainloop()
"
controlling if the number is being rounded up or down in python,">>> from math import ceil
>>> ceil(8.3)
9.0
>>> ceil(8.48237)
9.0
"
Get the href text of a link that has a certain class attribute using BeautifulSoup in Python,"soup = BeautifulSoup(html)

for anchor in soup.select('a.Unique_Class_Name'):
    if anchor.has_attr('href'):
        print (anchor['href'])
"
remove characters from a list in python\pygame,"results = []
with open('C:\\Python33\\PIXB.DAT', 'r') as file:
    for line in file:
        values = line.split() # splits on any whitespace
        if len(values) > 1 # not the j line
            results.extend(values[:3]) # add three values to the results list
        else:
            results.append(values[0]) # add the ""j"" to the list
"
How to search help using python console,"pydoc -k <keyword>
    Search for a keyword in the synopsis lines of all available modules.
"
matplotlib hist() autocropping range,"import numpy as np
import matplotlib.pyplot as plt

x = np.random.uniform(-100, 100, 1000)
plt.hist(x, bins=30, range=(-50, 50))
plt.show()
"
Calculating the value of integers in list,"numberList  = list(string_dict.values())
numz = []
placeholder = 0

numz = list(map(int, numberList))

placeholder = sum(numz)
print (placeholder)
"
"Python list of tuples, need to unpack and clean up","[item[0] for item in x]
#or
[item for (item,) in x]
"
python regex inserting a space between punctuation and letters,"txt = re.sub( r'([a-zA-Z])([,.!])', r'\1 \2', '!!!this, .is, .a .test!!!' )
"
Have Python 2.7 functions remember value and not reference? Closure Weirdness,"lambda x, i=i: x+i
"
python for each match in a string copy to an array,"string = 'T=1 ID=56494759 DID=583887 O=N M=N J=76732 R=0 P=1 S=101 WR=N T=1 ID=56494760 DID=418400 O=N M=N J=48064 R=14780471 P=1 S=101 WR=N T=1 ID=56494761 DID=583889 O=N M=N J=76733 R=0 P=1 S=101 WR=N '


import re

print(re.findall(r'\sID=(\d+)', string))
"
Python swapping lists,"a, b = [1, 2], [2, 3]

def func():
    a, b = b, a

import dis
dis.dis(func)
"
Can I insert a line into ruamel.yaml's CommentedMap?,"import ruamel.yaml
from ruamel.yaml.comments import CommentedMap
from ruamel.yaml.compat import ordereddict

yaml_str = """"""\
first_name: Art
occupation: Architect  # This is an occupation comment
about: Art Vandelay is a fictional character that George invents...
""""""

def com_insert(self, pos, key, value, comment=None):
    od = ordereddict()
    od.update(self)
    for k in od:
        del self[k]
    for index, old_key in enumerate(od):
        if pos == index:
            self[key] = value
        self[old_key] = od[old_key]
    if comment is not None:
        self.yaml_add_eol_comment(comment, key=key)

CommentedMap.insert = com_insert

data = ruamel.yaml.round_trip_load(yaml_str)
data.insert(1, 'last name', 'Vandelay', comment=""new key"")

print(ruamel.yaml.round_trip_dump(data))
"
how do I modify a url that I pick at random in python,"def fixImgurLinks(url):
    if url.lower().startswith(""http://imgur.com""):
        url = url.replace(""http://imgur"", ""http://i.imgur"",1) # Only replace the first instance.
        if not url.endswith("".jpg""):
            url +="".jpg""
    return url

for u in [""http://imgur.com/Cuv9oau"",""http://www.google.com/search?q=http://imgur""]:
    print fixImgurLinks(u)
"
How to make class immutable in python?,"def __setattr__(self, name, value):
    raise AttributeError('''Can't set attribute ""{0}""'''.format(name))
"
Python iterating over a list to add items to another list?,"mylist = []

for f in files:
    new = f.attribute
    mylist.append(new)
"
Pandas row analysis for consecutive dates,"test = 'START_DATE'


df_short = df_policy[['OLD_CON_ID',test,'CONTRACT_ID']]
df_short.rename(columns={'OLD_CON_ID':'PID','CONTRACT_ID':'CID'}, 

inplace = True)
df_test = df_policy[['CONTRACT_ID','END_DATE']]
df_test.rename(columns={'CONTRACT_ID':'CID','END_DATE': 'PED'}, inplace = True)


df_copy1 = df_short.copy()
df_copy2 = df_short.copy()
df_copy2.rename(columns={'PID':'PPID','CID':'PID'}, inplace = True)

df_merge1 = pd.merge(df_short, df_copy2,
    how='left',
    on=['PID'])

df_merge1['START_DATE_y'].fillna(df_merge1['START_DATE_x'], inplace = True)
df_merge1.rename(columns={'START_DATE_x':'1_EFF','START_DATE_y':'2_EFF'}, inplace=True)
"
Get the object with the max attribute value in a list of objects,"from operator import attrgetter
ancestor = max(nodes_ancestors, key=attrgetter('level'))
"
python-making strings line up in a column exactly n spaces from left,"for *names, id, num in lines:
    print(row.format(' '.join(names), id, num))
"
How to make a grid from a dictionary?,"def createEmptyGrid(grid_dimensions):
    grid = {}
    for x in range(grid_dimensions):
        for y in range(grid_dimensions):
            grid[x,y] = '.'
    return grid

def initial_grid(cell_dimensions, density, disease):
    grid = createEmptyGrid(cell_dimensions)
    return grid

def print_grid(grid, cell_dimensions):
    for y in range(cell_dimensions):
        for x in range(cell_dimensions):
            print grid[x,y], # note the comma
        print '' # start a new line after each row


grid = initial_grid(3, 0, 0)
print_grid(grid, 3)
"
Finding first non-digit character with .find in Python,"matches = re.findall(r'ABC\s*(\d+)', page)
"
How to convert this list into dictionary in Python?,">>> dic = {}
>>> for item in lis:
    key = ""/"".join(item[:-1])
    dic.setdefault(key, []).append(item[-1])
...     
>>> dic
{'test_data': ['reads_1.fq', 'test_ref.fa'],
 'test_data/new_directory': ['ok.txt']}
"
Looking for unique numbers in a list of sets,"In [27]: from random import randint
In [28]: from collections import Counter  
In [29]: from itertools import chain
In [30]: sets = [{randint(1, 100) for _ in range(100)} for i in range(0, 100)]+ [{1, 2, 102},{3,4,103}]
In [31]: cn = Counter(chain.from_iterable(sets))   
In [32]: unique = [k for k, v in cn.items() if v == 1] 
In [33]: print(unique)
[103, 102]
"
How to find maximum number from csv-read data in Python 2.7?,">>> import csv
>>> sample = '''\
... Victoria's Regions,2004,2005,2006,2007
... Gippsland,63354,47083,51517,54872
... Goldfields,42625,36358,30358,36486
... Grampians,64092,41773,29102,38058
... Great Ocean Road,185456,153925,150268,167458
... Melbourne,1236417,1263118,1357800,1377291
... '''.splitlines(True)
>>> maximum_value = None
>>> reader = csv.DictReader(sample)
>>> for row in reader:
...     count, year = max((int(row[year]), year) for year in reader.fieldnames[1:])  # skip the first column
...     if not maximum_value or count > maximum_value[0]:
...         maximum_value = (count, row[reader.fieldnames[0]], year)
... 
>>> print ""The greatest visitornumber was {} in {} in the year {}."".format(
...     *maximum_value)
The greatest visitornumber was 1377291 in Melbourne in the year 2007.
"
numpy array - replace certain values,"for list in list_of_lists:
    list[2:] = list[2:].clip(0, None)
"
numpy index on a variable axis,"def fun(a, axis, state):
    return numpy.rollaxis(a, axis)[state]
"
Is it expected behavior with os.path.join(),"def join(*paths):
    import os
    return os.path.join(*[part for path in paths for part in path.split(os.sep)])

path1 = '/Volumes/disk1/'
path2 = '/dir2/dir3/'

print join(path1, path2)
"
Slicing a list into a list of sub-lists,"list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))"
Why does Tkinter hang when I call tkSimpleDialog.askstring from a lambda?,"import Tkinter

def test(event=None):
    tl = Tkinter.Toplevel()
    tl.wait_window(tl)

root = Tkinter.Tk()
btn = Tkinter.Button(text=u'hi')
btn.bind('<Button-1>', test)
btn.pack(padx=10, pady=10)
root.mainloop()
"
"Is there an easy way to parse a list of tuples generated by python's print, using Python?","import ast
with open('foo.txt', 'r') as myfile:
    fileoutput = myfile.read() # Assuming the whole file is just the list

original = ast.literal_eval(fileoutput)
for i in original:
    print i
"
Why doesn't my Python RandomForestRegressor accurately predict training set data?,"def prediction_up_dn_intervals( aPredictorMODEL,                        # >>> http://blog.datadive.net/prediction-intervals-for-random-forests/
                                X_,                                     # aStateVECTOR: X_sampled
                                aPredictorOutputIDX =  0,               # (4,2,2) -> singleQUAD ( LONG.TP/SL, SHORT.TP/SL ) <-- idxMAP( 'LONG', 'TP', 1 )
                                aRequiredPercentile = 95
                                ):                                      
    err_dn      = []
    err_up      = []
    #-----------------------------------------------------------------------------------------------
    if len( X_.shape ) == 1:                                            # for a single X_example run
        preds   = []
        for pred in aPredictorMODEL.estimators_:
            preds.append( pred.predict( X_ )[0,aPredictorOutputIDX] )   # de-array-ification

        err_dn.append( np.percentile( preds,       ( 100 - aRequiredPercentile ) / 2. ) )
        err_up.append( np.percentile( preds, 100 - ( 100 - aRequiredPercentile ) / 2. ) )
    else:
        #------------------------------------------------------------------------------------------
        for x in xrange( len( X_ ) ):                                   # for a multi X_example run
            preds   = []
            for pred in aPredictorMODEL.estimators_:
                preds.append( pred.predict( X_[x] )[0,aPredictorOutputIDX] ) # de-array-ification

            err_dn.append( np.percentile( preds,       ( 100 - aRequiredPercentile ) / 2. ) )
            err_up.append( np.percentile( preds, 100 - ( 100 - aRequiredPercentile ) / 2. ) )
    #-----------------------------------------------------------------------------------------------
    return err_up, err_dn

#numba.jit( 'f8(<<OBJECT>>,f8[:,:],f8[:,:],i8,f8)' )                    # <<OBJECT>> prevents JIT
def getPredictionsOnINTERVAL(   aPredictorENGINE,                       # a MULTI-OBJECTIVE PREDICTOR -> a singleQUAD or a full 4-QUAD (16,0) <-(4,2,2)
                                X_,
                                y_GndTRUTH,                             # (4,2,2) -> (16,0) a MULTI-OBJECTIVE PREDICTOR
                                aPredictionIDX  =  0,                   # (4,2,2) -> singleQUAD ( LONG.TP/SL, SHORT.TP/SL ) <-- idxMAP( 'LONG', 'TP', 1 )
                                percentile      = 75
                                ):
    """"""
    |>>> getPredictionsOnINTERVAL( loc_PREDICTOR, X_sampled, y_sampled, idxMAP( ""LONG"", ""TP"", 1 ), 75 )     1.0                         +0:01:29.375000
    |>>> getPredictionsOnINTERVAL( loc_PREDICTOR, X_sampled, y_sampled, idxMAP( ""LONG"", ""TP"", 1 ), 55 )     0.9992532724237898          +0:03:59.922000
    |>>> getPredictionsOnINTERVAL( loc_PREDICTOR, X_sampled, y_sampled, idxMAP( ""LONG"", ""TP"", 1 ), 50 )     0.997100939998243           +0:09:16.328000
    |>>> getPredictionsOnINTERVAL( loc_PREDICTOR, X_sampled, y_sampled, idxMAP( ""LONG"", ""TP"", 1 ),  5 )     0.31375735746288325         +0:01:16.422000
    """"""
    correct_on_interval = 0                                                 # correct        = 0. ____________________- faster to keep asINTEGER ... +=1 and only finally make DIV on FLOAT(s) in RET
    #ruth               = y_                                                # Y[idx[trainsize:]]
    err_up, err_dn      = prediction_up_dn_intervals(   aPredictorENGINE,   # ( rf,
                                                        X_,                 #   X[idx[trainsize:]],
                                                        aPredictionIDX,     #   idxMAP( ""LONG"", ""TP"", 1 ),
                                                        percentile          #   percentile = 90
                                                        )                   #   )

    #-------------------------------------------------------------------# for a single X_ run
    if ( len( X_.shape ) == 1 ):
        if ( err_dn[0] <= y_GndTRUTH[aPredictionIDX] <= err_up[0] ):
            return 1.
        else:
            return 0.
    #-------------------------------------------------------------------# for a multi X_ run
    for i, val in enumerate( y_GndTRUTH[:,aPredictionIDX] ):            # enumerate( truth )
        if err_dn[i] <= val <= err_up[i]:
            correct_on_interval += 1
    #-------------------------------------------------------------------
    return correct_on_interval / float( y_GndTRUTH.shape[0] )           # print correct / len( truth )

def mapPredictionsOnINTERVAL(   aPredictorENGINE,                       #
                                X_,
                                y_GndTRUTH,
                                aPredictionIDX      =  0,
                                aPercentilleSTEP    =  5
                                ):
    for aPercentille in xrange( aPercentilleSTEP, 100, aPercentilleSTEP ):
        Quotient = getPredictionsOnINTERVAL( aPredictorENGINE, X_, y_GndTRUTH, aPredictionIDX, aPercentille )
        print ""{0: > 3d}-percentil   {1: > 6.3f} %"".format( aPercentille, 100 * Quotient )
        """"""
          5%  0.313757
         10%  0.420847
         15%  0.510191
         20%  0.628481
         25%  0.719758
         30%  0.839058
         35%  0.909646
         40%  0.963454
         45%  0.986603
         50%  0.997101
         55%  0.999253
         60%  0.999912
         65%  1.000000 >>> RET/JIT
         70%  1.000000 xxxxxxxxxxxxxx 
         75%  1.000000 xxxxxxxxxxxxxx       ???? .fit( X_, y_[:,8:12] ) # .fit() on HORIZON-T0+3???? ... y_GndTRUTH.shape[1] v/s .predict().shape[1]
        """"""
        if ( Quotient == 1 ):
             return
"
Python: How To Recursively Simulate a Random Walk Within a Range (No Loops),"
def rw_in_range(start, low, high):
    print((' ' * start) + 'S')
    new_start=start + random_step()
    if new_start<low or new_start>high: 
        return 0
    numberOfSteps = rw_in_range(new_start, low, high)
    return numberOfSteps + 1
"
How to sort a Pandas DataFrame according to multiple criteria?,"df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)"
"Numpy vectorize, using lists as arguments","list_obj_array = np.ndarray((1,), dtype=object)
list_obj_array[0] = [1,2,3]
f2(X,list_obj_array)  # using your definition from above
"
Why is my list not sorted as expected?,"srt = sorted(twitter_users.values(), cmp=lambda a, b: cmp(a.mentioned, b.mentioned)) 
"
Python bytearray verses list of bytes,"def bytes_list_test_opt():  
    tStart = time.clock()
    bs = b''.join(itertools.repeat(MSG, COUNT))
    print('byte list opt time:', time.clock() - tStart)
"
How to do this list/dict comprehension in python,"num_to_letter = [chr(65 + i) for i in range(4)]
"
Python Inheritance : Return subclass,"class Parent(object):
    def new(self,*args,**kwargs):
        # use `self` in some way to perhaps change `args` and/or `kwargs`
        return type(self)(*args,**kwargs)
"
Python: multidimensional array masking,">>> b_row, b_col = np.vstack([np.unravel_index(b, A.shape) for b in B]).T
>>> A[b_row, b_col] = 0
>>> A
array([[1, 0, 1, 0, 1],
       [1, 1, 0, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1]])
"
Python: Modifying text file after certain character,"with open(filename,'r+') as fr,open(filename,'r+') as fw:
    for line in fr:
        x = line.find('order')
        fw.write(line if x==-1
                 else line[0:x]+'\n' if '\n' in line
                 else line[0:x])
    fw.truncate()
"
Optimized regular expression search in a text corpus in Python,"import bisect
with open('dictionary') as f:
    dictionary = f.read().split()

    # .sort is slow, so better to sort
    # words on disk! And/or run many searches
    # for one invocation
    dictionary.sort()

def bisect_search(key):
    i = bisect.bisect_left(dictionary, key)
    if i != len(dictionary):
        return dictionary[i].startswith(key)

    return False
"
What is the equivalent in python to this code line in perl $conf{svnlook} log --revision $rev $repo,"# assign conf as a dict()
# assign rev and repo as variables
import os
os.system('%s log --revision %s %s' % (conf['svnlook'], rev, repo))
"
"in python, get the output of system command as a string","proc = subprocess.Popen('ls', stdout=subprocess.PIPE)
tmp = proc.stdout.read()
"
Finding a string pattern in a string,">>> from re import findall
>>> line = ""Hello my name is {{ name }} and I am {{ age }} years old.""
>>> findall(""{{\s(.*?)\s}}"", line)
['name', 'age']
>>>
"
Find sum of right and left hand of list element in python,"n = 0
i = li.index(n)     # returns the first location of n (0 in your case)
left = li[:i]       # gives the left part of the list
right = li[i+1:]    #     and the right part
lsum = sum(left)
rsum = sum(right)
"
"Conjugate transpose operator "".H"" in numpy","from forbiddenfruit import curse
from numpy import ndarray
from numpy.linalg import inv
curse(ndarray,'H',property(fget=lambda A: A.conj().T))
curse(ndarray,'I',property(fget=lambda A: inv(A)))
"
How to call a shell script from python code?,subprocess.call(['./test.sh'])
Setting Variable to Gateway IP,"from subprocess import Popen, PIPE
cmd = ""/sbin/route -n | grep 'UG[ \t]' | awk '{print $2}'""
gateway = Popen(cmd, shell=True, stdout=PIPE)
stdout, stderr = gateway.communicate()
exit_code = gateway.wait()
"
masking the built-in variable with its magic behavior?,">>> _ = 3
>>> 3 + 3
6
>>> _
3
"
Python: How can I increment a char?,">>> ord('c')
99
>>> ord('c') + 1
100
>>> chr(ord('c') + 1)
'd'
>>> 
"
Python 3.4 unicode character displayed correctly on console but no in text file,"with open('file.txt', 'w', encoding='utf8') as fw:
    fw.write(""Number of files processed within 512\u00B1 1 samples:  ""+str(count))
"
Python list iterator behavior and next(iterator),">>> a = iter(list(range(10)))
>>> for i in a:
...    print(i)
...    _ = next(a)
... 
0
2
4
6
8
"
Working with set_index in Pandas DataFrame,"rdata.set_index(['race_date', 'track_code', 'race_number'])"
numpy matrix multiplication,(a.T * b).T
Regular Expressions: Match up to a word or a maximum number of words,"import re
infile = open(""input"", ""r"")
for line in infile:
    m = re.match(""going to the ((?:\w+\s*(?!to try)){1,3})"", line)
    if m:
        print m.group(1).rstrip()
"
How can I insert a random element into a dictionary and have it randomised whenever I call it?,"import random
fruits = [""mango"", ""pomelo"", ""guava"", ""grapefruit"", ""watermelon""]
DoDict = {'do1': random.choice}
"
Adding extra functionality to parent class method without changing its name,"class ParentClass: 
    def f(self): 
        print(""Hi!""); 

class ChildClass(ParentClass): 
    def f(self):
        super(ChildClass, self).f(); 
        print(""Hello!""); 
"
Using lambda to create new list by altering/modifying old list,">>> import itertools
>>> it = itertools.count(1)  # yield 1, 2, 3, ... infinitely.
>>> next(it)
1
>>> next(it)
2
"
How to delete a record in Django models?,SomeModel.objects.filter(id=id).delete()
"How to gather personal information (age,gender..) of all the authors of the comments on a specific video, with Python YouTube API","def get_feed(thing=None, feed_type=api.GetYouTubeUserFeed):

    if feed_type == 'user':
        feed = api.GetYouTubeUserFeed(username=thing)

    if feed_type == 'related':
        feed = api.GetYouTubeRelatedFeed(video_id=thing)

    if feed_type == 'comments':
        feed = api.GetYouTubeVideoCommentFeed(video_id=thing)

    feeds = []
    entries = []

    while feed:
        feeds.append(feed)
        feed = api.GetNext(feed)

    [entries.extend(f.entry) for f in feeds]

    return entries
"
List comprehension with if statement,[y for y in a if y not in b]
How to split a txt file into multiple files excluding lines with certain content,"from bs4 import BeautifulSoup
import requests

html = requests.get('https://archive.org/stream/warandpeace030164mbp/warandpeace030164mbp_djvu.txt')
soup = BeautifulSoup(html.text, ""lxml"")
war_and_peace = soup.pre.get_text()

paragraphs = war_and_peace.split('\n\n')
paragraphs[:] = [p for p in paragraphs if len(p)]       # Remove empty entries

print paragraphs[671]
"
How to add the contents of a directory to a zip file?,"for root, dirs, files in os.walk('mydir'):
  for filename in files:
    z.write(os.path.join(root, filename))
"
How to split a string to sequences of odd numbers?,">>> import re
>>> re.split('[02468]', '57483795478973')
['57', '', '3795', '7', '973']
"
How to properly use recursion in this (simple) python procedure?,"match = True
for A, B in zip(a, b):
    if not same_structure(A, B):
        match = False
        break
return match
"
Word XML to RTF conversion,"import uno
from os.path import abspath, isfile, splitext
from com.sun.star.beans import PropertyValue
from com.sun.star.task import ErrorCodeIOException
from com.sun.star.connection import NoConnectException

FAMILY_TEXT = ""Text""
FAMILY_SPREADSHEET = ""Spreadsheet""
FAMILY_PRESENTATION = ""Presentation""
FAMILY_DRAWING = ""Drawing""
DEFAULT_OPENOFFICE_PORT = 8100

FILTER_MAP = {
    ""pdf"": {
        FAMILY_TEXT: ""writer_pdf_Export"",
        FAMILY_SPREADSHEET: ""calc_pdf_Export"",
        FAMILY_PRESENTATION: ""impress_pdf_Export"",
        FAMILY_DRAWING: ""draw_pdf_Export""
    },
    ""html"": {
        FAMILY_TEXT: ""HTML (StarWriter)"",
        FAMILY_SPREADSHEET: ""HTML (StarCalc)"",
        FAMILY_PRESENTATION: ""impress_html_Export""
    },
    ""odt"": { FAMILY_TEXT: ""writer8"" },
    ""doc"": { FAMILY_TEXT: ""MS Word 97"" },
    ""rtf"": { FAMILY_TEXT: ""Rich Text Format"" },
    ""txt"": { FAMILY_TEXT: ""Text"" },
    ""docx"": { FAMILY_TEXT: ""MS Word 2007 XML"" },
    ""ods"": { FAMILY_SPREADSHEET: ""calc8"" },
    ""xls"": { FAMILY_SPREADSHEET: ""MS Excel 97"" },
    ""odp"": { FAMILY_PRESENTATION: ""impress8"" },
    ""ppt"": { FAMILY_PRESENTATION: ""MS PowerPoint 97"" },
    ""swf"": { FAMILY_PRESENTATION: ""impress_flash_Export"" }
}

class DocumentConverter:

    def __init__(self, port=DEFAULT_OPENOFFICE_PORT):
        localContext = uno.getComponentContext()
        resolver = localContext.ServiceManager.createInstanceWithContext(""com.sun.star.bridge.UnoUrlResolver"", localContext)
        try:
            self.context = resolver.resolve(""uno:socket,host=localhost,port=%s;urp;StarOffice.ComponentContext"" % port)
        except NoConnectException:
            raise Exception, ""failed to connect to OpenOffice.org on port %s"" % port
        self.desktop = self.context.ServiceManager.createInstanceWithContext(""com.sun.star.frame.Desktop"", self.context)

    def convert(self, inputFile, outputFile):

        inputUrl = self._toFileUrl(inputFile)
        outputUrl = self._toFileUrl(outputFile)

        document = self.desktop.loadComponentFromURL(inputUrl, ""_blank"", 0, self._toProperties(Hidden=True))
        #document.setPropertyValue(""DocumentTitle"", ""saf"" ) TODO: Check how this can be set and set doc update mode to  FULL_UPDATE

        if self._detectFamily(document) == FAMILY_TEXT:
            indexes = document.getDocumentIndexes()
            for i in range(0, indexes.getCount()):
                index = indexes.getByIndex(i)
                index.update()

            try:
                document.refresh()
            except AttributeError:
                pass

            indexes = document.getDocumentIndexes()
            for i in range(0, indexes.getCount()):
                index = indexes.getByIndex(i)
                index.update()

        outputExt = self._getFileExt(outputFile)
        filterName = self._filterName(document, outputExt)

        try:
            document.storeToURL(outputUrl, self._toProperties(FilterName=filterName))
        finally:
            document.close(True)

    def _filterName(self, document, outputExt):
        family = self._detectFamily(document)
        try:
            filterByFamily = FILTER_MAP[outputExt]
        except KeyError:
            raise Exception, ""unknown output format: '%s'"" % outputExt
        try:
            return filterByFamily[family]
        except KeyError:
            raise Exception, ""unsupported conversion: from '%s' to '%s'"" % (family, outputExt)

    def _detectFamily(self, document):
        if document.supportsService(""com.sun.star.text.GenericTextDocument""):
            # NOTE: a GenericTextDocument is either a TextDocument, a WebDocument, or a GlobalDocument
            # but this further distinction doesn't seem to matter for conversions
            return FAMILY_TEXT
        if document.supportsService(""com.sun.star.sheet.SpreadsheetDocument""):
            return FAMILY_SPREADSHEET
        if document.supportsService(""com.sun.star.presentation.PresentationDocument""):
            return FAMILY_PRESENTATION
        if document.supportsService(""com.sun.star.drawing.DrawingDocument""):
            return FAMILY_DRAWING
        raise Exception, ""unknown document family: %s"" % document

    def _getFileExt(self, path):
        ext = splitext(path)[1]
        if ext is not None:
            return ext[1:].lower()

    def _toFileUrl(self, path):
        return uno.systemPathToFileUrl(abspath(path))

    def _toProperties(self, **args):
        props = []
        for key in args:
            prop = PropertyValue()
            prop.Name = key
            prop.Value = args[key]
            props.append(prop)
        return tuple(props)

if __name__ == ""__main__"":
    from sys import argv, exit

    if len(argv) < 3:
        print ""USAGE: python %s <input-file> <output-file>"" % argv[0]
        exit(255)
    if not isfile(argv[1]):
        print ""no such input file: %s"" % argv[1]
        exit(1)

    try:
        converter = DocumentConverter()    
        converter.convert(argv[1], argv[2])
    except Exception, exception:
        print ""ERROR!"" + str(exception)
        exit(1)
"
merge two tuples with same key,"from collections import defaultdict

def merge_final_values(values):
    mergeddict = defaultdict(list)
    for group in values:
        mergeddict[group[:-1]].append(group[-1])
    return [(k + (tuple(v),) if len(v) > 1 else k + tuple(v))
                for k, v in mergeddict.iteritems()]

test = [(1, 2, 'R'), (1, 3, 'S'), (1, 2, 'S'), (2, 3, 'S')]

print(merge_final_values(test))
"
"How to make sure the input is a multiple of 16, and if not add padding to it","padding = random.choice(string.letters)
"
Removing stopwords from list using python3,"clean_models = []
for m in tokenized_models:
    stop_m = [i for i in m if str(i).lower() not in stopset]
    clean_models.append(stop_m)

print(clean_models)
"
Select unique value from list,"def callback():
    try:
       C = Characters.pop()  #popping the last one is more efficient than the first.
    except IndexError:
       return None

    return C()
"
Collections Counter not working,"links = []
domains = []
for name in usernames:
    public_tweets = api.user_timeline(name, count=10)
    for tweet in public_tweets:     
        urls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', tweet.text)
        for url in urls:
            link = requests.head(url, allow_redirects=True).url  # follow redirects to the end
            links.append(link)
            domain = get_tld(link)
            domains.append(domain)
counts = Counter(domains)
"
comparing two lists and finding most preferred pairs,"top_two = [fruit for fruit, count in Counter(fruits).most_common(2)]
"
extract the lines from file with bash or python,"awk '/Recipients by message count/{p=1}!$0{p=0}p' input_file
"
how to read numpy 2D array from string?,"In [169]: import pickle

In [170]: a=np.arange(12).reshape(3,4)

In [171]: s=pickle.dumps(a*2)

In [172]: s
Out[172]: ""cnumpy.core.multiarray\n_reconstruct\np0\n(cnumpy\nndarray\np1\n(I0\ntp2\nS'b'\np3\ntp4\nRp5\n(I1\n(I3\nI4\ntp6\ncnumpy\ndtype\np7\n(S'i4'\np8\nI0\nI1\ntp9\nRp10\n(I3\nS'<'\np11\nNNNI-1\nI-1\nI0\ntp12\nbI00\nS'\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x16\\x00\\x00\\x00'\np13\ntp14\nb.""

In [173]: pickle.loads(s)
Out[173]: 
array([[ 0,  2,  4,  6],
       [ 8, 10, 12, 14],
       [16, 18, 20, 22]])
"
Python dictionnary items() method cost inside iterable,"%timeit two.viewkeys() <= one.viewkeys()
# 1000000 loops, best of 3: 484 ns per loop
%timeit set(two).issubset(one)
# 1000000 loops, best of 3: 677 ns per loop
%timeit all(key in one for key in two)
# 1000000 loops, best of 3: 1.37 µs per loop
"
internalization set language redirect view. how to redirect to the same page?,"from django.utils.translation import get_language
import re

def strip_lang(path):
    pattern = '^(/%s)/' % get_language()
    match = re.search(pattern, path)
    if match is None:
        return path
    return path[match.end(1):]
"
Output issue calculating moving average,"nan = float('nan')

def calculate(prices, size=2):
    '''Calculates the moving average and generates a signal strategy for buy or sell
       strategy given a list of stock date and price. '''

    averages = [nan]*(size-1) + moving_average(prices, size)
    previous_prices = ([nan] + prices)[:-1]
    previous_averages = ([nan] + averages)[:-1]

    signal = []
    for price, ave, prev_price, prev_ave in zip(
        prices, averages, previous_prices, previous_averages):
        if price > ave and prev_price < prev_ave:
            signal.append('BUY')
        elif price < ave and prev_price > prev_ave:
            signal.append('SELL')
        else:
            signal.append('')
    return averages, signal


def window(seq, n=2):
    """"""
    Returns a sliding window (of width n) over data from the sequence
    s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...
    """"""
    for i in xrange(len(seq) - n + 1):
        yield tuple(seq[i:i + n])


def moving_average(data, size):
    return [(sum(grp)/len(grp)) for grp in window(data, n=size)]

def report(*args):
    for row in zip(*args):
        print(''.join(map('{:>10}'.format, row)))

dates = ['2012-10-01',
 '2012-10-02',
 '2012-10-03',
 '2012-10-04',
 '2012-10-05',
 '2012-10-08',
 '2012-10-09',
 '2012-10-10',
 '2012-10-11',
 '2012-10-12',
 '2012-10-15',
 '2012-10-16',
 '2012-10-17',
 '2012-10-18',
 '2012-10-19',
 '2012-10-22',
 '2012-10-23',
 '2012-10-24']

prices = [659.38999999999999,
        661.30999999999995,
        671.45000000000005,
        666.79999999999995,
        652.59000000000003,
        638.16999999999996,
        635.85000000000002,
        640.90999999999997,
        628.10000000000002,
        629.71000000000004,
        634.75999999999999,
        649.78999999999996,
        644.61000000000001,
        632.63999999999999,
        609.84000000000003,
        634.02999999999997,
        613.36000000000001,
        616.83000000000004]

averages, signals = calculate(prices, size=10)
report(dates, prices, averages, signals)
"
Optional parameters in a SQLite SELECT statement,"sql = ""SELECT ... WHERE User=?""
params = [user]
if a_is_specified:
    sql += "" AND ColA=?""
    params += [a]
...
cursor.execute(sql, params)
"
How to sort a Python dictionary by value?,"OrderedDict(sorted(a_dict.items(), key=lambda (k, (v1, v2)): v2))
OrderedDict(sorted(a_dict.items(), key=lambda item: item[1][1])    # Python 3
"
Variable that returns complete string inside list,"topicResult = "" "".join([t['TopicArn'] for t in topicsList if t['TopicArn'].endswith(topic)])
"
Processing and Formatting a csv,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import csv
import sys

# This will store the lines by tag, in order to join them
data = {}
# This will tell us how to order the columns, will be extended later
columns = ['L', 'Dr', 'Tag']
# Controls extension of the columns
maxhour = 0
# Controls the order the keys are found in the original CSV. Maybe not necessary
keys = []

with open(""in.csv"", 'r', newline='') as fin:
    reader = csv.DictReader(fin)
    for row in reader:
        hour = int(row['Hour'])
        # Form a unique key to match lines. Adjust to your needs
        key = (row['L'], row['Dr'], row['Tag'])
        if key not in data:
            # This is a future row, a dict with column as key, cell as value
            data[key] = {'L': row['L'], 'Dr': row['Dr'], 'Tag': row['Tag']}
            # Remember the order we've seen the keys
            keys.append(key)
        # Now, add data to the row for each minutes
        # 1 to 59
        for minute in range(1,60):
            # Copy data from column 'minute' to column 'Hour:minute'
            src_colname = str(minute)
            dest_colname = row['Hour'] + ':' + src_colname
            data[key][dest_colname] = row[src_colname]
        # There seems to be a special treatment for minute 0, at column ""L 0""
        if hour == 0:
            data[key]['L 0'] = row['L 0']
        else:
            data[key][row['Hour'] + ':0'] = row['L 0']
        # Plan to generate enough columns when writing resulting file
        maxhour = max(maxhour, hour)

with open(""out.csv"", 'w', newline='') as fout:
    # Okay, now everything was merged into data
    # We need to tell DictWriter how to order columns
    # Treat special first column
    columns.append('L 0')
    # Then add the rest
    for hour in range(0, maxhour+1):
        # Do not include ""0:0""
        for minute in range(0 if hour > 0 else 1,60):
            columns.append('{:d}:{:d}'.format(hour, minute))
    # Let's write that
    writer = csv.DictWriter(fout, columns, restval = ""0"")
    writer.writeheader()
    for key in keys: # or for key in data.keys(): if you don't mind the order
        writer.writerow(data[key])
"
Randint number into a Dict,"if n not in l:
    print(""New item."")
else:
    index = max(i for i, v in enumerate(l) if v == n)
    print(""Item found at index {0}."".format(index))
l.append(n)
"
interating through a list of lists to create a new list,">>> group = [['steve', 'adam', 'avery'], ['avery', 'sarah', 'henry'], ['adam', 'harry', 'jane'], ['john', 'helene', 'bill'], ['andrew', 'helene', 'bill'], ['david', 'bill', 'helene']]
>>> parents = {n: [p1, p2] for n, p1, p2 in group}
>>> [[n, p1, p2] + parents.get(p1, [0, 0]) + parents.get(p2, [0, 0])
...  for n, p1, p2 in group]
[['steve', 'adam', 'avery', 'harry', 'jane', 'sarah', 'henry'], ['avery', 'sarah', 'henry', 0, 0, 0, 0], ['adam', 'harry', 'jane', 0, 0, 0, 0], ['john', 'helene', 'bill', 0, 0, 0, 0], ['andrew', 'helene', 'bill', 0, 0, 0, 0], ['david', 'bill', 'helene', 0, 0, 0, 0]]
"
getting 64 bit integer in python,">>> from gmpy import mpz
>>> a=mpz(7)
>>> bin(a)
'0b111'
>>> a=a.setbit(48)
>>> bin(a)
'0b1000000000000000000000000000000000000000000000111'
>>> 
"
Python changing function definition in loop?,"A = zeros(N)
for k in range(N):
    def callback(x):
        return k*x

    A[k] = integrate(callback, a, b)
"
How to add row to pandas DataFrame with missing value efficiently?,"df1 = pd.DataFrame(a, index=[0])
df2 = pd.DataFrame(b, index=[1])

d = pd.DataFrame()
d = d.append(df1)
d = d.append(df2).fillna(0)

In [107]: d
Out[107]: 
    a     b     c    m
0  10   1.3  0.00  0.0
1   0  32.5  3.14  5.1


column_name = ['a', 'b', 'c', 'm']
d = pd.DataFrame(columns = column_name)
d.add(a)
d.add(b)

In [113]: d
Out[113]: 
Empty DataFrame
Columns: [a, b, c, m]
Index: []


In [115]: pd.concat([df1, df2]).fillna(0)
Out[115]: 
    a     b     c    m
0  10   1.3  0.00  0.0
1   0  32.5  3.14  5.1

d = pd.DataFrame()
In [144]: d.combine_first(df1).combine_first(df2).fillna(0)
Out[144]: 
    a     b     c    m
0  10   1.3  0.00  0.0
1   0  32.5  3.14  5.1
"
python print in format way unknow list length,"print ' '.join(['%-2s' % (i,) for i in l])
"
Problems on how to transpose single column data in python,">>> import numpy as np
>>> arr=np.loadtxt('column.txt')
>>> arr
array([ 1.,  2.,  3.,  4.,  9.,  8.])
>>> arr.shape
(6,)
>>> arr=arr.reshape(6,1)
>>> arr
array([[ 1.],
       [ 2.],
       [ 3.],
       [ 4.],
       [ 9.],
       [ 8.]])
"
"python, argparse: enable input parameter when another one has been specified","import argparse
import sys   
parser=argparse.ArgumentParser()
action1=parser.add_argument('--foo')
action2=parser.add_argument('--bar',
                            help=""Only use this if --foo is set"")

argv=set(sys.argv)
if (( argv & set(action2.option_strings) ) and 
      not ( argv & set(action1.option_strings) )):
                #^ set intersection
     parser.error(' or '.join(action1.option_strings)+
                  ' must be given with '+
                  ' or '.join(action2.option_strings))
"
Iteration through all 1 dimensional subarrays of a multi-dimensional array,"def iter1d(a):
    return itertools.chain.from_iterable(
        numpy.rollaxis(a, axis, a.ndim).reshape(-1, dim)
        for axis, dim in enumerate(a.shape))
"
Automatization issue,"p1 = {'pair': ([2, 3, 4], [5, 6, 7])}
p2 = {'pair': ([9, 10, 11], [12, 13, 14])}
p3 = {'pair': ([12, 20, 30], [17, 8, 30])}

def find_and_set_mean(a_dictionary):
    a_dictionary['mean']=np.mean(a_dictionary['pair']) 

find_and_set_mean(p1)
find_and_set_mean(p2)
find_and_set_mean(p3)
"
"numpy 2d array operation, keeping certain positions",">>> X2d = np.array([[0,4,5,0],
...                 [7,8,4,3],
...                 [0,0,9,8]])
>>> 
>>> Y2d = np.array([[1,0,4,8],
...                 [0,3,8,5],
...                 [0,6,0,8]])
>>> indices = np.where(~((X2d > 0) & (Y2d > 0)))
>>> X2d[indices] = 0
>>> Y2d[indices] = 0
>>> X2d
array([[0, 0, 5, 0],
       [0, 8, 4, 3],
       [0, 0, 0, 8]])
>>> Y2d
array([[0, 0, 4, 0],
       [0, 3, 8, 5],
       [0, 0, 0, 8]])
"
Conditional index in 2d array in python,"In [143]: np.concatenate([g[:1], g[2:]])
Out[143]: 
array([[ 1,  2,  3,  4],
       [ 9, 10, 11, 12]])
"
numpy array slicing with arbitrary dimension,"In [55]: m = arange(2**6).reshape([2]*6)

In [56]: m.shape
Out[56]: (2, 2, 2, 2, 2, 2)

In [57]: m[:2,:2,:2,0,0,0]
Out[57]: 
array([[[ 0,  8],
        [16, 24]],

       [[32, 40],
        [48, 56]]])

In [58]: m[s_[:2, :2, :2] + (0,)*(n-3)]
Out[58]: 
array([[[ 0,  8],
        [16, 24]],

       [[32, 40],
        [48, 56]]])
"
IplImage inside IplImage,"import cv
blue = cv.LoadImage(""blue.jpg"")
red = cv.LoadImage(""red.jpg"")

sub = cv.GetSubRect(blue, (100, 100, 50, 50))
cv.Copy(red,sub)

cv.ShowImage('blue_red', blue)
cv.WaitKey(0)
"
"Clean conversion from int list to character and then back to int list, in Python","string_version = repr(''.join(map(chr, S)))
# print, copy, paste, etc.
list_version = list(map(ord, ast.literal_eval(string_version)))
"
Python 3 - counting matches in two lists (including duplicates),">>> words = ['red', 'blue', 'yellow', 'black']
>>> list1 = ['the', 'black', 'dog']
>>> list2 = ['the', 'blue', 'blue', 'dog']
>>> results1 = 0
>>> results2 = 0
>>> for w in words:
        results1 += list1.count(w)
        results2 += list2.count(w)

>>> results1
1
>>> results2
2
"
Strip Links in Strings,"$message = array(
  ""Dude I saw her on youtube"",
  ""I just opened an account on youtuber.com"",
  ""I'm watching an amazing prank, check this out youtube.com/gfsddfh784"",
  ""Dude, isn't this girl forbidden.com/hot-chick/123 Mery from our school?"",
  ""Take a look google.com?search=how%20to%20hack%20a%20wireless"",
  ""Ask someone on stackoverflow.com :p"",
  ""I found this great snippet on stackoverflow!"",
  ""He's all day on xxx.net""
  );

$url = '/(((https?:\/\/)?www)?\.?[a-z0-9]+\.[a-z0-9]+[a-z0-9\-\/?&#%=]+)/';
$whitelist = ""/\b(youtube|stackoverflow|google|twitter|facebook|prntscr)\b/"";

// check messages like this
foreach ($message as &$line){
  if(preg_match($url, $line, $match)){
    echo $match[0] , preg_match($whitelist, $match[0]) ? "" -> Safe"" : "" -> Unsafe"" , '<br />';
  } 
}

echo ""<hr />"";

// or like this
foreach ($message as &$line){
  if(preg_match($url, $line, $match) && !preg_match($whitelist, $match[0])){
    echo $match[0]  . "" -> Unsafe"" . '<br />';
  } 
}
"
"Python Coding Help Needed, searching list by first letter of each word","[val for val in new_list if val.startswith(""h"")]
"
Multiplying every element of one array by every element of another array,"np.dot(x[:,None],y[None]).ravel()
"
Python BeautifulSoup Error,"import urllib2
from StringIO import StringIO

from BeautifulSoup import BeautifulSoup
from tidylib import tidy_document

html = urllib2.urlopen(""http://www.hitmeister.de"").read()
tidy, errors = tidy_document(html)
soup = BeautifulSoup(tidy)
print type(soup)
"
Should I create pipeline to save files with scrapy?,"# in the spider
def parse_pdf(self, response):
    i = MyItem()
    i['body'] = response.body
    i['url'] = response.url
    # you can add more metadata to the item
    return i

# in your pipeline
def process_item(self, item, spider):
    path = self.get_path(item['url'])
    with open(path, ""wb"") as f:
        f.write(item['body'])
    # remove body and add path as reference
    del item['body']
    item['path'] = path
    # let item be processed by other pipelines. ie. db store
    return item
"
"Python: Number of letters in file, simple yet efficient way","# create lookuptable
lut = [0]*256
lut[slice(ord('a'), ord('z'))] = [1] * 26
lut[slice(ord('A'), ord('Z'))] = [1] * 26

with open(fn) as f:
    # sum the matching characters
    print sum([lut[ord(c)] for c in f.read()])
"
How to filter the return value of a class that extends the list object,"def __init__(self, data):
    self.__dict__.update(data)
"
Finding tuple in the list of tuples (sorting by multiple keys),">>> min(t, key=lambda i: (i[1], -i[2]))
('3', 2.0, 5)
"
Square root of a negative array Python,"lst = [-1, 3, -8]
results = [cmath.sqrt(x) for x in lst]
"
Writing tabs in a specific way (Not from lists) in python,"fidzavg.write(""{0:g}\t{1:g}\n"".format(stepval*filenum, float(value)))
"
Pythonic representation of a list of values with optional flags,"from collections import defaultdict

flags = defaultdict(lambda : None)
flags.update({'F1':True,'F3':True,'F8':True})

for f in 'F1 F2 F3 F4 F5 F6 F7 F8'.split():
    print f, '->', flags[f]
"
Update certain elements in a list,"def perturbate(x, h):
    """"""
    Given an initial point x = [x0, x1, ..., xn]
    Returns a list of points containing the original point and,
    for every coordinate, ""perturbations"" of that point created
    by adding and subtracting 'h' to the coordinate.
    """"""
    # start with the original point plus
    # 2 copies of it for every coordinate
    points = [x[:] for i in range(len(x)*2 + 1)]

    for coordinate_index in range(len(x)):
        points[coordinate_index*2 + 1][coordinate_index] -= h
        points[coordinate_index*2 + 2][coordinate_index] += h
    return points
"
calculate total events in month using pandas,"df2 = df.set_index('Date').groupby(['Code', 'ID']).resample('M', 'sum')
df2['Sum'].unstack([0,1]).plot()
"
Two's complement of Hex number in Python,"In [232]: b = 0xc158a854

In [233]: if b >= 1<<31: b -= 1<<32

In [234]: b
Out[234]: -1051154348L
"
How to alter a string after it has been printed,"import time
import sys

for i in range(4, 0, -1):
    print('\rTime left:', i, end='')
    sys.stdout.flush()
    time.sleep(1)
"
How to edit x axis with pylab?,"ax.set_xlim((-50,150))
ax.set_xticks(np.arange(-50, 150, 20))
plt.show()
"
trouble extracting elements to list from string,">>> next(zip(*literal_eval(s.split('=')[-1].strip())))
(100, 2500, 5000, 10000)
"
How to stop a dictionary shuffling? (Python),"menu = [
    ""Encrypt message"",
    ""Decrypt message"",
    ""Secure Encrypt Message"",
    ""Exit"",
    ]
for n, x in enumerate(menu, start=1):
    print(""{}) {}"".format(n, x))
selection = input(""Please select: "")
"
Creating a numpy array of 3D coordinates from three 1D arrays,"def ndmesh(*xi,**kwargs):
    if len(xi) < 2:
        msg = 'meshgrid() takes 2 or more arguments (%d given)' % int(len(xi) > 0)
        raise ValueError(msg)

    args = np.atleast_1d(*xi)
    ndim = len(args)
    copy_ = kwargs.get('copy', True)

    s0 = (1,) * ndim
    output = [x.reshape(s0[:i] + (-1,) + s0[i + 1::]) for i, x in enumerate(args)]

    shape = [x.size for x in output]

    # Return the full N-D matrix (not only the 1-D vector)
    if copy_:
        mult_fact = np.ones(shape, dtype=int)
        return [x * mult_fact for x in output]
    else:
        return np.broadcast_arrays(*output)
"
How can I efficiently process a numpy array in blocks similar to Matlab's blkproc (blockproc) function,"import numpy as np
from numpy.lib.stride_tricks import as_strided as ast

A= np.arange(36).reshape(6, 6)
print A
#[[ 0  1  2  3  4  5]
# [ 6  7  8  9 10 11]
# ...
# [30 31 32 33 34 35]]

# 2x2 block view
B= ast(A, shape= (3, 3, 2, 2), strides= (48, 8, 24, 4))
print B[1, 1]
#[[14 15]
# [20 21]]

# for preserving original shape
B[:, :]= np.dot(B[:, :], np.array([[0, 1], [1, 0]]))
print A
#[[ 1  0  3  2  5  4]
# [ 7  6  9  8 11 10]
# ...
# [31 30 33 32 35 34]]
print B[1, 1]
#[[15 14]
# [21 20]]

# for reducing shape, processing in 3D is enough
C= B.reshape(3, 3, -1)
print C.sum(-1)
#[[ 14  22  30]
# [ 62  70  78]
# [110 118 126]]
"
Small Tables in Python?,"set1 = set(u for u in users if users[u]['Location'] == 'Boston')
set2 = set(u for u in users if users[u]['Type'] == 'Primary')
result = set1.union(set2)
"
Creating list of individual list items multiplied n times,">>> a = ['x','y','z']
>>> b = [1,2,3]
>>> [[x]*y for x,y in zip(a,b)]
[['x'], ['y', 'y'], ['z', 'z', 'z']]
"
How to find highest probable matches between arrays,"for x in list1:
    y = max(list2, key=lambda y: sum(1 for w in x if w in y))
    print x, y
"
Python: Algorithm to walk all the integers in a list and come up with all possible values?,"listLen = 10
low = 0
for L in itertools.product(*[range(low,random.randint(0,100)) for _ in range(listLen)]):
  print(L)
"
I need to get my main function working,"def create_list(n):
    import random
    my_list = []
    for i in range(n):
        my_list.append(random.randint(1,6))
    return my_list
"
Tkinter create_image not displaying,"__init__(self, name=None, cnf={}, master=None, **kw)
"
Printing a two dimensional list,"def print_board(game_state):
    """"""Prints the game board given the current game state""""""

    print(""1 2 3 4 5 6 7"")
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLUMNS):
            if game_state.board[row][col] == connect_four.NONE:
                print('.', end=' ')
            elif game_state.board[row][col] == connect_four.RED:
                print('R', end=' ')
            elif game_state.board[row][col] == connect_four.YELLOW:
               print('Y', end=' ')

        print()
"
concatenate splatted lists,"def join_lists(*args):
    out = []
    for L in args:
        for i in L:
            out.append(i)
    return out
"
How to read negative numbers from a file?,"result=re.findall(r""([a-z]+)(-?[0-9]*\.?[0-9]+)"",""N7303 X-6.511 Y-40.862 A-89.926"",re.I)
print result
"
Python 3: Iterating over a dictionary,"stats = [summ for summ in data['playerStatSummaries'] if summ['playerStatSummaryType'] == 'RankedSolo5x5']
"
converting unix timestamp to local time,"import datetime
import calendar

now = calendar.timegm(datetime.datetime.now().timetuple())
"
How to delete certain words from a variable or a list python,"reg='|'.join(common_words)
new_text=re.sub(reg,'',text)
"
Highlight multiple words using Regex function,"def highlight_one(text, keyword):
    replacement = ""\033[91m"" + keyword + ""\033[39m""
    text = re.sub(re.escape(keyword), replacement, text, flags=re.I)
    print text
"
python can't seem to get a list to return properly,"import copy

# Now when you modify newHand (i.e appending or removing items) 
# the original hand list from the caller's frame will not be affected.
newHand = copy.copy(hand)

# You can alternatively copy the list using...
newHand = hand[:]

# However, if there are other mutable objects inside of `hand` you wished
# to copy, you'd have to use the `deepcopy` method of `copy`.
"
Working with nested lists in Python,"import numpy as np
np.array(list_).sum(0).prod()
"
Temporal median image of multiple images,"In [1]: img1 = np.array([[1, 2], [3, 4]])

In [2]: img2 = np.array([[10, 6], [1, 0]])

In [3]: img3 = np.array([[8, 1], [0, 4]])

In [4]: images = np.zeros(shape=img1.shape + (3,))

In [5]: images[:,:,0] = img1

In [6]: images[:,:,1] = img2

In [7]: images[:,:,2] = img3

In [8]: images
Out[8]: 
array([[[  1.,  10.,   8.],
        [  2.,   6.,   1.]],

       [[  3.,   1.,   0.],
        [  4.,   0.,   4.]]])

In [9]: images[:,:,0]
Out[9]: 
array([[ 1.,  2.],
       [ 3.,  4.]])

In [10]: np.median(images, axis=2)
Out[10]: 
array([[ 8.,  2.],
       [ 1.,  4.]])
"
blank file while copying a file in python,"def copy_file(option):
    infile_name= input(""Please enter the name of the file to copy: "")
    infile = open(infile_name, 'r')
    outfile_name = input(""Please enter the name of the new copy:  "")
    outfile = open(outfile_name, 'w')
    slist = infile.readlines()
    if option == 'statistics':
        for line in slist:
            outfile.write(line)
        infile.close()
        outfile.close()
        result = []
        blank_count = slist.count('\n')
        for item in slist:
            result.append(len(item))
        print('\n{0:<5d} lines in the list\n{1:>5d} empty lines\n{2:>7.1f} average character per line\n{3:>7.1f} average character per non-empty line'.format(
            len(slist), blank_count, sum(result)/len(slist), (sum(result)-blank_count)/(len(slist)-blank_count)))


copy_file('statistics')
"
Extract methods of a class from the keys of a dictionary,">>> class Machine(dict):
...     def __init__(self):
...         dct = {'poweron':'OUTP ON', 'home' : 'MV 0, 0', 'identify': '*IDN?'}
...         super(Machine, self).__init__(dct)
...     def __dir__(self):
...         return sorted(self)
...     def __getattr__(self, k):
...         if k in self:
...             return self[k]
...         raise AttributeError(k)
...     def __setattr__(self, k, v):
...         if k in self:
...             self[k] = v
...         super(Machine, self).__setattr__(k, v)
... 
>>> m = Machine()
>>> m.home
'MV 0, 0'
>>> m.home = 'new value'
>>> m.home
'new value'
"
Match a term ending with digit,"[x for x in old_list if x[-1].isdigit()]
"
Append list elements to a list of tuples,"d = map(lambda x, y: x + y[1:], a, b)
"
Declare array of matrix in python,"NUM_COLUMN = 4
NUM_ROW = 2
NUM_MATRIX = 3
mtx = [[0.0 for x in range(NUM_COLUMN)] for x in range(NUM_ROW)] 
arrMtx = [mtx for x in range(NUM_MATRIX)]
print arrMtx
"
"Select 7, 14, 20, 50, 200 day prices from OHLC data in SQL database.",">>> import pandas as pn
>>> from datetime import date
>>> df = pn.read_csv('fut.csv', index_col=2, parse_dates=[2])
>>> pn.rolling_mean(df['CLOSE'], window=7)
yyyymmdd
2005-03-29         NaN
2005-03-30         NaN
2005-03-31         NaN
2005-04-01         NaN
2005-04-04         NaN
2005-04-05         NaN
2005-04-06    0.121429
2005-04-07    0.120429
2005-04-08    0.119429
2005-04-11    0.118571
2005-04-12    0.117857
2005-04-13    0.117429
2005-04-14    0.117000
2005-04-15    0.116571
2005-04-18    0.116714
2005-04-19    0.117286
2005-04-20    0.117571
2005-04-21    0.117857
2005-04-22    0.118143
2005-04-25    0.118429
2005-04-26    0.118714
>>>
>>> pn.rolling_mean(df['CLOSE'], window=7)[date(2005,4,26)]
0.11871428571428572
>>>
"
Fetching tweets with hashtag from Twitter using Python,"from Twython import Twython

TWITTER_APP_KEY = 'xxxxx' #supply the appropriate value
TWITTER_APP_KEY_SECRET = 'xxxxx' 
TWITTER_ACCESS_TOKEN = 'xxxxxx'
TWITTER_ACCESS_TOKEN_SECRET = 'xxxxx'

t = Twython(app_key=TWITTER_APP_KEY, 
            app_secret=TWITTER_APP_KEY_SECRET, 
            oauth_token=TWITTER_ACCESS_TOKEN, 
            oauth_token_secret=TWITTER_ACCESS_TOKEN_SECRET)

search = t.search(q='#omg',   #**supply whatever query you want here**
                  count=100)

tweets = search['statuses']

for tweet in tweets:
  print tweet['id_str'], '\n', tweet['text'], '\n\n\n'
"
Print python list in groups of 3,"from itertools import imap,islice

li = ['sea','mountain','desert',
      'Emma','Cathy','Kate',
      'HH','VVVVVVV','AAA',
      'round','flat','sharp',
      'nut','banana','apple',
      'heeeeeeeeeeen','tiger','snake'
      'red','purple','white',
      'atlantic','pacific','antarctic',
      'Bellini']

print 'len of li == %d\n' % len(li)

def cols_print(li,nc):
    maxel = tuple(max(imap(len,islice(li,st,None,nc)))
                  for st in xrange(nc))

    nblines,tail = divmod(len(li),nc)
    stakes = (nc-1)*['%%-%ds\t'] + ['%%-%ds']
    form = ''.join(stakes) % maxel

    itn = iter(li).next

    print '\n'.join(form % tuple(itn() for g in xrange(nc))
                  for i in xrange(nblines)) 
    if tail:
        print ''.join(stakes[nc-tail:]) % maxel[0:tail] % tuple(li[-tail:]) + '\n'
    else:
        print


for nc in xrange(3,8):
    cols_print(li,nc)
    print '-----------------------------------------------------------'
"
How do I create a lambda function to print numbers containing x and y in Python?,"from itertools import product    
[int(''.join(d)) for l in range(1, 4) for d in product('89', repeat=l)]
"
Python | How to create dynamic and expandable dictionaries,"userdata = { ""data"":[]}

def fil_userdata():
  for i in xrange(0,5):
    user = {}
    user[""name""]=...
    user[""age""]=...
    user[""country""]=...
    add_user(user)

def add_user(user):
  userdata[""data""].append(user)
"
regex returns None on parsing address,">>> re.search(r'.*?,', ""abcd,abcde,abc, f"")
<_sre.SRE_Match object; span=(0, 5), match='abcd,'>
>>> re.search(r'.*,', ""abcd,abcde,abc, f"")
<_sre.SRE_Match object; span=(0, 15), match='abcd,abcde,abc,'>
"
Extract pattern from sql script,"/^merge / {
    if (match($0,/merge into ([^[:blank:]]+)/,a)) {
        print ""MERGE|""a[1]
        next
    }
}

/FROM [^(]/ {
    getFromTabs()
    if (match(from,/FROM ([^[:blank:]]+)/,a)) {
        printKey(a[1])
        do {
            ind=index(from,"","")
            if (ind) {
                from=substr(from,ind+1)
                match(from,/[[:space:]]*([[:alnum:]]+)/,a)
                printKey(a[1])
            }
        }
        while (ind)
    }
}    

/^drop/ {
    if (match($0,/drop table ([^[:blank:]]+)/,a)) {
        print ""DROP|""a[1]
        next
    }

}

/^create/ {
    if (match($0,/create table ([^[:blank:]]+)/,a)) {
        print ""CREATE|""a[1]
    }
    if (match($0,/select.*[[:blank:]]([^[:blank:]]+);/,a)) {
        print ""SELECT|""a[1]
    }
}

function printKey(key) {
    if (!(key in T)) {
        print ""SELECT|""key
        T[key]++
    }
}

function getFromTabs(p) {
    p=0
    from=""""
    do {
        from=(p++==0)?$0:(from ORS $0)
        getline
    }
    while (!/WHERE/)
}
"
How to create series of pandas dataframe by iteration,"In [8]: d = pd.DataFrame([[1,2,3,4],[5,6,7,8]], columns = ['A','B','C','D'])

In [9]: d
Out[9]: 
   A  B  C  D
0  1  2  3  4
1  5  6  7  8

In [10]: gbl = globals()

In [11]: gbl['e'] = pd.DataFrame(d['A'])

In [12]: e
Out[12]: 
   A
0  1
1  5
"
From matrix as lists of lists: count number of elements from a set x in each column. (python3),"domain = ['a','b','c','d']
allf = [{'a':'a','b':'c','c':'d', 'd':'d'}, {'a':'b', 'b':'c', 'c':'d', 'd':'a'}]

def dictfunky():
    dictfuncts = []
    for item in allf:
        di = dict(item)
        dictfuncts.append(di)
    return dictfuncts

def functmatnoz():
    matlist = []
    for f in dictfuncts:
        elems = []
        for element in domain:
            forward = [f[element], f[f[element]], f[f[f[element]]], f[f[f[f[element]]]]]
            forward.reverse()
            back = forward
            elems.append(back)
        matlist.append(elems)
    return matlist

def sigma():
    sigmamat = []
    for mat in matlist:
        col = []
        for element in domain:
            num_elem = []
            for results in mat:
                count = results.count(element)
                num_elem.append(count)
            col.append(num_elem)
        sigmamat.append(col)
    return sigmamat

dictfuncts = dictfunky()
matlist = functmatnoz()
sigmamat = sigma()

print('dictfuncts: {}'.format(dictfuncts))
print('   matlist: {}'.format(matlist))
print('  sigmamat: {}'.format(sigmamat))
"
"Convert from bin to int/char without loosing leading ""0""",">>> def change(s):
...      try:
...           return '{}{}'.format('0'*s.index('1'),int(s,2))
...      except ValueError:
...           return s
... 
>>> change('000000')
'000000'
>>> change('000001')
'000001'
>>> change('000011')
'00003'
"
how do I make a cutomised object as a node for networkx and how do I look it up?,">>> import networkx as nx
>>> G = nx.Graph()
>>> G.add_node(1)
>>> G.node[1]['ipaddress'] = '8.8.8.8'
>>> G.node[1]['longitude'] = 37
>>> G.node[1]['latitude'] = 50
>>> G.node[1]
{'latitude': 50, 'ipaddress': '8.8.8.8', 'longitude': 37}
>>> G.node[1]['ipaddress']
'8.8.8.8'
"
reading lines 2 at a time,"def natatime_no_itertools(itr, fillvalue=None, n=2):
  x = iter(itr)
  for item in x:
    yield (item,) + tuple(next(x, fillvalue) for _ in xrange(n-1))
"
Python: printing with knowledge of current level of indentation,"def indent(thing, current_indentation=""""):
    print current_indentation + str(thing)
    try:
        for item in thing:
            indent(item, "" "" * 4 + current_indentation)
    except TypeError:  # thing is not iterable
        pass

xl = [[[0,0], [-1,1], [-2,2]], [[-3,3], [-4, 4], [-5,5]]]
indent(xl)
"
Combining files even if one is missing?,"def read_concat_file(filename, parse_dates = True):
    df_list = []
    try:
        for file_date in last_n_days(filename, days, False):
            try:
                read_file = '{}{}{}{}'.format(ftp_location, ftp_filename, file_date, '.csv')
                print('Appending file {}'.format(read_file))
                df = pd.read_csv(read_file, parse_dates = parse_dates)
                df_list.append(df)
            except IOError:
                print('File does not exist:', read_file)  
        return pd.concat(df_list)
"
Execute multiple if loops,"a = 0
b = 0
value = 0
for value in range(100):
    if a == value and b == value:
        print ""foo bar""
    a = a + 1
    b = b + 1
"
Looping through tree hierarchy in python?,"def findObjectByName(self, name):
    if self.name == name:
        return self
    else:
        for child in self.children:
            match = child.findObjectByName(name)
            if match:
                return match
"
Make IntEnum members callable while keeping their comparison behavior,"from enum import Enum

class FuncEnum(Enum):
    def __init__(self, val, func=None):
        self.val = val
        self.func = func or lambda: None
    def __call__(self, *args, **kwargs):
        return self.func(*args, **kwargs)
    def __eq__(self, other):
        return self.val == other
    def __ge__(self, other):
        return self.val >= other
    # and etc... not sure how @total_ordering will work here!

class Color(FuncEnum):
    red = (1, lambda x: x**2)
    blue = (2, lambda x: x**3)
    green = (3, lambda x: x**4)

Color.red(4)  # 16
Color.red == 1  # True
Color.blue(2)  # 8
"
Memory Efficient Alternatives to Python Dictionaries,"import collections

def build(file):
    pairs = collections.defaultdict(list)
    for line in file:  # N.B. file assumed to be already sorted
        a, b, c, freq = line.split()
        key = ' '.join((a, b))
        pairs[key].append(c + ':' + freq if freq != '1' else c)
    out = open('squeezedsinglearrayfile', 'w')
    for key in sorted(pairs.keys()):
        out.write('%s|%s\n' % (key, ' '.join(pairs[key])))

def load():
    return open('squeezedsinglearrayfile').readlines()

if __name__ == '__main__':
    build(open('freqs'))
"
How can i get csrftoken in view?,"django.middleware.csrf.get_token(request)
"
Is it OK to call __init__ from __setstate__,"class Calculator():
    def __init__(self):
        # some calculation stuff here
    def __setstate__(self, state)
        self.__init__()
"
Update list to include new elements of another list (primefactor computation),"def find_all_primefactors(list_with_numbers):
    all_factors = []
    for number in list_with_numbers:
        prime_factors = primefactors_of_number(number)
        for x in set(prime_factors): # loop over factors without duplicates
            in_all = all_factors.count(x) # how many x are already in all_factors
            in_p = prime_factors.count(x) # how many x are in prime_factors
            diff = in_p - in_all                
            all_factors.extend([x]*diff) # extend all_factors based on difference
                                         # note that [x]*diff is [] for diff <= 0
    return all_factors
"
python - possible encoding and decoding values,"import HTMLParser
h = HTMLParser.HTMLParser()
print h.unescape('&pound;682m')
£682m
"
How to extract from a list of objects a list of specific attribute?,"from operator import attrgetter
map(attrgetter('my_attr'), my_list)
"
How to find the numbers in between the numbers that the user has input?,">>> current = int(input(""Current floor: ""))
>>> desti = int(input(""Destination floor: ""))
>>> print(*range(current+1, desti))
4 5
>>> between = list(range(current+1, desti))
>>> between
[4, 5]
"
how to pass self to function inside python dictionary,"class MyData:
    def __init__(self):
        self.r = range(10)
        self.r2 = range(10, 20)

    def f(self):
        self.r.extend(self.r2)
        return self.r
"
how to neatly print a dictionary,"SPACE_BETWEEN_KEYS_AND_VALUES = 1
MINIMUM_PADDING = 10
padded_width = max(MINIMUM_PADDING, max(len(x) for x in my_dict.iterkeys()) + SPACE_BETWEEN_KEYS_AND_VALUES)
for key in my_dict:
    print(""{key: <{width}}{value}"".format(key=key, width=padded_width, value=my_dict[key]))
"
How to access the second of two entries for the same tag?,">>>inf = open(""example.html"") 
>>>content = inf.read()
>>>inf.close()
>>>soup = BeautifulSoup(content)
>>>soup.findall('div',{'class':'lead-value'})
[<div class=""lead-value"">80.0</div>, <div class=""lead-value"">100.0</div>, <div class=""lead-value"">120.0</div>, <div class=""lead-value"">140.0</div>]
>>>blocks = soup.findall('div',{'class':'lead-value'}) 
>>>print blocks[1].string
100.0
"
How to write multiple values into one line in a text file,"with open('output', 'w') as fp:
    lines = []
    while True:
        a, x, y, z = calculate_a(), calculate_x(), calculate_y(), calculate_z()
        lines.append('{} {} {} {}\n'.format(a, x, y, z))
    fp.writelines(lines)
"
Why do copied dictionaries point to the same directory but lists don't?,"list += ['four']
"
Python and closed variables,"def method_1():
    nonlocal value
    value = True    # Works as expected -- assigns to `value` from outer scope
"
How to create a void matrix (not filled with ones or zeros) in Python of expected dimensions M times N?,">>> import numpy as np
>>> np.ndarray(shape=(5,6), dtype=np.object)
array([[None, None, None, None, None, None],
       [None, None, None, None, None, None],
       [None, None, None, None, None, None],
       [None, None, None, None, None, None],
       [None, None, None, None, None, None]], dtype=object)
"
Delete an element from a dictionary,{i: a[i] for i in a if (i != 0)}
Python Pandas: Get index of rows which column matches certain value,df.loc[df['BoolCol']]
Python - Assigning Multiple Keys for a Single Value,"numbers = {1: 5.01, 11: 7.02, 21: 9.03, 31: 11.04, 41: 15.0, 51: 71.08, 61: 19.15}
numbers = {k: v for start, v in numbers.items() for k in range(start, start + 10)}
"
Python Regex And encode,"for name in files:
    with open(name, 'r') as f:
        matches = re.findall(""\d{2}-\d{8}"", f.read())
        for mt in matches:
            print mt
"
Set the wrap width for python docs in a terminal,"#!/usr/bin/python

import inspect
import os
import sys
import webbrowser
from pydoc import Helper

__all__ = ['MyHelper', 'old_help', 'help']


class MyHelper(Helper):

    def __init__(self):
        Helper.__init__(self)

    def getdocloc(self, object):
        global old_help
        """"""Return the location of module docs or None""""""
        try:
            file = inspect.getabsfile(object)
        except TypeError:
            file = '(built-in)'

        docloc = os.environ.get(""PYTHONDOCS"", ""http://docs.python.org/library"")
        basedir = os.path.join(sys.exec_prefix, ""lib"", ""python""+sys.version[0:3])
        BUILTINS_LIST = ( 'errno', 'exceptions', 'gc', 'imp', 'marshal', 'posix', 'signal', 'sys', 'thread', 'zipimport')
        if (isinstance(object, type(os)) and (object.__name__ in BUILTINS_LIST or file.startswith(basedir)) and object.__name__ not in ('xml.etree', 'test.pydoc_mod')):
            if docloc.startswith(""http://""):
                docloc = ""%s/%s"" % (docloc.rstrip(""/""), object.__name__)
            else:
                docloc = os.path.join(docloc, object.__name__ + "".html"")
        else:
            docloc = None
        return docloc

    def __repr__(self):
        global old_help
        if inspect.stack()[1][3] == '?':
            return self()
            return ''
        else:
            return '<HHhelp instance>'

    def help(self, *args):
        print args
        global old_help
        if isinstance(args[0], object):
            docloc = self.getdocloc(args[0])
            print '********',docloc,type(docloc)
            if isinstance(docloc, str):
                if docloc.find('http://') == 0:
                    webbrowser.open(docloc)
        else: 
            old_help(args)

global old_help, help
old_help = help
help = MyHelper()
"
How to quickly find first multiple of 2 of list element in list of large integers?,"j = 0
s = len(l)
for i in range(0, s):
    l_i = l[i]
    l_i2 = l_i<<1
    while l[j] < l_i2:
        j += 1
        if j == s:
            return -1
    if l[j] == l_i2:
        return i
"
Can someone tell me where I'm going wrong with this structure?,"from kivy.uix.button import Button
from kivy.app import App

def dostuff(x):
    print(""x is %s"" % x)


class MyButton(Button):
    def on_press(self):
        dostuff(22)

class MyApp(App):

    def build(self):
        return MyButton()

MyApp().run()
"
How to use Python to show only the letters from words with vowels,"import re

word = ""james is funny""

new_word = re.sub('[^aeiou]', ' ', 'james is funny')

print new_word
"
"Itertools: selecting in pandas based on previous three rows, or previous elements in a list",">>> d['pattern'] = d.sid.map(d.groupby('sid')['key'].apply(lambda c: list(c[::2])))
>>> d
   trial  sid  key               pattern
0      1    1  'm'  ['m', 'x', 'x', 'n']
1      2    1  'm'  ['m', 'x', 'x', 'n']
2      3    1  'x'  ['m', 'x', 'x', 'n']
3      4    1  'n'  ['m', 'x', 'x', 'n']
4      5    1  'x'  ['m', 'x', 'x', 'n']
5      6    1  'x'  ['m', 'x', 'x', 'n']
6      7    1  'n'  ['m', 'x', 'x', 'n']
"
Computing average across a list of MxN arrays,"A.mean(axis=0)
"
Efficient way to do string insertion in python?,"charList = list(parsedContent)

while self.trimmedCode:
    key, value = self.trimmedCode.pop()
    charList[key] = value + charList[key] # the change is here! No O(N) slice assignment!

parsedContent = ''.join(charList)
"
Finding letters in a string,">>> y='y'
>>> y.isalpha
<built-in method isalpha of str object at 0x00FA3A40>
>>> y.isalpha()
True
"
Dynamic wx.RadioButtons,"i = 0
....
for i in range(nphones):
           rbuttons[i].SetLabel(voice1.phones[i].name)
           rbuttons[i].Show()

i = i + 1

rbuttons[i].SetLabel('Voicemail')
rbuttons[i].Show()
"
Test if value exists in several lists,"all(1 in x for x in (a, b, c, d))
"
"Searching for a function similar to combinations() or how could i create one, given some 'rules'","def combination(string, n):
    result = []

    for i in range(0,len(string)-n+1):
        result.append(string[i:i+n])

    for i in range(len(string)-n+1,len(string)):
        result.append( string[i:i+n] + string[0:n-len(string)+i] )

    return result
"
Turn functions with a callback into Python generators?,"    q = Queue(maxsize=1)

    # Producer
    def my_callback(x):
        q.put(x)
        q.put(""dummy"",True,timeout) # Blocks until the first result is retrieved
        q.join() # Blocks again until task_done is called

    # Consumer
    while True:
        next_item = q.get(True,timeout) # Blocks until an input is available
        q.task_done()                   # (one ""task_done"" per ""get"")
        if next_item is job_done:
            break
        yield next_item
        q.get() # Retrieves the ""dummy"" object (must be after yield)
        q.task_done() # Unblocks the producer, so a new iteration can start
"
retrieving substrings which are not matched by re.findall,">>> re.split(""a(?=b)"", ""ababba"")
['', 'b', 'bba']
"
Python: How to override data attributes in method calls?,"def calculate(self, red=None, blue=None, yellow=None):
    red, blue, yellow = map(
        lambda (a, m): m if a is None else a,
        zip([red, blue, yellow], [self.red, self.blue, self.yellow]))
    return red + blue + yellow
"
how to generate unicode strings only with multi-byte characters,"import sys
import random

def random_nonascii_unicode(length):
    return u''.join(unichr(random.randint(0x80, sys.maxunicode)) for _ in range(length))
"
searching a string and printing the complete line containing that string,"for line in all_blocks.splitlines():
    if MAC in line:
         print(line)
"
Python html alphabet,"import html.entities
import re

def to_entitydef(match):
    n = ord(match.group())
    name = html.entities.codepoint2name.get(n)
    if name is None:
        return '&#{};'.format(n)
    return '&{};'.format(name)

def escape(text):
    return re.sub('.', to_entitydef, text)
"
Matching substring in pattern in Python,"import re

print re.findall(""'(\w+)'"", ""('s1', 's2', 's3', 's4')"")
"
"Find all combinations of letters, selecting each letter from a different key in a dictionary","for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
    # combo is a tuple of 4 characters.
"
Efficiently find repeated characters in a string,"def test_set(xs):
    seen = set()  # O(1) lookups
    for x in xs:
        if x not in seen:
            seen.add(x)
        else:
            return x

import collections

def test_counter(xs):
    freq = collections.Counter(xs)
    for k in freq:
        if freq[k] > 1:
            return k

def test_dict(xs):
    d = {}
    for x in xs:
        if x in d:
            return x
        d[x] = 1

def test_sort(xs):
    ys = sorted(xs)

    for n in range(1, len(xs)):
        if ys[n] == ys[n-1]:
            return ys[n]

##

import sys, timeit
print (sys.version + ""\n"")
xs = list(range(10000)) + [999]
fns = [p for name, p in globals().items() if name.startswith('test')]
for fn in fns:
    assert fn(xs) == 999
    print ('%50s %.5f' % (fn, timeit.timeit(lambda: fn(xs), number=100)))
"
recursive backtracking - python. not returning value,"def IterateStaples(combo, target):        
    # base case
    if all(combo.diff[macro] < 2 for macro in combo.diff): # iterate on combo.diff.values()?
        return combo   # returning combo indicates success!

    for staple in combo.staples:
        staple.increment()                 # update state   
        combo.calcTotals()      
        combo.findDiff(target)

        if not combo.findConflict(target):  # skip recursing on invalid states
            result = IterateStaples(combo, target)    # recursive case
            if result is not None:      # if the recursion was successful, return the result
                return result

        staple.decrement()  # otherwise, undo the change to the state (backtrack)
        combo.calcTotals()     # these two lines might not be necessary when backtracking
        combo.findDiff(target) # since other branches will call them after staple.increment()

    return None # if we got to the end of the loop, explicitly return None to signal failure
"
Remove all hex characters from string in Python,">>> import string
>>> s = '\xe2\x80\x9chttp://www.google.com\xe2\x80\x9d blah blah#%#@$^blah'
>>> printable = set(string.printable)
>>> filter(lambda x: x in printable, s)
'http://www.google.com blah blah#%#@$^blah'
"
Add one hour forward to current time in Python,"import time
t0 = time.time() # now (in seconds)
t1 = t0 + 60*30  # now + 30 minutes
t2 = t0 + 60*60  # now + 60 minutes

for t in [t0,t1,t2]:
   print time.strftime(""%I %M %p"",time.localtime(t))
"
Merging list of tuples in python,"result = [ l for l in l2 if (l[0],) in l1]
"
How can I create a new Graph Editor in Maya using Python?,"import maya.cmds as cmds
import maya.OpenMayaUI as apiUI
from PySide import QtCore, QtGui
import shiboken

def wrapinstance(ptr, base=None):
    """"""
    Utility to convert a pointer to a Qt class instance (PySide/PyQt compatible)
    :param ptr: Pointer to QObject in memory
    :type ptr: long or Swig instance
    :param base: (Optional) Base class to wrap with (Defaults to QObject, which should handle anything)
    :type base: QtGui.QWidget
    :return: QWidget or subclass instance
    :rtype: QtGui.QWidget
    """"""
    if not globals().has_key('QtCore') or not globals().has_key('QtGui'):
        return None

    if ptr is None:
        return None
    ptr = long(ptr)  # Ensure type
    if globals().has_key('shiboken'):
        if base is None:
            qObj = shiboken.wrapInstance(long(ptr), QtCore.QObject)
            metaObj = qObj.metaObject()
            cls = metaObj.className()
            superCls = metaObj.superClass().className()
            if hasattr(QtGui, cls):
                base = getattr(QtGui, cls)
            elif hasattr(QtGui, superCls):
                base = getattr(QtGui, superCls)
            else:
                base = QtGui.QWidget
        return shiboken.wrapInstance(long(ptr), base)
    elif globals().has_key('sip'):
        base = QtCore.QObject
        return sip.wrapinstance(long(ptr), base)
    else:
        return None

def getMayaWindow():
    ptr = apiUI.MQtUtil.mainWindow()
    return wrapinstance(long(ptr), QtCore.QObject)

def toQtObject(mayaName):
    '''
    Given the name of a Maya UI element of any type,
    return the corresponding QWidget or QAction.
    If the object does not exist, returns None
    '''
    ptr = apiUI.MQtUtil.findControl(mayaName)
    if ptr is None:
        ptr = apiUI.MQtUtil.findLayout(mayaName)
    if ptr is None:
        ptr = apiUI.MQtUtil.findMenuItem(mayaName)
    if ptr is not None:
        return wrapinstance(long(ptr), QtCore.QObject)

class MayaSubWindow(QtGui.QMainWindow):
    def __init__(self, parent=getMayaWindow()):
        super(MayaSubWindow, self).__init__(parent)
        qtObj = toQtObject(cmds.animCurveEditor())
        #Fill the window, could use qtObj.setParent
        #and then add it to a layout.
        self.setCentralWidget(qtObj)

myWindow = MayaSubWindow()
myWindow.show()
"
If statement working in a strange way,"A = 3
B = range(10)
f = range(10)

for i in range(10):
    for j in range(len(B)):
        if (A == B[j]):
        # if ((A - B[j]) == 0):
            print i, f[j]
            print 'test'
"
Test if sentences contain smaller sentences,"((' ' + small_sentence + ' ') in large_sentence)
        or (large_sentence.startswith(small_sentence + ' ')
        or (large_sentence.endswith(' ' + small_sentence):
"
Writing a list to a file with Python,outfile.write('\n'.join(itemlist))
Parsing string sections,"data={}
ss=((0,19),(20,41),(42,80))
with open('/tmp/p.txt','r') as f:
    for n,line in enumerate(f):
        fields={}
        for i,j in ss:
            field=line[i:j]
            t=field.split(':')
            fields[t[0].strip()]=t[1].strip()
        data[n]=fields    

print data  
"
How to modify a tag text value based on its sibling tag text value in xml with python?,"import xml.etree.ElementTree as ET
root = ET.fromstring(raw)
node = root.find("".//hudson.model.StringParameterDefinition"")
node.find("".//defaultValue"").text = node.find("".//name"").text
"
Python - delete uuencoding lines,"with open(file, 'r') as f:
    lines = f.read().split('\n')
# ... or whichever way you obtained your content as an array of lines
lines = [x for x in unuuencode(lines)]
"
Python requests post not sending string,"requests.post('http://mypage.com/add', data=params,
              headers = headers, proxies = proxy, timeout = max_timeout)
"
How to split string into dictionary and return a specific dictionary value?,"s = '[DataMember(Name = ""version"", EmitDefaultValue = false, Order = 5)]'

print(s.split(""Name ="")[1].split("","")[0].strip()[1:-1])
version
"
"Difference between ""if x"" and ""if x is not None""","test = False 
test = """" 
test = 0
test = 0.0 
test = []
test = () 
test = {} 
test = set()
"
Copy/write line on to another file with minor change on the line,"fOut.write(line.rstrip('\n') + ' | new position =' + str(newPosition))
"
Python regex - faster search,"re.findall(pattern, rr[::-1])
"
Using openpxl and python to import a xlsx file,"from openpyxl import *

#import the excel workbook
wb = load_workbook('input.xlsx')
#this should give you the sheet names
WSheets = wb.sheetnames

#iterate through sheets
for i in WSheets:
    ws = wb[i]
    #To access values from a particular column of the sheet, for example column B
    print ws['B']
"
How to use IPython.parallel map() with generators as input to function,"def parallel_dumb_prime(N, v, max_outstanding=10, dt=0.1):
    """"""dumb_prime where each factor is checked remotely

    Up to `max_outstanding` factors will be checked in parallel.

    Submission will halt as soon as we know that N is not prime.
    """"""
    tasks = set()
    # factors is a generator
    factors = generate_possible_factors(N)
    while True:
        try:
            # submit a batch of tasks, with a maximum of `max_outstanding`
            for i in range(max_outstanding-len(tasks)):
                f = factors.next()
                tasks.add(v.apply_async(is_factor, f, N))
        except StopIteration:
            # no more factors to test, stop submitting
            break
        # get the tasks that are done
        ready = set(task for task in tasks if task.ready())
        while not ready:
            # wait a little bit for some tasks to finish
            v.wait(tasks, timeout=dt)
            ready = set(task for task in tasks if task.ready())

        for t in ready:
            # get the result - if True, N is not prime, we are done
            if t.get():
                return False
        # update tasks to only those that are still pending,
        # and submit the next batch
        tasks.difference_update(ready)
    # check the last few outstanding tasks
    for task in tasks:
        if t.get():
            return False
    # checked all candidates, none are factors, so N is prime
    return True
"
In Python is there a history of the function that i ran?,"import dis
dis.disassemble(foo.__code__)
"
CryptoJS and Pycrypto working together,"BLOCK_SIZE = 16
key = b""1234567890123456""

def pad(data):
    length = BLOCK_SIZE - (len(data) % BLOCK_SIZE)
    return data + chr(length)*length

def unpad(data):
    return data[:-ord(data[-1])]

def encrypt(message, passphrase):
    IV = Random.new().read(BLOCK_SIZE)
    aes = AES.new(passphrase, AES.MODE_CBC, IV)
    return base64.b64encode(IV + aes.encrypt(pad(message)))

def decrypt(encrypted, passphrase):
    encrypted = base64.b64decode(encrypted)
    IV = encrypted[:BLOCK_SIZE]
    aes = AES.new(passphrase, AES.MODE_CBC, IV)
    return unpad(aes.decrypt(encrypted[BLOCK_SIZE:]))
"
django concat string with comma in template,"{% for lead in project.leaders %}
    {{ lead.0 }}{% if not forloop.last %}, {% endif %}
{% endfor %}
"
"regex does not match only upper case letters, despite being instructed to do so","=\d+
"
Store and lookup IP Packet header fields in Python,"for sourceIP, otherHeader in testDictionary.items():
    if otherHeader[0] != destinationIP:
        testDictionary[sourceIP].append([""10.10.10.2"", 22, 8080, 1])
    else:
        testDictionary[sourceIP][-1] += 1
"
Selecting rows from a pandas DataFrame with an arbitrary number of conditions,"df[df.loc[:, df.columns.str.contains('val')].all(axis=1)]
"
Numpy: cartesian product of x and y array points into single array of 2D points,"numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)"
Combining two lists into a list of lists,"for i,j  in izip_longest(a,b, fillvalue=""""):
   # do whatever
"
Python Beautiful Soup Error : list index out of range,"from BeautifulSoup import BeautifulStoneSoup
import urllib2
import sys

url = sys.argv[1]
with  open(""dirlist.txt"",'r') as f:
    for dir in f:
        uri = url + ""/"" + dir.rstrip()
        try:
            response = urllib2.urlopen(uri)
            if response.getcode() == 200:
                    soup = BeautifulStoneSoup(response.read())
                    viewstate = soup.find(""input"", {""type"": ""submit""})
                    if viewstate and viewstate.get(""value"") == ""Send"":
                        print(""Shell is found!! Yay!!!"")
                    else:
                        print(""There's nothing here"")
        except urllib2.HTTPError, e:
                if e.code == 401:
                    print ""[!] Authorization Required %s "" % (uri)
                elif e.code == 403:
                    print ""[!] Forbidden %s "" % (uri)
                elif e.code == 404:
                    print ""[-] Not Found %s "" % (uri)
                elif e.code == 503:
                    print ""[!] Service Unavailable %s "" % (uri)
                else:
                    print ""[?] Unknwon""



    print ""\n:. FINISH :.\n""
"
Python-Getting contents between current and next occurrence of pattern in a string,">>> re.split('abc', 'abcabcabcabc')
['', '', '', '', '']
>>> re.split('bca', 'abcabcabcabc')
['a', '', '', 'bc']
>>> re.split('c', 'abcabcabcabc')
['ab', 'ab', 'ab', 'ab', '']
>>> re.split('a', 'abcabcabcabc')
['', 'bc', 'bc', 'bc', 'bc']
"
Randomizing a list of tuples without random.shuffle() python,"l = []
while len(l) < 52:
    number = random.randint(1, 13)
    suit = random.choice(['hearts', 'clubs', 'diamonds', 'spades'])
    card = (number, suit)
    if card not in l:
        l.append(card)
"
How to glue elements into a list when using groupby function?,"In [35]:

print df.groupby('A').apply(lambda x: pd.Series(list(x.T.values)))
                             0                1                2
A                                                               
bar            [bar, bar, bar]        [2, 4, 6]        [3, 5, 7]
foo  [foo, foo, foo, foo, foo]  [1, 3, 5, 7, 8]  [2, 4, 6, 8, 9]
"
Search for words (exact matches) in multiple texts using Python,"#!/usr/bin/env python
import os
import re
import sys

def fgrep(words, filenames, encoding='utf-8', case_insensitive=False):
    findwords = re.compile(""|"".join(r""\b%s\b"" % re.escape(w) for w in words),
                           flags=re.I if case_insensitive else 0).findall
    for name in filenames:
        with open(name, 'rb') as file:
             text = file.read().decode(encoding)
             found_words = set(findwords(text))
             yield name, found_words

def main():
    words = [w.decode(sys.stdin.encoding) for w in sys.argv[1].split("","")]
    filenames = sys.argv[2:] # the rest is filenames
    for filename, found_words in fgrep(words, filenames):
        print ""%s: %s"" % (os.path.basename(filename), "","".join(found_words))

main()
"
Sorted number permutations list from numeric variables or numeric list with no duplicates,"def perms(iterable):
    return [''.join(p) for p in (map(str, perm) for perm in itertools.permutations(iterable))]

>>> perms('123')
# Result: ['123', '132', '213', '231', '312', '321']
"
A copy of a list is altered on operations on the original list,"bak.append(x[:])
"
Fuzzy matching a string within a large body of text in Python (url),">>> import urllib2
>>> webpage = urllib2.urlopen('http://www.dmx.com/about/our-clients')
>>> webpage_text = webpage.read()
>>> webpage.close()
>>> for name in ['Caribou Coffee', 'Express', 'Sears']:
...     if name in webpage_text:
...         print name, ""found!""
... 
Caribou Coffee found!
Express found!
>>> 
"
"Taking norm of HUGE matrix in less than a second: NUMPY, PYTHON","In [14]: a =  numpy.random.rand(1000000,100)

In [15]: %timeit -n 10 numpy.linalg.norm(a, axis =1)
10 loops, best of 3: 1.08 s per loop
"
"In python, how do I exclude files from a loop if they begin with a specific set of letters?","if not name.startswith('doc'):
     print name
"
Call a function in a class from different class,"def some_shared_function(caller, context):
    # ...
    return 

class A(bpy.types.Operator):
    (...)
    def execute(self,context):
        some_shared_function(self, context)

class B(bpy.types.Operator):
    (...)
    def execute(self,context):
        # other code here
        some_shared_function(self, context)
"
find row or column containing maximum value in numpy array,"np.argmax(np.max(x, axis=1))
"
"How to sort a string alphabetically, with lower case letters coming before their upper case equivalents?",">>> ''.join(sorted(sorted(string), key=str.lower))
'aBbC'
"
pyside / pyqt: simple way to bind multiple buttons that shares the same functionality,"for button, line_edit in ...: 
    button.clicked.connect(lambda : self.show_dialog(line_edit))
"
Using the .split() function based on conditions?,"import re
pat = re.compile(r'\s(?=[A-Z])|,')
pat.split(my_str)
"
Python: Reference to the function from inside itself (like arguments.callee in JavaScript),"from functools import wraps

def deco(f):
    @wraps(f)
    def wrapper(*args, **kwargs):
        return f(f, *args, **kwargs)
    return wrapper

@deco
def test(callee, value=None):
    if value is None:
        print 'function attribute ""x"" is {}'.format(callee.x)
    else:
        print 'setting function attribute ""x"" to {}'.format(value)
        callee.x = value

test(42)  # -> setting function attribute ""x"" to 42
test()    # -> function attribute ""x"" is 42
"
Create a specialized dictionary from a text file,">>> strs = ""#define MOREOFTHESAME 1""
>>> strs.split()
['#define', 'MOREOFTHESAME', '1']
>>> strs.split()[1:]
['MOREOFTHESAME', '1']
"
divide the list into rows (create a nested list from a list),"size = 20
nested = [L[size*i : size*(i+1)] for i in xrange(len(L)/size)]
"
python get all ids startingwith a pattern,">>> [k for k,v in b.iteritems() if k.startswith('id123')]
['id123_2', 'id123_1']
"
How to insert duplicated values in dictionary?,"dct = {}

dct['word1'] = 23
dct['word2'] = 12
dct['word1'] = 7
dct['word2'] = 2
"
Python pandas: Generate Document-Term matrix from whitespace delimited '.dat' file,"import numpy as np
import pandas as pd

fname = 'example.txt'

full_list = []
with open(fname, ""r"") as f:
    for line in f:
        arr = line.strip("" \n"").split("" "")
        for chunk in arr[1:]:
            # converting numbers to ints:
            int_pair = [int(x) for x in chunk.split("":"")]
            full_list.append([arr[0], *int_pair])

df = pd.DataFrame(full_list)

df2 = df.pivot_table(values = 2, index = 0, columns = 1, aggfunc = np.sum, fill_value = 0)
"
How can I simplify this function?,"from itertools import groupby

def splitter(text, separators):
    grouped = groupby(text, lambda c: c in separators)
    return [''.join(g) for k,g in grouped if not k]
"
Multiprocessing subject to timer,"def setup_worker():
    global clockExp, a

    clockStart = dt.datetime.now()
    clockExp = clockStart + dt.timedelta(seconds=900)
    a = getRenewed()

def worker(item):
    global clockExp, a

    clockCur = dt.datetime.now()
    clockRem = (clockExp - clockCur).total_seconds()

    if clockRem < 5: # renew with 5 seconds left
        clockStart = dt.datetime.now()
        clockExp = clockStart + dt.timedelta(seconds=900)
        a = getRenewed()

    f(item, a)

def main(L):
    pool = multiprocessing.Pool(initializer=setup_worker)

    pool.map(worker, L)
"
python class [] function,">>> a = {}
>>> n = 0, 1, 2
>>> a[n] = 'foo'
>>> print a[n]
foo
"
Python: Having difficulty filtering out strings containing certain substrings,"my_list[:] = [m for m in my_list if 'blahblah' in m]
"
python regex unicode - extracting data from an utf-8 file,"elements = translation.split(' ',2)
traditionnal = elements[0]
simplified = elements[1]
rest = elements[2]
print ""Traditionnal:"" + traditionnal
print ""Simplified:"" + simplified
elems = rest.split(']')
tr = elems[0].strip('[')
print ""Pronouciation:"" + tr
"
Splitting a list with a separator,"def split_list(l, sep):
    # occurences
    o = [i for i, x in enumerate(l) if x == sep]
    nl = []
    # first slice
    nl.append(l[:o[0]])
    # middle slices
    for i in range(1, len(o)):
        nl.append(l[o[i-1]+1:o[i]])
    # last slice
    nl.append(l[o[-1]+1:])
    return nl
"
"Inheriting from ""str"" class","from functools import total_ordering

@total_ordering
class MyString(str):
    sortmap = {x: i for i, x in enumerate(""abdcfe"")}

    def __lt__(self, other):
        return self.sortmap[self] < self.sortmap[other]

    # inherit __eq__ from str

    def __getitem__(self, i):
        return type(self)(super(MyString, self).__getitem__(i))
"
Difference in complexity of append and concatenate for lists,"def test3():
    l = []
    for i in range(1000):
        l += [i]  # or use l.extend([i])
    return l
"
Django: check if an image exists at some particular url,">>> r = res.getheaders()
>>> redirected = False
>>> for e in r:
>>>     if(e[0] == 'location'):
>>>         redirected = e
>>>
>>> if(redirected != False):
>>>     print redirected[1]
'http://ubuntu.icafebusiness.com/images/ubuntugui2.jpg'
"
Use html5lib to convert an HTML fragment to plain text,"from lxml.html import html5parser
doc = html5parser.fromstring(body)
print doc.xpath(""string()"")
"
How to make my code more Pythonic?,"some_list = [d.get(x) or int(x) for x in some_list]
some_list = [d[x] if x in d else int(x) for x in some_list]
"
Google OAuth problem: invalid_signature,"import httplib2, os, sys, tempfile, urllib, urlparse
import oauth2 as oauth

######## OAUTH: GET REQUEST TOKEN #############
consumer = oauth.Consumer('anonymous', 'anonymous')
creds = {'oauth_token_secret': 'INSERT_SECRET_FROM_ABOVE', 'oauth_token': 'INSERT_TOKEN_FROM_ABOVE'}
client = oauth.Client(consumer)
client.token = oauth.Token(creds['oauth_token'], creds['oauth_token_secret'])
url = 'https://docs.google.com/feeds/default/private/full?v=3'
resp, content = client.request(url, 'GET')
if resp['status'] == '200':
    print 'list status OK'
    fh = open('/tmp/list.xml', 'w')
    fh.write(content)
    fh.close()
else:
    print 'list status: %s' % resp['status']
    print content
    sys.exit(1)
"
Sqlalchemy: subquery in FROM must have an alias,"foo_max_time_q = select([func.max(Foo.time).label('foo_max_time'),
                         Foo.id.label('foo_id')
                        ]).group_by(Foo.id
                         ).alias(""foo_max_time_q"")

foo_q = session.query(
          Foo.id.label('foo_id'),
          Foo.version.label('foo_version'),
          Foo.revision.label('foo_revision'),
          foo_max_time_q.c.foo_max_time.label('foo_max_time')
                ).join(foo_max_time_q, 
                       foo_max_time_q.c.foo_id == Foo.id)

print(foo_q.__str__())
"
"In Python, how do I iterate over one iterator and then another?","import fileinput
for line in fileinput.input(['file1', 'file2']):
   pass
"
How to access a class field values in its base class?,"class MyBase(object):
    def p(self):
        print [(attr, value) for attr, value in vars(self).items()
            if not callable(value) and not attr.startswith('__')]
"
Python Dictionary Trouble: Grouping by elements in tuple key,"short_data = {}
for key, value in data.items():
    short_key = (key[0], key[1], key[3])
    if short_key in short_data:
        short_data[short_key].extend(value)
    else:
        short_data[short_key] = value
"
Python .readline(),"from sys import argv
script, input_filename = argv

def foo (arg1,arg2,arg3):
    print arg1,arg2,arg3.readline().strip(""\r\n"")

def bar (arg1, arg2, arg3):
    print arg2,arg1,repr(arg3.readline().strip(""\r\n""))

open_input_file=open(input_filename)

foo (""Text1"",1,open_input_file)
foo (""Text2"",2,open_input_file)
bar (""Text3"",3,open_input_file)
bar (""Text4"",""4"",open_input_file)
"
Create lists python,"def makelists(list_count):
    list_of_lists = []
    for _ in range(list_count):
        list_of_lists.append(list())
    return list_of_lists
"
unicode string to PCRE regular expression in python,"import re

def pcre_escape_repl(match):
    char = match.group(0)
    if ord(char) in range(32, 127):
        # if this is a printable ascii character, use re.escape instead of a \x escape
        return re.escape(char)
    # replace non-ascii (or non-printable) characters with a \x escape
    return r'\x{' + hex(ord(char))[2:] + '}'

def pcre_escape(s):
    regex = re.compile('.', re.DOTALL)
    return regex.sub(pcre_escape_repl, s)
"
Python - calculate die rolls and count doubles,"for _ in range(7): 
    # instead of three separate variables, we use a list here
    # the nice thing is, that you can freely vary the number of
    # 'parallel' dice rolls this way 
    dice = [random.randint(1, 6) for _ in range(3)]

    # this is more general and will break as soon as there are
    # duplicate (die) values in the list (meaning, break, if not all elements 
    # are different)
    if len(dice) > len(set(dice)):
        break
"
Handling HTTP Query Parameters,"import urllib.parse

u = ""http://java.dzone.com/articles/python-201-decorators?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+zones%2Fpython+%28Python+Zone%29""
p = urllib.parse.urlparse(u)
q = urllib.parse.parse_qs(p.query)
print(q)
"
Pygame the rectangle is not moving?,"import pygame, sys, time

pygame.init()
red = (255, 0, 0)
gameDisplay = pygame.display.set_mode((800, 600))
pygame.display.set_caption('MyGame')
move_x = 200
move_y = 200


while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                move_x -= 10

            if event.key == pygame.K_RIGHT:
                move_x += 10
        # pygame.Rect.move(10, 10)
    gameDisplay.fill([0,0,0]) # The line added.
    pygame.draw.rect(gameDisplay, red, [move_x, move_y, 10, 10])
    pygame.display.update()
    pygame.display.flip()
"
How do I match contents of an element in XPath (lxml)?,"tree.xpath("".//a[text()='Example']"")[0].tag"
Find which row/sublist a value is in,">>> find = 7
>>> [x[0] for x in enumerate(lst) if find in x[1]]
[2, 4]
"
Average of imported list (python),">>> outerlist = [[""195"", ""106"", ""100"", ""95""]]
>>> total = sum(int(i) for sublist in outerlist for i in sublist)
>>> length = sum(len(sublist) for sublist in outerlist)
>>> total / length
124.0
"
Sharing scope in Python between called and calling functions,"import inspect

def calling_scope_variable(name):
  frame = inspect.stack()[1][0]
  while name not in frame.f_locals:
    frame = frame.f_back
    if frame is None:
      return None
  return frame.f_locals[name]

z = 1

def a():
  z = calling_scope_variable('z')
  z = z * 2
  print z

def b():
  z = calling_scope_variable('z')
  z = z + 1
  print z
  a()
  print z

b()
"
random Decimal in python,decimal.Decimal(random.randrange(10000)) / 100
get all combination of n binary value,"lst = list(itertools.product([0, 1], repeat=n))"
How to execute python tkinter button without clicking mouse,"from Tkinter import *
import tkMessageBox

t = Tk()

def button1_click():
    tkMessageBox.showinfo(""Message"", ""Bang!"")

def button2_click():
    button1.invoke()

button1 = Button(t, text=""Button 1"", command=button1_click)
button1.pack()

button2 = Button(t, text=""Button 2"", command=button2_click)
button2.pack()

mainloop()
"
subset of array in golang,"type Group []*Object

arr := make(Group, 1)
arr[0] = &Object{x: 1}
fmt.Println(arr[0].x)  // prints 1
arr2 := arr.get()
arr[0].x = 3
fmt.Println(arr[0].x)  // prints 3
fmt.Println(arr2[0].x) // prints 3
"
Row wise element search in an array,"np.where(a == v[:,None])[1]
"
readline function returning empty string,"with open(""./testStage1.txt"", 'r') as osrc:
    osrc.seek(291)
    lines = list(osrc)
    #Do whatever you need with your line list
"
Python script to generate report of packet drop,"from collections import defaultdict

d=defaultdict(int,{})
f = open('a.txt', 'r')
for line in f:
     if 'drops' in line:
         data=line.split()
         d[data[1]]=d.setdefault(data[1], 0)+ int(data[3])
f.close()
print d
"
TypeError: findall() takes at least 2 arguments (1 given),"with open('ing words.txt', 'r') as file:
    print pattern.findall(file.read())
    print re.findall(r'>(\w+ing<', file.read())
"
Python regex expression to match pattern in sentences,"In[3]: s = ""This is figure 3a. This is fig 4a . I like (figure 5). This is important (fig 6a).""
In[4]: import re
In[5]: re.findall(r'[^.]*?fig[^.]*\d[^.]*', s)
Out[5]: 
['This is figure 3a',
 ' This is fig 4a ',
 ' I like (figure 5)',
 ' This is important (fig 6a)']
"
Sorting tuples in python using different orders for different fields,"import random
def rand_tuple():
    """""" Return a random 5-tuple """"""
    return tuple( random.random() for _ in range(5) )

#100 random 5-tuples
lst = [ rand_tuple() for _ in range(100) ] 

#sort the list using method 1
sorted_lst = sorted(lst, key = lambda x: (x[2],x[4],-x[0],x[1])) 

#sort the list in place using method 2
lst.sort(key = itemgetter(1))  #<- Rightmost tuple element first!!!
lst.sort(key = itemgetter(0), reversed = True)
lst.sort(key = itemgetter(2,4))

print (lst == sorted_lst) #True -- Results are the same :-)
"
creating a numpy array of arrays while looping (Python),"delta_Array = np.array([0.01,0.02,0.03, 0.04, 0.05, 0.06,0.07, 0.08, 0.09, 0.10])
theta_Matrix = []

for i in range(N):
     t = Ridge(Xtrain, ytrain, .3)
     theta_Matrix.append(t)
theta_Matrix = np.array(theta_Matrix)
"
Find x-digit number in a text using Python,"import re                                             
string = ""hello 123 world 5678 897 word""              
number_length = 3                                     
pattern= r""\D(\d{%d})\D"" % number_length   # \D to avoid matching 567           
print re.findall(pattern, string)
"
"python: convert ""5,4,2,4,1,0"" into [[5, 4], [2, 4], [1, 0]]",">>> zip(*[iter(num_str.split("",""))]*4)
[('5', '4', '2', '4'), ('1', '0', '3', '0'), ('5', '1', '3', '3'), 
('14', '32', '3', '5')]
"
Numeric function for log of sum in Python,"def log_add2(logA, logB):
    if logA < logB:
        return log_add2(logB, logA)
    return numpy.logaddexp(0,logB-logA)+logA
"
python how to search an item in a nested list,[x for x in li if 'ar' in x[2]]
Python - using grid layout to format a window,"import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, master, *args, **kwargs):
        tk.Frame.__init__(self, master, *args, **kwargs)

        self.s1 = tk.Frame(self, background=""pink"", width=200, height=200)
        self.s2 = tk.Frame(self, background=""blue"", width=200, height=200)
        self.s3 = tk.Frame(self, background=""bisque"", width=200, height=200)

        self.s1.grid(row=0, column=0, sticky=""nsew"")
        self.s2.grid(row=0, column=1, sticky=""nsew"")
        self.s3.grid(row=1, column=0, columnspan=2, sticky=""nsew"")

        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        # now create the search section
        self.searchSection(self.s1)

    def searchSection(self, parent):
        l = tk.Label(parent, text=""Search :"", bg='grey')
        self.searchField = tk.Entry(parent)
        self.search = tk.Menubutton(parent, text=""Search"", bg=""grey"")
        self.search.menu = tk.Menu(self.search, tearoff = 0)
        self.search['menu'] = self.search.menu
        self.SearchType1Var = tk.IntVar()
        self.search.menu.add_checkbutton(label=""SearchType1"", 
                                         variable = self.SearchType1Var)

        l.grid(row=0, column=0, columnspan=2, sticky='w')
        self.searchField.grid(row=1, column=0, sticky=""ew"")
        self.search.grid(row=1, column=1, sticky=""ew"")

        parent.grid_columnconfigure(0, weight=1)

if __name__ == ""__main__"":
    root = tk.Tk()
    Example(root).pack(side=""top"", fill=""both"", expand=True)
    root.mainloop()
"
How to filter a Dataframe based on a criteria using .shift(),"result = grouped['Period'].apply(
    lambda x: x.loc[:(x.diff() > 1).argmax()].iloc[:-1])
"
Skewing an array in Python,"a=imread(""sorNB.png"")
h,l=a.shape
dl=50
b=numpy.zeros((h,l+dl),dtype=a.dtype)
for y in range(h):
    dec=(dl*(h-y))//h
    b[y,dec:dec+l]=a[y,:]
"
What's the fastest way to locate a list element within a list in python?,"[index for index, item in enumerate(thelist) if item[0] == '332']"
Is there a more lightweight way to get a tuple of variable length?,"return (value,) + (None,) * (tuple_length - 1)
"
Divide two timespans by eachother in Python/dateutil,"today = datetime.date.today()
start = datetime.date(2007, 1, 31)
period = relativedelta(months=1)

delta = period
while start + delta < today:
    delta += period

next = start + delta
"
Compressing a file in python and keep the grammar exact when opening it again,"import zlib, base64
text = 'STACK OVERFLOW'
code =  base64.b64encode(zlib.compress(text,9))
print code
"
Inverse Match Help in Python,"import re
import sys

pattern = re.compile(r""(is OK)|(file could not be opened)|(is a broken)|(is a block)"")

with open(sys.argv[1]) as handle:
    for line in handle:
        if not pattern.search(line):
            sys.stdout.write(line)
"
Inheriting and modifying __init__() method,"def CRC(bytearray_in):
    '''Calculates a Cyclical Redundancy Checksum (CRC16).'''
    crc = 0xFFFF
    for work_byte in bytearray_in:
        crc ^= work_byte
        n = 0
        while n in range(8):
            if (crc & 0x0001):
                crc >>= 1
                crc ^= 0xA001
            else:
                crc >>= 1
            n += 1
    return crc
"
Substitute values from one pandas data frame to another based on condition,"import pandas as pd
import numpy as np

df_1 = pd.DataFrame({'A': ['-x', '-', '-z'], 'B': [1, 6, 'Unknown'], 'C': [2, 1, 'Missing']})
print (df_1)

df_2 = pd.DataFrame({'A': ['w', 'y', 'y'], 'B': [5, 6, 9], 'C': [2, 1, 8]})
print (df_2)

mask_li = ['Unknown','Missing']    

mask= df_1.copy()
for col in df_1.columns:
    column = mask[col].astype(str)
    mask[col] = (column.str.contains('|'.join(mask_li))) | (column == '-')

print (mask)
       A      B      C
0  False  False  False
1   True  False  False
2  False   True   True

print (df_1.mask(mask, df_2))    
    A  B  C
0  -x  1  2
1   y  6  1
2  -z  9  8
"
Generate random string from regex character set,"import inverse_regex
print(''.join(inverse_regex.ipermute('[a-z]')))
# abcdefghijklmnopqrstuvwxyz
"
Search for string allowing for one mismatch in any location of the string,"def Hamming_check_0_or_1(genome, posn, sequence):
    errors = 0
    for i in xrange(25):
        if genome[posn+i] != sequence[i]:
            errors += 1
            if errors >= 2:
                return errors
    return errors 
"
Add only the first value in my list of arrays,"#Assuming all the sub lists have same length
num_rows = len(l)
num_cols = len(l[0])

sum_l = []

for i in range(0, num_cols):
    cur_sum = 0
    for j in range(0, num_rows):
            cur_sum += l[j][i]

    sum_l.append(cur_sum)

print sum_l
"
Bar Making - Python,"import numpy
def BarGraphify3(nums):
    '''
    >>> BarGraphify3([1,2,3])
      *
     **
    ***
    >>> BarGraphify3([1,3,2])
     * 
     **
    ***
    '''
    grid = []
    maxVal = max(nums)
    for n in nums:
        space = (maxVal-n)*' '
        asterisks = n*'*'
        grid.append(list(space + asterisks))


    cols = []
    for row in numpy.transpose(grid):
        cols.append(''.join(row))
    print '\n'.join(cols)
"
How to store a name and score into a list?,"scores.append(""%s:%s"" % (name, score))
"
(Python) How to edit existing rows in a SQL DB?,"corrected_names = []
for row in cursor.execute('SELECT name FROM company'):
    corrected_names.append(row[0].replace(',', ''))
"
Python dictionary keys to csv file with column match,"import csv
d1 = {'a':1, 'b':2, 'c': 3}
d2 = {'d':4, 'e':5, 'f': 6}

columns = ['a', 'b', 'c', 'd', 'e', 'f']

# combine d1 and d2 into data.. there are other ways but this is easy to understand
data = dict(d1)
data.update(d2)

with open('my_data.csv','wb') as f:
    w = csv.writer(f)
    w.writerow(columns)
    # make a list of values in the order of columns and write them
    w.writerow([data.get(col, None) for col in columns])
"
Using Python's Format Specification Mini-Language to align floats,"for i in range(len(job_IDs)):
    print ""Job {item:15} {value[0]:>6}.{value[1]:<6} {units:3}"".format(item=job_IDs[i]+':', value=memory_used[i].split('.') if '.' in memory_used[i] else (memory_used[i], '0'), units=memory_units[i])
"
Populating a defaultdict at init time,"def defaultdict_factory_factory(default_factory):
    return partial(defaultdict, default_factory)
"
Grab rows between two Datetime and avoid iterating,"time_list = [pd.Timestamp('2015-08-03 19:19:47'),pd.Timestamp('2015-08-03 19:20:00') ]
"
Search a complex data structure in Python,"filter(lambda d: d['hostName'] == hostName, json.loads(data))
"
efficient way of reading integers from file,"def func1():
    my_list = []
    for line in open(""foo.txt"", ""r""):
        for i in line.strip().split(' '):
            if i.isdigit():
                my_list.append(int(i))
    return my_list

def func1_1():
    return [int(i) for line in open(""foo.txt"", ""r"") for i in line.strip().split(' ') if i.isdigit()]

def func1_3():
    my_list = []
    with open(""foo.txt"", ""r"") as f:
        for line in f:
            for i in line.split():
                if i.isdigit():
                    my_list.append(int(i))
    return my_list

def func2():            
    my_list = []            
    for line in open(""foo.txt"", ""r""):
        for i in line.split():
            try:
                my_list.append(int(i))
            except ValueError:
                pass
    return my_list

def func3():
    my_list = []
    with open(""foo.txt"",""r"") as f:
        cf = csv.reader(f, delimiter=' ')
        for row in cf:
            my_list.extend([int(i) for i in row if i.isdigit()])
    return my_list
"
Why isn't the remove() working in python,">>> one = [['red', 'rfg', 'erg', '234', '23423434234', 'F', '2014-01-11'],
['red', 'gertus', 'gengie', '234', '234234234234', 'F', '2014-01-11'],
['red', 'sdf', 'sdf', '23', '234234234234', 'F', '2014-01-11'],
['red', 'rfg', 'erg', '234', '23423434234', 'F', '2014-01-11'],
['red', 'gertus', 'gengie', '234', '234234234234', 'F', '2014-01-11'],
['red', 'sdf', 'sdf', '23', '234234234234', 'F', '2014-01-11']]
>>> [i for i in one if one.count(i) < 2]
[]
"
sqlalchemy - elegant way to deal with several optional filters?,"def get_query_results(*filters):
    res = models.Item.query
    for i, filt in enumerate(filters, 1):
        if filt is not None:
            d = {'filter{}'.format(i): filt}
            res = res.filter(**d)
    return res.all()
"
How to start a batch file from within a python script and detach from it,"import subprocess
subprocess.Popen([""mybatchfile.bat""])
"
Calculation between rows in different dates in pandas,"In [54]:
#changed your first observation to 6:00
print df

                      open    low   high  close  volume  interest
2008-08-05 06:00:00  22.53  22.12  22.53  22.14     186       186
2008-08-05 11:00:00  22.20  22.05  22.11  22.10     584       398
2008-08-05 12:00:00  22.19  22.04  22.08  22.15     848       264
2008-08-05 13:00:00  22.20  22.06  22.13  22.13     928        80
2008-08-05 14:00:00  22.19  22.03  22.13  22.08     988        60
2008-08-05 15:00:00  22.37  21.72  22.20  21.77    1418       430
2008-08-05 16:00:00  21.80  21.47  21.77  21.47    1666       248
2008-08-05 17:00:00  21.50  21.37  21.43  21.40    1865       199

In [55]:

df[np.in1d(df.index.hour, [6, 17])].groupby(pd.TimeGrouper(freq='24h')).close.agg(lambda x: x[-1]-x[0])

Out[55]:

2008-08-05    0.74
Freq: 24H, Name: close, dtype: float64
"
Href values are not being returned,"posts = browser.find_elements_by_css_selector("".Parwrsp.Parwrsp-Ado"")
for post in posts:
    print post.get_attribute('href')
"
Counting day-of-week-hour pairs between two dates,"from calendar import day_abbr
from datetime import datetime, timedelta


def solve(start, end, data):
    days = list(day_abbr)
    output = dict.fromkeys(days, 0)

    while start <= end:
        day = days[start.weekday()]
        if start.hour in data[day]:
            output[day] += 1
        start = start + timedelta(minutes=60)

    return output


data = {
 'Mon': [9, 23],
 'Thu': [12, 13, 14],
 'Tue': [11, 12, 14],
 'Wed': [11, 12, 13, 14],
 'Fri': [13],
 'Sat': [],
 'Sun': [],
}

start = datetime(2015, 7, 22, 17, 58, 54, 746784)
end = datetime(2015, 8, 30, 10, 22, 36, 363912)

print solve(start, end, data)
# {'Wed': 20, 'Sun': 0, 'Fri': 6, 'Tue': 15, 'Mon': 10, 'Thu': 18, 'Sat': 0} 
"
Python get degrees within nodes,"mylist = list(graph.degree().values())

unique_elements_list = list()

# iterates all elements in mylist
for element in mylist:
    # adds to unique elements list only current
    # element is not included.
    if element not in unique_elements_list:
        unique_elements_list.append(element)
"
performance loss after vectorization in numpy,"def new_vec(*args, **kwargs):

    kpt_list, rpt_list, h_r, r_ndegen = setup(*args, **kwargs)

    phase = np.exp(1j * np.dot(rpt_list, kpt_list.T)) / r_ndegen[:, None]
    kpt_data = h_r.reshape(-1, phase.shape[0]).dot(phase)

    return kpt_data.reshape(h_r.shape[:2] + (-1,))
"
How to get frequency of specific character in a list?,">>> 'foo bar spam'.rsplit(None, 1)
['foo bar', 'spam']
"
Rotation of colorbar tick labels in matplotlib,"cbar.ax.set_xticklabels(clevs1[::1],rotation=90)
"
numpy element transformation with lambda?,"a[a < 0] = 0
"
How to Transpose Column Values to Row Values in Python,"In [266]: print('\n'.join(['%s %s'%(i,x) for i,j in zip(ul,ll) for x in j]))
user1 1
user1 2
user1 3
user2 3
user2 4
user2 5
user3 4
user3 2
user3 1
"
Replacing variable with values from a CSV-file in python,"import csv
with open('test.csv') as f:
    fieldnames = ('variable', 'name', 'date', 'location', 'youtube')
    r = csv.DictReader(f, fieldnames)
    next(f, None) # skip header
    rows = []
    for row in r:
        if row['variable'] == 'e1':
            row['name'] = 'My birthday'
        if row['variable'] == 'e2':
            row['location'] = 'India'
        rows.append(row)
    w = csv.DictWriter(a_file, fieldnames)
    w.writerows(rows)
"
Finding consecutive segments in a pandas data frame,"df.reset_index().groupby('A')['index'].apply(lambda x: np.array(x))
"
Python: TemporaryFile returns empty string when read,"f.seek(0, os.SEEK_END)
f.write('some stuff')
"
Creating new object in python is not returning a new object,"class A(object):
    class_var = [] # make a list attached to the A *class*
    def __init__(self):
        self.instance_var = [] # make a list attached to any *instance* of A

print 'class var:', A.class_var # prints []
# print 'instance var:', A.instance_var # This would raise an AttributeError!

print

a = A() # Make an instance of the A class
print 'class var:', a.class_var # prints []
print 'instance var:', a.instance_var # prints []

print

# Now let's modify both variables
a.class_var.append(1)
a.instance_var.append(1)
print 'appended 1 to each list'
print 'class var:', a.class_var # prints [1]
print 'instance var:', a.instance_var # prints [1]

print

# So far so good. Let's make a new object...
b = A()
print 'made new object'
print 'class var:', b.class_var # prints [1], because this is the list bound to the class itself
print 'instance var:', b.instance_var # prints [], because this is the new list bound to the new object, b

print

b.class_var.append(1)
b.instance_var.append(1)
print 'class var:', b.class_var # prints [1, 1]
print 'instance var:', b.instance_var # prints [1]
"
How do I parse with LXML recursively in an elegant way?,"for i in tree.xpath('//div[@class=""class1""]/div/text()'):
    print i
"
"Regex returns text of every line with match, when text is inside variable","output_lines = [i for i in re.split(r'\n', output) if re.search(""Lorem"",i)]
"
Find the nth occurrence of substring in a string,"def findnth(haystack, needle, n):
    parts= haystack.split(needle, n+1)
    if len(parts)<=n+1:
        return -1
    return len(haystack)-len(parts[-1])-len(needle)
"
Subsetting data in python,"col1 = data[:,0]
col2 = data[:,1]

subsets = {}
for val1, val2 in itertools.product(np.unique(col1), np.unique(col2)):
    subset = data[(col1 == val1) & (col2 == val2)]
    if np.any(subset):
        subsets[(val1, val2)] = subset
"
why I'm getting a square instead of a circle in pygame?,"pygame.draw.circle(self.surface, pygame.Color(""black""), 
                           (int(self.surface.get_width()/2),
                            int(self.surface.get_height()/2)), 
                           self.r)
"
How do you split a string into quoted sentence and numbers using python,"nums=[]
words=[]
for e in tgt.split():
    try:
        nums.append(float(e))
    except ValueError:
        words.append(e)

print words,nums       
"
Scanning for two word phrase in Python dictionary,"translation = []

words = sentence.split(' ')
maxlen = 3
index = 0

while index < len(words):
    for i in range(maxlen, 0, -1):
        phrase = ' '.join(words[index:index+i])
        if phrase in myDict:
            translation.append(myDict[phrase])
            index += i
            break
    else:
        translation.append(words[index])
        index += 1

print ' '.join(translation)
"
PyQt4 Spell Check with syntax highlighter,"from PyQt4 import QtGui
from enchant.checker import SpellChecker
import re
import sys

class Main(QtGui.QMainWindow):

    def __init__(self, parent = None):
        QtGui.QMainWindow.__init__(self,parent)
        self.initUI()

    def initToolbar(self):
        self.spellcheckAction = QtGui.QAction(QtGui.QIcon(""icons/logo.png""),""Spellcheck"",self)
        self.spellcheckAction.setStatusTip(""Spell Check document"")
        self.spellcheckAction.setShortcut(""Ctrl+S"")
        self.spellcheckAction.triggered.connect(self.spellcheckHandler)
        self.toolbar = self.addToolBar(""Options"")
        self.toolbar.addAction(self.spellcheckAction)

    def initUI(self):
        self.text = QtGui.QTextEdit(self)
        self.initToolbar()
        self.text.setTabStopWidth(33)
        self.setCentralWidget(self.text)
        self.setGeometry(100,100,1030,800)
        self.setWindowTitle(""Writer"")
        self.setWindowIcon(QtGui.QIcon(""icons/icon.png""))

    def spellcheckHandler(self):
        chkr = SpellChecker(""en_US"")
        s = str(self.text.toPlainText())
        chkr.set_text(s)
        for err in chkr:
            self.replaceAll(err.word)

    def find(self, query):
        text = self.text.toPlainText()
        query = r'\b' + query + r'\b'
        flags = 0 
        pattern = re.compile(query,flags)
        start = self.lastMatch.start() + 1 if self.lastMatch else 0
        self.lastMatch = pattern.search(text,start)
        if self.lastMatch:
            start = self.lastMatch.start()
            end = self.lastMatch.end()
            self.moveCursor(start,end)
        else:
            self.text.moveCursor(QtGui.QTextCursor.End)

    def replace(self):
        cursor = self.text.textCursor()
        if self.lastMatch and cursor.hasSelection():
            self.text.setTextBackgroundColor(QtGui.QColor(0,255,0))
            self.text.setTextCursor(cursor)

    def replaceAll(self, query):
        self.lastMatch = None
        self.find(query)
        while self.lastMatch:
            self.replace()
            self.find(query)

    def moveCursor(self,start,end):
        cursor = self.text.textCursor()
        cursor.setPosition(start)
        cursor.movePosition(QtGui.QTextCursor.Right,QtGui.QTextCursor.KeepAnchor,end - start)
        self.text.setTextCursor(cursor)

def main():
    app = QtGui.QApplication(sys.argv)
    main = Main()
    main.show()
    sys.exit(app.exec_())

if __name__ == ""__main__"":
    main()
"
Python for loop to read csv using pandas,"import pandas
collection=['1.csv','2.csv','3.csv','4.csv']

result = pandas.create_empty() # not sure how to do this
for i in collection:
  csv = pandas.read_csv(i)
  result = result.merge(csv, on='field1')

result.to_csv('output2.csv',index=False)
"
Python: Write dictionary to text file with ordered columns,"import pandas as pd

order=['mix', 'meow']
D = {'foo':{'meow':1.23,'mix':2.34}, 'bar':{'meow':4.56, 'mix':None}, 'baz':{'meow':None,'mix':None}}

df = pd.DataFrame(D).T.reindex(columns=order)

df.to_csv('./foo.txt', sep='\t', na_rep=""none"")
"
How to validate image format in django ImageField,"class DmitryImageField(ImageField):

    def to_python(self, data):
        f = super(DmitryImageField, self).to_python(data)
        if f is None:
            return None

        try:
            from PIL import Image
        except ImportError:
            import Image

        # We need to get a file object for PIL. We might have a path or we might
        # have to read the data into memory.
        if hasattr(data, 'temporary_file_path'):
            file = data.temporary_file_path()
        else:
            if hasattr(data, 'read'):
                file = BytesIO(data.read())
            else:
                file = BytesIO(data['content'])

        try:
            im = Image.open(file)
            if im.format not in ('BMP', 'PNG', 'JPEG'):
                raise ValidationError(""Unsupport image type. Please upload bmp, png or jpeg"")
        except ImportError:
            # Under PyPy, it is possible to import PIL. However, the underlying
            # _imaging C module isn't available, so an ImportError will be
            # raised. Catch and re-raise.
            raise
        except Exception: # Python Imaging Library doesn't recognize it as an image
            raise ValidationError(self.error_messages['invalid_image'])

        if hasattr(f, 'seek') and callable(f.seek):
            f.seek(0)
        return f
"
Naming dimensions in python?,"axes = { 'DA': 0, 'DB':1 }
a.sum(axes['DA'])
"
POST requests to ASP site don't bring a good result,"headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}
r = requests.post(url, data=json.dumps(data), headers=headers)
"
Python: Data Structure for Maintaing Tabular Data in Memory?,"lod = [ ] # ""list of dicts""

def populate_lod(lod, csv_fp):
    rdr = csv.DictReader(csv_fp, ['Row', 'Name', 'Year', 'Priority'])
    lod.extend(rdr)

def query_lod(lod, filter=None, sort_keys=None):
    if filter is not None:
        lod = (r for r in lod if filter(r))
    if sort_keys is not None:
        lod = sorted(lod, key=lambda r:[r[k] for k in sort_keys])
    else:
        lod = list(lod)
    return lod

def lookup_lod(lod, **kw):
    for row in lod:
        for k,v in kw.iteritems():
            if row[k] != str(v): break
        else:
            return row
    return None
"
Can I put a tuple into an array in python?,">>> list_of_lists = [[1, 2], [3, 4]]
>>> list_of_lists
[[1, 2], [3, 4]]
"
Python regex - conditional matching?,">>> s = '3x3+6x2+2x1+8x0'
>>> re.findall(r'\d+(?=x)', s)
['3', '6', '2', '8']
"
Replace generic string with something else in python,"import re

def change_string(string, replacement):
    def repl(match):
        o, c = match.group('open'), match.group('close')
        if o + c in ('..', ""''"", '()'):
            return '{}{}{}'.format(o, replacement, c)
        return match.group(0)
    return re.sub(r""(?P<open>['.(]).*?(?P<close>['.)])"", repl, string)
"
How to store and print a list of numbers in matrix form(python),"for row in array:
    print(row)
"
Python large multi-list efficient query,"import csv
from itertools import islice,ifilter
from collections import OrderedDict

MAINDIR = ""../""
with  open(MAINDIR + ""atp_players.csv"") as pf,  open(MAINDIR + ""atp_rankings_current.csv"") as rf:
    players = OrderedDict((row[0],row) for row in csv.reader(pf))
    rankings = csv.reader(rf)
    for i in islice(rankings, None, 10):
        # now constant work getting row as opposed to 0(n)    
        player = players.get(i[2])
"
Listing all combinations of a list up to length n (Python),"from itertools import combinations

x = ['a','b','c','d','e']
c = []
n = 2

for i in range(n):
    c.extend(combinations(x, i + 1))

print(c)
"
"Discuss the ""sorted"" function in Python",">>> a = [('hello', 1, 2), ['foo', 5, 3], {0: 'bar', 1: 'baz'}]
>>> sorted(a)
[{0: 'bar', 1: 'baz'}, ['foo', 5, 3], ('hello', 1, 2)]
>>> sorted(a, key=lambda x: x[1])
[('hello', 1, 2), ['foo', 5, 3], {0: 'bar', 1: 'baz'}]
>>> b = ['hello', 1, 3]
>>> sorted(b)
[1, 3, 'hello']
"
Python how to use Counter on objects according to attributes,"from collections import Counter
from operator import attrgetter

class Record(object):
    def __init__(self, **kwargs):
        for key, value in kwargs.iteritems():
             setattr(self, key, value)

records = [Record(uid='001', url='www.google.com', status=200),
           Record(uid='002', url='www.google.com', status=404),
           Record(uid='339', url='www.ciq.com',    status=200)]

def count_attr(attr, records):
    """""" Returns Counter keyed by unique values of attr in records sequence. """"""
    get_attr_from = attrgetter(attr)
    return Counter(get_attr_from(r) for r in records)

for attr in ('status', 'url'):
    print('{!r:>8}: {}'.format(attr, count_attr(attr, records)))
"
How to get all substrings in a list of characters (python),">>> temp = ['h', 'e', 'l', 'l', 'o', '#', 'w', 'o', 'r', 'l', 'd']
>>> """".join(temp).split('#')
['hello', 'world']
"
Printing list with set width in python,"newlist = []
for i in range(len(mylist)/size_x):
    newlist.append(''.join(mylist[i*size_x:(i+1)*size_x]))
"
Extract characters from string after last period,">>> [(i,j.__name__) for i,j in l]
[('A', 'percentile_50'), ('B', 'sum'), ('C', 'sum'), ('D', 'mean')]
"
Android turn 3 sequence byte[] to int[],"int rgbInt = byteArray[0] << 16 + byteArray[1] << 8 + byteArray[2];    
// not sure these are in the correct order, you may have to swap the indexes around. 
"
running data parser on multiple files in folder? Python,"import re
import os
import glob
import pprint

os.chdir(""resumes"")
for file in glob.glob(""*.txt""):
    with open(file, 'r') as f:
        #Rest of your execution code here
"
"Using matplotlib, how do I whiten the background of the axis label?","ax.spines['left'].set_zorder(2)
"
Unifying different 2d array layouts in python,"np.asarray([[[x1,x2,x3...],[y1,y2,y3...]]) == np.asarray([(x1,y1),(x2,y2),(x3,y3)...]).T
"
python - replace value of unknown key in json,"def cleanup(dirty_data):
    if isinstance(dirty_data, dict):
        for key in dirty_data:
            value = dirty_data[key]
            dirty_data[key] = cleanup(value)
        return dirty_data
    elif isinstance(dirty_data, str) or isinstance(dirty_data, unicode):
        if dirty_data in [""nan"", ""inf"", ""-inf""]:
            return float(dirty_data)
    else:
        return dirty_data

test_object = {""test"": 123, ""a"": {""b"": ""nan""}}

print(cleanup(test_object))
"
Trace an arbitrary Python command issued in PDB?,"pdb.runeval(""[myfunc(x) for x in range(3)]"", globals(), locals())
# or with ... some_module.globals())
"
Python: Getting baseclass values from derived class,"class myParent( object ):
    def __init__( self, customParam ):
        self.parentNumber = 5
        self.customParam = customParam

class Child( myParent ):
    def __init__( self, customParam ):
        myParent.__init__( self, customParam )
        self.childNumber = 4"
Merging 2d arrays,"arrayResult = []
for name in combined:
  arrayResult.append([ name ] + combined[name])
"
Hook python module function,"import whatever
import functools

def prefix_function(function, prefunction):
    @functools.wraps(function)
    def run(*args, **kwargs):
        prefunction(*args, **kwargs)
        return function(*args, **kwargs)
    return run

def this_is_a_function(parameter):
    pass # Your own code here that will be run before

whatever.this_is_a_function = prefix_function(
    whatever.this_is_a_function, this_is_a_function)
"
Phonebook dictionary,"print next((item for item in phonebook if item[""name""].lower() == name.lower()),""Does not exist"")
"
Python Regular Expressions re.findall -- split a string into two,">>> map(str.strip, s.split('-'))
['C BOS', 'Traded from Royal Disappointments']
"
Numpy: split array randomly,"In [212]: a
Out[212]: 
array([[5, 8, 4],
       [7, 7, 6],
       [3, 2, 7],
       [1, 4, 8],
       [4, 1, 0],
       [2, 1, 3],
       [6, 5, 2],
       [2, 4, 5],
       [6, 6, 5],
       [5, 2, 5]])

In [213]: a1,a2,a3 = np.vsplit(a[np.random.permutation(a.shape[0])],(6,8))

In [214]: a1
Out[214]: 
array([[1, 4, 8],
       [7, 7, 6],
       [6, 6, 5],
       [2, 4, 5],
       [4, 1, 0],
       [5, 2, 5]])

In [215]: a2
Out[215]: 
array([[3, 2, 7],
       [2, 1, 3]])

In [216]: a3
Out[216]: 
array([[6, 5, 2],
       [5, 8, 4]])
"
Increment a variable based on another variable,">>> score = bonus = 0
>>> score+=5
>>> bonus = score/5
>>> bonus
1
>>> score+=5
>>> score+=5
>>> score+=5
>>> score+=5
>>> score
25
>>> bonus = score/5
>>> bonus
5
>>> 
"
sum a list of numbers in Python,sum(list_of_nums)
How to normalize Python string encodings,"import codecs
import urllib

fname = 'input.txt'

with open(fname, 'rb') as f:
    for line in f:
        line = line.strip()
        line = urllib.unquote(line)
        if r'\x' in line:
            line = codecs.unicode_escape_decode(line)[0]
            line = line.encode('latin1')

        line = line.decode('utf-8')
        print repr(line), line
"
Drop row and column of a dataframe that contains the non-zero minimum,"mask = ~(df ==1).any()
In [29]: df.loc[mask, mask]
Out[29]: 
    B   D   E
B  0   4   8
D  4   0  11
E  8  11   0
"
find folders in a tree and create a list with their paths,"final_list = [os.path.join(root,dir) for
    root,dirs,files in os.walk(""path/to/tree"") for
    dir in dirs if dir==""arc""]
"
"Python Continue inside nested loops, getting to the right level of the nesting","while True:
    message = stomp.get
    message = simplejson.loads(message.body)

    # If the message doesn't match this criterion,
    # we need to abort everything.
    if not message[0]['fieldname1']:
        global ShutdownState
        ShutdownState = True
        break

    try:
        # get the first item in message[0]['fieldname2'][0]['fieldname2-1']
        # such item['fieldname2-1-1'] is true.  Whether we
        # find one and do this code, or don't and catch the
        # StopIteration, we wrap back to the while loop.
        item = next(x
                    for x in message[0]['fieldname2'][0]['fieldname2-1']
                    if item['fieldname2-1-1'])
        list1_new[len(list_new),:] = item['fieldname2-1-2']
        list1_state = (set(list1) == set(list1_new))

        if not list1_state:
            list1 = list1_new # should print the new list1 and then reset the while loop
            print list1
    except StopIteration:
        # There was no such item.
        pass
"
Python Text Matrix using NumPy and pandas,"In [1]: import pandas as pd

In [2]: tables = pd.read_html('http://www.fdic.gov/bank/individual/failed/banklist.html')
"
How to extract data in one array according to the values in another array in Python,"answer = []
for r,row in zip(b,a):
    big = max(enumerate(row), key=operator.itemgetter(1))
    answer.append(r[big[0]])
"
Return the column name(s) for a specific value in a pandas dataframe,"df.ix[:, (df.loc[0] == 38.15)].columns"
How to preallocate a list of lists?,"zeroMatrix = [[0] * Np for i in range(Np)]
"
Python - __str__ returning elements of a list,"class Player(object):
    # has self.hand

    def __str__(self):
        return ""Player's Cards %s (Total %d)"" % (
            "","".join(str(card) for card in self.hand),
                     self.__sum_of_hand()
        )
"
Using Python libraries to plot two horizontal bar charts sharing same y axis,"import numpy as np
import matplotlib.pyplot as plt

# Data
states = [""AK"", ""TX"", ""CA"", ""MT"", ""NM"", ""AZ"", ""NV"", ""CO"", ""OR"", ""WY"", ""MI"",
          ""MN"", ""UT"", ""ID"", ""KS"", ""NE"", ""SD"", ""WA"", ""ND"", ""OK""]
staff = np.array([20, 30, 40, 10, 15, 35, 18, 25, 22, 7, 12, 22, 3, 4, 5, 8,
                  14, 28, 24, 32])
sales = staff * (20 + 10 * np.random.random(staff.size))

# Sort by number of sales staff
idx = staff.argsort()
states, staff, sales = [np.take(x, idx) for x in [states, staff, sales]]

y = np.arange(sales.size)

fig, axes = plt.subplots(ncols=2, sharey=True)
axes[0].barh(y, staff, align='center', color='gray', zorder=10)
axes[0].set(title='Number of sales staff')
axes[1].barh(y, sales, align='center', color='gray', zorder=10)
axes[1].set(title='Sales (x $1000)')

axes[0].invert_xaxis()
axes[0].set(yticks=y, yticklabels=states)
axes[0].yaxis.tick_right()

for ax in axes.flat:
    ax.margins(0.03)
    ax.grid(True)

fig.tight_layout()
fig.subplots_adjust(wspace=0.09)
plt.show()
"
Looking for a Python shorthand way of parsing a url encoded string into tuples,">>> import urlparse
>>> urlparse.parse_qs('rssi=199&phase=-1&doppler=-1')
{'phase': ['-1'], 'rssi': ['199'], 'doppler': ['-1']}
"
List in a list recognition in python,"def list_print(lst): # PEP-8 function name
    """"""Print the list, including sub-lists, item by item."""""" # docstring
    for index, item in enumerate(lst): # use enumerate to get item and index
        print ""List member {0}: "".format(index) # use str.format to create output
        print repr(item) # repr gives e.g. quotes around strings
        if isinstance(item, list):
            print ""and the members are:""
            for subitem in item: # iterate directly over list
                print repr(subitem)
        print """" # blank line between items
"
Python regex alternative for join,"re.sub('(?<=.)(?=.)', '-', str)"
Largest product in a series in python,"from operator import mul
from collections import deque
from copy import copy

def cal_max_prod(container, current_product):
    max_container = {'seq': copy(container), 'prod': current_product}
    for i in digits[13:]:
        popped_item = int(container.popleft())
        container.append(i)
        try:
            push_item = int(i)
            current_product = (current_product / popped_item) * push_item
        except ZeroDivisionError:
            if '0' not in container:
                current_product = reduce(mul, map(int, container))
        else:
            if current_product > max_container['prod']:
                max_container['prod'] = current_product
                max_container['seq'] = copy(container)

    return ''.join(max_container['seq'])
"
Quickest way to dedupe list in dict,"goodbye = {}
for key, value in hello.items(): goodbye[key] = set(value)
>>> goodbye
{'test1': set([2, 3, 4, 5, 6]), 'test2': set([8, 9, 3, 4, 5])}
"
Is it possible to iterate over a list and skip certain elements?,"class ListElement:
    def __init__(self, name, value):
        self.name = name
        self.value = value

    def __repr__(self):
        return self.name + ""="" + self.value.__str__()

class ChainElement:
    def __init__(self, prev, listElement):
        self.prev = prev
        self.listElement = listElement
        if prev:
            self.value = listElement.value + prev.value
        else:
            self.value = listElement.value

    def __repr__(self):
        if self.prev:
            return self.prev.__repr__() + "","" + self.listElement.__repr__()
        else:
            return self.listElement.__repr__()

    def removeAllFrom(self, list):
        list.remove(self.listElement)
        if self.prev:
            self.prev.removeAllFrom(list)

list = []
list.append(ListElement(""x"", 20))
list.append(ListElement(""y"", 25))
list.append(ListElement(""z"", 10))
list.append(ListElement(""m"", 15))
list.append(ListElement(""n"",  8))
list.append(ListElement(""p"", 22))

def find_chain():
    chains = [ChainElement(None, list[0])]

    for le in list[1:]:
        new_chains = []
        for ce in chains:
            new_chain = ChainElement(ce, le)
            if new_chain.value == 50:
                return new_chain
            elif new_chain.value < 50:
                new_chains.append(new_chain)
        chains.extend(new_chains);
    return None

while list:
    tuple = find_chain()
    if tuple:
        print ""Found:"", tuple
        tuple.removeAllFrom(list)
    else:
        print
        print ""Residue:"", list
        break
"
What is the fastest way to initialize an integer array in python?,"# slower.
twosArr = array.array('i', [2] * 1000000)

# faster.
twosArr = array.array('i', [2]) * 1000000
"
How to dynamically update a plot in a loop?,"import pandas as pd
import matplotlib.pyplot as plt

result = [{0: 21, 1: 7, 2: 67, 3: 12, 4: 15, 5: 7, 6: 54, 7: 49, 8: 50, 9: 31,
           10: 6, 11: 2, 12: 8, 13: 2, 14: 2, 15: 1, 16: 35, 17: 2, 18: 1, 19:
           4, 20: 2, 21: 4, 22: 3, 23: 1, 24: 1, 25: 1, 26: 1, 27: 1, 28: 1, 
           29: 1}, 
          {0: 2, 1: 5, 2: 2, 3: 3, 4: 1, 5: 2, 6: 3, 7: 2, 8: 1, 9: 1, 10: 1,
           11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1}]

df = pd.DataFrame([(level,val) for level, dct in enumerate(result) 
                   for val in dct.values()],
                  columns=['level', 'size'])
groups = df.groupby(['level'])
fig, ax = plt.subplots()
for level, grp in groups:
    size_count = grp['size'].value_counts()
    ax.plot(size_count.index, size_count, markersize=12, marker='o', 
            linestyle='', label='level {}'.format(level))
ax.legend(loc='best', numpoints=1)
ax.set_xlabel('community size')
ax.set_ylabel('number of communities')
ax.grid(True)
plt.show()
"
Run parts of a ipython notebook in a loop / with different input parameter,"import itertools
# parameters
P_peak_all = [100, 200]
idle_ratio_all = [0., 0.3, 0.6]
# iterate through these parameters and call the notebook's logic
for P_peak, idle_ratio in itertools.product(P_peak_all, idle_ratio_all):
    print(P_peak, idle_ratio, P_peak*idle_ratio)
    print('========================')
    m_synth, m_synth_ns = build_synth_measurement(P_peak, idle_ratio)
    compare_measurements(m_synth, m_synth_ns, ""Peak pauser"", ""No scheduler"", file_note=""-%d-%d"" % (P_peak, int(idle_ratio*100)))
"
Only letters function,"import string
def all_letters(s):
    final = """"
    for char in s:
        if char in string.ascii_letters:
            final += char
    return final
In [78]: all_letters(""Hell4208o@World.com"")
Out[78]: 'HelloWorldcom'
"
An idiomatic way to construct a tree in python from a list of locations / namespaces?,"def insert(path, data, node):
    if len(path) == 0:
        node[""data""] = data
        return
    for child in node[""children""]:
        if child[""name""] == path[0]:
            insert(path[1:], data, child)
            return
    child = make_node()
    child[""name""] = path[0]
    node[""children""].append(child)
    insert(path[1:], data, child)

tree = make_node()
tree[""name""] = ""root""
for path, data in from_this:
    insert(path.split(path_sep), data, tree)
pprint.pprint(tree)
"
How to create a matrix with values as dictionaries in python,"T = [[{""first"":None,""second"":None}]*4 for x in range(4)]
"
Python: Scrape Data from Web after Inputing Info,"from lxml import html
import requests

def historic_quotes(symbol, stMonth, stDate, stYear, enMonth, enDate, enYear):
    url = 'https://finance.yahoo.com/q/hp?s=%s+Historical+Prices' % symbol

    params = {
        'a': stMonth,
        'b': stDate,
        'c': stYear,
        'd': enMonth,
        'e': enDate,
        'f': enYear,
        'submit': 'submit',
    }
    response = requests.get(url, params=params)

    tree = html.document_fromstring(response.content)
    for amount in tree.xpath('//table[@class=""yfnc_datamodoutline1""]//tr[td[@class=""yfnc_tabledata1""]]//td[5]/text()'):
        print amount

historic_quotes('baba', '00', '11', '2010', '00', '11', '2015')
"
How to detect double-byte numbers,">>> import re
>>> s = u""２34""
>>> digit = re.compile(r""\d"", re.U)
>>> for d in re.findall(digit, s):
...     print d,
... 
２ 3 4
>>> wdigit = re.compile(u""[０-９]+"")
>>> for wd in re.findall(wdigit, s):
...     print wd,
... 
２
"
generating a grid in a function,"res=[[0]*nodes for i in range(nodes)]
"
Python: Formatting a merged txt file,"with open('data.txt') as f1,open('data1.txt') as f2,open('sudentlist.txt') as f3:

    line=f1.readline().strip()             #read the first line of names file 
    names=map(str.strip,line.split(','))   #split the line by "","" and then apply strip()

    line=f2.readline().strip()             #read the first line of ID file 
    ids=map(str.strip,line.split(','))     #split the line by "","" and then apply strip()

    f3.write(""{0:25}{1}\m"".format(""Student_Name"",""Student_Id""))

    for name,i in zip(names,ids):          #use zip() to fetch data from both lists
        f3.write(""{0:25}|{1}\n"".format(name,i)) #use write() instead of print to write it to a file
"
Unpythonic way of printing variables in Python?,"# dict must be passed by reference to .format()
print(""{foo}, {bar}, {baz}"").format(**locals()) 
"
Conditional Statement in python,"if condition1:
    if condition2:
       if condition3:
           statement
       else:
           statement
    elif condition4:
       if condition5:
           statement
       else:
           statement
"
I want all PDF or DOCs to come first in the output,"import os, sys, re

pdf_list = []
doc_list = []

pdf = re.compile(r'.*Shandeep.*\.pdf')
doc = re.compile(r'.*Shandeep.*\.doc')

for r, d, f in os.walk(r'/Users/shandeepkm/Desktop/Networking materials'):
    for items1 in f:
        match1 = re.findall(pdf, items1)
        match2 = re.findall(doc, items1)
        if match1:
            pdf_list.append(match1)
        if match2:
           doc_list.append(match2)
"
How should I replace parts from a text file through Python?,"def replace_in_file(filename, oldtext, newtext):
    with open(filename, 'r+') as file:
        lines = file.read()
        new_lines = lines.replace(oldtext, newtext)
        file.seek(0)
        file.write(new_lines)
"
How to work with duplicate entries in Pandas Data Frame?,"data = {
    'ID': ['A2035559', 'A20340619', 'A2035559', 'A20340619'],
    'FIRST_NAME': ['Sometsdf', 'Nsdsjes', 'Sometsdf', 'Nsdsjes'],
    'FIRST_SUBJECT': ['SCIENCE', 'MATHS', 'ENGINEERING', 'SCIENCE'],
    'SECOND_SUBJECT': [None, None, None, None]
}

d = pandas.DataFrame(data=data, columns=['ID', 'FIRST_NAME', 'FIRST_SUBJECT', 'SECOND_SUBJECT'])

dup_first = d.drop_duplicates(subset=['ID'], take_last=True)
dup_last = d.drop_duplicates(subset=['ID'], take_last=False)

for row in dup_last['ID']:
    dup_first.loc[dup_first['ID'] == row, 'SECOND_SUBJECT'] = dup_last.loc[dup_last['ID'] == row, 'FIRST_SUBJECT'].values[0]

dup_first
"
Preventing Shell Injection on Windows,"import shlex
if 'win' in system:
    safe_arg='""%s""'%foo
    assert len(shlex.split(safe_arg)) == 1, ""Injection attempt detected""
    cmd = 'echo %s | CLIP' % (safe_arg,)
"
Pythonic way for checking if value exists in dictionary of dictionaries and taking corresponding actions,"if somestring in d[key]:
    d[key][somestring] += 1
else:
    d[key][somestring] = 1
"
how to change the type of items in the list?,"li = map(int, li)
"
Python Remove Parts of string by index,"mystr = mystr[:mystr.find('""') + 1]
"
"case-insensitive list sorting, without lowercasing the result?","sorted(lst, key=lambda s: s.lower())
"
Generate 2 Unique but random Elements in a List,"class CharacterRange(object):
    def __init__(self, chars, size):
        self.chars, self.size = chars, size

    def __len__(self):
        return len(self.chars) ** self.size

    def __getitem__(self, item):
        if item < 0:
            item = len(self) + item
        if not 0 <= item <= len(self):
            raise IndexError('Index out of range')

        result = []
        for i in range(self.size):
            item, index = divmod(item, len(self.chars))
            result.append(self.chars[index])
        return ''.join(result[::-1])
"
Relationship between objects and classes in Python 3,"class A(type):
    pass
class B(type, metaclass=A):
    pass
class C(metaclass=B):
    pass
c = C()

type(c)     --> C
type(C)     --> B
type(B)     --> A
type(A)     --> type
type(type)  --> type
"
How to prevent infinite looping in Python while parsing with lxml?,">>> [y.strip() for y in x.xpath('//dfn[.=""B""]/..//text()') if y.strip()]
[['B', 'sometext', 'othertext', 'someothertext', 'blabla', 'bubu']]
"
"How to import files from specific directory, not using os.path in Python","from glob import glob

pattern = ""D:\\report\\shakeall\\*.txt""
filelist = glob(pattern)
"
Python Split String,"s.split(':', 1)[1]"
How to make a Tkinter label update?,"from tkinter import *

win=Tk()

x = IntVar()
x.set(1)
def add():
    x.set(x.get()+1)

f = Frame(win)
b1 = Button(f,text=""One"")
b2 = Button(f,text=""Two"")
b3 = Button(f,text=""Three"")
b4 = Button(f,text=""Four"")
l = Label(win, textvariable=x)
b1.grid(row=0, column=0)
b2.grid(row=0, column=1)
b3.grid(row=0, column=2)
l.pack()
f.pack()
b1.configure(command=add)
win.mainloop()
"
"Python, PySide sleep without stalling the whole program?","def testSleep(self):
    self.lineEdit.setText('Start')
    QtCore.QTimer.singleShot(10000, lambda: self.Box.append(""Text2"")) 
    QtCore.QTimer.singleShot(10000,lambda: self.timerEvent)


def timerEvent(self):
    QtCore.QTimer.singleShot(10000, lambda: self.Box.append(""Text3""))
"
Impute categorical missing values in scikit-learn,"import pandas as pd
import numpy as np

from sklearn.base import TransformerMixin

class DataFrameImputer(TransformerMixin):

    def __init__(self):
        """"""Impute missing values.

        Columns of dtype object are imputed with the most frequent value 
        in column.

        Columns of other types are imputed with mean of column.

        """"""
    def fit(self, X, y=None):

        self.fill = pd.Series([X[c].value_counts().index[0]
            if X[c].dtype == np.dtype('O') else X[c].mean() for c in X],
            index=X.columns)

        return self

    def transform(self, X, y=None):
        return X.fillna(self.fill)

data = [
    ['a', 1, 2],
    ['b', 1, 1],
    ['b', 2, 2],
    [np.nan, np.nan, np.nan]
]

X = pd.DataFrame(data)
xt = DataFrameImputer().fit_transform(X)

print('before...')
print(X)
print('after...')
print(xt)
"
How would I access variables from one class to another?,"class ClassA(object):
    def __init__(self):
        self.var1 = 1
        self.var2 = 2

    def methodA(self):
        self.var1 = self.var1 + self.var2
        return self.var1



class ClassB(ClassA):
    def __init__(self, class_a):
        self.var1 = class_a.var1
        self.var2 = class_a.var2

object1 = ClassA()
sum = object1.methodA()
object2 = ClassB(object1)
print sum
"
Converting Specified Elements of a NumPy Array by a New Value,">>> B[np.in1d(B, bads).reshape(3, 3)] = 0
>>> B
array([[0, 0, 2],
       [3, 4, 0],
       [6, 7, 0]])
"
How to remove a list value from a dictionary?,">>> myDict =  {0: [0, 1, 2], 1: [], 2: [20, 25, 26, 28, 31, 34], 3: [], 4: [0, 1, 2, 3, 4, 7, 10], 5: [], 6: [10, 20, 24]}
>>> for item in tuple(myDict):
...     if myDict[item] == []:
...         del myDict[item]
...
>>> myDict
{0: [0, 1, 2], 2: [20, 25, 26, 28, 31, 34], 4: [0, 1, 2, 3, 4, 7, 10], 6: [10, 20, 24]}
"
Add string between tabs and text,"re.sub(r'^(\t*)', r'\1 Added String here. ', inputtext)
"
Assignment in map method of multiprocessing module (Python),"import numpy as np
from multiprocessing import Pool

def I(v):
    return v

if __name__ == ""__main__"":  # this boilerplate is required on on Windows
    x = np.random.random(100)
    y = np.random.random(100)

    pool = Pool()
    y[:] = pool.map(I, x)

    print(x == y) # [True, True, True, ...]
"
Removing an item from list matching a substring - Python,[x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]
extract item from list of dictionaries,[d for d in a if d['name'] == 'pluto']
python sort dictionary by key and list by another key,"used_names = set()
final_result = []
for k, g in itertools.groupby(query_result, key=lambda x: x['item']):
    final_result.append(sorted(g, key=lambda item: item['endtime'], reverse=True)[0])
"
How to compress a data frame within a range?,"df['approx'] = df['Price'].round(2)
df.groupby('approx')['Volume'].sum()
"
How to create range of numbers in Python like in MATLAB,"print(np.linspace(1, 3, num=5))"
Get sums of pairs of elements in a numpy array,"In [10]: t + np.roll(t,-1)
Out[10]: array([ 9,  5,  7,  8,  7, 14, 11,  5, 11, 13])
"
Extract first date from string in a data frame,"print df[""date""].str.extract(r""(\d{4}-\d{2}-\d{2})"")
"
Adding two tuples elementwise,"from itertools import starmap, islice, izip

a = [1, 2, 3]
b = [3, 4, 5]
w = [0.5, 1.5] # weights => a*0.5 + b*1.5

products = [m for m in starmap(lambda i,j:i*j, [y for x in zip(a,b) for y in zip(x,w)])]

sums = [sum(x) for x in izip(*[islice(products, i, None, 2) for i in range(2)])]

print sums # should be [5.0, 7.0, 9.0]
"
How I can get rid of None values in dictionary?,"res = {k: v for k, v in list(kwargs.items()) if v is not None}"
How to check if an attribute has default value defined in __init__,"class Foo:

    def __init__(self):
        self._x_was_modified = False
        self._x = None

    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        self._x_was_modified = True
        self._x = value

foo = Foo()
print('x was modified by user: {}'.format(foo._x_was_modified))
foo.x = 42
print('x was modified by user: {}'.format(foo._x_was_modified))
"
Django detect dominant color of an image,"
Let's assume a skeleton similar to below
class Article(Model):
    background_color = CharField(max_length=6) # hex code of color

class AricleImage(Model):
    article = ForeignKey(Article)
    image = ImageField()

    def get_dominant_color(self):
         return _get_dominant_color(self.image.open())
         # or pass self.image.file, depending on your storage backend
         # We'll implement _get_dominant_color() below later

    def set_article_background_color(self):
         self.article.background_color = self.get_dominant_color()
"
Python generating prime numbers using Set Comprehension,"prime = {x for x in range(2, 100) if not any(x % y == 0 for y in range(2, x))}
"
Why use isinstance() instead of type()?,">>> isinstance(a, A)
True
>>> type(a) == A
True
"
How can I limit iterations of a loop in Python?,"for element in islice(items, 0, limit):
    ...
"
Python values of multiple lists in one list comprehension,"[func(a, d, ...) for a, b, ..., n in zip(iterable1, iterable2, ..., iterableN)]
"
"python for loop, how to find next value(object)?","import itertools as it

items = it.izip(it.islice(entries, 1, None), entries)
for current, last in items:
    diff = current - last
"
"If term in file 1 is in line of file 2, write the whole line in file 2 to file 3","with open (file1, 'r') as f: ids = [line.strip () for line in f]
with open (file2, 'r') as f:
    with open (file3, 'w') as g:
        for line in f:
            if any (line.startswith (id) for id in ids): g.write (line)
"
access to top level widget in Tkinter,"command=lambda: f(params)
"
python - access list element by key,"data = dict((x['name'], x) for x in original_data)
"
Python - Addings nulls,">>> l = [(9, 0), (10, 0), (11, 0), (12, 0)]
>>> lookup = dict(l)
>>> [(x, lookup[x]) if x in lookup else (0, 0) for x in range(1, 13)]
[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), 
(9, 0), (10, 0), (11, 0), (12, 0)]
"
Pandas dataframe reduce row values between specific dates,"df.ix['2000-01-05':'2000-01-08', 'JD'] -= 1 
print df
"
Convert ascii encoding to int and back again in python (quickly),"import string
_trans = None
def phred64ToStdqual4(qualin):
    global _trans
    if not _trans:
        _trans = string.maketrans(''.join(chr(i) for i in range(31, 127)), ''.join(chr(i) for i in range(127 - 31)))
    return qualin.translate(_trans)
"
How to split a list of 2-tuples into two lists?,"a,b = zip(*y)
"
Python/Pyparsing - Multiline quotes,"import pyparsing as pp

src1 = '''
Test(""This is a long string"")
'''

src2 = '''
Test(""This is a long""
    ""string"")
'''

src3 = '''

Test(""This is a long"" \\
     ""string"")
'''

_lp = pp.Suppress('(')
_rp = pp.Suppress(')')
_str = pp.QuotedString('""')
_slash = pp.Suppress(pp.Optional(""\\""))
_multiline_str = pp.Combine(pp.OneOrMore(_str + _slash), adjacent=False)

func = pp.Word(pp.alphas)

function = func + _lp + _multiline_str + _rp

print src1
print function.parseString(src1)
print '-------------------------'
print src2
print function.parseString(src2)
print '-------------------------'
print src3
print function.parseString(src3)
"
Mask zero values from pandas plot,"df[np.logical_and(df.A != 0, df.B != 0)].plot()
"
Reshaping numpy array without using two for loops,"In [65]: vprod=np.vectorize(lambda x,y: x**2+y**2)

In [66]: vprod(x[:,None],y[None,:]).shape
Out[66]: (10, 5)
"
Binary string in Python issues,"a = 0b0010111010
'{:010b}'.format(a)

#The output is: '0010111010'
"
Displaying real-time text in Tkinter after Button command calls function?,"    import thread, Queue, time, random, poster
    from Tkinter import *

    dataQueue = Queue.Queue()

    def status(t):
        try:
            data = dataQueue.get(block=False)
        except Queue.Empty:
            pass
        else:
            t.delete('0', END)
            t.insert('0', '%s\n' % str(data))
        t.after(250, lambda: status(t))

    def makethread():
        thread.start_new_thread(poster.poster, (1,dataQueue))    

    if __name__ == '__main__':
        root = Tk()
        root.geometry(""240x45"")
        t = Entry(root)
        t.pack(side=TOP, fill=X)
        Button(root, text='Start Epoch Display',
                command=makethread).pack(side=BOTTOM, fill=X)
        status(t)
        root.mainloop()
"
Automatic conversion to boost shared_ptr in boost python,"#include <iostream>
#include <boost/make_shared.hpp>
#include <boost/python.hpp>
#include <boost/shared_ptr.hpp>

/// @brief Mockup Spam class.
struct Spam
{
  int x;
  int y;
  Spam()  { std::cout << ""Spam()"" << std::endl; }
  ~Spam() { std::cout << ""~Spam()"" << std::endl; }

  Spam(const Spam& rhs) : x(rhs.x), y(rhs.y)
    { std::cout << ""Spam(const Spam&)"" << std::endl; }
};

/// @brief Helper function to ceck if an object has an attributed with a
///        specific type.
template <typename T>
bool hasattr(const boost::python::object& obj,
             const char* name)
{
  return PyObject_HasAttrString(obj.ptr(), name) &&
         boost::python::extract<T>(obj.attr(name)).check();
}

/// @brief Helper type that provides conversions from a Python object to Spam.
struct spam_from_python
{
  spam_from_python()
  {
    boost::python::converter::registry::push_back(
      &spam_from_python::convertible,
      &spam_from_python::construct,
      boost::python::type_id<Spam>());
  }

  /// @brief Check if PyObject contains an x and y int attribute.
  static void* convertible(PyObject* object)
  {
    namespace python = boost::python;
    python::handle<> handle(python::borrowed(object));
    python::object o(handle);

    // If x and y are not int attributes, then return null.
    if (!hasattr<int>(o, ""x"") && hasattr<int>(o, ""y""))
      return NULL;

    return object;
  }

  /// @brief Convert PyObject to Spam.
  static void construct(
    PyObject* object,
    boost::python::converter::rvalue_from_python_stage1_data* data)
  {
    // Obtain a handle to the memory block that the converter has allocated
    // for the C++ type.
    namespace python = boost::python;
    typedef python::converter::rvalue_from_python_storage<Spam> storage_type;
    void* storage = reinterpret_cast<storage_type*>(data)->storage.bytes;

    // Allocate the C++ type into the converter's memory block, and assign
    // its handle to the converter's convertible variable.
    Spam* spam;
    data->convertible = spam = new (storage) Spam();

    // Initialize spam from an object.
    initialize_spam(spam, object);
  }

  /// @brief Initialize a spam instance based on a python object.
  static void initialize_spam(Spam* spam, PyObject* object)
  {
    namespace python = boost::python;
    python::handle<> handle(python::borrowed(object));
    python::object o(handle);

    spam->x = python::extract<int>(o.attr(""x""));
    spam->y = python::extract<int>(o.attr(""y""));
  } 
};

/// @brief Helper type that provides conversions from a Python object to
///        boost::shared_ptr<Spam>.
struct shared_spam_from_python
{
  shared_spam_from_python()
  {
    boost::python::converter::registry::push_back(
      &spam_from_python::convertible,
      &shared_spam_from_python::construct,
      boost::python::type_id<boost::shared_ptr<Spam> >());
  }

  /// @brief Convert PyObject to boost::shared<Spam>.
  static void construct(
    PyObject* object,
    boost::python::converter::rvalue_from_python_stage1_data* data)
  {
    // Obtain a handle to the memory block that the converter has allocated
    // for the C++ type.
    namespace python = boost::python;
    typedef python::converter::rvalue_from_python_storage<
                                        boost::shared_ptr<Spam> > storage_type;
    void* storage = reinterpret_cast<storage_type*>(data)->storage.bytes;

    // Allocate the C++ type into the converter's memory block, and assign
    // its handle to the converter's convertible variable.
    boost::shared_ptr<Spam>* spam;
    data->convertible = spam =
        new (storage) boost::shared_ptr<Spam>(boost::make_shared<Spam>());

    // Initialize spam from an object.
    spam_from_python::initialize_spam(spam->get(), object);
  }
};

/// @brief Mockup functions acceping Spam in different ways.
void by_value(Spam spam)            { std::cout << ""by_value()"" << std::endl; }
void by_const_ref(const Spam& spam) { std::cout << ""by_cref()""  << std::endl; }
void by_ref(Spam& spam)             { std::cout << ""by_ref()""   << std::endl; }
void by_ptr(Spam* spam)             { std::cout << ""by_ptr()""   << std::endl; }

/// @brief Use auxiliary functions that accept boost::shared_ptr<Spam> and 
///        delegate to functions that have formal parameters of Spam& and
///        Spam*.
void by_ref_wrap(boost::shared_ptr<Spam> spam) { return by_ref(*spam); }
void by_ptr_wrap(boost::shared_ptr<Spam> spam) { return by_ptr(spam.get()); }

BOOST_PYTHON_MODULE(example)
{
  namespace python = boost::python;

  // Enable python to Spam conversion.
  spam_from_python();

  // Enable python to boost::shared_ptr<Spam> conversion.
  shared_spam_from_python();

  // Expose functions that have parameters that can accept a const Spam&
  // argument.
  python::def(""by_value"",     &by_value);
  python::def(""by_const_ref"", &by_const_ref);

  // Expose functions that have parameters that can accept a const
  // boost::shared_ptr<Spam>& argument.  As copies of shared_ptr are cheap,
  // a copy is used and the managed instance is passed to other functions,
  // allowing Spam& and Spam* parameters.
  python::def(""by_ptr"", &by_ptr_wrap);
  python::def(""by_ref"", &by_ref_wrap);
}
"
Python Logic - Centering text using periods,"lis = ['Text', 'in', 'the', 'middle!', 'END']
width = 13
for s1 in lis:
    L = len(s1)                                    #length of line
    periods_rtside = (width - L)//2                #periods on the RHS
    periods_leftside = width - periods_rtside - L  #peroids on the LHS
    periods_rt_str = '.' * periods_rtside
    periods_left_str = '.' * periods_leftside
    line1 = periods_left_str + s1 + periods_rt_str
    print line1
"
Convert string (without any separator) to list,"''.join(n for n in phone_str if n.isdigit())
"
Change the value of a variable with a button (Tkinter),"myButton = Button(root).pack()
"
How to know index of a decimal value in a python list,"from ast import literal_eval
result = []
for item in data:
    temp = """"
    try:
        temp = literal_eval(item)
    except (SyntaxError, ValueError):
        pass
    if isinstance(temp, float):
        result.append(item)
print result
# ['31.8000']
"
How do I fill in nested ManyToMany fields in Django with Shell?,"teacher = Teacher.objects.create(name='Susan') # create a teacher object
student1 = Student.objects.create(name='Alan') # create 1st student
student2 = Student.objects.create(name='Mike') # create 2nd student
parent1 = Parent.objects.create(name='George') # create parent object
parent2 = Parent.objects.create(name='John Doe') # create parent object

teacher.student.add(student1) # associate teacher with 1st student
teacher.student.add(student2) # associate teacher with 2nd student

student1.parents.add(parent1) # associate 1st student with parent1
student2.parents.add(parent2) # associate 2nd student with parent2
"
Plotting implicit equations in 3d,"from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np

def plot_implicit(fn, bbox=(-2.5,2.5)):
    ''' create a plot of an implicit function
    fn  ...implicit function (plot where fn==0)
    bbox ..the x,y,and z limits of plotted interval'''
    xmin, xmax, ymin, ymax, zmin, zmax = bbox*3
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    A = np.linspace(xmin, xmax, 100) # resolution of the contour
    B = np.linspace(xmin, xmax, 15) # number of slices
    A1,A2 = np.meshgrid(A,A) # grid on which the contour is plotted

    for z in B: # plot contours in the XY plane
        X,Y = A1,A2
        Z = fn(X,Y,z)
        cset = ax.contour(X, Y, Z+z, [z], zdir='z')
        # [z] defines the only level to plot for this contour for this value of z

    for y in B: # plot contours in the XZ plane
        X,Z = A1,A2
        Y = fn(X,y,Z)
        cset = ax.contour(X, Y+y, Z, [y], zdir='y')

    for x in B: # plot contours in the YZ plane
        Y,Z = A1,A2
        X = fn(x,Y,Z)
        cset = ax.contour(X+x, Y, Z, [x], zdir='x')

    # must set plot limits because the contour will likely extend
    # way beyond the displayed level.  Otherwise matplotlib extends the plot limits
    # to encompass all values in the contour.
    ax.set_zlim3d(zmin,zmax)
    ax.set_xlim3d(xmin,xmax)
    ax.set_ylim3d(ymin,ymax)

    plt.show()
"
Logical issue in generating HTML code,"def CRlistToTable(CRlist):
    """""" Create HTML table from CRlist data """"""
    CRstrings = ['<table cellspacing=""1"" cellpadding=""1"" border=""1"">']

    # create table's header row from the first row of CRlist
    BGCOLOR = '#67B0F9' # column header cells background color
    cols = CRlist[0]  # column names given in first row
    CRstrings += ['  <tr>', '\n'.join(
                  '    <th bgcolor=""{}"" scope=""col"">{}</th>'.format(BGCOLOR, col_name)
                     for col_name in cols),
                  '  </tr>']

    # create a template for remaining non-header table rows
    TR_TEMPLATE = ['  <tr>',
                   '    <td>',
                   '      {}',  # for dynamically generated CR links
                   '    </td>', '\n'.join(
                  ['    <td>{}</td>'] * (len(cols)-1)), # one per remaining cols
                   '  </tr>']
    TR_TEMPLATE = '\n'.join(TR_TEMPLATE) # convert to a string

    # apply the row template created to remaining CRlist rows
    CR_LINK_TEMPLATE = '<a href=http://data/{0}>{0}</a>'
    for row in CRlist[1:]:
        if ',' not in row[0]:  # no comma-delimited items in first column?
            links = CR_LINK_TEMPLATE.format(row[0])
        else:
            CRs = row[0].replace(',', ' ').split()
            links = ',\n      '.join(CR_LINK_TEMPLATE.format(cr) for cr in CRs)
        row[0] = links
        CRstrings += [TR_TEMPLATE.format(*row)]

    CRstrings += [""</table>""]

    # return string list merged to a single long newline-delimited string
    return '\n'.join(CRstrings) + '\n'


with open('cr_fixes_tabbed.xml') as file:
    xmldata = file.read()  # read entire file into memory

FIXES_START_TAG, FIXES_END_TAG = '<Fixes>, </Fixes>'.replace(',', ' ').split()
# embedded fixes info starts right after the tag itself within the xml data
xmlFixesStart = xmldata.find(FIXES_START_TAG) + len(FIXES_START_TAG)
xmlFixesEnd = xmldata.find(FIXES_END_TAG)

# extract portion of file data within the FIXES tags into a list of lines
info = xmldata[xmlFixesStart:xmlFixesEnd].strip().splitlines()

# split non-blank lines of tab-delimited data into list of rows of column data
CRlist = [line.split('\t') for line in info if line] # skips blank lines

crInfo = CRlistToTable(CRlist) # convert list into html table
print crInfo
"
How to check if I'm running in a shell (have a terminal) in Python?,"import os
os.isatty(sys.stdout.fileno())
"
Two-Dimensional structured array,">>> a = np.ones((3,3))
>>> b = a.view(dtype= [('A','<f8'), ('B','<f8'),('C', '<f8')], type = np.recarray)
>>> b
rec.array([[(1.0, 1.0, 1.0)],
       [(1.0, 1.0, 1.0)],
       [(1.0, 1.0, 1.0)]], 
      dtype=[('A', '<f8'), ('B', '<f8'), ('C', '<f8')])
>>> b.A
array([[ 1.],
       [ 1.],
       [ 1.]])
>>> b.A[0]
array([ 1.])
"
python: remove duplicate elements based on score,"from collections import defaultdict

id_to_scores = defaultdict(list)

for entry in l:
    id_to_scores[entry['id']].append(entry['s'])

output = [{'id': k, 's': max(v)} for k, v in id_to_scores.iteritems()]
"
"python list of variables, retrieve value of variable by variable name","att = {
    ""roll"": attRoll,
    ""hit"": hit,
    ""dmg"": dmg
}
print att[""dmg""]
"
Numpy rewriting operation using einsum,">>> import numpy as np
>>> x = 1000
>>> lowDimRepresentation = np.random.random((x, 100))
>>> principalComponents = np.random.random((100, 784))
>>> sameDimRepresentation = (lowDimRepresentation[:, np.newaxis] * principalComponents.T).sum(axis=2)
>>> esum_same = np.einsum('ij,jl->il', lowDimRepresentation, principalComponents)
>>> np.allclose(sameDimRepresentation, esum_same)
True
"
quickly drop dataframe columns with only one distinct value,"res = df
for col in df.columns:
    if len(df[col].unique()) == 1:
        res = res.drop(col,axis=1)
"
Pass Pandas DataFrame to Scipy.optimize.curve_fit,"import numpy as np
import pandas as pd
from scipy.optimize import curve_fit

X = np.random.randn(100, 4)     # independent variables
m = np.random.randn(4)          # known coefficients
y = X.dot(m)                    # dependent variable

df = pd.DataFrame(np.hstack((X, y[:, None])),
                  columns=['A', 'B', 'C', 'D', 'Z_real'])

def func(X, *params):
    return np.hstack(params).dot(X)

popt, pcov = curve_fit(func, df[['A', 'B', 'C', 'D']].T, df['Z_real'],
                       p0=np.random.randn(4))

print(np.allclose(popt, m))
# True
"
Python subprocess passes one argument only,"stdout = subprocess.check_output(['/path/to/binary', '-p', 's'])
"
Python: Find a word in a matrix of characters,"def move_valid(position, last_position):
    if last_position is None:
        return True
    return (
        abs(position[0] - last_position[0]) <= 1 and
        abs(position[1] - last_position[1]) <= 1
    )

def find_word(word, used=None):
    if word == """":
        return []
    if used is None:
        used = []
    letter, rest = word[:1], word[1:]
    for position in letter_positions.get(letter) or []:
        if position in used:
            continue
        if not move_valid(position, used and used[-1]):
            continue
        path = find_word(rest, used + [position])
        if path is not None:
            return [position] + path
    return None
"
Navigating to second string text using BeautifulSoup,"table = soup.find('table', class_='result-data')
tr = table.find('tr', class_='result-item')
print tr.find('td', class_=""result-value-bold"").get_text(strip=True)
"
python - Count number of occurences of each number,"from collections import Counter
numstring = ""1,2,3,4,5,1,6,7,1,8,9,10,11,12,1,1,2""
numcount = Counter(numstring.split(','))
"
String loops in Python,"[(f1, f2) for f1 in fruits1 for f2 in fruits2 if f1 < f2]
"
python parse file and put in for loop,"output = subprocess.Popen(['chkconfig', '--list'], stdout=subprocess.PIPE).stdout

for line in output:
    if line.startswith('httpd_'):
        print line.split()[0]
"
Convert point to line data using a list of point indices,"import numpy as np

pts = [[0.0, 0.0, 0.0],
       [0.0, 1.0, 0.0],
       [0.0, 2.0, 0.0],
       [1.0, 0.0, 0.0],
       [1.0, 1.0, 0.0],
       [1.0, 2.0, 0.0],
       [1.0, 3.0, 0.0],
       [2.0, 0.0, 0.0],
       [3.0, 2.5, 0.0]]
pts = np.asarray(pts)
pt_id = [3,0,1,2,4,3,4,5,6,2,7,8]

def get_line(k):
    # find i, the index of pt_id such that pt_id[i] = nk
    i = 0
    for j in range(0, k):
        i = i + pt_id[i] + 1
    # read the value of nk
    nk = pt_id[i]
    # return the points whose indices are [idk_1, ..., idk_nk]
    return pts[pt_id[i+1:i+1+nk], :]

print(get_line(0))
print(get_line(1))
print(get_line(2))
"
In-memory thumbnail generation in python,"import contextlib
from StringIO import StringIO

with contextlib.closing(StringIO()) as handle:
    thing.save(handle)
    contents = handle.getvalue()
"
Saving matplotlib figure with add_axes,"import pylab as plt

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(212)

ax.plot(range(3))

ax_im = fig.add_axes([0.3, 0.5, 0.5, 0.4])
ax_im.set_xticks([])
ax_im.set_yticks([])

plt.show()
"
Is it possible to implement .NET-like attributes in Python?,"class DefaultAttribute(Attribute):
  __handler = None

  def __call__(self, func):
    self.__handler = func
    return super().__call__(func)

  @property
  def Handler(self):
    return self.__handler

class CommandAttribute(Attribute):
  __command = """"
  __handler = None
  __kwargs =  None

  def __init__(self, command, **kwargs):
    super().__init__()
    self.__command =  command
    self.__kwargs =   kwargs

  def __call__(self, func):
    self.__handler = func
    return super().__call__(func)

  @property
  def Command(self):
    return self.__command

  @property
  def Handler(self):
    return self.__handler

  @property
  def KWArgs(self):
    return self.__kwargs

class ArgumentAttribute(Attribute):
  __args =   None
  __kwargs = None

  def __init__(self, *args, **kwargs):
    super().__init__()
    self.__args =   args
    self.__kwargs = kwargs

  @property
  def Args(self):
    return self.__args

  @property
  def KWArgs(self):
    return self.__kwargs
"
alternative regex to match all text in between first two dashes,"-([^-]*)
"
Directory sizes and extensions,"import os, sys
from collections import defaultdict

def walkIt(folder):
    for (path, dirs, files) in os.walk(folder):
        size = getDirSize(path)
        stats = getExtensionStats(files)

        # only get the top 3 extensions
        print '%s (%s, %s)'%(path, size, stats[:3])

def getExtensionStats(files):
    # get all file extensions
    extensions = [f.rsplit(os.extsep, 1)[-1] 
        for f in files if len(f.rsplit(os.extsep, 1)) > 1]

    # count the extensions
    exCounter = defaultdict(int)
    for e in extensions:
        exCounter[e] += 1

    # convert count to percentage
    percentPairs = [(e, 100*ct/len(extensions)) for e, ct in exCounter.items()]

    # sort them
    percentPairs.sort(key=lambda i: i[1])
    return percentPairs

def getDirSize(root):
    size = 0
    for path, dirs, files in os.walk(root):
        for f in files:
            size +=  os.path.getsize( os.path.join( path, f ) )
    return size

if __name__ == '__main__':
    path = sys.argv[1] if len(sys.argv) > 1 else '.'
    walkIt(path)
"
How should you read a 2D integer array?,">>> import numpy as np
>>> mx = np.loadtxt(filename, delimiter=',', dtype=int).tolist()
"
Custom time series resampling in Pandas,"import pandas as pd
df = pd.read_table('data', sep='\s{2,}')
# Make sure the index is a DatetimeIndex
df.index = pd.DatetimeIndex(df.index)

# discard rows whose time falls between 16:00 and 18:00
df = df.between_time('18:00', '16:00', include_start=True, include_end=True)

proxy = df.index + pd.DateOffset(hours=6)
result = df.groupby(proxy.date).agg(
    {'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last'})
result = result.reindex(columns=['Open','High','Low','Close'])
print(result)
"
"Python Scrapy, parsing multiple child objects into the same item?",""", "".join(response.xpath('//a[@class=""genre""]/text()').extract())
"
Convert a column in pandas dataframe from String to Float,"In [97]: a = pd.Series(['17.21','17.34','15.23','-','-','','12.34']

In [98]: b = pd.Series(['0.21','0.34','0.23','-','','-','0.34'])

In [99]: df = pd.DataFrame({'a':a, 'b':b})

In [100]: df['c'] = np.random.choice(['a','b','b'], len(df))

In [101]: df
Out[101]:
       a     b  c
0  17.21  0.21  a
1  17.34  0.34  b
2  15.23  0.23  b
3      -     -  b
4      -        b
5            -  b
6  12.34  0.34  b

In [102]: cols_to_convert = ['a','b']

In [103]: cols_to_convert
Out[103]: ['a', 'b']

In [104]: for col in cols_to_convert:
   .....:         df[col] = pd.to_numeric(df[col], errors='coerce')
   .....:

In [105]: df
Out[105]:
       a     b  c
0  17.21  0.21  a
1  17.34  0.34  b
2  15.23  0.23  b
3    NaN   NaN  b
4    NaN   NaN  b
5    NaN   NaN  b
6  12.34  0.34  b
"
PyQt5 does not change gifs,"   from PyQt5.QtWidgets import (QMessageBox,QApplication, QWidget, QToolTip, QPushButton,
                                 QDesktopWidget, QMainWindow, QAction, qApp, QToolBar, QVBoxLayout,
                                 QComboBox,QLabel,QLineEdit,QGridLayout,QMenuBar,QMenu,QStatusBar,
                                 QTextEdit,QDialog,QFrame,QProgressBar
                                 )
    from PyQt5 import QtCore, QtWidgets, QtGui
    from PyQt5.QtGui import QIcon,QFont,QPixmap,QPalette
    from PyQt5.QtCore import QCoreApplication, Qt,QBasicTimer, QTimer,QPoint
    import PyQt5.QtWidgets,PyQt5.QtCore

    import time,random,subprocess,sys,json

    class cssden(QMainWindow):
        def __init__(self):
            super(cssden, self).__init__()


            self.mwidget = QMainWindow(self)
            self.setWindowFlags(QtCore.Qt.FramelessWindowHint)

            self.setFixedSize(1400,923)

            self.center()

            #timer
            self.timer = QTimer(self)
            self.timer.timeout.connect(self.timer_)
            self.timer.start(1000)                       # changed timer timeout to 1s

            self.timer2 = QTimer(self)                 # I added
            self.timer2.timeout.connect(self.timer2_)  # this, but
            self.timer2.start(500)                     # you can remove it

            #gif
            self.moviee = QLabel(self)
            self.movie = QtGui.QMovie(""aaa.gif"")
            self.moviee.setMovie(self.movie)
            self.moviee.setGeometry(5,-80,380,250)
            self.movie.start()
            self.show()

        def timer2_(self):                # You can
            tt = open(""mode.json"", 'w')   # remove
            i = random.randint(0,1)       # that too
            if i == 1:                    #
                json.dump('aaa', tt)      #
            elif i == 0:                  #
                json.dump('bbb', tt)      #
            tt.close()                    #


        def timer_(self):
            tt = open(""mode.json"", 'r')
            self.mode = json.load(tt)
            tt.close()
            print (self.mode)
            if self.mode == ""bbb"":
                self.movie = QtGui.QMovie(""bbb.gif"")
                self.moviee.setMovie(self.movie)     # I added
                self.movie.start()                   # those lines
            else:                                          
                self.movie = QtGui.QMovie(""aaa.gif"")
                self.moviee.setMovie(self.movie)     # and here
                self.movie.start()                   # too

        #center of the screen
        def center(self):
            qr = self.frameGeometry()
            cp = QDesktopWidget().availableGeometry().center()
            qr.moveCenter(cp)
            self.move(qr.topLeft())

    app = QApplication(sys.argv)
    app.setStyleSheet(""QMainWindow{background-color: rgb(30,30,30);border: 1px solid black}"")

    ex = cssden()
    sys.exit(app.exec_())
"
How to multiply lists and set a single variable?,"In [5]: class Banana(object):
   ...:     pass
   ...: 

In [6]: lst = [[Banana()]*5 for _ in range(5)]

In [7]: [[id(elem) for elem in sublst] for sublst in lst]
Out[7]: 
[[139951176414824,
  139951176414824,
  139951176414824,
  139951176414824,
  139951176414824],
 [139951176415272,
  139951176415272,
  139951176415272,
  139951176415272,
  139951176415272],
 [139951176414096,
  139951176414096,
  139951176414096,
  139951176414096,
  139951176414096],
 [139951176414432,
  139951176414432,
  139951176414432,
  139951176414432,
  139951176414432],
 [139951176415496,
  139951176415496,
  139951176415496,
  139951176415496,
  139951176415496]]
"
"In Python, can I call the main() of an imported module?","def main(args):
    # parse arguments using optparse or argparse or what have you

if __name__ == '__main__':
    import sys
    main(sys.argv[1:])
"
Convert a 2d matrix to a 3d one hot matrix numpy,"from scipy.sparse import coo_matrix

N = a.size
L = a.max()
data = np.ones(N,dtype=int)
sparse_out = coo_matrix((data,(np.arange(N),a.ravel()-1)), shape=(N,L))
"
request url with number increase,"import itertools
for number in itertools.count(start_number):
    page = requests.get('http://www.google.com/page' + str(number))
    # Logic handling page result.
    # ...
    if done_handling_pages:
        break
"
What does this function do? (Python iterators),">>> n=3
>>> zip(*([iter(li)] * n))
[(0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11), (12, 13, 14), (15, 16, 17), (18, 19, 20)]
"
Making missing time slots and filling in 0 values in a Pandas series?,"
import pandas as pd
ts = pd.Series({('900 W Harrison', '2014-07-01 08:00:00'): 1,
 ('900 W Harrison', '2014-07-01 10:00:00'): 1,
 ('900 W Harrison', '2014-07-01 11:00:00'): 1,
 ('900 W Harrison', '2014-07-01 12:00:00'): 1,
 ('900 W Harrison', '2014-07-01 13:00:00'): 1,
 ('900 W Harrison', '2014-07-01 16:00:00'): 1,
 ('900 W Harrison', '2014-07-01 17:00:00'): 3,
 ('900 W Harrison', '2014-07-01 22:00:00'): 1,
 ('900 W Harrison', '2014-07-02 01:00:00'): 1,
 ('900 W Harrison', '2014-07-02 08:00:00'): 1,
 ('900 W Harrison', '2014-07-02 12:00:00'): 2})

ts = ts.unstack(level=0)
# ensure ts.index is a DatetimeIndex
ts.index = pd.to_datetime(ts.index)
index = pd.date_range('2014-07-01', '2014-07-03', freq='H')
ts = ts.reindex(index, fill_value=0)
ts = ts.stack()
ts = ts.swaplevel(0,1)
ts = ts.sortlevel()
print(ts)
"
Looping through a 2D numpy array (e.g. to create a line),"np.fromfunction(lambda i, j: j == m*i+c, (height, width), dtype=np.float)
"
python count business weeks,"def week_difference(start, end):
    assert start <= end
    start_year, start_week, start_dayofweek = start.isocalendar()
    end_year, end_week, end_dayofweek = end.isocalendar()

    return ((end_year - start_year) * 52) - start_week + end_week
"
How to iterate over time periods in pandas,"In [77]: i = pd.date_range('20110101','20150101',freq='B')

In [78]: s = Series(1,index=i)

In [79]: s
Out[79]: 
2011-01-03    1
2011-01-04    1
2011-01-05    1
2011-01-06    1
2011-01-07    1
             ..
2014-12-26    1
2014-12-29    1
2014-12-30    1
2014-12-31    1
2015-01-01    1
Freq: B, dtype: int64

In [80]: len(s)
Out[80]: 1044
"
Adding to a specific variable in a list,"list1 = [1, 2, 3]
list2 = [7, 8, 9]

def add_list(a,b):
    carry = 0
    res_list = []
    for i,j in zip(a[::-1],b[::-1]):   # Iterate through the lists in reverse
        val = (i+j+carry)%10           # Store the sum in val
        carry = (i+j+carry)//10        # Store the carry
        res_list.append(val)           # Append to the returning list
    return res_list[::-1]              # Return the list

print add_list(list1,list2)        
"
Extract square-bracketed text from a string,">>> from itertools import dropwhile
>>> b = ''.join(dropwhile(lambda c: c != '[', a))
>>> b
'[mylocation]'
"
Python cosine-similarity on all possible pairs in list,"from itertools import groupby, combinations
import math

def cosine_similarity(v1,v2):
    sumxx, sumxy, sumyy = 0, 0, 0
    for i in range(len(v1)):
        x = v1[i]; y = v2[i]
        sumxx += x*x
        sumyy += y*y
        sumxy += x*y
    return sumxy/math.sqrt(sumxx * sumyy)

info_list = [
    ('188.74.64.243', '1', [0, 1, 1, 0]),
    ('99.229.98.18',  '1', [0, 1, 1, 1]),
    ('86.41.253.102', '1', [1, 1, 1, 1]),
    ('188.74.64.243', '2', [0, 1, 1, 0]),
    ('99.229.98.18',  '2', [0, 1, 1, 1]),
    ('86.41.253.102', '2', [1, 1, 1, 1]),
    ]

for k, g in groupby(info_list, key=lambda x: x[1]):
    for x, y in combinations(g, 2):
        print (x[0], y[0], x[1], x[2], y[2], cosine_similarity(x[2], y[2]))
    print
"
"Python: How to print a message within a ""frame"", using if,for and while control statements? Really confused","def _one_frame(text):                 # text is supposed to be a list of lines
    lt = len(text[0])
    horz = '+' + '-'*lt + '+'         # Make the horizontal line +-------+
    result = [horz]                   # Top of the frame
    for line in text:
        result.append( '|'+line+'|' ) # Add the borders for each line
    result.append(horz)               # Bottom of the frame
    return result

def frame(text, repeat, thickness):
    text = ["" %s ""%text]*repeat       # add spaces and repeat as a list
    for i in range(thickness):
        text = _one_frame(text)       # draw one frame per iteration
    return '\n'.join(text)            # join lines

print(frame('Hello World', 3, 2))
"
"python, detecting elements have been removed/added/changed positions in a list",">>> import difflib
>>> Org = ['AMEND', 'ASTRT', 'ETIME', 'OBJ', 'ast', 'bias', 'chip', 'cold']
>>> mod = ['AMEND', 'ASTRT', 'OBJ', 'ast', 'bias', 'chip', 'cold', 'flat', 'deb']
>>> list(difflib.ndiff(Org, mod))
['  AMEND', '  ASTRT', '- ETIME', '  OBJ', '  ast', '  bias', '  chip', '  cold', '+ flat', '+ deb']
"
Creating an Attribute class that allows adjusting a base value?,"class AttributeDescriptor(object):
    def __init__(self, attr):
        self.attr = attr

    def __set__(self, inst, value):
        getattr(inst, self.attr).update(value)

    def __get__(self, inst, owner):
        return getattr(inst, self.attr).compute()


class AdjustmentTracker(object):
    def __init__(self, base):
        print(""Attribute initialized to %s"" % base)
        self.base = base
        self.adjustments = []

    def compute(self):
        return self.base + sum(self.adjustments)

    def update(self, value):
        delta = (value - self.compute())
        print(""Adjustment added: %s"" % delta)
        self.adjustments.append(delta)


class Creature(object):
    health = AttributeDescriptor('_health')
    armor  = AttributeDescriptor('_armor')

    def __init__(self, health=100, armor=0):
        self._health = AdjustmentTracker(health)
        self._armor =  AdjustmentTracker(armor)


c1 = Creature(50)
c1.health = 60      # Adds a +10 adjustment
print c1.health     # 60
c1.health += 10     # Add a +10 adjustment
print c1.health     # 70
print c1._health.adjustments     # [10, 10]
"
Python - Multiple choice markup parsing,"
def extract_choices(text):
    choices = []

    def callback(match):
        variants = match.group().strip('{}')
        choices.append(dict(
            (v.lstrip('+'), v.startswith('+'))
            for v in variants.split('|')
        ))
        return '___'

    text = re.sub('{.*?}', callback, text)

    return text, choices
"
Python configuration file: Any file format recommendation? INI format still appropriate? Seems quite old school,"if __name__ == ""__main__"":
    config = {}
    execfile(""example.conf"", config) 
    # python 3: exec(open(""example.conf"").read(), config)

    print config[""value1""]
    print config[""value5""]
"
Python glob but against a list of strings rather than the filesystem,"pat_dict = {
            'a/b/*/f.txt': ['a/b/c/f.txt', 'a/b/q/f.txt', 'a/b/c/d/f.txt','a/b/c/d/e/f.txt'],
            '/foo/bar/*': ['/foo/bar/baz', '/spam/eggs/baz', '/foo/bar/bar'],
            '/*/bar/b*': ['/foo/bar/baz', '/foo/bar/bar'],
            '/*/[be]*/b*': ['/foo/bar/baz', '/foo/bar/bar'],
            '/foo*/bar': ['/foolicious/spamfantastic/bar', '/foolicious/bar']

        }
for pat in pat_dict:
    print('pattern :\t{}\nstrings :\t{}'.format(pat,pat_dict[pat]))
    print('matched :\t{}\n'.format(list(glob_filter(pat_dict[pat],pat))))
"
Length cutting through file handling,"with open('num.txt') as nums:
    lines = re.findall(r'\w+\.txt\s+\d+', nums.read())

numbers = {}
for line in lines:
    line_split = re.split(r'\.txt\s+', line)
    count = line_split[1]
    numbers[line_split[0]] = int(line_split[1])
"
Sort list of dictionaries by multiple keys with different ordering,"stats.sort(key=lambda x: (-x['K'], -x['B'], x['A'], x['Z']))
"
"""Public"" attributes of an object with their values","[(name, getattr(obj, name)) for name in dir(obj) if not name.startswith('__')]
"
How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?,"from sqlalchemy.ext import compiler
from sqlalchemy.sql.expression import Executable, ClauseElement

class InsertFromSelect(Executable, ClauseElement):
    def __init__(self, table, select):
        self.table = table
        self.select = select

@compiler.compiles(InsertFromSelect)
def visit_insert_from_select(element, compiler, **kw):
    return ""INSERT INTO %s (%s)"" % (
        compiler.process(element.table, asfrom=True),
        compiler.process(element.select)
    )

insert = InsertFromSelect(t1, select([t1]).where(t1.c.x>5))
print insert
"
How to take out the column index name in dataframe,">>> dfrm.ix[:,[-1]+range(len(dfrm.columns)-1)]
         Date         A         B         C
0  2012-06-01  0.283724  0.863012  0.798891
1  2012-06-02  0.097231  0.277564  0.872306
2  2012-06-03  0.821461  0.499485  0.126441
3  2012-06-04  0.887782  0.389486  0.374118
4  2012-06-05  0.248065  0.032287  0.850939
5  2012-06-06  0.101917  0.121171  0.577643
6  2012-06-07  0.225278  0.161301  0.708996
7  2012-06-08  0.906042  0.828814  0.247564
8  2012-06-09  0.733363  0.924076  0.393353
9  2012-06-10  0.273837  0.318013  0.754807
"
Return a portion of a plot using matplotlib,"class Onselect():

    def __init__(self):
        self.coords = {}

    def __call__(self, xmin, xmax):
        indmin, indmax = np.searchsorted(x, (xmin, xmax))
        indmax = min(len(x)-1, indmax)

        thisx = x[indmin:indmax]
        thisy = y[indmin:indmax]
        self.coords['x'] = thisx
        self.coords['y'] = thisy
        line2.set_data(thisx, thisy)
        ax2.set_xlim(thisx[0], thisx[-1])
        ax2.set_ylim(thisy.min(), thisy.max())
        fig.canvas.draw()

onselect = Onselect()

# set useblit True on gtkagg for enhanced performance
span = SpanSelector(ax, onselect, 'horizontal', useblit=True,
                    rectprops=dict(alpha=0.5, facecolor='red') )

plt.show()

print 'working with x an y'
print onselect.coords['x'][:10]
print onselect.coords['y'][:10]
"
How to check if a path is absolute path or relative path in cross platform way with Python?,os.path.isabs(my_path)
Faster way to shift a decimal in Python to remove zeros?,"def method2(x):
    while x < 0.1:
        x *= 10
    return x
"
Combining two sorted lists in Python,">>> l1 = [1, 3, 4, 7]
>>> l2 = [0, 2, 5, 6, 8, 9]
>>> l1.extend(l2)
>>> sorted(l1)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
"
How do I check the % of values in an array that exist in another array in pandas?,"def get_overlap_pcnt(row):
    # Get the overlap between arrays.
    overlap = len(np.intersect1d(row['app_id_x'], row['app_id_y']))

    # Compute the percent common.
    if overlap == 0:
        pcnt = 0
    else:
        pcnt = 100*overlap/len(row['app_id_y'])

    return '{:.2f}%'.format(pcnt)

df['adoption_rate'] = df.apply(get_overlap_pcnt, axis=1)
"
How to extract html table by using Beautifulsoup,">>> from bs4 import BeautifulSoup
>>> data = """"""
... <div>
...     <table>
...         <tr><td class=""abc"">This is ABC</td>
...         </tr>
...         <tr><td class=""firstdata""> data1_xxx </td>
...         </tr>
...     </table>
... 
...     <table>
...         <tr><td class=""efg"">This is EFG</td>
...         </tr>
...         <tr><td class=""firstdata""> data1_xxx </td>
...         </tr>
...     </table>
... </div>
... """"""
>>> soup = BeautifulSoup(data)
>>> print soup.find(""td"", {""class"":""abc""}).find_parent('table')
<table>
<tr><td class=""abc"">This is ABC</td>
</tr>
<tr><td class=""firstdata""> data1_xxx </td>
</tr>
</table>
"
Overlapping regex matches,"from operator import itemgetter
matches.sort(key=itemgetter(1))
matches.sort(key=itemgetter(0)) 
"
Elegant way to convert list to hex string,"val = hex(reduce(lambda total, wall: total << 1 | wall, walls, 0))
"
python: selectively split and combine alphanumeric strings in a file,"def replicateALine(line):
    regex = re.search('\w -> ', line)
    if regex:
        line= line.replace(',', ';\n' + regex.group(0))
    return line

print replicateALine('a -> b,c,d;')
print replicateALine('e -> b;')
"
Unicode Regex with regex not working in Python,"p = regex.compile(r'(?r)\w+(?:-\w+)*\M', regex.U)
for line in s.split('\n'):
    print p.search(line).group(0)
"
Splitting string data into keywords in Python in customized order and store specific keywords seprately,"from itertools import groupby

is_hashtag = lambda w: w.startswith('#') and len(w)>1

tests = """"""\
    Hello #world I am in #London and it is #sunny today it is #2016
    Hello #London I am in #London and it is #sunny today it is #2016
    Hello #Austin I am at #SXSW and this is just a # hashtag symbol""""""

for t in tests.splitlines():
    t = t.strip()
    groups = groupby(t.split(), key=is_hashtag)

    tags = []
    keywords = []

    # get words up to first hashtag
    ishash, words = next(groups)
    keywords.extend(list(words))

    # get first hashtag
    ishash, tag = next(groups)
    tags.extend(list(tag))

    # get words up to next hashtag
    ishash, words = next(groups)
    keywords.extend(list(words))

    # get all remaining hashtags
    for ishash, tag in groups:
        if ishash:
            newtags = list(tag)
            tags.extend(newtags)

    print (t)
    print (tags)
    print (keywords)
    print ('')
"
An iterative rather than recursive algorithm to find all ways to split n into m pieces,"def chainsplit(n,p):
    return sorted(list(set(chain.from_iterable([list(permutations(i,len(i))) 
        for i in list(combinations_with_replacement(range(n+1),p)) if sum(i) == n]))))
"
Print string left aligned with fixed width and suffix,"from string import Formatter
import sys

if sys.version_info < (3,):
    int_type = (int, long)
else:
    int_type = (int)

class TrailingFormatter(Formatter):

    def vformat(self, *args):
        self._automatic = None
        return super(TrailingFormatter, self).vformat(*args)

    def get_value(self, key, args, kwargs):
        if key == '':
            if self._automatic is None:
                self._automatic = 0
            elif self._automatic == -1:
                raise ValueError(""cannot switch from manual field specification ""
                                 ""to automatic field numbering"")
            key = self._automatic
            self._automatic += 1
        elif isinstance(key, int_type):
            if self._automatic is None:
                self._automatic = -1
            elif self._automatic != -1:
                raise ValueError(""cannot switch from automatic field numbering ""
                                 ""to manual field specification"")
        return super(TrailingFormatter, self).get_value(key, args, kwargs)

    def format_field(self, value, spec):
        if len(spec) > 1 and spec[0] == 't':
            value = str(value) + spec[1]  # append the extra character
            spec = spec[2:]
        return super(TrailingFormatter, self).format_field(value, spec)

kf = TrailingFormatter()
w = 20
ch = ':'
x = dict(a_key=23, another_key=42)

for k in sorted(x):
    v = x[k]
    print(kf.format('{:t{}<{}} {}', k, ch, w, v))
"
Transform a Counter object into a Pandas DataFrame,"In [40]:
from collections import Counter
d = Counter({'fb_view_listing': 76, 'fb_homescreen': 63, 'rt_view_listing': 50, 'rt_home_start_app': 46, 'fb_view_wishlist': 39, 'fb_view_product': 37, 'fb_search': 29, 'rt_view_product': 23, 'fb_view_cart': 22, 'rt_search': 12, 'rt_view_cart': 12, 'add_to_cart': 2, 'create_campaign': 1, 'fb_connect': 1, 'sale': 1, 'guest_sale': 1, 'remove_from_cart': 1, 'rt_transaction_confirmation': 1, 'login': 1})
df = pd.DataFrame.from_dict(d, orient='index').reset_index()
df

Out[40]:
                          index   0
0                         login   1
1   rt_transaction_confirmation   1
2                  fb_view_cart  22
3                    fb_connect   1
4               rt_view_product  23
5                     fb_search  29
6                          sale   1
7               fb_view_listing  76
8                   add_to_cart   2
9                  rt_view_cart  12
10                fb_homescreen  63
11              fb_view_product  37
12            rt_home_start_app  46
13             fb_view_wishlist  39
14              create_campaign   1
15                    rt_search  12
16                   guest_sale   1
17             remove_from_cart   1
18              rt_view_listing  50
"
writing decompressed file to disk fetched from web server,"import requests
import tempfile
import zipfile

KB = 1<<10
MB = 1<<20

url = '...' # Set url to the download link.

resp = requests.get(url, stream=True)
with tmp as tempfile.SpooledTemporaryFile(max_size=500*MB):
    for chunk in resp.iter_content(4*KB):
        tmp.write(chunk)
    archive = zipfile.ZipFile(tmp)
    archive.extractall(path)
"
Opencv... getting at the data in an IPLImage or CvMat,"for x in xrange(mat.cols):
    for y in xrange(mat.rows):
        # multiply all 3 components by 0.5
        mat[y, x] = tuple(c*0.5 for c in mat[y, x])

        # or multiply only the red component by 0.5
        b, g, r = mat[y, x]
        mat[y, x] = (b, g, r * 0.5)
"
Getting parameter names for __future__ functions in python,"from io import StringIO

try:
    print('', end='', flush=False, file=StringIO())
    print_supports_flush = True
except TypeError:
    print_supports_flush = False
"
PYTHON: Read a file into a dictionary with column n as key and column m as value,"d = {}
with open('data.txt') as f:
  for line in f:
    tok = line.split()
    d[tok[1]] = tok[3]
print(d)
"
How to generate Excel spreadsheets with embedded graphs?,"import win32com.client
from win32com.client import constants as c

xl = win32com.client.gencache.EnsureDispatch('Excel.Application')
xl.Visible = True
wb = xl.Workbooks.Add()
ws = xl.ActiveSheet
ws.Range('A1').FormulaR1C1 = 'X'
ws.Range('B1').FormulaR1C1 = 'Y'
ws.Range('A2').FormulaR1C1 = 1
ws.Range('A3').FormulaR1C1 = 2
ws.Range('A4').FormulaR1C1 = 3
ws.Range('B2').FormulaR1C1 = 4
ws.Range('B3').FormulaR1C1 = 5
ws.Range('B4').FormulaR1C1 = 6
ws.Range('A1:B4').Select()
ch = ws.Shapes.AddChart().Select()
xl.ActiveChart.ChartType = c.xlXYScatterLines
xl.ActiveChart.SetSourceData(Source=ws.Range(""A1:B4""))
"
Fake out module including attributes,">>> class FakeModule:
...     def __getattr__(self, name):
...         print name
...         return name
...
>>> sys.modules['fakeModule'] = FakeModule()
>>> from fakeModule import something
__path__
something
something
>>> something
'something'
"
Financial modelling with Pandas dataframe,"# in some other file
def EBIT(df, t):
    # logic goes here

# in the main file
import operations as op
# ...
op.EBIT(df, t)
enter code here
"
zip multiple values with single value,"ave=['Avg']
lst = []
for x in range(24):
    lst.extend((x,ave[0]))
"
merging indexed array in Python,"import numpy as np
import numpy.lib.recfunctions

# Define the starting arrays as structured arrays with two fields ('key' and 'field')
dtype = [('key', np.int), ('field', np.float)]
x = np.array([(1, 2),
             (2, 4),
             (3, 6),
             (4, np.NaN),
             (5, 10)],
             dtype=dtype)

y = np.array([(0, -5),
             (1, 0),
             (2, 5),
             (5, 20),
             (6, 25)],
             dtype=dtype)

# You want an outer join, rather than the default inner join
# (all values are returned, not just ones with a common key)
join = np.lib.recfunctions.join_by('key', x, y, jointype='outer')

# Now we have a structured array with three fields: 'key', 'field1', and 'field2'
# (since 'field' was in both arrays, it renamed x['field'] to 'field1', and
#  y['field'] to 'field2')

# This returns a masked array, if you want it filled with
# NaN's, do the following...
join.fill_value = np.NaN
join = join.filled()

# Just displaying it... Keep in mind that as a structured array,
#  it has one dimension, where each row contains the 3 fields
for row in join: 
    print row
"
Using tkinter to assign a global variable and destroy the gui,"import sys
from Tkinter import *

def assign(value):
    global x
    x = value
    mGui.destroy()

mGui = Tk()
mGui.geometry(""500x100+500+300"")
mGui.title(""Attribute Selection Window"")

frame1 = Frame(mGui)
frame1.pack()

mLabel = Label(frame1, text = ""Please select one of the following attributes to assign to the selected Convwks feature:"").grid(row=0, column=0)

frame2 = Frame(mGui)
frame2.pack()


mButton = Button(frame2, text = ""CON"", command = lambda: assign(""CON"")).grid(row=0, column=0, padx=10)
mButton = Button(frame2, text = ""MS"", command = lambda: assign(""MS"")).grid(row=0, column=1, padx=10)
mButton = Button(frame2, text = ""DRN"", command = lambda: assign(""DRN"")).grid(row=0, column=2, padx=10)
mGui.mainloop()     #FOR WINDOWS ONLY
"
Python Regular Expression matching multiple lines (re.DOTALL),">>> re_sections=re.compile(r""(?P<section>Section\d)\s*(?P<section_data>.+?)(?=(?:Section\d|$))"", re.DOTALL)
>>> for m in re_sections.finditer(text): print m.groupdict()
... 
{'section': 'Section1', 'section_data': 'stuff belonging to section1\nstuff belonging to section1\nstuff belonging to section1\n'}
{'section': 'Section2', 'section_data': 'stuff belonging to section2\nstuff belonging to section2\nstuff belonging to section2'}
"
How to sort a Dataframe by the ocurrences in a column in Python (pandas),"df1 = df.pivot(index='chemicals', columns='proteins', values='scores')

cols = df1.notnull().sum(axis=0).sort_values(ascending=False).index
print cols
Index([u'10116.ENSRNOP00000003921', u'10116.ENSRNOP00000008952',
       u'10116.ENSRNOP00000004027', u'10116.ENSRNOP00000001021'],
      dtype='object', name=u'proteins')

print df1[cols]
proteins      10116.ENSRNOP00000003921  10116.ENSRNOP00000008952  \
chemicals                                                          
CID000000006                     196.0                       NaN   
CID000000051                     246.0                       NaN   
CID000000085                     196.0                       NaN   
CID000000119                     247.0                       NaN   
CID000000134                       NaN                     159.0   
CID000000135                       NaN                     157.0   
CID000000174                       NaN                     439.0   
CID000000175                       NaN                       NaN   
CID000000177                       NaN                       NaN   

proteins      10116.ENSRNOP00000004027  10116.ENSRNOP00000001021  
chemicals                                                         
CID000000006                       NaN                       NaN  
CID000000051                       NaN                       NaN  
CID000000085                       NaN                       NaN  
CID000000119                       NaN                       NaN  
CID000000134                       NaN                       NaN  
CID000000135                       NaN                       NaN  
CID000000174                       NaN                       NaN  
CID000000175                       NaN                     858.0  
CID000000177                     760.0                       NaN  
"
Remove specific characters from a string,"a = a.replace(char, '')"
Iterate over object attributes in python,">>> [a for a in dir(obj) if not a.startswith('__') and not callable(getattr(obj,a))]
['bar', 'foo']
"
Convert string to HEX characters,"import binascii
mytext='☺00AB12☻0200D60000040001♥t'
print binascii.hexlify(mytext)
"
Python 3: Iterating over a dictionary,"stat = [summ for summ in ... 'RankedSolo5x5'][0]
wins = stats['wins']
"
split list by certain repeated index value,"def split_at(i, l):
    it = iter(l)
    out = [next(it)]
    for ele in it:
        if ele != i:
            out.append(ele)
        else:
            yield out
            out = [ele]
    yield out
"
Randomly combine pandas group objects,"uniq=df['id'].unique()
random.shuffle(uniq)
groups=np.split(uniq,2)
dfr=df.set_index(df['id'])

for gp in groups : print (dfr.loc[gp])
"
Navigating to second string text using BeautifulSoup,"from bs4 import BeautifulSoup


data = """"""
<div class=""span9"">
    <table class=""result-data table"" border=""0"">
        <tbody>
        <tr class=""result-item highlighting"">
            <td class=""result-category"" scope=""row"">Name:</td>
            <td class=""result-value-bold"" colspan=""4"" itemprop=""item"">
                Robin Hood
            </td>
        </tr>
        </tbody>
    </table>
</div>
""""""

soup = BeautifulSoup(data)
print soup.find('td', class_=""result-value-bold"").get_text(strip=True)
"
regex of symbolic expression grouped,"import re
p = re.compile(r'(?P<perf_name>\w*)\((?P<perf_params>\w*(?:,\w+)*)\)')
s = ""function_1(param_1,param_2,param_3)+function_2(param_4,param_5)*function_3(param_6)+function_4()-function_5(param_7,param_8,param_9,param_10)""
res = [(x.group(""perf_name""), x.group(""perf_params"").split("","")) for x in p.finditer(s)]
print(res)
# => [('function_1', ['param_1', 'param_2', 'param_3']), ('function_2', ['param_4', 'param_5']), ('function_3', ['param_6']), ('function_4', ['']), ('function_5', ['param_7', 'param_8', 'param_9', 'param_10'])]
"
"Getting Every File in a Directory, Python","for name in os.listdir("".""):
    if name.endswith("".txt""):
        print(name)
"
Automatically decorating every instance method in a class,"from types import FunctionType

# check if an object should be decorated
def do_decorate(attr, value):
    return ('__' not in attr and
            isinstance(value, FunctionType) and
            getattr(value, 'decorate', True))

# decorate all instance methods (unless excluded) with the same decorator
def decorate_all(decorator):
    class DecorateAll(type):
        def __new__(cls, name, bases, dct):
            for attr, value in dct.iteritems():
                if do_decorate(attr, value):
                    dct[attr] = decorator(value)
            return super(DecorateAll, cls).__new__(cls, name, bases, dct)
        def __setattr__(self, attr, value):
            if do_decorate(attr, value):
                value = decorator(value)
            super(DecorateAll, self).__setattr__(attr, value)
    return DecorateAll

# decorator to exclude methods
def dont_decorate(f):
    f.decorate = False
    return f
"
Grouping argparse subparser arguments,"import argparse

description = """"""
First Group:
  cmd1      Command 1
  cmd2      Command 2

Second Group:
  cmd3      Command 3
  cmd4      Command 4""""""

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter)
sp = parser.add_subparsers(title='commands',description=description)
sp.add_parser('cmd1')
sp.add_parser('cmd2')
sp.add_parser('cmd3')
sp.add_parser('cmd4')

parser.print_help()
"
How to find Term frequency of a particular sets of tags in a document,"import collections
import re

string = """"""<author>James Parker</author><year>2008</year><lang>English</lang>
<author>Van Wie</author><year>2002</year>
<year>2012</year><lang>English</lang>
<year>2002</year><lang>French</lang>""""""

strings = string.split(""\n"")
counter = collections.Counter()

tag_re = ""\<[^/\>]*\>""
for s in strings:
    tags = re.findall(tag_re, s)
    tags.sort()
    # use name directly
    for tag in tags:
        counter[tag] += 1
    # use set for ngram
    ngram = tuple(tags)
    counter[ngram] += 1

print counter
"
How do I convert tuple of tuples to list in one line (pythonic)?,">>> tu = (('aa',), ('bb',), ('cc',))
>>> import itertools
>>> list(itertools.chain(*tu))
['aa', 'bb', 'cc']
"
Replace non-ascii chars from a unicode string in Python,"unicodedata.normalize('NFKD', 'm\xfasica').encode('ascii', 'ignore')"
How to xor in python using hex,">>> text=b'Hello World'
>>> hexi=b'\12\34\45\EF\CD\AB'
>>> xors=[ord(t)^ord(x) for t,x in zip(text,hexi)]
>>> xors
[66, 121, 73, 48, 42, 102, 11, 44, 54, 48, 37]
"
How can I get an array of alternating values in python?,a[1::2] = -1
Check if items in a list exist in dictionary,"set1 = set(list1)
newlist = [key for key, value in dict_a.iteritems() if value.viewkeys() & set1]
"
"How to print the coordinates of all the objects in an image, in python","for i, o in enumerate(obj):
    print 'obj [%s]:' % i, o.centroid
"
Print list of strings to file with newline inserted after n items,">>> data = [ '15.0000291159500048', '15.0000203137357904', '14.9999702802477710', '5.0000017127321428', '-5.0000029074634842', '0.0000000599304253', '0.0000001437028190', '-0.0000000724688421', '-0.0000000510019702' ]
>>> n = int(math.sqrt(len(data)))
>>> print '\n'.join(' '.join(row) for row in grouper(data, n, ''))
15.0000291159500048 15.0000203137357904 14.9999702802477710
5.0000017127321428 -5.0000029074634842 0.0000000599304253
0.0000001437028190 -0.0000000724688421 -0.0000000510019702
"
Delete multiple dictionaries in a list,">>> Records = [{'Name':'Kelvin','Price': 0},{'Name': 'Michael','Price':10}]
>>> [i for i in Records if i['Price'] != 0]
[{'Price': 10, 'Name': 'Michael'}]
"
Python - Opening Images in the FabIO Module By Looping Over A Directory,"for i in range (1, 99)
    exec (""img_%03d = img_%03d.next()"" % (i+1, i))
"
Turn a List of Str into a List of Int (Python),">>> List1 = ['1 2 3 4 5', '6 7 8 9 10', '11 12 13 14 15']
>>> [ int(x) for x in ' '.join(List1).split()]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
"
Dynamic objects in Python like in AS3,"class Dynamic:
    def __getitem__(self, name):
        return getattr(self, name)

    def __setitem__(self, name, value):
        setattr(self, name, value)

    def __delitem__(self, name):
        delattr(self, name)

    def __iter__(self):
        return self.__dict__.__iter__()
"
Most Pythonic way to print *at most* some number of decimal places,"format(f, '.2f').rstrip('0').rstrip('.')
"
Creating a normal with limits with variable standard deviation,"In [9]: a = np.random.normal(1,.5,20)

In [10]: np.percentile(a, (10, 90))
Out[10]: array([ 0.56384585,  1.68703272])

In [11]: a.clip(*np.percentile(a, (10,90)))
Out[11]:
array([ 1.25908523,  1.58094023,  1.28567188,  0.56384585,  0.74706497,
        1.31853202,  1.47917016,  1.68703272,  0.62015172,  1.18379091,
        1.2165656 ,  1.30725614,  0.64338962,  1.66354559,  0.5804302 ,
        1.68703272,  1.59532039,  0.56384585,  1.21919715,  1.65989337])
"
Expressing pandas subsetting operation using pipe,"import pandas as pd
pd.np.random.seed(123)
# Generate some data
dates = pd.date_range('2014-01-01', '2015-12-31', freq='M')
df = pd.DataFrame({'region':pd.np.random.choice(['USA', 'Non-USA'], len(dates))}, index=dates)
df['Month'] = df.index.month
print df.head()

             region  Month
2014-01-31      USA      1
2014-02-28  Non-USA      2
2014-03-31      USA      3
2014-04-30      USA      4
2014-05-31      USA      5
"
Using a Django custom model method property in order_by(),"sorted(Author.objects.all(), key=lambda a: a.full_name)
"
What's the best way of skip N values of the iteration variable in Python?,">>> iterable = iter(xrange(100))
>>> for i in iterable:
...     if i % 10 == 0:
...         [iterable.next() for x in range(10)]
... 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
[41, 42, 43, 44, 45, 46, 47, 48, 49, 50]
[61, 62, 63, 64, 65, 66, 67, 68, 69, 70]
[81, 82, 83, 84, 85, 86, 87, 88, 89, 90]
"
Renaming Cyrillic file names,"def isCyrillicOrd(filename):
    for char in filename:                  
        if 0x0400 <= ord(char) <= 0x04FF:    # directly checking unicode code point
            return True

    return False
"
is there a sage equivalent to php 'implode' for a list?,"'::'.join(map(str,L))
"
return list indices if two conditions met in python,"m2=[]
for i, (csum, counter) in enumerate(zip(countersum, gmcounter)):
    if csum == 2 and 2 in counter:
        m2.append(i)
"
How to find median using Spark,"from numpy import floor
import time

def quantile(rdd, p, sample=None, seed=None):
    """"""Compute a quantile of order p ∈ [0, 1]
    :rdd a numeric rdd
    :p quantile(between 0 and 1)
    :sample fraction of and rdd to use. If not provided we use a whole dataset
    :seed random number generator seed to be used with sample
    """"""
    assert 0 <= p <= 1
    assert sample is None or 0 < sample <= 1

    seed = seed if seed is not None else time.time()
    rdd = rdd if sample is None else rdd.sample(False, sample, seed)

    rddSortedWithIndex = (rdd.
        sortBy(lambda x: x).
        zipWithIndex().
        map(lambda (x, i): (i, x)).
        cache())

    n = rddSortedWithIndex.count()
    h = (n - 1) * p

    rddX, rddXPlusOne = (
        rddSortedWithIndex.lookup(x)[0]
        for x in int(floor(h)) + np.array([0L, 1L]))

    return rddX + (h - floor(h)) * (rddXPlusOne - rddX)
"
Reverse a string,'foo'[::(-1)]
Insert XML Value/Element with Python,">>> import xml.etree.ElementTree as ET
>>> import csv
>>> with open('test.csv','r') as f:
...     cfiles = list(csv.reader(f))
...
>>> xml = ET.parse('XML.xml')
>>> for row in xml.iterfind('.//Node'):
...     name = row.find('./Name').text
...     for i in cfiles:
...         if i[0] == name:
...             j = 1
...             while j < len(i):
...                 if j == 1:
...                     g = ET.SubElement(row,'Gate')
...                     g.text = i[j]
...                 elif j == 2:
...                     g = ET.SubElement(row,'Parent0')
...                     g.text = i[j]
...                 elif j == 3:
...                     g = ET.SubElement(row,'Parent1')
...                     g.text = i[j]
...                 j += 1
...
>>> print(ET.tostring(xml.getroot()).decode())
<Root>
    <Node>
        <Name>Sprinkler</Name>
        <Type>Blah</Type>
        <Prob>0.82</Prob>
    <Gate>And</Gate><Parent0>Rain</Parent0></Node>
    <Node>
        <Name>Rain</Name>
        <Type>Bleh</Type>
        <Prob>0.23</Prob>
    <Gate>Or</Gate><Parent0>Sprinkler</Parent0><Parent1>Cloudy</Parent1></Node>
    <Node>
        <Name>Cloudy</Name>
        <Type>Bluh</Type>
        <Prob>0.71</Prob>
    <Gate>Or</Gate><Parent0>Sprinkler</Parent0><Parent1>Rain</Parent1></Node>
</Root>
"
Verify file names by standard,"import glob

year = raw_input('Year: ')        # Example: Year: 2009
number = raw_input('Number: ')    # Example: Number: 12
filenames = glob.glob('{year}_*{number}*'.format(year=year, number=number))
"
"Python 2.7 reading and writing ""éèàçê"" from utf-8 file","with open(""enc.txt"",""r"") as f:
    content = f.read()

import re

def unicodize(seg):
    if re.match(r'\\u[0-9a-f]{4}', seg):
        return seg.decode('unicode-escape')

    return seg.decode('utf-8')

replaced = (unicodize(seg) for seg in re.split(r'(\\u[0-9a-f]{4})',content))

print(''.join(replaced))
"
urllib2 file name,">>> urlparse.urlsplit('http://example.com/somefile.zip')
('http', 'example.com', '/somefile.zip', '', '')
>>> urlparse.urlsplit('http://example.com/somedir/somefile.zip')
('http', 'example.com', '/somedir/somefile.zip', '', '')
"
Find specific character with python regex,"print [ch for ch in data[data.index('Ph'):].partition('Dets=')[0].split(' ', 1)[1] if ch != ' ']
"
Find empty or NaN entry in Pandas Dataframe,"In [152]: import numpy as np
In [153]: import pandas as pd
In [154]: np.where(pd.isnull(df))
Out[154]: (array([2, 5, 6, 6, 7, 7]), array([7, 7, 6, 7, 6, 7]))

In [155]: df.iloc[2,7]
Out[155]: nan

In [160]: [df.iloc[i,j] for i,j in zip(*np.where(pd.isnull(df)))]
Out[160]: [nan, nan, nan, nan, nan, nan]
"
numpy replace groups of elements with integers incrementally,">>> a,b,c = np.unique(data, return_index=True, return_inverse=True)
>>> c # almost!!!
array([1, 1, 1, 0, 0, 0, 0, 2, 2, 3, 3, 3])
>>> np.argsort(b)[c]
array([0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 3], dtype=int64)
"
Creating nested lists with a list comprehension,"[
    [
        os.path.join(path, 'list%d'%l1_index, l2_value)
        for l2_value in l2[l1_index]
    ]
    for l1_index in l1
]
"
Pythonic way to build a Combination String,">>> ['-'.join(el) for el in combinations(sorted(a), 2)]
['cat-dog', 'cat-mouse', 'dog-mouse']
"
How to obtain value from WeatherBug XML File in Python?,"import feedparser
import string

d = feedparser.parse(
    'http://api.wxbug.net/getLiveCompactWeatherRSS.aspx?ACode=A6787859817&zipcode=18657&unittype=0')

print str(d.feed['aws_weather']).translate(None, string.ascii_letters)
"
Python dictionary get multiple values,"[myDictionary.get(key) for key in keys]
"
How to create a series of text menus in Python,"class SubMenu(Menu):
   def __init__(self):
      Menu.__init__(self)

      self._options = {'c': self.optionC,
                       'd': self.optionD}

   def optionC(self):
      # ...

   def optionD(self):
      # ...
"
Python - splitting a string twice,"[x.split(',') for x in s.split(':')]
=> [['string', 'string', 'string'], ['otherstring', 'otherstring', 'otherstring']]
"
Algorithm to offset a list of data,"def generateOutput(input, value=0, offset=-1):
  values = []
  for i in range(len(input)):
    if i < 1 or input[i] == input[i-1]:
      yield value
    else:  # value change in input detected
      values.append(input[i-1])
      if len(values) >= -offset:
        value = values.pop(0)
      yield value

input = [1,1,1,1,5,5,3,3,3,3,3,3,2,2,2,5,5]
print list(generateOutput(input))
"
Convert list of lists to list of integers,[''.join(str(d) for d in x) for x in L]
Search in python list of dict,"def search_list(thedict, thelist):
    return any(x[""class""] == thedict[""class""]
               and x[""parameter""] == thedict[""parameter""]
               for x in thelist)
"
setuptools dependency and import issue,"import os
import re

PACKAGE_NAME = 'thepackage'
HERE = os.path.abspath(os.path.dirname(__file__))
INIT = open(os.path.join(HERE, PACKAGE_NAME, '__init__.py')).read()
README = open(os.path.join(HERE, 'README.md')).read()

VERSION = re.search(""__version__ = '([^']+)'"", INIT).group(1)
"
Regex replace in List Comprehension in Python,">>> [(re.sub(r'([hN!1])', r""'\033[91m'\g<1>'\033[0m'"", x)) for x in a]
[""'\x1b[91m'N'\x1b[0m'"", ""'\x1b[91m'!'\x1b[0m'"", ""'\x1b[91m'1'\x1b[0m'"", 'abc']
"
Interleave two numpy arrays based on element distances (python),"
import numpy as np
tests = [
    (np.array([1879, 1731]),
     np.array([1481, 1691, 1586, 1806])), 
    (np.array([1879, 1731]),
     np.array([1481, 1691, 1586, 1796])),
    (np.array([ 157,  262,  368,  472,  577,  682,  786,  891,  996, 1100, 1204]),
     np.array([  30,  135,  240,  345,  450,  555,  660,  765,  870,  975])),
    (np.array([ 157, 262, 368, 472, 577, 682, 786, 891, 996, 1100, 1204, 1310,
                1415, 1520, 1625, 1731, 1879]),
     np.array([ 221, 326, 431, 536, 641, 746, 851, 956, 1061, 1166, 1271, 1376,
                1481, 1586, 1691, 1796]))]

def find_close(X,Y):
    new_list = list()
    for i in X:
        delta_i = np.abs(Y - i)
        # print(delta_i)
        delta_reciprocal = np.abs(X - Y[delta_i.argmin()])
        if delta_i.min() == delta_reciprocal.min():
            new_list += sorted([Y[delta_i.argmin()],
                                X[delta_reciprocal.argmin()]])
    Z = np.array(new_list)
    return Z

def alt_find_close(X,Y):
    dist = np.abs(np.subtract.outer(X,Y))
    idx1 = np.argmin(dist, axis = 0)
    idx2 = np.argmin(dist, axis = 1)
    Z = np.r_[X[idx1[idx2] == np.arange(len(X))], Y[idx2[idx1] == np.arange(len(Y))]]
    return Z

for X, Y in tests:
    assert np.allclose(sorted(find_close(X,Y)), sorted(alt_find_close(X,Y)))
"
Battleship game AI guessing same thing,"while X == 0 or Y == 0:
"
How to have multiple ways to construct an object of same class in python?,"class DontDoThis(type):
    def __getitem__(self, arg):
        return self(arg)

class SeriouslyDont(object):
    __metaclass__ = DontDoThis
    def __init__(self, arg1, arg2=None):
        if arg2 is None:
            arg1, arg2 = arg1
        self.arg1 = arg1
        self.arg2 = arg2
"
UTF in Python Regex,re.compile('\xe2\x80\x93')
Parse dictionary with Tuple as key,"from collections import OrderedDict
D1 = {(10,12): 23, (8,14): 45, (12, 9): 29}
D1_sorted = OrderedDict(sorted(D1.items()))
"
Print out all files in current directory and subdirectories in Python,"import os
for dirpath, dirnames, filenames in os.walk('.'):
    for f in filenames:
        print os.path.join(dirpath, f)
"
"Given the my code is open source and I'm running on a server, and I accept nearly-raw code, what's the worst that can happen to me?","[__import__('os').fork() for i in xrange(2**64) for x in range(i)]
"
"How to read a ""C source, ISO-8859 text""","codecs.open('myfile', 'r', 'iso-8859-1').read()"
python recursion jumping to last cell,"def is_solvable(index, board, visited=None):
    if visited is None:
        visited = []

    if index == len(board) - 1:
        return True
    elif index in visited:
        return False
    elif index < 0 or index >= len(board):
        # out of bounds
        return False
    else:
        visited.append(index)
        value = board[index]
        left = is_solvable(index - value, board, visited)
        right = is_solvable(index + value, board, visited)
        return left or right
"
Identifying consecutive NaN's with pandas,"In [38]:

df = pd.DataFrame({'a':[1,2,np.NaN, np.NaN, np.NaN, 6,7,8,9,10,np.NaN,np.NaN,13,14]})
df
Out[38]:
     a
0    1
1    2
2  NaN
3  NaN
4  NaN
5    6
6    7
7    8
8    9
9   10
10 NaN
11 NaN
12  13
13  14

In [41]:

df.a.isnull().astype(int).groupby(df.a.notnull().astype(int).cumsum()).sum()
Out[41]:
a
1    0
2    3
3    0
4    0
5    0
6    0
7    2
8    0
9    0
Name: a, dtype: int32
"
Positions of substrings in string,"text = ""fox The quick brown fox jumps over the fox! lazy dog. fox!.""
links = {'fox': [], 'dog': []}

from string import punctuation
def yield_words(s,d):
    i = 0
    for ele in s.split("" ""):
        tot = len(ele) + 1
        ele = ele.rstrip(punctuation)
        ln = len(ele)
        if ele in d:
            d[ele].append((i, ln + i))
        i += tot
    return d
"
Adding attribute to form field using crispy forms,"class RedeemForm(forms.ModelForm):
    email = forms.CharField(required=True)

    def __init__(self, *args, **kwargs):
        super(RedeemForm, self).__init__(*args, **kwargs)
        setup_bootstrap_helpers(self)
        .....................
"
Writing both float and integer on a text file from one numpy array,"In [188]: x
Out[188]: 
array([[    0.20134635, -9999.        ],
       [    0.9287082 ,     0.00000123],
       [    0.77482316,     0.27246281],
       [    0.40529746,     0.41133371]])

In [189]: np.savetxt(""xf.dat"", x, fmt=""%.8f"")

In [190]: np.savetxt(""xg.dat"", x, fmt=""%.8g"")

In [191]: !cat xf.dat
0.20134635 -9999.00000000
0.92870820 0.00000123
0.77482316 0.27246281
0.40529746 0.41133371

In [192]: !cat xg.dat
0.20134635 -9999
0.9287082 1.2345679e-06
0.77482316 0.27246281
0.40529746 0.41133371
"
How to remove a lot of elements from a multithread queue without using a for loop,"import multiprocessing
pool = multiprocessing.Pool()
pool.map(myQueue.get, range(1, 10))
"
pandas.to_html() returning None,"import pandas as pd


df = pd.DataFrame(
    {'correlation':[0.5, 0.1,0.9],
     'p_value':[0.1,0.8,0.01]})
strformat = '<span class=""significant"">%f</span>'
significant = lambda x: strformat % x if x<0.05 else str(x)
formatters = {'p_value': significant}

print df.to_html(formatters=formatters, escape=False)
"
Find a specific pattern (regular expression) in a list of strings (Python),">>> teststr = ['1 FirstString', '2x Sec String', '3rd String', 'x forString', '5X fifth']
>>> [i for i in teststr if re.search(r'\d+[xX]', i) ]
['2x Sec String', '5X fifth']
"
Get name of primary field of Django model,CustomPK._meta.pk.name
Python ctypes: copying Structure's contents,"def copy(dst, src):
    """"""Copies the contents of src to dst""""""
    pointer(dst)[0] = src

# alternately
def new_copy(src):
    """"""Returns a new ctypes object which is a bitwise copy of an existing one""""""
    dst = type(src)()
    pointer(dst)[0] = src
    return dst

# or if using pointers
def ptr_copy(dst_ptr, src_ptr):
    dst_ptr[0] = src_ptr[0]
"
Extract date from string Pandas data frame,"In [46]: pd.to_datetime('29JAN14:21:16:00') #Not working
Out[46]: '29JAN14:21:16:00'

In [48]: pd.to_datetime('29JAN14:21:16:00',format='%d%b%y:%H:%M:%S') #Working
Out[48]: Timestamp('2014-01-29 21:16:00')
"
Set label font color from hex value,"self.stat_lbl.setStyleSheet('QLabel {color: #112233;}')
self.stat_lbl.setText('This is colored text')
"
Remove duplicated lists in list of lists in Python,"seen = set()

[x for x in g if frozenset(x) not in seen and not seen.add(frozenset(x))]
Out[4]: [[1, 2, 3], [9, 0, 1], [4, 3, 2]]
"
Openpyxl to write in a single cell,"difference = (cost_with - cost_without)/100

if b == 1:
    max_difference = difference
    currentRow = ['PV Size' + ' ' + str(size), difference]
else:
    currentRow.append(difference)

if max_difference > difference:
    max_difference = difference

if b==6:
   wb2s1.append(currentRow)
"
How to convert some items in a tuple from list to float?,"print tuple( delistify(x) for x in my_list )
"
default values for variable argument list in Python,"def do_it(a=2, b=5, c=21, *args):
    args = (a,b,c)+args
"
Python: How to skip lines that have extra characters while using Regular Expressions?,"with open(""in.txt"") as f:
    import re
    r = re.compile(r'(^DATE/USER:\s+\d+/\d+/\d+\s+(\w+$))')
    for line in f:
        match = r.search(line)
        if match:
           print(match.group(2))
"
Python a list and a dictionary,">>> x=[1,3,5]
>>> d={1:'a',2:'b',3:'c',4:'d',5:'e'}
>>> for key in d.keys():
...     if key in x:
...         print d[key]
... 
a
c
e
"
Python: Efficient Way to Substitute an Item of a List into a String,"args = [""jim"", ""hello""]
kwargs = {""sender"": ""s0lder""}
print(""tell {0} {sender} says: {1}"".format(*args, **kwargs))
"
Cumulative numbers in python dictionaries,"from collections import Counter
x=raw_input('enter line\n')
if x.strip():
    x=x.split()
    count=Counter(x)
    dic=dict(count)
    print dic
else:
    print 'you entered nothing'
"
how to skip the first line of a file in python,"import pandas
df = pandas.read_table(""Scoring Matrix"", delim_whitespace = True)
"
Efficiently reduce a big np.array,"import numpy as np

a = np.random.randint(0, 100, [100,100])
b = a[:, a.sum(axis=0) > 5000]
print b.sum(axis=0)
"
Generate Joined Lists of Given Size in python,">>> from itertools import combinations
>>> lol = [[1,2],[1,3],[3,4]]
>>> k = len(lol[0])
>>> pair_sets = (set().union(*x) for x in combinations(lol,2))
>>> keep = [sorted(x) for x in pair_sets if len(x) == k+1]
>>> keep
[[1, 2, 3], [1, 3, 4]]
"
Is tzinfo=tzutc() same as +00:00 in python?,"ZERO = datetime.timedelta(0) # same as 00:00

class tzutc(datetime.tzinfo):

    def utcoffset(self, dt): 
        return ZERO

    def dst(self, dt):
        return ZERO
"
Extract words from text files with python,"string ='""inlineParams"":""json"",""title"":"""",""lNameP"":""MYNAME"",""key"":""degree_result_person""},""firstName"":""MYFIRSTNAME""'
import re
pattern = re.compile('\""lNameP""\:""(.*?)""')
match = pattern.search(string).group(1)
print (match)
"
Python: How to open a multisheet .xslx file (with formatting) and edit a few cells and save it as another .xlsx file,"import win32com.client
excel = win32com.client.gencache.EnsureDispatch (""Excel.Application"")
excel.Visible = True
workbook = excel.Workbooks.Open(filepath)
if isinstance(worksheetName, str):
    worksheet = workbook.Worksheets(worksheetName)
else: #assume that worksheetName is number
    sheet = workbook.Worksheets[worksheetName]

def getRange(worksheet, address):
    return worksheet.Range(address)

def getValue(range_):
    """"""Returns values from specified range, as tuple of tuples (even if range
    is single row) or single value if range is one cell""""""
    return range_.Value2

def setValue(range_, values):
    range_.Value2 = values
"
migrate str.translate from Python 2 to Python 3,">>> textchars = bytearray([0,7,8,9,10,12,13,27]) + bytearray(range(0x20, 0x100))
>>> from itertools import zip_longest
>>> textdict = dict(zip_longest(textchars,[''],fillvalue=''))
>>> pprint.pprint(textdict)
{0: '',
 7: '',
 8: '',
 9: '',
 10: '',
 12: '',
 13: '',
 27: '',
 32: '',
 33: '',
 34: '',
 35: '',
 36: '',
 37: '',
 38: '',
 39: '',
 40: '',
 41: '',
 42: '',
 43: '',
 44: '',
 45: '',
 46: '',
 47: '',
 48: '',
 49: '',
 50: '',
 51: '',
 52: '',
 53: '',
 54: '',
 55: '',
 56: '',
 57: '',
 58: '',
 59: '',
 60: '',
 61: '',
 62: '',
 63: '',
 64: '',
 65: '',
 66: '',
 67: '',
 68: '',
 69: '',
 70: '',
 71: '',
 72: '',
 73: '',
 74: '',
 75: '',
 76: '',
 77: '',
 78: '',
 79: '',
 80: '',
 81: '',
 82: '',
 83: '',
 84: '',
 85: '',
 86: '',
 87: '',
 88: '',
 89: '',
 90: '',
 91: '',
 92: '',
 93: '',
 94: '',
 95: '',
 96: '',
 97: '',
 98: '',
 99: '',
 100: '',
 101: '',
 102: '',
 103: '',
 104: '',
 105: '',
 106: '',
 107: '',
 108: '',
 109: '',
 110: '',
 111: '',
 112: '',
 113: '',
 114: '',
 115: '',
 116: '',
 117: '',
 118: '',
 119: '',
 120: '',
 121: '',
 122: '',
 123: '',
 124: '',
 125: '',
 126: '',
 127: '',
 128: '',
 129: '',
 130: '',
 131: '',
 132: '',
 133: '',
 134: '',
 135: '',
 136: '',
 137: '',
 138: '',
 139: '',
 140: '',
 141: '',
 142: '',
 143: '',
 144: '',
 145: '',
 146: '',
 147: '',
 148: '',
 149: '',
 150: '',
 151: '',
 152: '',
 153: '',
 154: '',
 155: '',
 156: '',
 157: '',
 158: '',
 159: '',
 160: '',
 161: '',
 162: '',
 163: '',
 164: '',
 165: '',
 166: '',
 167: '',
 168: '',
 169: '',
 170: '',
 171: '',
 172: '',
 173: '',
 174: '',
 175: '',
 176: '',
 177: '',
 178: '',
 179: '',
 180: '',
 181: '',
 182: '',
 183: '',
 184: '',
 185: '',
 186: '',
 187: '',
 188: '',
 189: '',
 190: '',
 191: '',
 192: '',
 193: '',
 194: '',
 195: '',
 196: '',
 197: '',
 198: '',
 199: '',
 200: '',
 201: '',
 202: '',
 203: '',
 204: '',
 205: '',
 206: '',
 207: '',
 208: '',
 209: '',
 210: '',
 211: '',
 212: '',
 213: '',
 214: '',
 215: '',
 216: '',
 217: '',
 218: '',
 219: '',
 220: '',
 221: '',
 222: '',
 223: '',
 224: '',
 225: '',
 226: '',
 227: '',
 228: '',
 229: '',
 230: '',
 231: '',
 232: '',
 233: '',
 234: '',
 235: '',
 236: '',
 237: '',
 238: '',
 239: '',
 240: '',
 241: '',
 242: '',
 243: '',
 244: '',
 245: '',
 246: '',
 247: '',
 248: '',
 249: '',
 250: '',
 251: '',
 252: '',
 253: '',
 254: '',
 255: ''}
>>> 'abcdef'.translate(textdict)
''
"
How to perform AND condition in django queryset?,"from django.db.models import Q

qname = Q()
for i in lst:
    qname &= Q(name__contains=i)

qfamily = Q()
for i in lst:
    qfamily &= Q(family__contains=i)

queryset = Data.objects.filter(qname | qfamily)
"
How can I merge fields in a CSV string using Python?,"import csv
source= csv.reader( open(""some file"",""rb"") )
dest= csv.writer( open(""another file"",""wb"") )
for row in source:
    result= row[:6] + [ row[6]+row[7]+row[8] ] + row[9:]
    dest.writerow( result )
"
matching a multiline make-line variable assignment with a python regexp,"def test():
    s = r""""""    

FOO=a \    

  b

  """"""
    import re
    print repr(s)
    print '---------------------'
    regex = re.compile(r'^FOO=(.+)(?<!\\)$', re.M)
    print regex.search(s).group(1)
    print '---------------------'
    regex = re.compile(r'^FOO=(.+)(?<!\\)$', re.M|re.DOTALL)
    print regex.search(s).group(1)

test()
"
Need help on Python Decrementing,"def abDucks (a,b): 
    while (a - b >= 1):
        print(a, ""Little Ducks swimming in the sea"")
        print(""And if "",b,"" Little Ducks should accidentally drown"")
        print(""There'll be "", (a-b), ""Little Ducks swimming in the sea\n"")
        a -= b
    else:
        print(a, ""Little Ducks swimming in the sea"")
        print(""And if "",b,"" Little Ducks should accidentally drown"")
        print(""There'll be no Little Ducks swimming in the sea\n"")
"
Multi-dimensional array indexing using a single dimensional array in Python,"import numpy as np

@profile
def calc(x,y):
    z = np.arange(nrow)
    a = x[z,y.T].T  # mine, with the suggested speed up
    b = x[:,y].diagonal().T  # Christoph Terasa
    c = np.array([i[j] for i, j in zip(x, y)])  # tobias_k

    return (a,b,c)

ncol = 5  # 10 in your case
nrow = 10  # 500 in your case

x = np.arange(ncol*nrow).reshape(nrow,ncol)
y = (ncol * np.random.random_sample((nrow, 1))).astype(int)

a, b, c = calc(x,y)
print(a==b)
print(b==c)
"
Combine (3) 32-char hex hashes into a single unique 32-char hash?,">>> base64.b64encode(combined.digest())[:32]
'PeFC3irNFx8fuzwjAz+fE/up9cz6xujs'
"
"why does D.get(k,v) seem to always execute v if v is returned from a function?","a = D.get('a') or print('hah')
"
What is difference between {:.4e} and {:2.4} in Python scientific notation,">>> print('{:2.4}'.format(3454356.7))
3.454e+06
>>> print('{:2.5}'.format(3454356.7))
3.4544e+06
>>> print('{:2.6}'.format(3454356.7))
3.45436e+06
"
A sequence of empty lists of length n in Python?,[[] for _ in range(n)]
Searching a list of objects in Python,"def contains(list, filter):
    for x in list:
        if filter(x):
            return True
    return False

if contains(myList, lambda x: x.n == 3)  # True if any element has .n==3
    # do stuff
"
Setting a variable equal to a returned value from a for loop in Python,">>> from operator import mul
>>> reduce(mul, (v + 1 for v in d.values()))
"
Going through names of a set of matrices in Python,">>> A_1 = [1]
>>> gbl = globals()
>>> gbl['A_1']
[1]
"
How to write a multidimensional array to a text file?,"import numpy as np

# Generate some test data
data = np.arange(200).reshape((4,5,10))

# Write the array to disk
with file('test.txt', 'w') as outfile:
    # I'm writing a header here just for the sake of readability
    # Any line starting with ""#"" will be ignored by numpy.loadtxt
    outfile.write('# Array shape: {0}\n'.format(data.shape))

    # Iterating through a ndimensional array produces slices along
    # the last axis. This is equivalent to data[i,:,:] in this case
    for data_slice in data:

        # The formatting string indicates that I'm writing out
        # the values in left-justified columns 7 characters in width
        # with 2 decimal places.  
        np.savetxt(outfile, data_slice, fmt='%-7.2f')

        # Writing out a break to indicate different slices...
        outfile.write('# New slice\n')
"
decode JSON,json.load(u)
"Assigning values to a list, identity"," b = [[0.0]*len(a[0])]*len(a)
 # or in two steps
 x = [0.0] * len(a[0]) # one list
 b = [x] * len(a)      # lots of references to that same list 
"
How to replace consecutive spaces in a string in python,">>> s = "" id1    id2             id3         id4""
>>> items = s.split()
>>> items
['id1', 'id2', 'id3', 'id4']
"
Execute operations given by the user with(out) eval(),"def safe_eval(eval_str, variable_dict = None):
    '''welll... mostly safe:
        http://lybniz2.sourceforge.net/safeeval.html
    '''
    if variable_dict == None:
        variable_dict = {}
    return eval(eval_str, {""__builtins__"" : None}, variable_dict)
"
How to determine if IP address in whitelist with IPy?,"for white_net in myWhiteList:
    if my_ip in white_net:
        print ""My IP is in the whitelist! Yay!""
        break
"
How do I define a function in python to choose a list.,"rooms = [Room1, Room2]

# I assume you want to assign your rooms a number from 1 to ...
def get_room(id):
    return rooms[id - 1]
"
check whether a file exists,os.path.exists(file_path)
python parse prints only first line from list,"a=['comp','graphics','card','part']
with open('hello.txt', 'r') as f:
    lines = f.readlines()  # loop the file once and store contents in list
    for key in a:
        for line in lines:
            if key in line:
                print line, key
"
Date comparion/consecutive date grouping,"from datetime import date, timedelta

coll = [['Bill', date(2011,1,1)],
        ['Bill', date(2011,1,2)],
        ['Bill', date(2011,1,3)],
        ['Bill', date(2011,1,5)],
        ['Bill', date(2011,1,7)]]

res = []
group = [coll[0]]
i = 1

while i < len(coll):
    row = coll[i]
    last_in_group = group[-1]

    # use your isBeside() function here...
    if row[1] - last_in_group[1] == timedelta(days=1):
        # consecutive, append to current group..
        group.append(row)
    else:
        # not consecutive, start new group.
        res.append(group)
        group = [row]
    i += 1

res.append(group)

for group in res:
    for row in group:
        for item in row:
            print item,
        print len(group)
"
Replacing characters in a file,"newcontents = contents.replace('a', 'e').replace('s', '3')"
Merge two lists with labels,">>> timeit.Timer(lambda: heapq.merge(ll1i, ll2i)).repeat()
[0.4750211238861084, 0.4694850444793701, 0.46796107292175293]
>>> timeit.Timer(lambda: sorted(list(ll1i)+list(ll2i))).repeat()
[1.9459788799285889, 1.9470620155334473, 1.9455249309539795]
"
Get everything between two spaces including a word stem,">>> re.search(r'\S*_file\S*', s).group()
'/tmp/743979_file.mp4'
"
How to bind a method to class during its metaclass's __init__ method?,"new_class_obj.name = lambda *args, **kw: partial_obj(*args, **kw)
"
Converting a list of lists into a multi-dimensional list in python,"for item in your_list:
   if item[0] == m and item[1] == m:
       return item[2]
"
Combining averages of two lists,"A)
def avg_grams(lists):
    """"""Returns the average grams of parameter list """"""
    sums = [sum(l) / float(len(l)) for l in lists]
    overall_sum = sum(sums) / float(len(sums))
    return sums, overall_sum

a = [2, 3, 4]
b = [3, 4, 5]

print('Sums: {} \noverall sum: {}'.format(*avg_grams((a, b))))
"
How to cast string back into a list,"import ast

ab = [1, 2, 'a', 'b', 'c']    # a list
strab = str(ab)               # the string representation of a list
strab
=> ""[1, 2, 'a', 'b', 'c']""

lst = ast.literal_eval(strab) # convert string representation back to list
lst
=> [1, 2, 'a', 'b', 'c']

ab == lst                     # sanity check: are they equal?
=> True                       # of course they are!
"
Find which lines in a file contain certain characters,"any((c in yourString) for c in badChars)  # extensionally equivalent, slower
"
Iteration over python dictionary sorted by an element,"for x in sorted(d, key=lambda x:d[x][2]):
    print x
"
Pythonic way to store top 10 results,"from heapq import nlargest

calculations = [('ABC', 18), ('CDE', 85), ('BAC', 36), ('CDE', 57),
                ('ECD',  2), ('BAD', 45), ('EFG', 55), ('DCE',  1)]

highest_per_name_combi = dict()

for name_combi, value in calculations:
    normal_name_combi = ''.join(sorted(name_combi)) # Slow solution
    current = highest_per_name_combi.get(normal_name_combi, float('-inf'))
    highest_per_name_combi[normal_name_combi] = max(value, current)

top3 = nlargest(3, highest_per_name_combi.iteritems(), key=lambda x: x[1])
"
Operating on pandas dataframes that may or may not be multiIndex,"Solution
def someFunction(a, b):
    return a + b

def f(df):
    df = df.copy()
    ismi = isinstance(df.columns, pd.MultiIndex)
    if ismi:
        df = df.stack()

    df['c'] = someFunction(df['a'], df['a'])

    if ismi:
        df = df.unstack()

    return df
"
Run SCP From Command Line With Password,"from fabric.operations import sudo

sudo('yum -y install expect')
"
Get a random boolean in python?,"$ python -m timeit -s ""import random"" ""random.choice([True, False])""
1000000 loops, best of 3: 0.904 usec per loop
$ python -m timeit -s ""import random"" ""random.choice((True, False))"" 
1000000 loops, best of 3: 0.846 usec per loop
$ python -m timeit -s ""import random"" ""random.getrandbits(1)""
1000000 loops, best of 3: 0.286 usec per loop
$ python -m timeit -s ""import random"" ""bool(random.getrandbits(1))""
1000000 loops, best of 3: 0.441 usec per loop
$ python -m timeit -s ""import random"" ""not random.getrandbits(1)""
1000000 loops, best of 3: 0.308 usec per loop
$ python -m timeit -s ""from random import getrandbits"" ""not getrandbits(1)""
1000000 loops, best of 3: 0.262 usec per loop  # not takes about 20us of this
"
Update a Pyspark DF Column based on an Array in another column,"df = df.withColumn('temp', split(df.fieldList, ','))
df = df.withColumn('cols', explode(df.temp))
df = df.withColumn('col_value', split(df.cols, '='))
df = df.withColumn('deltaCol', df.col_value[0])
       .withColumn('deltaValue',df.col_value[1])
"
How to make values in list of dictionary unique?,">>> d = [{'feature_a':1, 'feature_b':'Jul', 'feature_c':100, 'feature_d':'A'},
...  {'feature_a':2, 'feature_b':'Jul', 'feature_c':150, 'feature_d': 'B'},
...  {'feature_a':1, 'feature_b':'Mar', 'feature_c':110, 'feature_d':'F'},
...  {'feature_a':1, 'feature_b':'Mar', 'feature_c':110, 'feature_d':'G'}]
>>> seen_set = set()
>>> new_d = []
>>> for i in d:
...     if tuple([i['feature_a'],i['feature_b'],i['feature_c']]) not in seen_set:
...         new_d.append(i)
...         seen_set.add(tuple([i['feature_a'],i['feature_b'],i['feature_c']]))
...
>>> pprint.pprint(new_d)
[{'feature_a': 1, 'feature_b': 'Jul', 'feature_c': 100, 'feature_d': 'A'},
 {'feature_a': 2, 'feature_b': 'Jul', 'feature_c': 150, 'feature_d': 'B'},
 {'feature_a': 1, 'feature_b': 'Mar', 'feature_c': 110, 'feature_d': 'F'}]
"
python concatenate substrings by two lists with given start and end positions,"print zip(start_list, end_list)
> [(0, 4), (8, 12), (16, 20), (24, 28)]
"
How to get columns as row combinations in python?,"data1 = data.copy()

def old(data):
    d1 = pd.melt(data, id_vars=['country','region'], value_vars=['max', 'min','default']).sort_values(['country','region']).reset_index(drop=True)

    for ridx,i in enumerate(d1['value']):
        if pd.isnull(i):
            d1['value'].loc[ridx] = d1['value'].loc[ridx-1]
        else:
            pass
    d2 = d1
    d1['key'] = 1
    d2['key'] = 1
    d3 = pd.merge(d1, d2, on='key')

    d3 = d3.drop(['key'],axis=1)

    for index, row in d3.iterrows():
        if d3['region_x'].loc[index] == d3['region_y'].loc[index] and d3['country_x'].loc[index] == d3['country_y'].loc[index]:
            pass
        else:
            d3 = d3.drop([index])
    d3 = d3.reset_index(drop=True)

    d3['rate'] = """"

    for index, row in d3.iterrows():
        if d3['country_x'].loc[index] == 'A':
            d3['rate'].loc[index] = d3['value_x'].loc[index]
        else:
            d3['rate'].loc[index] = d3['value_y'].loc[index]

    d3 = d3.drop(['value_x','country_y','region_y','value_y'],axis=1)

    d3.columns = ['country','region','Option1','Option2','measure']
    d3 = d3[['country','region','measure','Option1','Option2']] 
    return d3    
"
"In Python Tkinter, how do I set an OptionMenu to a fixed size shorter than the longest item?","from tkinter.ttk import Combobox # python 3 notation
combo = Combobox(root,values=['a','aa','aaaaa','aaaaaaa'],width=3)
"
Count occurrences of a couple of specific words,"vocab = [""foo"", ""bar"", ""baz""]
s = ""foo bar baz bar quux foo bla bla""

wordcount = dict((x,0) for x in vocab)
for w in re.findall(r""\w+"", s):
    if w in wordcount:
        wordcount[w] += 1
"
Removing Line From Python List - All Lines Containing Certain Number,"all_decisions = [x for x in all_decisions if x[4] != 0]
"
pyPdf ignores newlines in PDF file,"In [2]: pdf.getPage(1).extractText(Tj_sep="" "")[1120:1250]
Out[2]: u'ta"" means any information concerning an individual which, because of name, identifying number, mark or description can be readily '
"
How can I replace specific characters in python?,"import random
import string

sports = ('football', 'baseball', 'basketball',)
video_games = ('counter strike', 'doom', 'wolfenstein',)
movies = ('star wars', 'indiana jones', 'lord of the rings',)


def pick_category():
    print(""For sports type 1, for video games type 2, for movies type 3"")
    choice = input(""Choose a category: "")
    if choice == '1':
        word = random.choice(sports)
    elif choice == '2':
        word = random.choice(video_games)
    elif choice == '3':
        word = random.choice(movies)
    else:
        print(""Invalid input"")
    return word


def draw(word, guesses):
    missing = set(string.ascii_lowercase) - set(guesses)
    masked = """".join([l if l not in missing else '_' for l in word])
    print(masked)
    return masked


def main():
    word = pick_category()
    guesses = []
    lives = 9

    while lives:
        masked = draw(word, guesses)

        if masked == word:
            print('You won!')
            return 0

        n = input(""Guess a letter: "").lower()
        if n in string.ascii_lowercase:
            if n in guesses:
                print(""That letter is already in use."")
            elif n not in word:
                guesses.append(n)
                lives = lives - 1
            else:
                guesses.append(n)
        else:
            print(""Invalid input, try again"")

        print(""Used letters: "", ', '.join(guesses))
        print(""Life counter: "", lives)

    print('You lost!')
    return 1

if __name__ == '__main__':
    main()
"
Python: Lambda in a sum,"def make_new_yu(yu, i):
    return lambda x: i + yu(x)
"
What is the easiest way to convert list with str into list with int?,"map(int, ['1', '2', '3'])"
Check if object is already in list (Python),"if MyNewCube not in MyMoveCube:
    do_whatever()
"
python - check if list entry is contained in string,"from os.path import dirname

def parents(p):
    while len(p) > 1:
        p = dirname(p)
        yield p

pathsManaged = ['/a/b', '/c/d', '/e']

currPath = '/e/a'

if any(p in pathsManaged for p in parents(currPath)):
    print 'subdir of already managed path'
"
Having trouble with whitespace and strings in a function,"from itertools import cycle
from operator import methodcaller

methods = cycle((methodcaller('upper'), methodcaller('lower')))
result = ''.join([next(methods)(c) if c.isalpha() else c for c in sample])
"
Identifying the class in which code is running,"class Person(object):
    def opinion(self):
        print(type(self))
        print (""Time for a cup of tea"")

class Programmer(Person):
    def opinion(self):
        super(Programmer, self).opinion()
        print (""There is no spoon"")

if '__name__' == '__main__':
    programmer = Programmer()
    programmer.opinion()

p = Person()
p.opinion()
print('\n')
pg = Programmer()
pg.opinion()
"
Iterating over dictionary keys in python after a certain key in python,"from itertools import combinations

for (key1, val1), (key2, val2) in combinations(dictionary.items(), 2):
"
BOTO : How to retrieve ipRanges from a security group object?,"import boto.ec2
conn = boto.ec2.connect_to_region(""eu-west-1"")
groups = conn.get_all_security_groups()
for group in groups:
    print group.name
    for rule in group.rules:
        print rule.ip_protocol, rule.from_port, rule.to_port, rule.grants
"
Python: Calculate all values of dictionary to z-scores,"from math import sqrt

def zify(some_dict):
    arr = some_dict.values()
    sum_sq = x_bar = 0
    for i, val in enumerate(arr):
        x_bar += val
        sum_sq += val * val
    n = 1 + i
    x_bar *= 1.0/n
    std = sqrt(1.0/i * sum_sq - (float(n) / i) * x_bar * x_bar)
    return {k:(v - x_bar)/std for k,v in some_dict.iteritems()}

test = {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}
print zify(test)

# {'a': -1.3363062095621223, 'c': -0.26726124191242445, 
#  'b': -0.8017837257372734, 'e': 0.8017837257372734,  
#  'd': 0.26726124191242445,  'f': 1.3363062095621223}
# compare with scipy.stats.zscore(test.values(), ddof=1)
"
How can I execute a command inputted by the user as a turtle command?,"import ast

#...
funcname,args = t.split('(',1)
args = ast_literal_eval('('+args)
if hasattr(args,'__iter__'):
    getattr(turtle,funcname)(*args)
else:
    getattr(turtle,funcname)(args)
"
Creating vertical dictionary from text file,"def reading_old_file(self, path):
    old_values = {}
    with open(path) as old_file: # 'r' is the default mode
        for index, line in enumerate(old_file, start=1):
            if index == 3: # just leave out pass cases 
                indexes = line.split(""\t"")
                for index in indexes:
                    old_values[index] = []
            elif index > 3: # use elif for exclusive cases 
                data = line.split(""\t"")
                ... # use indexes to put elements in appropriate lists
    print old_values # should probably return something, too
"
Python - How to check if the text is in a file txt?,"for i in []:
    print i
else:
    print ""Nooooo""
"
Numpy bincount() with floats,">>> np.array([v for k,v in sorted(c.iteritems())])

array([2, 1, 1, 1])
"
Python - removing characters from a list,"[(re.findall(r'\{(.*)\}', i) or [''])[0] for i in your_list]
"
"Types for which ""is"" keyword may be equivalent to equality operator in Python",">>> a = 1
>>> b = 1
>>> a is b
True
>>> id(a) == id(b)
True
"
Merging dictionary pairs in a list of dictionaries,">>> [{**x, **y} for x, y in zip(l[::2], l[1::2])]
[{'data': [[20, 400], [30, 450]], 'name': 'pc1'}, ...]
"
Multiline string parsing,"data = """"""
ID: ID/123456-00000003c
Value2: 1382386949.12
Value3: 00420903237127
Value4: 21

ID: ID/654431-0000000a
Value2: 1382386943.1032
Value3: 004989353474713
Value4: 33""""""

myData = {}
for line in data.split(""\n""):
    if line:
        key, value = line.split("": "")
        myData.setdefault(key, [])
        myData[key].append(value)

def get_values_of(actualKey):
    return myData[actualKey]

print get_values_of(""ID"")
print get_values_of(""Value2"")
print get_values_of(""Value3"")
print get_values_of(""Value4"")
"
matplotbib figure horization axis label automatically alignment or rescale,"plt.xticks(rotation=90).
"
How to load_files and process a .txt file with scikit-learn?,"import ast
import glob
import os

def my_load_files(folder, pattern):
    pathname = os.path.join(folder, pattern)
    for filename in glob.glob(pathname):
        with open(filename) as file:
            yield ast.literal_eval(file.read())

text_folder = 'C:/Users/username/Desktop/Samples'
print [[' '.join(x) for x in sample]
                        for sample in my_load_files(text_folder, 'File_*')]
"
Fastest way to find nearest triangle number?,"from math import sqrt
def close_triangle2(n):
    m=int(0.5*(-1+sqrt(1+8*n))) #solve it for the explicit formula
    tan0=(m*m+m)/2              #the closest one is either this
    tan1=(m*m+3*m+2)/2          #or this
    if (n-tan0)>(tan1-n):
        return tan1-n
    else:
        return n-tan0
"
How to correctly call variables from a txt file into my python code?,"a = []
a.append(4)
a.append(2)
a.append(5)
"
loop through path list held in txt,"def main():
    items = 'shp_folders.txt'

    with open(items, 'r') as f:
        for line in f:
            pathname = line.rstrip()
            print ""Zipping %r"" % pathname

            # Call function to zip files in pathname
            b = zipShapefile(pathname)
            if b:
                print ""Zipping done!""
            else:
                print ""An error occurred during zipping.""
"
"how should i refactor a piece of code that is present in many different functions, but has return statement in it","def verify_permissions(request, purpose):
  user = request.user
  sid = request.POST.get('subscription_id')
  try:
    sub = Subscription.objects.get(id=sid)
  except ObjectDoesNotExist:
    return (False, [(purpose, 'Given subscription does not exist.')]) 
  if sub.user != user:
    return (False, [(purpose, 'Invalid permission.')])
  return (True,)

def subscribe(request):
  result = verify_permissions(request, 'subscription')
  if result[0]: sub.save()
  return ajax_response(*result)
"
Convert Python string to list,"import ast

ast.literal_eval(x)
"
"Python - Combine two dictionaries, concatenate string values?",">>> d = {'foo': 'bar', 'baz': 'bazbaz'}
>>> d1 = {'foo': 'baz'}
>>> keys = d.viewkeys() | d1.viewkeys()
>>> {k : d.get(k, '') + d1.get(k, '') for k in keys}
{'foo': 'barbaz', 'baz': 'bazbaz'}
"
python range creation best practice,">>> [('{}:{:02}'.format(h, q), '{:02}:{:02}'.format(h, q)) for h in range(11) for q in (0, 15, 30, 45)]
[('0:00', '00:00'), ('0:15', '00:15'), ('0:30', '00:30'), ('0:45', '00:45'), ('1:00', '01:00'), ('1:15', '01:15'), ('1:30', '01:30'), ('1:45', '01:45'), ('2:00', '02:00'), ('2:15', '02:15'), ('2:30', '02:30'), ('2:45', '02:45'), ('3:00', '03:00'), ('3:15', '03:15'), ('3:30', '03:30'), ('3:45', '03:45'), ('4:00', '04:00'), ('4:15', '04:15'), ('4:30', '04:30'), ('4:45', '04:45'), ('5:00', '05:00'), ('5:15', '05:15'), ('5:30', '05:30'), ('5:45', '05:45'), ('6:00', '06:00'), ('6:15', '06:15'), ('6:30', '06:30'), ('6:45', '06:45'), ('7:00', '07:00'), ('7:15', '07:15'), ('7:30', '07:30'), ('7:45', '07:45'), ('8:00', '08:00'), ('8:15', '08:15'), ('8:30', '08:30'), ('8:45', '08:45'), ('9:00', '09:00'), ('9:15', '09:15'), ('9:30', '09:30'), ('9:45', '09:45'), ('10:00', '10:00'), ('10:15', '10:15'), ('10:30', '10:30'), ('10:45', '10:45')]
"
Optimisation of a simple vector operation (python),">>> import numpy as np
>>> from scipy.spatial.distance import cdist
>>> x = np.random.rand(10, 2)
>>> t = np.random.rand(8, 2)

>>> cdist(x, t, 'sqeuclidean')
array([[ 0.61048982,  0.04379578,  0.30763149],
       [ 0.02709455,  0.30235292,  0.25135934],
       [ 0.21249888,  0.14024951,  0.28441688],
       [ 0.39221412,  0.01994213,  0.17699239]])
"
check if dataframe is of boolean type pandas,"In [13]:

df.a.dtypes.name == 'bool'
Out[13]:
True
"
More Efficient Conversion of Archived Python Dict to JSON,"import gzip
import ast
import json
import glob
import fileinput
from dateutil import parser
from multiprocessing import Pool

# Assuming you have a large dictionary across a multi-part gzip files.
def files_to_be_analyzed(files):
    lines = ast.literal_eval("""".join([gzip.open(file).read() for file in files]))
    date = lines['created_at']
    date_converted = parser.parse(date).strftime('%Y%m%d')
    output_file = gzip.open(date_converted, ""a"")
    output_file.write(lines + ""\n"")
    output_file.close()

if __name__ == '__main__':
    pool = Pool(processes = 5) # Or what ever number of cores you have
    directories = ['/path/to/this/dire', '/path/to/another/dir']
    pool.map(files_to_be_analyzed, [glob.glob(path) for path in directories])
    pools.close()
    pools.join()
"
Get index of the top n values of a list in python,"zip(*heapq.nlargest(2, enumerate(a), key=operator.itemgetter(1)))[0]
"
How does asigning of @property works? (Assigning of a getter to another variable.),"import logging
import random

class Debug(object):
    @property
    def ThreadAwareLogger(self):
        loggers = [logging.getLogger('abc'),logging.getLogger('def')]
        return self.anotherDebugMethod(loggers)
    def anotherDebugMethod(self,loggers):
        return random.choice(loggers)
class SomeOtherClass(object):
    def __init__(self):
        self.debug=Debug()
    @property
    def logger(self):
        return self.debug.ThreadAwareLogger
    def otherMethod(self):
        self.logger.info('Message')

if __name__=='__main__':
    logging.basicConfig(level=logging.DEBUG)    
    x=SomeOtherClass()
    for i in range(5):
        x.otherMethod()
"
Increment a python floating point value by the smallest possible amount,"import ctypes
import sys
from sys import platform as _platform

if _platform == ""linux"" or _platform == ""linux2"":
    _libm = ctypes.cdll.LoadLibrary('libm.so.6')
    _funcname = 'nextafter'
elif _platform == ""darwin"":
    _libm = ctypes.cdll.LoadLibrary('libSystem.dylib')
    _funcname = 'nextafter'
elif _platform == ""win32"":
    _libm = ctypes.cdll.LoadLibrary('msvcrt.dll')
    _funcname = '_nextafter'
else:
    # these are the ones I have access to...
    # fill in library and function name for your system math dll
    print ""Platform"", repr(_platform), ""is not supported""
    sys.exit(0)

_nextafter = getattr(_libm, _funcname)
_nextafter.restype = ctypes.c_double
_nextafter.argtypes = [ctypes.c_double, ctypes.c_double]

def nextafter(x, y):
    ""Returns the next floating-point number after x in the direction of y.""
    return _nextafter(x, y)

assert nextafter(0, 1) - nextafter(0, 1) == 0
assert 0.0 + nextafter(0, 1) > 0.0
"
"When i add to the list in my dictionary, it doesn't actually add to the list? python","groupA[name].append(count)  # count must be single value
"
How to use viewclient traverse method in AndroidViewClient,"for tv in vc.findViewsWithAttribute('class', 'android.widget.TextView', root=listview_id):
    text = tv.getText()
    if re.match(re.compile('.*@yahoo.com'), text):
        list_accounts.append(text)
"
How to get the environment variable set by a bash script from inside a python script?,"# file env_set.py
import os
import sys

if sys.argv[0] and ""SETENV"" in os.environ:
  setenv = os.environ[""SETENV""]
  del os.environ[""SETENV""]
  os.execvp(""bash"", [""bash"", ""-c"",
        ""source "" + setenv + ""; exec python "" + sys.argv[0] + ' ""${@}""',
        ""--""] + sys.argv[1:])
"
Counting particular occurences in python in csv file,"df = pd.read_csv(""cluster.csv"")
counted = df.groupby([""Cluster_id"", ""User"", ""Quality""]).size()
df.to_csv(""counted.csv"")
"
How to pass string as variable name assignment,">>> x = 123
>>> y = ""x""
>>> z = eval(y)
>>> 
>>> print z
123
"
"Calculate bandwidth usage per IP with scapy, iftop-style","#! /usr/bin/env python

sample_interval = 10
filename=""capture.cap""

from scapy.all import *
from collections import Counter

traffic = Counter()
hosts = {}

def human(num):
    for x in ['', 'k', 'M', 'G', 'T']:
        if num < 1024.: return ""%3.1f %sB"" % (num, x)
        num /= 1024.
    return  ""%3.1f PB"" % (num)

def traffic_monitor_callback(pkt):
    if IP in pkt:
        pkt = pkt[IP]
        traffic.update({tuple(sorted(map(atol, (pkt.src, pkt.dst)))): pkt.len})

# A trick I like: don't use rdpcap() that would waste your memory;
# iterate over a PcapReader object instead.
for p in PcapReader(""capture.cap""):
    traffic_monitor_callback(p)

for (h1, h2), total in traffic.most_common(10):
    h1, h2 = map(ltoa, (h1, h2))
    for host in (h1, h2):
        if host not in hosts:
            try:
                rhost = socket.gethostbyaddr(host)
                hosts[host] = rhost[0]
            except:
                hosts[host] = None
    h1 = ""%s (%s)"" % (hosts[h1], h1) if hosts[h1] is not None else h1
    h2 = ""%s (%s)"" % (hosts[h2], h2) if hosts[h2] is not None else h2
    print ""%s/s: %s - %s"" % (human(float(total)/sample_interval), h1, h2)
"
Tkinter display other windows,"import cv2
import PIL.Image
import PIL.ImageTk
import Tkinter as tk


def update_image(image_label, cv_capture):
    cv_image = cv_capture.read()[1]
    cv_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2RGB)
    pil_image = PIL.Image.fromarray(cv_image)
    tk_image = PIL.ImageTk.PhotoImage(image=pil_image)
    image_label.configure(image=tk_image)
    image_label._image_cache = tk_image  # avoid garbage collection
    root.update()


def update_all(root, image_label, cv_capture):
    if root.quit_flag:
        root.destroy()  # this avoids the update event being in limbo
    else:
        update_image(image_label, cv_capture)
        root.after(10, func=lambda: update_all(root, image_label, cv_capture))


if __name__ == '__main__':
    cv_capture = cv2.VideoCapture()
    cv_capture.open(0)  # have to use whatever your camera id actually is
    root = tk.Tk()
    setattr(root, 'quit_flag', False)
    def set_quit_flag():
        root.quit_flag = True
    root.protocol('WM_DELETE_WINDOW', set_quit_flag)  # avoid errors on exit
    image_label = tk.Label(master=root)  # the video will go here
    image_label.pack()
    root.after(0, func=lambda: update_all(root, image_label, cv_capture))
    root.mainloop()
"
Python regex to print all sentences that contain two identified classes of markup,"for match in re.findall(r'(?:(?<=\.)\s+|^)((?=(?:(?!\.(?:\s|$)).)*?\bemotion>(?=\s|\.|$))(?=(?:(?!\.(?:\s|$)).)*?\bLOCATION>(?=\s|\.|$)).*?\.(?=\s|$))', text, flags=re.I):
    line = ''.join(str(x) for x in match)
"
Plot 2D Numpy Array,"t = np.array([[0, 1, 2], [1, 2, 3], [3, 2, 1]])
import matplotlib.pyplot as plt
plt.imshow(t)
plt.show()
plt.imshow(t, interpolation='nearest')
plt.show()
"
how to pass a list as value and not as reference?,"def change_2(v):
    v[2] = 6
    return v 

x = [1,2,3]
z = change_2(x[:])
"
XPath - How to access anchor text and href from the current node in a loop,"anchors = response.selector.xpath(""//table[@class='style1']//ul//li//a"")
for anchor in anchors:
    link = anchor.xpath('@href').extract()[0]
    # go one level back and access text()
    name = anchor.xpath('../text()').extract()
"
Access overridden class variable in parent of subclass,">>> class Foo():
...     var = ""Foo""
...     @classmethod
...     def print_var(cls):
...         print(cls.var)
... 
>>> class Bar(Foo):
...     var = ""Bar""
... 
>>> Bar.print_var()
Bar
>>> Foo.print_var()
Foo
"
django-tables2 specify different properties for different rows,"<tbody>
    {% for row in table.page.object_list|default:table.rows %} {# support pagination #}
    {% block table.tbody.row %}
    <tr class=""{{ row.tr_class }}"">  <!-- CLASS FOR EACH ROW -->
"
"How to do a ""Filing cabinet"" sort on alphanumeric strings",">>> import re
>>> def key(item):
        g = re.match(r'([a-zA-Z]+)(\d+)', item).groups()
        return g[0], int(g[1])

>>> sorted(items, key=key)
['a2', 'a11']
"
Remove a word with certain constraints from a string,"line = re.sub('([!,"".?$&\)\(\/\\,:;-]|@\w+|#\w+|http\S+)', '', text)
"
how to turn a string of letters embedded in squared brackets into embedded lists,">>> import json
>>> a = '[[a b] [c d]]'
>>> a = ''.join(map(lambda x: '""{}""'.format(x) if x.isalpha() else x, a))
>>> a
'[[""a"" ""b""] [""c"" ""d""]]'
>>> json.loads(a.replace(' ', ','))
[[u'a', u'b'], [u'c', u'd']]
"
super simple cipher function in python. comparing a list to keys in a dictionary,"def code_scram(x):
    c = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z'}
    scram = """"
    for i in x:
        if i in c:
            scram += c[i]
    return scram

print code_scram([1,2,3,4])
"
Finding the max in a complex list - Python,">>> min(a, key=lambda t:(-t[1],t[0]))
('k', 3)
"
"selenium fails when adding to cart, how to click on a javascript button?","from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


driver = webdriver.Firefox()
driver.maximize_window()
driver.get(""http://store.nike.com/us/en_us/pw/mens-tops-t-shirts/7puZobp?ipp=120"")

wait = WebDriverWait(driver, 10)

driver.find_element_by_xpath(
    ""//div[@id='exp-gridwall-wrapper']/div[2]/div[2]/div[2]/div/div/div/div/div/div[3]/div[2]/p"").click()

# opening size dropdown
size_button = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, "".exp-pdp-size-and-quantity-container a.exp-pdp-size-dropdown"")))
actions = ActionChains(driver)
actions.move_to_element(size_button).click().perform()

# selecting size
size = wait.until(EC.visibility_of_element_located((By.XPATH, ""//li[contains(@class, 'nsg-form--drop-down--option') and normalize-space(.) = 'S']"")))
actions = ActionChains(driver)
actions.move_to_element(size).click().perform()

# adding to cart
driver.find_element_by_id(""buyingtools-add-to-cart-button"").click()

# checkout
checkout_button = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, "".checkout-button"")))
actions = ActionChains(driver)
actions.move_to_element(checkout_button).click().perform()
"
Limiting re.findall() to record values before a certain number. Python,"from find_ORF_sequences import find_ORF_seq
from ATOz_get_sequences import getSequences

fdna = 'atgggatggtagatggatgggATGGGGTGA'

print 'fdna == %s' % fdna
print 'find_ORF_seq(fdna)\n',find_ORF_seq(fdna)
print 'getSequences(fdna)\n',getSequences(fdna)
"
conversion float to long in python,">>> math.floor(gamma(101)) == gamma(101)
True
"
Python: Find in list,"matches = filter(fulfills_some_condition, lst)
"
python convert custom object to json using properties,"import json
import inspect

def viewable(fnc):
        '''
            Decorator, mark a function as viewable and gather some metadata in the process

        '''
        def call(*pargs, **kwargs):
                return fnc(*pargs, **kwargs)
        # Mark the function as viewable
        call.is_viewable = True
        return call

class BaseJsonable(object):

    def to_json(self):
        result = {}
        for name, member in inspect.getmembers(self):
            if getattr(member, 'is_viewable', False):
                value = member()
                result[name] = getattr(value, 'to_json', value.__str__)()
        return json.dumps(result)

class Person(BaseJsonable):

    @viewable
    def name(self):
        return self._name


    @viewable
    def surname(self):
        return self._surname

    def __init__(self, name, surname):
        self._name = name
        self._surname = surname


p = Person('hello', 'world')
print p.to_json()
"
"Python: how to check if an item was added to a set, without 2x (hash, lookup)","def do_add(s, x):
  return len(s) != (s.add(x) or len(s))
"
Looking for unique numbers in a list of sets,"from collections import Counter
sets = [{randint(1, 100) for _ in range(100)} for i in range(100)]

from itertools import chain

cn = Counter(chain.from_iterable(sets))
unique = [k for k, v in cn.items() if v == 1] # use {} to get  a set
print(unique)
"
python 2.7 select words in list prior to number,"import re

exp = re.compile(r'(\d+\.?\d+)')

with open('mainfile.txt') as f, open('names.txt','w') as out:
   for line in f:
      line = line.strip()
      if len(line):
           try:
               out.write('{}\n'.format(re.split(exp, line)[0].strip()))
           except:
               print('Could not parse {}'.format(line))
"
How can I process command line arguments in Python?,"import sys, re, optparse

first_re = re.compile(r'^\d{3}$')

parser = optparse.OptionParser()
parser.set_defaults(debug=False,xls=False)
parser.add_option('--debug', action='store_true', dest='debug')
parser.add_option('--xls', action='store_true', dest='xls')
(options, args) = parser.parse_args()

if len(args) == 1:
    if first_re.match(args[0]):
        print ""Primary argument is : "", args[0]
    else:
        raise ValueError(""First argument should be ..."")
elif len(args) > 1:
    raise ValueError(""Too many command line arguments"")

if options.debug:
    print 'debug flag'

if options.xls:
    print 'xls flag'
"
Python : Error in comparing strings,"for s in ws:
    for l in s.lemmas:
        if l.name != ""flabbergasted"":
            print(l.name)
"
Check string in list for multiple occurrence,">>> b = ['AC', '3H', 'TD', '9C', 'KD', '7H', '5S']
>>> suits = [s for _, s in b]
>>> max(suits.count(s) for s in suits) >= 5
False
"
Filtering in Django by a set of String,">>> from django.db.models import Q

>>> values = ['1.01', '1.02']

>>> query = Q()
>>> for value in values:
...     query |= Q(name__startswith=value)

>>> Inventary.objects.filter(query)
"
get slice from multi-dimensions in python,"#zip(*LISTA)
zip(*[[""001"", ""TOM"", ""13800000001"", ""AAAA""],[""002"", ""Jerry"", ""13800000002"", ""BBBB""]])
"
itertools cominbations with replacement with limitations,"import itertools
from collections import Counter
a = ((0,1,2,3) + c for c in itertools.combinations_with_replacement(range(4), 6) if max(Counter(c).values()) < 5)
"
PyQt QDialog return response yes or no,"class MyDialog(...)

    def getValues(self):
        return (self.textedit.text(), self.combobox.currentText())

    @staticmethod
    def launch(parent):
        dlg = MyDialog(parent)
        r = dlg.exec_()
        if r:
            return dlg.getValues()
        return None

values = MyDialog.launch(None)
"
Probing a python function,">>> print pos_tag.func_code.co_consts[0]

    Use NLTK's currently recommended part of speech tagger to
    tag the given list of tokens.

        >>> from nltk.tag import pos_tag
        >>> from nltk.tokenize import word_tokenize
        >>> pos_tag(word_tokenize(""John's big idea isn't all that bad.""))
        [('John', 'NNP'), (""'s"", 'POS'), ('big', 'JJ'), ('idea', 'NN'), ('is',
        'VBZ'), (""n't"", 'RB'), ('all', 'DT'), ('that', 'DT'), ('bad', 'JJ'),
        ('.', '.')]

    :param tokens: Sequence of tokens to be tagged
    :type tokens: list(str)
    :return: The tagged tokens
    :rtype: list(tuple(str, str))
"
How to select certain columns from a csv file in pyspark based on the list of index of columns and then determine their distinct lengths,"column_lengths = [len(x) for x in longest_per_column]

model = RandomForest.trainRegressor(
    categoricalFeaturesInfo=dict(enumerate(column_lengths)),
    maxBins=max(column_lengths),
    # ...
    )
"
How can I add a python tuple to a YAML file using pyYAML?,"import yaml

class PrettySafeLoader(yaml.SafeLoader):
    def construct_python_tuple(self, node):
        return tuple(self.construct_sequence(node))

PrettySafeLoader.add_constructor(
    u'tag:yaml.org,2002:python/tuple',
    PrettySafeLoader.construct_python_tuple)

doc = yaml.dump(tuple(""foo bar baaz"".split()))
print repr(doc)
thing = yaml.load(doc, Loader=PrettySafeLoader)
print thing
"
How can I change '>' to '&gt;' and '&gt;' to '>'?,">>> import HTMLParser
>>> h= HTMLParser.HTMLParser()
>>> h.unescape('alpha &lt; &beta;')
u'alpha < \u03b2'
"
creating a function that makes a new universum with all elements [0] PYTHON,"def create_empty_universum(cols, rows, cell=0):
    return [[cell] * cols] * rows
"
Conditionally replacing Int64 field in DataFrame with month of Int64 field plus Datetime64[ns] field,"#after testing change eye_new to eye  
result.loc[ result['tee'].dt.year == 2004 ,'eye_new'] = result.apply(lambda x: x['owe'] + 
                                               pd.DateOffset(days=x['you']), axis=1).dt.month
print result     


    eye        tee        owe  you  eye_new
0     5 2000-01-31 2000-01-31  149      NaN
1    81 2000-02-29 2000-02-29    5      NaN
2    42 2000-03-31 2000-03-31   39      NaN

.
.
.
47   56 2003-12-31 2003-12-31   74      NaN
48   64 2004-01-31 2004-01-31   39        3
49    0 2004-02-29 2004-02-29  395        3
50   13 2004-03-31 2004-03-31  257       12
51   31 2004-04-30 2004-04-30  164       10
52   14 2004-05-31 2004-05-31  116        9
53   37 2004-06-30 2004-06-30  335        5
54   49 2004-07-31 2004-07-31  158        1
55   95 2004-08-31 2004-08-31  244        5
56   82 2004-09-30 2004-09-30  279        7
57   38 2004-10-31 2004-10-31   20       11
58   74 2004-11-30 2004-11-30   33        1
59   59 2004-12-31 2004-12-31  326       11  
"
How to adjust the size of matplotlib legend box?,"import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 10, 5)

fig, ax = plt.subplots()
for i in range(1, 6):
    ax.plot(x, i*x + x, marker='o', markersize=20,
            label='$y={i}x + {i}$'.format(i=i))
ax.legend(loc='upper left', handlelength=5, borderpad=1.2, labelspacing=1.2)
plt.show()
"
"Python Data Types and set, bool, hex",">>> 1 == True
True
>>> 0 == False
True
>>> issubclass(bool, int)
True
"
Trying to make sure certain symbols aren't in a word,"brackets = set(""[]()"")
words = [word for word in random.choice(headlines).split("" "")[1:-1] if not brackets.intersection(word)]
"
python functions for beginners,"return word.upper()
"
Running a timer for few minutes in python,"import datetime
import thread
import threading

def foo():
     print datetime.datetime.now()
     print threading.active_count()

for x in range(0,300): 
     t = threading.Timer(x + 1, foo)
     t.start()
"
Python: Shorten ugly code?,"length = log256(256**len(var_text)
length = len(var_text) # the log and exp cancel!
"
selecting lines according certain criteria,"awk '{split($3, a, ""@""); split($6, b, ""@"");if (a[1] == b[1]) print}'
"
How to get the location of a Zope installation from inside an instance?,"from App.config import getConfiguration 
import os

eventlog = getConfiguration().eventlog
logpath = eventlog.handler_factories[0].instance.baseFilename
logfolder = os.path.split(logpath)[0] 
"
Selenium - get all children divs but not grandchildren,"driver.find_elements_by_xpath('//div[@class=""main_div""]/div')
"
Python - How to cut a string in Python?,s[:s.rfind('&')]
Cloned dictionary overwritten by changes to new dictionary,"
>>> import copy
>>> b = copy.deepcopy(a)
>>> for l in range(len(a['kn'])):
...     a['kn'][l] = a['kn'][l] + 10
>>> a
{'kn': [18, 19, 20, 21, 22]}
>>> b
{'kn': [8, 9, 10, 11, 12]}
"
Randomly Interleave 2 Arrays In Python,"a = [1, 2, 3, 4]
b = [5, 6, 7, 8, 9]
c = [x.pop(0) for x in random.sample([a]*len(a) + [b]*len(b), len(a)+len(b))]
"
How to detect non-number of the list?,"not all(str(s).isdigit() for s in a)
"
String Formatting in Python 3,"""""""({:d} goals, ${:d})"""""".format(self.goals, self.penalties)"
Regex to find words between two tags,"input = """"""""<person>John</person>went to<location>London</london>""""""
soup = BeautifulSoup(input)
print soup.findAll(""person"")[0].renderContents()
print soup.findAll(""location"")[0].renderContents()
"
how to test if there is any word matched the string in Python,"string ='I love traveling all over the world'
word_list =['I love','traveling','all over the world']

for x in word_list:
    if x in string:
        print x
"
Calling Pandas Data Frames Created with globals() Inside For Loop,"dfs = {}
for f in filelist:
    ...
    df = pd.read_csv(f)  # this returns a DataFrame
    for x in sum_list:
        ...
        dfs[sdo] = df[df.summary_level == x]  # again, this return a DataFrame
"
How to transform a time series pandas dataframe using the index attributes?,"pd.pivot_table(df, index= df.index.date, columns=df.index.time, values = 'Close')
"
Python: Generate matrix of Nx4 integers who sum is a constant,"In [774]: from itertools import product

In [775]: [x for x in product(range(10),range(10)) if sum(x)==10]
Out[775]: [(1, 9), (2, 8), (3, 7), (4, 6), (5, 5), (6, 4), (7, 3), (8, 2), (9, 1)]
"
More efficient way to get nearest center,"from scipy.spatial.distance import cdist

dist = cdist(data, C, metric='euclidean')
dist_idx = np.argmin(dist, axis=1)
"
Print Soap Body data using lxml,"createCase=etree.tostring(root.find('.//{http://www.code.com/abc/V1/createCase}createCase'))
print etree.tostring(createCase, pretty_print=True)
"
How do I move the last item in a list to the front in python?,a = a[-1:] + a[:-1]
Reading data from a 16-bit unsigned big endian raw image file in python,"fmt = '<' + str(592*600) + 'H'
pix = struct.unpack(fmt, trimdata)
lightest = max(pix)
scaled = ''.join(chr(int((float(p) / lightest)**(1/2.2) * 255)) for p in pix)
im = Image.fromstring('L', (592,600), scaled, 'raw')
"
Python: Searching a specific columns of a table for not matching items,"with open(""test.txt"", ""r"") as Spenn,open(""test.txt"", ""r"") as table:
    reader = csv.reader(Spenn, delimiter=""\t"")
    writer = csv.writer(table, delimiter=""\t"")
    for row in reader:
        if all(field not in keywords for field in row):
            writer.writerow(row)
"
Scrapy:newbie attempts to pass the null value,"if len(ranking_list) > 0:
    print ranking_list 
"
How can i do this using a Python Regex?,">>> s = '''...\nIXMLSerializerAlt._methods_ = [\n    COMMETHOD([helpstring(u'Loads an object from an XML string.')], HRESULT, 'LoadFromString',\n              ( ['in'], BSTR, 'XML' ),\n              ( ['in'], BSTR, 'TypeName' ),\n              ( ['in'], BSTR, 'TypeNamespaceURI' ),\n              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'obj' )),\n]\n...'''
>>> import re
>>> re.findall(r'^\w+\._methods_\s=\s\[$.*?^\]$', s, re.DOTALL | re.MULTILINE)
[""IXMLSerializerAlt._methods_ = [\n    COMMETHOD([helpstring(u'Loads an object from an XML string.')], HRESULT, 'LoadFromString',\n              ( ['in'], BSTR, 'XML' ),\n              ( ['in'], BSTR, 'TypeName' ),\n              ( ['in'], BSTR, 'TypeNamespaceURI' ),\n              ( ['retval', 'out'], POINTER(POINTER(IUnknown)), 'obj' )),\n]""]
"
How to address a dictionary in a list of ordered dicts by unique key value?,">>> d = defaultdict(dict)
>>> d['a']['values'] = []
>>> d['b']['values'] = []
>>> d['a']['values'].append('a')
>>> d['a']['values'].append('b')
>>> print(d)
defaultdict(<type 'dict'>, {'a': {'values': ['a', 'b']}, 'b': {'values': []}})
"
How to Pretty Print a CSV file in Python,"Module:
import csv

def pretty_file(filename, **options):
    """"""
    Pretty print a CSV file
    """"""

    #function specific options
    new_delimiter           = options.pop(""new_delimiter"", "" | "")
    border                  = options.pop(""border"", True)
    border_vertical_left    = options.pop(""border_vertical_left"", ""| "")
    border_vertical_right   = options.pop(""border_vertical_right"", "" |"")
    border_horizontal       = options.pop(""border_horizontal"", ""-"")
    border_corner_tl        = options.pop(""border_corner_tl"", ""+ "")
    border_corner_tr        = options.pop(""border_corner_tr"", "" +"")
    border_corner_bl        = options.pop(""border_corner_bl"", border_corner_tl)
    border_corner_br        = options.pop(""border_corner_br"", border_corner_tr)
    header                  = options.pop(""header"", True)
    border_header_separator = options.pop(""border_header_separator"", border_horizontal)
    border_header_left      = options.pop(""border_header_left"", border_corner_tl)
    border_header_right     = options.pop(""border_header_right"", border_corner_tr)
    new_filename            = options.pop(""new_filename"", ""new_"" + filename)
    newline                 = options.pop(""newline"", ""\n"")

    column_max_width = {} #key:column number, the max width of each column
    num_rows = 0 #the number of rows

    with open(filename, ""rb"") as input: #parse the file and determine the width of each column
        reader=csv.reader(input, **options)
        for row in reader:
            num_rows += 1
            for col_number, column in enumerate(row):
                width = len(column)
                try:
                    if width > column_max_width[col_number]:
                        column_max_width[col_number] = width
                except KeyError:
                    column_max_width[col_number] = width

    max_columns = max(column_max_width.keys()) + 1 #the max number of columns (having rows with different number of columns is no problem)

    if max_columns > 1:
        total_length = sum(column_max_width.values()) + len(new_delimiter) * (max_columns - 1)
        left = border_vertical_left if border is True else """"
        right = border_vertical_right if border is True else """"
        left_header = border_header_left if border is True else """"
        right_header = border_header_right if border is True else """"

        with open(filename, ""rb"") as input:
            reader=csv.reader(input, **options)
            with open(new_filename, ""w"") as output:
                for row_number, row in enumerate(reader):
                    max_index = len(row) - 1
                    for index in range(max_columns):
                        if index > max_index:
                            row.append(' ' * column_max_width[index]) #append empty columns
                        else:
                            diff = column_max_width[index] - len(row[index])
                            row[index] = row[index] + ' ' * diff #append spaces to fit the max width

                    if row_number==0 and border is True: #draw top border
                        output.write(border_corner_tl + border_horizontal * total_length + border_corner_tr + newline)
                    output.write(left + new_delimiter.join(row) + right + newline) #print the new row
                    if row_number==0 and header is True: #draw header's separator
                        output.write(left_header + border_header_separator * total_length + right_header + newline)
                    if row_number==num_rows-1 and border is True: #draw bottom border
                        output.write(border_corner_bl + border_horizontal * total_length + border_corner_br)
"
How to update pcolor in matplotlib?,"my_cmap = plt.get_cmap('jet')
#my_nom = # you will need to scale your read data between [0, 1]
new_color = my_cmap(data2.T.ravel())
pc.update({'facecolors':new_color})

draw() 
"
python - create a pivot table,"data = np.array([[ 4057,     8,  1374],
                 [ 4057,     9,   759],
                 [ 4057,    11,    96],
                 [89205,    16,   146],
                 [89205,    17,   154],
                 [89205,    18,   244],
                 [ 4057,    11,     4]])

rows, row_pos = np.unique(data[:, 0], return_inverse=True)
cols, col_pos = np.unique(data[:, 1], return_inverse=True)

pivot_table = np.zeros((len(rows), len(cols)), dtype=data.dtype)
pivot_table[row_pos, col_pos] = data[:, 2]
>>> pivot_table # the element at [0, 2] should be 100!!!
array([[1374,  759,    4,    0,    0,    0],
       [   0,    0,    0,  146,  154,  244]])

import scipy.sparse as sps
pivot_table = sps.coo_matrix((data[:, 2], (row_pos, col_pos)),
                             shape=(len(rows), len(cols))).A
>>> pivot_table # now repeated elements are added together
array([[1374,  759,  100,    0,    0,    0],
       [   0,    0,    0,  146,  154,  244]])
"
Python issues with return statement,"else:
    return isPrime(i+1,n)
"
Scraping data from website using Beautiful Soup and show it in jinja2,"   def get(self, soup=BeautifulSoup(Husam)):
      tago = soup.find_all(""a"", class_=""bigger floatholder"")

      # Create a list to store your entries
      values = []

      for tag in tago:
          me2 = tag.get_text(""\n"")
          # Append each tag to the list
          values.append(me2)

      template = jinja_environment.get_template('index.html')

      # Put the list of values into a dict entry for jinja2 to use
      template_values = {'me2': values}

      # Render the template with the dict that contains the list
      self.response.out.write(template.render(template_values))
"
Can I make a class which behaves like an immutable (float)?,"def __float__(self):
    return self.value

def __radd__(self, other):
    return other + self.value
"
How to concatenate bytes together,"my_transformed_list2 = map(lambda s: s[-1], j)
concatenated2 = ''.join(my_transformed_list2)
"
Correct useage of getter/setter for dictionary values,"def __getitem__(self, key):
    if key not in self.traits.keys():
        raise KeyError
    ... 
    return traits[key]

def __setitem__(self, key, value):
    if key not in self.traits.keys():
        raise KeyError
    ...
    traits[key] = value
"
"How to copy boost python list or his reference with ""="" operator","#include <iostream>
#include <boost/python.hpp>

/// @brief Mockup class.
struct other_class
{
  boost::python::list py_list;
};

/// @brief Helper function to print object id and its string representation.
std::string to_string(boost::python::object& o)
{
  std::stringstream stream;
  stream << o.ptr() << "" = ""
         << boost::python::extract<std::string>(o.attr(""__str__"")())();
  return stream.str();
}

int main()
{
  using std::cout;
  using std::endl;
  namespace python = boost::python;

  Py_Initialize();
  try
  {
    python::object object;                            // object = None
    cout << to_string(object) << ""\n""                 // print object
         << ""  is none check: "" << object.is_none()   // print object is None
         << endl;

    // Create other_class and populate its list.
    other_class* c = new other_class();               // py_list = []
    cout << ""c->py_list: "" << to_string(c->py_list)   // print py_list
         << endl;
    c->py_list.append(""spam"");                        // py_list.append(""spam"")
    cout << ""c->py_list: "" << to_string(c->py_list)   // print py_list
         << endl;

    // Have list1 reference c->py_list.
    python::list list1;                                // list1 = []
    cout << ""list1: "" << to_string(list1) << ""\n""      // print list1
         << ""assign py_list to list1"" << endl;
    list1 = c->py_list;                                // list1 = py_list
    cout << ""list1: "" << to_string(list1) << endl;     // print list1

    // Modify list1 and observe effects on pylist.
    cout << ""modify list1"" << endl;
    list1.append(42);                                 // list1.append(42)
    cout << ""c->py_list: "" << to_string(c->py_list)   // print py_list
         << endl;

    // Shallow-copy list1.
    cout << ""copying list1 into list2"" << endl;
    python::list list2(
        list1.slice(python::_, python::_));            // list2 = list1[:]
    list2.append(""eggs"");                              // list2.append(""eggs"")
    cout << ""list2: "" << to_string(list2) << ""\n""      // print list2
         << ""list1: "" << to_string(list1) << endl;     // print list1

    delete c;
  }
  catch (python::error_already_set&)
  {
    PyErr_Print();
  }
}
"
Edit a list while comparing it to another list as constraints,"literal_list = [0, -1, 2, 3, 11, 12, -13, 21, -22, 23, 31, -32, 33, 50, 20, 30]
needed_literals = [11, 12, 13, 21, 22, 23, 31, 32, 33]
output = [n for n in literal_list if abs(n) in needed_literals]
#=> [11, 12, -13, 21, -22, 23, 31, -32, 33]
"
difflib.SequenceMatcher not returning unique ratio,"ratios = []

with open('fieldName1', 'r') as f1, open('fieldName2', 'r') as f2:
    for l1, l2 in zip(f1, f2):
        R = difflib.SequenceMatcher(None,l1,l2).ratio()
        ratios.append((l1, l2, R))
"
Python: Repeat elements in a list comprehension?,"coordinate_list = [ ]
for location in locations:
    coord = Coordinates(location.latitude, location.longitude)
    coordinate_list.extend([coord] * location.number_of_times)
"
Iterating through a Pandas Dataframe,"import pandas as pd
pdf = pd.DataFrame.from_dict({'APP': [0.013, 0.42, -0.23, 0.06],
                              'BOOKS': [-1.3, 0.04, 0.54, 0.01],
                              'CN': [0.012, -0.03, 0.003, 0.5]})
abs_pdf = pdf.abs()
value = 0.01
sel = abs_pdf[abs_pdf > value]

results = list()
by_col = sel.T
for col in by_col:
    results.append(by_col[col].dropna().to_dict())
print(results)
"
How to order points for Matplotlib's fill function?,"def order_points(x, regions):
    """"""Given two lists of the same length, one of x values and one of regions,
    determine how to order the points so that they describe a polygon that
    contains the interior of all regions.

    This function is a generator that yields disjoint polygons.

    Parameters
    ==========

    x: list
       x values at which the regions are defined

    regions: list of lists of tuples
       Each list contains information for one x value.  The sublist contains
       so-called regions that are described by tuples corresponding to the
       bottom and the top of the region.  The y values between the bottom and
       the top of each region are in the interior of a polygon.

       Each list of tuples should be sorted by increasing y value.

    Yields
    ======

    polygon: list of tuples
       Ordered list of (x, y) coordinated of the points on the polygon.

    """"""
    # Make sure the x values are in ascending order.
    xvals, yregions = zip(*sorted(zip(x, regions)))

    # Direction is -1 when going toward low x, 1 when going toward high x.
    direction = 1
    # Indicate whether the inside of the polygon is below, 0, or above, 1, the
    # current point.
    inside = 1

    # List all possible combinations of x index, region index.
    tovisit = [(pos, rpos) for pos in range(len(xvals))
                            for rpos in range(len(yregions[pos]))]
    pos, rpos = tovisit.pop(0)
    ycur = yregions[pos][rpos][0]

    # Keep track of already visited points.
    visited = set()
    # Keep track of current polygon.
    polygon = []
    while True:
        # Keep track of ordered points.
        xcur = xvals[pos]
        polygon.append((xcur, ycur))
        visited.add((xcur, ycur))

        # Find the minimum vertical distance between the current position and
        # the following points: points at the next (as specified by direction)
        # x value, and points at the current x value

        # For points at the next x, if the polygon is currently above, inside =
        # 1, the points considered are at the bottom of a region, i.e., at
        # index 0 of the tuple.
        next_pos = pos + direction
        if next_pos < 0 or next_pos >= len(xvals):
            next_pos = pos
        distance = -1
        for ri, region in enumerate(yregions[pos]):
            if (xcur, region[inside]) not in visited:
                d = abs(ycur - region[inside])
                if d < distance or distance == -1:
                    distance = d
                    move = ('vertical', (pos, ri, inside))

        # For points at the same x, if the polygon is currently above, the
        # points considered are at the top of a region, i.e., at index 1 of the
        # tuple.
        for ri, region in enumerate(yregions[next_pos]):
            polypos = (not inside)
            if (xvals[next_pos], region[polypos]) not in visited:
                d = abs(ycur - region[polypos])
                if d < distance or distance == -1:
                    distance = d
                    move = ('next', (next_pos, ri, polypos))

        # If no suitable next point is found, the polygon is complete. Yield
        # the polygon and try to find a separate polygon.
        if distance < 0:
            yield polygon
            polygon = []
            direction = 10  # dummy value to detect if no next point is found
            while tovisit:
                pos, slpos = tovisit.pop(0)
                ycur = yregions[pos][slpos][0]
                if (xvals[pos], ycur) not in visited:
                    direction = 1
                    inside = 1
                    break
            if direction == 10:
                break
            continue

        # Make the move.
        if move[0] == 'vertical':
            # Vertical move changes the direction (unless it is the very first
            # move) and toggles inside/outside.
            if len(polygon) > 1:
                direction *= -1
            inside = int(not inside)
        pos, rpos, end = move[1]
        ycur = yregions[pos][rpos][end]
"
Making a loop to write new lines to a txt file using python,"basicfile = open('membersofcongress.txt', 'r')

for line in basicfile:
   partyst = line.find('(')
   partyend = line.find(')')
   party = line[partyst:partyend+1]
   name = line[+0:partyst-1]
   outfile = open('memberswcomma.txt','a')
   outp = name + "","" + party + ""\n""
   outfile.write(outp)
   outfile.close()

basicfile.close()
"
List of objects: how to extract attributes from a particular region or slice?,"#Just check if they are all multiplicatives of 2
np.all((array[2::2,2::2] % 2) == 0) # Gives you True
#Just check if they are all multiplicatives of 3
np.all((array[2::2,2::2] % 3) == 0) # Gives you False
"
Removing elements from a List in Python,"[a for a in list if ...]
"
How to remove blank 2D list rows?,"lst = filter(None, lst)
"
Override the {...} notation so i get an OrderedDict() instead of a dict()?,"# test.py
from collections import OrderedDict
print {3: 4, ""a"": 2}
dict = OrderedDict
print {3: 4, ""a"": 2}
"
partial match between two arrays in python,">>> partial =  [x for x in a1 if all(x not in y for y in a2)]
>>> partial
['b', 'c']
>>> a2 += [x + '_111' for x in partial]
>>> a2
['a_111', 'd_111', 'b_111', 'c_111']
"
Python - search for string in array,">>> lst = [""aaa 1"", ""aaa 2"", ""bbb 2"", ""ccc 3"", ""ddd 4""]
>>> [x for x,y in enumerate(lst) if y.split()[0] == ""aaa""]
[0, 1]
>>>
"
Pyside setStyleSheet() and long lines?,"with open('path', 'r', encoding='utf-8') as file:
    style_sheet = file.read()
app.setStyleSheet(style_sheet)
"
Filtering two lists simultaneously,"ids, other = zip(*((id, other) for id, other in zip(ids, other) if id not in del_ids))
"
Python using a regex to find start position of a substring,">>> r = re.compile(r',0\*[0-9A-F]{2}')
>>> m = r.search(""kdjrnnj,0*B3;,w0l44"")
>>> if m : print m.start()
7
>>> m = r.search(""qui8ecc),0*21qxxcd4))"")
>>> if m : print m.start()
8
"
Evaluating values within a dictionary for different keys,"locsOne = {1:[100], 2:[200], 3:[250]}
locsTwo = {}
for k1 in locsOne:
    v1 = locsOne[k1][0]
    locsTwo[k1] = {k2: abs(v1 - locsOne[k2][0]) for k2 in locsOne
                   if k1 != k2 and abs(v1 - locsOne[k2][0]) <= 450}
print(locsTwo)
"
Merging data frame columns of strings into one single column in Pandas,"df.apply(' '.join, axis=0)"
How to implement efficient filtering logic in Python?,"def predicate(fruit_type, fruit_color, fruit_size):
    def _predicate(fruit):
        if not fruit_type == 'All' and not fruit_type == fruit[1][0]:
            return False
        if not fruit_color == 'All' and not fruit_color == fruit[1][1]:
            return False
        if not fruit_size == 'All' and not fruit_size == fruit[1][2]:
            return False
        return True
    return _predicate

query_type = 'All'
query_color = 'All'
query_size = 'All'
myfruits = {}
my_filtered_fruit = list(filter(predicate(query_type, query_color, query_size), myfruits.items()))
"
Making a Dictionary List with cx_Oracle,"    for col in columns:
        # Create a new dictionary with field names as the key, 
        # row data as the value.
        #
        # Then add this dictionary to the new_list
        row_dict[col] = row[columns.index(col)]
"
How to set a range of values in numpy to nan?,"np.where(np.abs(difference)<=2,np.nan,difference)
"
Python. Import specific characters from a .txt file,"characterslist=[]
f=open('putyourtextfilenamehere','r')
while 1:
    x=f.readline().strip()
    if x=='':
        f.close()
        break
    x=[x[i] for i in range(len(x))]
    for j in x:
        characterslist.append(j)
"
Print string left aligned with fixed width and suffix,"print(kf.format(""{:t{}}  {}"", key, ':', value))
"
Insertion of non aligned elements in 4-dimensional matrices in numpy,"def iter_3d(A,B,C):
    A_2 = np.zeros((A.shape[0], A.shape[1] + 1, A.shape[2]))
    for j in xrange(np.size(C, 0)):
      i = C[j]
      A_2[j, :, :] = np.concatenate((A[j, 0:i + 1, :], [B[j, i, :]], A[j, i + 1:, :]))
    return A_2

fn_4d(A, B, C, iter_3d)
"
"Strategy pattern in Python when a ""strategy"" consists of more than one function","def formatbyte(n):
  return ""%02Xh"" % n

def formatword(n):
  return ""%04Xh"" % n
"
Expanding algebraic powers in python (sympy),">>> Mul(x, x, evaluate=False)
x*x
"
Adding methods in type() generated objects in python,"class MyBase(object):
    def myValue(self): return 42

# Assume that myAppObjDict is already initialized.
myAppObj=type(""myAppClass"", (MyBase,),myAppObjDict)
"
Stop reading process output in Python without hang?,"#!/usr/bin/env python
""""""Start process; wait 2 seconds; kill the process; print all process output.""""""
import subprocess
import tempfile
import time

def main():
    # open temporary file (it automatically deleted when it is closed)
    #  `Popen` requires `f.fileno()` so `SpooledTemporaryFile` adds nothing here
    f = tempfile.TemporaryFile() 

    # start process, redirect stdout
    p = subprocess.Popen([""top""], stdout=f)

    # wait 2 seconds
    time.sleep(2)

    # kill process
    #NOTE: if it doesn't kill the process then `p.wait()` blocks forever
    p.terminate() 
    p.wait() # wait for the process to terminate otherwise the output is garbled

    # print saved output
    f.seek(0) # rewind to the beginning of the file
    print f.read(), 
    f.close()

if __name__==""__main__"":
    main()
"
Is there a way to use bincount with a clause in python?,"In [39]: np.bincount([1,2,3,1], weights=[20,10,40,10])
Out[39]: array([  0.,  30.,  10.,  40.])
"
How do you check the presence of many keys in a Python dictinary?,"set(['stackoverflow', 'google']).issubset(sites)"
Efficiently printing matching pairs of semordnilaps from a sorted list of words,"for word, drow in pairup(line.strip().lower()
                         for line in io.open(filepath, 'r')):
  print('{} {}'.format(word, drow))
"
Reshaping two-column data using pandas pivot,"In [10]: df['date'] = pd.to_datetime(df['date'])

In [11]: df['set'] = (df['date'].diff().fillna(0) <= 0).cumsum()
"
How to extract a text in a file python,"chaine = 'some'

with open(""test.txt"", ""r"") as f:
    text = f.read()
    i = text.find(chaine)
    print(text[i:])
"
PyCUDA using struct properly,"ftmp->dist${s}[idx] = ${w[s]}f*dens*(1.0f+3.0f*ev+4.5f*ev*ev-1.5f*vv);
"
Print timestamp for logging in Python,"import logging

def setup_custom_logger(name):
    formatter = logging.Formatter(fmt='%(asctime)s %(levelname)-8s %(message)s',
                                  datefmt='%Y-%m-%d %H:%M:%S')
    handler = logging.FileHandler('log.txt', mode='w')
    handler.setFormatter(formatter)
    screen_handler = logging.StreamHandler(stream=sys.stdout)
    screen_handler.setFormatter(formatter)
    logger = logging.getLogger(name)
    logger.setLevel(logging.DEBUG)
    logger.addHandler(handler)
    logger.addHandler(screen_handler)
    return logger

>>> logger = setup_custom_logger('myapp')
>>> logger.info('This is a message!')
2015-02-04 15:07:12 INFO     This is a message!
>>> logger.error('Here is another')
2015-02-04 15:07:30 ERROR    Here is another
"
One-liner for partial string match in list lookup,"any([acceptable_stem in filename for acceptable_stem in acceptable_stems])
"
"Python: ""Try"" inside shortened for...loop","a = ['2','3','4','5','Cherry']
print [int(x) for x in a if x.isdigit()]
"
How to count elements in a list of lists of strings,">>> lis = [['welcome','a1'],['welcome','a1'],['hello','a2'],['hello','a3']] 
>>> s = set()
>>> for item in lis:
...     tup = tuple(item)  #covert to tuple
...     s.add(tup)
>>> s
set([('welcome', 'a1'), ('hello', 'a3'), ('hello', 'a2')])
"
Pygame read axis value from BU0836X HID device,"while True:
   pygame.event.pump() #allow Pygame to handle internal actions
   joystick_count = pygame.joystick.get_count()

   for i in range(joystick_count):
        joystick = pygame.joystick.Joystick(i)
        joystick.init()

        name = joystick.get_name()
        axes = joystick.get_numaxes()
        hats = joystick.get_numhats()
        button = joystick.get_numbuttons()

        joy = joystick.get_axis(0)

        print(name, joy)
"
Get dictionary key by value if value is list,">>> filter(lambda x: 19 in x[1], mydict.items())
[('amber', [18, 19])]
"
python pandas - map using 2 columns as reference,"df.join(dfm)
"
"How to use a dot ""."" to access members of dictionary?","class Map(dict):
    """"""
    Example:
    m = Map({'first_name': 'Eduardo'}, last_name='Pool', age=24, sports=['Soccer'])
    """"""
    def __init__(self, *args, **kwargs):
        super(Map, self).__init__(*args, **kwargs)
        for arg in args:
            if isinstance(arg, dict):
                for k, v in arg.iteritems():
                    self[k] = v

        if kwargs:
            for k, v in kwargs.iteritems():
                self[k] = v

    def __getattr__(self, attr):
        return self.get(attr)

    def __setattr__(self, key, value):
        self.__setitem__(key, value)

    def __setitem__(self, key, value):
        super(Map, self).__setitem__(key, value)
        self.__dict__.update({key: value})

    def __delattr__(self, item):
        self.__delitem__(item)

    def __delitem__(self, key):
        super(Map, self).__delitem__(key)
        del self.__dict__[key]
"
Converting byte string in unicode string,c.decode('unicode_escape')
Python: extract all placeholders from format string,"def get_vars(s):
    d = {}
    while True:
        try:
            s % d
        except KeyError as exc:
            # exc.args[0] contains the name of the key that was not found;
            # 0 is used because it appears to work with all types of placeholders.
            d[exc.args[0]] = 0
        else:
            break
    return d.keys()
"
Check items in multidimensionaly array in Python,"col_mask = np.isfinite(a).all(axis=0)
"
"Login on a website with python, I tried many examples, but what am I doing wrong?",">>> import md5
>>> import mechanize
>>> br = mechanize.Browser()
>>> r=br.open(""http://www.helifreak.com"")
>>> for f in br.forms():
...     if (f.action == 'http://www.helifreak.com/login.php'):
...             ff=f
... 
>>> m=md5.new()
>>> m.update('password123')
>>> d=m.hexdigest()
>>> ff.set_all_readonly(False)
>>> ff.set_value(d,'vb_login_md5password')
>>> ff.set_value(d,'vb_login_md5password_utf')
>>> ff.set_value('testsubject','vb_login_username')
>>> br.form=ff
>>> r=br.submit()
>>> print r.read()
"
python underscores: learn python the hard way exercise 40,"city_found = cities['_find'](cities, state)
"
Help with logic within generator function,"import itertools as it
def mycombinations(iterable, r, maxGapSize):
    maxGapSizePlusOne = maxGapSize+1    
    for indices in it.combinations(range(len(iterable)),r):
        previous = indices[0]
        for k in indices[1:]:
            if k-previous>maxGapSizePlusOne:                    
                break
            previous = k
        else:
            yield indices   
            # print(indices)
"
how to get all the values from a numpy array excluding a certain index?,a[np.arange(len(a)) != 3]
Can I avoid such cumbersome list comprehension,"d = dict(map(lambda item: item.split(""="", 1), a))
"
Why does the parsing of csv file not break things into their 'logical' order?,"for row in reader:
    print(row)
    # do whatever with row
"
what is this saying in python,"map(tuple, map(lambda row:
    [float(row[0]), int(row[1]), parse(row[2])], res))
"
"Python, inserting a boolean to a corresponding value","#straight from the docs
def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
"
Selecting top N columns for each row in data frame,"from operator import itemgetter as it
from itertools import repeat
n = 3

new_d = [list(zip(repeat(row[""index""]), map(it(0),(row[1:].sort_values(ascending=0)[:n].iteritems()))))
                 for _, row in df.iterrows()]
"
"Reading netCDF and creating ""virtual / pseudo"" csv files","import subprocess
proc = subprocess.Popen(""/usr/bin/tac"", stdin=subprocess.PIPE)  # Output will go to stdout
proc.communicate(""hello\nworld\n"")  # This data goes to the subprocess.
"
Why does None lack a docstring?,">>> Ellipsis.__doc__ is None
True
>>> NotImplemented.__doc__ is None
True
>>> type(Ellipsis)()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: cannot create 'ellipsis' instances
>>> type(NotImplemented)()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: cannot create 'NotImplementedType' instances
"
python - merge two lists but keep same number of occurrences,"def merge_max_frequency(*iterables):
    return reduce(operator.or_, map(collections.Counter, iterables)).elements()
"
Complex Django query,"Group.objects.filter(
    Q(person__position=""worker"") 
    & ~Q(person__position__gt=""worker"")
    & ~Q(person__position__lt=""worker"")
)
"
How can I print this?,"l = map(str,range(0,10))
for i in range(10):
    print ' '.join(l[:len(l)-i]).rjust(20)  
"
Adding days to column in pandas using separate column integers,"import pandas as pd

d = {pd.Timestamp('2015-01-02'):{'days_delinquent':11}, pd.Timestamp('2015-01-15'):{'days_delinquent':23}}
df = pd.DataFrame.from_dict(d,orient='index')
df['returned_on'] = df.index + df.days_delinquent.astype('timedelta64[D]')
"
get file creation & modification date/times in,time.ctime(os.path.getctime(file))
Python: setting __globals__ for modules and their imports,"module = imp.load_source(""test"", ""testdir/test.py"")
module.assertAndTerminate = assertionFunction
"
Using OR in Python for a yes/no?,"if yn.lower() == 'y':
"
how to iterate using itertools for iterables having different lengths in python?,">>> [x[::-1] for x in product(numpy.arange(0, 0.3, 0.1), range(5))]

[(0, 0.0),
 (1, 0.0),
 (2, 0.0),
 (3, 0.0),
 (4, 0.0),
 (0, 0.10000000000000001),
 (1, 0.10000000000000001),
 (2, 0.10000000000000001),
 (3, 0.10000000000000001),
 (4, 0.10000000000000001),
 (0, 0.20000000000000001),
 (1, 0.20000000000000001),
 (2, 0.20000000000000001),
 (3, 0.20000000000000001),
 (4, 0.20000000000000001)]
"
Numpy C-Api array_equal,"def array_equal(a1, a2):
    try:
        a1, a2 = asarray(a1), asarray(a2)
    except:
        return False
    if a1.shape != a2.shape:
        return False
    return bool(asarray(a1 == a2).all())
"
Python - Making a reference to an objects attribute,"class Terminal(object)
    def __init__(self, component, node = None):
        self.component = component
        self.node = node

    def connect(self, node):
        node.add_terminal(self)
        self.node = node

    def disconnect(self):
        self.node.remove_terminal(self)
        self.node = None       

class Component(object):
    def __init__(self):
       self._positive = Terminal(self)

    @property
    def positive(self):
        return self._positive

    @positive.setter
    def positive(self, node):
        self._positive.connect(node)

    @positive.deleter
    def positive(self):
        self._positive.disconnect()
"
Appending '0x' before the hex numbers in a string,">>> re.sub(r'(?<!i)([\da-fA-F]+)', r'0x\1', 'id*a+b')
'id*0xa+0xb'
"
pandas merging based on a timestamp which do not match exactly,"from datetime import timedelta

# get closest match from ""df2"" to row from ""df1"" (as long as it's below the threshold)
def closest(row):
    matches = df2.loc[(df2.employee_id == row.employee_id) &
                      (df2.session_id == row.session_id)]

    deltas = matches.date_start_time - row.date_start_time
    deltas = deltas.loc[deltas <= timedelta(minutes=threshold)]

    try:
        return matches.loc[deltas.idxmin()]
    except ValueError:  # no items
        return row

# replace timestamps in ""df1"" with closest timestamps in ""df2""
df1 = df1.apply(closest, axis=1)

# join
cols = ['date_start_time', 'employee_id', 'session_id']
print df1.merge(df2, on=cols, how='outer')[cols]
"
how to make a while statement run one more time in python 3,"x=1
oncemore = iter([True, False])
while x < 30 or next(oncemore):
    x+=1
    print(x)
"
Python: How to read stdout of subprocess in a nonblocking way,"import subprocess
from threading import Thread 
import time

linebuffer=[]
x=subprocess.Popen(['/bin/bash','-c',""while true; do sleep 5; echo yes; done""],stdout=subprocess.PIPE)

def reader(f,buffer):
   while True:
     line=f.readline()
     if line:
        buffer.append(line)
     else:
        break

t=Thread(target=reader,args=(x.stdout,linebuffer))
t.daemon=True
t.start()

while True:
  if linebuffer:
     print linebuffer.pop()
  else:
     print ""nothing here""
     time.sleep(1)
"
django countries currency code,"import money

country_name = 'France'

for currency, data in money.CURRENCY.iteritems():
    if country_name.upper() in data.countries:
        print currency
        break
"
Thin proxy class for hashables,"class HashableProxy(object):
    def __init__(self, wrapped):
        self._wrapped = wrapped

    def __eq__(self, other):
        return self._wrapped == other

    def __hash__(self):
        return hash(self._wrapped)

class Required(HashableProxy):
    pass

class Optional(HashableProxy):
    pass
"
Python: How to add a custom function to a pre-existing object?,">>> class S(str):
...     def reverse(self):
...         return self.__str__()[::-1]
... 
>>> s = S('hello')
>>> s.reverse()
'olleh'
"
BeatifulSoup: I can print out the whole table but only it saves a row of the table to *.html file,"def results(**kwargs):
    """"""parse and save the data""""""
    with codecs.open('AIS_Page.html', 'w', 'utf-8')  as AIS:
        url = 'http://www.sailwx.info/shiptrack/shipposition.phtml?call=wrn5495'
        web = BeautifulSoup(urllib2.urlopen(url).read())
        for tr in web.find_all ('tr')[4:142]:
            tds = tr.find_all('td')
            coordinates = (""Date/time: %s, Position: %s, Speed:%s"" %\         (tds[0].text,tds[1].text, tds[3].text))
            AIS.write(coordinates)
"
How to use python's list comprehensions to execute the following matlab code?,"Scores = [3, 7, 3, 2, 1, 5, 1]
Scores = [i-0.5 if i<3 else i for i in Scores]

animalIDs = [1, 2, 3, 4, 5, 6, 7] 
animals2Delete = [id for id, score in zip(animalIDs, Scores) if score < 2]
#this could be made in a number of ways, this is just one way.
"
Merging 2 Lists In Multiple Ways - Python,"import itertools

def combos(*seqs):
    counts = map(len, seqs)
    base = []
    for ii, count in enumerate(counts):
        base.extend([ii]*count)
    for take in set(itertools.permutations(base)):
        result = []
        where = [0] * len(seqs)
        for elem in take:
            result.append(seqs[elem][where[elem]])
            where[elem] += 1
        yield result
"
Python timedelta in years,"from dateutil.relativedelta import relativedelta

def yearsago(years, from_date=None):
    if from_date is None:
        from_date = datetime.now()
    return from_date - relativedelta(years=years)
"
How to create a function that uses 2 integers from 2 different lists and adding the pair to a certain integer?,"def pair(list1, list2, x):
    for a in list1:
        for b in list2:
            if a + b == x:
                print a, b
"
Most pythonic way to convert a list of tuples,zip(*list_of_tuples)
Matplotlib text transparency,"import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)

ax.annotate(""TESTING"", xy=(.5, .5), xytext=(.5, .5),
           )

plt.show()
"
Pandas Seaborn Swarmplot doesn't plot,"import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import io

temp=u""""""tweetcricscore 51 highactive
tweetcricscore 46 eventbased
tweetcricscore 12 eventbased
tweetcricscore 46 eventbased
tweetcricscore 1 viewers 
tweetcricscore 178 viewers
tweetcricscore 46 situational
tweetcricscore 23 situational
tweetcricscore 1 situational
tweetcricscore 8 situational
tweetcricscore 56 situational""""""
#after testing replace io.StringIO(temp) to filename
df = pd.read_csv(io.StringIO(temp), 
                 sep=""\s+"", #separator is arbitrary whitespace
                 names=['keyword','freq','class']) #set new col names
print df
"
python changing integers/ floats to None in list,"res = []
for x in content2:
    if x: # x is not empty (0.0)
        res.append(float(x))
    else:
        res.append(None)
content2[:] = res # replaces items in content2 with those from res
"
Beautiful Soup: searching for a nested pattern?,">>> from bs4 import BeautifulSoup
>>> data = """"""
... <div>
...     <div class=""separator"">
...       <a>
...         <img src=""test1""/>
...       </a>
...     </div>
... 
...     <div class=""separator"">
...       <a>
...         <img src=""test2""/>
...       </a>
...     </div>
... 
...     <div>test3</div>
... 
...     <div>
...         <a>test4</a>
...     </div>
... </div>
... """"""
>>> soup = BeautifulSoup(data)
>>> 
>>> for img in soup.select('div.separator > a > img'):
...     print img.get('src')
... 
test1
test2
"
Creating an overlap array with conditions - Python,"a, b = np.ogrid[0:K-N+1, 0:N]
data[a+b]
"
Python: Altering code between iterations,">>> A = [1,2,3,4,5]
>>> B = ['a','b','something','nothing','cat']
>>> c = {x:y for x,y in zip(A,B)}
>>> c[1]
'a'
>>> c[2]
'b'
>>> c[5]
'cat
"
How to convert a string representing a binary fraction to a number in Python,"def parse_bin(s):
    t = s.split('.')
    return int(t[0], 2) + int(t[1], 2) / 2.**len(t[1])
"
"python regex, only digit between whitespaces","re.search(""\s+[0-9]\s+"", s)
"
Find intersection of large number of lists in python,"with open(""abc.txt"") as f:
    lines=(map(int,x.split()) for x in f)
    for x in combinations(lines,2):
        print x,'-->',reduce(set.intersection,imap(set,x))
   ....:         
([1, 2, 3], [2, 3, 4]) --> set([2, 3])
([1, 2, 3], [3, 4, 5]) --> set([3])
([2, 3, 4], [3, 4, 5]) --> set([3, 4])
"
dont get how to make connection,"def create(request): 
   if request.method == 'POST': 
    form = ItemForm(request.POST) 
    if form.is_valid(): 
      # the shoplist object
      form.save(commit=False)
      form.cleaned_date['from_list'] = your_shoplist_object
      form.save()
#...
#...
"
Generating a numpy array with all combinations of numbers that sum to less than a given number,"def partition2(max_range, max_sum):
    max_range = np.asarray(max_range, dtype = int).ravel()        
    if(max_range.size == 1):
        return np.arange(min(max_range[0],max_sum) + 1, dtype = int).reshape(-1,1)
    P = partition2(max_range[1:], max_sum)
    # S[i] is the largest summand we can place in front of P[i]            
    S = np.minimum(max_sum - P.sum(axis = 1), max_range[0])
    offset, sz = 0, S.size
    out = np.empty(shape = (sz + S.sum(), P.shape[1]+1), dtype = int)
    out[:sz,0] = 0
    out[:sz,1:] = P
    for i in range(1, max_range[0]+1):
        ind, = np.nonzero(S)
        offset, sz = offset + sz, ind.size
        out[offset:offset+sz, 0] = i
        out[offset:offset+sz, 1:] = P[ind]
        S[ind] -= 1
    return out
"
Complicated datetime merge pandas,"
table2 = pd.to_datetime(table2)
idx = table2.searchsorted(df['Date'].values)
df['New'] = table2[idx]
print(df)
"
Dynamically calculated zero padding in format string in python,"'{number:02d}'.format(number=4)
"
How to remove a list within list based on len in python?,"A = [x for x in A if len(x[1]) == 2]
"
Add null character to string in python,"[c + '\0' for c in S]
"
"I want to write the 'Class_Scores' to a csv file in rows(Name on one side score on the other), how do I do that?","import  csv
Class_Scores = [['James', 1],['Frank', 2],['Mark', 3]]
with open('Class One Scores.csv','w') as file:
    wr = csv.writer(file,delimiter="","")
    wr.writerows(Class_Scores)
"
manipulating and searching within large files in python,"def words(lines):
    for line in lines:
        for word in line.split():
            yield word
"
replace punctuation with nothing,">>> from string import punctuation
>>> r = re.compile(r'[{}]+'.format(re.escape(punctuation)))
>>> r.sub('', a)
'what is your name Its good'
"
How can I add nothing to the list in list comprehension?,"result = []
for x in some_list:
    if x > 2:
        result.append(x)
"
"Read line in file, print line if it contains string","with open(""dvd.csv"") as f:
    for num, line in enumerate(f, 1):
        if "" arnold "" in line:
            num = str(num)
            print line.split(',')[3] + '' + num 
"
Regex - Print the lines starting with a T,">>> import re
>>> text = """"""Here is some demo text
This line starts with a T
But this one doesn't
That's OK""""""
>>> re.findall('^T', text)
[]  # no multiline match, no results
>>> re.findall('^T', text, re.M)
['T', 'T']  # multiline match, only T in the results
>>> re.findall('^T.*', text, re.M)
['This line starts with a T', ""That's OK""]  # hooray!
"
How to apply formatted printing to a python list?,">>> x = [1.2, 3.4, 5.7, 7.8]
>>> x1 = ['{0:5.4f}'.format(i) for i in x]
>>> x1
['1.2000', '3.4000', '5.7000', '7.8000']
"
Setting Variable to Gateway IP,"from subprocess import Popen, PIPE
cmd = ""/sbin/route -n""
gateway = Popen(cmd.split(), stdout=PIPE)
stdout, stderr = gateway.communicate()
exit_code = gateway.wait()
gw = [line.split()[1] for line in stdout.decode().split('\n') if 'UG' in line][0]
"
Download and SAVE MANY Images from google Image search to a LOCAL FOLDER (Python),"def image_request(url, file):
    response = urllib.request.urlopen(url)
    fh = open(file, ""wb"") #open the file for writing
    fh.write(response.read()) #
"
Is there a recommended way to load arbitrary functions from text (json) files?,"safe_builtins = dict(
    __builtins__ = None,
    float = float,
    sum = sum,
    custom_func = ...
)

loaded_func = eval(""lambda x: ..."", safe_builtins)
"
How to remove comma from list in python,">>> [int(e) for e in some_list]
[1, 2, 3, 4]
"
broadcasting — multiply a (NxN) array by a (M) array to have a (NxNxM) array,">>> a = np.array([[1,2,3],[4,5,6],[7,8,9]])
>>> b = np.array([10, 100, 1000, 10000, 100000])
>>> c = np.einsum('ij,k->ijk', a, b)
>>> c[1, 2, 3]
60000
>>> a[1, 2]
6
>>> b[3]
10000
"
Python list.remove(x) 2.7.5,">>> list1 = ['myfile.v', 'myfile2.sv', 'myfile3.vhd', 'etcfile.v', 'randfile.sv']
>>> p = 0
>>> for x in list1:
...     if os.path.splitext(x)[0] not in set2:
...         list1[p] = x
...         p += 1
... 
>>> del(list1[p:])
>>> list1
['etcfile.v', 'randfile.sv']
"
taking symbol in sum [sympy],">>> from sympy import sum, var, solve
>>> x = var('x')
>>> f = lambda N: sum(n**2, (n, 1, N))
>>> n = var(""n"")
>>> f(x)
x/6 + x**2/2 + x**3/3
"
How to set default text for a Tkinter Entry widget,"from Tkinter import *

root = Tk()
e = Entry(root)
e.insert(END, 'default text')
e.pack()
root.mainloop()
"
Set a value deep in a dict dynamically,"def set(d, key, value):
    dd = d
    keys = key.split('.')
    latest = keys.pop()
    for k in keys:
        dd = dd.setdefault(k, {})
    dd.setdefault(latest, value)

d = {}
set(d, 'a.b.c', 'X')
set(d, 'a.b.d', 'Y')
print(d)
"
Limited deep copy of an instance with a container of containers as an attribute,"t = SetDict(3)
print t.d  # defaultdict(<type 'set'>, {0: set([1]), 1: set([1]), 2: set([1])})

s = copy.copy(t)
print s.d # defaultdict(<type 'set'>, {0: set([1]), 1: set([1]), 2: set([1])})

t.d[3].add(1)
print t.d # defaultdict(<type 'set'>, {0: set([1]), 1: set([1]), 2: set([1]), 3: set([1])})
print s.d # defaultdict(<type 'set'>, {0: set([1]), 1: set([1]), 2: set([1])})

s.d[0].add(2)
print t.d[0] # set([1, 2])
print s.d[0] # set([1, 2])
"
Reverse an arbitrary dimension in an ndarray,"a[[slice(None)]*axis + [slice(None, None, -1)] + [Ellipsis]]
"
Python ConfigParser: how to work out options set in a specific section (rather than defaults),"import ConfigParser

parser = ConfigParser.RawConfigParser()
parser.read(""config.ini"")
#Do your normal config processing here
#When it comes time to audit default vs. explicit,
#clear the defaults
parser._defaults = {}
#Now you will see which options were explicitly defined
print parser.options(""Section 1"")
print parser.options(""Section 2"")
"
Python Lex-Yacc(PLY): Not recognizing start of line or start of string,"import ply.lex as lex

class LqbLexer:
    # List of token names.   This is always required

    tokens = [
        'QTAG',
        'INT',
        'SPACETAB'
        ]


    # Regular expression rules for simple tokens

    def t_QTAG(self,t):
        # corrected regex
        r'(?m)^\s*[Qq]\.[0-9]+\s+'
        t.value = int(t.value.strip()[2:])
        return t

    # A regular expression rule with some action code
    # Note addition of self parameter since we're in a class
    def t_INT(self,t):
        r'\d+'
        t.value = int(t.value)    
        return t

    # Define a rule so we can track line numbers
    def t_newline(self,t):
        r'\n+'
        print ""Newline found""
        t.lexer.lineno += len(t.value)

    # A string containing ignored characters (spaces and tabs)
    # Instead of t_ignore  = ' \t'
    def t_SPACETAB(self,t):
        r'[ \t]+'
        print ""Space(s) and/or tab(s)""

    # Error handling rule
    def t_error(self,t):
        print ""Illegal character '%s'"" % t.value[0]
        t.lexer.skip(1)

    # Build the lexer
    def build(self,**kwargs):
        self.lexer = lex.lex(debug=1,module=self, **kwargs)

    # Test its output
    def test(self,data):
        self.lexer.input(data)
        while True:
             tok = self.lexer.token()
             if not tok: break
             print tok

# test it
q = LqbLexer()
q.build()
print ""-============Testing some VALID inputs===========-""
q.test(""Q.11 "")
q.test(""  Q.12 "")
q.test(""q.13     "")
q.test(""""""


   Q.14
"""""")
q.test(""""""

qewr
dhdhg
dfhg
   Q.15 asda

"""""")

# INVALID ones are
print ""-============Testing some INVALID inputs===========-""
q.test(""asdf Q.16 "")
q.test(""Q.  17 "")
"
How to custom-sort a list of dict to use in json.dumps,"from collections import OrderedDict
import json

allsites = [
    {
        'A5': 'G',
        'A10': 'G',
        'site': 'example1.com',
        'A1': 'G'
    },
    {
        'A5': 'R',
        'A10': 'Y',
        'site': 'example2.com',
        'A1': 'G'
    }
]

sort_order = ['site', 'A1', 'A5', 'A10']
allsites_ordered = [OrderedDict(sorted(item.iteritems(), key=lambda (k, v): sort_order.index(k)))
                    for item in allsites]

data = {'Author': ""joe"", 'data': allsites_ordered}
print json.dumps(data, indent=4, separators=(',', ': '))
"
Python: How do I assign 2 values I return from a function with 1 input as values outside the function?,"def is_ok(x):           #checks if x is a positive integer
    is_int = False
    is_pos = False
    if type(x) == int:
        is_int = True   # if it's an integer, continue to test if >0
        if x > 0:
            is_pos = True
        else:
            pass
    else:
        pass
    return is_int, is_pos

def get_value():
    z = input(""insert value: "")
    is_int, is_pos = is_ok(z)
    if (is_int,is_pos) == (True, True): # could also do `if all(is_int,is_pos):`
        print z**2
    elif (is_int,is_pos) == (False, False):
        print ""Please enter an integer""
        get_value()
    elif (is_int, is_pos) == (True, False):
        print ""Please enter an positive integer""
        get_value()
    else:
        print ""something is wrong""
"
Assigning to global variable inside a function doesn't work,"t= ""tweet_text"" #I'm not sure how do you use this variable    
returnedSentiment= sTwitter.getTweetSentiment(t) #This is how you run your function
print t
"
Select highest value from python list of dicts,"A = [
    [{'x': 1, 'y': 0}, {'x': 2, 'y': 3}, {'x': 3, 'y': 4}, {'x': 4, 'y': 7}],
    [{'x': 1, 'y': 0}, {'x': 2, 'y': 2}, {'x': 3, 'y': 13}, {'x': 4, 'y': 0}],
    [{'x': 1, 'y': 20}, {'x': 2, 'y': 4}, {'x': 3, 'y': 0}, {'x': 4, 'y': 8}]
]

Z = []
for a in A:
    d = max(a, key=lambda d: d['y'])
    Z.append((d['x'], d['y']))
print Z
"
Python: List comprehension to create a list strings of n-size maximum from list of strings of random size,">>> filter(
        lambda res: all(1 <= len(s) <= str_len for s in res),
        [[''.join(list_string[:i]), ''.join(list_string[i:])]
         for i in xrange(len(list_string))])
[['aaabb', 'ccddee']]
"
Python Programming: How can I display a message if a certain value is entered?,"user_input = input('Please enter either the value 1 or 2: ')
if(user_input == 1 or user_input == 2):
    # do stuff here (remove the pass and replace with code you want to execute)
    pass
else:
    user_input = input('Please enter either the value 1 or 2: ')
"
Pandas: run length of NaN holes,"import pandas as pd
import numpy as np
import itertools

a = pd.Series([1, 2, 3, np.nan, 4, np.nan, np.nan, np.nan, 5, np.nan, np.nan])
len_holes = [len(list(g)) for k, g in itertools.groupby(a, lambda x: np.isnan(x)) if k]
print len_holes
"
Extracting data from a list,"list=[[{'identityb32': 'qa46imyg4njipjsgpudn7vnn2zub2tec', 'pubdate': '2014-07-07', 'dirport': '80', 'ip': '18.238.2.85', 'orport': '443', 'identityhash': '8039e43306e35287a6467d06dfd5add6681d4c82', 'nick': 'Onions', 'version': 'Tor 0.2.3.25', 'flags': ['Exit', 'Fast', 'HSDir', 'Running', 'V2Dir', 'Valid'], 'identity': '\x809\xe43\x06\xe3R\x87\xa6F}\x06\xdf\xd5\xad\xd6h\x1dL\x82', 'digest': 'lh2LprFLd0bdvtIfPkz58//mgZk', 'pubtime': '09:37:21'}, {'identityb32': 'qbwfsrn3y5mmcnshotg77clvxjufngso', 'pubdate': '2014-07-07', 'dirport': '80', 'ip': '109.120.148.60', 'orport': '443', 'identityhash': '806c5945bbc758c1364774cdff8975ba68569a4e', 'nick': 'Reactor', 'version': 'Tor 0.2.4.22', 'flags': ['Exit', 'Fast', 'HSDir', 'Running', 'V2Dir', 'Valid'], 'identity': '\x80lYE\xbb\xc7X\xc16Gt\xcd\xff\x89u\xbahV\x9aN', 'digest': 'bDAS/RN7q4injGzkIXobcsSwS6c', 'pubtime': '08:55:57'}, {'identityb32': 'qcrds2ps562vf3ctnuoob4lgtmvt4zau', 'pubdate': '2014-07-07', 'dirport': '9030', 'ip': '195.154.12.66', 'orport': '9001', 'identityhash': '80a23969f2efb552ec536d1ce0f1669b2b3e6414', 'nick': 'han1', 'version': 'Tor 0.2.4.22', 'flags': ['Fast', 'HSDir', 'Named', 'Running', 'Stable', 'V2Dir', 'Valid'], 'identity': '\x80\xa29i\xf2\xef\xb5R\xecSm\x1c\xe0\xf1f\x9b+>d\x14', 'digest': 'FoPXNW58WS4eoCWB/eIK7j5yS4E', 'pubtime': '01:09:22'}], [{'identityb32': 'rzjbswyebloufopae2j46a6272wrwlae', 'pubdate': '2014-07-07', 'dirport': '80', 'ip': '77.247.181.164', 'orport': '443', 'identityhash': '8e52195b040add42b9e02693cf03dafead1b2c04', 'nick': 'rainbowwarrior', 'version': 'Tor 0.2.5.3-alpha', 'flags': ['Exit', 'Fast', 'Guard', 'HSDir', 'Running', 'Stable', 'Unnamed', 'V2Dir', 'Valid'], 'identity': '\x8eR\x19[\x04\n\xddB\xb9\xe0&\x93\xcf\x03\xda\xfe\xad\x1b,\x04', 'digest': '67A4paMg3mQUqHei8jNSWR2QWsg', 'pubtime': '08:29:31'}, {'identityb32': 'rzniakcq6yj3xdbk766e4yuspkhm2bq2', 'pubdate': '2014-07-07', 'dirport': '9030', 'ip': '212.116.188.158', 'orport': '9001', 'identityhash': '8e5a802850f613bb8c2affbc4e62927a8ecd061a', 'nick': '7sYiz', 'version': 'Tor 0.2.3.25', 'flags': ['Exit', 'Fast', 'Guard', 'HSDir', 'Named', 'Running', 'Stable', 'V2Dir', 'Valid'], 'identity': '\x8eZ\x80(P\xf6\x13\xbb\x8c*\xff\xbcNb\x92z\x8e\xcd\x06\x1a', 'digest': '5+O3G9AMJujmUVxO3Fhz7MSPpHI', 'pubtime': '12:34:28'}, {'identityb32': 'rzs3murcnwhdeyj6blsfj7ipltbpmn44', 'pubdate': '2014-07-07', 'dirport': '9030', 'ip': '176.31.122.216', 'orport': '9001', 'identityhash': '8e65b652226d8e32613e0ae454fd0f5cc2f6379c', 'nick': 'somewhere', 'version': 'Tor 0.2.4.22', 'flags': ['Fast', 'HSDir', 'Running', 'Stable', 'Unnamed', 'V2Dir', 'Valid'], 'identity': '\x8ee\xb6R""m\x8e2a>\n\xe4T\xfd\x0f\\\xc2\xf67\x9c', 'digest': 'lEgmmiJcOvzsib9fZjgaxaSG6to', 'pubtime': '03:27:26'}]]
d = {}
for dic in l[0]:
    d.update(dic)
print d
{'identityb32': 'qcrds2ps562vf3ctnuoob4lgtmvt4zau', 'pubdate': '2014-07-07', 'ip': '195.154.12.66', 'orport': '9001', 'digest': 'FoPXNW58WS4eoCWB/eIK7j5yS4E', 'dirport': '9030', 'identityhash': '80a23969f2efb552ec536d1ce0f1669b2b3e6414', 'nick': 'han1', 'version': 'Tor 0.2.4.22', 'flags': ['Fast', 'HSDir', 'Named', 'Running', 'Stable', 'V2Dir', 'Valid'], 'identity': '\x80\xa29i\xf2\xef\xb5R\xecSm\x1c\xe0\xf1f\x9b+>d\x14', 'pubtime': '01:09:22'}
"
"Python: Is it possible to do a ""deep class override""?","def replaceable(var):
    if 'type' in var and var['type'] == 'object' and \
        'properties' in var and isinstance(var['properties'],dict):
        return var['properties']
    return {}
"
Python Function Return,"def barInitial():
    first_name, last_name = 'Bob', 'Jones'
    return first_name, last_name

def fooInitial():
    return barInitial()[0]
"
Is there another better way to get file ext from a given path in python,"def extension(path):
    name, ext = os.path.splitext(path)
    return ext[1:]
"
Sqlite query returns different results from different classes,"import os

_module_directory = os.path.dirname(os.path.abspath(__file__))
"
Sorting numbers in string format with Python,"keys.sort(key=lambda x: map(int, x.split('.')))"
indexing and finding values in list of namedtuples,"[[record.a, record.b] for record in records if record.c == 1]
"
'and' operator in string.contains,"(df['column_name'].str.contains('test1')) & (df['column_name'].str.contains('test2))
"
Convert plain numbers from file to list of integers,">>> 'a\t\tb\nc  d'.split()
['a', 'b', 'c', 'd']
>>> 'a\t\tb\nc  d'.split(' ')
['a\t\tb\nc', '', 'd']
"
Python pandas: how to get hour from timestamp in dataframe?,">>> df = pd.DataFrame({'blah': ('blah', 'blah')}, index=(pd.Timestamp('201301170830'), pd.Timestamp('201301070930'))
>>> ts = df.index
>>> ts.hour
array([8, 9])
"
What is a self-written decorator (like @login_required) actually doing?,"def main(*args, **kwargs):
    if ""some_admin_name"" in session:
        return predecorator_main_function(*args, **kwargs)
    else:
        flash(""\""You shall not pass!\"" - Gandalf"")
        return redirect(url_for(""login""))
"
Function that extracts value from one array depending on the value of another array,"def my_func(a,b):
    result = []
    for i in range(len(b)):
        if a[i] == 5:
            result.append(b[i])
    return np.asarray(result)
"
Python-xml: Verify child element exist for every parent instance,"import xml.etree.ElementTree as ET


data = """"""
<root>
<ticket >
    <device name=""device1""/>
    <detail>
      <name>customer1</name>
      <ip>11.12.13.4/32</ip>
      <blob gid=""20"" lid=""10""/>
    </detail>
    <classification>C1</classification>
  </ticket>

  <ticket >
    <device name=""device2""/>
    <detail>
      <name>customer2</name>
    </detail>
    <classification>C2</classification>
  </ticket>
</root>""""""

tree = ET.fromstring(data)
for ticket in tree.findall('.//ticket'):
    name = ticket.find('.//name').text
    ip = ticket.find('.//ip')
    ip = ip.text if ip is not None else 'No ip record'
    print ""name={name}, ip={ip}"".format(name=name, ip=ip)
"
SSH Connection with Python 3.0,"import subprocess
proc = subprocess.Popen(['ssh', 'user@host', 'cat > %s' % filename],
                        stdin=subprocess.PIPE)
proc.communicate(file_contents)
if proc.retcode != 0:
    ...
"
Finding Incrementing value from list,"x=['0.00', '0.00', '0.00', '7.79', '-1.63', 
   '-0.37', '-1.42', '-0.20', '0.16', '0.25']

for xj, xi in zip(x[:-1], x[1:]):

    if xj == xi:
        print '{} == {}'.format(xj, xi)
    elif float(xj) < float(xi):
        print '{} < {}'.format(xj, xi)
    else:
        print '{} > {}'.format(xj, xi)
"
Does Python have a shorthand notation for passing part of a list without copy?,"seq = ListViwthAView(range(100))
view = seq.view[10:20][5:7]
view[0] = 1337
print seq[15]    # 1337
"
Elegant way to access last two and next two elements in a list?,"def window(inputlist, index):
    return inputlist[max(0, index - 2):index + 3]

for index, elem in enumerate(inputlist):
    print window(inputlist, index)
"
How to print a binary number,">>> [format(e, '05b') for e in m]
['00101', '10000', '00011', '01110', '01111']
"
"In Python, how to sum nested lists: [[1,0], [1,1], [1,0]] → [3,1]","b = list(map(sum,zip(*a)))
"
How would I save time with or statements in Python?,"if ""HOW ARE YOU"" in talk.upper():
    perform_action()
"
Feedparser newbie questions,"print post.title
"
pandas DataFrame split the column and extend the rows,"df = pd.DataFrame({'A': {1: 1, 2: 4, 3: 1, 4: 2, 5: 1},
 'B': {1: 2, 2: 6, 3: 0, 4: 1, 5: 2},
 'C': {1: 3, 2: 7, 3: 1, 4: 1, 5: 3},
 'D': {1: ['a', 'b'], 2: ['b', 'c'], 3: ['a'], 4: ['b'], 5: []}})
df = df.set_index(['A', 'B', 'C'])
result = df['D'].apply(lambda x: pd.Series(map(list, x) if x else [[]]))
#          0    1
# A B C          
# 1 2 3  [a]  [b]
# 4 6 7  [b]  [c]
# 1 0 1  [a]  NaN
# 2 1 1  [b]  NaN
# 1 2 3   []  NaN

result = result.stack()
# A  B  C   
# 1  2  3  0    [a]
#          1    [b]
# 4  6  7  0    [b]
#          1    [c]
# 1  0  1  0    [a]
# 2  1  1  0    [b]
# 1  2  3  0     []
# dtype: object

result.index = result.index.droplevel(-1)
result = result.reset_index()
#    A  B  C    0
# 0  1  2  3  [a]
# 1  1  2  3  [b]
# 2  4  6  7  [b]
# 3  4  6  7  [c]
# 4  1  0  1  [a]
# 5  2  1  1  [b]
# 6  1  2  3   []
"
Format a timestring in python,">>> import datetime
>>> strptime = datetime.datetime.strptime
>>> s = ""2013-02-20 17:57:25+00:00""
>>> # Using s[:-6] to trim off the timezone
>>> strptime(s[:-6], ""%Y-%m-%d %H:%M:%S"").strftime(""%b %d, %Y %I:%M %p"")
'Feb 20, 2013 05:57 PM'
"
How to use Python 3.4's enums without significant slowdown?,">>> timeit.timeit('outcome = Result._member_map_[""lose""]', 'from __main__ import Result')
0.25198313599685207
>>> timeit.timeit('outcome = map[""lose""]', 'from __main__ import Result; map = Result._member_map_')
0.14024519600206986
"
python find all neighbours of a given node in a list of lists,"neighbors = [elem for nlist in neighbors for elem in nlist]
"
Python 3 - Replacing part of a string with imformation from the string,"user_input = 'file write hi.txt { range(10) | random }'
template = env.from_string(user_input)
result = template.render()
print(result)
"
Creating multiple class instances from a list of names in Python?,"cards = {card['name']: Card(**card) for card in card_list}
"
Identify duplicate values in a list in Python,"from collections import defaultdict
D = defaultdict(list)
for i,item in enumerate(mylist):
    D[item].append(i)
D = {k:v for k,v in D.items() if len(v)>1}
"
What do (lambda) function closures capture in Python?,">>> adders = [0,1,2,3]
>>> for i in [0,1,2,3]:
...     adders[i] = (lambda b: lambda a: b + a)(i)
...     
>>> adders[1](3)
4
>>> adders[2](3)
5
"
How to remove parentheses only around single words in a string,"re.sub('\\((\\w+)\\)', '\\1', s)"
Python: parsing incomplete XML chunks,"import xml.etree.ElementTree as ET

chunks = iter([
    '<root>'
    '<el a=""1"" b=',
    '""2""><sub c=""',
    '3"">test</sub',
    '></el><el d=',
    '""4"" e=""5""></',
    'el>',
    '</root>'
    ])


class Source(object):
    def read(self, size):
        # Replace this with code that reads XML chunks from the server
        return next(chunks)

for event, elem in ET.iterparse(Source(), events=('end', )):
    if elem.tag == 'el':
        print(elem)
        # handle_element(elem)
"
How to open an Excel file with Python to display its content?,">>> import psutil
>>> import subprocess
>>> doc = subprocess.Popen([""start"", ""/WAIT"", ""file.pdf""], shell=True)   #Stores the open file as doc
>>> doc.poll()                                                           #Shows that the process still exists (will return 0 if the /WAIT argument is excluded from previous line)
>>> psutil.Process(doc.pid).get_children()[0].kill()                     #Kills the process
>>> doc.poll()                                                           #Shows that the process has been killed
0
>>> 
"
transpose multiple columns Pandas dataframe,"from io import StringIO
import pandas

datatable = StringIO(""""""\
    m   r   s   p   O       W       N         
    1   4   3   1   2.81    3.70    3.03  
    1   4   4   1   2.14    2.82    2.31  
    1   4   5   1   1.47    1.94    1.59  
    1   4   3   2   0.58    0.78    0.60  
    1   4   4   2   0.67    0.00    0.00
    1   4   5   2   1.03    2.45    1.68
    1   4   3   3   1.98    1.34    1.81
    1   4   4   3   0.00    0.04    0.15
    1   4   5   3   0.01    0.00    0.26"""""")

df = (
    pandas.read_table(datatable, sep='\s+')
          .set_index(['m', 'r', 's', 'p'])
          .unstack(level='p')
)

df.columns = df.columns.swaplevel(0, 1)
df.sort(axis=1, inplace=True)

print(df)
"
Which is faster in Python: x**.5 or math.sqrt(x)?,"import time
import math

def timeit1():
    s = time.time()
    for i in xrange(750000):
        z=i**.5
    print ""Took %f seconds"" % (time.time() - s)

def timeit2(arg=math.sqrt):
    s = time.time()
    for i in xrange(750000):
        z=arg(i)
    print ""Took %f seconds"" % (time.time() - s)

timeit1()
timeit2()
"
Python Array Index - Every X elements?,"def rounding_iterator(seq, stride):
    try:
        i = 0
        while True:
            yield seq[int(round(i*stride))]
            i += 1
    except IndexError:
        pass


pies = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

print list(rounding_iterator(pies, 1))
print list(rounding_iterator(pies, 1.1))
print list(rounding_iterator(pies, .9))
"
Strange Output When Iterating Over a Dict of Lists,"In [16]: dic=dict.fromkeys(""spam"",[])

In [17]: [id(x) for x in dic.values()]    #all of them are same objects
Out[17]: [141885196, 141885196, 141885196, 141885196]

In [18]: dic['s'].append(1)   #changing one changes others as well

In [19]: dic
Out[19]: {'a': [1], 'm': [1], 'p': [1], 's': [1]}
"
Return a portion of a plot using matplotlib,"coords = {}

def onselect(xmin, xmax):
    indmin, indmax = np.searchsorted(x, (xmin, xmax))
    indmax = min(len(x)-1, indmax)

    thisx = x[indmin:indmax]
    thisy = y[indmin:indmax]
    coords['x'] = thisx
    coords['y'] = thisy
    line2.set_data(thisx, thisy)
    ax2.set_xlim(thisx[0], thisx[-1])
    ax2.set_ylim(thisy.min(), thisy.max())
    fig.canvas.draw()

# set useblit True on gtkagg for enhanced performance
span = SpanSelector(ax, onselect, 'horizontal', useblit=True,
                    rectprops=dict(alpha=0.5, facecolor='red') )

plt.show()

print 'working with x an y'
print coords['x'][:10]
print coords['y'][:10]
"
How to associate elements in a set with multiple dict entries,"data = {}
for file in files:
    for key, value in get_data(file):
        data.setdefault([get_component(file)], {})[key] = value
"
Python program prints an extra empty line when reading a text file,"from itertools import islice

line_number = int(input('Enter the line number: '))
with open('yourfile') as fin:
    print(next(islice(fin, line_number - 1, line_number), ''), end='')
"
"Only extracting text from this element, not its children",">>> BeautifulSoup.BeautifulSOAP('<html><b>no</b>yes</html>').html.find(text=True, recursive=False)
u'yes'
>>> BeautifulSoup.BeautifulSOAP('<html>yes<b>no</b></html>').html.find(text=True, recursive=False)
u'yes'
"
Find object in a list with multiple primary keys in Python,"next(inst for inst in instances
          if all(get_key_value(inst, pkey) == kw[pkey] for pkey in primary_keys))
"
Python create datetime object from list of values,">>> import datetime
>>> values = ['2014', '08', '17', '18', '01', '05']
>>> datetime.datetime(*map(int, values))
datetime.datetime(2014, 8, 17, 18, 1, 5)
"
date and time to just time in python,"t=""2014/5/18 04:03:41""
from datetime import datetime
str_time= datetime.strptime(t,'2014/5/18  %H:%M:%S').time()
In [72]: print str_time
04:03:41
"
Split on space but not if there is a colon followed by space or if there is a space in quotes,">>> str = 'name: phil age : 23 range: 33, 45 address: ""main ave US"" abcd : xyz' 
>>> re.findall(r'\w+\s*:\s*(?:""[^""]*""|.*?(?=\w+\s*:\s*|$))', str)
['name: phil ', 'age : 23 ', 'range: 33, 45 ', 'address: ""main ave US""', 'abcd : xyz']
"
Exiting out of loop when not found - Binary Search in Python,"while low<high:
    if l[index] == n:
        print index
    if  l[index] < n:
        low = index + 1 
    else:
        high = index
    index = (high + low)/2
"
How do I solve for x with a known function in equation using numpy/scipy?,"from scipy.optimize import minimize_scalar

def f(x):
    return (1 - log_norm_obj.cdf(x)) / log_norm_obj.pdf(x) - x

result = minimize_scalar(f)        
print result.x 
# this would print your result
"
Finding the surrounding sentence of a char/word in a string,"highlightIndices = [100,169]
subtractFromIndex = 0
for sentence in sent_tokenize(paragraph):
    for index in highlightIndices:
        if 0 < index - subtractFromIndex < len(sentence):
            sentencesWithHighlights.append(sentence)
            break
    subtractFromIndex += len(sentence)
"
Use database to store session instead of Cookie with Flask,"import pickle
from datetime import timedelta
from uuid import uuid4
from redis import Redis
from werkzeug.datastructures import CallbackDict
from flask.sessions import SessionInterface, SessionMixin


class RedisSession(CallbackDict, SessionMixin):

    def __init__(self, initial=None, sid=None, new=False):
        def on_update(self):
            self.modified = True
        CallbackDict.__init__(self, initial, on_update)
        self.sid = sid
        self.new = new
        self.modified = False


class RedisSessionInterface(SessionInterface):
    serializer = pickle
    session_class = RedisSession

    def __init__(self, redis=None, prefix='session:'):
        if redis is None:
            redis = Redis()
        self.redis = redis
        self.prefix = prefix

    def generate_sid(self):
        return str(uuid4())

    def get_redis_expiration_time(self, app, session):
        if session.permanent:
            return app.permanent_session_lifetime
        return timedelta(days=1)

    def open_session(self, app, request):
        sid = request.cookies.get(app.session_cookie_name)
        if not sid:
            sid = self.generate_sid()
            return self.session_class(sid=sid, new=True)
        val = self.redis.get(self.prefix + sid)
        if val is not None:
            data = self.serializer.loads(val)
            return self.session_class(data, sid=sid)
        return self.session_class(sid=sid, new=True)

    def save_session(self, app, session, response):
        domain = self.get_cookie_domain(app)
        if not session:
            self.redis.delete(self.prefix + session.sid)
            if session.modified:
                response.delete_cookie(app.session_cookie_name,
                                       domain=domain)
            return
        redis_exp = self.get_redis_expiration_time(app, session)
        cookie_exp = self.get_expiration_time(app, session)
        val = self.serializer.dumps(dict(session))
        self.redis.setex(self.prefix + session.sid, val,
                         int(redis_exp.total_seconds()))
        response.set_cookie(app.session_cookie_name, session.sid,
                            expires=cookie_exp, httponly=True,
                            domain=domain)
"
How to remove specific elements in a numpy array,"import numpy as np

a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
index = [2, 3, 6]

new_a = np.delete(a, index)

print(new_a) #Prints `[1, 2, 5, 6, 8, 9]`
"
Python String split with multiple regex,">>> from BeautifulSoup import BeautifulSoup
>>> html = """"""<html><table border = 1><tr><td>JDICOM</td><td>Thu Sep 16 10:13:34 CDT 2010</td></tr></html>""""""
>>> soup = BeautifulSoup(html)
>>> for each in soup.findAll(name = 'td'):
 print each.contents[0]


JDICOM
Thu Sep 16 10:13:34 CDT 2010
>>> 
"
Randomizing an array into two arrays,"col_two = [[n for n in number if n not in c1_list] for c1_list in col_one]
"
Pandas cvs find date between startdate to enddate,"df['DateAr'] = pd.to_datetime(df['DateAr'])
df['DateDpt'] = pd.to_datetime(df['DateDpt'])

dept_cities = df.groupby('ArCityArCountry')

for city, departures in dept_cities:
    print(city)
    print([list(r) for r in departures.loc[:, ['ID', 'DptCityDptCountry', 'DateDpt', 'DateAr']].to_records()])
"
Convert a list of tuples (3 elements each) to a dict {a: {b: set(c)}},">>> from collections import defaultdict
>>> structure = defaultdict(lambda: defaultdict(set))
>>> for a, b, c in ['foo', 'bar', 'baz']:
    structure[a][b].add(c)


>>> structure
defaultdict(<function <lambda> at 0x02D16F30>, 
            {'b': defaultdict(<type 'set'>, {'a': set(['r', 'z'])}), 
             'f': defaultdict(<type 'set'>, {'o': set(['o'])})})
"
Permute 5 (or 6) lists,">>> from itertools import product
>>> values = [[{'0': '25'}, {'0': '50'}, {'0': '75'}, {'0': '100'}, {'0': '250'}, {'0': '500'}, {'0': '750'}, {'0': '1000'}, {'0': '2500'}], [{'1': 'abc|xyz'}], [{'2': 'Color|purple'}, {'2': 'Color|black'}], [{'3': 'yes|no'}, {'3': 'no|yes'}], [{'4': 'Round|no'}, {'4': 'Round|yes'}], [{'5': 'time|4-5'}], [{'Base': 'gl'}], [{'Type': '123'}]]
>>> every_choice = list(product(*values))
>>> len(every_choice)
72
"
How to get a list of matchable characters from a regex class,"print(re.findall(pattern, x))"
Function to slice indices in Numpy,">>> ind1 = np.array([2, 6])
>>> ind2 = np.array([2, 3])
>>> print index_slice(ind1, ind2)
[[2 2 2]
 [6 5 4]]


>>> ind1 = np.array([2, 6, 1])
>>> ind2 = np.array([2, 3, 4])
>>> print index_slice(ind1, ind2)
[[2 2 2]
 [6 5 4]
 [1 2 3]]
"
How to calculate percentage of sparsity for a numpy array/matrix?,np.isnan(a).sum() / np.prod(a.shape)
"Python: sort lists in dictonary of lists, where one list is a key to sorting","from operator import itemgetter
srt_key = [i for i, e in sorted(enumerate(d[""d""]), key=itemgetter(1))]

new_d = {}

for k,v in d.items():
    new_d[k] = list(itemgetter(*srt_key)(v))

print(new_d)
{'c': ['a', '9', 'g', 'b'], 'a': [4, 7, 1, 6], 'b': [9, 8, 9, 9], 'd': [1, 2, 5, 10]}
"
Cross-Origin Resource Sharing Multiple Sites,"from datetime import timedelta
from flask import make_response, request, current_app
from functools import update_wrapper


def crossdomain(origin=None, methods=None, headers=None,
                max_age=21600, attach_to_all=True,
                automatic_options=True):
    if methods is not None:
        methods = ', '.join(sorted(x.upper() for x in methods))
    if headers is not None and not isinstance(headers, basestring):
        headers = ', '.join(x.upper() for x in headers)
    if not isinstance(origin, basestring):
        origin = ', '.join(origin)
    if isinstance(max_age, timedelta):
        max_age = max_age.total_seconds()

    def get_methods():
        if methods is not None:
            return methods

        options_resp = current_app.make_default_options_response()
        return options_resp.headers['allow']

    def decorator(f):
        def wrapped_function(*args, **kwargs):
            if automatic_options and request.method == 'OPTIONS':
                resp = current_app.make_default_options_response()
            else:
                resp = make_response(f(*args, **kwargs))
            if not attach_to_all and request.method != 'OPTIONS':
                return resp

            h = resp.headers

            h['Access-Control-Allow-Origin'] = origin
            h['Access-Control-Allow-Methods'] = get_methods()
            h['Access-Control-Max-Age'] = str(max_age)
            if headers is not None:
                h['Access-Control-Allow-Headers'] = headers
            return resp

        f.provide_automatic_options = False
        return update_wrapper(wrapped_function, f)
    return decorator
"
get the name of the class and wrap it in an if statement,"for animal in animals:
    if isinstance(animal, Mammal):
        ...
    elif isinstance(animal, Fish):
        ...
    else:
        ...
"
Accessing a value in a tuple that is in a list,[x[1] for x in L]
function_exists in PHP for python3,"In [32]: a = 1

In [33]: def b():
    c = 2
    print(globals()['a'])
    print(globals()['b'])
    print(locals()['c'])
   ....:     

In [34]: b()
1
<function b at 0x7f425cae3ae8>
2
"
link containers with the docker python API,"from docker import Client
>>> cli = Client(base_url='tcp://127.0.0.1:2375')
>>> container = cli.create_container(
...     image='busybox:latest',
...     command='/bin/sleep 30')
>>> response = cli.start(container=container.get('Id'),links=[('EXISTING_CONTAINER', 'LINK_NAME')])
"
"Any way to optimize numpy stats functions (e.g., via numexpr)?","import numpy as np
import time
data = np.random.random((4000, 4000))

start = time.clock()
np.std(data, axis=0)
print time.clock() - start

start = time.clock()
np.std(data, axis=1)
print time.clock() - start
"
NumPy Broadcasting: Calculating sum of squared differences between two arrays,"from scipy.spatial.distance import cdist
out = cdist(a,b,'sqeuclidean')
"
basic regex questions in python to help me learn it,"p = re.compile(r'^(?P<FullName>(?P<Given>\w+) (?P<Middle>\w\.) (?P<Family>\w+))$', re.MULTILINE)
str = ""Jack A. Smith\nMary B. Miller""
matches = re.finditer(p, str)
for match in matches:
    info = match.groupdict()  ## pulling out the match as dictionary
    print info
    print info['Family']
"
quickly drop dataframe columns with only one distinct value,"for col in df.columns:
    if len(df[col].unique()) == 1:
        df.drop(col,inplace=True,axis=1)
"
How to erase the contents of a Frame,"def __init__(self):
    # ...
    self.frame = tk.Frame(self.root).grid(row=0, column=0)
    self.label = tk.Label(self.frame)
    self.label.grid()
    self.root.bind('q', self.toggle)


def toggle(self, event):
    self.counter += 1
    # ...
    # the tk.Label call is not assigned to a variable on purpose
    self.label.config(text=text, bg=bg)
"
"How can I ""unpivot"" specific columns from a pandas DataFrame?","pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')"
How do I get data from stdin using os.system(),"import urllib2
f = urllib2.urlopen('http://www.python.org/')
print f.read(100)
"
High performance variable blurring in very big images using Python,"import numpy as np

def variable_blur(data, kernel_size):
    """""" Blur with a variable window size
    Parameters:
      - data: 2D ndarray of floats or integers
      - kernel_size: 2D ndarray of integers, same shape as data
    Returns:
      2D ndarray
    """"""
    data_blurred = np.empty(data.shape)
    Ni, Nj = data.shape
    for i in range(Ni):
        for j in range(Nj):
            res = 0.0
            weight = 0
            sigma =  kernel_size[i, j]
            for ii in range(i - sigma, i+sigma+1):
                for jj in range(j - sigma, j+sigma+1):
                    if ii<0 or ii>=Ni or jj < 0 or jj >= Nj:
                        continue
                    res += data[ii, jj]
                    weight += 1
            data_blurred[i, j] = res/weight
    return data_blurred

data = np.random.rand(50, 20)
kernel_size = 3*np.ones((50, 20), dtype=np.int)
variable_blur(data, kernel_size)
"
How to share same model with QTableView and QComboBox,"from PySide import QtGui, QtCore
import sys

class CombinedModel(object):

    def __init__(self):
        self.items = [['Pet', 'Dog'],['Pet', 'Cat'],['Bird','Eagle'],['Bird','Jay'],['Bird','Falcon']]
        self.selectors = list({ k[0] for k in self.items})
        self.table_if = TableModel(self)
        self.combo_if = ComboModel(self)
        self.currentSelection = None

    def currentItems(self):
        return [k[1] for k in self.items if k[0] == self.currentSelection]

    def setSelection(self,combo_row):
        self.currentSelection = self.selectors[combo_row]
        self.table_if.layoutChanged.emit()

class TableModel(QtCore.QAbstractTableModel):
    def __init__(self, model, parent=None):
        QtCore.QAbstractTableModel.__init__(self, parent)
        self.model = model

    def rowCount(self, parent=QtCore.QModelIndex()):
        return len(self.model.currentItems())      
    def columnCount(self, parent=QtCore.QModelIndex()):
        return 1
    def data(self, index, role):
        if not index.isValid() or role != QtCore.Qt.DisplayRole: return 
        row=index.row()
        return self.model.currentItems()[row]

class ComboModel(QtCore.QAbstractListModel):
    def __init__(self, model, parent=None):
        QtCore.QAbstractListModel.__init__(self, parent)
        self.model = model

    def rowCount(self, parent=QtCore.QModelIndex()):
        return len(self.model.selectors)      
    def data(self, index, role):
        if not index.isValid() or role != QtCore.Qt.DisplayRole: return 
        row=index.row()
        return self.model.selectors[row]

class MyWindow(QtGui.QWidget):
    def __init__(self, *args):
        QtGui.QWidget.__init__(self, *args)
        vLayout=QtGui.QVBoxLayout(self)
        self.setLayout(vLayout)

        self.model=CombinedModel()

        self.combo=QtGui.QComboBox()
        self.combo.setModel(self.model.combo_if)
        self.combo.activated.connect(self.model.setSelection)
        vLayout.addWidget(self.combo)

        self.ViewA=QtGui.QTableView(self)
        self.ViewA.setModel(self.model.table_if)
        self.ViewA.clicked.connect(self.viewClicked)
        vLayout.addWidget(self.ViewA)

        self.model.setSelection(0)

    def viewClicked(self, indexClicked):
        print('indexClicked() row: %s  column: %s'%(indexClicked.row(), indexClicked.column() ))

if __name__ == ""__main__"":
    app = QtGui.QApplication(sys.argv)
    w = MyWindow()
    w.show()
    sys.exit(app.exec_())
"
How to use beaker with GAE,"class MainPage(webapp.RequestHandler):
  def get(self):
    session = self.request.environ['beaker.session']

    if 'counter' in session:
       counter = session['counter'] + 1
       session['counter'] = counter
    else:
       session['counter'] = 1

    self.response.out.write('counter: %d' % counter)
"
Compare or match 2 strings and display matched word,">>> [a for a,b in zip(""cat feet"".split(), ""cat shoes"".split()) if a == b]
['cat']
>>> [a for a,b in zip(""feet cat"".split(), ""cat shoes"".split()) if a == b]
[]
"
Unsure how to use List Comprehension on a loop,"def merge(self, line):
    return ([x for x in line if x] + ([0] * len(line)))[:len(line)]
"
Python urllib2 sending POST data,">>> p = {""var"": [""value"", ""value2""], ""var2"": [""yetanothervalue""]}
>>> urlencode([(k, v) for k, vs in p.items() for v in vs])
'var=value&var=value2&var2=yetanothervalue'
"
Check if a list is a rotation of another list that works with duplicates,"def rot(l1,l2):
    from collections import deque
    if l1 == l2:
        return True
    # if length is different we cannot get a match
    if len(l2) != len(l1):
        return False
    # if any elements are different we cannot get a match
    if set(l1).difference(l2):
        return False
    l2,l1 = deque(l2),deque(l1)
    for i in range(len(l1)):
        l2.rotate() # l2.appendleft(d.pop()) 
        if l1 == l2:
            return True
    return False
"
results of two propositions using python,"def conjunction(i,j): # conjunction i,j
    return (i and j)

def disjunction(i,j): # dis-junction i,j
    return (i or j)

def exclusive(i,j): # exclusive i,j
    return (i != j)

def conditional(i,j): # conditional i,j
    return j if i else True

def biconditional (i,j): # biconditional i,j
    return (i == j)

output = [[],[],[],[],[]]
titles = [""Conjunction"", ""Disjunction"", ""Exclusive"", ""Conditional"", ""Biconditional""]

for f1 in [True, False]:
    for f2 in [True, False]:
        output[0].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(conjunction(f1, f2))))
        output[1].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(disjunction(f1, f2))))
        output[2].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(exclusive(f1, f2))))
        output[3].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(conditional(f1, f2))))
        output[4].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(biconditional(f1, f2))))


for i in range(5):
    print ""="" * 30
    print titles[i]
    print ""-"" * 30
    print ""\n"".join(output[i])
    print ""-"" * 30
"
Removing specific columns and rows from nested list,"glider = [[0,0,0,0],[1,2,3,4],[0,1,3,4],[0,0,0,0]]

glider = glider[1:-1]

templist = []

for i in glider:
    templist.append(i[1:-1])
glider = templist
del templist
"
How to input an integer tuple from user?,"tuple(map(int, input().split(',')))"
Convert hex string to int,"int('deadbeef', 16)"
"Python - Pandas - create ""first fail"" column from other column data",">>> df['FF'] = np.where(df.any(axis=1), df.idxmax(axis=1), 'P')
>>> df
   A  B  C FF
1  0  1  1  B
2  0  0  0  P
3  1  0  0  A
4  0  0  1  C
5  0  0  0  P
6  0  1  0  B
7  1  1  0  A
8  1  1  1  A
"
Pygame screen width,"derp = myfont.render(""Derp"",newSat,(r,g,b))
newX = random.randint(1,800 - derp.get_width())
newY = random.randint(1,600 - derp.get_height())
"
Python: Finding symmetries in list of lists,">>> ls = [[1,2,3,4,5,6], [2,4,6,8,10,12], [1,4,5,2,3,6], [1,2,3,4,9,3]]
>>> sym = [(x, switch(x)) for x in ls if switch(x) in ls[ls.index(x)+1:]]
>>> sym
[([1, 2, 3, 4, 5, 6], [1, 4, 5, 2, 3, 6])]
"
Getting the choice of optionmenu right after selection Python,"def option_changed(foo, bar, baz):
    #do stuff

#...
variable.trace(""w"", lambda *args: option_changed(qux, 23, ""hello""))
"
Python String.startswith() with a list of strings in Javascript,"function endsWith2(haystack, needles) {
    var i = needles.length, j, k = haystack.length;
    while (i-- > 0) {
        j = k - needles[i].length;
        if (j >= 0 && haystack.indexOf(needles[i], j) === j)
            return true;
    }
    return false;
}
"
How do I make new columns in dataframe from a row of a different column?,"import pandas as pd

df = {'most_exhibitions' : pd.Series(['USA (1) Netherlands (5)' ,
'United Kingdom (2)','China (3) India (5) Pakistan (8)','USA (11) India (4)'], index=['a', 'b', 'c','d']), 
              'name' : pd.Series(['Bob', 'Joe', 'Alex', 'Bill'], index=['a', 'b', 'c','d'])}

df = pd.DataFrame(df)
#cange ordering of columns
df = df[['name', 'most_exhibitions']]
print df
#   name                  most_exhibitions
#a   Bob           USA (1) Netherlands (5)
#b   Joe                United Kingdom (2)
#c  Alex  China (3) India (5) Pakistan (8)
#d  Bill                USA (11) India (4)

#copy original to new dataframe for joining original df
df1 = df.reset_index().copy()

#remove '(' and last ')'
df['most_exhibitions'] = df['most_exhibitions'].str.replace('(', '')
df['most_exhibitions'] = df['most_exhibitions'].str.strip(')')

#http://stackoverflow.com/a/34065937/2901002
s = df['most_exhibitions'].str.split(')').apply(pd.Series, 1).stack()
s.index = s.index.droplevel(-1)
s.name = 'most_exhibitions'
print s
#a               USA 1
#a       Netherlands 5
#b    United Kingdom 2
#c             China 3
#c             India 5
#c          Pakistan 8
#d              USA 11
#d             India 4
#Name: most_exhibitions, dtype: object

df = df.drop( ['most_exhibitions'], axis=1)
df = df.join(s)
print df
#   name  most_exhibitions
#a   Bob             USA 1
#a   Bob     Netherlands 5
#b   Joe  United Kingdom 2
#c  Alex           China 3
#c  Alex           India 5
#c  Alex        Pakistan 8
#d  Bill            USA 11
#d  Bill           India 4

#exctract numbers and convert them to integer
df['numbers'] = df['most_exhibitions'].str.extract(""(\d+)"").astype('int')
#exctract text of most_exhibitions
df['most_exhibitions'] = df['most_exhibitions'].str.rsplit(' ', n=1).str[0]
print df
#   name most_exhibitions  numbers
#a   Bob              USA        1
#a   Bob      Netherlands        5
#b   Joe   United Kingdom        2
#c  Alex            China        3
#c  Alex            India        5
#c  Alex         Pakistan        8
#d  Bill              USA       11
#d  Bill            India        4

#pivot dataframe
df = df.pivot(index='name', columns='most_exhibitions', values='numbers')
#NaN to empty string 
df = df.fillna('')
df = df.reset_index()
"
"Augment Python cmd module ""help"" printout","import cmd

class MyCmd(cmd.Cmd):
    def do_cmd1(self): pass
    def do_cmd2(self): pass
    def do_cmd3(self): pass

d = MyCmd()
d.doc_header = '(use Ctrl+l to clear screen, Ctrl+a ...)'  # <---
d.cmdloop()
"
Solve for the argument to a function that will produce a particular return value,"def y(x):
    return x*x

def offset_function(f, desired=0):
    def newf(x):
        return f(x) - desired
    return newf

y9 = offset_function(y, 9)

for x in range(5):
    print x, y(x), y9(x)
"
Index the middle of a numpy array?,"x = np.arange(10)
middle = lambda x: x[len(x)/4:len(x)*3/4]
"
How can I get an array of alternating values in python?,"import numpy as np
from timeit import Timer

if __name__ == '__main__':

    setupstr=""""""
import numpy as np
N = 10000
""""""

    method1=""""""
a = np.empty((N,),int)
a[::2] = 1
a[1::2] = -1
""""""

    method2=""""""
a = np.tile([1,-1],N)
""""""

    method3=""""""
a = np.array([1,-1]*N)   
""""""

    method4=""""""
a = np.array(list(itertools.islice(itertools.cycle((1,-1)), N)))    
""""""
    nl = 1000
    t1 = Timer(method1, setupstr).timeit(nl)
    t2 = Timer(method2, setupstr).timeit(nl)
    t3 = Timer(method3, setupstr).timeit(nl)
    t4 = Timer(method4, setupstr).timeit(nl)

    print 'method1', t1
    print 'method2', t2
    print 'method3', t3
    print 'method4', t4
"
Plotting histogram of list of tuplets matplotlib,"# x axis: one point per key in the Counter (=unique tuple)
x=range(len(c))
# y axis: count for each tuple, sorted by tuple value
y=[c[key] for key in sorted(c)]
# labels for x axis: tuple as strings
xlabels=[str(t) for t in sorted(c)]

# plot
plt.bar(x,y,width=1)
# set the labels at the middle of the bars
plt.xticks([x+0.5 for x in x],xlabels)
"
Matplotlib colorbar moves second x axis,"import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec


X = np.array([0., 0.5, 1., 1.5, 2., 2.5, 3., 3.5, 4.])
X2 = np.array([122, 85, 63, 50, 23, 12, 7, 5, 2])
Y = np.cos(X*20)
Z = np.sin(X*20)

fig = plt.figure()
gs = gridspec.GridSpec(1, 2)
right_gs = gridspec.GridSpecFromSubplotSpec(1, 2, width_ratios=[30, 1], subplot_spec=gs[1], wspace=0.05)

ax1 = fig.add_subplot(right_gs[0])
color_axis = fig.add_subplot(right_gs[1])



ax2 = ax1.twiny()

ax1.set_xlim(-0.2, max(X)+0.2)
plt.tick_params(axis='both', which='major', labelsize=10)
ax1.minorticks_on()
ax1.grid(b=True, which='major', color='gray', linestyle='--', lw=0.3)

SC = ax1.scatter(X, Y, c=Z, cmap='viridis')
ax1.set_xlabel(""Original x-axis"")

ax2.set_xlim(ax1.get_xlim())
ax2.set_xticks(X)
ax2.set_xticklabels(X2)
ax2.set_xlabel(""Second x-axis"")

cbar = fig.colorbar(SC, cax=color_axis)
cbar.set_label('B', fontsize=10, labelpad=4, y=0.5)
cbar.ax.tick_params(labelsize=10)

fig.tight_layout()
plt.show()
"
How to efficiently unravel arguments to a database in Python,"def myfunc(*args):
    statement = ""INSERT INTO table VALUES("" + ', '.join(str(x) for x in args) + "");""
    db.execute(statement)
"
Searching a list for the longest string,"myList = ['string', 'cat', 'mouse', 'gradient']

print max(myList, key=len)
'gradient'
"
Python scrollbar on text widget,"#Import Tkinter
from Tkinter import *
#define master
master = Tk()

#Horizontal (x) Scroll bar
xscrollbar = Scrollbar(master, orient=HORIZONTAL)
xscrollbar.pack(side=BOTTOM, fill=X)
#Vertical (y) Scroll Bar
yscrollbar = Scrollbar(master)
yscrollbar.pack(side=RIGHT, fill=Y)

#Text Widget
text = Text(master, wrap=NONE,
            xscrollcommand=xscrollbar.set,
            yscrollcommand=yscrollbar.set)
text.pack()

#Configure the scrollbars
xscrollbar.config(command=text.xview)
yscrollbar.config(command=text.yview)
#Run tkinter main loop
mainloop()
"
Difference between np.random.seed() and np.random.RandomState(),"np.random.seed(1234)
np.random.uniform(0, 10, 5)
#array([ 1.9151945 ,  6.22108771,  4.37727739,  7.85358584,  7.79975808])
np.random.rand(2,3)
#array([[ 0.27259261,  0.27646426,  0.80187218],
#       [ 0.95813935,  0.87593263,  0.35781727]])
"
Python - Convert unicode hex to string,">>> s='<div>&#x412;&#x432;&#x43E;&#x441;&#x43A;&#x440;&#x435;&#x441;&#x435;&#x43D;&#x44C;</div>'
>>> import html.parser
>>> h=html.parser.HTMLParser()
>>> h.unescape(s)
'<div>Ввоскресень</div>'
"
convert month numeric form into their name?,"# Near the top of views.py
from datetime import datetime

# ...
currentMonth = datetime.now().strftime('%B')
return render_to_response('showroom.html',{'currentMonth':currentMonth,} , context_instance=RequestContext(request))
"
numpy multiple ndarray creation at once,"X,Y = ( np.zeros(1) for _ in range(2) )
X,Y,Z = ( np.zeros(1) for _ in range(3) )
W,X,Y,Z = ( np.zeros(1) for _ in range(4) )
...
"
Dictionaries in Python,"get_common_words = lambda places: [word for word in places[0] if all(word in place for place in places[1:])]
"
Number of comparisons in insertion sort,"if value >= list[j]:
     numOfComp += 1
     j = j - 1
"
Active texturing with pygame (possible? what concepts to look into?),"import pygame, sys

#init pygame
pygame.init()

#init screen
screen=pygame.display.set_mode((800,600))
screen.fill((255,0,255))

#loading the images
texture=pygame.image.load(""texture.jpg"").convert_alpha()
texture_rect=texture.get_rect()
texture_rect.center=(200,300)
mask=pygame.image.load(""mask2.png"").convert_alpha()
mask_rect=mask.get_rect()
mask_rect.center=(600,300)

textured_mask=mask.copy()
textured_rect=textured_mask.get_rect()
textured_rect.center=400,300

textured_mask.blit(texture,(0,0),None,pygame.BLEND_ADD)

screen.blit(texture,texture_rect)
screen.blit(mask,mask_rect)
screen.blit(textured_mask,textured_rect)

pygame.display.flip()

while 1:
    event=pygame.event.wait()
    if event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key in [pygame.K_ESCAPE, pygame.K_q]):
        sys.exit()
"
python unittest howto,"def get_web_content(url):
    # Extracted code
    url_handler = urllib2.urlopen(url)
    content = url_handler.read()
    url_handler.close()
    return content

def write_to_file(content, filename, tmpdir):
    # Extracted code
    file_handler = open(os.path.join(tempdir, filename), ""w"")
    file_handler.write(content)
    file_handler.close()

def download_distribution(url, tempdir):
    # Original code, after extractions
    distribution_contents = get_web_content(url)
    filename = get_file_name(url)
    write_to_file(distribution_contents, filename, tmpdir)
    return True
"
pandas row specific apply,">>> Series([s[x]+"" my index is:  ""+x for x in s.keys()], index=s.keys())
a      six index  a
b    seven index  b
c      six index  c
d    seven index  d
e      six index  e
"
How to align subplot with specified size?,"import sys, os
import matplotlib.pyplot as plt

path = sys.path[0]
sizes = [(12,3,), (4,3,)]
x =  range(20)


for i, size in enumerate(sizes):
    fig = plt.figure(figsize = size, dpi = 80, facecolor='white', edgecolor=None,linewidth=0.0, frameon=True, subplotpars=None)
    ax = fig.add_subplot(111)
    ax.plot(x)
    plt.ylabel ('Some label')

    plt.tight_layout()

    fig.savefig(os.path.join(path, 'size_'+str(i)+'.png'), dpi=80,facecolor=fig.get_facecolor(), edgecolor=None, papertype=None, format='png',transparent=False)
"
Generate character images with a font whose name cannot be correctly decoded,">>> u = u'\u6211'      # Unicode for 我
>>> u.encode('big5hkscs')
'\xa7\xda'
"
python django decode array html codes to readable text,"myString = ''.join(map(chr, eventData))
"
Can't access attribute set on g object in request,"from flask import current_app

class DataIOExtension(object):
    def __init__(self, app=None):
        self._app_cache = {}

        if app is not None:
            self.init_app(app)

    def init_app(self, app):
        # an instance is created once per app
        self._app_cache[app] = DataIO()

    @property
    def client(self):
        return self._app_cache[current_app._get_current_object()]

    def __getattr__(self, name):
        return getattr(self.client, name)

data_service = DataIOExtension()
data_service.init_app(app)

@app.route('/hello')
def hello():
    full_list = data_service.get_case_list()
"
Merge and sum of two dictionaries,"x = {'both1':1, 'both2':2, 'only_x': 100 }
y = {'both1':10, 'both2': 20, 'only_y':200 }

print { k: x.get(k, 0) + y.get(k, 0) for k in set(x) }
print { k: x.get(k, 0) + y.get(k, 0) for k in set(x) & set(y) }
print { k: x.get(k, 0) + y.get(k, 0) for k in set(x) | set(y) }
"
readlines() without EOL at the of the lines,"lista = [line.strip() for line in z]
"
Multiple instances of a global module variable?,"from contextlib import contextmanager
import importlib
import random
import sys

MODULE_NAME = 'statictest'
NUM_INSTANCES = 4
instances = []

# initialize module instances
for _ in xrange(NUM_INSTANCES):
    if MODULE_NAME in sys.modules:
        del sys.modules[MODULE_NAME]

    module = importlib.import_module(MODULE_NAME)
    for _ in xrange(random.randrange(10)): # call testcount a random # of times
        module.Test.testcount()

    instances.append(sys.modules[MODULE_NAME])

@contextmanager
def statictest_inst(n):
    save = sys.modules[MODULE_NAME]
    sys.modules[MODULE_NAME] = instances[n]
    yield instances[n]
    sys.modules[MODULE_NAME] = save

def get_counts():
    counts = []
    for i in xrange(NUM_INSTANCES):
        with statictest_inst(i) as inst:
            counts.append(inst.count)
    return counts

print 'initial counts', get_counts()

choice = random.randrange(NUM_INSTANCES)
print 'calling instance[{}].testcount()'.format(choice)
with statictest_inst(choice) as inst: # use context manager
    inst.Test.testcount()

print 'counts after updating one of them', get_counts()
"
How to rearrange the elements contained in lists in a dictionary,"def recursive_appending(dict, list,e,inittext):
  if not e in dict:
    list.append(inittext + ""."" + e)
  else:
    for z in dict[e]:
      recursive_appending(dict, list,z,inittext + ""."" + e)

def rearrange_dict(dict_1, root):
    dict_2 = {root: []}
    for x in dict_1[root]:
        if x in dict_1:
            for z in dict_1[x]:
                recursive_appending(dict_1, dict_2[root],z,x)
        else:
          dict_2[root].append(x)
    return dict_2

dict_1 ={'a' : ['X1', 'X2'] , 'X2' : ['Y1','Y2'] , 'Y1':['Z1','Z2','Z3'], 'Z1':['A1','A2']}
root = 'a'
print(rearrange_dict(dict_1, root))
"
What is the easiest way to get a list of whole factor pairs of a given integer?,"def f(value):
    factors = []
    for i in range(1, int(value**0.5)+1):
        if value % i == 0:
            factors.append((i, value / i))
    return factors
"
Computer Shut Off Python 3.4,"import subprocess
subprocess.call(['osascript', '-e',
'tell app ""System Events"" to shut down'])
"
Python lambda closure scoping,">>> stuff = [lambda x: n+x for n in [1, 2, 3]]
>>> for f in stuff:
...     print f(1)
4
4
4
>>> stuff = [lambda x, n=n: n+x for n in [1, 2, 3]]
>>> for f in stuff:
...     print f(1)
2
3
4
"
Separating Progress Tracking and Loop Logic,"# highly simplified cancellation token
# probably needs synchronization
class CancellationToken:
     cancelled = False
     def isCancelled(self):
         return cancelled
     def cancel(self):
         cancelled = True

# iterates a collection with cancellation support
def withCancellation(collection, cancelToken):
     for element in collection:
         if cancelToken.isCancelled():
             break
         yield element

progressCollection = withProgress(collection, RealProgressBar())
cancellableCollection = withCancellation(progressCollection, cancelToken)
bigIteration(cancellableCollection)

# meanwhile, on another thread...
cancelToken.cancel()
"
"adding each member of an array again, right after itself","from itertools import chain, izip
new_mac_tags = list(chain.from_iterable(izip(mac_tags, mac_tags)))
"
Arranging the string of a list in a required format in python,"rs = ','.join(result).split(',')
idx = [i for i,j in enumerate(rs) if j.strip().startswith('Mr')][0]
final_result = (rs[idx] +',' + ','.join(rs[1:idx] + rs[idx+1:])).strip()
print final_result
"
Python MongoDB (PyMongo) Mutliprocessing cursor,"# Calculate chunksize using same algorithm used internally by pool.map
chunksize, extra = divmod(pcount, CONFIG_POOL_SIZE * 4)
if extra:
   chunksize += 1

pool.imap(dowork, ((p, idx, pcount) for idx,p in enumerate(products)), chunksize=chunksize)
pool.close()
pool.join()
"
Pickling dictionary data then loading it doesn't work,"from Tkinter import *
import pickle


root=Tk()
dic={}

class Launch(object):
    def __init__(self, root):
        self.load()  # <-- load
        root.title(""Choose Client"")
        self.row = 3
        for key in dic:
            Label(root, text=key).grid(row=self.row, column=0)
            self.row += 1
        l3=Label(root, text=""Client Name"")
        l3.grid(row=0, column=0)
        self.e1=Entry(root)
        self.e1.grid(row=0, column=1)
        l4=Label(root, text=""Client age"")
        l4.grid(row=1, column=0)
        self.e2=Entry(root)
        self.e2.grid(row=1, column=1)
        b3=Button(root, text=""Create client"", command=self.add)
        b3.grid(row=2)

    def add(self):
        client=self.e1.get()
        age=self.e2.get()
        dic[client]=age
        Label(root, text=client).grid(row=self.row)
        self.row += 1  # <--- increase row count
        with open(""data"", ""wb"") as f:
            pickle.dump(dic, f)

    def load(self):
        # should be declared, otherwise, will create local variable
        global dic
        try:
            dic = pickle.load(open(""data"", ""rb""))
        except IOError:  # if file does not exist.
            pass


app = Launch(root)
root.mainloop()
"
Python Read Text File Column by Column,"import csv

with open('file.txt', 'rb') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
"
Using tkinter I want to be able to get two inputs from the user using the same radiobuttons,"def __init__(self, master):
    ...
    self.variables = variables = []
    for text, value in OPTIONS:
        var = tk.StringVar()
        variables.append(var)
        tk.Checkbutton(self.typeFrame, text=text, variable=var,
                       onvalue=text, offvalue='').pack(anchor = 'w')
    ...

def exit(self):
    self.type_integration = ','.join(v.get() for v in self.variables if v.get())
    self.master.destroy()
"
Converting integer to string,str(i)
Number of occurrences in two strings using a for loop,"def occurances(fst, sec):
    osum=0
    for c in set(fst):
        #try it yourself :)
    return osum
"
Running Python in powershell?,"name = raw_input(""Enter your name: "")
print ""Hello, "" + name
"
Pandas: how to fill null values matching the right types of that column?,"df.column.fillna('0',inplace = True)
"
Python: How can I convert string to datetime without knowing the format?,"from dateutil import parser
parser.parse(""8:36pm"")
>>>datetime.datetime(2015, 6, 26, 20, 36)
parser.parse(""18:36"")
>>>datetime.datetime(2015, 6, 26, 18, 36)
"
Perform an operation during the last iteration of a for loop in python,"for line in file:
    if line.startswith('TK'):
        lastitem = None
        for item in line.split():
            if item.startwith('ID='):
                lastitem = item
                # *stuff*

        if lastitem is not None:
             # *stuff*
"
IPython Notebook widgets for Matplotlib interactivity,"fig, ax = plt.subplots()
ax.plot([3,1,2,4,0,5,3,2,0,2,4])
plt.close(fig)

vline = ax.axvline(1)
hline = ax.axhline(0.5)

def set_cursor(x, y):
    vline.set_xdata((x, x))
    hline.set_ydata((y, y))
    display(fig)

interact(set_cursor, x=(1, 9, 0.01), y=(0, 5, 0.01))
"
Prevent matplotlib statefulness,"import matplotlib.pyplot as plt
import matplotlib.backends.backend_agg as backend
from matplotlib.figure import Figure

# Independent figure/axes
fig = Figure()
canvas = backend.FigureCanvas(fig)
ax = fig.add_subplot(111)
ax.plot(range(10))

# gca() is completely unaware of this axes and will create a new one instead:
ax2 = plt.gca()
print 'Same axes?:', id(ax) == id(ax2)

# And `plt.show()` would show the blank axes of `ax2`
"
Python regex for line of digits and optional dash+digits. Why not matching?,"import re

tgt='''
#Match
1
34-1
2-5-2
15-2-3-309-1

# Don't match
1--
--
#$@%^#$@#
dafadf
10-asdf-1
-12-1-
'''

print re.findall(r'^(\d+(?:-\d+)*)$', tgt, re.M)
# ['1', '34-1', '2-5-2', '15-2-3-309-1']
"
Persist UTF-8 as default encoding,"def main():

    ...

    # Remove sys.setdefaultencoding() so that users cannot change the
    # encoding after initialization.  The test for presence is needed when
    # this module is run as a script, because this code is executed twice.
    if hasattr(sys, ""setdefaultencoding""):
        del sys.setdefaultencoding
"
Getting unique items from a two dimensional array python,"print list(set(zip(*myList)[1]))
"
Transform comma separated string into a list but ignore comma in quotes,"from cStringIO import StringIO
from csv import reader

file_like_object = StringIO(""1,,2,'3,4'"")
csv_reader = reader(file_like_object, quotechar=""'"")
for row in csv_reader:
    print row
"
python regular expression get only data between two strings,"haystack = ""Foo, bar\nUSER ID bla\n\t\nbla\nbla You can\n cheese""                                                                           
m = re.findall(r'USER ID.+?You can', haystack, re.DOTALL)                                                                        
if m:
    print(haystack, ""->"", m)
else:
    print(haystack, ""->"", ""NO LUCK"")
"
Selecting rows with a particualr year and month,"crit1 = df['datecol'].map(lambda x : x.year == 2014)
crit2 = df['datecol'].map(lambda x : x.month == 1)

df[crit1 & crit2]
"
Using Python to extract dictionary keys within a list,"import urllib2
import json

url = 'http://api.twitter.com/1/trends/44418.json'

# download the json string
json_string = urllib2.urlopen(url).read()

# de-serialize the string so that we can work with it
the_data = json.loads(json_string)

# get the list of trends
trends = the_data[0]['trends']

# print the name of each trend
for trend in trends:
    print trend['name']
"
Python to PHP valuables,">>> import requests
>>> payload = {'key1': 'value1', 'key2': 'value2'}
>>> r = requests.get(""http://httpbin.org/get"", params=payload)
"
How to properly pass dash parameters to subprocessPopen,"subprocess.Popen( [""-c"", ""kill -USR2 %s"" % master],
    stdout=subprocess.PIPE, shell=True).wait()
"
How to do imports in python?,"from subdirectory import foo
"
How to convert some character into five digit unicode one in Python 3.3?,">>> import re
>>> print(re.sub('a', '\U0001D15D', 'abc' ))
bc
>>> print(re.sub('a', u'\U0001D15D', 'abc' ).encode('unicode_escape'))
b'\\U0001d15dbc'
"
Is it necessary to include __init__ as the first function everytime in a class in Python?,"class A:
    pass
"
List slicing with dynamic index on [:index],">>> arr = [1, 2, 3]
>>> index = 0
>>> arr[:-index or None]
[1, 2, 3]
>>> index = 1
>>> arr[:-index or None]
[1, 2]
"
matplotlib large set of colors for plots,"hsv = plt.get_cmap('hsv')
hsv(float(i)/(len(data)-1))
"
How to model datatypes in Python (namedtuple almost there?),"if type(my_tree) is Node:
"
does the for each loop in python based index?,"links = [{""source"":0, ""target"":1},
         {""source"":0, ""target"":2},
         {""source"":0, ""target"":3},
         {""source"":1, ""target"":0}]

links = filter(
    lambda link: {""source"":link[""target""], ""target"":link[""source""]} in links,
    links)

print links
"
Code to edit a string with either '_' or a character hangs,"def getGuessedWord(secretWord, lettersGuessed):
    '''
    secretWord: string, the word the user is guessing
    lettersGuessed: list, what letters have been guessed so far
    returns: string, comprised of letters and underscores that represents
      what letters in secretWord have been guessed so far.
    '''

    i=0
    gameWord=''
    while i in range(len(secretWord)):
        gameWord += ' '
        if(secretWord[i] in lettersGuessed):
            gameWord += secretWord[i]
        else:
            gameWord += '_'
        i += 1
    return gameWord
"
How to operate with values in the same column in .csv files,"all_data = [float(row[1]) for row in csvin]
print ""differences: "", [next - curr for next, curr in zip(all_data[1:], all_data[: -1])]
"
formatting an array and writing into text file,"a = [['C', [0.99813803, -0.00263872, -0.00464602]], ['H', [2.0944175, -0.00242373, 0.00417336]], ['H', [0.63238996, 1.03082951, 0.00417296]], ['H', [0.62561232, -0.52974905, 0.88151021]], ['H', [0.64010219, -0.50924801, -0.90858051]]]

with open('file.txt', 'w') as f:
for item, values in a:
    line = ""{}   {} {} {}\n"".format(item, *values)
    f.write(line)
"
Is there a way to subclass a generator in Python 3?,"def alphagen(n=27):
    if n<0 or n > 27: n = 27
    for i in range(n):
        yield chr(ord('A') + i)
"
"In Python, how do I index a list with another list?",T = [L[i] for i in Idx]
Python Reading a file and printing,"import re

with open('input.txt','r') as fp:
    for x in xrange(7):
        next(fp)

    rx = ""\w+""
    for line in fp:
        data = re.findall(u""\w+"", line, re.DOTALL)
        if data:
            print(', '.join(data[0:-1]))
"
python: Open file from zip without temporary extracting it,"import zipfile
archive = zipfile.ZipFile('images.zip', 'r')
imgfile = archive.open('img_01.png')
...
"
Parse python setup file,"def myfunc(n):
    return n**2

def parse_setup(filename):
    globalsdict = {'__builtins__': None, 'myfunc': myfunc}  # put predefined things here
    localsdict = {}  # will be populated by executed script
    execfile(filename, globalsdict, localsdict)
    return localsdict

results = parse_setup('setup.py')
print results  # {'y': 16, 'x': 5, 'z': 25, 'mylist': [1, 2, 3]}
"
Get value from dict,"for row in config_params:
    print row['hostname']
"
Numpy: Permanent changes to using numpy.ndarray.view?,"import numpy as np
x = np.arange(10, dtype=np.int)

print 'An integer array:', x
print 'But if we view it as a float:', x.view(np.float)
print ""...It's probably not what we expected...""
"
Convert an integer to a 2 byte Hex value in Python,"format(addrint, '#04x')
"
Tensorflow: How to modify the value in tensor,"import numpy as np
import tensorflow as tf

npc = np.array([[1.,2.],[3.,4.]])
tfc = tf.Variable(npc) # Use variable 

row = np.array([[.1,.2]])

with tf.Session() as sess:   
    tf.initialize_all_variables().run() # need to initialize all variables

    print('tfc:\n', tfc.eval())
    print('npc:\n', npc)
    for i in range(2):
        for j in range(2):
            npc[i,j] += row[0,j]
    tfc.assign(npc).eval() # assign_sub/assign_add is also available.
    print('modified tfc:\n', tfc.eval())
    print('modified npc:\n', npc)
"
Python unpacking list value in kwargs,">>> rows = [
... {'user': 'staff_user', 'grade': [u'0.0', u'N/A', u'N/A', u'N/A', u'N/A']},
... {'user': 'non_staff_user', 'grade': [u'0.0', u'N/A', u'N/A', u'N/A', u'N/A']}]
>>> def get_expected_rows(user, grade):
...     #Here i want to list `grade` to be unpacked.
...     return dict(zip(
...         ['username', 'total', 'sub1grade', 'sub2grade', 'sub3grade', 'sub4grade'],
...         [user] + grade
...     ))
...
>>>
>>> for row in rows:
...     expected_row = get_expected_rows(**row)
...     print(expected_row)
...
{'sub1grade': 'N/A', 'sub3grade': 'N/A', 'sub4grade': 'N/A', 'sub2grade': 'N/A', 'username': 'staff_user', 'total': '0.0'}
{'sub1grade': 'N/A', 'sub3grade': 'N/A', 'sub4grade': 'N/A', 'sub2grade': 'N/A', 'username': 'non_staff_user', 'total': '0.0'}
"
Is it possible to use functions before declaring their body in python?,"# Style 1
abc = lambda: myFunction()

# Style 2
def abc():
    return myFunction()

def myFunction():
    print ""123""
"
"Converting text document coordinates 'x, y' to float point list object","with open(""myfile.txt"") as fh:
    coords = []
    for line in fh:
        line = line.strip('()\n')  # Get rid of the newline and  parentheses
        line = line.split(', ')  # Split into two parts
        c = tuple(float(x) for x in line)  # Make the tuple
        coords.append(c)
"
Converting a string into a table format with columns,"try:
    o = open(x, ""r"")
    p = o.read()
    y = tuple(j.split() for j in p.splitlines())
    #m = "" "".join(map(str, y))
    for v1,v2,v3,fname,*rest_of_name in y:
        #print(v1,v2,v3,fname,*rest_of_name)

        if int(v1) != some_year:  
            continue;

        print(""{:<30} {:<10} {:<5} {:<5}"".format(fname + ', ' +  ' '.join(rest_of_name), v1,v3, v2))
    o.close()
except IOError as e :
    print(""File Does Not Exist"")
"
Check if subprocess currently running in any thread using Python,"lock = threading.Lock()

def your_thread_function():
    # You can also use subprocess.check_output.
    p = subprocess.Popen([""say"", ""hello world""], stdout=subprocess.PIPE)
    out, err = p.communicate()
    with lock:
        print(out)
"
Filter a tuple with another tuple in Python,"from itertools import compress
reason = [', '.join(compress(tups, x)) for x in zip(*tups.values())]
"
How to code autocompletion in python?,"import readline

class MyCompleter(object):  # Custom completer

    def __init__(self, options):
        self.options = sorted(options)

    def complete(self, text, state):
        if state == 0:  # on first trigger, build possible matches
            if text:  # cache matches (entries that start with entered text)
                self.matches = [s for s in self.options 
                                    if s and s.startswith(text)]
            else:  # no text entered, all matches possible
                self.matches = self.options[:]

        # return match indexed by state
        try: 
            return self.matches[state]
        except IndexError:
            return None

completer = MyCompleter([""hello"", ""hi"", ""how are you"", ""goodbye"", ""great""])
readline.set_completer(completer.complete)
readline.parse_and_bind('tab: complete')

input = raw_input(""Input: "")
print ""You entered"", input
"
Python String Format not working as expected when ran in a script,">>> server_name = '<server_name>'
>>> rifs = '<rifs>\r'
>>> print 'mco shell run -I {0} ""sc qc {1} 5000""'.format(server_name, rifs)
 5000""ell run -I <server_name> ""sc qc <rifs>
>>> print 'mco shell run -I {0} ""sc qc {1} 5000""'.format(server_name, rifs.rstrip('\r'))
mco shell run -I <server_name> ""sc qc <rifs> 5000""
"
Merge multiple dictionaries conditionally,"from collections import Counter

max_dict = Counter()
for d in original_dict_list:
    max_dict |= Counter(d)
"
Execute .sql file in Python with MySQLdb,"db = conn.cursor()
db.execute('SELECT 1; SELECT 2;')

more = True
while more:
    print db.fetchall()
    more = db.nextset()
"
How to insert newline in python logging?,"import logging
import types

def log_newline(self, how_many_lines=1):
    # Switch handler, output a blank line
    self.removeHandler(self.console_handler)
    self.addHandler(self.blank_handler)
    for i in range(how_many_lines):
        self.info('')

    # Switch back
    self.removeHandler(self.blank_handler)
    self.addHandler(self.console_handler)

def create_logger():
    # Create a handler
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.DEBUG)
    console_handler.setFormatter(logging.Formatter(fmt=""%(name)s %(levelname)-8s: %(message)s""))

    # Create a ""blank line"" handler
    blank_handler = logging.StreamHandler()
    blank_handler.setLevel(logging.DEBUG)
    blank_handler.setFormatter(logging.Formatter(fmt=''))

    # Create a logger, with the previously-defined handler
    logger = logging.getLogger('logging_test')
    logger.setLevel(logging.DEBUG)
    logger.addHandler(console_handler)

    # Save some data and add a method to logger object
    logger.console_handler = console_handler
    logger.blank_handler = blank_handler
    logger.newline = types.MethodType(log_newline, logger)

    return logger

if __name__ == '__main__':
    logger = create_logger()
    logger.info('Start reading database')
    logger.info('Updating records ...')
    logger.newline()
    logger.info('Finish updating records')
"
"Python: Check if file from list exists, execute function only if it exists","import os, csv

# store file attributes for easy modifications
# format is 'filename': (hashcolumn, filepathNum)
files = {
        'A.csv': (7, 5),
        'B.csv': (15, 5),
        'C.csv': (1, 0),
        }

class NoFilesFound(Exception):
    ""No .csv files were found to clean up""

def chkifexists(somefiles):
    # load all three at once, but only yield them if filename
    # is found
    filesfound = False
    for fname, (hashcolumn, filepathNum) in somefiles.items():
        if os.path.isfile(fname):
            filesfound = True
            yield fname, hashcolumn, filepathNum
    if not filesfound:
        raise NoFilesFound

def removedupes(infile, outfile, hashcolumn, filepathNum):
    # this is now a single-run function
    r1 = file(infile, 'rb')
    r2 = csv.reader(r1)
    w1 = file(outfile, 'wb')
    w2 = csv.writer(w1)
    hashes = set()
    for row in r2:
        if row[hashcolumn] =="""": 
            w2.writerow(row)       
            hashes.add(row[hashcolumn])  
        if row[hashcolumn] not in hashes:
            w2.writerow(row)
            hashes.add(row[hashcolumn])
    w1.close()
    r1.close()


def bakcount(origfile1, origfile2):
    '''This function creates a .bak file of the original and does a row count
    to determine the number of rows removed'''
    os.rename(origfile1, origfile1+"".bak"")
    count1 = len(open(origfile1+"".bak"").readlines())
    #print count1

    os.rename(origfile2, origfile1)
    count2 = len(open(origfile1).readlines())
    #print count2

    print str(count1 - count2) + "" duplicate rows removed from "" \
        + str(origfile1) +""!""


def CleanAndPrettify():
    print ""Removing duplicate rows from input files...""
    try:
        for fname, hashcolumn, filepathNum in chkifexists(files):
            removedupes(
                   fname,
                   os.path.splitext(fname)[0] + ""2.csv"",
                   hashcolumn,
                   filepathNum,
                   )
            bakcount (fname, os.path.splitext(fname)[0] + ""2.csv"")
    except NoFilesFound:
        print ""no files to clean up""

CleanAndPrettify()
"
Python loop in a coroutine,"@coroutine
def someroutine():
    with open('test.txt', 'a') as f:
        yield
        f.write('A')
    while True:
        yield
    yield 0

routine = someroutine()
print 'I am working in parallel!'
routine.send()
print 'But only cooperatively...'
routine.send()
"
better way to convert list element into a list like this one,"points = [list(map(int, x.split(','))) for x in s]
"
How to change a entry widgets border color in Python Tkinter,"import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)

        self.entry = CustomEntry(self)
        self.button = tk.Button(self, text=""Validate"", command=self.validate)
        self.entry.pack(side=""top"", fill=""x"")
        self.button.pack(side=""bottom"")

        self.validate() # initialize the border

    def validate(self):
        data = self.entry.get()
        if len(data) == 0:
            self.entry.set_border_color(""red"")
        else:
            self.entry.set_border_color(""blue"")

class CustomEntry(tk.Frame):
    def __init__(self, parent, *args, **kwargs):
        tk.Frame.__init__(self, parent)
        self.entry = tk.Entry(self, *args, **kwargs)
        self.entry.pack(fill=""both"", expand=2, padx=2, pady=2)

        self.get = self.entry.get
        self.insert = self.entry.insert

    def set_border_color(self, color):
        self.configure(background=color)

if __name__ == ""__main__"":
    root = tk.Tk()
    Example(root).pack(fill=""both"", expand=True)
    root.mainloop()
"
Initializing a large list of booleans in Python,">>> [True] * 3
[True, True, True]
>>> ""abc"" * 3
'abcabcabc'
"
getting line-numbers that were changed,"import difflib

fileA = open(""a.txt"", ""rt"").readlines()
fileB = open(""b.txt"", ""rt"").readlines()

d = difflib.Differ()
diffs = d.compare(fileA, fileB)
lineNum = 0

for line in diffs:
   # split off the code
   code = line[:2]
   # if the  line is in both files or just b, increment the line number.
   if code in (""  "", ""+ ""):
      lineNum += 1
   # if this line is only in b, print the line number and the text on the line
   if code == ""+ "":
      print ""%d: %s"" % (lineNum, line[2:].strip())
"
How to get instance ID from reservation ID in boto,"# same first three lines as above
instances = [i for r in reservations for i in r.instances]
"
How to check if array contains array in elegant way?,"def eachMasterList(allLists):
  allSets = [ set(lst) for lst in allLists ]
  for lst, s in zip(allLists, allSets):
    if not any(s is not otherSet and s < otherSet for otherSet in allSets):
      yield lst
"
"Get all objects of a given structure, and their global names","ls = [(key, value) for key, value in globals().items() if isinstance(value, tuple) and len(value) == 3]
"
How to dereference _ref tensor type in TensorFlow?,"counter = tf.Variable(0)
assert counter.dtype == tf.int32_ref

counter_val = tf.identity(counter)
assert counter_val.dtype == tf.int32
"
"Given a 2D numpy array of real numbers, how to generate an image depicting the intensity of each number?","happy_array = np.random.randn(28, 28)
im = plt.imshow(happy_array, cmap='seismic', interpolation='none')
cbar = plt.colorbar(im)
plt.show()
"
"What in the world is the attribute ""__class__"" in python","from itertools import islice

class counter:
    count = 0
    def __init__(self):
        print ('  |  counter.count   first == %d  at  %d\n'
               '  |     self.count   first == %d  at  %d')\
               % (counter.count,id(counter.count),
                  self.count,id(self.count))

        self.__class__.count += 1 # <<=====

        print ('  |  counter.count  second == %d  at  %d\n'
               '  |     self.count  second == %d  at  %d\n'
               '  |  id(counter) == %d   id(self) == %d')\
               % (counter.count,id(counter.count),
                  self.count,id(self.count),
                  id(counter),id(self))



def display(*li):
    it = iter(li)
    for ch in it:
        nn = (len(ch)-len(ch.lstrip('\n')))*'\n'
        x = it.next()
        print '%s ==  %s %s' % (ch,x,'' if '__dict__' in ch else 'at '+str(id(x)))



display('counter.count AT START',counter.count)


print ('\n\n----- C1 = counter() ------------------------')
C1 = counter()
display('C1.__dict__',C1.__dict__,
        'C1.count ',C1.count,
        '\ncounter.count ',counter.count)


print ('\n\n----- C2 = counter() ------------------------')
C2 = counter()
print ('  -------------------------------------------') 
display('C1.__dict__',C1.__dict__,
        'C2.__dict__',C2.__dict__,
        'C1.count ',C1.count,
        'C2.count ',C2.count,
        'C1.__class__.count',C1.__class__.count,
        'C2.__class__.count',C2.__class__.count,
        '\ncounter.count ',counter.count)


print '\n\n------- C2.__class__.count = 3 ------------------------\n'
C2.__class__.count = 3
display('C1.__dict__',C1.__dict__,
        'C2.__dict__',C2.__dict__,
        'C1.count ',C1.count,
        'C2.count ',C2.count,
        'C1.__class__.count',C1.__class__.count,
        'C2.__class__.count',C2.__class__.count,
        '\ncounter.count ',counter.count)


print '\n\n------- C2.count = 5 ------------------------\n'
C2.count = 5
display('C1.__dict__',C1.__dict__,
        'C2.__dict__',C2.__dict__,
        'C1.count ',C1.count,
        'C2.count ',C2.count,
        'C1.__class__.count',C1.__class__.count,
        'C2.__class__.count',C2.__class__.count,
        '\ncounter.count ',counter.count)
"
Merge 2 dataframes with same values in a column,df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])
Can I make an O(1) search algorithm using a sorted array with a known step?,"import matplotlib.pyplot as plt

start = 97523.29783
increment = .000378912098
target = 97585.23452

# build a timeline
times = []
time = start
actual_index = None
for i in range(1000000):
    trunc = float(str(time)[:10])  # truncate the time value
    times.append(trunc)
    if actual_index is None and time>target:
        actual_index = i
    time = time + increment

# now test
intervals = [1, 2, 5, 10, 100, 1000, 10000]

for i in intervals:
    dt = (times[i] - times[0])/i
    index = int((target-start)/dt)
    print ""    %6i  %8i  %8i  %.10f"" % (i, actual_index, index, dt)
"
list of branches sorting,"parents  = [   2,     3,           1,       5,        4,          7,          8,          9,         6,        10     ]
children = [ [4,5],  [0,11],     [6,10],  [1,7],    [8,9],     [12,13],    [14,15],    [16,17],   [18,19],   [20,21]  ]

generation=(lambda c:list(map((lambda f,m={}:lambda x:m[x]if x in m else m.setdefault(x,f(f,x)))(lambda g,i:max(g(g,j)+1for j in c[i])if i in c else 0),parents)))(dict(zip(parents,children)))

print(generation)
"
Python : append/merge dicts to pandas in a pythonic way,"for i in range(10):
    # create dict
    df.append( created_dict )
"
analyzing a txt file in python by jumping the n_th element of a list,"eval('[0.03, 0.05, 0.067, 1.003]')  
"
Python parse XML and save as txt,"import xml.etree.ElementTree as ET
tree = ET.parse('data.xml')
root = tree.getroot()
with open('my_text_file.txt', 'w') as f:
    f.write('ArticleID|CreatedDate|MeSH|IsMajor\n')
for pubmed_article in root.findall('PubmedArticle'):
    ArticleID = pubmed_article.find('MedlineCitation').find('PMID').text
    year = pubmed_article.find('MedlineCitation').find('DateCreated').find('Year').text
    month = pubmed_article.find('MedlineCitation').find('DateCreated').find('Month').text
    day = pubmed_article.find('MedlineCitation').find('DateCreated').find('Day').text
    CreatedDate = year + month + day
    for mesh_heading in pubmed_article.find('MedlineCitation').find('MeshHeadingList').findall('MeshHeading'):
        MeSH = mesh_heading.find('DescriptorName').text
        IsMajor = mesh_heading.find('DescriptorName').get('MajorTopicYN')
        line_to_write = ArticleID + '|' + CreatedDate + '|' + MeSH + '|' + IsMajor + '\n'
        with open('my_text_file.txt', 'a') as f:
            f.write(line_to_write)
"
How to make a Python script run without it opening the console window?,"Writes myscript.spec in the same folder as the script.
Creates a folder build in the same folder as the script if it does not exist.
Writes some log files and working files in the build folder.
Creates a folder dist in the same folder as the script if it does not exist.
Writes the myscript executable folder in the dist folder.
"
Changing the value of a variable stored in a dictionary,">>> d = {'a': 1}
>>> id(d['a'])
1751629384
>>> d['a'] += 1
>>> d
{'a': 2}
>>> id(d['a'])
1751629400 # different 'id' means different object
"
Python Multidimensional Array as a single List,"class ndim:
    def __init__(self):
        self.dimensions=[8,9,10]
        self.numdimensions=3
        self.gridsize=8*9*10

    def getcellindex(self, location):
        cindex = 0
        cdrop = self.gridsize
        for index in xrange(self.numdimensions):
            cdrop /= self.dimensions[index]
            cindex += cdrop * location[index]
        return cindex

    def getlocation(self, cellindex):
        res = []
        for size in reversed(self.dimensions):
            res.append(cellindex % size)
            cellindex /= size
        return res[::-1]

n=ndim()
print n.getcellindex((0,0,0))
print n.getcellindex((0,0,1))
print n.getcellindex((0,1,0))
print n.getcellindex((1,0,0))

print n.getlocation(90)
print n.getlocation(10)
print n.getlocation(1)
print n.getlocation(0)
"
Why won't my for loop work? (Python),"import random, string
from itertools import izip_longest
import timeit

def _randstr(n):
    ls = []
    for i in range(n):
        ls.append(random.choice(string.lowercase))
    return ''.join(ls)

def _sortstr(n):
    return ''.join(sorted(_randstr(n)))

def badstr(nish):
    res = """"
    for i in range(nish):
        res += _sortstr(i)
        if len(res) >= nish:
            break
    return res

def achampion(s):
    start = end = longest = 0
    best = """"
    for c1, c2 in izip_longest(s, s[1:]):
        end += 1
        if c2 and c1 <= c2:
            continue
        if (end-start) > longest:
            longest = end - start
            best = s[start:end]
        start = end
    return best

def bjorn(s):
    cur_start = 0
    cur_stop = 1
    long_start = cur_start
    long_end = cur_stop

    for ch in s[1:]:      
        if ch < s[cur_stop-1]:
            if (long_end-long_start) < (cur_stop-cur_start):
                long_start = cur_start
                long_end = cur_stop
            cur_start = cur_stop
        cur_stop += 1

    if (long_end-long_start) < (cur_stop-cur_start):
        return s[cur_start:cur_stop]
    return s[long_start:long_end]


def or1426(s):
    longest = [s[0]]
    current = [s[0]]
    for char in s[1:]:
        if char >= current[-1]: # current[-1] == current[len(current)-1]
            current.append(char)
        else:            
            current=[char]
        if len(longest) < len(current):
            longest = current
    return ''.join(longest)

if __name__ == ""__main__"":
    print 'achampion:', round(min(timeit.Timer(
        ""achampion(rstr)"",
        setup=""gc.enable();from __main__ import achampion, badstr; rstr=badstr(30000)""
    ).repeat(15, 50)), 3)

    print 'bjorn:', round(min(timeit.Timer(
        ""bjorn(rstr)"",
        setup=""gc.enable();from __main__ import bjorn, badstr; rstr=badstr(30000)""
    ).repeat(15, 50)), 3)

    print 'or1426:', round(min(timeit.Timer(
        ""or1426(rstr)"",
        setup=""gc.enable();from __main__ import or1426, badstr; rstr=badstr(30000)""
    ).repeat(15, 50)), 3)
"
python - Values not being pulled from XML,"all = {group.get(""id""): {value.get(""id""): value.text for value in group.findall(""value"")} for group in root.findall(""subroot"")}
"
Python: find out whether a list of integers is coherent,"return my_list == range(my_list[0],my_list[-1]+1)
"
How to erase the contents of a Frame,"def toggle(self, event):
    # ...
    for children in self.frame.winfo_children():
        children.destroy()
    tk.Label(self.frame, text=text, bg=bg).grid(row=0, column=0)
"
python 3 print generator,"for item in generator_or_range_or_whatever:
    print(item)
"
"Python 2.7 find min,max on list of lists",">>> [(min(a), max(a)) for a in zip(*calib)]
[(-1513, 1350), (-1673, 1464), (-673, 1564)]
"
Python: split string at word,"month, day, year = re.split("">>| |\. "", s)[1:4]
"
I am using Python and I would like to find the maximum value(s) and position(s) of that(those) value(s) in a multidimensional list,"maxval, i, j = max((item, i, j)  for i, row in enumerate(P)
                                 for j, item in enumerate(row))

print(maxval)
# 88.0

print(i, j)
# (2, 7)
"
"Assign ""ID"" to a string in a ""post""","with open(""test.txt"") as f:
    index = collections.defaultdict(set)
    num = None
    for line in f:
        m = re.match(r""<POST (\d+)"", line)
        if m is not None:
            num = m.group(1)
        else:
            for word in re.findall(r""\w+"", line):
                index[word].add(num)
"
Child method is run instead of parent's?,"#!/usr/bin/python

class A(object):

    def __init__(self):
        self.configured = []
        self.set_up = []

    def __configure(self):
        self.configured.append(""A"")

    def setup(self):
        self.__configure()
        self.set_up.append(""A"")

class B(A):

    def __configure(self):
        self.configured.append(""B"")

    def setup(self):
        super(B, self).setup()
        self.__configure()
        self.set_up.append(""B"")

class Z(B):
    pass

if __name__ == ""__main__"":
    z = Z()
    z.setup()
    print ""configured: %s"" % z.configured
    print ""set up: %s"" % z.set_up
"
Efficient way of writing same process with different variable,"def RandomFighter(object):

    def __init__(self):
        self.strength = random.randint(1, 1000)
        self.skill = random.randint(1, 1000)

player = RandomFighter()
enemy = RandomFighter()

strength_difference = player.strength - enemy.strength
...
"
Adding brackets and commas to multiple JSON objects,"for filename in all_files:
    for data in read_objects(filename):
        if 'text' and 'coordinates' in data:
            f.writerow([data['id'], data['geo']['coordinates']])
"
When should I use @classmethod and when def method(self)?,"In [6]: class Foo(object): some_static = staticmethod(lambda x: x+1)

In [7]: Foo.some_static(1)
Out[7]: 2

In [8]: Foo().some_static(1)
Out[8]: 2

In [9]: class Bar(Foo): some_static = staticmethod(lambda x: x*2)

In [10]: Bar.some_static(1)
Out[10]: 2

In [11]: Bar().some_static(1)
Out[11]: 2
"
Insertion of non aligned elements in 4-dimensional matrices in numpy,"def insert_3d3(A,B,C):
    # without flattening
    shape = list(A.shape)
    shape[1] += 1
    A2 = np.empty(shape, dtype=A.dtype)
    mask = np.ones(shape, dtype=bool)
    for j,i in enumerate(C):
        mask[j,i+1,:] = False
        A2[j,i+1,:] = B[j,i,:]
    A2[mask] = A.ravel()
    return A2
"
Is int in C# and Python the same thing?,"# see python's struct documentation, this defines the format of data you want
data = struct.Struct('>i') 
# this produces an object from the socket that acts more like a file
socket_file = conn.makefile()
# read the data and unpack it
# NOTE: this will fail if the connection is lost midway through the bytes
# dealing with that is left as an exercise to the reader
value, = data.unpack(socket_file.read(data.size))
"
Python: Passing a list of function names and parameters to a class instance,"import inspect
import sys

def some_function():
       ...

print(dict(inspect.getmembers(sys.modules[__name__], inspect.isfunction)))
"
working with negative numbers in python,"a * b
"
How do I zip the contents of a folder using python (version 2.5)?,"#!/usr/bin/env python
from __future__ import with_statement
from contextlib import closing
from zipfile import ZipFile, ZIP_DEFLATED
import os

def zipdir(basedir, archivename):
    assert os.path.isdir(basedir)
    with closing(ZipFile(archivename, ""w"", ZIP_DEFLATED)) as z:
        for root, dirs, files in os.walk(basedir):
            #NOTE: ignore empty directories
            for fn in files:
                absfn = os.path.join(root, fn)
                zfn = absfn[len(basedir)+len(os.sep):] #XXX: relative path
                z.write(absfn, zfn)

if __name__ == '__main__':
    import sys
    basedir = sys.argv[1]
    archivename = sys.argv[2]
    zipdir(basedir, archivename)
"
Checking if a certain dictionary is in a list,"if any(x in d for d in somelist):
"
How can I import R dataframes into Pandas?,"In [71]:

import pandas.rpy.common as com
DF=pd.DataFrame({'val':[1,1,1,2,2,3,3]})
r_DF = com.convert_to_r_dataframe(DF)
print pd.DataFrame(com.convert_robj(r_DF))
   val
0    1
1    1
2    1
3    2
4    2
5    3
6    3
"
How to return value from function running by QThread and Queue,"from PyQt4 import QtCore, QtGui
import sys
import Queue as queue

class ResultObj(QtCore.QObject):
    def __init__(self, val):
        self.val = val

class SimpleThread(QtCore.QThread):
    finished = QtCore.pyqtSignal(object)

    def __init__(self, queue, callback, parent=None):
        QtCore.QThread.__init__(self, parent)      
        self.queue = queue
        self.finished.connect(callback)

    def run(self):
        while True:
            arg = self.queue.get() 
            if arg is None: # None means exit
                print(""Shutting down"")
                return
            self.fun(arg)    

    def fun(self, arg):
        for i in range(3):
            print 'fun: %s' % i
            self.sleep(1)
        self.finished.emit(ResultObj(arg+1))


class AppWindow(QtGui.QMainWindow):
    def __init__(self):
        super(AppWindow, self).__init__()
        mainWidget = QtGui.QWidget()
        self.setCentralWidget(mainWidget)
        mainLayout = QtGui.QVBoxLayout()
        mainWidget.setLayout(mainLayout)  
        button = QtGui.QPushButton('Process')
        button.clicked.connect(self.process)
        mainLayout.addWidget(button)

    def handle_result(self, result):
        val = result.val
        print(""got val {}"".format(val))
        # You can update the UI from here.

    def process(self):
        MAX_CORES=2
        self.queue = queue.Queue()
        self.threads = []
        for i in range(MAX_CORES):
            thread = SimpleThread(self.queue, self.handle_result)
            self.threads.append(thread)
            thread.start()  

        for arg in [1,2,3]:
            self.queue.put(arg)

        for _ in range(MAX_CORES): # Tell the workers to shut down
            self.queue.put(None)

app = QtGui.QApplication([])
window = AppWindow()
window.show()
sys.exit(app.exec_())
"
"Given a list of strings, how to locate position of first string matching substring using RegEx?",">>> [i for i, x in enumerate(text.split('\n')) if x and re.search(pattern, x)]
[4]
"
adding text ticklabels to pcolor heatmap,"ax.set_xticklabels(headers[1:])
ax.set_yticklabels(headers[1:])
"
changing the format of timestamp in python,"import re
e = '(\d{2})(\d{2})(\d{2})-(\d{2}:\d{2}:\d{2})\.(\d+)'
s = '151005-12:07:34.917928'
print('20{}-{}-{} {}:{}'.format(*re.search(e, s).groups()))

2015-10-05 12:07:34:917928
"
Python ElementTree default namespace?,"import xml.etree.ElementTree as ET
import re

with open(""pom.xml"") as f:
    xmlstring = f.read()

# Remove the default namespace definition (xmlns=""http://some/namespace"")
xmlstring = re.sub(r'\sxmlns=""[^""]+""', '', xmlstring, count=1)

pom = ET.fromstring(xmlstring) 
print(pom.findall(""version""))
"
Eclipse camelcase python method name search,"def\s+(?=[a-z]+(?:[A-Z][a-z0-9]+)*\s*\().*?\(
"
Print with automatic tab (Python),"def magic(s):
    res, indent = [], 0
    for part in s.split('\magic'):
        res.append(' ' * indent + part)
        indent += len(part)
    return '\n'.join(res)

print magic('Hello!\magicHello!')
"
How to parse varying amounts of lines from a text file in Python?,"import re

s = """"""NAME_1{a bunch of text|more text}
 1  -22.17
1 lol //
2 wtf //
NA_ME2{text|text}
 1  -25.50
1 gtfo //
NAME3{text|text}
 1  -17.50
1 brb //
2 lol //
3 wtf //
""""""

guards = [""NAME_1"", ""NAME3""]    
r = re.compile(r""^([A-Z][A-Z0-9_]+){"")
printing = False

for line in s.splitlines():
    m = r.match(line)
    if m:
        if m.groups(1) and m.groups(1)[0] in guards:
            printing = True
        else:
            printing = False
    if printing:
        print(line.strip())
"
Greatest Common Denominator counter,"def gcd_steps(a, b):
    steps = []
    # this is the standard GCD finding algorithm;
    # we simply amend it with ""step tracking""
    while b:
        # a, b = b, a % b
        tmp = a
        a = b
        b = tmp % b
        steps.append(a)
    return steps  # normally we'd want to return `a`
                  # but you want the steps not just the result

steps = gcd_steps(125 * 123 * 12314, 25 * 149)

# print the list with `->` between the steps
print("" -> "".join(str(x) for x in steps))
"
How can I partially sort a Python list?,"heapq.heapify(items)
size = 0
while items and size < 45000:
  item = heapq.heappop(items)
  size += item[1]
  print item
"
Fetching a C variable value in an enum using its name (a Python string) in Python,">>> import cffi
>>> ffi = cffi.FFI()
>>> ffi.cdef('typedef enum {RANDOM, IMMEDIATE, SEARCH} strategy;')
>>> typeof_strategy = ffi.typeof('strategy')
>>> typeof_strategy.relements
{'RANDOM': 0, 'SEARCH': 2, 'IMMEDIATE': 1}
>>> typeof_strategy.relements['SEARCH']
2
"
file as an optional parameter,"import argparse
parser = argparse.ArgumentParser()
parser.add_argument('file1')
parser.add_argument('file2')
parser.add_argument('vars', type=int, nargs=3)
parser.add_argument('file3',nargs='?')
print(parser.parse_args())
"
Adding delimeters and removing commas,"s = ""[0], [1], [2], [3]""

s = s.split(',')
s = map(str.strip, s)
s = "" | "".join(s)

print s
# Output:
# [0] | [1] | [2] | [3]
"
"Extend Python list ""inline""","range(15, 30, 3) + [0]
"
"Concatenate values in a list (XML,Python)","import lxml.etree as ET
import io

content='''\
<?xml version=""1.0"" encoding=""UTF-8""?>
<locales>
<api-url>url</api-url>
<locale>
    <market>AE</market>
    <languages>
        <language>ar</language>
    </languages>
</locale>
<locale>
    <market>AM</market>
    <languages>
        <language>hy</language>
        <language>ru</language>
    </languages>
</locale>
</locales>
'''
inputXml=ET.parse(io.BytesIO(content))

for locale in inputXml.xpath('//locale'):
    market = locale.xpath('market/text()')[0]
    for lang in locale.xpath('languages/language/text()'):
        print('{m}_{l}'.format(m=market,l=lang))
"
Create Shared Member Variable between instances (static),"class Test:
    var = 3
    def __init__(self):
        pass

a = Test()
print ""a "" +  str(a.var)
Test.var = 5
b = Test()
print ""b "" + str(b.var)
print ""a "" + str(a.var)
"
Check if a key exists in a Python list,"len(mylist) == 2 and mylist[1] == ""comment""
"
How to get Excel cell properties in Python,"from xlrd import open_workbook

wb = open_workbook('tmp.xls', formatting_info=True)
sheet = wb.sheet_by_name(""1"")
cell = sheet.cell(6, 0)
print ""cell.xf_index is"", cell.xf_index
fmt = wb.xf_list[cell.xf_index]
print ""type(fmt) is"", type(fmt)
print
print ""fmt.dump():""
fmt.dump()
"
How to split a list of 2-tuples into two lists?,"a,b = map(list,zip(*y))
"
for loop in Python,"mylist = [1,2,3]
for item in mylist:
    print item

mydict  = {1:'one', 2:'two', 3:'three'}
for key in mydict:
    print key, mydict[key]
"
"python map_async, where is the overhead coming from?","def mycallback(w):
    for l in w:
        for key, value in l.items():
            ddict[key].update(value)
"
Pythonic Name Matching,"EDIT
from difflib import SequenceMatcher

li = [\
 ([u'Liberty', u'Toledo'], #######
 [u'LIBERTY', u'TOLEDO']),

([u'Chattanooga', u'Arkansas'], ################
 [u'UTC', u'AR']),

([u'Texas Tech', u'Iowa State'], ###########
 [u'TT', u'ISU'])  ]


def comp(N,D,sq = SequenceMatcher(None)):
    sq.set_seqs(N[0],D[0])
    a = sq.ratio()
    sq.set_seqs(N[1],D[1])
    b = sq.ratio()

    sq.set_seqs(N[0],D[1])
    x = sq.ratio()
    sq.set_seqs(N[1],D[0])
    y = sq.ratio()

    sq.set_seqs(N[0].lower(),D[0].lower())
    al = sq.ratio()
    sq.set_seqs(N[1].lower(),D[1].lower())
    bl = sq.ratio()

    sq.set_seqs(N[0].lower(),D[1].lower())
    xl = sq.ratio()
    sq.set_seqs(N[1].lower(),D[0].lower())
    yl = sq.ratio()

    return ((N[0],D[0]), (N[1],D[1]),
            a,b,a*b,a+b,
            (N[0].lower(),D[0].lower()), (N[1].lower(),D[1].lower()),
            al,bl,al*bl,al+bl,
            (N[0],D[1]),(N[1],D[0]),
            x,y,x*y,x+y,
            (N[0].lower(),D[1].lower()),(N[1].lower(),D[0].lower()),
            xl,yl,xl*yl,xl+yl)

print '\n'.join(('====='*14)+ '\n'
                '%-25s   %s\n'
                '    %-10f                  %f       -->   x%f  +%f\n'
                '%-25s   %s\n'
                '    %-10f                  %f       -->   x%f  +%f\n\n'
                '%-25s   %s\n'
                '    %-10f                  %f       -->   x%f  +%f\n'
                '%-25s   %s\n'
                '    %-10f                  %f       -->   x%f  +%f\n'
                % comp(N,D) for N,D in li)
"
Where should print function be used here?,"def gcd(a, b):
    while b != 0:
        (a, b) = (b, a % b)
    return a
"
How to turn a tuple into an integer in Python (examples inside)?,"[reduce(lambda a, x: a * 10**(len(str(x))) + x, t) for t in tuples]
"
Transforming a string in a list,"def add_sizes(strings):
    temp = []
    for i in strings:
        temp.append((i, (len(i))))
    return temp
"
Words to append first,">>> my_list = ['Hey','Lol (First)','Dasd','Go (First)','Asd']
>>> [x for x in my_list if 'First' in x] + [x for x in my_list if 'First' not in x]
['Lol (First)', 'Go (First)', 'Hey', 'Dasd', 'Asd']
>>> [x for x in my_list if 'First' not in x] + [x for x in my_list if 'First' in x]
['Hey', 'Dasd', 'Asd', 'Lol (First)', 'Go (First)']
"
How to count the number of times a digit appears at the beginning of each number in a file? (python),"# Get non-empty lines from input file:
relevant_lines = [line for line in open(file_name).readlines() if line.strip()]
# Count them:
num_lines = len(relevant_lines)

import defaultdict
# If a key does not exist in a defaultdict when adding a value for it,
# it will be added with a default value for the given data type
# (0 in case of int):
d = defaultdict(int)

# Iterate through lines; get first character of line
# and increment counter for this character by one in defaultdict:
for line in relevant_lines:
    d[line[0]] += 1

# Print results:
for key, value in d.items():
    print(k + ' appears ' + value + ' times in file.')
"
How can I replace a character with different patterns (HTML tags) in Python?,"import regex
regex = re.compile('(\s?)#(.*?)#(\s+)')
str = 'hello #this# is #some text string# text text'
str = re.sub(regex, '\\1<b>\\2</b>\\3', str)
"
Selecting a data value from pandas dataframe based on row and column to append to list,"Numbers = []
value =  df1.iloc[24,50]
Numbers.append(value)
"
Match attributes against one another Python,"import csv
from shutil import move
from tempfile import NamedTemporaryFile
import os

cn = 100001
try:
    with open(""test.txt"") as f, NamedTemporaryFile(""w"", dir=""."", delete=False) as tmp:
        r, wr = csv.reader(f, delimiter=""|""), csv.writer(tmp, delimiter=""|"")
        head, d = next(r), {}
        wr.writerow([""ID""] + head)
        for row in r:
            v = row[4]
            if v in d:
                wr.writerow([d[v]] + row)
            else:
                d[v] = cn
                wr.writerow([cn] + row)
                cn += 1
    # replace original file
    move(tmp.name, ""test.txt""))
finally:
    if os.path.isfile(tmp.name):
        os.unlink(tmp.name)
"
Finding the sets of columns/rows that overlap,"group = {}
for i in range(array.shape[1]):
    tup = tuple(array[:,i])
    if tup in group.keys():
        group[tup].append(i)
    else:
        group[tup] = [i]
"
Python-apt: install package with specific version,"cache = apt.cache.Cache()
package = cache[package_name]
candidate = package.versions.get(version)
package.candidate = candidate
package.mark_install()
cache.commit()
"
Matplotlib: align origin of right axis with specific left axis value,"def align_yaxis(ax1, v1, ax2, v2):
    """"""adjust ax2 ylimit so that v2 in ax2 is aligned to v1 in ax1""""""
    _, y1 = ax1.transData.transform((0, v1))
    _, y2 = ax2.transData.transform((0, v2))
    inv = ax2.transData.inverted()
    _, dy = inv.transform((0, 0)) - inv.transform((0, y1-y2))
    miny, maxy = ax2.get_ylim()
    ax2.set_ylim(miny+dy, maxy+dy)
"
Python: How to write multiple strings in one line?,"target.write('%r\n%r\n%r\n' % (line1, line2, line3))"
How to slice a numpy array by a list of column indices,">>> indices = [0, 3, 4]
>>> arr[:, indices]
array([['1A34', 1.0, 0.0],
       ['1A9N', 0.0539268, 0.331932],
       ['1AQ3', 0.201112, 0.268581],
       ['1AQ4', 0.363746, 0.308995]], dtype=object)
"
Python: problems with csvwriter,"import datetime

with open('file.csv','w') as outputfile:
    wrtr = csv.writer(outputfile, delimiter=',', quotechar='""')
    a = (datetime.datetime.now().strftime('%Y-%m-%d'),0,6058.7,False,1913736200,0,False)
    wrtr.writerow(a)  # pass an iterable here

    # outputfile.close() you don't have to call close() because you use with
"
Generator recovery using decorator,"def _auto_reconnect_wrapper(func):
    ''' Tries to reconnects dead connection
    '''

    def inner(self, *args, _retry=True, **kwargs):
        gen = func(self, *args, **kwargs)
        try:
            value = next(gen)
            return itertools.chain([value], gen)
        except StopIteration:
            return gen
        except Mysql.My.OperationalError as e:
            ...
            # Retry
            return inner(self, *args, _retry=False, **kwargs)
    return inner
"
"Python, Matplotlib, subplot: How to set the axis range?","pylab.ylim([0, 1000])"
How to import a table with headings to a data frame using pandas module,"import pandas as pd

df = pd.read_csv(""http://real-chart.finance.yahoo.com/table.csv?s=AAPL&d=1&e=16&f=2016&g=d&a=11&b=12&c=1980&ignore=.csv"")
"
Python Compilation in Terminal,">>> codeobj = compile(open('test.py').read(), 'read.py', 'exec')
>>> exec(codeobj)
Hello, world!
Hello, world!
>>>
"
Unable to execute the else part of an if statment when conditon does not match in python,"for u, p in zip(actual_user.values(), passwd.values()):
    if login == u and password == p:
        print ""WELCOME !!""
        break
else:
    print ""<h4>Invalid Login</h4>""
"
Convert list into array dtype=int64 in Python,">>> a = [0, 1, 2, 3, 4, 5, np.array([6, 9], dtype=np.int64), 7, 8, np.array([6, 9], dtype=np.int64)] 
>>> b = [np.atleast_1d(np.asarray(x,dtype=np.int64)) for x in a]
"
Nesting lists in python,"def append_children(parent, iterable):
    last = None
    for i in iterable:
        if hasattr(i, '__iter__'):
            append_children(last, i)
        else:
            parent.children.append(i)
            last = i

def magic(lst):
    result = []
    for i in lst:
        if hasattr(i, '__iter__'):
            append_children(result[-1], i)
        else:
            result.append(i)
    return result
"
"python - cast a class to a tuple and ""autobox"" to a for loop","import collections
XAndYClass = collections.namedtuple('XAndYClass', 'x y')
xandy = XAndYClass(1, 2)
print xandy.x # prints 1
x, y = xandy # x = 1, y = 2
"
python insert into list at constant x position,"example = [0 for _ in range(MAX_ITEMS)]
#delete
example[x-1] = 0
#add
example[x-1] = data
"
shortest Python solution for creating list from csv string,">>> [[x[0], int(x[1])] for x in csv.reader(data.split('\n')) if len(x) > 1]
[['a', 1], ['b', 2], ['c', 3]]
"
"How to ""adopt"" a child process in python","import psutil
import os
import subprocess

subprocess.Popen(['sleep', '30'])

parent_pid = os.getpid()
parent = psutil.Process(parent_pid)

for child in parent.children():
    print(child)    # do something here
"
One-Many-One Inheritance in Python,"def super(cls, obj):
    mro = type(obj).__mro__
    parent = mro[mro.index(cls) + 1]
    class proxy(object):
        def __getattribute__(self, name):
            return getattr(parent, name).__get__(obj)
    return proxy()
"
Numpy.where() with an array in its conditional,"tol = 1e-5 # Edit this to change tolerance
R,C = np.where(np.abs(random_y[:,None] - y)<=tol)

first_output = x[C]
second_output = random_y[R]
"
multiple list to tuple,"myList = [4, 5, [7, [3], 4], 8]

def tuple_recursive(my_list):
    if isinstance(my_list, list):
        return tuple(tuple_recursive(inner) for inner in my_list)
    else:
        return my_list

print tuple_recursive(myList)
"
Simple way to append a pandas series with same index,a.append(b).reset_index(drop=True)
Howto Remove Garbage Data from String,">>> s = 'Reading from EEPROM: addr = 30 value = h11c13����'
>>> s
'Reading from EEPROM: addr = 30 value = h11c13\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd'
>>> filter(lambda x: ord(x)<128,s)
'Reading from EEPROM: addr = 30 value = h11c13'
"
List of Elements to Boolean Array,"res = []
for animal in your_list:
    res.append(animal in animal_list)
"
Python: Automatically initialize instance variables?,"from functools import wraps
import inspect


def initializer(func):
    """"""
    Automatically assigns the parameters.

    >>> class process:
    ...     @initializer
    ...     def __init__(self, cmd, reachable=False, user='root'):
    ...         pass
    >>> p = process('halt', True)
    >>> p.cmd, p.reachable, p.user
    ('halt', True, 'root')
    """"""
    names, varargs, keywords, defaults = inspect.getargspec(func)

    @wraps(func)
    def wrapper(self, *args, **kargs):
        for name, arg in list(zip(names[1:], args)) + list(kargs.items()):
            setattr(self, name, arg)

        for name, default in zip(reversed(names), reversed(defaults)):
            if not hasattr(self, name):
                setattr(self, name, default)

        func(self, *args, **kargs)

    return wrapper
"
"Discuss the ""sorted"" function in Python",">>> from operator import attrgetter
>>> sorted([f, g], key=attrgetter('age'))
[<name: Bar, age: 3>, <name: Baz, age: 4>]
"
Merge list of timestamps in Python,"import datetime

data = [""2014-04-11 08:00:00.000000"", ""2014-04-11 09:35:00.000000"", ""2014-04-11 09:35:00.000000"", ""2014-04-11 09:40:00.000000"", ""2014-04-11 11:00:00.000000""]

delta = datetime.timedelta(minutes=10)
result = []
bucket = []
current = None
for item in data:
    datetime_obj = datetime.datetime.strptime(item, '%Y-%m-%d %H:%S:%M.%f')
    if current is None:
        current = datetime_obj
        bucket = [current]
        continue
    if (datetime_obj - current) <= delta:
        bucket.append(datetime_obj)
    else:
        result.append(bucket)
        current = datetime_obj
        bucket = [current]

if bucket:
    result.append(bucket)

for bucket in result:
    print(bucket)
"
Accessing an additional profile from templates,"{{ request.user.userreferralprofile.y }}
"
Python how to read multiple inputs in a same line,"f=open( 'myfile.txt', 'r')
for line in f.readlines():
    # suppose line is '[""a"",""b"",""c""]'
    a = line.split( ',' )
    # a is now the list [ '[""a""', '""b""', '""c""]' ]

    # To strip away the brackets use this instead:
    a = line.strip('[]').split( '[]' )
    # a is now the list [ '""a""', '""b""', '""c""' ]

    # To strip away the spurious quote marks use this instead:
    a = [ s.strip('""') for s in line.strip('[]').split(',') ]
    # a is now the list [ 'a', 'b', 'c' ]
"
Nested Regular Expression in Python for,"r1 = re.compile(r'SO ON')
r2 = re.compile(r'WHATEVER AND (%s)*' % r1.pattern)
"
Find max number in .CSV file in Python,"myfile = open(""/Users/it/Desktop/Python/In-Class Programs/countries.csv"", ""rb"")

countries = []
for line in myfile:
    country_name = line.split("","")[1]
    value_of_interest = float(line.split("","")[3])
    countries.append(
        {""Country Name"": country_name, 
         ""Value of Interest"": value_of_interest})

ave_value = sum([country[""Value of Interest""] for country in countries])/len(countries)
max_value = max([country[""Value of Interest""] for country in countries])
min_value = min([country[""Value of Interest""] for country in countries])

print ""Country Average == "", ave_value
for country in countries:
    if country[""Value of Interest""] == max_value:
        print ""Max == {country}:{value}"".format(country[""Country Name""], country[""Value of Interest""])
    if country[""Value of Interest""] == min_value:
        print ""Min == {country}:{value}"".format(country[""Country Name""], country[""Value of Interest""])
"
Paradoxical time intervals in Python,">>> import time
>>> start = time.time()
>>> end = time.time()
>>> elapsed = end - start
>>> elapsed
5.727240085601807    # in seconds
"
Compare entries in columns from CSV files and extract matched - python,"import csv

file_1_tuples = []

with open(""file_1.csv"") as fh:
    csv_reader = csv.reader ( fh )
    for row in csv_reader:
        file_1_tuples.append(  tuple(row)  )

with open(""file_2.csv"") as fh:
    csv_reader = csv.reader ( fh )
    for row in csv_reader:
        if tuple(row[0:3]) in file_1_tuples:
            print ( row[3:6] )
"
How to pass more than one parameter to map function in panda,"import numpy as np
import pandas as pd

def getTag(rangeAttribute, sliceDef):
    for sl in sliceDef.keys():
        bounds = sliceDef[sl]
        if ((float(rangeAttribute) >= float(bounds[0]))
            and (float(rangeAttribute) <= float(bounds[1]))):
            return sl

sliceDef = {'tag1': [1, 4], 'tag2': [4, 6], 'tag3': [6, 9],
            'tag4': [9, 99]}
sliceDef1 = {'100-150': [100000, 150000],
            '150-650': [150000, 650000],
            '650-5M': [650000, 5000000]}

mn = pd.DataFrame(
    {'fld1': [2.23, 4.45, 7.87, 9.02, 8.85, 3.32, 5.55],
     'fld2': [125000, 350000, 700000, 800000, 200000, 600000, 500000],
     'lType': ['typ1', 'typ2', 'typ3', 'typ1', 'typ3', 'typ1', 'typ2'],
     'counter': [100, 200, 300, 400, 500, 600, 700]})

result = mn.groupby([mn['fld1'].apply(getTag, args=(sliceDef, ))
                     ,mn['fld2'].apply(getTag, args=(sliceDef1, )),
                     'lType'] ).sum()
print(result)
"
Setting path to firefox binary on windows with selenium webdriver,"driver = webdriver.Firefox()
"
Python - sum values in dictionary,sum(item['gold'] for item in myLIst)
Python - Flask Default Route possible?,"@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def catch_all(path):
    return 'You want path: %s' % path
"
Calculator 7 Segment Display w/ Width,"phyLineN= []
phyLineN.append([])
phyLineN[0]= []
phyLineN[0].append([ ""...."", ""."", ""...."",""."", ""...."" ])
phyLineN.append([])
phyLineN[1]= []
phyLineN[1].append([ "".   "", "" "", "". . "","" "", ""    "" ])
phyLineN.append([])
phyLineN[2]= []
phyLineN[2].append([ "".   "", ""."", ""    "",""."", ""    "" ])
phyLineN[2].append([ "".   "", "" "", ""    "","" "", ""    "" ])
phyLineN.append([])
phyLineN[3]= []
phyLineN[3].append([ "".   "", "" "", "". . "","" "", ""    "" ])
phyLineN.append([])
phyLineN[4]= []
phyLineN[4].append([ "".   "", ""."", ""    "",""."", ""    "" ])
phyLineN[4].append([ "".   "", "" "", ""    "","" "", ""    "" ])
phyLineN.append([])
phyLineN[5]= []
phyLineN[5].append([ "".   "", "" "", "". . "","" "", ""    "" ])
phyLineN.append([])
phyLineN[6]= []
phyLineN[6].append([ ""...."", ""."", ""...."",""."", ""...."" ])

phyLineY= []
phyLineY.append([])
phyLineY[0]= []
phyLineY[0].append([ ""    "", "" "", ""    "","" "", ""    "" ])
phyLineY.append([])
phyLineY[1]= []
phyLineY[1].append([ ""    "", "" "", ""===="","" "", ""    "" ])
phyLineY.append([])
phyLineY[2]= []
phyLineY[2].append([ ""    "", ""H"", ""    "",""H"", ""    "" ])
phyLineY[2].append([ ""    "", ""H"", ""    "",""H"", ""    "" ])
phyLineY.append([])
phyLineY[3]= []
phyLineY[3].append([ ""    "", "" "", ""===="","" "", ""    "" ])
phyLineY.append([])
phyLineY[4]= []
phyLineY[4].append([ ""    "", ""H"", ""    "",""H"", ""    "" ])
phyLineY[4].append([ ""    "", ""H"", ""    "",""H"", ""    "" ])
phyLineY.append([])
phyLineY[5]= []
phyLineY[5].append([ ""    "", "" "", ""===="","" "", ""    "" ])
phyLineY.append([])
phyLineY[6]= []
phyLineY[6].append([ ""    "", "" "", ""    "","" "", ""    "" ])

def printNumberNY(num,structN,structY):

    phyRowH= [ len(structN[0]), len(structN[1]), len(structN[2]), len(structN[3]), len(structN[4]), len(structN[5]), len(structN[6]) ]

    # Validate structure and compute phyColW
    # This could be moved to an object constructor so is computed only once
    first= 1
    for line in structN :
        for phyLine in line :
            if first :
                phyColW= [ len(phyLine[0]), len(phyLine[1]), len(phyLine[2]), len(phyLine[3]), len(phyLine[4]) ] 
                first= 0
            else:
                for i, _ in enumerate(phyLine) :
                    if len(phyLine[i]) != phyColW[i] : raise ""Inconsistent physical column width""

    # Real rendering of the (full) number in 7-segment form
    num= str(num)
    for linenum, linetype in enumerate(typeforline) :
        for phyLine in range(phyRowH[linenum]) :
            line= """"
            for d in num :
                for col, qq in enumerate(phyColW) :
                    if digits[int(d)].lines[linenum][col] != "" "" :
                        line+= structY[linenum][phyLine][col]
                    else:
                        line+= structN[linenum][phyLine][col]
            print( line )

printNumberNY(3475649560458,phyLineN,phyLineY)
"
Python 3.5 Regular expressions cannot read text file,"In [14]: re.findall('Full Path.*', data)
Out[14]: 
['Full Path\tproject\\D\\analysis\\system\\folder\\file.doc',
 'Full Path\tproject\\D\\analysis\\system\\folder\\file2.doc']
"
Numpy search for elements of an array in a subset,"v_in = Infix(np.vectorize(lambda x,y: contains(y, x), excluded={1,}))
# even easier: v_in = Infix(np.in1d)
"
Finding count of distinct elements in DataFrame in each column,"In [208]:
df.apply(pd.Series.nunique)

Out[208]:
a    4
b    5
c    1
dtype: int64
"
print tuple as number of arguments,"def my_print(*args):
    print ' '.join(map(str, args))
"
Plotting pandas timedelta,"In [2]: pd.to_timedelta(np.arange(5),unit='d')+pd.to_timedelta(1,unit='s')
Out[2]: 
0   0 days, 00:00:01
1   1 days, 00:00:01
2   2 days, 00:00:01
3   3 days, 00:00:01
4   4 days, 00:00:01
dtype: timedelta64[ns]
"
Play Different Video Files Depending On Value of a Variable At Runtime,"import time
from threading import Thread

class Monitor(object):

    def __init__(self):
        self._stop = False

    def run(self, inputFile, secs=3):
        self._stop = False

        with open(inputFile) as monitor:

            while True:
                line = monitor.readline().strip()
                if line.isdigit():

                    # this is where you would notify somehow
                    print int(line)

                time.sleep(secs)

                if self._stop:
                    return

    def stop(self):
        self._stop = True


if __name__ == ""__main__"":

    inputFile = ""write.txt""

    monitor = Monitor()

    monitorThread = Thread(target=monitor.run, args=(inputFile, 1))
    monitorThread.start()

    try:
        while True:
            time.sleep(.25)

    except:
        monitor.stop()
"
How to separate the first and last part of a string in a list,"# gnibbler's tuple solution
>>> timeit.timeit(""s='hello there good friend';i1=s.find(' ');i2=s.rfind(' ');s[:i1], s[i1+1:i2], s[i2+1:]"", number=100000)
0.0976870059967041

# gnibbler's list solution
>>> timeit.timeit(""s='hello there good friend';i1=s.find(' ');i2=s.rfind(' ');[s[:i1], s[i1+1:i2], s[i2+1:]]"", number=100000)
0.10682892799377441

# my first solution
>>> timeit.timeit(""a='hello there good friend'.split();[a[0], ' '.join(a[1:-1]), a[-1]]"", number=100000)
0.12330794334411621

# regex solution
>>> timeit.timeit(""re.split(' (.*) ', 'hello there good friend')"", ""import re"", number=100000)
0.27667903900146484
"
Iteratively find minimum values in sub-lists,">>> b = np.array(list_a)
>>> b.min(axis=1)
array([ 0.2,  0.1,  0.3,  0.2])
"
Resizing pictures in PIL in Tkinter,"image = Image.open(Image_Location)
image = image.resize((250, 250), Image.ANTIALIAS) #The (250, 250) is (height, width)
self.pw.pic = ImageTk.PhotoImage(image)
"
How can I log into a website using python?,"import mechanize
br=mechanize.Browser()
br.open('https://mog.com/hp/sign_in')
br.select_form(nr=0) 
br['user[login]']= your_login
br['user[password]']= your_password
br.submit()
br.retrieve('http://mog.com/my_mog/playlists','playlist.html')
"
"Is there anything similar to ""self"" inside a Python generator?","def selfDecorator(func):
    def wrap(*args, **kw):
        return SelfGenerator(func, args, kw)
    return wrap

class SelfGenerator(object):
    """"""This class implements the generator interface""""""
    def __init__(self, generator, args, kw):
        self.generator = generator(self, *args, **kw)
    def __iter__(self):
        return self
    def __next__(self):
        return next(self.generator)
    next = __next__
    def send(self, value):
        return self.generator.send(value)

@selfDecorator
def gen(self, x): # your generator function with self
    for i in range(x):
        yield self


for x in gen(5):
    print x # prints <__main__.SelfGenerator object at 0x02BB16D0>
"
Compare unequal lists,"for i in b:
    if i in a:
        print '%d in both sets!' %(i)
    else:
        print '%d does not match!' %(i)
"
Passing python array to bash script (and passing bash variable to python function),"import os
import subprocess

foo = ('String', 'Tuple', 'From', 'Python' )

os.putenv('FOO', ' '.join(foo))

subprocess.call('./foo.sh')
"
Uncrypting a very simple code in python,"solution = ' '.join([w.lower() for w in listdefault[::-1] if w.istitle()])
"
Python change data into sequence,"reader = csv.reader(idata.split(""\r\n""))

stocks = {}
for line in reader:
    if line == '':
        continue

    stock, price, volume, stime = line
    price = float(price)
    volume = int(volume)

    stocks[stock] = (price, volume, stime)
"
`map`-like function preserving sequence-type,"def map2(f, seq):
    it = imap(f, seq)
    try:
        len(seq)
    except:
        return it
    else:
        return type(seq)(it)
"
python download all files in a web page,"import os
import urllib
from lxml import html
from urlparse  import urljoin
import grequests

def main():
    url = ""http://standards.iso.org/ittf/PubliclyAvailableStandards/ISO_IEC_14496-26_2010_Bitstreams/DVD1/mpeg4audio-conformance/compressedMp4/""

    page = html.fromstring(urllib.urlopen(url).read())
    reqs = (grequests.get((urljoin(""http://standards.iso.org/"", link))) for link in page.xpath(""//a/@href""))
    for resp in grequests.imap(reqs):
        print(resp.content)
"
Remove Part of String Before the Last Forward Slash,">>> s = 'https://docs.python.org/3.4/tutorial/interpreter.html'
>>> s.rsplit('/',1)
['https://docs.python.org/3.4/tutorial', 'interpreter.html']
>>> s.rsplit('/',1)[1]
'interpreter.html'
"
how to close pandas dataframe plot,"fig, ax = plt.subplots()
df = pd.Series([1, 2, 3])
df.plot(ax=ax)
plt.show(block=False)
time.sleep(5)
plt.close(fig)
"
How to verify that two different .csv files column ids match with python?,"import csv

file1 =  '/home/vivek/Desktop/stackoverflow/fil1.csv'
file2 =  '/home/vivek/Desktop/stackoverflow/fil2.csv'

with open(file1) as fp1:
    root = csv.reader(fp1)
    rows1 = {}
    for i in root:
        rows1[i[0]]=i
    if ""id"" in rows1:
        del rows1[""id""]

with open(file2) as fp1:
    root = csv.reader(fp1)
    rows2 = {}
    for i in root:
        rows2[i[0]]=i
    if ""id"" in rows2:
        del rows2[""id""]

result = set(rows1.keys()).intersection(set(rows2.keys()))

print ""Same Id :"", list(result)
"
compare two file and find matching words in python,"with open(""file1"") as f1,open(""file2"") as f2:
    words=set(line.strip() for line in f1)   #create a set of words from dictionary file

    #why sets? sets provide an O(1) lookup, so overall complexity is O(N)

    #now loop over each line of other file (word, freq file)
    for line in f2:
        word,freq=line.split()   #fetch word,freq 
        if word in words:        #if word is found in words set then print it
            print word
"
Possible to simplify finding if an element exist in multiple lists?,"if any(partialAnswer in x for x in (primaryTrees, secondaryTrees, tertiaryTrees)):
"
Making a grid with curses from a dictionary of flat tuples,"new_dict = {(2 * x + 1, 2 * y + 1): v for (x, y), v in d.items()}
"
wxpython - Creating Unique GUI Elements With a Loop,"import wx

class GUI(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(700, 400))

        panelControl = wx.Panel(self, 1, style=wx.MAXIMIZE) 
        sizerControl = wx.GridBagSizer(hgap=4,vgap = 4)

        lblTitle = wx.StaticText(panelControl, label=""Pick Scores"")             
        self.btnRoll = wx.Button(panelControl, label=""Roll!"")

        sizerControl.Add(lblTitle, pos=(0,0), 
                         flag=wx.ALIGN_CENTER|wx.TOP|wx.LEFT|wx.BOTTOM, border=5) 
        sizerControl.Add(self.btnRoll, pos=(0,1), 
                         span=(1,5), flag=wx.EXPAND|wx.LEFT|wx.RIGHT, border=5)

        rboxPick = [""Default"", ""Strength"", ""Dexterity"", ""Constitution"", 
                    ""Intelligence"", ""Wisdom"", ""Charisma""
                    ]
        labels = [""One"", ""Two"", ""Three"", ""Four""]

        #Create, layout and bind the RadioBoxes
        for row, label in enumerate(labels):
            lbl = wx.StaticText(panelControl)       
            rbox = wx.RadioBox(panelControl, label=""Roll %s""%(label), choices=rboxPick)
            self.Bind(wx.EVT_RADIOBOX, self.onRadioBox, rbox)              
            sizerControl.Add(rbox, pos=(row+1, 1), span=(1,5), 
                             flag=wx.EXPAND|wx.LEFT|wx.RIGHT,border=2)

        sizerMain = wx.BoxSizer()
        sizerMain.Add(sizerControl)
        panelControl.SetSizerAndFit(sizerMain)

    def onRadioBox(self, evt):
        """"""Event handler for RadioBox..""""""

        rbox = evt.GetEventObject()#Get a reference to the RadioBox
        rboxLbl = rbox.GetLabel()   #We can identify the RadioBox with its label
        selection = rbox.GetSelection()

        print rboxLbl
        print selection

        if rboxLbl == ""Roll One"":
            #do something
            pass     
        elif rboxLbl == ""Roll Two"":
             #do something else
            pass


if __name__ == ""__main__"":
    app = wx.PySimpleApp()
    frame = GUI(None, -1, """") 
    frame.Show(1)
    app.MainLoop()
"
Writing to separate columns instead of comma seperated for csv files in scrapy,"from texttable import Texttable

# ----------------------------------------------------------------
# Imagine data to be generated by Scrapy, for each record:
# a dictionary of three items. The first set ot functions
# generate the data for use in the texttable function

def process_item(item):
    # This massages each record in preparation for writing to csv
    item['Title'] = item['Title'].encode('utf-8') + ','
    item['Release Date'] = item['Release Date'].encode('utf-8') + ','
    item['Director'] = item['Director'].encode('utf-8')
    return item

def initialise_dataset():
    data = [{'Title' : 'Title',
         'Release Date' : 'Release Date',
         'Director' : 'Director'
         }, # first item holds the table header
            {'Title' : 'And Now For Something Completely Different',
         'Release Date' : '1971',
         'Director' : 'Ian MacNaughton'
         },
        {'Title' : 'Monty Python And The Holy Grail',
         'Release Date' : '1975',
         'Director' : 'Terry Gilliam and Terry Jones'
         },
        {'Title' : ""Monty Python's Life Of Brian"",
         'Release Date' : '1979',
         'Director' : 'Terry Jones'
         }
        ]

    data = [ process_item(item) for item in data ]
    return data

def records(data):
    for item in data:
        yield [item['Title'], item['Release Date'], item['Director'] ]

# this ends the data simulation part
# --------------------------------------------------------

def create_table(data):
    # Create the table
    table = Texttable(max_width=0)
    table.set_deco(Texttable.HEADER)
    table.set_cols_align([""l"", ""c"", ""c""])
    table.add_rows( records(data) )

    # split, remove the underlining below the header
    # and pull together again. Many ways of cleaning this...
    tt = table.draw().split('\n')
    del tt[1] # remove the line under the header
    tt = '\n'.join(tt)
    return tt

if __name__ == '__main__':
    data = initialise_dataset()
    table = create_table(data)
    print table
"
"lambda *args, **kwargs: None","def perform_task(callback=None):
    print 'doing stuff'
    if callback is not None:
        callback('x', 'y', z='z')
"
Python splitting list based on missing numbers in a sequence,">>> from operator import itemgetter
>>> from itertools import *
>>> seq2 = [1, 2, 4, 5, 6, 8, 9, 10]
>>> list = []
>>> for k, g in groupby(enumerate(seq2), lambda (i,x):i-x):
...     list.append(map(itemgetter(1), g))
... 
>>> print list
[[1, 2], [4, 5, 6], [8, 9, 10]]
"
Django: how to automatically also delete file from storage when Clear Checkbox ticked?,"class ImageField(models.ImageField):

    def save_form_data(self, instance, data):
        if data is not None: 
            file = getattr(instance, self.attname)
            if file != data:
                file.delete(save=False)
        super(ImageField, self).save_form_data(instance, data)
"
Match all names with exactly 5 digits at the end,">>> import re
>> filetext2 = '''\
... john123:
... 1
... 2
... coconut_rum.zip
...
... bob234513253:
... 0
... jackdaniels.zip
... nowater.zip
... 3
...
... judy88009:
... dontdrink.zip
... 9
...
... tommi54321:
... dontdrinkalso.zip
... 92
... '''
>>> results = {}
>>> for name, *data in map(str.splitlines, filetext2.split('\n\n')):
...     if re.match('[A-Za-z]*\d{5}:', name):
...         results[name[:-1]] = [x for x in data if x.endswith('.zip')]
...
>>> results
{'tommi54321': ['dontdrinkalso.zip'], 'judy88009': ['dontdrink.zip']}
>>>
"
Triangle Siblings in python,"def make_triangle(size, siblings, step): 
    return [['*' * (i-(step*sib)) + ' ' * ((size-(step*sib)) - ((i-(step*sib)) if (i-(step*sib) > 0) else 0)) for sib in xrange(siblings)] for i in xrange(1, size+1)]
"
Create a list of tuples containing adjacent numbers?,">>> a = [1, 2, 3, 6, 9, 10]
>>> list(yield_adjacent(a))
[(1, 2, 3), (6,), (9, 10)]
>>> a = []
>>> list(yield_adjacent(a))
[]
>>> a = [1, 3]
>>> list(yield_adjacent(a))
[(1,), (3,)]
>>> a = [1, 3, 4, 9]
>>> list(yield_adjacent(a))
[(1,), (3, 4), (9,)]
"
Flask how to calculate tags count,"query = db.session.query(Tag, db.func.count(Post.id))
# This works but the preferred way is what's below it
#query = query.join(tags_to_posts_association_table, Post)
query = query.join(Post.tags)
query = query.group_by(Tag.id)
"
Comparing and discarding two consecutive elements not complying certain condition in a list using Python,"prev = None
newp = []
length = len(p) - 1
for i in range(length):
  if p[i][0] == p[i+1][0] or p[i][0] == prev:
    newp.append(p[i])
    prev = p[i][0]

if p[length][0] == p[length-1][0]:
  newp.append(p[length])
"
Python - Use decorated function in class,"class OAuthRemoteApp(object):
    def authorized_handler(self, f):
        def decorated(*args, **kwargs):
            data = 'resp'
            args = args[:1] + (data,) + args[1:]
            return f(*args, **kwargs) 
        return decorated

vk = OAuthRemoteApp()

class ClientView(object):
    @vk.authorized_handler
    def authorized(self, resp):
        print(self, resp)

cv = ClientView()
cv.authorized()
"
Mapping pandas DataFrame rows to a pandas Series,"new_metadata = df.apply(lambda x: '{}\b,""timestamp"":{}}}'.format(x.metadata,x.timestamp),axis=1)
"
pip install not installing part of the repository,"    ...
    packages=[
        'django_bleach',
        'django_bleach.templatetags'
    ],
    ...
"
Convert function arguments to lists,"def function(a, b, c, d):
    l= locals()
    for i in l:
        key = l[i]
        if isinstance(key, str):
            l[i] = [l[i]]
    l = l.values()
    print (l)
function('one', 'two', ['bla','bla'], ['ble'])
"
Python 3.4.3 Aligning Columns,"aList = ['A','B','C','D','E','F','G','H','I','J']
bList = len(aList)
grid = []
aWidth = 10
aHeight = 10

def garden(grid):
    colWidth=5
    print("" ""*colWidth,end='') #This is needed as first column does not have a title.
    for j in range(0, bList):
        print(aList[j].center(colWidth), end = '')
    print( )
    for i in range(aWidth):
        if i+1 < 10:
            print(str(i+1).center(colWidth), end='')
        else:
            print(str(i+1).center(colWidth), end='')
        for j in range(aHeight):
                print('-'.center(colWidth), end='')  
        else:
            print('\n',end='')

#Main            
garden(grid)
"
How to get pixel coordinates for Matplotlib-generated scatterplot?,"import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
points, = ax.plot(range(10), 'ro')
ax.axis([-1, 10, -1, 10])

# Get the x and y data and transform it into pixel coordinates
x, y = points.get_data()
xy_pixels = ax.transData.transform(np.vstack([x,y]).T)
xpix, ypix = xy_pixels.T

# In matplotlib, 0,0 is the lower left corner, whereas it's usually the upper 
# right for most image software, so we'll flip the y-coords...
width, height = fig.canvas.get_width_height()
ypix = height - ypix

print 'Coordinates of the points in pixel coordinates...'
for xp, yp in zip(xpix, ypix):
    print '{x:0.2f}\t{y:0.2f}'.format(x=xp, y=yp)

# We have to be sure to save the figure with it's current DPI
# (savfig overrides the DPI of the figure, by default)
fig.savefig('test.png', dpi=fig.dpi)
"
Multiprocessing in Python - Concurrence,"import os
from multiprocessing import *

class ImageData(object):
    def __init__(self, a, b):
        pass

    def shepard_interpolation(self, queue, seeds=10):
        self.pid = os.getpid()
        print self.pid, ""queue put""
        queue.put(self)

if __name__ == '__main__':
    q = Queue()
    processes = [ Process(
      target=ImageData.shepard_interpolation, args=(ImageData(50, 50), q))
        for _ in range(10) ]
    for process in processes:
        process.start()
    results = []
    for process in processes:  # just to have the correct amount of results
        results.append(q.get())
    print '---------Out--------'
    for process in processes:
        process.join()
    print [ result.pid for result in results ]
"
Fastest Python equivalent to switch for array of integers,">>> def make_lookup_func(table):
...     def lookup(val, t=table):
...         return t[val]
...     return lookup
... 
>>> lookup_tuple = make_lookup_func(tuple(range(10)))
>>> lookup_list = make_lookup_func(list(range(10)))
>>> lookup_array = make_lookup_func(array.array('i', range(10)))
>>> lookup_dict = make_lookup_func(dict(zip(range(10), range(10))))
>>> %timeit lookup_tuple(9)
10000000 loops, best of 3: 177 ns per loop
>>> %timeit lookup_list(9)
10000000 loops, best of 3: 158 ns per loop
>>> %timeit lookup_array(9)
10000000 loops, best of 3: 181 ns per loop
>>> %timeit lookup_dict(9)
10000000 loops, best of 3: 166 ns per loop
"
print particular lines,"grep -P '^\d+\t+\S+' infile
"
Convert commented out print statements to logging calls - Python,"import fileinput
import sys
import re

def convert(paths):
    for line in fileinput.input(paths, inplace=True, backup='~'):
        line=re.sub(r'#\s*print\s*(.*)',r'logging.debug(\1)',line)
        sys.stdout.write(line)

if __name__=='__main__':
    convert(sys.argv[1:])
"
How to find all elements in a numpy 2-dimensional array that match a certain list?,"np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"
Python - counting duplicate strings,"from collections import defaultdict
tally = defaultdict(int)
text = ""one two two three three three""
for i in text.split():
    tally[i] += 1
print tally  # defaultdict(<type 'int'>, {'three': 3, 'two': 2, 'one': 1})
"
List of dictionaries - how to format print output,">>> print ['{{{0[score]}-{0[numrep]}}}'.format(d) for d in lst]
['{7-0}', '{2-0}', '{9-0}', '{2-0}']
>>> print '[{}]'.format(', '.join(['{{{0[score]}-{0[numrep]}}}'.format(d) for d in lst]))
[{7-0}, {2-0}, {9-0}, {2-0}]
"
How scrapy write in log while running spider?,"from scrapy import Spider, Item, Field

class Post(Item):
    title = Field()

class BlogSpider(Spider):
    name, start_urls = 'blogspider', ['http://blog.scrapinghub.com']

    def parse(self, response):
        return [Post(title=e.extract()) for e in response.css(""h2 a::text"")]
"
Splitting lists to make dictionary python,">>> lst = ['1:A', '2:B', '3:C', '4:A']
>>> dict(v.split(':') for v in lst)
{'1': 'A', '3': 'C', '2': 'B', '4': 'A'}
"
Standard Solution for Decoding Additive Numbers,">>> FLAGS = ('User', 'Redo', 'Enqueue', 'Cache', 'OS',
...          'Real Application Clusters', 'SQL', 'Debug')
>>> def getFlags(value):
...   flags = []
...   for i, flag in enumerate(FLAGS):
...     if value & (1 << i):
...       flags.append(flag)
...   return flags
...
>>> print getFlags(22)
['Redo', 'Enqueue', 'OS']
"
Django pagination. What if I have 1 million of rows?,"my_list = MyModel.objects.all()
smaller_list = my_list[100:200]
"
Python: Grouping into timeslots (minutes) for days of data,"# create sample data
from datetime import datetime, timedelta
d = datetime.now()
data = [d + timedelta(minutes=i) for i in xrange(100)]

# prepare and group the data
from itertools import groupby

def get_key(d):
    # group by 30 minutes
    k = d + timedelta(minutes=-(d.minute % 30)) 
    return datetime(k.year, k.month, k.day, k.hour, k.minute, 0)

g = groupby(sorted(data), key=get_key)

# print data
for key, items in g:
    print key
    for item in items:
        print '-', item
"
How to select a range of numbers to multiply an hourly wage by,"regPay = float(wage) * min(int(hours),40)
# min(hours,40) will return hours, unless hours > 40 then it will return 40
OTpay = float(wage) * OVERTIMERATE * max(int(hours)-40,0)
# max(hours-40,0) will return hours-40, unless hours <= 40 then it will return 0
"
Adding up instance variables of a class object,"sum([i.a for i in B])
"
python function incrementing variable in list for no obvious reason,"def AIenemyTurn(enemy,playerPos):
    startPos = list(enemy)
    print(startPos)
    potEnemyPos = enemy
    if playerPos[0] > enemy[0]:
        potEnemyPos[0] += 1
    elif playerPos[0] < enemy[0]:
        potEnemyPos[0] -= 1
    elif playerPos[1] > enemy[1]:
        potEnemyPos[1] += 1
    elif playerPos[1] < enemy[1]:
        potEnemyPos[1] -= 1
    if potEnemyPos not in rocks:
        print(potEnemyPos)
        print(startPos)
        return potEnemyPos
    else:
        return startPos
"
Not appending to list,"def add_abilities(abilities_m_l):
    jobs_dict = OrderedDict()
    for data_dict in abilities_m_l:
        o_code = data_dict['O*NET-SOC Code']
        activity = data_dict['Element Name']
        activities_so_far = jobs_dict.setdefault(o_code, set)
        activities_so_far.add(activity)
    return [{o_code: list(activities)} for o_code, activities in jobs_dict.iteritems()]
"
How can I periodically execute a function with asyncio?,"async def main():
    p = Periodic(lambda: print('test'), 1)
    try:
        print('Start')
        await p.start()
        await asyncio.sleep(3.1)

        print('Stop')
        await p.stop()
        await asyncio.sleep(3.1)

        print('Start')
        await p.start()
        await asyncio.sleep(3.1)
    finally:
        await p.stop()  # we should stop task finally


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
"
Find common substring between two strings,"def longestSubstringFinder(string1, string2):
    answer = """"
    len1, len2 = len(string1), len(string2)
    for i in range(len1):
        match = """"
        for j in range(len2):
            if (i + j < len1 and string1[i + j] == string2[j]):
                match += string2[j]
            else:
                if (len(match) > len(answer)): answer = match
                match = """"
    return answer

print longestSubstringFinder(""apple pie available"", ""apple pies"")
print longestSubstringFinder(""apples"", ""appleses"")
print longestSubstringFinder(""bapples"", ""cappleses"")
"
How can i animate text by character in Tkinter?,"import Tkinter as tk

root = tk.Tk()
canvas = tk.Canvas(root)
canvas.pack()

canvas_text = canvas.create_text(10, 10, text='', anchor=tk.NW)

test_string = ""This is a test""
#Time delay between chars, in milliseconds
delta = 500 
delay = 0
for i in range(len(test_string) + 1):
    s = test_string[:i]
    update_text = lambda s=s: canvas.itemconfigure(canvas_text, text=s)
    canvas.after(delay, update_text)
    delay += delta

root.mainloop()
"
Pandas: Expand a really long list of numbers,"print df
                                        data
0                          11161161166666661
1                                     161111
2  11161161166666661661611111111161161111611
3                  1116116116666666166161111

print df.data.apply(lambda x: pd.Series(list(x)))
  0  1  2  3  4  5    6    7    8    9  ...    31   32   33   34   35   36  \
0  1  1  1  6  1  1    6    1    1    6 ...   NaN  NaN  NaN  NaN  NaN  NaN   
1  1  6  1  1  1  1  NaN  NaN  NaN  NaN ...   NaN  NaN  NaN  NaN  NaN  NaN   
2  1  1  1  6  1  1    6    1    1    6 ...     1    1    6    1    1    1   
3  1  1  1  6  1  1    6    1    1    6 ...   NaN  NaN  NaN  NaN  NaN  NaN   

    37   38   39   40  
0  NaN  NaN  NaN  NaN  
1  NaN  NaN  NaN  NaN  
2    1    6    1    1  
3  NaN  NaN  NaN  NaN  

[4 rows x 41 columns]
"
CSV parsing and conversion,"import csv
from itertools import islice

with open('input.csv', 'rb') as inf, open('output.csv', 'wb') as outf:
    reader = csv.reader(inf)
    writer = csv.writer(outf)
    for row in reader:
        while not row:
            # skip empty rows
            continue

        result = row
        for extra_row in islice(reader, 3):
            result.append(extra_row[1])
        result.extend(next(reader))
        result.append(next(reader)[1])

        writer.writerow(result)
"
Python regex char pattern group,">>> re.findall('(A[^A]+(?=A)?)', s, re.IGNORECASE | re.MULTILINE)
['AXDJSDSJD', 'AFGCJ', 'ASDJ', 'AS', 'AGXCJ', 'AD']
"
"Selenium Python: How to click on a <a> tag based on ""onclick"" text","driver.find_element_by_xpath(""//a[contains(@onclick, 'potato.php')]"").click()
"
Python: Remove numbers at the beginning of a string,"string1.lstrip('0123456789.- ')
"
plot multiple data series from numpy array,"import pandas as pd
dataset = pd.read_table(""toplot.txt"", sep=""\t"")
#make D index (automatically puts it on the x axis)
dataset.set_index(""D"", inplace=True)
#plotting R vs. D
dataset.R.plot()
#plotting F vs. D
dataset.F.plot()
"
Mode of a List - Python,"from collections import Counter

def ModeList(lst):
    return Counter(lst).most_common(1)[0][0]
"
Python minimization leastsq with columns,"import numpy as np
from scipy.optimize import leastsq

T = np.arange(5,56,5)

test = np.array([[  3051.11,   2984.85,   3059.17],
                 [  3510.78,   3442.43,   3520.7 ],
                 [  4045.91,   3975.03,   4058.15],
                 [  4646.37,   4575.01,   4662.29],
                 [  5322.75,   5249.33,   5342.1 ],
                 [  6102.73,   6025.72,   6127.86],
                 [  6985.96,   6906.81,   7018.22],
                 [  7979.81,   7901.04,   8021.  ],
                 [  9107.18,   9021.98,   9156.44],
                 [ 10364.26,  10277.02,  10423.1 ],
                 [ 11776.65,  11682.76,  11843.18]])


k0 = 100.
k1 = 100.
k2 = 1.
k3 = 1.
k4 = 1.
k5 = 10.

def residual_x(vars, T, donnees):
    k0 = vars[0]
    k1 = vars[1]
    k2 = vars[2]
    k3 = vars[3]
    k4 = vars[4]
    k5 = vars[5]
    modele = T**5*k0+T**4*k1+T**3*k2+T**2*k3+T*k4+k5
    return donnees-modele

vars = [k0, k1, k2, k3, k4, k5]
coeffs=[]

for i in range(test.shape[1]):
#EDIT: previously appended the complete output of leastsq to coeffs list
#      this is wrong; leastsq returns two outputs (i.e., a tuple)
#      and we're only really interested in the coefficients
    thiscoeffs,_=leastsq(residual_x, vars, args=(T, test[:,i]),epsfcn=0.001)
    coeffs.append(thiscoeffs)

for i in range(test.shape[1]):
    print 'poly[%d] coeffs: %s' % (i,str(coeffs[i]))

# try first example with numpy.polyfit
coeffs2 = np.polyfit(T,test[:,0],5)
print 'np.polyfit for case 0: %s',str(coeffs2)

#EDIT: this added in second edit
# if you want coeffs as an array, you could convert the list like this
coeffs_array=np.asarray(coeffs)
# or you could make coeffs a numpy array in the first place
"
sort names in alphabitical order in mysql using python,"for row in c.execute('SELECT * FROM stocks ORDER BY price'):
        print row
"
Python: implement a script in a function. Some suggestions,"from math import atan2, cos, pi, sin

class GetMinimumAreaRectangle(object):
    """""" functor to find length, width, and area of the smallest rectangular
        area of the given convex hull """"""
    def __call__(self, hull):
        self.hull = hull
        mostfar = self._mostfar  # local reference
        n = len(hull)
        min_area = 10**100  # huge value
        iL = iR = iP = 1  # indexes left, right, opposite
#        print '    {:>2s} {:>2s} {:>2s} {:>2s} {:>9s}'.format(
#                   'i', 'iL', 'iP', 'iR', 'area')
        for i in xrange(n-1):
            dx = hull[i+1][0] - hull[i][0]  # distance on x axis
            dy = hull[i+1][1] - hull[i][1]  # distance on y axis
            theta = pi-atan2(dy, dx)   # get orientation angle of the edge
            s, c = sin(theta), cos(theta)
            yC = hull[i][0]*s + hull[i][1]*c
            xP, yP, iP = mostfar(iP, n, s, c, 0, 1)
            if i==0: iR = iP
            xR, yR, iR = mostfar(iR, n, s, c,  1, 0)
            xL, yL, iL = mostfar(iL, n, s, c, -1, 0)
            l, w = (yP-yC), (xR-xL)
            area = l*w
#            print '    {:2d} {:2d} {:2d} {:2d} {:9.3f}'.format(i, iL, iP, iR, area)
            if area < min_area:
                min_area, min_length, min_width = area, l, w
        return (min_length, min_width, min_area)

    def _mostfar(self, j, n, s, c, mx, my):
        """""" advance j to extreme point """"""
        hull = self.hull  # local reference
        xn, yn = hull[j][0], hull[j][1]
        rx, ry = xn*c - yn*s, xn*s + yn*c
        best = mx*rx + my*ry
        while True:
            x, y = rx, ry
            xn, yn = hull[(j+1)%n][0], hull[(j+1)%n][1]
            rx, ry = xn*c - yn*s, xn*s + yn*c
            if mx*rx + my*ry >= best:
                j = (j+1)%n
                best = mx*rx + my*ry
            else:
                return (x, y, j)

if __name__ == '__main__':

    hull= [(560023.44957588764, 6362057.3904932579),
           (560023.44957588764, 6362060.3904932579),
           (560024.44957588764, 6362063.3904932579),
           (560026.94957588764, 6362068.3904932579),
           (560028.44957588764, 6362069.8904932579),
           (560034.94957588764, 6362071.8904932579),
           (560036.44957588764, 6362071.8904932579),
           (560037.44957588764, 6362070.3904932579),
           (560037.44957588764, 6362064.8904932579),
           (560036.44957588764, 6362063.3904932579),
           (560034.94957588764, 6362061.3904932579),
           (560026.94957588764, 6362057.8904932579),
           (560025.44957588764, 6362057.3904932579),
           (560023.44957588764, 6362057.3904932579)]

    gmar = GetMinimumAreaRectangle()  # create functor object
    print ""dimensions and area of smallest enclosing rectangular area:""
    print ""  {:.3f}(L) x {:.3f}(W) = {:.3f} area"".format(*gmar(hull))  # use it
"
How to do a multidimensional array in python?,"a = [{""url"": ""http://wwww.ff.com"", ""msg"": ""msg 1...""},
     {""url"": ""http://wwww.yy.com"", ""msg"": ""msg 2...""},
     {""url"": ""http://wwww.xx.com"", ""msg"": ""msg 3...""}]
print a[0][""url""]
# http://wwww.ff.com
"
Remove consecutive dots(periods) from a string?,"import re

consequitivedots = re.compile(r'\.{3,}')
consequitivedots.sub('', inputstring)
"
Python: convert a list of tuples into a flat list,"tuple_list = [('a', 1), ('b', 3), ('c', 2)]
def flatten_tuple(tuple_list):
    #Method 1
    #import itertools
    #return [item for item in itertools.chain.from_iterable(tuple_list)]

    #Method 2
    return [item for tempList in tuple_list for item in tempList]

print flatten_tuple(tuple_list)
"
Numpy: Check array for string data type,"a.dtype.type is np.string_
"
Evaluating nested variables with pyparsing for a DSL,"def eval(self):
    v = self.value
    if v in self.var_:  # has_key is deprecated Python, use 'in'
        varval = self.var_[v]
        return varval.eval() if hasattr(varval,'eval') else varval
    else:
        return float(v)
"
Python regular expressions not recognizing \number,"re.compile(r'([0-9])\1')
"
How to check if two numbers in a list are the same,"seen = set()
for number in myList:
    if number in seen:
        print ""Number repeated!""
    seen.add(number) # won't duplicate
"
check if a directory exists and create it if necessary,"try:
    os.makedirs(path)
except OSError:
    if (not os.path.isdir(path)):
        raise"
Trying to make sure certain symbols aren't in a word,"words = list(itertools.ifilterfalse(brackets.intersection,
                                    random.choice(headlines).split("" ""))[1:-1]))
"
Python - Convert unicode hex to string,">>> s='<div>&#x412;&#x432;&#x43E;&#x441;&#x43A;&#x440;&#x435;&#x441;&#x435;&#x43D;&#x44C;</div>'
>>> import HTMLParser
>>> h=HTMLParser.HTMLParser()
>>> print(h.unescape(s))
<div>Ввоскресень</div>
"
"Python returns list but to variable, but variable is null","else:
    if op(left(q)) == '+':
        solvingAdd(v, q)
    else:
        return ""v not on left of q""
"
SqlAlchemy: filter to match all instead of any values in list?,"select aid
from jt join
     bids
     on jf.bid = bids.bid
group by aid
having count(distinct jt.bid) = (select count(*) from bids)
"
Not able to login to https site(https://malwr.com) through python script,"from urlparse import urljoin
from bs4 import BeautifulSoup
import requests

base_url = 'https://malwr.com/'
url = 'https://malwr.com/account/login/'
username = 'username'
password = 'password'

session = requests.Session()

# getting csrf value
response = session.get(url)
soup = BeautifulSoup(response.content)

form = soup.form
csrf = form.find('input', attrs={'name': 'csrfmiddlewaretoken'}).get('value')

# logging in
data = {
    'username': username,
    'password': password,
    'csrfmiddlewaretoken': csrf
}
session.post(url, data=data)

# getting analysis data
response = session.get('https://malwr.com/analysis/MDMxMmY0NjMzNjYyNDIyNDkzZTllOGVkOTc5ZTQ5NWU/')
soup = BeautifulSoup(response.content)

link = soup.find('section', id='file').find('table')('tr')[-1].a.get('href')
link = urljoin(base_url, link)
print link
"
Having some trouble converting a tk PhotoImage back to a PIL image to save,"from PIL import Image, ImageTk
#from graphics import GraphWin # not needed

# for Python 3.x
from tkinter import filedialog # Will be used to open the file from the user
import tkinter

# for Python 2.x
#import Tkinter as tkinter
#import tkFileDialog as filedialog # Will be used to open the file from the user

import os

# --- Global variables for radio buttons ---

radio1 = True
radio2 = False
radio3 = False
radio4 = False

#--------------------------------------------

# --- Global variables for picture ---

pic = None
tkPic = None
tkPic2 = None
picToConvert = None
picWidth = 0
picHeight = 0
canvas1 = None

var = None #create global variable

#----------------------------------------------------------------------

def rotateIt():
    global pic

    print ""(debug) rotateIt:"", pic
    pic = pic.rotate(180)

# --- Function for radio buttons ---

def whichSelected(numberSelected):
        global radio1
        global radio2
        global radio3
        global radio4

        if numberSelected == 4:
            radio1 = False
            radio4 = True
        elif numberSelected == 3:
            radio1 = False
            radio3 = True
        elif numberSelected == 2:
            radio1 = False
            radio2 = True
        elif numberSelected == 1:
            radio1 = True


# --- Gray Algorithms ---

def grayAverage(r, g, b):
    return (r + g + b) // 3

def invertRGB(r,g,b):
    return (255 - r, 255 - g, 255 - b)


def lightness(r,g,b):
    return (max(r, g, b) + min(r, g, b)) // 2

def luminosity(r,g,b):
    return int(((0.21 * r) + (0.71 * g) + (0.07 * b)))

def getRGB(r,g,b):
    red   = eval(input(""Enter the value of red: ""))
    green = eval(input(""Enter the value of green: ""))
    blue  = eval(input(""Enter the value of blue: ""))

    return red-r + green-g + blue-b // 3

# --- End Gray Algorithms ---

# Draws window, opens picture selected by user, packs the canvas
def drawWindow():
    window = tkinter.Tk()
    window.title(os.environ.get( ""USERNAME"" )) # sets the window title to the

    return window

def drawCanvas():
    global window
    global canvas1
    canvas1 = tkinter.Canvas(window, width = 820, height =340) # Draws a canvas onto the tkinter window
    canvas1.pack()

    return canvas1

# Global variables for window and canvas
window = drawWindow()
canvas1 = drawCanvas()

#----------------------------------------------------------------------

# --- Radio Button Code ---

def drawRadioButtons():
    global window, var

    var = tkinter.IntVar()

    option1 = tkinter.Radiobutton(window, text ='Average Grayscale',    variable = var, value = 1, command = lambda: whichSelected(1))
    option2 = tkinter.Radiobutton(window, text ='Lightness Grayscale',  variable = var, value = 2, command = lambda: whichSelected(2))
    option3 = tkinter.Radiobutton(window, text ='Luminosity Grayscale', variable = var, value = 3, command = lambda: whichSelected(3))
    option4 = tkinter.Radiobutton(window, text ='Invert',               variable = var, value = 4, command = lambda: whichSelected(4))
    option5 = tkinter.Radiobutton(window, text ='Rotate 180',           variable = var, value = 5)

    # Sets the first button to clicked
    option1.select()

    # Pack Radio Buttons
    option1.pack(anchor = 'sw')
    option2.pack(anchor = 'sw')
    option3.pack(anchor = 'sw')
    option4.pack(anchor = 'sw')
    option5.pack(anchor = 'sw')
    # End Radio Button code 

def openImage():
    global window
    global canvas1
    global pic
    global picWidth
    global picHeight
    global tkPic
    global tkPic2
    global picToConvert

    canvas1.delete('all')
    del pic
    del tkPic

    picToConvert = filedialog.askopenfilename(defaultextension='.jpg') # Used to open the file selected by the user
    pic = Image.open(picToConvert).convert('RGB')
    picWidth, picHeight = pic.size # PIL method .size gives both the width and height of a picture
    tkPic = ImageTk.PhotoImage(pic, master = window) # Converts the pic image to a tk PhotoImage
    canvas1.create_image(10,10,anchor='nw', image = tkPic)

#----------------------------------------------------------------------

def saveImage():
    global pic

    toSave = filedialog.asksaveasfile(mode='w',defaultextension='.jpg')
    pic.save(toSave)

#----------------------------------------------------------------------

def onConvert():
    global var
    global tkPic2
    global window

    if var.get() == 5:
        rotateIt(pic)
    else:
        change_pixel()

    # Converting to a tkinter PhotoImage

    if tkPic2:
        del tkPic2

    tkPic2 = ImageTk.PhotoImage(pic, master = window)
    canvas1.create_image(815,170, anchor='e',image = tkPic2)

#----------------------------------------------------------------------

def change_pixel():
    global window
    global canvas1
    global pic

    global radio1
    global radio2
    global radio3
    global radio4

    # Treats the image as a 2d array, iterates through changing the
    #values of each pixel with the algorithm for gray

    rgbList = pic.load() #Get a 2d array of the pixels
    for row in range(picWidth):
        for column in range(picHeight):
            rgb = rgbList[row,column]
            #print rgb
            r,g,b = rgb # Unpacks the RGB value tuple per pixel
            if radio1 == True:
                grayAlgorithm1 = grayAverage(r,g,b)
                rgbList[row,column] = (grayAlgorithm1, grayAlgorithm1, grayAlgorithm1)
            elif radio2 == True:
                grayAlgorithm1 = lightness(r,g,b)
                rgbList[row,column] = (grayAlgorithm1, grayAlgorithm1, grayAlgorithm1)
            elif radio3 == True:
                grayAlgorithm1= luminosity(r,g,b)
                rgbList[row,column] = (grayAlgorithm1, grayAlgorithm1, grayAlgorithm1) # Gives each pixel a new RGB value
            elif radio4 == True:
                rgbList[row,column] = invertRGB(r,g,b) # Gives each pixel a new RGB value

#----------------------------------------------------------------------

# Function to create a button, takes the button text and the function to be called on click
def tkButtonCreate(text, command):
    tkinter.Button(window, text = text, command = command).pack()

#----------------------------------------------------------------------

def main():
    drawRadioButtons()
    tkButtonCreate('Open Image',openImage)
    tkButtonCreate('Convert', onConvert)
    tkButtonCreate('Save',saveImage)
    window.mainloop()
    #convertButton = tkinter.Button(window,text = 'Convert', command = change_pixel).pack()

#----------------------------------------------------------------------

main()
"
Plotting two different arrays of different lengths,"
import numpy as np
import matplotlib.pyplot as plt
np.random.seed(2015)

raw = (np.random.random(1000) - 0.5).cumsum()
smooth = raw.reshape(-1,10).mean(axis=1)

x1 = np.linspace(0, 1, 1000)
x2 = np.linspace(0, 1, 100)
plt.plot(x1, raw)
plt.plot(x2, smooth)
plt.show()
"
Convert scientific notation to decimal - python,"""""""{:.50f}"""""".format(float(a[0] / a[1]))"
Average duplicate values from two paired lists in Python using NumPy,"import numpy as np
import random
from matplotlib.mlab import rec_groupby

listA = [random.choice(""abcdef"") for i in range(20000)]
listB = [20 * random.random() for i in range(20000)]

names = np.array(listA)
values = np.array(listB)

def f_dict(listA, listB):
    d = {}

    for a, b in zip(listA, listB):
        d.setdefault(a, []).append(b)

    avg = []
    for key in d:
        avg.append(sum(d[key])/len(d[key]))

    return d.keys(), avg

def f_numpy(names, values):
    result_names = np.unique(names)
    result_values = np.empty(result_names.shape)

    for i, name in enumerate(result_names):
        result_values[i] = np.mean(values[names == name])

    return result_names, result_values     
"
Python - __str__ returning elements of a list,"def __sum_of_hand(self):
    return sum(x.value for x in self.hand)
"
Using NumPy argsort and take in 2D arrays,"s2 = dist[np.arange(4)[:, None], a]
"
Python: Only saving three latest scores,"import json


with open('scores.json', 'a') as f:
    try:
        scores = json.load(f)
    except ValueError:
        scores = {}
        # add user if not already in the dict with a list as a value
        scores.setdefault(name,[])
         # just append the latest score making sure when you have three to relace the last
        scores[name].append(whatever)
 #   do your logic replacing last score for each name or adding names

    with open('scores.json', 'w') as f:
       json.dump(scores,f)
"
Moving x-axis to the top of a plot in matplotlib,ax.xaxis.set_ticks_position('top')
How to locate a function in a Python module tree?,"import inspect

def find_name(package, name):
    if hasattr(package, name):
        yield package
    for modulename, submodule in inspect.getmembers(package, inspect.ismodule):
        yield from find_name(submodule, name)
"
Getting two-tuples out of a list,">>> [list(t) for t in zip(*4*[iter(x)])]
[[0, 1, 2, 3], [4, 5, 6, 7]]
"
How to position and align a matplotlib figure legend?,"import numpy as np
import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)

x = np.linspace(0, np.pi, 100)

line1, = ax1.plot(x, np.cos(3*x), color='red')
line2, = ax2.plot(x, np.sin(4*x), color='green')

# The key to the position is bbox_to_anchor: Place it at x=0.5, y=0.5
# in figure coordinates.
# ""center"" is basically saying center horizontal alignment and 
# center vertical alignment in this case
fig.legend([line1, line2], ['yep', 'nope'], bbox_to_anchor=[0.5, 0.5], 
           loc='center', ncol=2)

plt.show()
"
Python - How to use try/except statement in dictionary,"dictionary = {value: None}
try:
    dictionary[value] = list[0]
except IndexError:
    pass
"
Python delete row in numpy array,"p = p[p[:,2] <= 30]
"
Adding Log Statements To Beginning and Ending of All Functions By Shell,"$ cat tst2.awk
BEGIN {
    beg = ""\tchar FuncName[] = \""%s()\"";\n\tprintf(\""%%s begins\\n\"", FuncName);\n""
    end = ""\n\tprintf(\""%%s ends\\n\"", FuncName);""
}
/^[[:space:]]*[[:alnum:]_]+[[:space:]]+([[:alnum:]_]+::[[:alnum:]_]+)[(][^)]*[)]/ {
    funcName = $0
    gsub(/^[[:space:]]*[[:alnum:]_]+[[:space:]]+|[(][^)]*[)].*/,"""",funcName)
}
/{/ && (++braceCnt == 1) { $0 = $0 ORS sprintf(beg,funcName) }
/}/ && (--braceCnt == 0) { $0 = sprintf(end,funcName) ORS $0 }
{ print }
"
Infinite Sequence. Cannot process answer in 1 second,"import math
import sys

f = lambda x: math.sqrt(2.0 * x + 0.25) - 0.5
g = lambda x: f(x) % 1 == 0

inp = map(int, sys.stdin.read().split()[1:])

print("" "".join(""1"" if g(x-1) else ""0"" for x in inp))
"
Python: Bad JSON - Keys are not quoted,"import re

valid_json = re.sub(r'(?<={|,)([a-zA-Z][a-zA-Z0-9]*)(?=:)', r'""\1""', jsonp_payload)
"
How to count a boolean in grouped Spark data frame,"(data
    .groupby(""Region"")
    .agg(F.avg(""Salary""), F.sum(F.col(""IsUnemployed"").cast(""long""))))
"
Converting from a string to boolean in Python?,"s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']"
Integrating a multidimensional integral in scipy,"import numpy
import scipy.integrate
import math

def w(r, theta, phi, alpha, beta, gamma):
    return(-math.log(theta * beta))

def integrand(phi, alpha, gamma, r, theta, beta):
    ww = w(r, theta, phi, alpha, beta, gamma)
    k = 1.
    T = 1.
    return (math.exp(-ww/(k*T)) - 1.)*r*r*math.sin(beta)*math.sin(theta)

# limits of integration

def zero(x, y=0):
    return 0.

def one(x, y=0):
    return 1.

def pi(x, y=0):
    return math.pi

def twopi(x, y=0):
    return 2.*math.pi

# integrate over phi [0, Pi), alpha [0, 2 Pi), gamma [0, 2 Pi)
def secondIntegrals(r, theta, beta):
    res, err = scipy.integrate.tplquad(integrand, 0., 2.*math.pi, zero, twopi, zero, pi, args=(r, theta, beta))
    return res

# integrate over r [0, 1), beta [0, 2 Pi), theta [0, 2 Pi)
def integral():
    return scipy.integrate.tplquad(secondIntegrals, 0., 2.*math.pi, zero, twopi, zero, one)

expected = 16*math.pow(math.pi,5)/3.
result, err = integral()
diff = abs(result - expected)

print ""Result = "", result, "" estimated error = "", err
print ""Known result = "", expected, "" error = "", diff, "" = "", 100.*diff/expected, ""%""
"
Assign HTML content after stripping tags using Python (regex parse),"from bs4 import BeautifulSoup   

data = """"""
<tr class=""suite"">
    <td colspan=""2"" class=""totalLabel"">Total</td>
    <td class=""zero number"">0</td>
    <td class=""skipped number"">4</td>
    <td class=""zero number"">0</td>

    <td class=""passRate suite"">
        0%
    </td>
</tr>
""""""

soup = BeautifulSoup(data, ""html.parser"")

totals = [td.get_text(strip=True) 
          for td in soup.find(""td"", class_=""totalLabel"").find_next_siblings(""td"")]
print(totals)
"
Get lists by reading file in Python,">>> import json
>>> l_str = '[[48,49,39,7,13,1,11],[46,27,19,15,24,8,4],[35,5,41,10,31,5,9],[12,9,22,2,36,9,2],[50,47,25,6,42,3,1]]'
>>> l = json.loads(l_str)
>>> print l
[[48, 49, 39, 7, 13, 1, 11], [46, 27, 19, 15, 24, 8, 4], [35, 5, 41, 10, 31, 5, 9], [12, 9, 22, 2, 36, 9, 2], [50, 47, 25, 6, 42, 3, 1]]
"
converting strings to numeric,">>> s = ['3.65e+03', '1.14e+04', '1.35e+04', '1.46e+04']
>>> map(float,s) 
>>> [3650.0, 11400.0, 13500.0, 14600.0]
"
Is it possible to inherit from an extension class in ODOO?,"#Original definition v8 addons/delivery/sale.py  line no 36 :
class sale_order(osv.Model):
    _name = ""sale.order""
#Example method on sale order calss line #601
def action_wait(self, cr, uid, ids, context=None):
"
How does the @property decorator work?,"
class Property(object):
    ""Emulate PyProperty_Type() in Objects/descrobject.c""

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        if doc is None and fget is not None:
            doc = fget.__doc__
        self.__doc__ = doc

    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError(""unreadable attribute"")
        return self.fget(obj)

    def __set__(self, obj, value):
        if self.fset is None:
            raise AttributeError(""can't set attribute"")
        self.fset(obj, value)

    def __delete__(self, obj):
        if self.fdel is None:
            raise AttributeError(""can't delete attribute"")
        self.fdel(obj)

    def getter(self, fget):
        return type(self)(fget, self.fset, self.fdel, self.__doc__)

    def setter(self, fset):
        return type(self)(self.fget, fset, self.fdel, self.__doc__)

    def deleter(self, fdel):
        return type(self)(self.fget, self.fset, fdel, self.__doc__)
"
python find all neighbours of a given node in a list of lists,"def find_neighbor_indices(m, i, j, dist=1):
    irange = range(max(0, i-dist), min(len(m), i+dist+1))
    if len(m) > 0:
        jrange = range(max(0, j-dist), min(len(m[0]), j+dist+1))
    else:
        jrange = []
    for icheck in irange:
        for jcheck in jrange:
            # Skip when i==icheck and j==jcheck
            if icheck != i or jcheck != j:
                neighbors.append((icheck, jcheck))
    return neighbors
"
Sum item inside a tuple,"sorted_by_sum = [(name, sum(float(x) for x in items[1:6:2]), items) 
                 for name, items in l]
"
Select integers from a given range,"import itertools
for t in itertools.combinations(range(1, 20), 6):
    if all( x-y > 1 for x, y in zip(t[1:], t)):
        #do something with t
"
How to flood IP addresses to find server,"from socket import *

ip=""192.168.""
print(""Searching for IP..."")
for i in range(0,256):
    for j in range(0,256):
        host=ip+str(i)+"".""+str(j)
        add=(host,1060)
        print host
        s=socket(AF_INET,SOCK_STREAM) # create the socket in loop
        s.settimeout(4) # set the timeout value as 4 seconds
        try:
            s.connect(add)
            print(""Server Found:"",add)
        except:
            print(host,""failed"")
        s.close() # close it
        del s
"
How to keep variable and dictionary that contains it consistent?,"class Bar:
    def __init__(self, foo_):
        self.foo_dict = {}  
        self.foo = foo_

    @property
    def foo(self):
        return self.foo_dict[""foo_key""]

    @foo.setter
    def foo(self, value):
        self.foo_dict[""foo_key""] = value

    def show(self):
        print(""foo={} ; foo_dict['foo_key']={}"".format(
                        self.foo, self.foo_dict[""foo_key""]))

b = Bar(1)
b.show()
b.foo = 2
b.show()
b.foo_dict[""foo_key""] = 3
b.show()
"
which random am i looking for to achieve this:,">>> import random
>>> [random.choice(['[', ']', '[]']) for _ in range(random.randint(1, 10))]
[']', '[]']
>>> [random.choice(['[', ']', '[]']) for _ in range(random.randint(1, 10))]
['[', '[]', ']', '[]', '[]', '[]', '[]']
"
Python search folder and make a Dictionary,"import os

os.chdir('/home/Desktop/songs')
letter = {d : [child 
                  for child in os.listdir('./' + d) 
                  if os.path.isdir('./' + d)
              ] 
              for d in os.listdir('.') 
              if os.path.isdir(d)
         }
print letter
"
Matrix direct product retaining indices in python,">>> c2 = a[...,np.newaxis, np.newaxis]*b
>>> np.any(c2-c)
False  # indicates that both approaches result in the same ndarray
"
How do I find out if a combination of numbers are in another combination of numbers?,"for short_tuple in mylist:
    short_tuple_set = set(short_tuple)

    for combo in itertools.combinations((range(1, 50)), 5):
        if short_tuple_set.issubset(combo):
            # matched!
"
How to know all the derived classes of a parent?,">>> def f(x):
...  class C(A):
...   def hello(self):
...    print ""Hello C""
...  c = C()
...  c.hello()
...  print x
...  for cls in A.__subclasses__():
...   print cls.__name__
...
>>> f(4)
Hello C
4
B
C
"
"Write Python dictionary to CSV where where keys= columns, values = rows","list_of_dicts = [{'hello': 'goodbye'}, {'yes': 'no'}]
out_path= ""/docs/outfile.txt""
out_file = open(out_path, 'wb')

fieldnames = sorted(list(set(k for d in list_of_dicts for k in d)))
writer = csv.DictWriter(out_file, fieldnames=fieldnames, dialect='excel')

writer.writeheader() # Assumes Python >= 2.7
for row in list_of_dicts:
    writer.writerow(row)
out_file.close()
"
Parsing a ddl in Python with regex using re,"import sqlparse, re

def main():
    with open ('/path/to/file.txt') as ddl_file:
        sql = ddl_file.read()
        ddls = sqlparse.split(sql)
        tmp_tables_regex = re.compile(""^CREATE TABLE.*_TMP.*\("")
        for ddl in ddls:
            tmp_table_match = tmp_tables_regex.match(ddl)
            if tmp_table_match:
                print ""The following DDL is a TMP table:""
                print sqlparse.format(ddl, reindent=True, keyword_case='upper')

if __name__ == ""__main__"":
    main()
"
What is the preferred way to compose a set from multiple lists in Python,"myset = set(A)
myset.update(B)
myset.update(C)
"
Pandas: Extracting just the Calendar Year from Datetime column,"df[""year""] = df[""schedule""].apply (lambda x : x.year if x.month < 9 else x.year + 1)
"
Efficiently combining values of two lists in Python,"d = dict(list_2)
print [[d.get(item, None) for item in setItem] for setItem in list_1]
"
Function name is not reusable (python),"def fconstruct():
    flist = []
    for x in range(5):
        def get_kol(y):
            def kol():
                return y
            return kol
        flist.append(get_kol(x))

    return flist
"
fcntl file lock example not working,"# script1.py
import pandas as pd
import numpy as np
import time
import fcntl

df = pd.DataFrame.from_dict({""script_id"": [0], ""val1"": [0], ""val2"": [0]})
df.to_pickle(""data.pkl"")

for i in range(500):
    with open(""lock.lck"", ""r"") as f_lock:
        fcntl.flock(f_lock, fcntl.LOCK_EX)
        time.sleep(np.random.uniform(0, 0.05))

        df = pd.read_pickle(""data.pkl"")
        df.loc[i, :] = np.concatenate([np.array([1]), np.random.sample(2)])
        df.to_pickle(""data.pkl"")
"
Fastest way to search if a coordinate is inside a cube,"class Rectangle(object):
    def __init__(self, xrange, yrange, zrange):
        self.xrange = xrange  # (xmin, xmax)
        self.yrange = yrange
        self.zrange = zrange

    def contains_point(self, p):
        if not all(hasattr(p, loc) for loc in 'xyz'):
            raise TypeError(""Can only check if 3D points are in the rect"")
        return all([self.xrange[0] <= p.x <= self.xrange[1],
                    self.yrange[0] <= p.y <= self.yrange[1]
                    self.zrange[0] <= p.z <= self.zrange[1]])

    # BONUS!
    @classmethod
    def from_points(cls, firstcorner, secondcorner):
        """"""Builds a rectangle from the bounding points

        Rectangle.from_points(Point(0, 10, -10),
                              Point(10, 20, 0)) == \
                Rectangle((0, 10), (10, 20), (-10, 0))

        This also works with sets of tuples, e.g.:
        corners = [(0, 10, -10), (10, 20, 0)]
        Rectangle.from_points(*corners) == \
                Rectangle((0, 10), (10, 20), (-10, 0))
        """"""
        return cls(*zip(firstcorner, secondcorner))

class Point(object):
    def __init__(self, x, y z):
        self.x = x
        self.y = y
        self.z = z

    def __iter__(self): 
        yield from (self.x, self.y, self.z)

rect = Rectangle((0, 10), (10, 20), (-10, 0))
# firstpoint, secondpoint in this analogy would be:
# # (0, 10, -10), (10, 20, 0)
inside_point = Point(3, 15, -8)
outside_point = Point(11, 15, -8)

rect.contains_point(inside_point)  # True
rect.contains_point(outside_point)  # False
"
Finding the sum of matching components in two lists,"AB = [A[i] + B[i] for i in range(len(A))]
"
Which Python module is suitable for data manipulation in a list?,">>> import numpy
>>> data = numpy.array([(2, 4, 8), (3, 6, 5), (7, 5, 2)])
>>> data
array([[2, 4, 8],
       [3, 6, 5],
       [7, 5, 2]])

>>> data.sum()  # product of all elements
42
>>> data.sum(axis=1)   # sum of elements in rows
array([14, 14, 14])
>>> data.sum(axis=0)   # sum of elements in columns
array([12, 15, 15])
>>> numpy.product(data, axis=1)   # product of elements in rows
array([64, 90, 70])
>>> numpy.product(data, axis=0)   # product of elements in columns
array([ 42, 120,  80])
>>> numpy.product(data)      # product of all elements
403200
"
Concatenate list items,">>> a = [['mange'], ['ton', 'ont'], ['orange','onagre','organe','rongea']]
>>> from itertools import product
>>> [' '.join(x) for x in product(*a)]
['mange ton orange',
 'mange ton onagre',
 'mange ton organe',
 'mange ton rongea',
 'mange ont orange',
 'mange ont onagre',
 'mange ont organe',
 'mange ont rongea']
"
String reversal in Python,"s = ""hello, world""
s = s[::-1]
print s  # prints ""dlrow ,olleh""
"
identifying if the character is a digit or Unicode character within a word in python,">>> import re
>>> pattern = ur'(.*?)(\d+)(.*)'
>>> s = u""ரூ.100""
>>> match = re.match(pattern, s, re.UNICODE)
>>> print match.group(1)
ரூ.
>>> print match.group(2)
100
"
How to get the length of a cell value in pandas dataframe?,"df['EventCount'] = df['Event'].str.split(""/"").str.len()
"
Find indices of elements equal to zero from numpy array,numpy.where((x == 0))[0]
Formatting datetime objects stored in a defaultdict(list)," '%s %s' % (key,"" "".join([str(x) for x in value]))
"
Immutable types allowing subclassing in Python,"class Foo(object):
    __metaclass__ = ImmutableMeta
    _attributes_ = 'a b'

    def sayhi(self):
        print ""Hello from {0}"".format(type(self).__name__)

class Bar(Foo):
    _attributes_ = 'c'

    def saybye(self):
        print ""Goodbye from {0}"".format(type(self).__name__)
"
Python: Finding Unique Subsequences of Unique Strings,"def combinations(iterable, r):
    # combinations('ABCD', 2) --> AB AC AD BC BD CD
    # combinations(range(4), 3) --> 012 013 023 123
    pool = tuple(iterable)
    n = len(pool)
    if r > n:
        return
    indices = list(range(r))
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                break
        else:
            return
        indices[i] += 1
        for j in range(i+1, r):
            indices[j] = indices[j-1] + 1
        yield tuple(pool[i] for i in indices)
"
How do you divide list into equal parts?,"In [17]: result = []

In [18]: for i in xrange(0, len(l), 3):
   ....:     result.append(l[i:i+3])
   ....:     
   ....:     

In [19]: result
Out[19]: [[1, 2, 3], [4, 5, 6], [7, 8]]
"
backport function modifiers to python2.1,"class staticmethod:
    def __init__(self, thefunc): self.f = thefunc
    def __call__(self, *a, **k): return self.f(*a, **k)
"
Color a heatmap in Python/Matplotlib according to requirement,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

Index= ['aaa', 'bbb', 'ccc', 'ddd', 'eee']
Cols = ['A', 'B', 'C', 'D']
data= np.random.random((5, 4))
df = pd.DataFrame(data, index=Index, columns=Cols)

plt.pcolor(df > 0.5, cmap='RdYlGn')
plt.yticks(np.arange(0.5, len(df.index), 1), df.index)
plt.xticks(np.arange(0.5, len(df.columns), 1), df.columns)
plt.show()
"
Python: Group List by Set of Keys,"from collections import defaultdict

input_1 = [('v1',['f1','f2','f3']),
           ('v2',['f1','f2','f4']),
           ('v3',['f1','f2','f4'])]
input_2 = [('v1',['f1']),
           ('v2',['f2','f3']),
           ('v3',['f4'])]
input_3 = [('v1',['f1','f2']),
           ('v2',['f1','f2']),
           ('v3',['f3']),
           ('v4',['f1','f2'])]

def group(inp):
    out = defaultdict(list)
    for group in inp:
        key = group[0]
        for entry in group[1]:
            out[entry].append(key)
    return dict(out)
"
How does one talk about comparing positions of characters in a string?,"for i in range(1, len(abcstring)):
    c = abcstring[i]
    previous = abcstring[i-1]
    if values(c) < values(previous):
        do_something()
"
Thresholded pixel indices of a NumPy array,"np.argwhere(image[:,:,0] > threshold)
"
How to find first non-uppercase letter in the string using python,">>> import string
>>> dna.lstrip(string.uppercase)
'atcgatcg... JFENVKDFDFLK'
"
I have a list with item in lists and I want to give them a name for each list python,"for i,l in enumerate(lists):
    locals()['v'+str(i)] = l


print(v0, v1, v2)
#[1.0, 2.0] [3.0, 4.0, 1.0, 2.0] [4, 5, 6]
"
matplotlib - 3D plots - combining scatter plot with surface plot,"from mpl_toolkits.mplot3d import *
import matplotlib.pyplot as plt
import numpy as np
from random import random, seed
from matplotlib import cm


fig = plt.figure()
ax = fig.gca(projection='3d')               # to work in 3d
plt.hold(True)

x_surf=np.arange(0, 1, 0.01)                # generate a mesh
y_surf=np.arange(0, 1, 0.01)
x_surf, y_surf = np.meshgrid(x_surf, y_surf)
z_surf = np.sqrt(x_surf+y_surf)             # ex. function, which depends on x and y
ax.plot_surface(x_surf, y_surf, z_surf, cmap=cm.hot);    # plot a 3d surface plot

n = 100
seed(0)                                     # seed let us to have a reproducible set of random numbers
x=[random() for i in range(n)]              # generate n random points
y=[random() for i in range(n)]
z=[random() for i in range(n)]
ax.scatter(x, y, z);                        # plot a 3d scatter plot

ax.set_xlabel('x label')
ax.set_ylabel('y label')
ax.set_zlabel('z label')

plt.show()
"
How to use for loop to print cards?,"import itertools as it

rank_string = (""ace"",""two"",""three"",""four"",""five"",""six"",""seven"",""eight"",""nine"",""ten"",""jack"",""queen"",""king"")
suit_string = (""clubs"",""diamonds"",""hearts"",""spades"")

print 'The cards are:'
for i, card in enumerate(it.product(rank_string, suit_string)):
    print i, '{0[1]} of {0[0]}'.format(card)
"
Convert list of list into one big list pyhton,"new_list = []
for k in list1:
  new_list.append(list2[k]) #lookup the value in list2 at the index given by list1
"
Is it possible to decorate classes in Python?,"#!/usr/bin/env python3

def decorate(cls):
    print(cls)
    return cls

@decorate
class Foo: pass
"
match/search dict keys in elements of a list,">>> dct = {'slab1': {'name':'myn1', 'age':20}, 'slab2':{'name':'myn2','age':200}}
>>> lst = {'/store/dir1/dir_slab1/tindy', '/store/dir2/dirslab2_fine/tunka','/store/dir1/dirslab3/lunku'}
>>> for item in lst:
...    for pattern in dct:
...       if pattern in item:
...           print ""%s, %s"" % (item, dct[pattern][""age""])
... 
/store/dir1/dir_slab1/tindy, 20
/store/dir2/dirslab2_fine/tunka, 200
"
How can I efficently pad an RGB numpy array with the median of the image?,"import numpy as np

a = np.asarray([[1,2,3,4,5,6],
     [8,4,5,6,7,7],
     [1,2,3,4,5,6],
     [1,2,3,4,5,6],
     [1,2,3,4,5,6],
     [1,2,3,4,5,6]])

b = a * 3
c = a * 4
d = (a,b,c)

im = np.asarray([np.pad(x, (2,), 'constant', constant_values=(np.median(x) ,)) for x in d])
print im
"
How to extract all chains from a PDB file?,"from Bio.PDB import PDBParser, PDBIO

io = PDBIO()
pdb = PDBParser().get_structure(""6CHY"", ""6CHY.pdb"")

for chain in pdb.get_chains():
    io.set_structure(chain)
    io.save(pdb.get_id() + ""_"" + chain.get_id() + "".pdb"")
"
Easier way of getting keyboard input in Pygame?,"if event.key in (pygame.K_a, pygame.K_b, pygame.K_c):
    f(event.key)
"
Calling an external command,"print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())"
tkinter canvas image not displaying,"
def start(root):
    startframe = tkinter.Frame(root)
    canvas = tkinter.Canvas(startframe,width=1280,height=720)

    startframe.pack()
    canvas.pack()

    # Escape / raw string literal
    one = tkinter.PhotoImage(file=r'images\one.gif')
    root.one = one  # to prevent the image garbage collected.
    canvas.create_image((0,0), image=one, anchor='nw')
"
Regex - Python: Capture three (3) words after a specific word,">>> print re.compile(r'at\s+((?:\w+(?:\s+|$)){3})').findall(str1)
['the train station ']
"
How can I write output from a for loop in python into a csv-formatted file?,"import csv
import os

receptors = ['crystal_1', 'modeller_1', 'moe_1',
             'nci5_modeller0000_1', 'nci5_modeller0001_1',
             'nci5_modeller0002_1', 'nci5_modeller0003_1',
             'nci5_modeller0004_1', 'nci5_modeller0005_1',
             'nci5_modeller0006_1', 'nci5_modeller0007_1',
             'nci5_modeller0008_1', 'nci5_modeller0009_1',
             'nci5_modeller0010_1', 'nci5_modeller0011_1',
             'nci5_moe0000_1', 'nci5_moe0001_1', 'nci5_moe0002_1',
             'nci5_moe0003_1', 'nci5_moe0004_1', 'nci5_moe0005_1',
             'nci5_moe0006_1', 'nci5_moe0007_1', 'nci5_moe0008_1',
             'nci5_moe0009_1', 'nci5_moe0010_1', 'nci5_moe0011_1',
             'nci5_moe0012_1', 'nci5_moe0013_1', 'nci5_moe0014_1']

# initialize list of lists holding each ligand and its presence in each receptor
with open('potentiation.txt') as experiment:
    ligands = [[ligand] for ligand in (line.rstrip() for line in experiment)]

for protein in receptors:
    with open(protein + '.txt') as protein_file:
        protein_file_data = protein_file.read()
        for row in ligands:
            # determine if this ligand (row[0]) appears in protein data
            row.append('Found' if row[0] in protein_file_data else 'Not Found')

with open('output.csv', 'wb') as outfile:
    csv_writer = csv.writer(outfile, delimiter='\t')
    csv_writer.writerow(['Ligand'] + receptors)  # header row
    csv_writer.writerows(ligands)

print('output.csv file written')
"
Rearranging a (list of lists) matrix using list comprehensions only,">>> matrix = [[1, 2, 3, 4],[5, 6, 7, 8],[9, 10, 11, 12]]
>>> it = (y for x in matrix for y in x)
>>> list(zip(*[it]*3))
[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]
"
Parsing a CS:GO language file with encoding in Python,"key_qs = QuotedString('""').setName(""key_qs"")
value_qs = QuotedString('""', escChar='\\', multiline=True).setName(""value_qs"")
"
Calling class method as part of initialization,">>> '__subclasses__' in dir(object)
False
>>> '__subclasses__' in dir(type)
True
"
Select rows from a DataFrame based on values in a column in pandas,df.loc[df['column_name'] == some_value]
Pandas: De-seasonalizing time-series data,"date_times = pd.date_range(datetime.datetime(2011, 4, 1, 9, 30),
                           datetime.datetime(2011, 4, 16, 0, 0),
                           freq='10s')
VOL = np.random.sample(date_times.size) * 10000.0

df = pd.DataFrame(data={'VOL': VOL,'time':date_times}, index=date_times)
df['h'] = df.index.hour
df['m'] = df.index.minute
df1 = df.resample('5Min', how={'VOL': np.mean})
times = pd.to_datetime(df1.index)
df2 = df1.groupby([times.hour,times.minute]).VOL.mean().reset_index()
df2.columns = ['h','m','VOL']
df.merge(df2,on=['h','m'])
df_norm = df.merge(df2,on=['h','m'])
df_norm['norm'] = df_norm['VOL_x']/df_norm['VOL_y']
"
How can i search a array from a large array by numpy,"In [23]: A
Out[23]: 
array([['03', '04', '18', '22', '25', '29', '30'],
       ['02', '04', '07', '09', '14', '29', '30'],
       ['06', '08', '11', '13', '17', '19', '30'],
       ['04', '08', '22', '23', '27', '29', '30'],
       ['03', '05', '15', '22', '24', '25', '30']], 
      dtype='|S2')

In [24]: B
Out[24]: 
array(['04', '22'], 
      dtype='|S2')

In [25]: A[np.in1d(A,B).reshape(A.shape).sum(1) == len(B)]
Out[25]: 
array([['03', '04', '18', '22', '25', '29', '30'],
       ['04', '08', '22', '23', '27', '29', '30']], 
      dtype='|S2')
"
python - divide world into bins,"    print '... or get only ones in a specific region'
    subset =  [b for b in ball_collection if b[0][0] == 1]

    for b in subset:
        print 'ball region: {r}   with coords: {c}'.format(r=b[0], c=b[1])


main()
"
Numpy savetxt heterogenous data,"import numpy as np
a = np.random.randint(0, 100, 10)
b = np.random.rand(10, 3)

v = np.hstack((a[:,None],b))

import io

t = io.BytesIO()

np.savetxt(t, v, fmt=""%g"", delimiter="","")
print t.getvalue()
"
getting every possible combination in a list,"L1=['cat', 'dog', 'fish', 'rabbit', 'horse', 'bird', 'frog', 'mouse']
tuples = [(x,y) for x in L1 for y in L1 if x != y]
for entry in tuples:
    if (entry[1], entry[0]) in tuples:
        tuples.remove((entry[1],entry[0]))
for pair in tuples:
    input1= open('file_%s'%(pair[0]), 'r')
    file1= pickle.load(input1)
    input2= open('file_%s'%(pair[1]), 'r')
    file2= pickle.load(input2)
"
Running infinite loops using threads in python,"from threading import Thread

class myClassA(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.daemon = True
        self.start()
    def run(self):
        while True:
            print 'A'

class myClassB(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.daemon = True
        self.start()
    def run(self):
        while True:
            print 'B'


myClassA()
myClassB()
while True:
    pass
"
Add different object states to a list,"class my_op_class(object):
    def __init__(self):
        self.data = 1

lst = list()

my_op = my_op_class()
my_op.param = 2
lst.append(my_op)

my_op = my_op_class()
my_op.param = 3
lst.append(my_op)

for l in lst:
    print l.data, l.param 
"
"What are the differences amongst Python's ""__get*__"" and ""_del*__"" methods?","class Foo:
    def __init__(self):
        self.x = 10
    def __getattr__(self, name):
        return name

f = Foo()
f.x    # -> 10
f.bar   # -> 'bar'
"
Call method in a class which called the current class,"class Test1(object):
    def __init__(self):
        pass
    def a(self):
        print(""Running a of Test1"")
        test_instance2 = Test2(self)
    def z(self):
        print(""Running z of Test1"")

class Test2:
    def __init__(self, a):
        self.b(a)
    def b(self, a):
        print('Running b of Test2')
        a.z()
"
How to test that a view is only accessed by staff users in Django,"def staff_users_only(function):
  def wrap(request, *args, **kwargs):

        profile = request.session['user_profile']
        if profile is True: #then its a staff member
             return function(request, *args, **kwargs)
        else:
            return HttpResponseRedirect('/')

  wrap.__doc__=function.__doc__
  wrap.__name__=function.__name__
  return wrap
"
Accessing argument values for argparse in Python,">>> args = parser.parse_args()
"
Create open bounds indicators from pandas get_dummies on discretized numerical,"df['ageD'], bins = pd.qcut(df.iloc[:, 0], 2, retbins=True)
left = (df[""age""].values <= bins[:,None]).T.astype(int)
dl = pd.DataFrame(left, columns=[""(-inf, {}]"".format(b) for b in bins])
dr = pd.DataFrame(1-left, columns=[""({}, +inf)"".format(b) for b in bins])
dout = pd.concat([pd.get_dummies(df), dl, dr], axis=1)
"
Why is direct indexing of an array significantly faster than iteration?,"for i in nums:
    print(i)
"
pandas datetimeindex between_time function(how to get a not_between_time),"import pandas as pd
import io
text = '''\
date,time, val
20120105, 080000,   1
20120105, 080030,   2
20120105, 080100,   3
20120105, 080130,   4
20120105, 080200,   5
20120105, 235959.01, 6
'''

df = pd.read_csv(io.BytesIO(text), parse_dates=[[0, 1]], index_col=0)
index = df.index
ivals = index.indexer_between_time('8:01:30','8:02')
print(df.reindex(index.diff(index[ivals])))
"
How do I remove common elements from two lists?,">>> [filter(lambda e: e not in punctuation, sub) for sub in a]
[['A', 'man,', 'view,', 'becomes', 'mankind', 'mankind', 'member', 'comical', 'family', 'Intelligences'], ['Jeans', 'lengthen', 'legs', 'hug', 'hips', 'turn', 'heads']]
"
Multi-Axis Graph with Line on top. Matplotlib,"
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd
np.random.seed(2015)

N = 16
df = pd.DataFrame({'Opportunities': np.random.randint(0, 30, size=N),
                   'Percentage': np.random.randint(0, 100, size=N)},
                  index=pd.date_range('2015-3-15', periods=N, freq='B').date)
fig, ax = plt.subplots()

df[['Opportunities']].plot(kind='bar', stacked=False, title='get_title', 
                           color='grey', ax=ax, grid=False)
ax2 = ax.twinx()
ax2.plot(ax.get_xticks(), df[['Percentage']].values, linestyle='-', marker='o', 
        color='k', linewidth=1.0, label='percentage')

lines, labels = ax.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()
ax.legend(lines + lines2, labels + labels2, loc='best')
ax.yaxis.set_ticks_position(""right"")
ax2.yaxis.set_ticks_position(""left"")

fig.autofmt_xdate()
plt.show()
"
Converting a MongoDB Query String with Datetime field into Dict in Python,"import json
s = "" query : {'names' :['abc','xyz'],'location':'India'}""
key, value = s.strip().split(':', 1)
r = value.replace(""'"", '""')
data = {
    key: json.loads(r)
}
"
Clean canvas in kivy language,"from kivy.app import App
from kivy.uix.widget import Widget
from kivy.lang import Builder

kv_string = '''
<MyWidget>:
    canvas:
        Color:
            rgb: 0.1, 0.6, 0.3
        Ellipse:
            size: self.size     
            pos: self.pos
        Clear
        Color:
            rgb: 0.6, 0.2, 0.1
        Ellipse:
            size: self.size     
            pos: self.center
'''

Builder.load_string(kv_string)

class MyWidget(Widget):
    pass

class TestApp(App):
    def build(self):
        return MyWidget()

if __name__ == '__main__':
    TestApp().run()
"
Pretty-printing of numpy.array,"import numpy as np
import contextlib

@contextlib.contextmanager
def printoptions(*args, **kwargs):
    original = np.get_printoptions()
    np.set_printoptions(*args, **kwargs)
    yield 
    np.set_printoptions(**original)
"
PYTHON in MAYA: get all attributes,"for attr in cmds.listAttr( ""myCube"", r=True ):
    try:
        print attr, "" "", cmds.getAttr(""myCube.""+attr)
    except:
        print ""Error reading data""
"
How to set the origin of a volumetric spot knowing its coordinates origin?,"import numpy as np

def make_spot_origin_3d(x0,y0,z0):
    d = np.linspace(-50, 50, 200)
    r = np.zeros(d.shape*3)

    ix = np.searchsorted(d, (x0, y0, z0))
    r[tuple(ix)] = 1

    return r

r = make_spot_origin_3d(45.7, -7.1, 2.9)
"
Python - Reading text file into dict,"d = {}
with open(""sometext.txt"", ""r"") as f:
    for line in f:
        if line.startswith('List of purchases'):
            purchases = d['List of purchases'] = []
            for line in f:
                info = line.strip('() \n').split(', ')
                purchases.append(info)
            break
        key, val = line.split(': ')
        d[key] = val.rstrip('\n')
"
Getting a list of strings with character removed in permutation,"In [32]: timeit.timeit('x = f(""aAabbAA"", ""A"", 0)', 
                       'from test3 import f', number=10000) 
Out[32]: 0.11674594879150391

In [33]: timeit.timeit('x = deperm(""aAabbAA"", ""A"")', 
                       'from test4 import deperm', number=10000) 
Out[33]: 0.35839986801147461

In [34]: timeit.timeit('x = f(""aAabbAA""*6, ""A"", 0)', 
                       'from test3 import f', number=1) 
Out[34]: 0.45998811721801758

In [35]: timeit.timeit('x = deperm(""aAabbAA""*6, ""A"")', 
                       'from test4 import deperm', number=1) 
Out[35]: 7.8437530994415283
"
How to recognize which mathematical function generated a curve given by X and Y arrays in sympy,"result = sympy.polys.polyfuncs.interpolate(data,x)
coefficients = sympy.Poly(result).coeffs()
print(coefficients)
"
"List of tuples, first tuple as key, grouping by key into into a dictionary","from collections import defaultdict

ri = [('123', 'abc', 'def'),('123', 'efg', 'hij'),('456', 'klm','nop')]
response_items = defaultdict(list)
for r in ri:
    response_items[r[0]].append(r[1:])
print response_items
"
any() function in Python with a callback,">>> all(isinstance(e, int) and e > 0 for e in [1,2,'joe'])
False
"
Dynamic border around text in python,"def chunkstring(string, length):
    return (string[0+i:length+i] for i in range(0, len(string), length))

sentence = input('Sentence: ')
width = int(input('Width: '))

print('+-' + '-' * width + '-+')

for line in chunkstring(sentence, width):
    print('| {0:^{1}} |'.format(line, width))

print('+-' + '-'*(width) + '-+')
"
Why does this Python boolean comparison return a triple?,"(""902"".isdigit(), (""2"".isdigit() == True), True)
"
Python join two nested lists,">>> from pprint import pprint
>>> listA = [[""SomeString1"", ""A"", ""1""],
...          [""SomeString2"", ""A"", ""2""],
...          [""SomeString3"", ""B"", ""1""],
...          [""SomeString4"", ""B"", ""2""]]
>>> listB = [[""OtherString1"", ""A"", ""1""],
...          [""OtherString2"", ""A"", ""2""],
...          [""OtherString3"", ""B"", ""1""],
...          [""OtherString4"", ""B"", ""2""]]
>>> listBstrings = {tuple(lst[1:]): lst[0] for lst in listB}
>>> joined = [[lst[0], listBstrings[lst[1], lst[2]]] + lst[1:] for lst in listA]
>>> pprint(joined)
[['SomeString1', 'OtherString1', 'A', '1'],
 ['SomeString2', 'OtherString2', 'A', '2'],
 ['SomeString3', 'OtherString3', 'B', '1'],
 ['SomeString4', 'OtherString4', 'B', '2']]
"
Python parsedatetime: get current month / first of the month,">>> datetime.datetime.now().replace(day=1, hour=0, minute=0, second=0).timetuple()
"
Using Pandas Joins to count records that meet conditions,"In [79]:
['May' in i for i in merged_pds[merged_pds['Project Type']=='Type 1']['Project Type'].tolist()]

Out[79]:
[False, False]
"
getting all the tiles with the maximum value in a 2d grid (a multidimensional list),">>> from itertools import chain
##find the max value on a flattened version of the list 
>>> max_val = max(chain.from_iterable(lst)) 
>>> lst = [[1,2,3], [1,3,3], [1,1,1]]
>>> [(i, j) for i, x in enumerate(lst) for j, y in enumerate(x) if y == max_val]
[(0, 2), (1, 1), (1, 2)]
"
Pivoted pandas dataframe to dictionary,"from itertools import izip

mylist = [(col,key)  
          for col,records in izip( d_flat.col2, d_dict) 
          for key,val in records.iteritems() 
          if not pandas.np.isnan(val)]
#[('col2_0', '2000'),
# ('col2_0', '3000'),
# ('col2_0', '2000'),
# ('col2_0', '3000'),
# ('col2_1', '2000'),
# ('col2_0', '2000'),
# ('col2_0', '3000'),
# ('col2_1', '2000'),
# ('col2_0', '3000'),
# ('col2_1', '2000')]
"
How to copy a class variable - Python,"def __init__(self, *args, **kwargs):
  super(TreasureHuntGrid, self).__init__(*args, **kwargs)
  status = ListProperty(Finish.board) #Return a random lists of lists with 1 and -1 
  calculations = status 
"
Apply round off setting to whole notebook,"In [5]: %precision 2
Out[5]: u'%.2f'

In [6]: np.random.randn(5)
Out[6]: array([-1.06,  0.33, -1.8 ,  0.74, -0.73])
"
How to replace a span with its children and do a regex over the inner text in BeautifulSoup,"for x in doc.findAll('span'):
    s = x[""attrib""]
    t = x.find('font')
    t.string = t.text.strip() + '_' + s
    x.replaceWithChildren()
"
Variable alpha blending in pylab,"def mycmap(x):
    tmp = cm.hsv(x)
    for i in xrange(tmp.shape[0]):
        for j in xrange(tmp.shape[0]):
            tmp[i,j][3] = somefunction of x[i,j] that generates the transparency
    return tmp

imshow(mycmap(Z1), extent=extent)
imshow(mycmap(Z2), extent=extent)
"
How do I count words in an nltk plaintextcorpus faster?,"files = list_of_files
fd = {}
for file in files:
    with open(file) as f:
        for sent in nltk.sent_tokenize(f.lower()):
            for word in nltk.word_tokenize(sent):
                try:
                    fd[word] = fd[word]+1
                except KeyError:
                    fd[word] = 1
"
Python datetime add,"from datetime import datetime, timedelta
s = '2013-08-11 09:48:49'
mytime = datetime.strptime(s, ""%Y-%m-%d %H:%M:%S"")
mytime += timedelta(hours=6)
print mytime.strftime(""%Y.%m.%d %H:%M:%S"")
"
What's difference between findall() and iterfind() of xml.etree.ElementTree,">>> root = ET.fromstring(""<a><b>c</b></a>"")
>>> root.findall(""./b"")
[<Element 'b' at 0x02048C90>]
>>> lst = root.findall(""./b"")
>>> lst[0]
<Element 'b' at 0x02048C90>
"
Return a values into a list,"def fun(n):
    return [i**1 for i in range(n+1)]
"
"Numpy Lookup (Map, or Point)","A = array([[32, 32, 99,  9, 45],  # A
   [99, 45,  9, 45, 32],
   [45, 45, 99, 99, 32],
   [ 9,  9, 32, 45, 99]])

B = array([ 99, 32, 45, 9])

ii = np.argsort(B)
C = np.digitize(A.reshape(-1,),np.sort(B)) - 1
"
sort a dictionary by key,od = collections.OrderedDict(sorted(d.items()))
Python String Prefix by 4 Byte Length,"import struct
msg = 'some message'
length = len(msg)
encoded_length = struct.pack('>I', length)
"
how to clean or convert unknown characters in an otherwise integer field in python?,"val = ''.join(c for c in val if c.isdigit() or c in ',.')
"
"Batch (basename) file/folder renaming using an ""index""","awk 'NR>1{sub(/[^_]+$/,"""",$1); print $1"" ""$4""_""$5""_""$3}' samples.txt |
while read -r old new; do
   echo mv ""$old"" ""$new""
   echo mv ""${new}/accepted_hits.bam"" ""${new}/${new}.bam""
done
"
Pandas assign each row the mean of its bin,"import pandas
df = pandas.DataFrame(np.random.random(100)*100, columns=['val1'])

pctiles = pandas.qcut(df['val1'],4,retbins=True)
pctile_object = pctiles[0]
pctile_boundaries = pctiles[1]
"
Python program to extract text from a text file?,"I
m
"
BeautifulSoup order of occurrence of Tags,">>> tag1 = soup.find(id='link1')
>>> tag2 = soup.find(id='link2')
>>> tag1, tag2
(<a class=""sister"" href=""http://example.com/elsie"" id=""link1"">Elsie</a>, <a class=""sister"" href=""http://example.com/lacie"" id=""link2"">Lacie</a>)
>>> all_tags = soup.find_all(True)
>>> all_tags.index(tag1)
6
>>> all_tags.index(tag2)
7
"
Speeding Up a Python While Loop,"def unique_combos(digits, total, smallest=0):
    if digits*9 < total or digits*smallest > total:
        return
    if digits==1:
        yield [total]
        return

    for i in range(smallest, 10):
        for combo in unique_combos(digits-1, total-i, i):
            yield [i]+combo
"
Obtaining tags from AWS instances with boto,"import boto.ec2
conn=boto.ec2.connect_to_region(""eu-west-1"")
reservations = conn.get_all_instances()
for res in reservations:
    for inst in res.instances:
        if 'Name' in inst.tags:
            print ""%s (%s) [%s]"" % (inst.tags['Name'], inst.id, inst.state)
        else:
            print ""%s [%s]"" % (inst.id, inst.state)
"
Why is numpy vectorized function apparently called an extra time?,"import numpy as np
idxLsts = np.array([[1, 2], [0,2,4]], dtype = object)
idx = 99
f = np.vectorize(lambda x: x.append(idx))
f(idxLsts)
print(idxLsts)
"
Having two Generic ListViews on the same page,"class IndexView(generic.ListView):
  template_name = 'expcore/index.html'
  model = Activity
  context_object_name = 'activities_list'
  queryset = Activity.objects.all()

  def get_context_data(self, **kwargs):
    context = super(IndexView, self).get_context_data(**kwargs)
    context['interviews_list'] = Interview.objects.all()
    return context
"
"Python 3 List: How do I sort [('NJ', 81), ('CA', 81), ('DC', 52)] base on number and then letters?",">>> your_list = [('IL', 36), ('NJ', 81), ('CA', 81), ('DC', 52), ('TX', 39)]
>>> your_list.sort(key=lambda e: (-e[1], e[0]))
>>> your_list
[('CA', 81), ('NJ', 81), ('DC', 52), ('TX', 39), ('IL', 36)]
"
Django - how to tell if a template fragment is already cached?,"def index(request)
   class get_data(object):
       data = False
       def __call__(self):
           if not self.data:
               self.data = api.getSomeExpensiveData()
           return self.data
   return render_to_response('template.html', {'get_data':get_data()} )
"
How to get the index with the key in Python dictionary?,">>> x = OrderedDict(((""a"", ""1""), (""c"", '3'), (""b"", ""2"")))
>>> x[""d""] = 4
>>> x.keys().index(""d"")
3
>>> x.keys().index(""c"")
1
"
Append list items by number of hyphens available,"for k, v in res.items():
    print(str(k) + "": "" + str(v))
"
pulling min and max values from list of list,"dictionary = {}
for list in list_of_lists:
    dictionary[list[0]] = list[1:]
"
Python fastest search in a list of tuple/list that returns the index,"In [47]: try:
    ...:     ind = lst.index(n)
    ...:     print 'Item found at {}'.format(ind)
    ...: except IndexError:
    ...:     pass
    ...: 
Item found at 34
"
How to remove parenthesis from elements in a list (Python)," sub[:] = map(float,(s.translate(None, ""()#"") for s in sub))
"
List of Elements to Boolean Array,"res = [ True if item in animal_list else False for item in your_list ]
"
unpacking class variables as a list,">>> memory = [1, 2, 3, 4, None, None, None, None]
>>> index = memory.index(None)
>>> memory[index:index + 4] = 'foo', 'bar', 'spam', 'eggs'
>>> memory
[1, 2, 3, 4, 'foo', 'bar', 'spam', 'eggs']
"
Choose largest odd number python,"number = int(raw_input('enter a number: '))
"
Draw different sized circles on a map,"longitudes, latitudes = [], []
for row_index, row in df.iterrows():
    x, y = db.getLocation(row_index)
    lat, lon = m(y, x)
    longitudes.append(lon)
    latitudes.append(lat)
    plt.annotate(
        str(row_index), 
        xy = (x, y), xytext = (-20, 20),
        textcoords = 'offset points', ha = 'right', va = 'bottom',
        bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),
        arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3,rad=0'))

df['lon'] = longitudes
df['lat'] = latitudes
cmap = plt.get_cmap('gist_rainbow_r')
ax = plt.gca()
df.plot(kind='scatter', x='lon', y='lat', s=df['Total']*50, c=df['Total'], 
        cmap=cmap, ax=ax)
"
Python tkinter find_overlapping tuple?,"from tkinter import *

def overlaps((x1, y1, x2, y2)):
    '''returns overlapping object ids in ovals dict'''
    oval_list = [] # make a list to hold overlap objects
    c_object = table.find_overlapping(x1, y1, x2, y2)
    for k,v in ovals.items():  # iterate over ovals dict
        if v in c_object:      # if the value of a key is in the overlap tuple
            oval_list.append(k)# add the key to the list
    return oval_list

a = Tk()

# make a dictionary to hold object ids
ovals = {}

table = Canvas(a, width=500, height=300, bg='white')
table.pack()

# create oval_a and assign a name for it as a key and
# a reference to it as a value in the ovals dict.
# the key can be whatever you want to call it
# create the other ovals as well, adding each to the dict
# after it's made
oval_a = table.create_oval(40, 40, 80, 80)
ovals['oval_a'] = oval_a

oval_b = table.create_oval(60, 60, 120, 120)
ovals['oval_b'] = oval_b

oval_c = table.create_oval(120, 120, 140, 140)
ovals['oval_c'] = oval_c

# draw a rectangle
rectangle = table.create_rectangle(30, 30, 70, 70)

# print the return value of the overlaps function
# using the coords of the rectangle as a bounding box
print(overlaps(table.coords(rectangle)))

a.mainloop()
"
How can I append whole columns to a table (list of lists) in python?,"table = [[y for x in t for y in x or ['']] for t in transpose(tuples)]
"
Python tree storing expressions from json input file,"json_data = {
    ""declaration-list"" : [
        { ""declared-variable"": ""x0"", ""value"": 1 },
        { ""declared-variable"": ""x1"", ""value"": 2 },
        { ""declared-variable"": ""x2"",
          ""value"" : {
              ""operator"": ""set"",
              ""arguments"": [
                  { ""variable"": ""x0"" },
                  { ""variable"": ""x1"" }
              ]
          }
        },
        { ""declared-variable"" : ""x3"",
          ""value"" : {
              ""operator"" : ""set"",
              ""arguments"" : [
                  {
                      ""operator"": ""tuple"",
                      ""arguments"": [ 1, 2 ]
                  },
                  {
                      ""operator"": ""tuple"",
                      ""arguments"": [ 3, 4 ]
                  }
              ]
          }
        },
    ]
}

def parse_declaration(declinfo):
    vname = declinfo['declared-variable']
    rvalue = parse_rvalue(declinfo['value'])
    return ('let', vname, rvalue)

def _rv_parse_set(valinfo):
    assert valinfo['operator'] == 'set'
    args = [parse_rvalue(a) for a in valinfo['arguments']]
    return ('set', args)

def _rv_parse_tuple(valinfo):
    assert valinfo['operator'] == 'tuple'
    args = valinfo['arguments']
    return ('tuple', args)

_rv_parser = {
    ""set"": _rv_parse_set,
    ""tuple"":_rv_parse_tuple,
}

def parse_rvalue(valinfo):
    try:
        if 'operator' in valinfo:
            op = valinfo['operator']
            return _rv_parser[op](valinfo)
        elif 'variable' in valinfo:
            return ('variable', valinfo['variable'])

    except TypeError:
        return ('value', valinfo)

def parse_json(json_data):
    declaration_list = json_data['declaration-list']

    for i in declaration_list:
        print(parse_declaration(i))

if __name__ == ""__main__"":
    parse_json(json_data)
"
Dynamic number of loops,"import itertools 

def f(x,y): return x+y
def g(x,y): return 2*x-y

def outer_product_thing(F,M):
    keys = M.keys()
    ranges = [M[k] for k in keys]

    for rx in itertools.product(*ranges):
        mapping = dict(zip(keys, rx))
        value   = 1

        for func in F:
            terms =   F[func]
            value *=  func(mapping[terms[0]], 
                           mapping[terms[1]])

        print ""Evaluated: "", mapping
        yield value


F = {f:(""a"",""b""), 
     g:(""b"",""c"")}
M = {""a"":range(0,2),
     ""b"":range(0,3),
     ""c"":range(0,7)}

for result in outer_product_thing(F,M):
    print result
"
Delete image frame from 3d array,"import numpy as np
data = np.arange(1000).reshape((10,10,10))

# Delete the third slice along the first axis 
# (note that you can delete multiple slices at once)
data = np.delete(data, [2], axis=0)

print data.shape
"
Storing and evaluating nested string elements,"import re

def evaluatesimple(s):
  return eval(s)

def evaluate(s):
  while 1:
    simplesums=re.findall(""\[([^\]\[]*)\]"",s)
    if (len(simplesums) == 0):
      break
    replacements=[('[%s]' % item,str(evaluatesimple(item))) for item in simplesums]
    for r in replacements:
      s = s.replace(*r)
  return s

print evaluate(""[9+[7*3+[1+2]]-5]"")
"
Dictionary conversion to list in Python,"from operator import itemgetter

dates = map(itemgetter(1), E.itervalues())
"
common between all csv columns,"from itertools import izip_longest
import csv
import StringIO

data='''table1    table2    table3  table4   table5
paper     paper     pen     book     book
pen       pencil    pencil  charger  apple
apple     pen       charger beatroot sandle
beatroot  mobile    apple   pen      paper
sandle    book      paper   paper'''

f = StringIO.StringIO(data)
reader = csv.reader(f, delimiter=' ', skipinitialspace=True)
cols = map(set, izip_longest(*reader))

print set.intersection(*cols)
"
When does a passed class instance require an import in python,"# foo.py
class Foo(object):
   def method(self):
       return 'foo!'

# bar.py
class Bar(object):
    def method(self):
       return 'bar!'

# call_method.py
def go(object_with_method):
    print(object_with_method.method())

# driver.py
import call_method
import foo
import bar

call_method.go(Foo())  # call the method on a foo instance
call_method.go(Bar())  # call the method on a bar instance
"
algorithm to compare lists of numbers for similarity?,"def distance(lista, listb):
    return sum( (b - a) ** 2 for a,b in zip(lista, listb) ) ** .5
"
Suggested formatting for SQL SELECT return,"self.cursor1 = db.cursor(named_tuple=True)
# ...
self.cursor1.execute(
     '''SELECT title, availed_title, episode_number,
               platform_id_series, platform_id_season, 
               platform_id_episode, season_number, url,
               provider_id, country, currency_code, est_hd_offer,                   
               est_sd_offer, vod_hd_offer, vod_sd_offer
     FROM main_googlecatalogtmp WHERE asset_type=""episode""'''
)
item = cursor.fetchone()
print('My title is {}'.format(item.title))
"
Pinpointing a ResultSet with find_all,"from bs4 import BeautifulSoup

text = '<a><span itemprop=""foo""> TEXT I WANT </span></a> \
<label><span itemprop=""foo""> DO NOT WANT </span></label> \
<a><span itemprop=""foo""> I WANT THIS TOO </span></a> \
<strong><a> DO NOT WANT </a></strong> \
<label><span itemprop=""foo""> DO NOT WANT </span></label>'

soup = BeautifulSoup(text)
anchor_tags = soup.find_all('a')
for a in anchor_tags:
    for span in a.find_all('span', attrs={'itemprop': 'foo'}):
        print span.text
"
How to count how many positions away an element is in a list?,"print(list1.index(max(list1)))
"
How to organize data that alternates between negative and positive values in Python,"def sections(sequence, key):
    it = iter(sequence)
    a = placeholder = object()
    group = []
    while True:
        try:
            a, last = next(it), a
        except StopIteration:
            if group:
                yield group
            return
        if last is not placeholder and key(a, last):
            if group:
                yield group
            group = [a]
        else:
            group.append(a)
"
Python Copying Files,"import shutil

def recwrite(filelist):
    if len(filelist) > 0:
        shutil.copyfile(filelist[0], ""input.txt"")
        recwrite(filelist[1:])
"
Converting EPOC datetime to PST in python/ruby,"Time.at(1410627645).to_datetime.in_time_zone(""Pacific Time (US & Canada)"")
#=> Sat, 13 Sep 2014 10:00:45 PDT -07:00
"
How to call python script from CasperJS,"casp.run(function(){});
"
Rounding decimals in nested data structures in Python,"import collections
import numbers
def pformat(thing, formatfunc):
    if isinstance(thing, dict):
        return type(thing)((key, pformat(value)) for key, value in thing.iteritems())
    if isinstance(thing, collections.Container):
        return type(thing)(pformat(value) for value in thing)
    if isinstance(thing, numbers.Number):
        return formatfunc(thing)
    return thing

def formatfloat(thing):
    return ""%.3g"" % float(thing)

x={'a':[1.05600000001,2.34581736481,[8.1111111112,9.999990111111]],
'b':[3.05600000001,4.34581736481,[5.1111111112,6.999990111111]]}

print pformat(x, formatfloat)
"
Radical Use of Admin's Interface,"{% block breadcrumbs %}{% if not is_popup %}
    <div class=""breadcrumbs"">
         <a href=""/admin/"">Home</a> &rsaquo;
         <a href=""/admin/yourpath/"">Up One Level</a> &rsaquo; 
         You Are Here
    </div>
{% endif %}{% endblock %}
"
Retrieving arguments from HTTP_REFERER string,"import urlparse

parsed = urlparse.parse_qs(referer_url)
print parsed['start'][0]
"
How do i check the time complexity of a comprehension,"x = [(i,xyz_list.count(i)) for i in xyz_set]

xyz_list.count(i)) #  0(n) operation
"
"Pandas.rolling_correlation, threshold?","pd.options.display.float_format = '{:12,.9f}'.format
df_corr = pd.DataFrame()
diffs = np.arange(4)
for i in range(20):
    df = pd.DataFrame({ 'x': [1,1,1,1], 'y':[5,7,8,6] })
    df['x'] = df['x'] + diffs*.1**i
    df_corr = df_corr.append( pd.rolling_corr(df.x,df.y,3)[2:4], ignore_index=True )
"
Delete Column IF all column cell contain NULL value,"[row for row in zip(*Matrix) if all(e != ['-'] for e in row)]
"
Get House Price data,"soup = BeautifulSoup(resp.text)
ads = soup.findAll(""div"", {""class"": ""vcard""})
for ad in ads:
    print ad.h2.a.text
"
Convert quotient to numerical value,"import pandas as pd
df = pd.DataFrame({'Product': ['AAA', 'ABB', 'ACC'],
                   'Score': ['1/4', '1/2', '1/1']})
s = df['Score'].str.split('/', expand=True).astype(int)
df['Score'] = s[0].div(s[1])
print df
"
Python side-by-side merge of comma-delimited text files,"from collections import OrderedDict
d= OrderedDict()

import fileinput
with open(""joined.txt"",""w"") as f:
    for line in fileinput.input([""file1.txt"",""file2.txt"",""file3.txt"",""file4.txt""]):
        spl = line.strip().split("","")
        d.setdefault(spl[0],[])
        d[spl[0]] += spl[1:]
    for k,v in d.items():
        f.write(""{} {}\n"".format(k,"","".join(v)))
"
Timestamp YYYY-MM-DDThh:mm:ss.sssTZD in Python,"In [1]: now = datetime.now(tzoffset('EDT', +4*60*60)).replace(microsecond=0)
In [2]: print now.isoformat()
2016-05-28T01:43:14+04:00
"
Parse a .txt file,"symbolList=[]
for line in open('datafile.txt','r'):
if '.o' in line:
	tempname=line.split()[-1][0:-2]
            pass

if 'FUNC' not in line:
	pass

else:
	symbolList.append((tempname,line.split('|')[0]))
"
Get a list of lists of the sets which intersect each other in python,"def intersecting_sets(sets):
    import networkx as nx
    G = nx.Graph()
    # Nodes of the graph should be hashable
    sets = map(frozenset, sets)
    for to_node in sets:
        for from_node in sets:
            # off-course you don't want a self loop
            # and only interested in intersecting nodes 
            if to_node != from_node and to_node & from_node:
                G.add_edge(to_node, from_node)
    # and remember to convert the frozen sets to sets
    return [map(set, lst) for lst in nx.connected_components(G)]
"
Modifying nested dictionaries,"empty = {'151': {'1': 'empty', '0': 'empty', '2': '2.30'}}
full = {'151': {'1': 3.4, '0': 3.6, '2': 2}}

def repl(a, b):
    clean = {}
    for k, v in a.items():
        # This is the case where we want to replace what we have in b if we have something.  Just in case, use the dict.get method and provide a default.
        if v == 'empty': 
            clean[k] = b.get(k, 'Not there')
        # If the value is another dict, then call this function with the value, and put the return as the value for our current key
        elif isinstance(v, dict):
            v_clean = repl(v, b.get(k, {}))
            clean[k] = v_clean
        # The value isn't equal to 'empty', and it isn't another dict, so just keep the current value.
        else:
            clean[k] = v
    # Finally, return the cleaned up dictionary.
    return clean

print repl(empty, full)
"
Create a list where each element is a created based on the index of a nested list in python,">>> alist = [[1,2],[10,10],[5,5]]
>>> if len(alist)%2:
...     alist.append(alist[-1])
... 
>>> [[(x+y)*.5  for x,y in zip(*item)] for item in zip(alist, alist[1:])]
[[5.5, 6.0], [7.5, 7.5], [5.0, 5.0]]
>>> [[(x+y)*.5  for x,y in zip(*item)] for item in zip(alist[::2], alist[1::2])]
[[5.5, 6.0], [5.0, 5.0]]
"
why I'm getting a square instead of a circle in pygame?,"# ...
class Splatter(object):
    def __init__(self, r):
        self.r = int(r)
        self.surface = pygame.Surface((r*2, r*2))
        self.surface.fill(pygame.Color(""red""))
        pygame.draw.circle(self.surface, pygame.Color(""black""), 
                           (int(self.surface.get_width()/2),
                            int(self.surface.get_height()/2)), 
                           self.r)

    def display(self, x, y):
        SCREEN.blit(self.surface, (int(x), int(y)))


SCREEN.fill(SCREEN_COLOR)
s = Splatter(20)
s.display(SCREEN.get_width()/2, SCREEN.get_height()/2)
pygame.display.flip()
# ...
"
Finding partial matches in an href tag,"soup.find_all(""a"", href=re.compile(r""^/markets/NZSX/securities/""))
soup.find_all(""a"", href=lambda href: href and href.startswith(""/markets/NZSX/securities/""))
"
Print elements of list horizontally,"def print_table(seq, width=3):
    print('\n'.join([''.join(
        [(str(u[-i]) if len(u) >= i else '').rjust(width) for u in seq])
            for i in range(max(len(u) for u in seq), 0, -1)]))
"
parsing meta tag with Beautiful Soup and Python,"In [95]: soup = BeautifulSoup(content)

In [96]: soup.find(""span"", {""class"": ""egV2_archivedDateEnded""})
Out[96]: <span class=""egV2_archivedDateEnded"">STARTS</span>

In [97]: soup.find(""span"", {""class"": ""egV2_archivedDateEnded""}).next
Out[97]: u'STARTS'

In [98]: soup.find(""span"", {""class"": ""egV2_archivedDateEnded""}).next.next
Out[98]: u'Fri 23 Nov,10:00AM'
"
Invoking top-level function by name in Python,"globals()[func_name]()
"
Python with statement in C++,"template <typename T>
class B {
public:
    B(T& t) : m_t(t_){
        m_t.bind();
    }
    ~B() {
        m_t.release();
    }
    T& m_t;
}
"
how to force fabric to use env.password setting,"from fabric.api import *


env.password = ""mypassword""

print env.user
print env.password
def update():
    local(""echo {} | sudo -S apt-get update"".format(env.password))
"
python Binary string to binary data,">>> bytes = struct.unpack('6B', 't\xe5\x93$\x95\x04')
>>> bytes
(116, 229, 147, 36, 149, 4)
>>> bin(sum(x * 256 ** i for i, x in enumerate(bytes)))
'0b1001001010100100100100100111110010101110100'
"
Find float in ndarray,"def isclose(a, b, rtol=1e-05, atol=1e-08):
    return np.abs(a-b) <= (atol + rtol * np.abs(b))
"
Only the last row is inserted to my sql database from a text file after splitting it with PYTHON,"[n for n in line.strip().split(' | ')]
"
Python re match at specific point in string,"import re
s = 'this is a test 4242 did you get it'
pat = re.compile('[a-zA-Z]+ ([0-9]+)')
print pat.match(s, 10).group(0)
"
Python: Remove Sublists from List if Same Including/Not Including Order,"y, s = [], set()
for t in x:
    w = tuple(sorted(t))
    if not w in s:
        y.append(t)
        s.add(w)
"
Flattening a list of NumPy arrays?,np.concatenate(input_list).ravel().tolist()
How to search for string in Python by removing line breaks but return the exact line where the string was found?,"def iterwords(fh):
    for number, line in enumerate(fh):
        for word in re.split(r'\s+', line.strip()):
            yield number, word
"
Extracting data from file with differing amounts of columns,"$ awk  '{print $(NF-2)}' /tmp/genes.txt
9268558
76229363
"
"Simulate several rounds of rock, paper and scissors","while True:
    n = int(input('How many trials?')) # raw_input for Python 2.x
    simul(n)
"
"Detect if an image has a border, programmatically (return boolean)","from PIL import Image, ImageChops

def is_there_a_border(im):
    bg = Image.new(im.mode, im.size, im.getpixel((0,0)))
    diff = ImageChops.difference(im, bg)
    diff = ImageChops.add(diff, diff, 2.0, -100)
    bbox = diff.getbbox()
    return bbox != (0,0,im.size[0],im.size[1])
"
Making object JSON serializable with regular encoder,"def as_python_object(dct):
    if '_python_object' in dct:
        return pickle.loads(str(dct['_python_object']))
    return dct

pyobj = json.loads(json_str, object_hook=as_python_object)
"
Get list related objects,"user2_ids = request.user.user_set.all().values_list('user2', flat=True).distinct()
"
"How to ""extract"" certain values out of an array?",">>> a1[~a2.astype(bool)]
array([ 1,  4,  7, 10, 13, 16, 19, 22, 25, 28])
"
Efficient way to do conditional checks on Numpy Arrays,">>> h = np.random.random((3,4))
>>> nodata = 10
>>> h.flat[[2,3,4,7,8,9]] = 10
>>> ibound = np.random.randint(0,2,(3,4))
>>> L1TopOld = np.ones((3,4))*5
>>> h
array([[  0.1382408 ,   0.7718657 ,  10.        ,  10.        ],
       [ 10.        ,   0.5595833 ,   0.83703255,  10.        ],
       [ 10.        ,  10.        ,   0.79473842,   0.91882331]])
>>> ibound
array([[0, 1, 1, 0],
       [0, 1, 1, 0],
       [0, 1, 0, 1]])
>>> L1TopOld
array([[ 5.,  5.,  5.,  5.],
       [ 5.,  5.,  5.,  5.],
       [ 5.,  5.,  5.,  5.]])
>>> eps = 0.01
"
Pygame Rect class,"class Rectangle(object):
    def __init__(self, top_corner, width, height):
        self._x = top_corner[0]
        self._y = top_corner[1]
        self._width = width
        self._height = height

    def get_bottom_right(self):
        d = self._x + self.width
        t = self._y + self.height
        return (d,t)
"
"How can I make a ""tuple of an ndarray of ndarrays""?","In [1027]: img=np.ones((28,28),int)
In [1028]: imgr = img.ravel()
In [1029]: imgr.shape
Out[1029]: (784,)
"
Define a iterable class supporting two or more simultaneous iterating,"def __iter__(self):
    for i in range(self.natoms):
        yield self[i + 1]
"
Matching substring in another string,"for dir in list2:
    for path in list1:
        if dir in path:
            print(path)
"
Project Gutenberg Python problem?,"longest = max((L for L in lol if any(lt==w.lower() for w in L)), key=len)
"
Python one-liner (converting perl to pyp),"pyp ""mm | p if n==0 else (p[:-2] + [(int(x)%12) for x in p[-2:]]) | mm""
"
list of ints into a list of tuples python,"print(zip(my_list[0::2], my_list[1::2]))"
"Parsing text within block ""|-"" and ""|- or }""","import re

data = []

for block in re.findall(r'(?s)\|-(.+?)(?=\|-|})', text):
    r = [x.split()[-1] for x in re.findall(r'\[(.+?)\]', block)]
    if r:
        data.append(r)

print data
"
Finding the intersection between two series in Pandas,pd.Series(list(set(s1).intersection(set(s2))))
Python: Ignore a # / and random numbers in a string,"import re
s = ""this is a string #123/234 with other stuff""
t = re.sub('#\d{3}\/\d{3}', '', s)
print t
"
pandas: applying multiple filters,"myset = ['flower', 'bird']
df[((df.CAT1 == 'animal') & (df.CAT2.isin(myset))) | ((df.CAT2 == 'animal') & (df.CAT1.isin(myset)))]
"
Sqlalchemy get results in the same order,"from sqlalchemy.sql.postgresql import JSONB, TEXT
from sqlalchemy.sql import cast

id_order = { str(v): k for k, v in enumerate(user_ids) }
users = User.query.filter(User.id.in_(user_ids)).\
    order_by(cast(id_order, JSONB)[cast(User.id, TEXT)])
"
Returning characters after regex has found match in python,">>> import re
>>> data = 'Schedule (1) GEORGE JETSON\n\nPRESIDENT X X 0 O O\n\n(2) BILL CLINTON\n\nVICE PRESIDENT X X 0 0 0\n\n(3)'
>>> re.search(r'Schedule \(1\).*?\(2\)', data, flags=re.DOTALL)
<_sre.SRE_Match object at 0x107ff5510>
>>> re.search(r'Schedule \(1\).*?\(2\)', data, flags=re.DOTALL).group()
'Schedule (1) GEORGE JETSON\n\nPRESIDENT X X 0 O O\n\n(2)'
"
clone element with beautifulsoup,"import copy

document2.body.append(copy.copy(document1.find('div', id_='someid')))
"
"How do I turn a python datetime into a string, with readable format date?","my_datetime.strftime('%B %d, %Y')"
scheduling a print command at specific timings after the script started in Python,"import schedule
import time
from functools import partial
# your specified list of times
times = [1.76493425, 3.10174059, 4.49576803, 10.99379224, 18.84178369]
# define a job you want to do
def job(t, start):
    print ('hello world', ' - timing: ', t, ' - now: ', time.time()- start)
    # pop the job right away from schedule.jobs, so it runs only once
    return schedule.CancelJob
# get the starting time
start = time.time()
# for each time add what to do
for t in times:
    # using partial so i can pass arguments to job
    schedule.every(t).seconds.do(partial(job, t, start))
# and run it inside a lop
while True:
    schedule.run_pending()
    # schedule.jobs is just a list of jobs
    if not schedule.jobs:
        break
"
twisted adbapi turn off autocommit (psycopg2),"connect(dsn=None, database=None, user=None, password=None, host=None, port=None, connection_factory=None, async=False, **kwargs)
    Create a new database connection.

    The connection parameters can be specified either as a string:

        conn = psycopg2.connect(""dbname=test user=postgres password=secret"")

    or using a set of keyword arguments:

        conn = psycopg2.connect(database=""test"", user=""postgres"", password=""secret"")

    The basic connection parameters are:

    - *dbname*: the database name (only in dsn string)
    - *database*: the database name (only as keyword argument)
    - *user*: user name used to authenticate
    - *password*: password used to authenticate
    - *host*: database host address (defaults to UNIX socket if not provided)
    - *port*: connection port number (defaults to 5432 if not provided)

    Using the *connection_factory* parameter a different class or connections
    factory can be specified. It should be a callable object taking a dsn
    argument.

    Using *async*=True an asynchronous connection will be created.

    Any other keyword parameter will be passed to the underlying client
    library: the list of supported parameter depends on the library version.
"
How to apply a function on a subset of numpy.ndarray object,"import scipy.stats.mstats as mstats
import numpy as np

data = np.arange(12).reshape((3,4))
data[data % 3 == 0] = -1
mask = data <= 0
mdata = np.ma.masked_array(data, mask)
zscores = mstats.zscore(mdata, axis=1, ddof=1)
print(zscores)
"
converting list of list to list of dictionaries with a special case in it,"li=[ [', , PropertyName, com.bs.ConsoleLogLevel, ', ', , Type, Integer, ', ', , Default, 3, ', ', , Description, ""The logging level for outputting to console. (1 - Critical, 2 - Warning, 3 - Info, 4 - Debug, 5 - Trace)"", ', ', , Sample, com.bs.ConsoleLogLevel=5, ', ', , DependsOn, com.rim.bs.ConsoleLogEnable, ', ', , Min, 1, ', ', , Max, 5, '], 

    [', , PropertyName, com.rim.bs.SyslogProtocol, ', ', , Type, String, ', ', , Default, tcp, ', ', , Description, ""The supported protocols are:', ' 1. udp -- The original syslog UDP protocol, pointed to 104.0.0.21 (localhost)', ' 2. tcp -- An implementation of the de-facto TCP/IP syslog protocol, which points to a TCP-capable syslog server, defaulted to 104.0.021 (localhost).', ' 3. unix_syslog -- Native syslog support for Unix platforms', ' 4. unix_socket -- Native socket support for Unix platforms, pointed to the ""/var/log"" socket"", ', ', , Sample, com.bs.SyslogProtocol=tcp, ', ', , DependsOn, com.rim.bs.SyslogEnable, '] ]


result=[]  
for l in li:
    fdict={}
    for e in l:
        if e.startswith(', ,'):
            e=e.lstrip(', ,')
            e=e.rstrip().rstrip(',')
            k, sep, v=e.partition(',')
            fdict[k]=v.strip()
        else:
            fdict['Description']+=e  
    result.append(fdict)          
print(result)       
"
Сodecademy 18/19 Battleship,"from random import randint

board = [['O' for i in range(5)] for j in range(5)]

def print_board(board):
    for row in board:
        print "" "".join(row)

print ""Let's play Battleship!""
print_board(board)

def random_row(board):
    return randint(0, len(board) - 1)

def random_col(board):
    return randint(0, len(board) - 1)

ship_row = random_row(board)
ship_col = random_col(board)
print ship_row
print ship_col

# Everything from here on should go in your for loop!
# Be sure to indent four spaces!
for turn in range(4):
    print ""Turn"", turn + 1# Print (turn + 1) here!
    try:
        guess_row = int(raw_input(""Guess Row:""))
        guess_col = int(raw_input(""Guess Col:""))
    except ValueError:
        print ""Your gunners were asleep on the job!""
        if turn == 3:
            print ""Game Over""
        continue
    if guess_row == ship_row and guess_col == ship_col:
        print ""Congratulations! You sunk my battleship!""
        break
    else:
        if guess_row not in range(5) or guess_col not in range(5):
            print ""Oops, that's not even in the ocean.""
        elif(board[guess_row][guess_col] == ""X""):
            print ""You guessed that one already.""
        else:
            print ""You missed my battleship!""
            board[guess_row-1][guess_col-1] = ""X""
            print_board(board)
    if turn == 3:
        print ""Game Over""
"
unable to iterate tuple in python 2.7,"d = dict()
for s in mastertup:
    str_list = s.split(',')
    d[str_list[0]] = ','.join(str_list[1:])

# Test
inputstring = '0101AA'
inputstring = d.get(inputstring, inputstring)  # if inputstring not in d, not mapping
print(inputstring)
# Output
MTS,DL
"
How can I check if a list exist in a dictionary of lists in the same order,"lst = [1,2]
lst in d.itervalues()
"
"In Producer/Consumer pattern, how could I kill the consumer thread?","import threading
condition = threading.Condition()
queue = []
class Client():
    def write_message(self,msg):
        print(msg)

clients=[Client()]

jobdone=object()

def Consumer():
    while True:
        condition.acquire()
        try:
            if not queue:
                condition.wait()
            json = queue.pop()
            if json is jobdone:
                break;
            clients[0].write_message(json)
        finally:
            condition.release()

t = threading.Thread(target=Consumer);
t.start()
import time
time.sleep(2)
condition.acquire()
queue.append(jobdone)
condition.notify()
condition.release()
"
Definition of mathematical operations (sin…) on NumPy arrays containing objects,"from uncertainties.math_ops import *  # Work on scalars and scalars with uncertainty
"
set(filter) repetition,"acceptable = set()
#...
acceptable = set(filter(is_rank_y_top_10,
                        filter(is_rank_x_top_100, acceptable)))
"
Check if a given key already exists in a dictionary,"if (key in d):
    pass"
Filtering for row-wise patterns in columns with a sequence of 0 and 1,"res = {col: t[col][t[col] != 0] for col in df.columns}
"
Faster way to store a NLTK FreqDict?,"fd = pickle.load(open(""data/fd.txt"", 'rb'))

def compute_ave_freq(word_forms):
    l = len(word_forms)
    if  l > 0:
        return sum([fd.freq(form) for form in word_forms]) / l
    else:
        return 0
"
Filter dict by certain values,"oids = db['ObjectID']
for i, id in enumerate(oids):
    if id != -1
        filter_ind.append(i) 
"
Numpy and matplotlib garbage collection,"...
plt.savefig(...)
plt.close()
"
Selecting a random list element in python,"a = random.choice(list1)
b = random.choice(list2)
"
How to solve recurrence relations in python,"import numpy
a=numpy.array([[-1,   0, 0.5,  0,   0,   0], # 0
               [0.5, -1,   0,0.5,   0,   0], # 1
               [0,  0.5,  -1,  0, 0.5,   0], # 2
               [0,    0, 0.5, -1,   0, 0.5], # 3
               [0,    0,   0,  0,   1,   0], # 4
               [0,    0,   0,  0,   0,   1], # 5
              ])
b=numpy.array([0,0,0,0,1,1])
# solve ax=b
x = numpy.linalg.solve(a, b)
print x
"
How to convert lists in a dictionary to dictionaries in a lists (Python),"cols = zip(*stock.values())
converted = [dict(zip(stock, column)) for column in cols]
"
I want all PDF or DOCs to come first in the output,"from collections import Counter
counter_pdf = Counter(pdf_list)
counter_doc = Counter(pdf_doc)

print counter_pdf  # Counter({'ShandeepResumeAm.doc': 2, 'ShandeepResumeAm.pdf': 1, ....})
"
Minimize overhead in Python multiprocessing.Pool with numpy/scipy,"
import math
import numpy as np
import time
import sys
import multiprocessing as mp
import scipy.interpolate as interpolate

_tm=0
def stopwatch(msg=''):
    tm = time.time()
    global _tm
    if _tm==0: _tm = tm; return
    print(""%s: %.2f seconds"" % (msg, tm-_tm))
    _tm = tm

class BigData:
    def __init__(self, n):
        z = np.random.uniform(size=n*n*n).reshape((n,n,n))
        self.ff = []
        for i in range(n):
            f = interpolate.RectBivariateSpline(
                np.arange(n), np.arange(n), z[i], kx=1, ky=1)
            self.ff.append(f)
        self.n = n

    def do_chunk(self, k, xi, yi):
        n = self.n
        s = np.sum(np.exp(self.ff[k].ev(xi, yi)))
        sys.stderr.write(""."")
        return s

    def do_chunk_of_chunks(self, k_start, k_end, xi, yi):
        s = sum(np.sum(np.exp(self.ff[k].ev(xi, yi)))
                    for k in range(k_start, k_end))
        sys.stderr.write(""."")
        return s

    def do_multi(self, numproc, xi, yi):
        procs = []
        pool = mp.Pool(numproc)
        stopwatch('\nPool setup')
        ks = list(map(int, np.linspace(0, self.n, numproc+1)))
        for i in range(len(ks)-1):
            k_start, k_end = ks[i:i+2]
            p = pool.apply_async(_do_chunk_wrapper, (k_start, k_end, xi, yi))
            procs.append(p)
        stopwatch('Jobs queued (%d processes)' % numproc)
        total = 0.0
        for k, p in enumerate(procs):
            total += np.sum(p.get(timeout=30)) # timeout allows ctrl-C interrupt
            if k == 0: stopwatch(""\nFirst get() done"")
        print(total)
        stopwatch('Jobs done')
        pool.close()
        pool.join()
        return total

    def do_single(self, xi, yi):
        total = 0.0
        for k in range(self.n):
            total += self.do_chunk(k, xi, yi)
        stopwatch('\nAll in single process')
        return total

def _do_chunk_wrapper(k_start, k_end, xi, yi): 
    return bd.do_chunk_of_chunks(k_start, k_end, xi, yi)        

if __name__ == ""__main__"":
    stopwatch()
    n = 50
    bd = BigData(n)
    m = 1000*1000
    xi, yi = np.random.uniform(0, n, size=m*2).reshape((2,m))
    stopwatch('Initialized')
    bd.do_multi(2, xi, yi)
    bd.do_multi(3, xi, yi)
    bd.do_single(xi, yi)
"
Not correct regular-expression in python,"data = []

for line in infoData:
    if '=' not in line:
        continue
    name, value = line.split('=')
    value, unit = re.search('([\d.]+)(\w+)', value).groups()

    data.append({'name': name.strip(), 'value': float(value), 'unit': unit})
"
operate with python '\' special character in a string,">>> s = ""HowAre\nyouDoing"" 
>>> s
'HowAre\nyouDoing'
>>> s.replace(""\n"", """")
'HowAreyouDoing'
"
Parsing python source into html - quotes,"import tokenize
import token
import io

text = '''
x = 'hello there'  
if x == 'example ""quotes"" inside quotes' and y == 'another example': pass
'''


tokens = tokenize.generate_tokens(io.BytesIO(text).readline)
for toknum, tokval, (srow, scol), (erow, ecol), line in tokens:
    tokname = token.tok_name[toknum]
    print(tokname, tokval)
"
Counting occurrences of words per each item in a list,"$ python
>>> animals = [ 'bird', 'bird', 'cat' ]
>>> set(animals)
set(['bird', 'cat'])
>>> list(set(animals))
['bird', 'cat']
"
Proxy class for accessing other class' items as attributes (__getitem__ infinite recursion),"class LabelMapperProxy(object):
    def __init__(self, mapper): self.mapper = mapper
"
Output issue calculating moving average,"import pandas as pd

data = [('2012-10-01', 659.38999999999999),
 ('2012-10-02', 661.30999999999995),
 ('2012-10-03', 671.45000000000005),
 ('2012-10-04', 666.79999999999995),
 ('2012-10-05', 652.59000000000003),
 ('2012-10-08', 638.16999999999996),
 ('2012-10-09', 635.85000000000002),
 ('2012-10-10', 640.90999999999997),
 ('2012-10-11', 628.10000000000002),
 ('2012-10-12', 629.71000000000004),
 ('2012-10-15', 634.75999999999999),
 ('2012-10-16', 649.78999999999996),
 ('2012-10-17', 644.61000000000001),
 ('2012-10-18', 632.63999999999999),
 ('2012-10-19', 609.84000000000003),
 ('2012-10-22', 634.02999999999997),
 ('2012-10-23', 613.36000000000001),
 ('2012-10-24', 616.83000000000004)]

df = pd.DataFrame(data, columns=['date','price'])
df['average'] = pd.rolling_mean(df['price'], 10)
df['prev_price'] = df['price'].shift(1)
df['prev_average'] = df['average'].shift(1)
df['signal'] = ''
buys = (df['price']>df['average']) & (df['prev_price']<df['prev_average'])
sells = (df['price']<df['average']) & (df['prev_price']>df['prev_average'])
df.loc[buys, 'signal'] = 'BUY'
df.loc[sells, 'signal'] = 'SELL'

print(df)
"
"Python re.compile, split string into two while preserving delimiter",">>> foo.split(s1)
['(NTUSER.DAT)', 'Checks for IOCs for Clampi (per Trend Micro)']
>>> foo.split(s2)
['(NTUSER.DAT)', 'Autostart - get Command Processor\\AutoRun value from NTUSER.DAT hive']
>>> foo.split(s3)
['(All)', 'Parse hive, print deleted keys/values']
>>> foo.split(s4)
['(NTUSER.DAT;Software)', 'Get IE Zone settings']
>>> foo.split('( ) abcde')                                                          
['( )', 'abcde']
"
Avoiding multiple queries for multiple counts,"obj = MyModel.objects.annotate(item_one_count=Count('items_one')) \
             .annotate(item_two_count=Count('items_two')) \
             .annotate(item_three_count=Count('items_three')) \
             .get(...)
"
Iterate over a list of tuples,"from operator import itemgetter

map(itemgetter(1), my_list)
"
Python - Loadtext for specific number of lines,"with open('test.txt') as f:
    text = f.readlines()
"
Python does not recognize the type of a namedtuple,">>> isinstance(a, tuple)
True
"
Beautifulsoup: How to find a string if tag or element not known?,">>> import re
>>> soup.find(text=re.compile('CAPTCHA')).parent
<div class=""myclass2"">Here CAPTCHA is a part of a sentence</div>
"
How to change parameters of a scikit learn function dynamically i.e. find best parameter,"# Calculate fraction of variance explained
# for each choice of number of components
r2 = pca.explained_variance_.cumsum() / x.var(0).sum()
"
Reading multiple lines from an external text file in Python,"print ""Changing current directory to %s"" % os.path.dirname(os.path.realpath(__file__))
os.chdir(os.path.dirname(os.path.realpath(__file__)))
"
Does PyQT4 signal.connect keep objects live?,"from PyQt4.QtCore import *

app = QCoreApplication([])

class Signals(QObject):
    signal = pyqtSignal()
    def __init__(self):
        QObject.__init__(self)

class Test():
    def __init__(self, s):
        s.connect(self.done)

    def done(self):
        print(""Done"")


s = Signals()
t = Test(s.signal)
print(""first"")
s.signal.emit()
app.processEvents()

t = None
print(""second"")
s.signal.emit()
app.processEvents()
"
In python how do you deal with other encodings in domain names,"import chardet

text = '<2011315123.04C6DACE618A7C2763810@\x82\xb1\x82\xea\x82\xa9\x82\xe7' + \
    '\x8c\xa9\x82\xa6\x82\xe9\x82\xbe\x82\xeb\x82\xa4>'
cset = chardet.detect(text)
print cset
encoding = cset['encoding']
print encoding, text.decode(encoding)
"
Index of element in Numpy array,"class myarray(np.ndarray):
    def __new__(cls, *args, **kwargs):
        return np.array(*args, **kwargs).view(myarray)
    def index(self, value):
        return np.where(self==value)
"
O(n) + O(n) = O(n)?,"y = A*x + B
y = C*x + D
-----------
y = (A+C)*x + (B+D)
"
Create log file one every day in python,"import os
import time

class RotatingFileOpener():
    def __init__(self, path, mode='a', prepend="""", append=""""):
        if not os.path.isdir(path):
            raise FileNotFoundError(""Can't open directory '{}' for data output."".format(path))
        self._path = path
        self._prepend = prepend
        self._append = append
        self._mode = mode
        self._day = time.localtime().tm_mday
    def __enter__(self):
        self._filename = self._format_filename()
        self._file = open(self._filename, self._mode)
        return self
    def __exit__(self, *args):
        return getattr(self._file, '__exit__')(*args)
    def _day_changed(self):
        return self._day == time.localtime().tm_mday
    def _format_filename(self):
        return os.path.join(self._path, ""{}{}{}"".format(self._prepend, time.strftime(""%Y%m%d""), self._append))
    def write(self, *args):
        if self._day_changed():
            self._file.close()
            self._file = open(self._format_filename())
        return getattr(self._file, 'write')(*args)
    def __getattr__(self, attr):
        return getattr(self._file, attr)
    def __iter__(self):
        return iter(self._file)
"
Evaluation inside string,"""Hello {0}"".format(user_name_function())
"
How to format a dict of lists as a table,"#! /usr/bin/env python

from prettytable import PrettyTable

d1 = {
  ""key1"":[""val1_1"", ""val1_2""],
  ""key2"":[""val2_1"", ""val2_2""],
  ""key3"":[""val3_1"", ""val3_2""],
  ""key4"":[""val4_1"", ""val4_2""],
}

table = PrettyTable()

for key,val in sorted(d1.iteritems()):
  table.add_column(key, sorted(val))

print table
"
How to split an array according to a condition in numpy?,"import numpy as np

def split(arr, cond):
  return [arr[cond], arr[~cond]]

a = np.array([1,3,5,7,2,4,6,8])
print split(a, a<5)

a = np.array([[1,2,3],[4,5,6],[7,8,9],[2,4,7]])
print split(a, a[:,0]<3)
"
Strip HTML from strings in Python,"from HTMLParser import HTMLParser

class MLStripper(HTMLParser):
    def __init__(self):
        self.reset()
        self.fed = []
    def handle_data(self, d):
        self.fed.append(d)
    def get_data(self):
        return ''.join(self.fed)

def strip_tags(html):
    s = MLStripper()
    s.feed(html)
    return s.get_data()
"
"Python Qt: How to catch ""return"" in qtablewidget","class MyTableWidget(QTableWidget):
    def __init__(self, parent=None):
        super(MyTableWidget, self).__init__(parent)

    def keyPressEvent(self, event):
         key = event.key()

         if key == Qt.Key_Return or key == Qt.Key_Enter:
             # Process current item here
         else:
             super(MyTableWidget, self).keyPressEvent(event)
"
Python Regex to find reccuring patterns or binary strings,"pattern = re.compile(r""(?=(([01]+)\2+))"")
for match in pattern.finditer(""11010""):
    print(match.group(1), ""at {}:{}"".format(*match.span(1)))
"
Python : Assert that variable is instance method?,"assert inspect.ismethod(Test().method)  
"
Python selecting mutiple ranges with numpy\pandas,">>> %%timeit -n 10000  data = pd.DataFrame(np.random.sample((10000,10)))
... result = pd.concat((data[100:150], data[200:300]))
...
10000 loops, best of 3: 3.81 ms per loop
"
Limiting Fps in python,"import time

fps = 5
time_delta = 1./fps

while True:
    t0 = time.clock()
    time.sleep(time_delta)
    t1 = time.clock()
    print 1. / (t1 - t0)
"
"how to delete the ""u and ' ' "" before the of database table display by python",">>> row = (u'31/05/2013', u'11:10', u'$487')
>>> print u' {:<15} {:<8} {:<6}'.format(*row)
 31/05/2013      11:10    $487  
"
Accessing the last element in a list in Python,"for idx, item in enumerate(list_a):
    if idx == len(list_a) - 1:
        print item, ""is the last""
    else:
        print item, ""is not the last""
"
Get nodes of specific type in Networkx,"import networkx as nx

G = nx.complete_graph(10)
G.node[0]['ColorNode'] = True  # right-hand side value is irrelevant for the lookup
G.node[1]['ColorNode'] = True
G.node[2]['ShapeNode'] = True
G.node[3]['ShapeNode'] = True

shape_nodes = nx.get_node_attributes(G, 'ShapeNode').keys()
color_nodes = nx.get_node_attributes(G, 'ColorNode').keys()

print('Shape node ids: {}'.format(shape_nodes))
print('Color node ids: {}'.format(color_nodes))
"
List position changing,"data = [""15674 24000 Manager Gregory the 1st John"", ""15674 24000 Manager Gregory the 1st John"",
        ""15674 24000 Manager Gregory the 1st John"", ""15674 24000 Manager Gregory the 1st John""]

data1 = []

for items in data:
    splitNames = items.split()
    number, salary, position, first, des1, des2, last = splitNames
    data1.append([last, first + ' ' + des1 + ' ' + des2, number, position, salary])

for items in data1:
    print items
"
Python2.7 - Passing argument to command line to filter CSV according to parameter,"def find_by_val(col, k, fle, delim="",""):
    with open(fle) as f:
        names = next(f).rstrip().split(delim)
        if col not in names:
            print(""Column does not exist."")
            return
        r, found = csv.DictReader(f, fieldnames=names), False
        output = ["","".join(d[n] for n in names) for d in r if d[col] == k ]
        if not output:
            print(""No matching value for {} found"".format(k))
        else:
            print("","".join(names))
            print(""\n"".join(output))
"
Inserting list into list containing multiple list,">>> original_list = [[[[[], [], []]], ['trynda'], [[[], [], []]]], ['cait'], [[[[], [], []]], ['veigar'], [[[], [], []]]]]
>>> original_list[0][0][0][1].append('x')
>>> original_list
[[[[[], ['x'], []]], ['trynda'], [[[], [], []]]], ['cait'], [[[[], [], []]], ['veigar'], [[[], [], []]]]]
          ^
"
"making a list of tuples from a string,,",">>> s = ""a b c d""
>>> w = s.split()
>>> zip(w, w[1:])
[('a', 'b'), ('b', 'c'), ('c', 'd')]
"
Spark DataFrame: Computing row-wise mean (or any aggregate operation),"import numpy as np
from pyspark.sql.functions import array, udf
from pyspark.sql.types import FloatType

combined = array(*(col(x) for x in df.columns[1:]))
median_udf = udf(lambda xs: float(np.median(xs)), FloatType())

df.select(median_udf(combined).alias(""median""))
"
How to convert unicode accented characters to pure ascii without accents?,">>> myfoo = u'àà'
>>> myfoo
u'\xe0\xe0'
>>> unicodedata.normalize('NFD', myfoo).encode('ascii', 'ignore')
'aa'
>>>
"
Python 2 - sorting strings respecting the lenght of the string and the alpabetical order,"Version after Edit
data = ['Shigekazu', 'Takeshi', 'Senichi', 'Ryuichi', 'Yoshio', 'Toshio', 'Noboru', 
        'Mitsuo', 'Rafu', '']

res = ['Shigekazu', 'Takeshi', 'Senichi', 'Ryuichi', 'Yoshio', 'Toshio', 'Noboru',
       'Mitsuo', 'Rafu']

def lineup_students(lst):
    lst = [x for x in lst if x]
    return sorted(lst, key=lambda x: (len(x), x), reverse=True)
"
applying an operation to multiple columns having multiple columns in the result,"In [60]: grouped.agg({'C' : np.sum,
   ....:              'D' : lambda x: np.std(x, ddof=1)})
   ....: 
Out[60]: 
            C         D
A                      
bar  0.443469  1.490982
foo  2.529056  0.645875
"
Convert a user function to be a dataframe method (or equivalent),"def both_sides(df, name):
    keep = [c for c in df.columns if c.startswith(name)
            and c.endswith(name)]
    return df[keep]
"
HTTping in python,"import requests

response = requests.head(""http://www.example.com/"")
if response.status_code == 200:
    print(response.elapsed)
else:
    print(""did not return 200 OK"")
"
Which method is better for combining multiple lists without duplicates?,">>> class Friend(object):
...   def __init__(self, friend_list):
...     self.friend_list = list(friend_list)
... 
>>> f1 = Friend('ABCD')
>>> f2 = Friend('CDEF')
>>> f3 = Friend('AGHIJKLMN')
>>> my_friends = [f1, f2, f3]
>>> set().union(*(f.friend_list for f in my_friends))
set(['A', 'C', 'B', 'E', 'D', 'G', 'F', 'I', 'H', 'K', 'J', 'M', 'L', 'N'])
"
Asking another thread to do something,"import threading
import datetime as DT
import time
import Queue
import random
import itertools

sentinel = None
def worker(queue):
    for date, count in iter(queue.get, sentinel):
        now = DT.datetime.now()
        print('{}: Signal found at {}, processed at {}'
              .format(count, date.strftime('%S.%f'), now.strftime('%S.%f')))
        time.sleep(random.random()*5)

queue = Queue.Queue()
t = threading.Thread(target=worker, args=(queue, ))
t.daemon = True
t.start()

c = 0
while True:
    if random.random() < 0.05:
        queue.put((DT.datetime.now(), c))
        c += 1
    if c >= 5:
        # Tell worker to quit
        queue.put(sentinel)
        t.join()
        break
"
Create new list based on values taken from sublist,"b = [list(t) for t in zip(*(col for col in zip(*a) if col[0] == 2))]
"
pandas condensing multiple columns for same value,"import pandas as pd
import numpy as np

#random dataframe
np.random.seed(1)
df1 = pd.DataFrame(np.random.randint(10, size=(3,9)))
df1.columns = ['a1','b1','c1','a2','b2','c2','a3','b3','c3']

df1.loc[[1,2],['a1','b1','c1']] = np.nan
print (df1)
    a1   b1   c1  a2  b2  c2  a3  b3  c3
0  5.0  8.0  9.0   5   0   0   1   7   6
1  NaN  NaN  NaN   5   2   4   2   4   7
2  NaN  NaN  NaN   7   0   6   9   9   7

#stack dataframe and extract string and numbers from column e
df = df1.stack().reset_index()
df.columns= ['d','e','f']
df[['g','h']] = df.e.str.extract(r'([a-zA-Z]+)([0-9]+)', expand=True)

#append 1 to d, because index starts from 1 and compare with h
df = df[df.d + 1 == df.h.astype(int)]
#remove columns h, e
df = df.drop(['h', 'e'], axis=1)
#reshaping
df = df.pivot(index='d', columns='g', values='f')
#remove index and columns names (pandas 0.18.0+)
df = df.rename_axis(None).rename_axis(None, axis=1)

print (df)
     a    b    c
0  5.0  8.0  9.0
1  5.0  2.0  4.0
2  9.0  9.0  7.0
"
Improving a python snippet,"import urllib2
from bs4 import BeautifulSoup


url = ""http://www.hdwallpapers.in/cars-desktop-wallpapers/page/2""
soup = BeautifulSoup(urllib2.urlopen(url))

links = soup.find_all('div', {'class': 'pagination'})[1].find_all('a')

print next('/'.join(link['href'].split('/')[:-1]) for link in links 
           if link.text.isdigit() and link.text != ""1"")
"
Python regex for line of digits and optional dash+digits. Why not matching?,"^(\d+(?:$|(?:-\d+)+))
"
Merging DataFrames within a loop,"import pandas as pd
import functools
import glob

pth = 'a/*.csv'
files = glob.glob(pth)
dfs = [pd.read_csv(f, sep=';') for f in files]

df = functools.reduce(lambda left,right: pd.merge(left,right,on='Land_Use', how='outer'),dfs)
print (df)
    2006  Percent_x       Land_Use  2008  Percent_y  2007    Percent
0     13   5.379564      Developed  13.0   1.863809  13.0   2.742430
1      8  25.781580  Grass/Pasture   8.0  31.455578   8.0  24.227963
2      4  54.265050           Crop   4.0  57.896856   4.0  56.007242
3     15   0.363983          Water  15.0   0.266536  15.0   0.366116
4     16   6.244104       Wetlands  16.0   2.693929  16.0   8.839979
5      6   4.691764         Forest   6.0   4.417966   6.0   6.181062
6      1   3.031494        Alfalfa   1.0   1.239176   1.0   1.446668
7     11   0.137424      Shrubland  11.0   0.004571  11.0   0.034426
8      5   0.003671          Vetch   NaN        NaN   NaN        NaN
9      3   0.055412         Barren   3.0   0.030731   3.0   0.127760
10     7   0.009531          Grass   7.0   0.130849   7.0   0.000827
11    12   0.036423           Tree   NaN        NaN  12.0   0.025528
"
Store mouse click event coordinates with matplotlib,"import numpy as np
import matplotlib.pyplot as plt

x = np.arange(-10,10)
y = x**2

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(x,y)

coords = []

def onclick(event):
    global ix, iy
    ix, iy = event.xdata, event.ydata
    print 'x = %d, y = %d'%(
        ix, iy)

    global coords
    coords.append((ix, iy))

    if len(coords) == 2:
        fig.canvas.mpl_disconnect(cid)

    return coords
cid = fig.canvas.mpl_connect('button_press_event', onclick)
"
Reducing complexity of following code,">>> filter(lambda x: not x[0] in (4, 5, 7), [[a] for a in xrange(10)])
[[0], [1], [2], [3], [6], [8], [9]]
"
How to do case insensitive sort of a dictionary and store them in OrderedDict,">>> from collections import OrderedDict
>>> named_sets  = {'DMXAA':set(['1441326_at', '1460062_at']), 'cdiGMP':set(['1441326_at', '1460062_at']),'cGAMP': set(['1441326_at', '1460062_at'])  }
>>> OrderedDict(sorted(named_sets.items(), key=lambda i: i[0].lower()))
OrderedDict([('cdiGMP', set(['1441326_at', '1460062_at'])), ('cGAMP', set(['1441326_at', '1460062_at'])), ('DMXAA', set(['1441326_at', '1460062_at']))])
>>> _.keys()
['cdiGMP', 'cGAMP', 'DMXAA']
"
Multiple scipy.integrate.ode instances,"from __future__ import division, print_function

import sys
import time
import multiprocessing as mp
import numpy as np
from scipy.integrate import odeint



def lorenz(q, t, sigma, rho, beta):
    x, y, z = q
    return [sigma*(y - x), x*(rho - z) - y, x*y - beta*z]


def solve(ic):
    t = np.linspace(0, 200, 801)
    sigma = 10.0
    rho = 28.0
    beta = 8/3
    sol = odeint(lorenz, ic, t, args=(sigma, rho, beta), rtol=1e-10, atol=1e-12)
    return sol


if __name__ == ""__main__"":
    ics = np.random.randn(100, 3)

    print(""multiprocessing:"", end='')
    tstart = time.time()
    num_processes = 5
    p = mp.Pool(num_processes)
    mp_solutions = p.map(solve, ics)
    tend = time.time()
    tmp = tend - tstart
    print("" %8.3f seconds"" % tmp)

    print(""serial:         "", end='')
    sys.stdout.flush()
    tstart = time.time()
    serial_solutions = [solve(ic) for ic in ics]
    tend = time.time()
    tserial = tend - tstart
    print("" %8.3f seconds"" % tserial)

    print(""num_processes = %i, speedup = %.2f"" % (num_processes, tserial/tmp))

    check = [(sol1 == sol2).all()
             for sol1, sol2 in zip(serial_solutions, mp_solutions)]
    if not all(check):
        print(""There was at least one discrepancy in the solutions."")
"
Python checking daytime,"import datetime as dt
from time import sleep

now = dt.datetime.now()

if now.hour >= 4 andnow.hour < 5:
    sleep((60 - now.minute)*60 + (60 - now.second))
"
for statement does not work as intended,"def fizz_count(x):
    return x.count(""fizz"")
"
Python - BeautifulSoup findParent by attribute,"hit.find_parent(id=True)
"
How to iterate through a numpy array and select neighboring cells,"import numpy as np

z = '''33 33 33 37 38 37 43 40
33 33 33 38 38 38 44 40
36 36 36 36 38 39 44 41
35 36 35 35 34 30 40 41
36 36 35 35 34 30 30 41
38 38 35 35 34 30 30 41'''
z = np.array([[int(i) for i in line.split()] for line in z.splitlines()])

neighbours = [(-1,-1), (-1,0), (-1,1), (0,1), (1,1), (1,0), (1,-1), (0,-1)]
mask = np.zeros_like(z, dtype = bool)
stack = [(3,2)] # push start coordinate on stack

while stack:
    x, y = stack.pop()
    mask[x, y] = True
    for dx, dy in neighbours:
        nx, ny = x + dx, y + dy
        if (0 <= nx < z.shape[0] and 0 <= ny < z.shape[1] 
            and not mask[nx, ny] and abs(z[nx, ny] - z[x, y]) <= 1):
            stack.append((nx, ny))

for line in mask:
    print ''.join('01'[i] for i in line)    
"
Concatenating Pandas data frame without removing row names,"pd.concat([df1.reset_index(),df2.reset_index()],axis=1)
"
What's the best way to generate random strings of a specific length in Python?,print(''.join(choice(ascii_uppercase) for i in range(12)))
Fastest way of checking for word in huge list of keywords - Python performance,"subscriptions = filters.get(word)
if subscriptions is not None:
    pass # TODO do something with subscriptions
"
Python: parsing texts between keywords,"h4 = soup.select_one(""div.article-contents > h4"")
print(h4.find_next_sibling(text=True))
"
Python: printing a specific word on a specific line,"with open(""inputfile.txt"") as myfile:
    for line_no,l in enumerate(myfile.readlines()):
        print ""Line number"",line_no     
        for word_no,w in enumerate(l.split()):
            print ""word number"",word_no     
            print ""word: "",w
"
Handling very large numbers,">>> from fractions import Fraction
>>> Fraction(""10.25"")
Fraction(41, 4)
>>> x = Fraction(""10.25"")
>>> x**100
Fraction(189839102486063226543090986563273122284619337618944664609359292215966165735102377674211649585188827411673346619890309129617784863285653302296666895356073140724001, 1606938044258990275541962092341162602522202993782792835301376)
"
Best way to split a DataFrame given an edge,df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())
time offset,"t = datetime.datetime.now()
(t - datetime.timedelta(hours=1, minutes=10))"
Sorting associative arrays in Python,"
>>> people = [
    {'name' : 'Bob', 'number' : '123'},
    {'name' : 'Bill', 'number' : '234'},
    {'name' : 'Dave', 'number' : '567'},
]       
>>> sorted(people, key=lambda dct: dct['name'])
[{'name': 'Bill', 'number': '234'}, 
 {'name': 'Bob', 'number': '123'}, 
 {'name': 'Dave', 'number': '567'}]
"
Python - Optimal code to find preceding and following five words from a given point in a line,"def splitAndFind(text, phrase):
    text2 = text.replace(phrase, ""###"").split(""###"")
    if len(text2) > 1:
        return ((text2[0].split()[-5:], text2[1].split()[:5]))
print splitAndFind(zen, 'Dutch')
#(['obvious', 'at', 'first', 'unless', ""you're""],
# ['.', 'Now', 'is', 'better', 'than'])
"
Alternative to using 'in' with numpy.where(),"foo[np.in1d(foo[:,0], [12, 1, 2])]
"
Python: Using Multiprocess to switch functions,"#!/usr/bin/python3
import time
from multiprocessing import Pool, Manager
from threading import Thread

NUM_PROCESSES = 4

def consumer(q):
    out = []
    while True:
        val = q.get()
        if val is None:
            #poison pill
            break
        #doing some work here
        time.sleep(0.01)
        out.append(val)
    return out

def producer(queue):
    flip = True
    val = 5

    def flipper():
        nonlocal flip
        input('enter to flip it!')
        while True:
            flip = not flip
            txt = 'up' if flip else 'down'
            input('val is {}, now counting {}'.format(val, txt))

    t = Thread(target=flipper, args=(), daemon=True)
    t.start()

    while val > 0:
        for _ in range(NUM_PROCESSES):
            queue.put(val)
        val = val + (1 if flip else -1)
        time.sleep(0.2)

    print()
    print('hit zero, shutting down.')

    for _ in range(NUM_PROCESSES):
        #poison pills
        queue.put(None)

if __name__ == '__main__':
    pool = Pool(processes=NUM_PROCESSES)
    m = Manager() # N.B.: multiprocessing.Queue doesn't work with Pool.apply_async
    q = m.Queue()

    results = pool.apply_async(consumer, args=(q,))
    producer(q) # running in main thread because I'm lazy

    print(results.get())
"
Intersection of two Unicode Arrays in Python,"mylist = map(lambda word: word.decode('utf-8'), mylist)
"
Python: Search a text file and then output specific data,"from collections import defaultdict

def mergeData(file1name, file2name, outfilename, a_filter_func):
    """""" Merge the data of two files. """"""
    mergedData = defaultdict(list)
    with open(file1name, 'r') as file1, open(file2name, 'r') as file2, open(outfilename, 'w') as outfile:
        for line in file1:
            mergedData[line.split()[0].lstrip('0')].append(line)
        for line in file2:
            mergedData[line.split()[0]].append("" "".join(line.split()[:4]))
        filteredMergedData = filter(a_filter_func, mergedData.iteritems())
        for d in filteredMergedData:
            outfile.write(""\n"".join(d[1]) + ""\n"")

# finally, call the function.
filter_func = lambda x: (len(x[1]) == 2) and (int(x[1][0].split()[1]) > 15 and int(x[1][1].split()[1]) > 15)
mergeData('file1.txt', 'file2.txt', 'mergedData.txt', filter_func)
"
Concatenate two numerical values to make a new column using pandas?,"df['var3'] = df.var1.astype(str) + df.var2.astype(str)
print df
  var1 var2   var3
0   01  001  01001
"
Python 2.7 Keeping track of what's been printed,">>> import sys
>>> from StringIO import StringIO
>>> sys.stdout = StringIO()
>>> print 'Hello world!'
>>> output = sys.stdout.getvalue()
>>> sys.stdout = sys.__stdout__
>>> output
'Hello world!\n'
"
Python pandas function applied to all pairwise combinations of rows,"def Pearson(r, n=len(dat)):
    r = max(min(r, 1.0), -1.0)
    df = n - 2
    if abs(r) == 1.0:
        prob = 0.0
    else:
        t_squared = r**2 * (df / ((1.0 - r) * (1.0 + r)))
        prob = betai(0.5*df, 0.5, df/(df+t_squared))

    return (r,prob)
"
How to test if a dictionary contains certain keys,">>> d = {'a': 1, 'b': 2, 'c': 3}
>>> {'a', 'b'}.issubset(d)
True
>>> {'a', 'x'}.issubset(d)
False
"
"openCV python, get the region from closed curve","import cv2
import numpy as np

# original image
image = cv2.imread('image.png')

# mask (of course replace corners with yours)
mask = np.zeros(image.shape, dtype=np.uint8)
roi_corners = np.array(points, dtype=np.int32) #pointsOf the polygon Like [[(10,10), (300,300), (10,300)]]
white = (255, 255, 255)
cv2.fillPoly(mask, roi_corners, white)

# apply the mask
masked_image = cv2.bitwise_and(image, mask)

# display your handywork
cv2.imshow('masked image', masked_image)
cv2.waitKey()
cv2.destroyAllWindows()
"
Download progressbar for Python 3,"from tkinter import Tk, ttk
from urllib.request import urlopen

def download2(url, filename):
    response = urlopen(url)
    totalsize = int(response.headers['Content-Length']) # assume correct header
    outputfile = open(filename, 'wb')

    def download_chunk(readsofar=0, chunksize=1 << 13):
        # report progress
        percent = readsofar * 1e2 / totalsize # assume totalsize > 0
        root.title('%%%.0f %s' % (percent, filename,))
        progressbar['value'] = percent

        # download chunk
        data = response.read(chunksize)
        if not data: # finished downloading
            outputfile.close()
            root.destroy() # close GUI
        else:
            outputfile.write(data) # save to filename
            # schedule to download the next chunk
            root.after(0, download_chunk, readsofar + len(data), chunksize)

    # setup GUI to show progress
    root = Tk()
    root.withdraw() # hide
    progressbar = ttk.Progressbar(root, length=400)
    progressbar.grid()
    # show progress bar if the download takes more than .5 seconds
    root.after(500, root.deiconify)
    root.after(0, download_chunk)
    root.mainloop()

download2(url, 'downloaded_file.py')
"
Accessing and altering a global array using python joblib,"from joblib import Parallel, delayed
import numpy as np
import os
import tempfile
import shutil

def main():

    print ""Nested loop array assignment:""
    regular()

    print ""Parallel nested loop assignment using numpy's memmap:""
    par3(4)

def regular():
    # Define variables
    a = [0,1,2,3,4]
    b = [0,1,2,3,4]

    # Set array variable to global and define size and shape
    global ab
    ab = np.zeros((2,np.size(a),np.size(b)))

    # Iterate to populate array
    for i in range(0,np.size(a)):
        for j in range(0,np.size(b)):
            func(i,j,a,b)

    # Show array output
    print ab

def par3(process):

    # Creat a temporary directory and define the array path
    path = tempfile.mkdtemp()
    ab3path = os.path.join(path,'ab3.mmap')

    # Define variables
    a3 = [0,1,2,3,4]
    b3 = [0,1,2,3,4]

    # Create the array using numpy's memmap
    ab3 = np.memmap(ab3path, dtype=float, shape=(2,np.size(a3),np.size(b3)), mode='w+')

    # Parallel process in order to populate array
    Parallel(n_jobs=process)(delayed(func3)(i,a3,b3,ab3) for i in xrange(0,np.size(a3)))

    # Show array output
    print ab3

    # Delete the temporary directory and contents
    try:
        shutil.rmtree(path)
    except:
        print ""Couldn't delete folder: ""+str(path)

def func(i,j,a,b):
    # Populate array
    ab[0,i,j] = a[i]+b[j]
    ab[1,i,j] = a[i]*b[j]

def func3(i,a3,b3,ab3):
    # Populate array
    for j in range(0,np.size(b3)):
        ab3[0,i,j] = a3[i]+b3[j]
        ab3[1,i,j] = a3[i]*b3[j]

# Run script
main()
"
Fill values in rows of a column based on a condition applied to another column in a data frame,"In [146]:
def func(x):
    return 'mapped' + str(df.columns.get_loc(x.first_valid_index()))
df.ix[:, 1:].apply(func, axis=1)

Out[146]:
0    mapped1
1    mapped1
2    mapped2
3    mapped3
4    mapped1
dtype: object
"
python pandas conditional count across columns,"df[ df > 0 ].count(axis=1)
"
To ignore space in python argparse,"$ python test.py -s 90030#95000#m#6099#bc 90031#95001#s#1#+100ABC \
    90032#95002#s#2#+200ABC 90033#95003#s#3#+300\ ABC
"
Replacing a unicode character in a string in Python 3,">>> s=""bla bla bla \\uf604 bla bla bla""
>>> print(s)
bla bla bla \uf604 bla bla bla
>>> s.replace('\uf604','X')
'bla bla bla \\uf604 bla bla bla'
"
howto uncompress gzipped data in a byte array?,">>> import gzip, zlib
>>> f = gzip.open('foo.gz', 'wb')
>>> f.write(b""hello world"")
11
>>> f.close()
>>> c = open('foo.gz', 'rb').read()
>>> c
'\x1f\x8b\x08\x08\x14\xf4\xdcM\x02\xfffoo\x00\xcbH\xcd\xc9\xc9W(\xcf/\xcaI\x01\x00\x85\x11J\r\x0b\x00\x00\x00'
>>> ba = bytearray(c)
>>> ba
bytearray(b'\x1f\x8b\x08\x08\x14\xf4\xdcM\x02\xfffoo\x00\xcbH\xcd\xc9\xc9W(\xcf/\xcaI\x01\x00\x85\x11J\r\x0b\x00\x00\x00')
>>> zlib.decompress(ba, 15+32)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: must be string or read-only buffer, not bytearray
>>> zlib.decompress(bytes(ba), 15+32)
'hello world'
>>>
"
Set a variable to a random element from an array and not the elements value. ---python---,"spades = {'A':A, 'B':B, 'C':C, 'D':D, 'E':E, 'F':F, 'G':G, 'H':H, 'I':I, 'J':J, 'K':K, 'L':L, 'M':M}
"
Averaging down a column of averaged data,"avg = lambda nums: sum(nums)/float(len(nums))

with open(""test2.xls"") as w:
    w.next()  # skip over header row
    for row in w:
        cols = row.split(""\t"")  # split into columns
        # then split that into fields
        date, time, values, LZA, SZA, LAM = (cols[0], cols[1],
                                             map(float, cols[2:23]), 
                                             cols[23], cols[24], cols[25])
        A = [avg(values[i:i+3]) for i in xrange(0, 21, 3)]
        print ('['+ ', '.join(['{:.6f}']*len(A)) + ']').format(*A)
        print avg(A)
"
Sum a csv column in python,"with open(""file.csv"") as fin:
    fin.next()
    total = sum(int(r[1]) for r in csv.reader(fin))
"
Sum of 2^x using elements of a list as exponents,"mylist = [0, 1, 2]
print sum([2**x for x in mylist])
"
is it possible to do fuzzy match merge with python pandas?,"df1 = DataFrame([[1,'one'],[2,'two'],[3,'three'],[4,'four'],[5,'five']], columns=['number', 'name'])
df2 = DataFrame([['a','one'],['b','too'],['c','three'],['d','fours'],['e','five']], columns=['letter', 'name'])

df2['name'] = df2['name'].apply(lambda x: difflib.get_close_matches(x, df1['name'])[0])
df1.merge(df2)
"
"How to create datetime object from ""16SEP2012"" in python","datetime.datetime.strptime('16Sep2012', '%d%b%Y')"
Python - Web Scraping - BeautifulSoup,"url = ""http://www.expatistan.com/cost-of-living/comparison/phoenix/new-york-city""
request = urllib2.Request(url)
opener = urllib2.build_opener()
request.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20130406 Firefox/23.0')
page = opener.open(request).read()
"
"Python, in a list of (a,b) pairs find the a value with the largest sum(b values)","def foo(lst):
    d = {}
    for (k,v) in lst: d[k] = d.get(k,0) + v     # Accumulate
    return max(d.items(), key=lambda x: x[1])   # Find max value, return corresponding tuple

print foo([(1,200),(1,50),(2,275)])             # (2, 275)
print foo([(1,100),(2,50),(2,300),(1,1000)])    # (1, 1100)
"
Finding difference between two very large lists,"exclude = set(b)  # O(m)

new_list = [x for x in a if x not in exclude]  # O(n)
"
rounding-up numbers within a tuple,">>> t = ('string 1', 1234.55555, 5.66666, 'string2')
>>> t2 = (t[0], round(t[1], 2), round(t[2], 2), t[3])
>>> t2
('string 1', 1234.56, 5.67, 'string2')
"
Python: removing duplicates from a list of lists,">>> k = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4]]
>>> import itertools
>>> k.sort()
>>> list(k for k,_ in itertools.groupby(k))
[[1, 2], [3], [4], [5, 6, 2]]
"
Passing values of unknown variables Python,"for name in sorted([v for v in dir(mod) if not v.startswith('__')], key=lambda x: x.lower()):
    # ...
"
searching dictionary for string and returning other value,"for i in location_hw_map: # Loops through every key in the dictionary
    if i in testString: # If the key is in the test string (if ""123456789"" is in ""uyrfr...""
        print location_hw_map[i] # Print the value of the key
        break # We break out of the loop incase of multiple keys that are in the test string 
"
Python Animation Timing,"import time

FPS = 30
last_time = time.time()
# whatever the loop is...
while True:
    # draw animation
    # pause so that the animation runs at 30 fps
    new_time = time.time()
    # see how many milliseconds we have to sleep for
    # then divide by 1000.0 since time.sleep() uses seconds
    sleep_time = ((1000.0 / FPS) - (new_time - last_time)) / 1000.0
    if sleep_time > 0:
        time.sleep(sleep_time)
    last_time = new_time
"
Pygame pause key,"self.PAUSED = False

while True:
    for event in pygame.event.get():
        if event.type==KEYDOWN:
            if event.key==K_q:
                self.PAUSED = not self.PAUSED


    if not self.PAUSED:

        x+=movex
        y+=movey
        screen.fill((r,0,0))
        screen.blit(bif,(0,0))
        screen.blit(player,(x,y)) 

        pygame.display.update() 
"
make query ManyToMany in sqlalchemy?,"class User(Base):
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(50), nullable=False, unique=True)


class Group(Base):
    id = Column(Integer, primary_key=True)
    name = Column(Unicode(50), nullable=False, unique=True)


class Membership(Base):
    user_id = Column(Integer, ForeignKey(User.id), primary_key=True)
    group_id = Column(Integer, ForeignKey(Group.id), primary_key=True)
    joined_on = Column(DateTime, nullable=False, default=datetime.utcnow, server_default=func.current_timestamp())

    user = relationship(User, backref=backref('memberships', collection_class=set))
    group = relationship(Group, backref=backref('memberships', collection_class=set))


User.groups = association_proxy('memberships', 'group')
Group.users = association_proxy('memberships', 'user')
"
Solve an implicit ODE (differential algebraic equation DAE),"import sys
from numpy import linspace
from scipy.integrate import odeint
from scipy.optimize import fsolve

y0 = [0, 5]
time = linspace(0., 10., 1000)
F_lon = 10.
mass = 1000.

def F_r(a, v):
    return (((1 - a) / 3) ** 2 + (2 * (1 + a) / 3) ** 2) * v

def constraint(a, v):
    return (F_lon - F_r(a, v)) / mass - a

def integral(y, _):
    v = y[1]
    a, _, ier, mesg = fsolve(constraint, 0, args=[v, ], full_output=True)
    if ier != 1:
        print ""I coudn't solve the algebraic constraint, error:\n\n"", mesg
        sys.stdout.flush()
    return [v, a]

dydt = odeint(integral, y0, time)
"
Creating A Linux at Job (scheduling) in Python,"sched_cmd = ['at', starttime]
command = 'python foo.py %s %s' % (arg1, arg2)
p = subprocess.Popen(sched_cmd, stdin=subprocess.PIPE)
p.communicate(command)
"
Iterator for each item in a 2D Python list and its immediate m by n neighbourhood,"board = [
    [1,0,1,0,1],
    [1,0,1,0,1],
    [1,0,1,0,1],
    [1,0,1,0,1],
    [1,0,1,0,1]
]

def clamp(minV,maxV,x):
    if x < minV:
        return minV 
    elif x > maxV:
        return maxV
    else:
        return x

def getNeighbour(grid,startx,starty,radius):
    width = len(grid[starty])
    height = len(grid)
    neighbourhood = []
    for y in range(clamp(0,height,starty-radius),clamp(0,height,starty+radius)+1):
        row = []
        for x in range(clamp(0,width,startx-radius),clamp(0,width,startx+radius)+1):
            if x != startx or (x==startx and  y != starty):
                row.append(grid[y][x])
        neighbourhood.append(row)
    return neighbourhood
"
flask - how to get parameters from a JSON GET request,">>> request.query_string
'{%22task%22:%22hello%22,%22url%22:%22/tasks/5fe7eabd-842e-40d2-849e-409655e0891d%22}&_=1411772296171'
>>> from urllib import unquote
>>> from flask import json
>>> unquote(request.query_string.partition('&')[0])
'{""task"":""hello"",""url"":""/tasks/5fe7eabd-842e-40d2-849e-409655e0891d""}'
>>> json.loads(unquote(request.query_string.partition('&')[0]))
{u'url': u'/tasks/5fe7eabd-842e-40d2-849e-409655e0891d', u'task': u'hello'}
"
How to substitute a numeric value in a string using Python?,"code = re.sub('define MY_STRING\s+0', 'define MY_STRING 1', code);
"
"Python objects confusion: a=b, modify b and a changes!",">>> a = [range(2), range(3)]
>>> b = copy.copy(a)          # shallow copy of a, equivalent to a[:]
>>> b[0] = range(4)
>>> a, b                      # setting an element of b leaves a unchanged
([[0, 1], [0, 1, 2]], [[0, 1, 2, 3], [0, 1, 2]])
>>> b[1].append(3)
>>> a, b                      # modifying an element of b modifies the element in a
([[0, 1], [0, 1, 2, 3]], [[0, 1, 2, 3], [0, 1, 2, 3]])

>>> a = [range(2), range(3)]
>>> b = copy.deepcopy(a)      # deep recursive copy of a
>>> b[1].append(3)
>>> a, b                      # modifying anything in b leaves a unchanged
([[0, 1], [0, 1, 2]], [[0, 1], [0, 1, 2, 3]])
"
"How to do linear regression, taking errorbars into account?","import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.formula.api as sm

x_list = [0.3333333333333333, 0.2886751345948129, 0.25, 0.23570226039551587, 0.22360679774997896, 0.20412414523193154, 0.2, 0.16666666666666666]
y_list = [0.13250359351851854, 0.12098339583333334, 0.12398501145833334, 0.09152715, 0.11167239583333334, 0.10876248333333333, 0.09814170444444444, 0.08560799305555555]
y_err = [0.003306749165349316, 0.003818446389148108, 0.0056036878203831785, 0.0036635292592592595, 0.0037034897788415424, 0.007576672222222223, 0.002981084130692832, 0.0034913019065973983]

# put x and y into a pandas DataFrame, and the weights into a Series
ws = pd.DataFrame({
    'x': x_list,
    'y': y_list
})
weights = pd.Series(y_err)

wls_fit = sm.wls('x ~ y', data=ws, weights=1 / weights).fit()
ols_fit = sm.ols('x ~ y', data=ws).fit()

# show the fit summary by calling wls_fit.summary()
# wls fit r-squared is 0.754
# ols fit r-squared is 0.701

# let's plot our data
plt.clf()
fig = plt.figure()
ax = fig.add_subplot(111, axisbg='w')
ws.plot(
    kind='scatter',
    x='x',
    y='y',
    style='o',
    alpha=1.,
    ax=ax,
    title='x vs y scatter',
    edgecolor='#ff8300',
    s=40
)

# weighted prediction
wp, = ax.plot(
    wls_fit.predict(),
    ws['y'],
    color='#e55ea2',
    lw=1.,
    alpha=1.0,
)
# unweighted prediction
op, = ax.plot(  
    ols_fit.predict(),
    ws['y'],
    color='k',
    ls='solid',
    lw=1,
    alpha=1.0,
)
leg = plt.legend(
    (op, wp),
    ('Ordinary Least Squares', 'Weighted Least Squares'),
    loc='upper left',
    fontsize=8)

plt.tight_layout()
fig.set_size_inches(6.40, 5.12)
plt.savefig(""so.png"", dpi=100, alpha=True)
plt.show()
"
joining string to next string in list,"#!/usr/bin/env python

def joiner(s, token):
    i = 0
    while i < len(s):
        if s[i] == token:
            yield s[i] + ' ' + s[i+1]
            i=i+2
        else:
            yield s[i]
            i=i+1

sentence = ['a','list','with','a','lot','of','strings','in','it']

for i in joiner(sentence, 'a'):
    print i
"
Python: del in for loop,"test1 = [1, 2, 3]
for i in reversed(range(len(test1))):
    print(test1[i])
    if test1[i] % 2 == 0:
        del test1[i]
>>> 3
>>> 2
>>> 1

print(test1)
>>> [1, 3]
"
Breaking out of infinite loop,"while True:
    print(""\n1. Surname\n2. D.O.B\n3. Quit"")
    try:
        select = int(input(""Please select an option: ""))
    except ValueError:
        print(""Not a valid input"")
    else:
        if select == 1:
            surnameSearch()
        elif select == 2:
            DOB_search(BkRdr)
        elif select == 3:
            break
        else:
            print(""That was an incorrect option, please try again:"")
"
Python OrderedDict ordered by date,"# assuming unordered_dict is a dict that contains your data 
ordered_dict = OrderedDict()
for key, value in sorted(unordered_dict.iteritems(), key=lambda t: t[0]):
    ordered_dict[key] = value
"
python : mysql : Return 0 when no rows found,"import MySQLdb as m

if __name__ == '__main__':
    db = m.connect(user='root',db='test')
    c = db.cursor()
    c.callproc(""per5min"")
    print(c.fetchall())
    c.close()
    db.close()
"
How to check if a character is upper-case in Python?,print(all(word[0].isupper() for word in words))
substitute of function pointers in python,"def foo(x):
    print(""foo: "" + x)

def bar(x):
    print(""bar: "" + x)

f = foo
f(""one"")
f = bar
f(""ten"")
"
Generating Combinations NOT Permutations. How?,"numbers = range(1, 59+1)
random.shuffle(numbers)
first5 = numbers[:5]
bonus = random.randint(1, 35)
print first5, bonus
"
Creating a program that prints true if three words are entered in dictionary order,"#Assuming list is called lst
print(all(lst[i].lower() < lst[i+1].lower() for i in range(len(lst)-1)))
"
python matplotlib plot sparse matrix pattern,"import matplotlib.pyplot as plt
from scipy.sparse import coo_matrix

def plot_coo_matrix(m):
    if not isinstance(m, coo_matrix):
        m = coo_matrix(m)
    fig = plt.figure()
    ax = fig.add_subplot(111, axisbg='black')
    ax.plot(m.col, m.row, 's', color='white', ms=1)
    ax.set_xlim(0, m.shape[1])
    ax.set_ylim(0, m.shape[0])
    ax.set_aspect('equal')
    for spine in ax.spines.values():
        spine.set_visible(False)
    ax.invert_yaxis()
    ax.set_aspect('equal')
    ax.set_xticks([])
    ax.set_yticks([])
    return ax
"
Using a tuples of values in sqlalchemy mapped collection,"from sqlalchemy import Integer, Boolean, String, Column, create_engine, \
    ForeignKey
from sqlalchemy.orm import Session, relationship
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.associationproxy import association_proxy
from sqlalchemy.orm.collections import attribute_mapped_collection
from sqlalchemy.ext import hybrid
from sqlalchemy.sql import tuple_

Base = declarative_base()

class SomeClass(Base):
    __tablename__ = 'sometable'

    id = Column(Integer, primary_key=True)
    tuple_elements = relationship(
                ""TupleElement"", 
                collection_class=attribute_mapped_collection(""name""),
                cascade=""all, delete-orphan""
            )
    items = association_proxy(""tuple_elements"", ""as_tuple"")

class TupleElement(Base):
    __tablename__ = 'tuple_data'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('sometable.id'), nullable=False)
    name = Column(String)
    col1 = Column(Integer)
    col2 = Column(Boolean)

    def __init__(self, key, tup):
        self.name = key
        self.col1, self.col2 = tup

    @hybrid.hybrid_property
    def as_tuple(self):
        return self.col1, self.col2

    @as_tuple.expression
    def as_tuple(self):
        return tuple_(self.col1, self.col2)

e = create_engine('postgresql://scott:tiger@localhost/test', echo=True)
Base.metadata.drop_all(e)
Base.metadata.create_all(e)
s = Session(e)

collection = SomeClass()
collection.items[""item name 1""] = (3, True)
collection.items[""item name 2""] = (1, False)
print collection.items

s.add(collection)
s.commit()

q = s.query(SomeClass).join(SomeClass.tuple_elements)
assert q.filter(TupleElement.as_tuple == (3, True)).first() is collection
assert q.filter(TupleElement.as_tuple == (5, False)).first() is None
print s.query(TupleElement.as_tuple).all()
"
Skipping more than one row in Python csv,"with open(""in.csv"") as f, open(""out.csv"",""w"") as out:
    r = islice(f, 5 ,None)
    out.writelines(r)
"
Working with large primes in Python,"def is_prime(num)
    # ...
    return not any(num % i == 0 for i in mrange(3, int(sqrt(num)) + 1, 2))
"
Create variables dynamically inside loop in python,"from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from functools import partial

class Box(BoxLayout):
    buttons={}
    def __init__(self, **kw):
        super(Box, self).__init__(**kw)
        for i in range(10):
            self.buttons[str(i)]=Button(text=str(i))
            self.add_widget(self.buttons[str(i)])
            self.buttons[str(i)].bind(on_release=partial(self.ping, str(i)))
    def ping(self, *arg):
        print 'test',str(arg)
class My(App):
    def build(self):
        return Box()
My().run()
"
How to get python to display current time (eastern),"import datetime

class EST5EDT(datetime.tzinfo):

    def utcoffset(self, dt):
        return datetime.timedelta(hours=-5) + self.dst(dt)

    def dst(self, dt):
        d = datetime.datetime(dt.year, 3, 8)        #2nd Sunday in March
        self.dston = d + datetime.timedelta(days=6-d.weekday())
        d = datetime.datetime(dt.year, 11, 1)       #1st Sunday in Nov
        self.dstoff = d + datetime.timedelta(days=6-d.weekday())
        if self.dston <= dt.replace(tzinfo=None) < self.dstoff:
            return datetime.timedelta(hours=1)
        else:
            return datetime.timedelta(0)

    def tzname(self, dt):
        return 'EST5EDT'

dt = datetime.datetime.now(tz=EST5EDT())
"
Find an xml element with some specific text using xpath or find in python using lxml,"from lxml import etree

# Create an ElementTree instance 
tree = etree.parse(""bookstore.xml"")  

# Get all 'book' elements that have a 'name' child with a string value of 'abc'
books = tree.xpath('book[name=""abc""]')

# Print name and price of those books
for book in books:
    print book.find(""name"").text, book.find(""price"").text
"
How to make sure if parameter is a list of numbers? (python),"def twoNumValues(myList):
    return len(myList) == 2 and all(isinstance(i, int) or isinstance(i, float) for i in myList)
"
Python - uniquifying(!) dictionary keys,"d2 = {}
for key,values in d.iteritems():
    d2['%s:%d' % (key, len(values)] = ' '.join(str(v) for v in values)
"
how to specify values in objects in django: is [] not equal to None?,"x = Booking.objects.filter(date_select='2011-12-3')
if x.exists():
   # There are some results from this query set
"
Python 3 null terminated string to list?,"mylist = chunkFromFile.split(b'\x00')
"
Python find pattern and replace entire line,"for line in old_file:
    new_file.write(subst if pattern in line else line)
"
RFID Arduino to Raspberry Pi serial read python action running twice,"import time
history = {}

while True:
    try:
        data = ser.readline().decode(""utf-8"")
        when = history.get(data, None)
        if when is not None and (time.time()-when) < 300:
            continue
        history[data] = time.time()
"
converting numbers to consonant-vowel pairs,"vowels = ""aeiou""
consonants = ""bcdfghjklmnpqrstvwyz""

def pintoword(n):
    a = []
    while n:
        n, r = divmod(n, 100)
        c, v = divmod(r, 5)
        a.append(vowels[v])
        a.append(consonants[c])
    return ''.join(reversed(a))

for n in (3463470, 3464140):
    print n, pintoword(n)
"
Compare lists of strings regarding the suffixes of their respective elements,"inds = [ind for ind, sub in enumerate(myListOfList) if st.issubset(ch[0] for ch in sub)
        and all(ch[-1] == sub[0][-1] for ch in sub)]

print(inds)
[1, 6, 7]
"
wait for shell command to complete,p.wait()
Print 10 most frequently occurring words of a text that including and excluding stopwords,"from collections import Counter
from string import punctuation


def content_text(text):
    stopwords = set(nltk.corpus.stopwords.words('english')) # 0(1) lookups
    with_stp = Counter()
    without_stp  = Counter()
    with open(text) as f:
        for line in f:
            spl = line.split()
            # update count off all words in the line that are in stopwrods
            with_stp.update(w.lower().rstrip(punctuation) for w in spl if w.lower() in stopwords)
               # update count off all words in the line that are not in stopwords
            without_stp.update(w.lower().rstrip(punctuation)  for w in spl if w  not in stopwords)
    # return a list with top ten most common words from each 
    return [x for x in with_stp.most_common(10)],[y for y in without_stp.most_common(10)]
wth_stop, wthout_stop = content_text(...)
"
Mongoengine - using icontains with all,"import re

input_list = ['Lo']
converted_list = [re.compile(q, re.I) for q in input_list]

print(Blah.objects(__raw__={""someList"": {""$all"": converted_list}}).count())
"
"Assigning functions as attributes of an object, then calling without the implied 'self' arguement?","class dance(object):
    dance_move=staticmethod(fish_slap)
"
Generalized reference that allows efficient deletion from a variety of containers,"# to get __hash__ and __eq__ return id(self)
class Reference:
  def __init__(self, item):
    self.item = item

class RemovalAPI:
  def add_removal_info(self, item, removal_info):
    try:
      references = item.__reference
    except AttributeError:
      references = item.__reference = {}
    references[Reference(self)] = removal_info

  def get_removal_info(self, item):
    try:
      references = item.__reference
      self_reference = Reference(self)
      return references[self_reference]



class Container(list, RemovalAPI):
  def __iter__(self):
    for i in range(len(self)):
      item = self[i]
      self.add_removal_info(item, i)
      yield item

  def remove(self, item):
    removal_info = self.get_removal_info(item)
    del self[removal_info]

  def insert(self, item):
    self.add_removal_info(item, len(self))
    self.append(item)
    # do whatever post-processing I need
    # ...
"
Save list items to a new list if the item contains specific substring,"list = [""Maurice is smart"",""Maurice is dumb"",""pie"",""carrots""]

new_list = [x for x in list if ""Maurice"" in x]

print(new_list)
"
how to use only one loop for iterating over a file in Python?,"for line in fileR:
    line = line.rstrip()
"
Bash style process substitution with Python's Popen,"p = Popen([""pram_axdnull"", str(kmer), input_filename, ""-""],
          stdin=PIPE, stdout=PIPE)
output = p.communicate(generate_kmers(3))[0]
"
"Doc, rtf and txt reader in python",txt = open('file.txt').read()
Comparing string lists to find missing value of sequence,"if any(day in daysOfTheWeek for day in days):
    for i, day in enumerate(days):
        if day in daysOfTheWeek:
            j=daysOfTheWeek.index(day)
            repaired=[daysOfTheWeek[k % len(daysOfTheWeek)].capitalize() 
                                         for k in range(j-i, j+len(days)-i)]
            print days
            print repaired 
            break
else:
    print 'cannot be repaired'    
"
Instance attribute mutability (very basic),"class bob:
    def __init__(self, n):
        self.n=n
        self.i=[0]

bob1=bob(2)

i = bob1.i
print i #>>0
bob1.i[0] += 1
print(bob1.i)
print i #>> now both are [1]
"
Nested python loop revisited,"n = len(delta_vec)
jj, kk = np.triu_indices(n, 1)
ww = 1. / np.exp((mjd_list[kk] - mjd_list[jj]) / avg_time)
w_sum = np.sum(ww)
PP = delta_vec[jj] * delta_vec[kk]
j_index = np.sum(ww * np.sign(PP) * np.sqrt(np.abs(PP)))
"
Removing words from a string,"In [2]: strs='the quick brown fox'

In [3]: strs.replace('quick brown','')
Out[3]: 'the  fox'

In [4]: "" "".join(strs.replace('quick brown','').split())
Out[4]: 'the fox'                          #single space between 'the' and 'fox'
"
"In python, test for 1 or 3 consecutive instances of a string, but not 2 (without regex)","isItA = '*' in x and not  '**' in x
"
make a increaseKey for list in python,"class OffsetDict(dict):
    def __init__(self, lst, offset):
        self.lst = lst
        self.offset = offset
    def __nonzero__(self):
        return bool(self.lst)
    def iteritems(self):
        return enumerate(self.lst, self.offset)

A = [""a"", ""b"", ""c""]
d = OffsetDict(A, 5)
print json.dumps(d)
"
placeholder functions in sympy,"In [5]: G = sm.Lambda(x, sqrt(x) + 1)
In [6]: expr.subs(F, G)
Out[6]: sqrt(a - b) - sqrt(b**2 - c)
"
Passing arguments to fsolve,"from numpy import sqrt   # leave this outside the function
from scipy.optimize import fsolve

#  here it is     V
def terminalV(Vt, *data):
    ro_p, ro, D_p, mi, g = data   # automatic unpacking, no need for the 'i for i'
    return sqrt((4*g*(ro_p - ro)*D_p)/(3*C_d(Re(data, Vt))*ro)) - Vt

data = (1800, 994.6, 0.208e-3, 8.931e-4, 9.80665)
Vt0 = 1
Vt = fsolve(terminalV, Vt0, args=data)
"
Write query rows in csv python,"f = csv.writer(open(""file.csv"", ""w""))
for row in data:
    f.writerow([str(row)])
"
How to create a stock quote fetching app in python,"import urllib
import re

def get_quote(symbol):
    base_url = 'http://finance.google.com/finance?q='
    content = urllib.urlopen(base_url + symbol).read()
    m = re.search('id=""ref_694653_l"".*?>(.*?)<', content)
    if m:
        quote = m.group(1)
    else:
        quote = 'no quote available for: ' + symbol
    return quote
"
How do I divide the members of a list by the corresponding members of another list in Python?,"[c/t for c,t in zip(conversions, trials)]
"
open file named with two digit year-Python,">>> today.strftime('ex%y%m%d.log')
'ex130625.log'
"
Finding the second smallest int in list of list in Python 3 with recursion,"import sys 

def find(abc):
    #base case
    if len(abc) == 2:
        if isinstance(abc[0], list) and isinstance(abc[1], list):
            re = find(abc[0] + abc[1:])
        elif isinstance(abc[1], list):
            re = find(abc[:1] + abc[1])
        elif isinstance(abc[0], list):
            re = find(abc[0] + abc[1:])
            # ^^^ fixed typo (ifs could be simplified by dropping first if)
        else:
            if abc[0] > abc[1]:
                re = (abc[0], abc[1])
            else:
                re = (abc[1], abc[0])
    # recursive step
    else:
        # CHANGE HERE
        if len(abc) == 0:   # @HACK: handle empty list
            return (sys.maxsize, sys.maxsize)
        # CHANGE ENDS
        if isinstance(abc[0], list):
            re = find(abc[0] + abc[1:])
        # if this element is integer
        else:
            current = abc[0]
            second, first = find(abc[1:])
            if (second < current):
                re = (second, first)
            elif (current > first) and (second >= current):
                re = (current, first)
            else:
                re = (first, current)            
    return re # @TODO: possibly filter out maxsize in final result
"
Pyparsing - literal text with line breaks in varying locations,"from pyparsing import *

my_expr = Literal(""The"") + ""quick"" + ""brown"" + ""fox"" + ""jumps"" + ""over"" + ""the"" + ""lazy"" + ""dog""

string_1 = """"""The quick brown 
fox jumps over the lazy dog.
""""""

string_2 = """"""The quick brown fox jumps
over the lazy dog.
""""""

for test in (string_1, string_2):
    print '-'*40
    print test
    print my_expr.parseString(test)
    print
"
Python- Code Optimization Help- Find all dictionary-valid anagrams of a word,"def wordIterator(dictionaryFilename):
    with open(dictionaryFilename,'r') as f:
        for line in f:
            word = line.strip()
            yield word

def largestAnagram(words):
    import collections
    d = collections.defaultdict(list)
    for word in words:
        sortedWord = str(sorted(word))
        d[ hash(sortedWord) ].append(word)
    maxKey = max( d.keys(), key = lambda k : len(d[k]) )
    return d[maxKey]

iter = wordIterator( 'C:\\Python32\\megalist.txt' )
#iter = ( word for word in iter if len(word) == 5 )
print largestAnagram(iter)
"
What's the easiest way to convert a list of hex byte strings to a list of hex integers?,"[int(x, 16) for x in L]"
Handy return values in Python,"def test(a):
    ''' Always returns a tuple, composed of a Flag, followed by 0 or more data items '''
    if a > 0:
        return True,
    else:
        return False, 123, 'foo'

return = test(a)
flag,rest = return[0],return[1:]
for x in rest: print x
"
Renaming files according to a set of rules,">>> os.path.splitext('Zipped Party Food Invoice 22.09.2011.xlsx.zip')
('Zipped Party Food Invoice 22.09.2011.xlsx', '.zip')
"
Use a Variable in a Function Without Passing as an Argument,"def f(foo):
    print(foo)
    foo += 1
    return foo

foo = f(23)
print(foo)
"
Why isn't my solution to Project Euler 9 working?,"triplets = []
for a,b in combinations(range(1,1000),2):
  if 1000000-2000*a-2000*b+2*a*b==0:
    triplets.append([a, b, sqrt(a**2 + b**2)])
"
Is there a way to access varargs without specifying default value arguments in Python,"def foo(*args, **kw):
    a = kw.get('a', MyComplexObject())
    b = kw.get('b', b=Something())
    print a, b, args
"
"seaborn FacetGrid , ranked barplot separated on row and col","g = sns.FacetGrid(tips, col=""sex"", row=""smoker"", sharex=False)

def ordered_barplot(data, **kws):
    x_order = data.day.value_counts().order().index[-2:]
    sns.barplot(data.day, x_order=x_order)

g.map_dataframe(ordered_barplot)
"
Get column name where value is something in pandas dataframe,"In [4]: row = df_result.irow(0) # an example row to pass to get_col_name

In [5]: row
Out[5]: 
value    1181.220328
Name: 1979-01-01 00:00:00

In [6]: row.name # use to get rows of df
Out[6]: <Timestamp: 1979-01-01 00:00:00>

In [7]: df.ix[row.name]
Out[7]: 
col5    1181.220328
col4     912.154923
col3     648.848635
col2     390.986156
col1     138.185861
Name: 1979-01-01 00:00:00

In [8]: b = (df.ix[row.name] == row['value'])
        #checks whether each elements equal row['value'] = 1181.220328  

In [9]: b
Out[9]: 
col5     True
col4    False
col3    False
col2    False
col1    False
Name: 1979-01-01 00:00:00

In [10]: b.argmax() # index of a True value
Out[10]: 0

In [11]: b.index[b.argmax()] # the index value (column name)
Out[11]: 'col5'
"
How to find combinations of a list in a Dictionary?,">>> from itertools import permutations
>>> yourdictionary = {(1,3,2):'text',(3,1,2):'text'}
>>> yourlist = [1, 2, 3]
>>> print any(tuple(perm) in yourdictionary for perm in permutations(yourlist))
True
>>> yourdictionary = {frozenset([1, 2, 3]): 'text', frozenset([4, 5, 6]): 'othertext'}
>>> frozenset(yourlist) in yourdictionary
True
>>> frozenset([2, 3]) in yourdictionary
False
"
What is the difference between importing matplotlib and matplotlib.pyplot?,"from matplotlib.pyplot import *

def plot():
    print ""Hello!""

plot()
"
How would I convert words to numbers in python 3 (own keys and values)?,"lines = """"""am writing a Python script that will take words in a text file and convert them into numbers (my own, not ASCII, so no ord function).
I have assigned each letter to an integer and would like each word to be the sum of its letters' numerical value.
The goal is to group each word with the same numerical value into a dictionary.
I am having great trouble recombining the split words as numbers and adding them together""""""

from collections import defaultdict

d = defaultdict(list)
for line in lines.splitlines():
    for word in line.split():
        d[sum(l_n.get(ch,0) for ch in word)].append(word)
"
"How to merge Lists in Python?Merging python lists (0,1,2) & (A,B,C) to get (0A, 1B, 2C)",">>> A = ('0','1','2','3')
>>> B = ('A','B','C','D')
>>> [x + y for x, y in zip(A, B)]
['0A', '1B', '2C', '3D']
"
GAE - How can I combine the results of several asynchronous url fetches?,"@ndb.tasklet
def get_urls(urls):
  ctx = ndb.get_context()
  result = yield map(ctx.urlfetch, urls)
  contents = [r.content for r in result if r.status_code==200]
  raise ndb.Return('\n'.join(contents))
"
Why is my code so slow?,"""""""
Test module for cProfile stats

""""""



import time

def wait(t):
    time.sleep(t)

wait(5)
"
Pandas merge with logic,"import numpy as np
import pandas as pd
Timestamp = pd.Timestamp
df1 = pd.DataFrame({'date': (Timestamp('2012-08-01'),
                             Timestamp('2012-08-02'),
                             Timestamp('2012-08-03'),
                             Timestamp('2012-10-29'),
                             Timestamp('2012-10-30'),
                             Timestamp('2012-11-01'),
                             Timestamp('2012-10-15'),  # on then end_date
                             Timestamp('2012-09-04'),  # outside an interval
                             Timestamp('2012-09-05'),  # on then start_date
                             ),
                    'value': (82, 20, 94, 58, 73, 1, 2, 3, 4)})

print(df1)
df2 = pd.DataFrame({'end_date': (
                        Timestamp('2012-10-15'),
                        Timestamp('2012-09-04'),
                        Timestamp('2012-11-01')),
                    'other_value': (""foo"", ""bar"", ""foobar""),
                    'start_date': (
                        Timestamp('2012-09-05'),
                        Timestamp('2012-08-01'),
                        Timestamp('2012-10-16'))})
df2 = df2.reindex(columns=['start_date', 'end_date', 'other_value'])
df2.sort(['start_date'], inplace=True)
print(df2)

# Convert to DatetimeIndexes so we can call the searchsorted method
date_idx = pd.DatetimeIndex(df1['date'])
start_date_idx = pd.DatetimeIndex(df2['start_date'])
# Add one to the end_date so the original end_date will be included in the
# half-open interval.
end_date_idx = pd.DatetimeIndex(df2['end_date'])+pd.DateOffset(days=1)

start_idx = start_date_idx.searchsorted(date_idx, side='right')-1
end_idx = end_date_idx.searchsorted(date_idx, side='right')
df1['idx'] = np.where(start_idx == end_idx, end_idx, np.nan)

result = pd.merge(df1, df2, left_on=['idx'], right_index=True)
result = result.reindex(columns=['idx', 'date', 'value', 'other_value'])
print(result)
"
creating dictionary containing list values using a comprehension,"{c: [x[0] for x in g16.nodes(data=True) if x[1]['color'] == c] for c in colors}
"
Slicing array in regions - Python,"mask = mask.repeat(4, axis=0).repeat(4, axis=1)
# Then you apply the mask using 
values = data[mask]
"
Pandas: Counting the proportion of zeros in rows and columns of dataframe,"print('rows')
print(df[df == 0].count(axis=1)/len(df.columns))
print('cols')
print(df[df == 0].count(axis=0)/len(df.index))
"
How to convert string input into tuple with integers and a string,"def parse(line):
    values = line.split('/', 3)
    if len(values) < 4:
        return None
    else:
        types = [int, int, int, str]
        try:
            return tuple(type(value) for type, value in zip(types, values))
        except ValueError:
            return None
"
DictReader change keys to upper,"new = [{k.upper(): v for k, v in r.iteritems()} for r in reader]
"
"What is the difference between a function, an unbound method and a bound method?",">>> types.MethodType(f1, None, C).__get__(C(), C)
<bound method C.f1 of <__main__.C object at 0x2abeecf87310>>
"
Pythonic way to check conditions,"if foo not in (100, 101):
"
"how to create dict inside one more dict, without overwriting old data","f = {}
for item in a:
    ak1,ak2 = item.split('_')
    f[ak1] = {ak2:{}}
for item in b:
    bk1,bk2 = item.split('_')
    next(f[akey][bk1] 
            for akey in f 
                if bk1 in f[akey])[bk2] = {}
for item in c:
    ck1,ck2 = item.split('_')
    next(f[akey][bkey][ck1] 
            for akey in f 
                for bkey in f[akey] 
                    if ck1 in f[akey][bkey])[ck2] = []
for item in d:
    dk1,dk2 = item.split('_')
    next(f[akey][bkey][ckey][dk1] 
            for akey in f 
                for bkey in f[akey]
                    for ckey in f[akey][bkey]
                        if dk1 in f[akey][bkey][ckey]).append(dk2)

import pprint
pprint.pprint(f)
"
Strip common indentation from the beginning of each line similar to what pydoc help does with docstrings,"import textwrap

def my_function(s):
    first, *rest = s.splitlines(keepends=True) # the first line is special
    return first + textwrap.dedent(''.join(rest))
"
Proportional rounding error,"from random import randrange

data_set = [randrange(100, 1000) for x in range(5)]
required_amount = 20
special_number = sum(data_set) // required_amount

print(""Data set:"")
print(data_set)
print(""Special number:"")
print(special_number)

# divmod() returns a pair of numbers, split them into quotients and remainders
pairs = [divmod(x, special_number) for x in data_set]
proportional_data_set = [x[0] for x in pairs]
remainder = [x[1] for x in pairs]

print
print(""Proportional data set before adjusting:"")
print(proportional_data_set), ""="", sum(proportional_data_set)
print(""Remainders:"")
print(remainder)

while sum(proportional_data_set) < required_amount:
    i = remainder.index(max(remainder))    # index of the highest remainder
    proportional_data_set[i] += 1          # add another marble to this index
    remainder[i] = -1                      # don't use this remainder again

print
print(""Proportional data set after adjusting:"")
print(proportional_data_set), ""="", sum(proportional_data_set)
print(""Remainders:"")
print(remainder)
"
How do I print bold text in Python?,print('\x1b[1m' + 'Hello')
How to get each Xbits from a int with python,"def get_xbits_list(num, x):
    mask = 2**x - 1
    return [(num >> (i * x)) & mask for i in reversed(xrange(32/x))]
"
How to get all sub-elements of an element tree with Python ElementTree?,[elem.tag for elem in a.iter() if elem is not a]
why does order of loop nesting matter python?,"row = table[1]  # get row 1 (2nd item of the outer list)
item = row[3]  # from row 1, get column 3 (4th item of the inner list)
"
How can I combine three subprocess.popen into one line?,"p = subprocess.Popen('ps ax | grep bash | wc -l', stdout=subprocess.PIPE, shell=True)
"
Python initializing a list of lists,x = [[] for i in range(3)]
how to get the key or values one by one from the dictionary?,">>> dictionary={'abc','dsw','lol'}
>>> type(dictionary)
<type 'set'>
>>> dir(dictionary)
['__and__', '__class__', '__cmp__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__iand__', '__init__', '__ior__', '__isub__', '__iter__', '__ixor__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'add', 'clear', 'copy', 'difference', 'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update']
>>> dictionary.pop()
'dsw'
>>>
"
Collect parts of duplicated elements in a list and merge them in just one element,"from collections import defaultdict
orig = ['a=1', 'b=2', 'c=3', 'd=4', 'd=5', 'd=6', 'e=7']
d = defaultdict(list)
for item in orig:
    k,v = item.split('=',1)
    d[k].append(v)

new = ['{0}={1}'.format(k,','.join(v)) for k,v in d.items()]
print(new)  #['a=1', 'c=3', 'b=2', 'e=7', 'd=4,5,6']
"
Groupby items within a list in a Pandas DataFrame,"df = pd.DataFrame(...)
all_tags = [...]
groups = df.tags.map(lambda cell: tuple(tag in cell for tag in all_tags))
df.index = pd.MultiIndex.from_tuples(groups.values, names=all_tags)
for t in all_tags:
    print(t, df.xs(True, level=t).views.sum())
"
"""from A import B.C"" in Python?","import importlib
from A import B
importlib.import_module('A.B.C')
importlib.import_module('A.B.D')
# Now you can use B.C & B.D
"
python-re: How do I match an alpha character,">>> import re
>>> rx = re.compile(""[^\W\d_]+"", re.UNICODE)
>>> rx.findall(u""abc_def,k9"")
[u'abc', u'def', u'k']
"
python argparse subcommand with dependency and conflict,"def parse_options():
    parser = argparse.ArgumentParser(description='A Tool')
    subparsers = parser.add_subparsers(help='sub-command help')

    #create the parser for the 'download' command
    download_parser = subparsers.add_parser('download', help='download help')
    download_parser.add_argument('--interval', type=int, help='interval help')
    download_parser.add_argument('--from', type=int)
    download_parser.add_argument('--build', type=int)

    opt=parser.parse_args()
    from_interval=[getattr(opt,key) is not None for key in ('from','interval')]
    if opt.build is not None:
        if any(from_interval):
            sys.exit('error!')
    elif not all(from_interval):
        sys.exit('error!')
    return opt
"
"In Python, is it possible to escape newline characters when printing a string?",">>> string = ""abc\ndef""
>>> print (repr(string))
>>> 'abc\ndef'
"
Writing a results to a .txt file using csv,"for name in names:
    with open(""output.txt"", ""a"") as f:
        f.writelines(name)
"
Using Python Variables in one Instance,"api_tok = 'api_token=e27e901c196b8f0399bc79'
scanjob = requests.get('http://10.0.0.127:4242/scanjob/1?%s'  % api_tok)
"
Can I express named Python string arguments more succintly?,"a = {'name': 'foo', age: 12}
print '{name} is {age} old'.format(**a)
"
List of compiled regexes in Python,"text = REPLACE_1.sub(r'REPLACE_1', str(row[0]))
text = REPLACE_1.sub(r'REPLACE_1', text)
# ..
text = REPLACE_99.sub(r'REPLACE_99', text)
text = REPLACE_100.sub(r'REPLACE_199', text)
"
Generate all permutations of a list in lexicagraphical order,"def ourPermutations(n):
    x=list(range(1,n+1))
    permList = []
    permList+=[x]

    xcopy = x[:]
    finalPerm = xcopy[::-1]

    while x != finalPerm:
        x = x[:]
        istar = n-2
        while x[istar] > x[istar+1]:
            istar -= 1
        jstar = n-1
        while x[jstar] < x[istar]:
            jstar -= 1
        x[istar],x[jstar] = x[jstar],x[istar]
        if istar+1 == n-1:
            x = x[:]
        else:
            a = x[istar+1:]
            a = a[::-1]
            x = x[:istar+1] + a
        permList += [x]

    return permList

>>> ourPermutations(3)
[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]
>>> ourPermutations(4)
[[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [
4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]
"
"""td"" before ""for"" loop","all_tds = []
for td in soup.findAll(""table"", bgcolor=""#ffffff""):
    all_tds.append(td)
"
How to delay input,"if userClickedAddEntryButton: # <-- I made this up
    date=raw_input('date')
    amount=raw_input('amount')
    desc=raw_input('desc')
    account=raw_input('account')
    addEntry(date, amount, desc, account)        
"
Replace specific values in a matrix using Python,"import numpy as np
import scipy       #older versions may require `import scipy.sparse`

matrix = np.matrix(np.random.randn(10, 5))
maxes = matrix.argmax(axis=1).A1           
                      # was .A[:,0], slightly faster, but .A1 seems more readable
n_rows = len(matrix)  # could do matrix.shape[0], but that's slower
data = np.ones(n_rows)
row = np.arange(n_rows)
sparse_matrix = scipy.sparse.coo_matrix((data, (row, maxes)), 
                                        shape=matrix.shape, 
                                        dtype=np.int8)
"
Remove duplicate dict in list in Python,"[dict(t) for t in set([tuple(d.items()) for d in l])]
"
How to create an array of dataframes in Python,"import datetime as dt 
import numpy as np
import pandas as pd

dates_list = [dt.datetime(2015,11,i+1) for i in range(3)]
month_day_list = [d.strftime(""%m%d"") for d in dates_list]

dataframe_collection = {} 

for month_day in month_day_list:
    new_data = np.random.rand(3,3)
    dataframe_collection[month_day] = pd.DataFrame(new_data, columns=[""one"", ""two"", ""three""])

for key in dataframe_collection.keys():
    print(""\n"" +""=""*40)
    print(key)
    print(""-""*40)
    print(dataframe_collection[key])
"
How to evaluate the sum of values within array blocks,"Z_new = np.einsum('ijkl->ik',Z.reshape(5,20,5,20))
"
convert image to byte and split into fragments,"from PIL import Image
import numpy as np

im = Image.open('py.png')
image_array = np.array(im)
"
More pythonic way of skipping header lines,"def iscomment(s):
   return s.startswith('#')

from itertools import dropwhile
with open(filename, 'r') as f:
    for line in dropwhile(iscomment, f):
       # do something with line
"
How to substitute a numeric value in a string using Python?,"code = re.sub('(define MY_STRING\s+)0', ""\\1 1"", code);
## \\1 is the captured group on regex inside (...)
"
Apply a list of decorators to a callable?,"def yad(decorators):
    def decorator(f):
        for d in reversed(decorators):
            f = d(f)
        return f
    return decorator
"
python remove element containing namespace,"for checkActor in tree.xpath('//ns:Actor', namespaces=namespaces):
    checkActor.getparent().remove(checkActor)

print etree.tostring(tree, pretty_print=True, xml_declaration=True)
"
python natural comparison between strings?,"import re
from itertools import groupby

def regex_key(key):
    """"""Traditional, regular-expression-based nat-sort key.""""""
    convert = lambda text: int(text) if text.isdigit() else text.lower()
    return [convert(c) for c in re.split('([0-9]+)', key)]

def fast_key(value):
    """"""Attempt #1 to go faster than 'slow' 're' library.""""""
    result = []
    for is_int, chunk in groupby(value.lower(), str.isdigit):
        if is_int:
            result.append(int(''.join(chunk)))
        else:
            result.append(tuple(chunk))
    return result

def faster_key(value):
    """"""Attempt #2.  'Low-level' python.""""""
    start_idx = 0
    is_num = None
    result = []
    for idx, c in enumerate(value.lower()):
        now_is_num = c.isdigit()
        if is_num is not None and now_is_num != is_num:
            buf = value[start_idx:idx]
            result.append(int(buf) if is_num else buf)
            start_idx = idx
            is_num = None
        is_num = now_is_num
    buf = value[start_idx:]
    result.append(int(buf) if is_num else buf)
    return result
"
Error in RK4 algorithm in Python,"import numpy as np
import math
from matplotlib import pyplot as plt
from matplotlib import animation


#----- Numerical integration of ODE via fixed-step classical Runge-Kutta -----

def RK4Stream(odefunc,TimeSpan,uhat0,nt):
    h = float(TimeSpan[1]-TimeSpan[0])/nt
    print h 
    w = uhat0
    t = TimeSpan[0]
    while True:
        w = RK4Step(odefunc, t, w, h)
        t = t+h
        yield t,w

def RK4Step(odefunc, t,w,h):
    k1 = odefunc(t,w)
    k2 = odefunc(t+0.5*h, w+0.5*k1*h)
    k3 = odefunc(t+0.5*h, w+0.5*k2*h)
    k4 = odefunc(t+h,     w+k3*h)
    return w + (k1+2*k2+2*k3+k4)*(h/6.)

#----- Constructing the grid and kernel functions -----
L   = 40
nx  = 512
x   = np.linspace(-L/2,L/2, nx+1)
x   = x[:nx]  

kx1 = np.linspace(0,nx/2-1,nx/2)
kx2 = np.linspace(1,nx/2,  nx/2)
kx2 = -1*kx2[::-1]
kx  = (2.* np.pi/L)*np.concatenate((kx1,kx2))

def uhat2vhat(t,uhat):
    return np.exp( 0.5j * (kx**2) *t) * uhat

def vhat2uhat(t,vhat):
    return np.exp(- 0.5j * (kx**2) *t) * vhat

#----- Define RHS -----
def uhatprime(t, uhat):
    u = np.fft.ifft(uhat)
    return - 0.5j * (kx**2) * uhat + 1j * np.fft.fft((abs(u)**2) * u)

def vhatprime(t, vhat):
    u = np.fft.ifft(vhat2uhat(t,vhat))
    return  1j * uhat2vhat(t, np.fft.fft((abs(u)**2) * u) )

#------ Initial Conditions -----
u0      = 1./np.cosh(x) #+ 1./np.cosh(x+0.4*L)+1./np.cosh(x-0.4*L) #symmetric or remove jump at wrap-around
uhat0   = np.fft.fft(u0)

#------ Solving for ODE -----
t0 = 0; tf = 10.0;
TimeSpan = [t0, tf]
# nt       = 500 # limit case, barely stable, visible spurious bumps in phase
nt       = 1000 # boring  but stable. smaller step sizes give same picture
vhat0 = uhat2vhat(t0,uhat0)

fig = plt.figure()
ax1 = plt.subplot(211,ylim=(-0.1,2))
ax2 = plt.subplot(212,ylim=(-3.2,3.2))
line1, = ax1.plot(x,u0)
line2, = ax2.plot(x,u0*0)

vhatstream = RK4Stream(vhatprime,[t0,tf],vhat0,nt)

def animate(i):
    t,vhat = vhatstream.next()
    print t
    u = np.fft.ifft(vhat2uhat(t,vhat))
    line1.set_ydata(np.real(np.abs(u)))
    line2.set_ydata(np.real(np.angle(u)))
    return line1,line2

anim = animation.FuncAnimation(fig, animate, interval=15000/nt+10, blit=False)

plt.show()
"
Python: how to get create instance of a class within same class?,"@classmethod
def get_cars_from(cls, start=0, end=10):
    return [cls(i) for i in range(start, end)]
"
How to fake type with Python,"def dosomething(some_user=None, some_otherthing=None):
    if some_user is not None:
        #do the ""User"" type action
    elif some_otherthing is not None:
        #etc...
    else:
         raise ValueError(""not enough arguments"")
"
Reverse itemgetter (itemsetter?): inserting a list of items into specific positions in a larger list,"def itemsetter(*items):
    if len(items) == 1:
        item = items[0]
        def g(obj, value):
            obj[item] = value
    else:
        def g(obj, *values):
            for item, value in zip(items, values):
                obj[item] = value
    return g
"
Receiving null values from python mixer,"from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy
from mixer import fakers as f
from mixer.backend.flask import mixer

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite://'

db = SQLAlchemy(app)
mixer.init_app(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True)
    email = db.Column(db.String(120), unique=True)

    def __repr__(self):
        return '<User %r>' % self.username

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        user = mixer.blend(User, username=f.get_username(), email=f.get_email())
        print user.id, user.username, user.email

        # Prints: 1 lover_boots robinson1963@google.vn
"
Obtaining column from wikipedia table using beautifulsoup,"from bs4 import BeautifulSoup
import requests


source_code = requests.get('http://en.wikipedia.org/wiki/Taylor_Swift_discography')
soup = BeautifulSoup(source_code.content)

table = soup.find('span', id='Singles').parent.find_next_sibling('table')
for single in table.find_all('th', scope='row'):
    print(single.text)
"
How to start a background process in Python?,"subprocess.Popen(['rm', '-r', 'some.file'])"
Equivalent of objects.latest() in App Engine,"class LatestMixin(object):
    """"""A mixin for db.Model objects that will add a `latest` method to the
    `Query` object returned by cls.all(). Requires that the ORDER_FIELD
    contain the name of the field by which to order the query to determine the
    latest object.""""""

    # What field do we order by?
    ORDER_FIELD = None

    @classmethod
    def all(cls):
        # Get the real query
        q = super(LatestMixin, cls).all()
        # Define our custom latest method
        def latest():
            if cls.ORDER_FIELD is None:
                raise ValueError('ORDER_FIELD must be defined')
            return q.order('-' + cls.ORDER_FIELD).get()
        # Attach it to the query
        q.latest = latest
        return q

# How to use it
class Foo(LatestMixin, db.Model):
    ORDER_FIELD = 'timestamp'
    timestamp = db.DateTimeProperty(auto_now_add=True)

latest = Foo.all().latest()
"
Sort dict in jinja2 loop,">>> from collections import OrderedDict
>>> league={'PEDD United': {'id': 37828, 'rank': 12, 'totalpts': 307},'Fc Mbonabushia': {'id': 205633, 'rank': 6, 'totalpts': 356},'FC Slurp': {'id': 933573, 'rank': 11, 'totalpts': 312},'KFC_Overijse': {'id': 38861, 'rank': 5, 'totalpts': 362},'Fc Paris': {'id': 1538051, 'rank': 2, 'totalpts': 396}}
>>> league = OrderedDict(sorted(league.items(), key= lambda x: x[1]['totalpts'], reverse=True))
>>> print league
OrderedDict([('Fc Paris', {'id': 1538051, 'rank': 2, 'totalpts': 396}), ('KFC_Overijse', {'id': 38861, 'rank': 5, 'totalpts': 362}), ('Fc Mbonabushia', {'id': 205633, 'rank': 6, 'totalpts': 356}), ('FC Slurp', {'id': 933573, 'rank': 11, 'totalpts': 312}), ('PEDD United', {'id': 37828, 'rank': 12, 'totalpts': 307})])
"
Add possibility to launch commands from browser,"import PySide.QtWebKit
import sys
from PyQt4 import QtGui


class BrowserWindow(PySide.QtWebKit.QWebView):

    SCRIPT_TEMPLATE = 'document.elementFromPoint({}, {});'

    def __init__(self, _parent):
        super(BrowserWindow, self).__init__()
        PySide.QtWebKit.QWebView(None)
        print('init')

    def mousePressEvent(self, event):
        # prepare script to execute
        frame = self.page().mainFrame()
        scroll = frame.scrollPosition()
        x = scroll.x() + event.x()
        y = scroll.y() + event.y()
        script = self.SCRIPT_TEMPLATE.format(x, y)

        # get 'src' attribute
        obj = frame.evaluateJavaScript(script)
        if 'src' in obj:
            src = obj['src']
        else:
            src = None

        # delegate event handling to super class
        if not src:
            return super(BrowserWindow, self).mousePressEvent(event)

        # download image and set wallpaper


if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    view = BrowserWindow(None)
    view.load(""http://google.com"")
    view.show()
    sys.exit(app.exec_())
"
NumPy: 2D array from a list of arrays and scalars,"In [201]: %timeit something([x, 0, x]*10)
10000 loops, best of 3: 37.3 µs per loop
"
Numpy arctan2 of multidimensional array,"import numpy as np

def do_complicated_math(r, g, b):
    rgb = np.array([r, g, b])

    # create a transposed version of the m_2 array
    m_2 = np.zeros((r.size,3,3))
    for ii,ar in enumerate(rgb):
        m_2[:,ii][:,ii][:] = ar
    m_1 = np.ones((3, 3))
    m_3 = np.ones((3, 3))

    rgb_transformed = m_1.dot(m_2).dot(m_3).dot(rgb)

    print rgb_transformed
    return np.arctan2(rgb_transformed, rgb_transformed)

x = np.ones(6)
do_complicated_math(x, x, x)                                                                                                                        

r = np.array([0.2,0.3,0.1])
g = np.array([1.0,1.0,0.2])
b = np.array([0.3,0.3,0.3])
do_complicated_math(r, g, b)
"
Python - a clean approach to this problem?,"d = {}
with open(""data"", 'rb') as data:
  for line in data:
    key, val = line.split(' ')
    d[key] = float(val)

ids = [max(sublist, key=lambda k: d[k]) for sublist in li]
"
How to get python to display current time (eastern),"    In [15]: print(dt)
2012-07-29 12:28:59.125975-04:00

    In [16]: print(dt.strftime('%Y-%m-%d %H:%M:%S'))
2012-07-29 12:28:59

    In [17]: print(dt.strftime('%H:%M:%S'))
12:28:59

    In [18]: print(dt.strftime('%s.%f'))  
1343579339.125975
"
Opening windows from other windows in tkinter,"f = Button(win, text=a, command=lambda d=d: openWindowR(str(d)))
"
SQLAlchemy Declarative: Adding a static text attribute to a column,"class Case(Base):
    # Column definitions go here...

    def as_dict(self):
        return {c.name: (getattr(self, c.name), c.info.get('description'))
                for c in self.__table__.c}
"
concatenate lists,"for item in itertools.chain(listone, listtwo):
    pass"
"Why np.clip(pd.Series(range(10)), 2,3) returns a Series?","np.clip(pd.Series(range(10)), 2, 3)
"
better method to aggregate pandas dataframe by non matching criteria,"adjyear = np.where(df.season == 'SPRING', df.year + 1, df.year)
adjyear.name = 'year'

grouped = df.groupby(['method', 'replicate', 'site', adjyear])
grouped = grouped['sp1', 'sp2', 'sp3']    

grouped.sum()[grouped.size() > 1]
"
Python - How to get total no of style attributes of a specific div,"for div in soup.find_all('div'):
    print len(filter(None , div.get('style').split(';')))
"
Find current directory and file's directory,os.path.dirname(path)
Python / Function parameters,"def highscore(filename):
    try:
        with open(filename, 'r') as f:
            return int(f.read())
    except:
        return 0
"
list comprehension question,"return [ y[i/2] if i%2 else x for i in range(len(y)*2)]
"
"grep output not same as ""re.findall()"" output in python3",">>> import re
>>> text = '''\
... www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&amp;val=NM_003157.1 rs 1123   
... www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&amp;val=NM_006157 dd 12   
... www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&amp;val=NM_021018.2 ff 121
... www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&amp;val=NM_000908.2 rs10472828-?
... '''
>>> f = text.splitlines()
>>> for i in f:
...     print(re.findall(r""N[A-Z]_[0-9]+(?:\.[1-9])*"", i.strip()))
... 
['NM_003157.1']
['NM_006157']
['NM_021018.2']
['NM_000908.2']
"
First common element from different lists of numbers,"d={
'list_1':[13579875, 25732, 3541, 56732, 1567, 20546, 10, 68971],
'list_2' : [1856721, 25724, 3541, 56732, 1567, 20546, 10, 68971],
'list_3' : [2354074, 25732, 3541, 56732, 1567, 20546, 10, 68971],
'list_4' : [533878, 651, 658, 8654,1357, 1254, 9, 68971],
'list_5' : [567432, 25732, 3541, 56732, 1567, 20546, 10, 68971]}

names=['list_1','list_2','list_3','list_4','list_5']
from itertools import combinations,izip
for i,j in combinations(names,2):
  for k,t in izip(d[i],d[j]):
    if k==t:
        print (i,j),'value:{}-index:{}'.format(k,d[i].index(k))
        break
"
Get HTML Source of WebElement in Selenium WebDriver using Python,element.get_attribute('innerHTML')
"How would one bind two different button click events to the same label, namely ""<Button-1>"" and ""<Double-Button1>"" to same label?","import Tkinter as tk

#----------------------------------------------------------------------

single = False

def test(event, extra=None):
    global single

    #print 'event-num:', event.num
    #print 'extra:', extra

    if extra == 1:
        single = True
        master.after(200, single_click)
    elif extra == 101:
        single = False
        click('double click')

def single_click():
    global single

    if single:
        single = False
        click('single click')

def click(msg):
    print 'It was', msg

#----------------------------------------------------------------------

master = tk.Tk()

b1 = tk.Button(master, text=""QUIT"", command=master.destroy, width=20, heigh=5)
b1.pack()

b2 = tk.Label(master, text=""OK"", width=20, heigh=5)
b2.pack()

b2.bind('<Double-Button-1>', lambda event:test(event,101))
b2.bind('<Button-1>', lambda event:test(event,1))

master.mainloop()
"
Split tags in python,"def get_tags(s, open_delim  ='{{', 
                close_delim ='}}' ):

   while True:

      # Search for the next two delimiters in the source text
      start = s.find(open_delim)
      end   = s.find(close_delim)

      # We found a non-empty match
      if -1 < start < end:

         # Skip the length of the open delimiter
         start += len(open_delim)

         # Spit out the tag
         yield s[start:end].strip()

         # Truncate string to start from last match
         s = s[end+len(close_delim):]

      else:
         return
"
Output formatting in Python: replacing several %s with the same variable,"var = '{0} {0} {0}'.format('look_at_meeee')
"
python: SomeStingLikeThis to some_string_like_this,"""_"".join(re.findall('[A-Z][^A-Z]*', s))
# Some_String_Like_This
"
Global variables in recursion. Python,">>> def lenRecur(s):
...     def characters_only(s):
...         return ''.join([c for c in s if c.isalpha()])
...     def len_recursive(s):
...         if not s:
...             return 0
...         return 1 + len_recursive(s[1:])
...     return len_recursive(characters_only(s))
... 
>>> lenRecur('The Quick Brown Fox')
16
"
Function internally using exec(astring) with a variable definition inside astring can not return the variable in python 3,"def function(astring):
  astring= 'variable = ' + astring
  exec(astring)
  return eval('variable')

function('42')
"
how can I convert python tuple to dict,"from itertools import groupby
from operator import itemgetter

result = [(k, {k: v for _, k, v in g}) for k, g in groupby(t, itemgetter(0))]
"
Subsetting 2D array based on condition in numpy python,"np.where(arr_b > 0.0, arr_a, np.nan)
"
Search for string in txt file,"datafile = file('example.txt')
found = False
for line in datafile:
    if (blabla in line):
        return True
return False"
For loop stacks and external functions without repeating popleft(),"from collections import deque

sentence = [0, 1, 2, 3, 4]

stack1 = deque(sentence)
stack2 = deque([])


print(stack1, stack2)


def do_it(st1, st2):
    item = st1.popleft()
    st2.append(item)

while stack1:
    do_it(stack1, stack2)
    # Do some stuff here
    do_it(stack1, stack2)

print(stack1, stack2)
"
How to uniquefy a list of dicts based on percentage similarity of a value in the dicts,"import difflib

def similar(seq1, seq2):
    return difflib.SequenceMatcher(a=seq1.lower(), b=seq2.lower()).ratio() > 0.9

def unique(mylist, keys):
    temp = mylist[:]
    for d in mylist:
        temp.pop(0)
        [d2.pop(i) for i in keys if d.has_key(i)
         for d2 in temp if d2.has_key(i) and similar(d[i], d2[i])] 
    return mylist
"
Click a href button with selenium and python?,driver.findElement(By.linkText('Send InMail')).click()
Format hex digits for character code \x,">>> ""commandstring {}{}"".format(chr(0), chr(0))
'commandstring \x00\x00'
"
how to move all non-zero elements in a python list or numpy array to one side?,">>> a = np.array([0, 0, 0, 1, 0, 0, 4, 2, 0, 7, 0, 0, 0])
>>> np.concatenate((a[a==0], a[a!=0]))
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 2, 7])
"
"Iterating pandas dataframe, checking values and creating some of them","import pandas as pd

df = pd.DataFrame({'date': {0: 20100201, 1: 20100201, 2: 20100201, 3: 20100201, 4: 20100202, 5: 20100202, 6: 20100202, 7: 20100202, 8: 20100203, 9: 20100203, 10: 20100204}, 
                   'time': {0: 0, 1: 6, 2: 12, 3: 18, 4: 0, 5: 6, 6: 12, 7: 18, 8: 0, 9: 18, 10: 6},
                   'value': {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 11, 10: 12}})

print (df)
        date  time  value
0   20100201     0      1
1   20100201     6      2
2   20100201    12      3
3   20100201    18      4
4   20100202     0      5
5   20100202     6      6
6   20100202    12      7
7   20100202    18      8
8   20100203     0      9
9   20100203    18     11
10  20100204     6     12
"
Count consecutive characters,"word=""100011010""
count=1
length=""""
for i in range(1,len(word)):
    if word[i-1]==word[i]:
       count+=1
    else :
        length += word[i-1]+"" repeats ""+str(count)+"", ""
        count=1
length += (""and ""+word[i]+"" repeats ""+str(count))
print (length)
"
python script command line arguments from file,"import sys
import ConfigParser

if __name__ == '__main__':
    config = ConfigParser.ConfigParser()
    config.read(sys.argv[1])
    print config['settings']['host']
    print config['settings']['port']
"
split a string in python,a.split('\n')[:-1]
Append elements of a set to a list in Python,a.extend(b)
"Regex returns text of every line with match, when text is inside variable","output_lines = [i for i in re.split(r'\n', output) if ""Lorem"" in i]
print output_lines
"
Why does + (plus) can concatenate two strings in Python?,"case BINARY_ADD:
    w = POP();
    v = TOP();
    if (PyInt_CheckExact(v) && PyInt_CheckExact(w)) {
        /* INLINE: int + int */
        register long a, b, i;
        a = PyInt_AS_LONG(v);
        b = PyInt_AS_LONG(w);
        /* cast to avoid undefined behaviour
           on overflow */
        i = (long)((unsigned long)a + b);
        if ((i^a) < 0 && (i^b) < 0)
            goto slow_add;
        x = PyInt_FromLong(i);
    }
    else if (PyString_CheckExact(v) &&
             PyString_CheckExact(w)) {
        x = string_concatenate(v, w, f, next_instr);
        /* string_concatenate consumed the ref to v */
        goto skip_decref_vx;
    }
    else {
      slow_add:
        x = PyNumber_Add(v, w);

    ...
"
Delete rows not containing a value in pandas,"df = df[(df['Phone'].str.startswith('+1')) & (df['Phone'].str.len() == 13)]
"
Is it possible to create a numpy.ndarray that holds complex integers?,"dtype = np.dtype([('re', np.int16), ('im', np.int16)])
"
"Why callbacks are ""ugly""?","def readn(sock, n):
    buf = ''
    while n > len(buf):
        newbuf = sock.recv(n - len(buf))
        if not newbuf:
            raise something
        buf += newbuf
    return buf

def readmsg(sock):
    msgtype = readn(sock, 4).decode('ascii')
    size = struct.unpack('!I', readn(sock, 4))
    data = readn(sock, size)
    return msgtype, size, data
"
Passing SOME of the parameters to a function in python,">>> from functools import partial
>>> def foo(my_num, my_string):
...     print(my_num, my_string)
... 
>>> foo2 = partial(foo, my_string=""my_string_example"")
>>> foo2(10)
(10, 'my_string_example')
>>> foo2(30)
(30, 'my_string_example')
"
Dynamic method generation in python,"class Meta(type):

    def __new__(mcls, name, bases, dikt):
        fgetattr = dikt.get('__getattr__')
        if fgetattr is not None:
            setattr(mcls, '__getattr__', fgetattr)
        return super(Meta, mcls).__new__(mcls, name, bases, dikt)

class Generator(object):
    __metaclass__ = Meta

    def __getattr__(obj, name):

        def f(self):
            return ""Result of %s for %r"" % (name, self)
        f.__name__ = name

        if isinstance(obj, type):
            setattr(obj, name, f)
        else:
            setattr(type(obj), name, f)
        return getattr(obj, name)
"
Is there a standard way to store XY data in python?,"In [175]: import numpy as np

In [176]: x = np.random.random(10)

In [177]: y = np.random.random(10)

In [179]: zip(x,y)
Out[179]: 
[(0.27432965895978034, 0.034808254176554643),
 (0.10231729328413885, 0.3311112896885462),
 (0.87724361175443311, 0.47852682944121905),
 (0.24291769332378499, 0.50691735432715967),
 (0.47583427680221879, 0.04048957803763753),
 (0.70710641602121627, 0.27331443495117813),
 (0.85878694702522784, 0.61993945461613498),
 (0.28840423235739054, 0.11954319357707233),
 (0.22084849730366296, 0.39880927226467255),
 (0.42915612628398903, 0.19197320645915561)]

In [180]: data = np.array( zip(x,y), dtype=[('x',float),('y',float)])

In [181]: data['x']
Out[181]: 
array([ 0.27432966,  0.10231729,  0.87724361,  0.24291769,  0.47583428,
        0.70710642,  0.85878695,  0.28840423,  0.2208485 ,  0.42915613])

In [182]: data['y']
Out[182]: 
array([ 0.03480825,  0.33111129,  0.47852683,  0.50691735,  0.04048958,
        0.27331443,  0.61993945,  0.11954319,  0.39880927,  0.19197321])

In [183]: data[0]
Out[183]: (0.27432965895978034, 0.03480825417655464)
"
Parsing CSV file in pandas with commas in last column,"import csv
with open('path/to/broken.csv', 'rb') as f, open('path/to/fixed.csv', 'wb') as g:
    writer = csv.writer(g, delimiter=',')
    for line in f:
        row = line.split(',', 2)
        writer.writerow(row)
"
Understanding Python Attributes and Methods,">>> type(42) == int
True
>>> type(42) == ""<type 'int'>""
False
"
Transposing (pivoting) a dict of lists in python,"[dict(zip(('x', 'y'), col)) for col in zip(d['x'], d['y'])]
"
How can I multiply numbers in a list (after removing duplicates)?,"from functools import reduce

print(""The product of the list is"", reduce(lambda x,y:x*y, numbertotal))
"
Construct single numpy array from smaller arrays of different sizes,"def get_chunks(arr, start, stop):
     rng = stop - start
     rng = rng[rng!=0]      #Need to add this in case of zero sized ranges
     np.cumsum(rng, out=rng)
     inds = np.ones(rng[-1], dtype=np.int)
     inds[rng[:-1]] = start[1:]-stop[:-1]+1
     inds[0] = start[0]
     np.cumsum(inds, out=inds)
     return np.take(arr, inds)
"
"Combining two lists and removing duplicates, without removing duplicates in original list","first_list = [1, 2, 2, 5]
second_list = [2, 5, 7, 9]

in_first = set(first_list)
in_second = set(second_list)

in_second_but_not_in_first = in_second - in_first

result = first_list + list(in_second_but_not_in_first)
print result  # Prints [1, 2, 2, 5, 9, 7]
"
Extracting number from string in Python with regex,"myString = ""Test1 [cm]:     -35.00/-34.99/-34.00/0.09""  
print myString.split(""/"")[1]
"
Generate a list of objects of python builitins that can be called without arguments,"def no_arg_builtins():
  for builtin in dir(__builtins__):
    o = getattr(__builtins__, builtin)
    if callable(o):
      try:
        yield o()
      except TypeError:
        pass # Called incorrectly
    else:
      pass # not callable
"
How to get non-csv lines in csv file,"import csv
from StringIO import StringIO

i = """"""""Equipment"",""LNKEQP"",""METAST"",""METSER"",""MODSTA"",""METEOD""
""HLL_POS_00098"",1,1,0,0,0
""TOY_GAT_00003"",0,0,0,3,0
""NAT_POS_00010"",0,3,0,3,0
""NAT_GAT_00002"",0,0,0,0,0
""NAT_GAT_00001"",0,0,0,4,0
A machine A is unavailable
""""""

# Take only those lines that contain a comma.
j = """".join([line for line in StringIO(i).readlines() if ',' in line])

# Parse the taken lines as CSV.
reader = csv.reader(StringIO(j))
for line in reader:
    print line
"
"using isinstance () gives me True , using type() gives me False in Python","Vec is type(other)
"
Do I loose precision when converting from MPZ to long?,"$ python -m timeit -s ""import gmpy;a=10;b=gmpy.mpz('1'*a);p=gmpy.mpz('2'*a)-7;m=gmpy.mpz('3'*a)+11"" ""pow(b,p,m)""
1000000 loops, best of 3: 1.41 usec per loop
$ python -m timeit -s ""a=10;b=long('1'*a);p=long('2'*a)-7;m=long('3'*a)+11"" ""pow(b,p,m)""
100000 loops, best of 3: 8.89 usec per loop
"
what would be the pythonic way to find out if a given date belongs to the current week?,"datetime.datetime.strptime('20160511','%Y%m%d').isocalendar()[1]
"
How do I check a value entered?? Python 3.4,"def validate(validation, not_valid_warning=None):
    if not hasattr(validation, '__call__'):
        raise TypeError(""validation must be callable"")
    def wrapper(f):
        def wrapped(*args):
            while True:
                p = f(*args)
                if validation(p):
                    break
                if not_valid_warning:
                    print(not_valid_warning)
            return p
        return wrapped
    return wrapper

@validate(lambda x: x < 10 or x > 100)
def v_input(*args):
    return __builtins__.input(*args)

# Example..........
if __name__ == ""__main__"":
    v_input(""Enter a number less than 10 or more than 100: "")
"
2D integrals in SciPy,"print integrate.dblquad(func, -pi/2, pi/2, lambda x:-pi/2, lambda x:pi/2)[0]
"
Using the `.find_next_siblings` function in Beautiful Soup,"next_rows = [[td.get_text(strip=True).encode(""utf-8"") for td in row('td')] 
             for row in headers.find_next_siblings(""tr"")]

pattern = re.compile(r'^[\d,]+$')
data = [[item for item in l if pattern.match(item)] for l in next_rows]
data = [l for l in data if l]

with open('/home/kwal0203/Desktop/Apple.csv', 'a') as csvfile:
    writer = csv.writer(csvfile, delimiter=""|"")
    writer.writerows(data)
"
"Numpy equivalent of dot(A,B,3)","In [41]: A = dstack([[[1, 1],[1 ,1]],[[2 ,3],[4, 5]],[[6, 7],[8, 9]]])

In [42]: B = dstack([[[2, 2],[2, 2]],[[10, 11],[12, 13]],[[14, 15], [16, 17]]])

In [43]: inner1d(A,B)
Out[43]:
array([[106, 140],
       [178, 220]])
"
Creating an overlap array with conditions - Python,"np.lib.stride_tricks.as_strided(data, shape=(K-N+1,N), strides=(4,4))
"
Getting highest value card in list,">>> max(hand, key=lambda c: rank_cards.index(c[0]))
'KC'
"
pandas: select all rows matching multiple conditions,"new_col = pd.DataFrame(df[k]==v for k,v in di.iteritems()).all()
df['col3'] = new_col
"
Is it possible for lxml to work in a case-insensitive manner?,"#!/usr/bin/env python
from lxml import html

doc = html.fromstring('''
    <meta name=""Description"">
    <meta name=""description"">
    <META name=""description"">
    <meta NAME=""description"">
''')
for meta in doc.xpath('//meta[re:test(@name, ""^description$"", ""i"")]',
                      namespaces={""re"": ""http://exslt.org/regular-expressions""}):
    print html.tostring(meta, pretty_print=True),
"
"Declare python variable that stores a function, but not run it","cred = (255, 0, 0)
"
Combining two dictionaries into one with the same keys?,"dic1 = {'A': 25, 'B': 41, 'C': 32}
dic2 = {'A': 21, 'B': 12, 'C': 62}
result = {}
for key in (dic1.viewkeys() | dic2.keys()):
    if key in dic1: result.setdefault(key, []).append(dic1[key])
    if key in dic2: result.setdefault(key, []).append(dic2[key])

print result
"
Python 3.3: Recursive version of a function,"Example
while True:
    s = input(""String? "")
    if not s:
        break
    print(""{} is {}abcdearian"".format(s, """" if abcdearian(s) else ""not ""))
"
set(filter) repetition,"acceptable = set()
#...
acceptable = set(i for i in acceptable
                 if is_rank_x_top_100(i) and is_rank_y_top_10(i))
"
Issue sorting lots of files in python,"from natsort import natsorted
import pprint

files = ['20150921(1)_0001.sgy',
'20150921(1)_0102.sgy',
'20150921(1)_0011.sgy',
'20150921(1)_0003.sgy',
'20150921(1)_0004.sgy',
'20150921(1)_0010.sgy',
'20150921(1)_1001.sgy',
'20150921(1)_0012.sgy',
'20150921(1)_0101.sgy',
'20150921(1)_1003.sgy',
'20150921(1)_0103.sgy',
'20150921(1)_10002.sgy',
'20150921(1)_1002.sgy',
'20150921(1)_10001.sgy',
'20150921(1)_0002.sgy',
]

pprint.pprint(natsorted(files))
"
Finding largest indices of non-zero elements along each axis,"np.argwhere(A).max(0)
"
Research a string with a variable number in python,"import re

txt='''\
ELEMENT=      1 PLY=  1
-----------------------
 Code 1425                                    
    GP= 1  4.324E-03 -1.350E-03 -2.974E-03  3.084E-04  0.000E+00  0.000E+00
    GP= 2  1.435E-03 -3.529E-04 -1.082E-03  1.183E-04  0.000E+00  0.000E+00
    GP= 3  7.742E-03 -3.542E-03 -4.200E-03  4.714E-04  0.000E+00  0.000E+00
    GP= 4  4.842E-03 -2.378E-03 -2.463E-03  3.040E-04  0.000E+00  0.000E+00

ELEMENT=      2 PLY=  22
-----------------------
 Code 1426                                 
    GP= 5  4.324E-03 -1.350E-03 -2.974E-03  3.084E-04  0.000E+00  0.000E+00
    GP= 6  1.435E-03 -3.529E-04 -1.082E-03  1.183E-04  0.000E+00  0.000E+00
    GP= 7  7.742E-03 -3.542E-03 -4.200E-03  4.714E-04  0.000E+00  0.000E+00
    GP= 8  4.842E-03 -2.378E-03 -2.463E-03  3.040E-04  0.000E+00  0.000E+00    
    '''

for i, m in enumerate(re.finditer(r'^ELEMENT=\s+(\d+.*?)(?=^ELEMENT|\Z)', txt, re.M | re.S)):
    print 'Group {}===:\n{}'.format(i, m.group(1))
"
Read sparse matrix in python,"A.todok().keys()
#  dict_keys([(0, 1), (0, 0), (1, 3), (1, 0), (0, 2), (1, 4)])
A.todok().items()
"
Zip Two dict contain a list in Python,"dicts=[]
dicts.append({""1"":[{'q': ['Data'], 'q1': '110'}]})
dicts.append({""2"":[{'q2':[""other Data""], ""q3"" : ""exp""},{'q2':[""other Data2""], ""q3"" : ""exp2""}]})

a=[[{key: j} for key in d2 for j in d2[key]] for d2 in dicts ]

nmax=max(len(x) for x in a)

newdicts=[dict() for i in range(nmax)]

for i in range(nmax):    
    for j in range(len(a)):
        if i < len(a[j]):    
            newdicts[i].update(a[j][i])

for i in newdicts:
    print i
"
Datetime strptime in Python pandas : what's wrong?,"print pd.to_datetime(df['Dates'])
"
Case-insensitive string startswith in Python,"In [41]: p = re.compile('he', re.I)

In [42]: %timeit p.match(s)
1000000 loops, best of 3: 351 ns per loop
"
different foreground colors for each line in wxPython wxTextCtrl,"rt = wx.TextCtrl(self, -1,""My Text...."",size=(200, 100),style=wx.TE_MULTILINE|wx.TE_RICH2)
rt.SetInsertionPoint(0)
rt.SetStyle(2, 5, wx.TextAttr(""red"", ""blue""))
"
python iterating two lists in a tuple and comparing a integer between tem,">>> list(enumerate(zip(list1, list2)))
[(0, (1, 3)), (1, (5, 7)), (2, (10, 20))]
"
Python Caesar Cipher keeping spaces,"sentence = raw_input(""Please enter a sentence : "").lower()
shift = input(""Please enter your shift : "")

validLetters = map(chr, range(97, 123))
validLetters.append(' ')

tmp = [ord(ch)+shift for ch in sentence if ch in validLetters]
resulta = [chr(x if 97 <= x <= 122 else 96+x%122) if x != ord(' ')+shift else ' ' for x in tmp]

print sentence
print
print(""Your encryption is :"")
print
print ''.join(resulta)
"
Why is string search fastest as compared to list search and set search?,">>> import timeit
>>> timeit.Timer(""'A' in l"", ""l = list('AEIOU')"").timeit(999999)
0.0490870475769043
>>> timeit.Timer(""'A' in s"", ""s = set('AEIOU')"").timeit(999999)
0.0507349967956543
>>> timeit.Timer(""'A' in s"", ""s = 'AEIOU'"").timeit(999999)
0.04982495307922363
"
"Python subprocess + mencoder not working, same command works in terminal","pMerge = subprocess.Popen(mp4merge, stdout=subprocess.PIPE,
    stderr=subprocess.STDOUT)
for line in pMerge.stdout:
    print line,
"
How to find a substring in a line and append from that line up to the next substring?,"file = open('test.txt','r')

start_keyword = 'start'
end_keyword = 'end'
in_range = False
entities = []

lines = file.readlines()

for line in lines:

    line = line.strip()

    if line == start_keyword:
        in_range = True
    elif line == end_keyword:
        in_range = False

    elif in_range:
        entities.append(line)

file.close()

# If you want to include the start/end tags
#entities = [start_keyword] + entities + [end_keyword]

print entities
"
How can I split this string in Python?,"import re
print re.split(r""\n(?=Layer)"",x)
"
handling zeros in pandas DataFrames column divisions in Python,"In [12]: df = pandas.DataFrame({""a"": [1, 2, 0, 1, 5], 
                                ""b"": [0, 10, 20, 30, 50]}).astype('float64')

In [13]: df
Out[13]: 
   a   b
0  1   0
1  2  10
2  0  20
3  1  30
4  5  50

In [14]: df.dtypes
Out[14]: 
a    float64
b    float64
dtype: object
"
can we use xpath with BeautifulSoup?,"from lxml.cssselect import CSSSelector

td_empformbody = CSSSelector('td.empformbody')
for elem in td_empformbody(tree):
    # Do something with these table cells.
"
Rescale an Image using Python3.2,"for r in range(height*yscale):
    for c in range(width*xscale):
        pixel = oldImage.getPixel(r // yscale, c // xscale)
        newImage.setPixel(r, c, pixel)
"
Python string to list conversion,"output = map(lambda x: int(x), output)
"
python function that returns a function from list of functions,"func_dict = {}

def collected_func(key):
    def decorator(func):
        func_dict[key] = func
        return func
    return decorator

@collected_func(12)
def foo():
    pass
"
Sum the digits of a number - python,"def sum_digits2(n):
    s = 0
    while n:
        n, remainder = divmod(n, 10)
        s += remainder
    return s
"
How to make a function repeat itself,"from lxml import etree

root = etree.parse(""test.xml"")

for element in root.iter(""title""):
    print(""%s - %s"" % (element.tag, element.text))
"
How to use an additive assignment with list based indexing in Numpy,"ip1_frac, jp1_frac = np.random.rand(2, items)

unique_coords[:, 0] += 1
data =  rho_coeff*dt*ip1_frac*j_frac
binned_data = np.bincount(indices, weights=data)
rho[tuple(unique_coords.T)] += binned_data

unique_coords[:, 1] += 1
data =  rho_coeff*dt*ip1_frac*jp1_frac
binned_data = np.bincount(indices, weights=data)
rho[tuple(unique_coords.T)] += binned_data

unique_coords[:, 0] -= 1
data =  rho_coeff*dt*i_frac*jp1_frac
binned_data = np.bincount(indices, weights=data)
rho[tuple(unique_coords.T)] += binned_data
"
Python: How to read in file once but not exhaust iterator in nested for loops,"def two(positions,regions):
    d = defaultdict(list)
    for k,v in one(regions):
        d[k].append(v)
    with open(positions,'r') as g:
        for line in g:
            ls = tuple(line.split())
            yield ls + (1 if any(x <= int(ls[1]) <= y for (x,y) in d[ls[0]])
                        else 0,)
"
operate through subarrays of an array recursively merging them (python),"# Slow, inefficient example
while len(arr) > 1:
  arr[:2] = some_operation(arr[0], arr[1])
"
opening specific lines inside multiple files,"import time
import linecache
import itertools


def f_readlines(filename, start_line, endline):
    with open(filename) as f:
        f.readlines()[5000:10000]


def f_enumerate(filename, start_line, endline):
    result = []
    with open(filename) as f:
        for i, line in enumerate(f):
            if i in range(start_line, endline):
                result.append(line)
            if i > endline:
                break


def f_linecache(filename, start_line, endline):
    result = []
    for n in range(start_line, endline):
        result.append(linecache.getline(filename, n))


def f_itertools_islice(filename, start_line, endline):
    result = []
    with open(filename) as f:
        resultt = itertools.islice(f, start_line, endline)
        for i in resultt:
            result.append(i)


def runtest(func_to_test):
    filename = ""testlongfile.txt""
    start_line = 5000
    endline = 10000
    start_time = time.time()
    func_to_test(filename, start_line, endline)
    print(""--- %s seconds --- %s"" % ((time.time() - start_time),func_to_test.__name__))

runtest(f_readlines)
runtest(f_enumerate)
runtest(f_linecache)
runtest(f_itertools_islice)
"
datetime.datetime.now() returns old value,"def sct(from_date=None):
    if from_date is None:
        from_date = datetime.datetime.now().date()
    value = getValueByDate(from_date)
"
Doctest with datetime,"def subtime(a,b):
    subtract = datetime.timedelta(hours=b)
    difference = a - subtract
    return difference
"
How can I write output from a for loop in python into a csv-formatted file?,"import csv
import os

receptors = ['crystal_1', 'modeller_1', 'moe_1',
             'nci5_modeller0000_1', 'nci5_modeller0001_1',
             'nci5_modeller0002_1', 'nci5_modeller0003_1',
             'nci5_modeller0004_1', 'nci5_modeller0005_1',
             'nci5_modeller0006_1', 'nci5_modeller0007_1',
             'nci5_modeller0008_1', 'nci5_modeller0009_1',
             'nci5_modeller0010_1', 'nci5_modeller0011_1',
             'nci5_moe0000_1', 'nci5_moe0001_1', 'nci5_moe0002_1',
             'nci5_moe0003_1', 'nci5_moe0004_1', 'nci5_moe0005_1',
             'nci5_moe0006_1', 'nci5_moe0007_1', 'nci5_moe0008_1',
             'nci5_moe0009_1', 'nci5_moe0010_1', 'nci5_moe0011_1',
             'nci5_moe0012_1', 'nci5_moe0013_1', 'nci5_moe0014_1']

with open('potentiation.txt', 'rt') as experiment, \
     open('output.csv', 'wb') as outfile:
    csv_writer = csv.writer(outfile, delimiter='\t')
    csv_writer.writerow(['Ligand'] + receptors)  # header row
    for ligand in (line.rstrip() for line in experiment):
        row = [ligand]
        for protein in receptors:
            with open(protein+'.txt', ""rt"") as file1:
                found = ['Found', 'Not Found'][file1.read().find(ligand) == -1]
                row.append(found)
        csv_writer.writerow(row)

print('output.csv file written')
"
How to not load the comments while parsing XML in lxml,"from lxml import etree, objectify

parser = etree.XMLParser(remove_comments=True)
tree = objectify.parse(xmlPath, parser=parser)
"
How can I bind mouse event like leftdown on one word of TextCtrl. see the code start with #?,"import wx

class TextFrame(wx.Frame):

    def __init__(self):   
        wx.Frame.__init__(self, None, -1, 'Text Entry Example',   
                size=(300, 250))   
        self.panel = wx.Panel(self, -1)   
        self.richLabel = wx.StaticText(self.panel, -1, ""Rich Text"")   
        self.richText = wx.TextCtrl(self.panel, -1,   
                ""If supported by the native control, this is reversed, and this is a different font."",   
                size=(200, 100), style=wx.TE_MULTILINE|wx.TE_RICH2)   
        self.richText.Bind(wx.EVT_RIGHT_DOWN, self.OnTextCtrl1LeftDown) 
        self.richText.SetInsertionPoint(0) 

        #? how can I bind mouse event like leftdown on Text below 
        #? how can I bind mouse event like leftdown on Text below 
        self.richText.SetStyle(44, 52, wx.TextAttr(""white"", ""black""))   

        points = self.richText.GetFont().GetPointSize()   
        f = wx.Font(points + 10, wx.ROMAN, wx.ITALIC, wx.BOLD, True)   
        self.richText.SetStyle(68, 82, wx.TextAttr(""blue"", wx.NullColour, f))   

        sizer = wx.FlexGridSizer(cols=2, hgap=6, vgap=6)   
        sizer.AddMany([self.richLabel, self.richText])   
        self.panel.SetSizer(sizer) 


    def OnTextCtrl1LeftDown(self,event): 
        m_pos = event.GetPosition()  # position tuple
        word_pos = self.richText.HitTest(m_pos)
        if word_pos[0] == 0:
            if word_pos[1] > 43 and word_pos[1] < 53:
                print ""You clicked on the word 'reserved'"" 
            if word_pos[1] > 67 and word_pos[1] < 83:
            print ""You clicked on the words 'Different Font'"" 

if __name__ == '__main__':
    test = wx.App()
    TextFrame().Show()
    test.MainLoop()    
"
python 3.4 multiprocessing does not work with unittest,"class Tester:
    def info(self, title=None):
        print(""title {}"".format(title))
        print('module name:', __name__)
        if hasattr(os, 'getppid'):  # only available on Unix
            print('parent process:', os.getppid())
        print('process id:', os.getpid())
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    def f(self, name):
        self.info('function f')
        print('hello', name)
    #-------------------------------


class MyTest(unittest.TestCase):

    #---------------------------------------------------------------------------
    def setUp(self):
        self.working_dir = os.path.join(os.environ[""TEMP""], ""Testing"")
        os.mkdir(self.working_dir)
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    def tearDown(self):
        try:
            time.sleep(5)
            shutil.rmtree(self.working_dir, ignore_errors=True)
        except OSError as err:
            traceback.print_tb(err)
    #---------------------------------------------------------------------------

    #---------------------------------------------------------------------------
    def testSmallWorkflow(self):
        t = Tester()
        self.info('main line')
        p = Process(target=t.f, args=('bob',))
        p.start()
        p.join()
"
Python inheritance. Why is it so messy?,"class Dog(Pet):

   def __init__(self, chases_cats, *args, **kwargs):
      Pet.__init__(self, *args, species=""Dog"", **kwargs)
      self.chases_cats = chases_cats

class Pet(object):

    def __init__(self, name, species, *args, **kwargs):
       self.name = name
       self.species = species
"
How to search for the value of an element in a list of dict based on another value from the same element?,"next((d['age'] for d in data if d['name'].lower() == 'john'), -1)
"
How to make Python recognize a function as a generator function?,"def subgen_2(i):
    i * 3
"
Python/pandas idiom for if/then/else,"columnsToReplace = ['var1001', 'var1002', ...]
df.ix[df.type==8, columnsToReplace] = 0
"
Make Python's `warnings.warn()` not mention itself,"#!/usr/bin/python3

import warnings

def warning_on_one_line(message, category, filename, lineno, file=None, line=None):
    return '%s:%s: %s: %s\n' % (filename, lineno, category.__name__, message)

warnings.formatwarning = warning_on_one_line

warnings.warn('Run Forest run!', stacklevel=2)
warnings.warn('Run Forest run!')
"
Python regular expression?,"p = re.compile(r'(?<=\d)(?=(?:\d{3})+$)')
test_str = ""2890191245""
tmp = [x.start() for x in re.finditer(p, test_str)]
res = [test_str[0: tmp[0]]] + [(test_str[tmp[i]: tmp[i] + 3]) for i in range(len(tmp))]
"
Merging dictionaries using a counter,"In [15]: dict(enumerate(set(key for key in itertools.chain(x, y)), 1))
Out[15]: {1: 'a', 2: 'c', 3: 'b', 4: 'd'}

In [16]: dict(enumerate((key for key in itertools.chain(x, y)), 1))
Out[16]: {1: 'a', 2: 'b', 3: 'a', 4: 'c', 5: 'd'}
"
How to efficiently add sparse matrices in Python,"matrix_result = matrix_a + matrix_b
"
In my code i am getting a name error saying the name 'sort' is not defined,"if form == ""1"":
   sort = input('If you would like the names sorted alphabetically enter ""a"".If you would like the scores sorted from highest to lowesr please enter ""b"" and If you would like the average scores sorted from highest to lowest please enter ""c""')
    if sort == ""a"":
         ....
"
Python Multiplication Table,"for i in range(10):
    for j in range(i, 10):
        print(""{}x{}={}"".format(j, i, i*j), end="" "")
    print()
"
How do I program bigram as a table in python?,"import itertools

def pairwise(s):
    a,b = itertools.tee(s)
    next(b)
    return zip(a,b)

counts = [[0 for _ in range(52)] for _ in range(52)]  # nothing has occurred yet
with open('path/to/input') as infile:
    for a,b in pairwise(char for line in infile for word in line.split() for char in word):  # get pairwise characters from the text
        given = ord(a) - ord('a')  # index (in `counts`) of the ""given"" character
        char = ord(b) - ord('a')   # index of the character that follows the ""given"" character
        counts[given][char] += 1

# now that we have the number of occurrences, let's divide by the totals to get conditional probabilities

totals = [sum(count[i] for i in range(52)) for count in counts]
for given in range(52):
    if not totals[given]:
        continue
    for i in range(len(counts[given])):
        counts[given][i] /= totals[given]
"
python explicitly not passing optional parameter,"def create_A(**kwargs):
    return A(**kwargs)
"
Grouping object-group configuration using RegEx,"import re
p = re.compile(r'\bobject-group\b\S*(?:\s+(?!object-group\b)\S*)*')
test_str = ""object-group network FTP\n description FTP Access\n network-object host BCD1\n network-object host BCD2\nobject-group network NTP\n description NTP Access\n network-object host ABC1\n network-object host ABC2\n network-object host ABC3\nobject-group service sample_service tcp\n description Ports 1 2 3\n port-object range 80 81\n port-object eq pop3\n port-object eq imap4\n port-object range 443 444\nobject-group service 8080 tcp\n description Servers""
print(re.findall(p, test_str))
"
Is it possible to create a dictionary inside a function using python?,"def myfunction(list_a, list_b):
   return dict(zip(list_a, list_b))

my_dict = myfunction(some_list_a, some_list_b)
"
How can I add the corresponding elements of several lists of numbers?,"map(sum, zip(*lists))"
How to merge multiple dictionaries from separate lists if they share any key-value pairs?,"import itertools as IT
import networkx as nx

l1 = [{'fruit':'apple','category':'A'},{'fruit':'banana','category':'B'}]
l2 = [{'type':'new','category':'A'},{'type':'old','category':'B'}]
l3 = [{'order':'1','type':'new'},{'order':'2','type':'old'}]

data = [l1, l2, l3]
G = nx.Graph()
for dct in IT.chain.from_iterable(data):
    items = list(dct.items())
    node1 = node1[0]
    for node2 in items:
        G.add_edge(node1, node22)

for cc in nx.connected_component_subgraphs(G):
    print(dict(IT.chain.from_iterable(cc.edges())))
"
Passing function to class in Python,"class Run:

    def __init__(self, func, *args, **kwargs):
        self.func = func
        self.args = args
        self.kwargs = kwargs

    def execute(self):
        print('Running')
        self.func(*self.args, **self.kwargs)  # call func here


baz = Run(foo, 'bar')  # don't call func here
baz.execute()
"
Splitting Strings in Python with Separator variable,"def split_string(source,separators):
    return re.split('(?:'+'|'.join(re.escape(x) for x in separators)+')+',source)
"
"Unique values from some column, DF pandas","In [48]:

df.groupby('A')['B'].agg(lambda x: pd.Series.count(x.unique()))
Out[48]:
A
1    4
2    3
Name: B, dtype: int64
"
Combining NumPy arrays,"b = np.concatenate((a, a), axis=0)"
"""Cloning"" row or column vectors",">>> array([[1,2,3],]*3)
array([[1, 2, 3],
       [1, 2, 3],
       [1, 2, 3]])

>>> array([[1,2,3],]*3).transpose()
array([[1, 1, 1],
       [2, 2, 2],
       [3, 3, 3]])
"
Exiting out of loop when not found - Binary Search in Python,"while s[index] != n:
    if low>=high:
        return ""Not Found""
    if  s[index] < n:
        low = index + 1 
    else:
        high = index
    index = (high + low)/2
"
Efficiently select subsection of numpy array,"from numpy import *

x = array([[ 0.46006547,  0.5580928 ,  0.70164242,  0.84519205,  1.4       ],
           [ 0.00912908,  0.00912908,  0.05      ,  0.05      ,  0.05      ]])

low, high = array([ 0.633,  0.01 ]), array([ 1.325,  0.99 ])

l0r = searchsorted(x[0,:], low[0], side='right')
l1r = searchsorted(x[1,:], low[1], side='right')

h0l = searchsorted(x[0,:], high[0], side='left')
h1l = searchsorted(x[1,:], high[1], side='left')

lr = max(l0r, l1r)
hl = min(h0l, h1l)

print lr, hl
print x[:,:lr]
print x[:,lr:hl]
print x[:,hl]

# 2 4
# [[ 0.46006547  0.5580928 ]
#  [ 0.00912908  0.00912908]]
# [[ 0.70164242  0.84519205]
#  [ 0.05        0.05      ]]
# [ 1.4   0.05]
"
Applying np.dot to each row of two DataFrames,"pd.Series(np.einsum('ij,ij->i', df1.values, df2.values), index=df1.index)
"
Split a large string into multiple substrings containing 'n' number of words via python,"text = """"""
When in the course of human Events, it becomes necessary for one People to dissolve the Political Bands which have connected them with another, and to assume among the Powers of the Earth, the separate and equal Station to which the Laws of Nature and of Nature?s God entitle them, a decent Respect to the Opinions of Mankind requires that they should declare the causes which impel them to the Separation.

We hold these Truths to be self-evident, that all Men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty, and the pursuit of Happiness?-That to secure these Rights, Governments are instituted among Men, deriving their just Powers from the Consent of the Governed, that whenever any Form of Government becomes destructive of these Ends, it is the Right of the People to alter or abolish it, and to institute a new Government, laying its Foundation on such Principles, and organizing its Powers in such Form, as to them shall seem most likely to effect their Safety and Happiness. Prudence, indeed, will dictate that Governments long established should not be changed for light and transient Causes; and accordingly all Experience hath shewn, that Mankind are more disposed to suffer, while Evils are sufferable, than to right themselves by abolishing the Forms to which they are accustomed. But when a long Train of Abuses and Usurpations, pursuing invariably the same Object, evinces a Design to reduce them under absolute Despotism, it is their Right, it is their Duty, to throw off such Government, and to provide new Guards for their future Security. Such has been the patient Sufferance of these Colonies; and such is now the Necessity which constrains them to alter their former Systems of Government. The History of the Present King of Great-Britain is a History of repeated Injuries and Usurpations, all having in direct Object the Establishment of an absolute Tyranny over these States. To prove this, let Facts be submitted to a candid World.
""""""

words = text.split()
subs = []
n = 4
for i in range(0, len(words), n):
    subs.append("" "".join(words[i:i+n]))
print subs[:10]
"
python beautifulsoup extract text,"from bs4 import BeautifulSoup

html = """"""
<div id=""AddnInfo"">
<h3>Additional Info</h3>
<p>
<p class=""sknText""><label>“R”Web#:</label> <span class=""value"">215904</span>   </p>
<p class=""skuText""><label>SKU:</label> <span class=""value"">B7958C02</span>    </p>
<p class=""upc""><label>UPC/EAN/ISBN:</label> <span class=""value"">092317112958</span></p>
<p><label>Manufacturer #:</label> PAW11295</p>
<p><label>Product Weight:</label>2.2 pounds</p>
<p><label>Product Dimensions (in inches):</label>12.7 x 10.1 x 5.4</p>
</p>
</div>
""""""

soup = BeautifulSoup(html)
div = soup.find('div', {'id':'AddnInfo'})
p = div.find_all('p')[4]
label = p.find('label')
manufacturer = label.text
label.extract()
id = p.get_text(strip=True)
print manufacturer
print id
"
How to create a dictionary with columns given as keys and values," edges = open('romEdges.txt')
 dict = {line[:1]:line[1:] for line in edges}
 print dict
 edges.close()
"
numpy array multiplication with arrays of arbitrary dimensions,">>> C3 = (A * B.T).T
>>> np.allclose(C0, C3)
True
"
What is the standard way to add N seconds to datetime.time in Python?,"import datetime
a = datetime.datetime(100,1,1,11,34,59)
b = a + datetime.timedelta(0,3) # days, seconds, then other fields.
print a.time()
print b.time()
"
how to open some specific files using python,"import glob
import datetime

dic={}

for f in glob.glob('*-*.txt'):
    d = datetime.datetime.strptime(f, '%Y%m%d-%H%M%S.txt')
    if d.hour < 2:
        continue
    if not d.day in dic or dic[d.day][0] > d.time:
        dic[d.day] = (d.time, f)

for t, f in dic.values():
    print f
"
Defining regular expression,">>> import re
>>> s = 'AN : GSHJ488GL67 Customer : sh3893 Acnt No : cgk379gu Name : xyz'
>>> re.findall(r'\b(?:AN|Acnt No) : (\w+)', s)
['GSHJ488GL67', 'cgk379gu']
"
parallelize recursion python,"def f(x):
    print(x)

if __name__ == ""__main__"":
    # Create two lists of tuples, like your use-case
    x = zip(range(3), range(3,6))
    y = zip(range(6, 9), range(9, 12))

    pool = multiprocessing.Pool()
    pool.map(f, itertools.product(x, y))
"
Match and change multiple date formats into one with Python Regex,"import re
import time
import datetime
import calendar

p = re.compile(ur'(?<=\.|_)([A-Z\d+_-]*?([A-Z\d+_-]{0,10}))(?=\.)')
test_str = u""Format            Example Input String  \n\nMMDDYYYY          foo.bar.02242015.txt\nMMDDYY            foo.bar.022415.txt\nMONCCYY           foo.bar.FEB2015.txt\nYYYY-MM-DD        foo_bar_2015-02-01_2015-02-28.txt\nYYYYMMDD          foo_bar_20150224.txt\nMM_YY             foo_bar_02_15.txt\nYYYYMMDD          foo_bar_20150224.txt""
def changedate(date):
    try:
        t = time.strptime(date,'%m%d%Y')
    except:
        pass
    try:
        t = time.strptime(date,'%m%d%y')
    except:
        pass
    try:
        t = time.strptime(date,'%b%Y')
        lastday = calendar.monthrange(int(t.tm_year), int(t.tm_mon))[1]
        t = time.strptime(date + str(lastday),'%b%Y%d')
    except:
        pass
    try:
        t = time.strptime(date,'%m_%y')
        lastday = calendar.monthrange(int(t.tm_year), int(t.tm_mon))[1]
        t = time.strptime(date + str(lastday),'%m_%y%d')
    except:
        pass        
    try:
        t = time.strptime(date,'%Y-%m-%d')
    except:
        pass
    try:
        r = time.strftime(""%Y%m%d"",t)
        return r
    except:
        pass
    return date
test_str = re.sub(p,lambda m: changedate(m.group(2)), test_str)
print test_str
"
How to create an adb shell am like argument parser in python?,"parser.parse_args('--eia key1 1,2 --eia key2 2,1'.split())
"
Selecting rows by members of a list contained in a cell,"import pandas as pd

#----------------------------------------------

data = [
    [1, [2,3,8]],
    [2, [12,13,18]],
    [3, [2,3,8]],
    [4, [1,2,3,8,10]],
    [5, [8,3,2]],
]

#----------------------------------------------

df_list = pd.DataFrame( data, columns=['a','b'])

print '\n DataFrame with lists \n'
print df_list

print '\n test: \n'

# test if any element from data list is in [2,3,8]
def test(data):
    return any( x in [2,3,8] for x in data )

print df_list['b'].apply(test)
print df_list[ df_list['b'].apply(test) ]

#----------------------------------------------
"
Pythonic way to check generator values using its own elements,"def check_line(char='|'):
    correct_count = None

    while True:
        line = yield None
        line_count = line.count(char)
        if not correct_count:
           correct_count = line_count

        if line_count != correct_count:
           print """"""Line %d contains %d %s, should have %d"""""" % (
                 i, line_count, char, correct_count)

with open('file.txt', 'rb') as f:
     checker = check_line()
     for i, line in enumerate(f):
         checker.next(line)
"
Python numpy bool masks for absoluting values,"res = 1 - x.astype(bool).astype(int)
"
Subsetting DataFrame using ix in Python,"In [280]: X['var2'].iloc[[0,1]]
Out[280]: 
0   NaN
4     9
Name: var2, dtype: float64
"
How can I append whole columns to a table (list of lists) in python?,"def addcolumn(table, column):
    tr = transpose([table, column])
    return [(x if x else []) + (list(y) if y else []) for x, y in tr]
"
Clean nested lists in Python,"def expand_singles(item):
    if isinstance(item, list):
        if len(item) == 1:
            return expand_singles(item[0])
        return [expand_singles(i) for i in item]
    return item
"
How can I call methods between two classes?,"class A(object):
    def __init__(self):
        self.c = C()
        self.b = B(self.c)

class B(object):
    def __init__(self, c):
        self.cobj = c

    def call_c(self):
        self.cobj.a_method_of_c()

class C(object):
    # whatever...
"
best way to extract subset of key-value pairs from python dictionary object,"dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"
python: unpacking a string to a list,"my_list = my_string.split(',')
"
Column recoding based on count of distincts,"def recode(s, threshold):
    b = s.groupby(s).transform(lambda x: x.count() >= threshold).astype('bool') # True/False
    s[~b] = 'X'
    return s
"
How can I add a lot of Buttons to the tkinter Frame efficiently?,"def callback(self,i): # This is the callback factory. Calling it returns a function.
    def _callback():
        print(i) # i tells you which button has been pressed.
    return _callback

def __init__(self):
    names=('One','Two','Three','Four','Five','Six','Seven','Eight','Nine','Ten')
    self.button=[]
    for i,name in enumerate(names):
        self.button.append(Button(frame, text=name, command=self.callback(i+1)))
        row,col=divmod(i,5)
        self.button[i].grid(sticky=W+E+N+S, row=row, column=col, padx=1, pady=1)
"
Python: How to convert a string containing hex bytes to a hex string,">>> s = '356a192b7913b04c54574d18c28d46e6395428ab'
>>> s.decode(""hex"")
'5j\x19+y\x13\xb0LTWM\x18\xc2\x8dF\xe69T(\xab'
"
testing if a numpy array is symmetric?,"all((arr[:,:,x].T==arr[:,:,x]).all() for x in range(arr.shape[2]))
"
How to load and show a rescaled image with pyqt4,"def describe(obj):
    for key in dir(obj):
        try:
            val = getattr(obj, key)
        except AttributeError:
            continue
        if callable(val):
            help(val)
        else:
            print('{k} => {v}'.format(k = key, v = val))
        print('-'*80)

pixmap = QtGui.QPixmap(FILENAME)
describe(pixmap)
"
which random am i looking for to achieve this:,"[random.choice(['[', ']', '[]']) for _ in range(random.randint(1, 10))]
"
Pygame won't work on Mac mini with no monitor connected,"from subprocess import Popen, STDOUT, PIPE
from time import sleep
audio_file = ""/tmp/music.wav""

x = Popen('afplay ' + audio_file, shell=True, stdout=PIPE, stdin=PIPE, stderr=STDOUT)
while x.poll() == None:
    output = x.stdout.readline() # You need this!
    # Otherwise the output buffer will get full and hang your application.
    # Or just remove stdout=PIPE, stdin=PIPE, stderr=STDOUT from the Popen() call
    # if you're not interested in the output of the application.
    sleep(0.025)    
print('Music stoped')
"
Represent a hash string to binary in Python,"def text_to_bin(text, n_bin=16):
    if n_bin < 16 or n_bin > 36:
        print ""n_bin must be >= 16 and <= 36""
    else:
        for word in text.split():
            word_ord = ['{}'.format(bin(int(hashlib.md5(word).hexdigest(), n_bin)))]
            print '{} {}'.format(word, ''.join(word_ord)[2:])

text_to_bin('A cat in the woods', 16)
A 1111111110001010110001001110000111001111010011100001111101010000001101001011001001101011011011100101110101011001011111000101001
cat 11010000011101111111001001000100110111101111100010100111000011100101111010100111010110001011110110000011010100101111110011011000
in 10011101101011011111111101001011011110011111000101111111001000001000111001001111101100110111101001010010110000010101011011111
the 10001111110001000010110001101101110111111001100101100110110110110011101100001001111010000100001101100101000000110100001101010111
woods 10110111101111111011100101001001001001111100010000000101011101111100000100000001100111100000000010000100110101110011001010010111
"
Python print array in one print function,"print ""insert into users values({0}, {1}, {2}, ...);"".format(*arr)
"
Mapping and joining a python list,""","".join([""{%s}"" % e for e in myList])
"
Python - Merge two lists with a simultaneous concatenation,">>> [sum(x) for x in zip(ListA, ListB)]
[11, 22, 33]
>>>
"
Numpy: Sorting a multidimensional array by a multidimensional array,">>> a = np.random.standard_normal(size=(2,5))
>>> a
array([[ 0.72322499, -0.05376714, -0.28316358,  1.43025844, -0.90814293],
       [ 0.7459107 ,  0.43020728,  0.05411805, -0.32813465,  2.38829386]])
>>> i = np.array([[0,1,2,4,3],[0,1,2,3,4]]) 
>>> a[np.arange(a.shape[0])[:,np.newaxis],i]
array([[ 0.72322499, -0.05376714, -0.28316358, -0.90814293,  1.43025844],
       [ 0.7459107 ,  0.43020728,  0.05411805, -0.32813465,  2.38829386]])
"
How can I find all subclasses of a given class in Python?,"print([cls for cls in vars()['Foo'].__subclasses__()])
# [<class '__main__.Bar'>, <class '__main__.Baz'>]
"
Numpy: Convert values in a 1-D array based upon dictionary,"In [42]: result = np.empty(data.size, dtype=int)

In [43]: for key, val in mapping.items():
   ....:     result[data == key] = val
   ....:     

In [44]: result
Out[44]: array([9, 0, 9, 9, 5, 0])
"
Regex not matching \t\n\r\f\v in Python,">>> for i in content[:]:
...     m=re.match(r'.*[\t\n\r\f\v]+',i)
...     if m:
...        content.remove(i)
... 
>>> content
['ADVENTURE', '*', 'Solving', 'it', 'in', 'easy', 'steps', 'FROM:', 'THE', 'ROM', 'DR.', 'CALL', 'HER']
"
How to create a datetime object with PyYAML,"dt = yaml.load(""dt: !!python/object/apply:time.gmtime []"")
dt = yaml.load(""dt: !!python/object/apply:time.time []"")
"
Is there a way to import an object from python module programatically?,"import importlib
module = importlib.import_module(""foo"")
obj = getattr(module, ""bar"")
"
Set variables in python list comprehension,"def foo(x):       # assume this function is expensive
    return 2*x

>>> [j for j in (foo(i) for i in range(6)) if j > 4]
#                ^ only called once per element
[6, 8, 10]
"
New column from previous columns in Pandas,"data['title'] = data.apply(lambda row: ""Sheet{}_Row{}_Column{}_Cell{}"".format(row['Sheet'], row['Row'], row['Column'], row['Cell']) , axis=1)
"
Getting stats about each row and putting them into a new column. Pandas,"df['count of not x'] = df.apply(lambda x: (x[['y','z']] != x['x']).sum(), axis=1)
df['unique'] = df.apply(lambda x: x[['x','y','z']].nunique(), axis=1)
"
Replacing a character (translating python code to JavaScript)," var txt = 'old text';
 console.log(txt.replace('old', 'new'));
"
Python list rearranging,">>> zip(*result)
[('c1r1', 'c2r1', 'c3r1'), ('c1r2', 'c2r2', 'c3r2'), ('c1r3', 'c2r3', 'c3r3')]
"
listing files from a directory using glob python,glob.glob('[!hello]*.txt')
counting values and adding reference in a new dataframe column,"import pandas as pd
import io

content = io.BytesIO('''index ID
7     2035200584
8     2035200584
9     2035200584
31    2038128459
32    2038128459
33    2038128459
42    2053561908
43    2053561908
44    2053561908''')

df = pd.read_table(content, sep='\s+', header=0)

df['ID'] = df.groupby('ID')['ID'].transform(
    lambda x: map('{:.0f}_{:.0f}'.format, x, x.rank('first')))

print(df)
"
Scrolling objects are jerky and sometimes jump to the right a few pixels [pygame],"a = [2, 3, 4, 1.5, 6, 8, 3.2]

for element in a:
    if element == 4:
        a.remove(element)
    else:
        print element
"
Arrows on Scatter,"import numpy as np
from matplotlib import pyplot as plt

data = np.genfromtxt('file1.dat', delimiter=',', skip_header=1, names=['MAG', 'X0', 'Y0','X1','Y1'])
plt.scatter(data['X0'], data['Y0'], color='r', zorder=10)
plt.scatter(data['X1'], data['Y1'], color='r', zorder=10)

for d in data:
    if(d['MAG'] > 0):
        plt.arrow(d['X0'],d['Y0'],d['X1']-d['X0'], d['Y1']-d['Y0'], 
         shape='full', color='b', lw=d['MAG']/2., length_includes_head=True, 
         zorder=0, head_length=3., head_width=1.5)

plt.show()
"
Python: an efficient way to slice a list with a index list,"c = [b[i] for i in index]
"
Accessing nested tupels in dictionary values,">>> from operator import itemgetter
>>> {k:map(itemgetter(0), foo[k]) for k in foo}
{'a': [1, 2], 'b': [3, 4]}
"
flask+ftplib basic application,"from cStringIO import StringIO
from sys import stdout

# Save a reference to stdout
STANDARD_OUT = stdout

@app.route(""/"")
def hello():
    ftp = FTP(""someaddress"")
    ftp.login()

    # Change stdout to point to a file-like object rather than a terminal
    file_like = StringIO()
    stdout = file_like

    ftp.dir()

    # lines in this case will be a string, not a list
    lines = file_like.getvalue()

    stdout = STANDARD_OUT
    file_like.close()

    return lines
"
How to know if a member of a class is a method?,"return inspect.ismethod(getattr(klass, methodName))
"
How to print in range?,"for i in range(24):
   print('(%3d, %3d): %3d    ' % (i % 6 * 125, i // 6 * 125, i), end='')
   if (i + 1) % 6 == 0:
      print()
"
Python tokenize sentence with optional key/val pairs,"rx = '(\w+)=(\S+)|(\S.+?)(?=\w+=|$)'
d = {
    a or 'theSentence': (b or c).strip()
    for a, b, c in re.findall(rx, s)
}
print d
"
pandas get last value of column x when column y is equal to z,"In [142]: df['c'] = df.loc[df['b']=='x','a'].apply(lambda v: v if v < len(df) else np.nan)
"
how to convert currency in python file,"import re

f = open('EuroMenu.txt','w')

with open(""menu.txt"", ""r"") as ins:
    for line in ins:
        myArray = line.split()

        if myArray:
            m = re.search(r'\$(\d+(?:\.\d{1,2})?)\.?$', myArray[-1])
            if m:
                amount = m.groups()[0]
                myArray[-2] = str(float(amount)*0.75)
                myArray[-1] = 'euros'

        f.write("" "".join(myArray) + "" \n"")

f.close()
"
Python argparse: separate options for positional arguments,"import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-A', action = 'store_true')
parser.add_argument('-B', action = 'store_true')
args, unk = parser.parse_known_args()

file_parser = argparse.ArgumentParser()
file_parser.add_argument('-C', action = 'store_true')
file_parser.add_argument('-D', action = 'store_true')
file_parser.add_argument('-V', ""--variable-list"")
file_parser.add_argument('file')

fargs=[]
n=len(unk)
while True:
        i=0
        for i in  range(n): # finding longest fully parsable tail
            Parsed, unkf = file_parser.parse_known_args(unk[i:n])
            if not unkf: break
        if i==n: # did not found parsable tail
            file_parser.parse_args(unk[0:n]) # cause error 
        else:
            fargs.append(Parsed)
            n=i
        if (n<=0): break
fargs.reverse()

print args
for argl in fargs:
        print argl
"
Python: how to create a class name on the fly,"def include( filename, classname, doReload=False ):
    # http://www.php2python.com/wiki/function.include/
    # http://docs.python.org/dev/3.0/whatsnew/3.0.html
    # http://stackoverflow.com/questions/4821104/python-dynamic-instantiation-from-string-name-of-a-class-in-dynamically-imported

    #_locals_ = {'Contemplate': Contemplate}
    #_globals_ = {'Contemplate': Contemplate}
    #if 'execfile' in globals():
    #    # Python 2.x
    #    execfile(filename, _globals_, _locals_)
    #    return _locals_[classname]
    #else:
    #    # Python 3.x
    #    exec(Contemplate.read(filename), _globals_, _locals_)
    #    return _locals_[classname]

    # http://docs.python.org/2/library/imp.html
    # http://docs.python.org/2/library/functions.html#__import__
    # http://docs.python.org/3/library/functions.html#__import__
    # http://stackoverflow.com/questions/301134/dynamic-module-import-in-python
    # http://stackoverflow.com/questions/11108628/python-dynamic-from-import
    # also: http://code.activestate.com/recipes/473888-lazy-module-imports/
    # using import instead of execfile, usually takes advantage of Python cached compiled code

    global _G
    getClass = None
    directory = _G.cacheDir
    # add the dynamic import path to sys
    os.sys.path.append(directory)
    currentcwd = os.getcwd()
    os.chdir(directory)   # change working directory so we know import will work

    if os.path.exists(filename):

        modname = filename[:-3]  # remove .py extension
        mod = __import__(modname)
        if doReload: reload(mod) # Might be out of date
        # a trick in-order to pass the Contemplate super-class in a cross-module way
        getClass = getattr( mod, '__getClass__' )

    # restore current dir
    os.chdir(currentcwd)
    # remove the dynamic import path from sys
    del os.sys.path[-1]

    # return the Class if found
    if getClass:  return getClass()
    return None
"
Strings not joining in Python,"for x in pattern:
    if x == ""A"":
        password += random.choice(auc)
    elif ...
"
Python regex - Replace all but a few words,"p = re.compile(r'(?!\bbadger\b|\bmushroom\b)\b[^\s]+\b')
test_str = ""badger randomword badger mushroom mushroom somethingelse""
subst = ""mushroom""
result = re.sub(p, subst, test_str)
"
best way to compare sequence of letters inside file?,"from itertools import groupby
from Bio       import SeqIO

records = list(SeqIO.parse(file('spoo.fa'),'fasta'))

def seq_getter(s): return str(s.seq)
records.sort(key=seq_getter)

for seq,equal in groupby(records, seq_getter):
  ids = ','.join(s.id for s in equal)
  print '>%s' % ids
  print seq
"
Replacing multiple similar strings,"
re.sub(pattern, repl, string, count=0, flags=0)
"
Group/Count list of dictionaries based on value,">>> from collections import Counter
>>> tokens = [{""Value"": ""Blah"", ""SO"": 0}, {""Value"": ""zoom"", ""SO"": 5}, {""Value"": ""Blah"", ""SO"": 2}, {""Value"": ""Blah"", ""SO"": 3}]
>>> Counter(tok['Value'] for tok in tokens)
Counter({'Blah': 3, 'zoom': 1})
"
Python: recursively copy batch of directories,"import os, os.path, shutil

src=""G:\\TestCopy""
dst=""D:\\TestCopy""

def copy_tree(srcpath, dstpath):
    print(srcpath)
    if not os.path.exists(dstpath):
        os.makedirs(dstpath)
    for candidate in os.listdir(srcpath):
        srccan = os.path.join(srcpath, candidate)
        dstcan = os.path.join(dstpath, candidate)
        if os.path.isdir(srccan):
            copy_tree(srccan, dstcan)
        else:
            shutil.copyfile(srccan, dstcan)

copy_tree(src, dst)
"
Adding multiple elements to a list in Python,"def userNum(iterations):
    myList = []
    for _ in range(iterations):
        value = int(input(""Enter a number for sound: ""))
        myList.append(value)
    return myList
"
Convex Hull Area in Python?,"def PolyArea2D(pts):
    lines = np.hstack([pts,np.roll(pts,-1,axis=0)])
    area = 0.5*abs(sum(x1*y2-x2*y1 for x1,y1,x2,y2 in lines))
    return area
"
How to access tuple's elements in a class that inherits it,"class sampleClass:
    def __init__(self, tup):
            self.tup = tup
    def __str__(self): #To print it
            return str(tuple([item if item <= 10 else 10 for item in self.tup])) #List comprehension to replace x > 10 with 10, then convert to a tuple, then surround with quotes so __str__ accepts it
    def __getitem__(self, ind): #To access by index e.g. x[1], x[-1] etc.
            return self.tup[ind]
"
Cross-validation: finding row indices for a test set that aren't part of a training set,"import numpy as np

gen = np.random.RandomState(0)

n_total = 1000
n_train = 800

train_idx = gen.choice(n_total, size=n_train)
test_idx = np.setdiff1d(np.arange(n_total), train_idx)
"
chunk a text database into N equal blocks and retain header,"with open('file') as file:
  lines = file.readlines()

headers = lines[0:1]
rest = lines[1:]
chunk_size = 4

def chunks(lst, chunk_size):
  for i in xrange(0, len(lst), chunk_size):
    yield lst[i:i + chunk_size]

def write_rows(rows, file):
  for row in rows:
    file.write('%s' % row)

part = 1
for chunk in chunks(rest, chunk_size):
  with open('part%d' % part, 'w') as file:
    write_rows(headers, file)
    write_rows(chunk, file)
  part += 1
"
Problematic function pickling,"import pickle
import marshal
import types

class Foo():
    def __init__(self, fun):
        self.fun = fun

    def call_fun(self, arg):
        self.fun(arg)

    def save(self, f):
        saved = self.fun
        self.fun = marshal.dumps(self.fun.func_code)
        pickle.dump(self, f)
        self.fun = saved

    @staticmethod
    def load(f):
        foo = pickle.load(f)
        foo.fun = types.FunctionType(marshal.loads(foo.fun), globals())
        return foo

def sample_function(arg):
    arg.effect(4)

class Arg():
    def effect(self, value):
        print ""ok: "" + str(value)
"
fast way to compare whether the number is in the list of ranges in python,"list3 = set(range(0,11) + range(25,36) + range(100,111) + range(75,86))
[x in list3 for x in list1]
"
how to Ignore characters other than [a-z][A-Z],"import string
ascii_letters = set(map(ord, string.ascii_letters))
non_letters = ''.join(chr(i) for i in range(256) if i not in ascii_letters)
inputtext.translate(None, non_letters)
"
create a dict with unique keys and various list values from a tuple,"from collections import defaultdict
x = defaultdict(list)
for tup in data:
    x[tup[0]].append(tup[1:])
"
Finding elements in list of lists,"def find(x, L, seen=None):
    if seen is None:
        seen = set()
    if id(L) in seen:
        # Avoid infinite recursion
        return False
    seen.add(id(L))
    return x in L or any(find(x, sublist, seen)
                         for sublist in L
                         if isinstance(sublist, list))
"
How to access elements from imported csv file with pandas in python?,"import pandas as pd
import numpy as np
import io

temp=u""""""Date,no
20030131,1
20030228,3
20030331,5
20030430,6
20030530,3
""""""
#after testing replace io.StringIO(temp) to filename
dateYTM  = pd.read_csv(io.StringIO(temp), parse_dates=['Date'])
print dateYTM 
        Date  no
0 2003-01-31   1
1 2003-02-28   3
2 2003-03-31   5
3 2003-04-30   6
4 2003-05-30   3

#df.loc[index, column]

print dateYTM.loc[0, 'Date']
2003-01-31 00:00:00

print dateYTM.loc[0, 'no']
1
"
beautifulsoup find specific tags,"for row in soup.find_all('tr'):
    fragments = row.find_all('span', class_='gw2money-fragment')
    if not fragments:
        continue
    label = row.th or row.td
    print(label.text)
    for fragment in fragments:
        value = fragment.text.split()[0]
        type_ = fragment.i['class'][0].rsplit('-', 1)[-1]
        print('-', value, type_)
"
How do I fill two (or more) numpy arrays from a single iterable of tuples?,"import numpy as np


def gendata():
    # You, of course, have a different gendata...
    for i in xrange(N):
        yield (np.random.random(), str(i))

N = 100

arr = np.fromiter(gendata(), dtype='<f8,|S20')
"
Sum up over np.array or np.float,">>> np.sum(np.atleast_2d(a), axis=1)
array([ 6.])
>>> np.sum(np.atleast_2d(6.0), axis=1)
array([ 6.])
"
Efficient way to count the greater than operation for each value itself,"import bisect
array = [1.,2.,3.,1.,1.,0.,10.]
n = len(array)
sorted_array = sorted(array)
print [n - bisect.bisect(sorted_array, val) for val in array]
"
Removing duplicates from a list of lists based on a comparison of an element of the inner lists,"In [3]:  l = [[1,4,6,2],[2,2,4,6],[1,2,4,5]]
In [4]: sorted(l,key=lambda x: (-x[1],x[0]))
Out[4]: [[1, 4, 6, 2], [1, 2, 4, 5], [2, 2, 4, 6]]
"
Python Tkinter update when entry is changed,"def callback(*args):
    print ""variable changed!""

var = DoubleVar()
var.trace(""w"", callback)
"
"What would be a good regexp for identifying the ""original message"" prefix in gmail?","On([^,]+,){3}.*?wrote:
"
use .replace() on only one character of a string with repetitive characters,"print ' '.join(soFar)
"
How do I match a word if it starts with a nonalphanumeric character in Python?,"re.search(re.compile('^1', re.MULTILINE), f.read())
"
pandas looking at next row and swapping values,"df['prior_flag'] = df.Flag.shift()
df['next_flag'] = df.Flag.shift(-1)
df['prior_value'] = df.Value.shift()

# Check for 'A' followed by 'T'
df.loc[(df.Flag == 'A') & (df.next_flag == 'T'), 'found'] = True
df.loc[(df.Flag == 'T') & (df.prior_flag == 'A'), 'remove'] = True
df.loc[(df.Flag == 'T') & (df.prior_flag == 'A'), 'Value'] = \
    df.loc[(df.Flag == 'T') & (df.prior_flag == 'A'), 'prior_value']

# Check for 'G' followed by 'C'
df.loc[(df.Flag == 'G') & (df.next_flag == 'C'), 'found'] = True
df.loc[(df.Flag == 'C') & (df.prior_flag == 'G'), 'remove'] = True
temp = df.loc[(df.Flag == 'G') & (df.next_flag == 'C'), 'Value'].values
df.loc[(df.Flag == 'G') & (df.next_flag == 'C'), 'Value'] = \
    df.loc[(df.Flag == 'C') & (df.prior_flag == 'G'), 'Value'].values
df.loc[(df.Flag == 'C') & (df.prior_flag == 'G'), 'Value'] = temp
df.drop(['next_flag', 'prior_flag', 'prior_value'], axis=1, inplace=True)

>>> df
  Flag Value  found remove
0    A     3   True  False
1    T     3  False   True
2    A     3  False  False
3    A     4  False  False
4    G     4   True  False
5    C     3  False   True
6    T     1  False  False
"
Find object in a list with multiple primary keys in Python,"[inst for inst in instances
      if all(get_key_value(inst, pkey) == kw[pkey] for pkey in primary_keys)]
"
Python finite boundary Voronoi cells,"pts = MultiPoint([Point(i) for i in points])
mask = pts.convex_hull.union(pts.buffer(10, resolution=5, cap_style=3))
result = MultiPolygon(
    [poly.intersection(mask) for poly in polygonize(lines)])
"
How do I get rid of Python Tkinter root window?,"import Tkinter as tk
root = tk.Tk()
root.withdraw()
"
"Python FTP ""chunk"" iterator (without loading entire file into memory)","import threading, Queue

def ftp_chunk_iterator(FTP, command):
    # Set maxsize to limit the number of chunks kept in memory at once.
    queue = Queue.Queue(maxsize=some_appropriate_size)

    def ftp_thread_target():
        FTP.retrbinary(command, callback=queue.put)
        queue.put(None)

    ftp_thread = threading.Thread(target=ftp_thread_target)
    ftp_thread.start()

    while True:
        chunk = queue.get()
        if chunk is not None:
            yield chunk
        else:
            return
"
round number to nearest integer,"round(1.005, 2)"
Translating Numpy code into C#,"In [63]: points=np.arange(12,dtype=float).reshape(4,3)
In [64]: vectors=[np.array([1,0,0],dtype=float),np.array([0,1,1],dtype=float)]
In [65]: u=np.array(vectors)
In [66]: points
Out[66]: 
array([[  0.,   1.,   2.],
       [  3.,   4.,   5.],
       [  6.,   7.,   8.],
       [  9.,  10.,  11.]])
In [67]: u
Out[67]: 
array([[ 1.,  0.,  0.],
       [ 0.,  1.,  1.]])
In [68]: d=np.dot(points, u.T)
In [69]: d
Out[69]: 
array([[  0.,   3.],
       [  3.,   9.],
       [  6.,  15.],
       [  9.,  21.]])
In [70]: v2=np.diag(np.inner(u,u))
In [71]: d/v2
Out[71]: 
array([[  0. ,   1.5],
       [  3. ,   4.5],
       [  6. ,   7.5],
       [  9. ,  10.5]])
"
Python serving html async,"import time
from flask import Flask, render_template_string
app = Flask(__name__)

@app.route('/')
@app.route('/<name>')
def hello(name='World'):
    time.sleep(1)
    return render_template_string('''
        <html><body><p>
        Hello, <b>{{ name }}</b>!
        </p></body></html>''', name=name)

if __name__==""__main__"":
    app.run(debug=True)
"
"sql, matching row values obtained from first table to the column names of second table without loop","memcon.row_factory = sqlite3.Row
memdata.execute(""select * from tabletwo where tabletwo.Gene_ID == 'NFYA'"")
nfya_row = memdata.fetchone()

memdata.execute(""SELECT tableone.SampleID from tableone WHERE tableone.Diagnos=='RH'"")
for row in memdata:
    sampleID = row['SampleID']
    print sampleID, nfya_row[sampleID]
"
Parse and Print out the atttribute values from a text file using Python 3.2,"import re
import json

s = """"""Format= {
Window_Type=""Tabular"",
Tabular= { Num_row_labels=5 } }""""""

s = ""{"" + re.sub(r'([a-zA-Z0-9_]+)=',r'""\1"":', s) + ""}""
obj = json.loads(s)

if obj['Format']['Window_Type'] == ""Tabular"":
    print ""Its tabular!""
    numrows = obj['Format']['Tabular']['Num_row_labels']
    print ""Numrows:"", numrows
    if numrows >= 5:
        print ""Print this fileName""
"
What is more effective iterate a list and call a function or pass the list to the function,"l = [{1:2},{2:3},{3:4}]

def func1(d):
        for k in d:
                d[k] += 1

def func2(l):
        for d in l:
                for k in d:
                        d[k] += 1
"
Help for arrays: converting php code to python,"data = {}
data[""people 1""] = {}
data[""people 1""][""criteria a""] = ""bla""
data[""people 1""][""criteria b""] = ""ble""
data[""people 2""] = {}
"
Python regex optional capture group or lastindex,"Code:
import re

data = """"""  *** Section with no sub section
  *** Section with sub section ***
           *** Sub Section ***
  *** Another section""""""

pattern = r'^[ ]{0,2}(?:[*]{3}[ ]?(?P<Section>.*?)|[ ]+[*]{3}[ ]?(?P<SubSection>.*?))(?:[ ]?[*]{3})?$'
regex = re.compile(pattern, re.M)

for match in regex.finditer(data):
    print(match.groupdict())

''' OUTPUT:
{'Section': 'Section with no sub section', 'SubSection': None}
{'Section': 'Section with sub section', 'SubSection': None}
{'Section': None, 'SubSection': 'Sub Section'}
{'Section': 'Another section', 'SubSection': None}
'''
"
trouble with regular expressions,"import re
line = ""family: blah""
m = re.search(""family: (.*)"", line)
if m != None:
  print m.group(1)
"
Dynamic default arguments in python functions,"def foo(bar, baz=None):
    if baz is None:
        baz = blar()
"
Renaming files according to a set of rules,"def replace_words ( input_string ):
    replacement_lists = { \
        ""Electronics"" : [""Computer"", ""CD Player"", ""Camera"", ""Coffee Grinder""],
        ""Baked Goods"" : [""Cheesecake"", ""Muffin"",""Cookie""] }

    output_string = input_string
    for type_of_thing, list_of_things in replacement_lists.iteritems():
        for thing in list_of_things:
            output_string = output_string.replace(thing, type_of_thing)

    return output_string

input_names = [ \
""Coffee Cup.jpg"",
""Computer Disks.docx"",
""Muffins.jar"",
""CD Player Maintenance.lzma"",
""Cookie Monster's 101 Types of Cookie.pdf"" ]

output_names = [replace_words(x) for x in input_names]
"
How to split a csv file on date using python,"src_path = ""/home/vivek/Desktop/Work/stack/""
main_file = ""/home/vivek/Desktop/Work/stack/main.csv""
import csv
import collections
import pprint

with open(main_file, ""rb"") as fp:
    root = csv.reader(fp, delimiter=',')
    result = collections.defaultdict(list)
    for row in root:
        year = row[0].split(""-"")[0]
        result[year].append(row)

print ""Result:-""        
pprint.pprint(result)

for i,j in result.items():
    file_path = ""%s%s.csv""%(src_path, i)
    with open(file_path, 'wb') as fp:
        writer = csv.writer(fp, delimiter=',')
        writer.writerows(j)
"
Scraping data table from Chinese stock website using Python,"import urllib
from bs4 import BeautifulSoup, SoupStrainer

baseurl=""http://data.10jqka.com.cn/market/yybzjsl/HTZQGFYXGSCDSJLZQYYB""
page = urllib.urlopen(baseurl) 
getonly = SoupStrainer('table')
table = BeautifulSoup(page, parse_only=getonly)

for row in table(""tr""):
  text = ''.join(row.findAll(text=True))
  data = text.strip()
  print data
"
Turn dataframe into frequency list with two column variables in Python,"In [41]: res = g[""comp""].value_counts().unstack(1)

In [42]: res.columns = ['det%s' % i for i, _ in enumerate(df.columns)]
"
Defining a function from IDL in Python,">>> np.logspace(np.log10(2), np.log10(8), 10)
array([ 2.        ,  2.33305808,  2.72158   ,  3.1748021 ,  3.70349885,
        4.32023896,  5.0396842 ,  5.87893797,  6.85795186,  8.        ])
"
How to add a custom function/method in sqlalchemy model to do CRUD operations?,"class User(db.Model):
    __tablename__ = 'user'

    user_id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(30), nullable=False)
    created_at = db.Column(db.DateTime, nullable=False, server_default=db.text(""CURRENT_TIMESTAMP""))
    updated_at = db.Column(db.DateTime, nullable=False, server_default=db.text(""CURRENT_TIMESTAMP""))

    def __init__(self, name):
        self.name = name

    @classmethod
    def create(cls, **kw):
        obj = cls(**kw)
        db.session.add(obj)
        db.session.commit()
"
Computing the combinations for presence or absence of a factor in a table,"import collections

with open(""data"") as f:
        lines=[line.strip().split() for line in f]

combinations=collections.Counter(
        "", "".join(lines[0][i]
                for i in xrange(len(combination))
                        if combination[i] != '0')
                for combination in lines[1:])

for key, value in combinations.iteritems():
        print value, '\t', key
"
How can I lookup an attribute in any scope by name?,"getattr(__builtins__, 'range')"
Python - Finding elements in a list efficiently,"def indices():
    for k in range(47):
        for j in range(1000):
            for i in range(40):
                yield k, j, i
def keyfn(ind):
    k, j, i = ind
    return list_a[k][j][i]

print(nsmallest(4, indices(), key=keyfn))
"
Copy 'N' key value pairs from one python dictionary to another,"x = 5
a = {}
b = dict(enumerate('ABCDEFGHIJKLM'))

while x > 0:
    try:
        key, value = b.popitem()
    except KeyError:
        break
    else:
        a[key] = value
        x -= 1

print(a)
print(b)
"
sorting a list with objects of a class as its items,"your_list.sort(key = lambda x : x.anniversary_score)
"
"lxml use namespace instead of ns0, ns1,","from lxml import etree

ns_bldg = ""http://www.opengis.net/citygml/building/2.0""
nsmap = {
    'bldg': ns_bldg,
}

cityModel = etree.Element(""cityModel"", nsmap=nsmap)
cityObject = etree.SubElement(cityModel, ""cityObjectMember"")
bldg = etree.SubElement(cityObject, ""{%s}Building"" % ns_bldg)
function = etree.SubElement(bldg, ""{%s}function"" % ns_bldg)
function.text = ""1000""
print etree.tostring(cityModel, pretty_print=True)
"
How to convert a binary tree in to a dictionary of levels,"def level_dict(adj_list,curr_elems,order=0):
    if not curr_elems:    # This check ensures that for empty `curr_elems` list we return empty dictionary
            return {}   
    d = {}
    new_elems = []
    for elem in curr_elems:
            d.setdefault(order,[]).append(elem)
            new_elems.extend(adj_list.get(elem,[]))
    d.update(level_dict(adj_list,new_elems,order+1))
    return d
"
Convert a string to datetime object in python,"dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"
search python dictionary not showing,"def search(values, searchFor):
    for element, details in values.items():
        if element == searchFor:
           print element, details #As @PM 2Ring says, for Python 3x you should print (element, details)
"
Easily dumping variables from/to namespaces/dictionaries in Python,"class dump_into_namespace:
    def __init__(self, env, *vs):
        vars(self).update(dict([(x, env[x]) for v in vs for x in env if v is env[x]]))

def f():
    x = 10
    y = 20
    return dump_into_namespace(locals(), x, y)

o = f() 
print o.x, o.y 
globals().update(vars(o))
print x
"
How to give multiple values to a single key using a dictionary?,"import sqlite3

conn = sqlite3.connect('test.sqlite')

cursor = conn.cursor()

cursor.execute('''
CREATE TABLE people (
    FirstName text,
    LastName text,
    Age int,
    Sex text
    )''')

cursor.execute('''
INSERT INTO people values ('John', 'Deer', 20, 'M')''')

cursor.execute('''
INSERT INTO people values ('Ada', 'Lovelace', 23, 'F')''')

conn.commit()

for record in cursor.execute('''SELECT * FROM people'''):
    print(record)
"
How to update values for specific keys in dict in Python,">>> d = {k:[] for k in  'abcdef'}
>>> [id(x) for x in d.values()]
[164621484, 164653580, 164331340, 164653804, 164653900, 164653836]
"
Class variable in python context class,">>> class NestedContext(object):
...     _current = None
...     def __init__(self, name):
...         self._name = name
...     def __repr__(self):
...         return '<NestedContext({._name!r})>'.format(self)
...     def __enter__(self):
...         self.parent = self._current
...         NestedContext._current = self
...     def __exit__(self, _type, _value, _tb):
...          NestedContext._current = self.parent
... 
>>> with NestedContext('outer'):
...     print NestedContext._current
...     with NestedContext('inner'):
...         print NestedContext._current
...         print NestedContext._current.parent
... 
<NestedContext('outer')>
<NestedContext('inner')>
<NestedContext('outer')>
"
How to quickly get a list of keys from dict,"from collections import Counter

counts = Counter(item for key in d for item in key)
commonkkeylist = [item for item, count in counts.most_common() if count > 50]
"
python regular expression find and replace html tag with specific attribute value,"from lxml import etree
tree = etree.HTML('''<html>
                     <body>
                        <h1>Title</h1>
                        <img src=""/media/old/another_logo.png"" alt="""" />
                        <p>Lorem Ipsum</p>
                        <p><img src=""/media/old/logo.png"" alt=""""/></p>
                     </body>
                  </html>''')

imgs = tree.xpath('.//img')

for img in imgs:
    print 'OLD_SOURCE', img.get('src')
    img.set('src', '/media/new/python.jpg')

print etree.tostring(tree)
"
How to added up a variable with multiple values together in Python Recursion Function?,"from math import log10


def sum_digits(n, i=None):
    if i is None:
        i = int(log10(abs(n)))

    e = float(10**i)
    a, b = (n / e), (abs(n) % e)

    if i == 0:
        return int(a)
    else:
        return int(a) + sum_digits(b, (i - 1))


print sum_digits(1234)
print sum_digits(-1234)
"
"Generating random X,Y coordinates in a grid","grid = [['O' for i in range(10)] for j in range(10)] # use generators to create list

def print_grid():
    print(""  "" + "" "".join(str(i) for i in range(10))) # "" "".join() puts the "" "" between each string in the list
    for y in range(10): 
        print(str(y) + "" "" + "" "".join(grid[y]))

print_grid()

# OUTPUT:
#   0 1 2 3 4 5 6 7 8 9
# 0 O O O O O O O O O O
# 1 O O O O O O O O O O
# 2 O O O O O O O O O O
# 3 O O O O O O O O O O
# 4 O O O O O O O O O O
# 5 O O O O O O O O O O
# 6 O O O O O O O O O O
# 7 O O O O O O O O O O
# 8 O O O O O O O O O O
# 9 O O O O O O O O O O

grid[0][3] = 'X'
grid[1][3] = 'X'
grid[2][3] = 'X'
grid[3][3] = 'X'

print_grid()

# OUTPUT:
#   0 1 2 3 4 5 6 7 8 9
# 0 O O O X O O O O O O
# 1 O O O X O O O O O O
# 2 O O O X O O O O O O
# 3 O O O X O O O O O O
# 4 O O O O O O O O O O
# 5 O O O O O O O O O O
# 6 O O O O O O O O O O
# 7 O O O O O O O O O O
# 8 O O O O O O O O O O
# 9 O O O O O O O O O O
"
Extract specific characters from the string,"In [179]: text.rpartition('offset ')
Out[179]: ('March 1st 2013 ntp[22485] Time server ', 'offset ', '-.0070 sec')
In [169]: text.rpartition('offset ')[-1]
Out[169]: '-.0070 sec'
"
scrapy crawl spider ajax pagination,"somespider.py
# -*- coding: utf-8 -*-
import scrapy
import re
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.selector import Selector
from scrapy.spider import BaseSpider
from demo.items import DemoItem
from selenium import webdriver

def removeUnicodes(strData):
        if(strData):
            strData = strData.encode('utf-8').strip() 
            strData = re.sub(r'[\n\r\t]',r' ',strData.strip())
        return strData

class demoSpider(scrapy.Spider):
    name = ""domainurls""
    allowed_domains = [""domain.com""]
    start_urls = ['http://www.domain.com/used/cars-in-trichy/']

    def __init__(self):
        self.driver = webdriver.Remote(""http://127.0.0.1:4444/wd/hub"", webdriver.DesiredCapabilities.HTMLUNITWITHJS)

    def parse(self, response):
        self.driver.get(response.url)
        self.driver.implicitly_wait(5)
        hxs = Selector(response)
        item = DemoItem()
        finalurls = []
        while True:
            next = self.driver.find_element_by_xpath('//div[@class=""showMoreCars hide""]/a')

            try:
                next.click()
                # get the data and write it to scrapy items
                item['pageurl'] = response.url
                item['title'] =  removeUnicodes(hxs.xpath('.//h1[@class=""page-heading""]/text()').extract()[0])
                urls = self.driver.find_elements_by_xpath('.//a[@id=""linkToDetails""]')

                for url in urls:
                    url = url.get_attribute(""href"")
                    finalurls.append(removeUnicodes(url))          

                item['urls'] = finalurls

            except:
                break

        self.driver.close()
        return item
"
Make lists into further sublists,"data=""""""? (192.168.30.4) at 00:10:60:0a:70:26 [ether]  on vlan20                        
? (192.168.30.1) at 70:ca:9b:99:6a:82 [ether]  on vlan20""""""

print ""#Protocol  Address          Age (min)   Hardware Addr   Type   Interface""  
for line in data.splitlines():
    _,ip,_,har_ad,_,_,interface = line.split()
    ip = ip.strip('()')
    it = iter(har_ad.split(':'))
    har_ad = ""."".join([x+y for x,y in zip(it,it)])
    print ""#Internet  {} {:>11s} {:>18s} {:>5s} {:>8s}"".format(ip,'-', har_ad,'ARPA' ,interface)        
"
Equivalent of `polyfit` for a 2D polynomial in Python,"import numpy as np

x = np.linspace(0, 1, 20)
y = np.linspace(0, 1, 20)
X, Y = np.meshgrid(x, y, copy=False)
Z = X**2 + Y**2 + np.random.rand(*X.shape)*0.01

X = X.flatten()
Y = Y.flatten()

A = np.array([X*0+1, X, Y, X**2, X**2*Y, X**2*Y**2, Y**2, X*Y**2, X*Y]).T
B = Z.flatten()

coeff, r, rank, s = np.linalg.lstsq(A, B)
"
How to remove a node inside an iterator in python xml.etree.ElemenTree,"node.getparent().remove(node)
"
Checking if a key exists and its value is not an empty string in a Python dictionary,">>> a = {'foo':''}
>>> a.get('foo','bar') or 'bar'
'bar'
>>> a['foo'] = 'baz'
>>> a.get('foo','bar') or 'bar'
'baz'
>>> a.get('qux','bar') or 'bar'
'bar'
"
Cycle through list starting at a certain element,"from itertools import cycle, islice, dropwhile

L = [1, 2, 3, 4]

cycled = cycle(L)  # cycle thorugh the list 'L'
skipped = dropwhile(lambda x: x != 4, cycled)  # drop the values until x==4
sliced = islice(skipped, None, 10)  # take the first 10 values

result = list(sliced)  # create a list from iterator
print(result)
"
getting all possible cases in Python3,"from itertools import product

for combo in product(*filter(None, yourlist)):
    print(combo)
"
Alternative to python string item assignment,">>> s = 'abc' + 'd' + 'efg'
>>> s
'abcdefg'
"
python pandas converting dataframe(s) to lists,">>> df_scr_crd_d.loc[df_scr_crd_d.Subject == 'MATH', 'SCR_STRT'].tolist()
[10, 20, 30, 99999]

>>> df_scr_crd_d.loc[df_scr_crd_d.Subject == 'MATH', 'POINTS'].tolist()
[100, 200, 300, 500]
"
Webpy doesn't validates form,"import web

urls = (
    '/', 'Index',
    '/search/text=(.*)', 'Search',
)

render = web.template.render('templates/')

search_form = web.form.Form(
        web.form.Textbox(
            'text',
            web.form.regexp(r""\S+"", ""It mustn't be empty""),
            size=30,
            description='Text'),
        web.form.Button('Apply'),
    )

class Index:

    def GET(self):
        form = search_form()
        text = 'Hello'
        return render.index(form, text)

    def POST(self):
        form = search_form()
        if not form.validates():
           text = 'Bad Text'
           return render.index(form, text)
        else:
           url = '/search/text=%s' % form.d.text
           web.seeother(url)

class Search:

    def GET(self, text):
        form = search_form()
        return render.search(form, str(text))

    def POST(self, text):
        form = search_form()
        if not form.validates():
           text = 'Bad Text'
           return render.index(form, str(text))
        else:            
           url = '/search/text=%s' % form.d.text
           web.seeother(url)

class MyApplication(web.application):          
    def run(self, port=8080, *middleware):
        func = self.wsgifunc(*middleware)
        return web.httpserver.runsimple(func, ('127.0.0.1', port))

if __name__ == ""__main__"":
    app = MyApplication(urls, globals())
    app.run(port=8102)
"
Weighted average using pivot tables in pandas,"import numpy as np
import pandas as pd

np.random.seed(0)

n = 50
df = pd.DataFrame({'count': np.random.choice(np.arange(10)+1, n),
                   'grid': np.random.choice(np.arange(10)+50, n),
                   'value': np.random.randn(n) + 12})

df['prod'] = df['count'] * df['value']
grouped = df.groupby('grid').sum()
grouped['wtdavg'] = grouped['prod'] / grouped['count']

print grouped

      count       value        prod     wtdavg
grid                                          
50       22   57.177042  243.814417  11.082474
51       27   58.801386  318.644085  11.801633
52       11   34.202619  135.127942  12.284358
53       24   59.340084  272.836636  11.368193
54       39  137.268317  482.954857  12.383458
55       47   79.468986  531.122652  11.300482
56       17   38.624369  214.188938  12.599349
57       22   38.572429  279.948202  12.724918
58       27   36.492929  327.315518  12.122797
59       34   60.851671  408.306429  12.009013
"
Write a file to disk only when first content is written into it,"mylog = MyFile('test.log', 'w')
mylog.write('...')
mylog.close()
"
Use dictionary in a variable as a set of arguments to a function,"sample1(**argument_dictionary)
"
if 'x' and 'y' in 'z':,"if 'var1' in theQuestion and 'var2' in theQuestion:
"
convert JPG to txt causes change in file size in python,"#save as text decompressed image into bytes
for filename in os.listdir(imagePath):
    if filename!='.DS_Store' and filename[-3:]=='jpg':
        b = imread(filename,flatten=0).flatten()
        print b.shape
        out = ','.join('%d'%i for i in b)+'\n'
        print len(out)
        with open(savepath+'trainMatrix2.txt','a') as fut:
            fut.write(out)
            fut.close()            
"
"using map(int, raw_input().split())",">>> strs = "" "".join(str(x) for x in xrange(10**5))
>>> %timeit [int(x) for x in strs.split()]
1 loops, best of 3: 111 ms per loop
>>> %timeit map(int, strs.split())
1 loops, best of 3: 105 ms per loop
"
how to match two numpy array of unequal length?," def closest(ar1, ar2, iter):
    x = np.abs(ar1[iter] - ar2)
    index = np.where(x==x.min())
    value = ar2[index]
    ar2[ar2==value] = -10000000
    return value
"
How to make pre initilized text appear in Tkinter Entry widget?/ How to set limit of number of same windows open?,"global valid
valid = True
#not put this at start of your program
def opennewindow():
  global valid
  if valid == True:
      valid = False
      #put code for opening new window here assuming you already have that code as 
      #you haven't asked for code for that

def closewindow():
    global valid
    valid = True
    self.master.destroy()
"
Two functions same name python,"list_of_cards = [listCards.GetCard(i) for i in range(len(listCards))]
self.Add(*list_of_cards)
"
Remove repeated sequence of integers from list in Python,"listA = [0,1,2,1,2,1,2,3,4,5,3,4,5,6,0]
listB = [0,1,2,1,2,1,0]

def get_repeated_seq(seq, start, length):
    ref = seq[start:start+length]
    #print(""Ref"", ref)
    for pos in range(start+length, len(seq)-length):
        compare = seq[pos:pos+length]
        #print(""Pos"", pos, compare)
        if compare == ref:
            print(""Found"", ref, ""at"", pos)
            return pos
    return False

def get_repeated_seqs(seq):
    for size in reversed(range(2, len(seq)/2)):
        for pos in range(0, len(seq)-size):
            print(""Check rep starting at pos %s for size %s"" % (pos, size))
            get_repeated_seq(seq, pos, size)

print(get_repeated_seqs(listA))
"
List within a Dictionary as Value in <Key-Value> Pair,"def identify_events(seq):
    result = []
    for i in range(len(seq)-1):
        current = seq[i]
        next = seq[i+1]
        if abs(current - next) > 20:
            result.append(1)
        else:
            result.append(0)
    return result


d = {
    'pikachu':[200,50,40,60,70] , 
    'raichu':[40 ,30,20,10,140]
} 

output = {key: identify_events(value) for key, value in d.iteritems()}

print output
"
repeat arange with numpy,"def junuxx(a) :
    b = np.array([], dtype=np.uint8)
    for x in a:
        b = np.append(b, np.arange(x))
    return b

def mr_e(a) :
    return reduce(lambda x, y: x + range(y), a, [])
"
length of list in python?,"# List of numbers: [1, -3, 10, ...]
numbers = [int(n) for n in A.split()]
"
Python regexp find two keywords in a line,"import re
data=r'<wn20schema:NounSynset rdf:about=""&dn;synset-56242"" rdfs:label=""{saddelmageri_1}"">""'

matches=re.findall('synset-([0-9]+).*label=""{(.*)_1}""', data)
print ""matches:"", matches
"
Cythonizing string array comparison function to be applied to pandas DataFrame,"In [84]: %timeit df2[(result.A.isin(isin) | result.A.isin(isin))]       
10 loops, best of 3: 106 ms per loop
"
Python - Don't Understand The Returned Results of This Concatenated Regex Pattern,">>> text = ""Some nouns like eggs egg bacon what a lovely donkey""
>>> import re
>>> text = ""Some nouns like eggs egg bacon what a lovely donkey""
>>> noun_list = ['eggs', 'bacon', 'donkey', 'dog']
>>> noun_patt = r'\s(?:{})\s'.format('|'.join(noun_list))
>>> re.findall(noun_patt, text)
[' eggs ', ' bacon ']
"
Binding Variable PyQt Radio Buttons,"rb_list = [ rb1, rb2, rb3 ] # where items are your radio buttons
#these can be appended to the list when the objects are created
def rb_check(rbl=rb_list):
    for rb in rbl:
        if rb.isChecked():
            print(""RadioButton"", rb, ""is checked."") # or return value
"
Add item to list in txt file using json (python),"import json
testfile = '/home/vivek/Desktop/input12.txt'

with open(testfile ) as fp:
    content = fp.read()

value = json.loads(content)

list3 = [9,10,11,12]
value.append(list3)

with open(testfile, ""wb"" ) as fp:
    json.dump(value, fp)
"
all combinations of differences of two lists,"from itertools import product

for combo in product(*map(set, zip(good, bad))):
    print(combo)
"
Consolidate duplicate rows of an array,">>> df = pd.DataFrame(a)
>>> df.groupby(0, sort=False, as_index=False).sum().values
array([[117,   1,   1,   0,   0,   1],
       [163,   1,   0,   0,   0,   0],
       [120,   0,   1,   1,   0,   0],
       [189,   0,   0,   0,   1,   0]])
"
Check if a directory exists in a zip file with Python,"import zipfile

def isdir(z, name):
    return any(x.startswith(""%s/"" % name.rstrip(""/"")) for x in z.namelist())

f = zipfile.ZipFile(""sample.zip"", ""r"")
print isdir(f, ""a"")
print isdir(f, ""a/b"")
print isdir(f, ""a/X"")
"
Using console commands in python,"command = ""cat /sys/class/net/eth1/address""
print ""%s"" %(getmac(command))
"
Why are Python lambdas useful?,"f = lambda x: x**2 + 2*x - 5
"
Python remove stop words from pandas dataframe,"test['tweet'].apply(lambda x: [item for item in x if item not in stop])
"
How can I split a DataFrame column with datetimes into two columns: one with dates and one with times of the day?,"pd.DataFrame({
    'date': pd.to_datetime(s).dt.date,
    'time': pd.to_datetime(s).dt.time})
"
Printing numbers in python,print('%.3f' % 3.1415)
How can I generate a list like this with python,">>> from itertools import product ,permutations
>>> p=list(permutations(['2','3','4']))
>>> l=[('-'+i,'-'+j,'-'+k) for i,j,k in permutations(['2','3','4'])]
>>> new=zip(l,p)
>>> new
[(('-2', '-3', '-4'), ('2', '3', '4')), (('-2', '-4', '-3'), ('2', '4', '3')), (('-3', '-2', '-4'), ('3', '2', '4')), (('-3', '-4', '-2'), ('3', '4', '2')), (('-4', '-2', '-3'), ('4', '2', '3')), (('-4', '-3', '-2'), ('4', '3', '2'))]
>>> list(list(product(*zip(j,i))) for i,j in new)
[[('2', '3', '4'), ('2', '3', '-4'), ('2', '-3', '4'), ('2', '-3', '-4'), ('-2', '3', '4'), ('-2', '3', '-4'), ('-2', '-3', '4'), ('-2', '-3', '-4')], [('2', '4', '3'), ('2', '4', '-3'), ('2', '-4', '3'), ('2', '-4', '-3'), ('-2', '4', '3'), ('-2', '4', '-3'), ('-2', '-4', '3'), ('-2', '-4', '-3')], [('3', '2', '4'), ('3', '2', '-4'), ('3', '-2', '4'), ('3', '-2', '-4'), ('-3', '2', '4'), ('-3', '2', '-4'), ('-3', '-2', '4'), ('-3', '-2', '-4')], [('3', '4', '2'), ('3', '4', '-2'), ('3', '-4', '2'), ('3', '-4', '-2'), ('-3', '4', '2'), ('-3', '4', '-2'), ('-3', '-4', '2'), ('-3', '-4', '-2')], [('4', '2', '3'), ('4', '2', '-3'), ('4', '-2', '3'), ('4', '-2', '-3'), ('-4', '2', '3'), ('-4', '2', '-3'), ('-4', '-2', '3'), ('-4', '-2', '-3')], [('4', '3', '2'), ('4', '3', '-2'), ('4', '-3', '2'), ('4', '-3', '-2'), ('-4', '3', '2'), ('-4', '3', '-2'), ('-4', '-3', '2'), ('-4', '-3', '-2')]]
"
Move 3D plot z-axis label right (or left),"import matplotlib
matplotlib.use(""TKAGG"")
import matplotlib.pyplot as pyplot
import mpl_toolkits.mplot3d

figure = pyplot.figure(figsize=(8,4), facecolor='w')
ax = figure.gca(projection='3d')

xLabel = ax.set_xlabel('\nXXX xxxxxx xxxx x xx x', linespacing=3.2)
yLabel = ax.set_ylabel('\nYY (y) yyyyyy', linespacing=3.1)
zLabel = ax.set_zlabel('\nZ zzzz zzz (z)', linespacing=3.4)
plot = ax.plot([1,2,3],[1,2,3])
ax.dist = 10

pyplot.show()
"
Selecting Tags With Multiple Part Class in BeautifulSoup,"def filter_function(elm):
    return elm and ""class"" in elm.attrs and ""A"" in elm[""class""] and ""Y"" not in elm[""class""]
"
Deleting row with Flask-SQLAlchemy,db.session.delete(page)
Finding a recurrance of three ASCII families in a string,"import re

pattern  = '(?:[a-z]{3}|[A-Z]{3}|\d{3}|[\x20-\x2F\x3A-\x40\x5B-\x60\x7B-\x7E]{3})'
password = 'y8kpBD8zcZLKRSh1j7vwCMDQ5orR8VEP!'
matches  =  re.search(pattern, password)
"
Unable to extract Animal name from the File Path using 'rfind' function,">>>os.path.splitext(ntpath.basename(a_path))[0]
'elephant'
"
Flip (reverse) image vertically given its string?,">>> img = 'ABCDEFGHIJKL'
>>> x, y = 4, 3
>>> def chunks(l, n):
...     for i in xrange(0, len(l), n):
...         yield l[i:i+n]
... 
>>> [row for row in chunks(img, x)]
['ABCD', 'EFGH', 'IJKL']
>>> ''.join(reversed([row for row in chunks(img, x)]))
'IJKLEFGHABCD'
"
"In Django admin, tweet on initial save?","class PostAdmin(admin.ModelAdmin):
   ....
   def save_model(self, request, obj, form, change):
      if not obj.pk:
         #tweet about the post
      obj.save()
"
Numpy: Why doesn't 'a += a.T' work?,"In [6]: a
Out[6]: 
array([[ 2, 11,  8, ...,  9, 15,  5],
       [11,  4, 14, ..., 10,  3, 13],
       [ 8, 14, 14, ..., 10,  9,  3],
       ..., 
       [ 9, 10, 10, ..., 16,  7,  6],
       [15,  3,  9, ...,  7, 14,  1],
       [ 5, 13,  3, ...,  6,  1,  2]])
"
Pythonic Referenced For Loop,"for i, v in enumerate(a):
    a[i]= v+1
"
How to convert a string into a constant tuple in Python,">>> RED = ('x234114','z8765667')
>>> locals()[""RED""]
('x234114', 'z8765667')
"
In python curly braces with numbers from range() inside,"'[{}]'.format(' '.join(['{{{}}}'.format(i) for i in range(10)]))
"
Merge DataFrames in Pandas using the mean,"df3 = pd.concat((df1, df2))
df3.groupby(df3.index).mean()

#    col
# a    1
# b    3
# c    4
# d    6
"
Python find min & max of two lists,"max(max(l_one), max(l_two))
min(min(l_one), min(l_two))
"
How to use the sphero_ros Python API?,"#!/usr/bin/python

from sphero_driver import sphero_driver
import time

sphero = sphero_driver.Sphero()

while True:
    try:
        sphero.connect()
        break
    except:
        print '\nTrying to connect again!'
        pass

time.sleep(2)

sphero.set_rgb_led(255, 0, 0, 0, False)
time.sleep(1)
sphero.set_rgb_led(0, 255, 0, 0, False)
time.sleep(1)
sphero.set_rgb_led(0, 0, 255, 0, False)
time.sleep(1)   
"
How to call upon a function within a function?,"def menu(choice):
    def add():
        print 6+6
    def sub():
        print 6-3

    if choice == 'add':
        add() # call add here
    elif choice == 'sub':
        sub() # call sub here
"
Erasing list of phrases from list of texts in python,"def find_words_and_remove(words, strings):
    return ["" "".join(word for word in string.split() if word not in words) for string in strings]
"
"Python: Loop Dictionary, Two keys at a time","from collections import OrderedDict
from itertools import tee

my_dict = OrderedDict([
    ('LAP0-1', 146.48),
    ('LAP1-1', 44.11),
    ('LAP2-1', 25.54),
    ('LAP3-1', 75.29),
    ('LAP5-2', 85.76),
    ('LAP6-2', 46.87)
])

# pairwise() from Itertools Recipes
def pairwise(iterable):
    ""s -> (s0,s1), (s1,s2), (s2, s3), ...""
    a, b = tee(iterable)
    next(b, None)
    return zip(a, b)

for (key1, value1), (key2, value2) in pairwise(my_dict.items()):
    print(""{} | {} ; {} | {}"".format(key1, value1, key2, value2))
"
Create larger list from an existing list using a list comprehension or map(),">>> atom_indices = [0, 4, 5, 8]
>>> coords = [3*a+k for a in atom_indices for k in range(3)]
>>> coords
[0, 1, 2, 12, 13, 14, 15, 16, 17, 24, 25, 26]
"
Generating nested lists from XML doc,"import xml.etree.ElementTree as ET
from pprint import pprint

xml = ET.parse('x.xml')
root = xml.getroot()
news_sources = {}
for sourceList in root:
    sourceListName = sourceList.attrib['source']
    news_sources[sourceListName] = []
    for feed in sourceList:
       feedName = feed.text
       news_sources[sourceListName].append(feedName)

pprint(news_sources)
"
"How to change the value of an int, and recover and use the new value?","directions = {
    ""north east"": (+1, -1),
    ""north west"": (-1, -1),
    ""south east"": (+1, +1),
    ""south west"": (-1, +1),
}

def new_position(old, direction):
    x, y = old
    dx, dy = directions[direction]
    return x + dx, y + dy

position = 100, 100
direction = ""north east""

while True:
    print(position)
    position = new_position(position, direction)
"
Python: conditionally delete elements from list,">>> d = defaultdict(list)
>>> for k,v in x:
...   d[v].append(k)
... 
>>> y = [(max(k),v) for v,k in d.items()]
>>> y
[(1, 2), (7, 4)]
"
best way to make nested lists?,">>> li=[[None]*3]*3
>>> li
[[None, None, None], [None, None, None], [None, None, None]]
"
How to delete elements of a circular list until there is only one element left using python?,"L = range(100)
st1=len(L)%2
st2=0
while len(L)>1:
    del L[st2::2]
    st2=(st1+st2)%2
    st1=len(L)%2
    print L
"
read csv into record array in numpy,"np.genfromtxt('myfile.csv', delimiter=',')"
Remove repeated sequence of integers from list in Python,"listA = [0,1,2,1,2,1,2,3,4,5,2,1,3,4,5,2,1,6,0]
listB = [0,1,2,1,2,1,0]

def get_repeated_seq(seq, start, length):
    ref = seq[start:start+length]
    #print(""Ref"", ref)
    for pos in range(start+length, len(seq)-length):
        compare = seq[pos:pos+length]
        #print(""Pos"", pos, compare)
        if compare == ref:
            #print(""Found"", ref, ""at"", pos)
            return pos, length
    return False

def get_repeated_seqs(seq):
    reps = []
    for size in reversed(range(2, len(seq)/2)):
        for pos in range(0, len(seq)-size):
            #print(""Check rep starting at pos %s for size %s"" % (pos, size))
            rep = get_repeated_seq(seq, pos, size)
            if rep:
                reps.append(rep)
    return reps

def remove_repeated_seqs(seq, reps):
    # need to backup seq ?
    for rep in reps:
        overlaps = False
        for pos in range(rep[0], rep[0]+rep[1]):
            if seq[pos] == ""*"":
                overlaps = True
        if not overlaps:
            for pos in range(rep[0], rep[0]+rep[1]):
                seq[pos] = ""*""
    out = []
    for item in seq:
        if item != ""*"":
            out.append(item)
    return out


reps = get_repeated_seqs(listB)
rem = remove_repeated_seqs(listB, reps)
#print(rem)
print(rem==[0,1,2,1,0])

reps = get_repeated_seqs(listA)
rem = remove_repeated_seqs(listA, reps)
#print(rem)
print(rem==[0,1,2,3,4,5,6,0])
"
Perl - regex How to write this in python?,"#!/usr/bin/python2
# -*- coding: utf8 -*-

# $ cat /tmp/dmesg
# AZERTY:qwerty01
# AZERTY:qwerty02
# zzzzzzzzzzzzzzz
# AZERTY:qwerty03

import re

f = open(""/tmp/dmesg"", ""r"")
for textline in f.readlines():
    if re.search('^([A-Z0-9]+:)(.*)', textline):
        print ""match ""+textline.rstrip('\n')

f.close()
"
How do I randomize a list of strings with random.seed?,"from random import random

def shuffle(items):  # returns new list
    return [t[1] for t in
            sorted((random(), i) for i in items)]
"
Apply round off setting to whole notebook,"x = np.random.randn(10)

# this writes the array out to 6 decimal places
np.savetxt('six_dp.txt', x, fmt='.6f')

# this writes the same array to 3 decimal places
np.savetxt('three_dp.txt', x, fmt='.3f')
"
List all combinations,"In [17]: i=itertools.combinations_with_replacement((1,2,3), 4)

In [18]: next(i)
Out[18]: (1, 1, 1, 1)

In [19]: next(i)
Out[19]: (1, 1, 1, 2)

In [20]: next(i)
Out[20]: (1, 1, 1, 3)

In [21]: next(i)
Out[21]: (1, 1, 2, 2)

In [22]: 
"
Is there a max image size (pixel width and height) within wx where png images lose there transparency?,"import wx

class myFrame(wx.Frame):
    def __init__(self, testImage):
        wx.Frame.__init__(self, None, size=testImage.Size)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.testImage = testImage
        self.Show()

    def OnPaint(self, event):
        dc = wx.PaintDC(self)
        background = wx.Colour(255, 0, 0)
        dc.SetBackground(wx.Brush(background))
        dc.Clear()
        #dc.DrawBitmap(self.testImage, 0,  0)  # black background
        dc.DrawBitmap(self.testImage, 0,  0, True)  # transparency on, now red


def main():
    app = wx.App(None)
    testImage = wx.Image(r""path_to_image.png"", wx.BITMAP_TYPE_PNG).ConvertToBitmap()
    Frame = myFrame(testImage)
    app.MainLoop()


if __name__ == '__main__':
    main()
"
Simple python/Regex problem: Removing all new lines from a file,"clean = open('thefile.txt').read().replace('\n', '')
"
How to split Strings of a text file into char and number in python,"import re
>>> match = re.match(r""([a-z]+)([0-9]+)"", 'N1109', re.I)
>>> if match:
        print match.groups()

Output:

('N', '1109')
"
Python: Recursion to count up an array of size n,"import itertools
for comb in itertools.product(range(4), repeat=3):
    print comb
"
How do I get pexpect to match everything BUT a given line?,"ret = pex.expect([r'^((?!' + re.escape(line) + ').)*$', pexpect.EOF, pexpect.TIMEOUT], timeout)
"
"In Python, how can I use a static method as a default parameter for the strategy design pattern?","class C:    
    @staticmethod
    def default_concrete_strategy():
        print(""default"")

    @staticmethod
    def other_concrete_strategy():
        print(""other"")

    def __init__(self, strategy=None):
        if strategy is None:
            strategy = self.default_concrete_strategy
        self.strategy = strategy
"
conditional replace based off prior value in same column of pandas dataframe python,"df = pd.DataFrame([0, -1, -1, -1, 0 , 0, 0, 1, 0])
df.columns = ['A']
df['B'] = df['A']

# loop here
for i in range(1,len(df)):
     if df.A[i] == 0 and df.B[i-1] == -1:
             df.B[i] = -1
     else:
             df.B[i] = df.A[i]
"
using if...then...else in to check if an object already exists,"new_crit = input(""Enter a name for your new critter: "")
for i in noc:
    if i.name == new_crit:  # name is a parameter used in the class Critter
        print(""That critter already exists"")
        return

# we can only get here if no such name was found, otherwise the function
# would have exited at the `return`
Critter.noc.append(Critter(new_crit))
print(""New critter has been created. the critter is named: "", new_crit)
"
Is there a way to export data from a Counter object to a CSV file?,"writer.writerow({'character':character,'count':count})
#or
writer.writerow(dict(character=character,count=count))
"
key in nested dictionary if it contains NaN value?,"print(max(my_dictionary, key=lambda v: my_dictionary[v]['c'] 
     if isinstance(my_dictionary[v]['c'],int) else float(""-inf"")))
"
python - How do use basehttpserver to save files sent using POST,"def do_POST(self):
    f = StringIO()
    fm = cgi.FieldStorage(fp=self.rfile, headers=self.headers, environ={'REQUEST_METHOD':'POST'})
    if ""file"" in fm:
        r, resp, info = self.get_file_data(fm)
        print r, info, ""by: "", self.client_address
        if r:
            f.write(""File upload successful: %s"" % info)
            f.seek(0)
            if resp == 200: 
                # Do stuff here
            else:
                # Error handle here
        else:
            f.write(""File upload failed: %s"" % info)
            f.seek(0)
            if resp == 200: 
                # Do stuff here
            else:
                # Error handle here
        if f:
            copyfileobj(f, self.wfile)
            f.close()
    else:
        # Error handle here

def get_file_data(self, form):
    fn = form.getvalue('sfname')
    fpath, fname = ospath.split(fn)
    if not ospath.isabs(fpath):
        return (False, 400, ""Path of filename on server is not absolute"")
    if not ospath.isdir(fpath):
        return (False, 400, ""Cannot find directory on server to place file"")
    try:
        out = open(fn, 'wb')
    except IOError:
        return (False, 400, ""Can't write file at destination. Please check permissions."")
    out.write(form['file'].file.read())
    return (True, 200, ""%s ownership changed to user %s"" % (fn, u))
"
How can I recreate a pointer to a global array in python,"global_array1 = []
global_array2 = []

def myfunc(aResult, anArray):
  global global_array1
  global global_array2

  for a in anArray:
      if a:
          result = global_array1
      else:
          result = global_array2

      # do something hhere
      result.append(aResult)

anArray = [True, True, False]

myfunc(1, anArray)
myfunc(2, anArray)
myfunc(3, anArray)

print 'global_array1:', global_array1
print 'global_array2:', global_array2
"
Generating HTML Tables from Tuple Python,"from itertools import groupby
from operator import itemgetter

mytuple = [('Andrew','10','20'),('Jim',""20"",'12'),(""Sarah"",""30"",'43'),(""Jim"",""23"",'15'),(""Andrew"",""54"",'56')]
mytuple = sorted(mytuple)
FULL_HTML = []

for name, rows in groupby(mytuple, itemgetter(0)):
     table = []
     for name, value1, value2 in rows:
        table.append(
            ""<tr><td>{}</td><td>{}</td><td>{}</td><td></tr>"".format(
                name, value1, value2))

     table = ""<table>\n{}\n</table>"".format('\n'.join(table))
     FULL_HTML.append(table)

FULL_HTML = ""<html>\n{}\n</html>"".format('\n'.join(FULL_HTML))

print FULL_HTML
"
Python for loop overwriting,"USAdetail =['134.250.7.8', '1.39.35.138', '100.43.90.10','101.43.90.10', '101.43.90.11']
firstNode = [134, 135]

st = set(firstNode)
if any(int(x.split(""."",1)[0]) in  st for x in USAdetail):
      print(""Successful"")
"
nltk lemmatizer doesn't know what to do with the word Americans,"word = 'AMERICANS'
lemmatized = wnl().lemmatize(word.lower())
if word.istitle():
    word = lemmatized.capitalize()
elif word.upper()==word:
    word = lemmatized.upper()
else:
    word = lemmatized
# word = 'AMERICAN'
"
Decorator changing function status from method to function,"import inspect

def decorate(f):
    def detect(*args, **kwargs):
        try:
            members = inspect.getmembers(args[0])
            members = (x[1].im_func for x in members if 'im_func' in dir(x[1]))
            ismethod = detect in members
        except:
            ismethod = False
        print ismethod

        return f(*args, **kwargs)
    return detect

@decorate
def foo():
    pass

class bar(object):
    @decorate
    def baz(self):
        pass

foo() # prints False
bar().baz() # prints True
"
SQLAlchemy - Get all Rows which have matching set of Columns,"Session.query(...).filter(..., schema.Term.id < term_alias.id)
"
Numpy : find number of active tickets at time t given a list of start and duration,"def activity(t, tickets):
    tickets.sort(key=lambda x:x[0]) #sort by start time
    gamma = 0
    for point, duration in tickets:
        if point < t and t < point + duration:
              gamma += 1
        elif point > t:
              break ; #we can quit looking
    return gamma
"
python log parse create dict of repetitive url and size with count,"with open('log.txt') as f:
    dico = dict()
    total_value = 0
    for line in f:
        #Feeding the dictionary
        split_array = line.split()
        possible_key = split_array[0]
        value = int(split_array[1])

        #If url has already been processed, update the value
        #Else, initialize the entry in the dictionary => default=0
        dico[possible_key] = dico.get(possible_key, default=0) + value

        #Updating the global sum
        total_value = total_value + value
"
how to generate new points as offset with gaussian distribution for some points in spherical coordinates in python,"import numpy as np

num_points = 500
U = np.random.random(num_points)
V = np.random.random(num_points)

import math as m

def spherical_to_cartesian(vec):                                                  
    '''
    Convert spherical polar coordinates to cartesian coordinates:                       

    See the definition of spherical_cartesian_to_polar.                                 

    @param vec: A vector of the 3 polar coordinates (r, u, v)                           
    @return: (x, y, z)                                                                  
    ''' 
    (r, u, v) = vec                                                                     

    x = r * m.sin(u) * m.cos(v)                                                         
    y = r * m.sin(u) * m.sin(v)                                                         
    z = r * m.cos(u)                                                                    

    return [x, y, z]  

radius = 1.
points = np.array([spherical_to_cartesian([radius, 2 * np.pi * u, np.arccos(2*v - 1)]) for u,v in zip(U,V)])

from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax = Axes3D(fig)

ax.plot(points[:,0], points[:,1], points[:,2], 'o')
"
Find maximum length of all n-word-length substrings shared by two strings,"import re
def to_words(text):
    'Break text into a list of words without punctuation'
    return re.findall(r""[a-zA-Z']+"", text)

def match(a, b):
    # Make b the longer list.
    if len(a) > len(b):
        a, b = b, a
    # Map each word of b to a list of indices it occupies.
    b2j = {}
    for j, word in enumerate(b):
        b2j.setdefault(word, []).append(j)
    j2len = {}
    nothing = []
    unique = set() # set of all results
    def local_max_at_j(j):
        # maximum match ends with b[j], with length j2len[j]
        length = j2len[j]
        unique.add("" "".join(b[j-length+1: j+1]))
    # during an iteration of the loop, j2len[j] = length of longest
    # match ending with b[j] and the previous word in a
    for word in a:
        # look at all instances of word in b
        j2lenget = j2len.get
        newj2len = {}
        for j in b2j.get(word, nothing):
            newj2len[j] = j2lenget(j-1, 0) + 1
        # which indices have not been extended?  those are
        # (local) maximums
        for j in j2len:
            if j+1 not in newj2len:
                local_max_at_j(j)
        j2len = newj2len
    # and we may also have local maximums ending at the last word
    for j in j2len:
        local_max_at_j(j)
    return unique
"
Ruby NArray.to_na() and Python numpy.array(),"import numpy as np

line = ""#!/usr/bin/ruby\n#\n#  Gen""
array = np.fromstring(line, dtype=float)
print array
"
How can I add columns in a data frame?,"In [87]:
df['pos_x'], df['pos_y']= df['point'].str[6:-1].str.split(expand=True)
df

Out[87]:
   cab_id                   datetime  \
0     156 2014-01-31 23:00:00.739166   

                                      point  pos_x  pos_y  
0  POINT(41.8836718276551 12.4877775603346)      0      1  
"
Why I can't read anything with File.open in python when I open the file to write first?,"with open('day_temps.txt', 'w') as handle:
    handle.write(""10.3,10.1,9.9,9.9,9.8,9.6,9.0,10.1,10.2,11.1"")

def get_stats(file_name):
    with open(file_name, 'r') as handle:
        numbers = map(float, handle.read().split(','))

    return min(numbers), max(numbers), sum(numbers) / len(numbers)

if __name__ == '__main__':
    stats = get_stats('day_temps.txt')
    print ""({0:.5}, {1:.5}, {2:.5})"".format(*stats)
"
numpy get values in array of arrays of arrays for array of indices,"list_arr[np.arange(list_arr.shape[0]),indices_array,:]
"
Finding consecutive values within a list,"from itertools import islice

def window(seq, n=2):
    ""Returns a sliding window (of width n) over data from the iterable""
    ""   s -> (s0,s1,...s[n-1]), (s1,s2,...,sn), ...                   ""
    it = iter(seq)
    result = tuple(islice(it, n))
    if len(result) == n:
        yield result
    for elem in it:
        result = result[1:] + (elem,)
        yield result

def does_segment_exist(iterable, sublist):
    return tuple(sublist) in window(iterable, len(sublist))

print(does_segment_exist([1,3,4,5,2], [3,4,5]))
"
Label does not update on button click,"showinfo(title=""Blah"", message=""Look ma - No hands!"")
"
Does Python copy references to objects when slicing a list?,"second_items = iter(l)
next(second_items, None) # Avoid exception on empty input
for thing1, thing2 in itertools.izip(l, second_items):
    whatever()
"
How to run script in multithreading or multiprocessing,"from contextlib import closing # http://stackoverflow.com/a/25968716/968442
from multiprocessing.pool import Pool

with closing(Pool(len(url))) as pool:
    pool.map(btl_test, url)
"
Map arrays to integers in python,"def map_lists_to_ints(list_of_lists):  # Name this better
    tuples = (tuple(l) for l in list_of_lists)

    seen = {}
    next_int = 0
    for tup in tuples:
        if tup not in seen:
            seen[tup] = next_int
            next_int += 1

        yield seen[tup]

list_of_lists = [[0, 1, 1], [1, 0, 0], [1, 1, 0], [0, 1, 1], [1, 0, 0]]

result = list(map_lists_to_ints(list_of_lists))

print(result)

listified_result = [[x] for x in result]

print(listified_result)
"
How can I keep track of specific values rolled in a dice-rolling script?,"from random import randint

def roll_dice(count, sides=6):
    initial_mins = None
    result = 0
    while count:
        dice = [randint(1, sides) for die in range(count)]
        if initial_mins == None: initial_mins = dice.count(1)
        result += sum(result for result in dice if result != sides)
        count = 2 * dice.count(sides) # number to roll the next time through.
    return (initial_mins, result)
"
Filtering defaultdict on the base of value,"for k,v in data.items():
    filtered_vals = list(filter(lambda i: i['check'] == '1', v)
    if len(filtered_vals):
        data[k] = filtered_vals
    else:
        del data[k]
"
Using OpenCV detectMultiScale to find my face,"import cv2
import cv2.cv as cv
import getopt, sys

def detect(img, cascade):
    for scale in [float(i)/10 for i in range(11, 15)]:
        for neighbors in range(2,5):
            rects = cascade.detectMultiScale(img, scaleFactor=scale, minNeighbors=neighbors,
                                             minSize=(20, 20), flags=cv2.cv.CV_HAAR_SCALE_IMAGE)

            print 'scale: %s, neighbors: %s, len rects: %d' % (scale, neighbors, len(rects))


def find_face_from_img(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    gray = cv2.equalizeHist(gray)
    rects = detect(gray, cascade)


if __name__ == '__main__':

    args, video_src = getopt.getopt(sys.argv[1:], '', ['cascade=', 'nested-cascade='])
    try: video_src = video_src[0]
    except: video_src = 0
    args = dict(args)


    cascade_fn = args.get('--cascade', ""cascades/haarcascade_frontalface_alt.xml"")
    cascade = cv2.CascadeClassifier(cascade_fn)

    c=cv2.VideoCapture(0)
    while(1):
        ret, frame = c.read()
        rects = find_face_from_img(frame)
        if 0xFF & cv2.waitKey(5) == 27:
                break
"
find string with format '[number]' using regex,"newstring = re.sub(r'\[\d+\]', replacement, yourstring)
"
Rename line by line a file,"def renameLineByLine():
    new_lines = []
    path = '/opt/AutoPrivilege/client/photos/'
    with open('/opt/data/photos.txt', 'r') as fin, \ 
        open('/opt/data/photos_new.txt', 'w') as fout:
        for line in fin:
            if len(line) != 1:
                newname, file, checksum, no1, no2 = line.split()
                fout.write("" "".join([
                    ""{}4615_{}_hd.jpg"".format(no1, no2),
                    path + file, checksum, '\n'])
                )
            else:
                fout.write('\n')
"
Beautifulsoup find element by text using `find_all` no matter if there are elements in it,"bs = BeautifulSoup(""<html><a>sometext</a></html>"")    
reg = re.compile(r'some')
elements = [e for e in bs.find_all('a') if reg.match(e.text)]
"
Find shortest matches between two strings,"re.findall('(start((?!start).)*?end)', text, re.S)
"
Documentation of functions defined with functools partialmethod,"class Test(object):
    def method1(self, arg):
        ""docstring1""
        print(arg)

    method2 = my_partial_method(method1, ""foo"")
    method2.__name__ = ""method2""
    method2.__doc__ = ""docstring2""

    method3 = my_partial_method(method1, arg=""bar"")
    method3.__name__ = ""method3""
    method3.__doc__ = ""docstring3""
"
How to Compare Multiple lists of tuples in python?,">>> def group(seq):
    for k, v in groupby(sorted(chain(*seq), key = itemgetter(0)), itemgetter(0)):
        v = list(v)
        if len(v) > 1:
            yield v


>>> list(group(some_list))
[[(1, 2), (1, 5), (1, 8)], [(3, 6), (3, 5), (3, 9)]]
"
Python Pandas: String Contains and Doesn't Contain,"df[(df.str.contains(""b"") == True) & (df.str.contains(""a"") == False)]
"
Check if none of list elements contain searched substring,"not any(search in s for s in myList)
"
List index out of range even though I'm asking for [0]?,"import random

def guess(start,limit):
    return random.choice(range(start, limit + 1))
"
Defining the name of a ManyToOne relationship in Django,"class SpecificUserProfile(UserProfile):
    referrer = models.ForeignKey('self', related_name='referred')
"
Numpy Slicing slow?,"A[ind] += B[:N]
"
Any way to extract the sign of a number in Python?,"def sign(num):
    return -1 if num < 0 else 1
"
Compute pairwise distance in a batch without replicating tensor in Tensorflow?,"A = tf.constant([[1, 1], [2, 2], [3, 3]])
r = tf.reduce_sum(A*A, 1)

# turn r into column vector
r = tf.reshape(r, [-1, 1])
D = r - 2*tf.matmul(A, tf.transpose(A)) + tf.transpose(r)
sess = tf.Session()
sess.run(D)
"
Keep dataframe columns depending on row value,"pm.loc['active'].replace('True',True, inplace=True)
pm.loc['active'].replace('False',False,inplace=True)
"
Parsing an equation with custom functions in python,"from __future__ import print_function
import ast

def transform(eq,functions):
    class EqVisitor(ast.NodeVisitor):
        def visit_BinOp(self,node):
            #generate(""=>BinOp"")
            generate(""("")
            self.visit(node.left)
            self.visit(node.op)
            #generate(""ici"",str(node.op),node._fields,node._attributes)
            #generate(dir(node.op))
            self.visit(node.right)
            generate("")"")
            #ast.NodeVisitor.generic_visit(self,node)
        def visit_USub(self,node):
            generate(""-"")
        def visit_UAdd(self,node):
            generate(""+"")

        def visit_Sub(self,node):
            generate(""-"")
        def visit_Add(self,node):
            generate(""+"")
        def visit_Pow(self,node):
            generate(""**"")
        def visit_Mult(self,node):
            generate(""*"")
        def visit_Div(self,node):
            generate(""/"")
        def visit_Name(self,node):
            generate(node.id)
        def visit_Call(self,node):
            debug(""function"",node.func.id)
            if node.func.id in functions:
                debug(""defined function"")
                func_visit(functions[node.func.id],node.args)
                return
            debug(""not defined function"",node.func.id)    
            #generate(node._fields)
            #generate(""args"")
            generate(node.func.id)
            generate(""("")
            sep = """"
            for arg in node.args:
                generate (sep)
                self.visit(arg)
                sep="",""
            generate("")"")
        def visit_Num(self,node):
            generate(node.n)
        def generic_visit(self, node):


            debug (""\n"",type(node).__name__)
            debug (node._fields)
            ast.NodeVisitor.generic_visit(self, node)  

    def func_visit(definition,concrete_args):
        class FuncVisitor(EqVisitor):
            def visit_arguments(self,node):
                #generate(""visit arguments"")
                #generate(node._fields)
                self.arguments={}
                for concrete_arg,formal_arg in zip(concrete_args,node.args):
                    #generate(formal_arg._fields)
                    self.arguments[formal_arg.id]=concrete_arg
                debug(self.arguments)
            def visit_Name(self,node):
                debug(""visit Name"",node.id)
                if node.id in self.arguments:
                    eqV.visit(self.arguments[node.id])
                else:
                    generate(node.id)


        funcV=FuncVisitor()
        funcV.visit(ast.parse(definition))

    eqV=EqVisitor()
    result = []
    def generate(s):
        #following line maybe usefull for debug
        debug(str(s))
        result.append(str(s))
    eqV.visit(ast.parse(eq,mode=""eval""))
    return """".join(result)
def debug(*args,**kwargs):
    #print(*args,**kwargs)
    pass
functions= {
    ""f1"":""def f1(x,y):return x+y**2"",
    ""f2"":""def f2(x,y):return sin(x+y)"",
}
eq=""-(a+b)+f1(f2(+x,y),z)*4/365.12-h""
print(transform(eq,functions))
"
Sum of elements in a list of lists with varying lengths in Python,">>> from itertools import product
>>> a = [[4], [8], [15]]
>>> [sum(p) for p in product(*a)]
[27]
>>> a = [[3], [4, 6], [10]]
>>> [sum(p) for p in product(*a)]
[17, 19]
"
Select option from dynamic dropdown list using selenium,"select_make = driver.find_element_by_id('vehical-make')
for option in select_make.find_elements_by_tag_name('option'):
    if option.text == 'BMW':
        option.click() # select() in earlier versions of webdriver
        break
"
Python: change variable for specific number of iterations in a loop,"boost_turns = 0
while True: 
    attack = raw_input('What attack shall you choose?')
    if attack == 'boost accuracy':
        boost_turns = 3
    if boost_turns:
        accuracy = 100
        boost_turns -= 1
    else:
        accuracy = 0
    # attack 
"
Passing an Python Class Attribute Given a String,"def set_value(self, member, value):
    setattr(self, member, value)
"
trouble appending lists to another list,"def twentyone(seq, groups = [], final = []): #default final list
    goal = 21
    s = sum(groups)

    if s == goal:
        final.append(groups)

    if s >= goal:
        return

    for i in range(len(seq)):
        n = seq[i]       
        remaining = seq[i+1:]
        twentyone(remaining, groups + [n])

    return final


seq = [1, 5, 6, 7, 10, 2, 11]
print twentyone(seq)
"
get datatype length in python by parsing a string,"import re

def type_and_size(s):
    return re.split('[][]', s+'[1]', 2)[:2]

type_and_size('char')
['char', '1']

type_and_size('char[5]')
['char', '5']
"
Get data from the meta tags using BeautifulSoup,soup.findAll(attrs={'name': 'description'})
Converting hex to int in python,ord('\xff')
hexadecimal string to byte array in python,">>> bytearray(hex_data)
bytearray(b'\xde\xad\xbe\xef')
"
Capturing emoticons using regular expression in python,"re.match('[:;][)(](?![)(])', str)"
how to export a table dataframe in pyspark to csv?,df.toPandas().to_csv('mycsv.csv')
Why doesn't this code save my figures with titles?,"Possible translation of your function
def boxplot_data(self,parameters_file,figure_title):
    data = pandas.read_csv(parameters_file)
    header = data.keys()
    number_of_full_subplots = len(header)/16
    remainder = len(header)-(16*number_of_full_subplots)
    for i in range(number_of_full_subplots+1)
        fig =plt.figure(i)
        fig.suptitle(figure_title+' (n='+str(len(data[header[0]]))+') '+'Page '+str(i)+' of '+str(number_of_full_subplots),fontsize='20')
        for j in range(16):
            plt.subplot(4,4,j+1)
            if 16*i + j < len(header):
                plt.boxplot(data[header[16*i+j]])
                plt.xlabel('')    
                #You might want the showMaximized() call here - does nothing
                #on my machine but YMMV
            else:
                print '{} full figures were created and 1 partially filled \
                figure containing {} subplots'.format(number_of_full_subplots,remainder)
                break                
        plt.savefig(str(i)+'.png',bbox_inches='tight',orientation='landscape')
        plt.close(fig)                    
"
doing calculations in pandas dataframe based on trailing row,"In [11]: frame['b'].where(frame['a'], 2 * frame['b'])
Out[11]:
0    25
1    44
2    55
3    70
Name: b, dtype: int64

In [12]: frame['c'] = frame['b'].where(frame['a'], 2 * frame['b'])
"
How should I serialize game objects containing pygame surfaces?,"class Actor(object):

  def __init__(self, **kwargs):
    self._image_getter = kwargs['image_getter']
    self.pos = kwargs['pos']
    ...

  def draw(self, surface):
    surface.blit(self._image_getter(), self.pos)
"
filter lists of lists by taking out items less than a certain length - more pythonic way?,"[x for x in ilist if len(x) > 0]
"
Display a decimal in scientific notation,"'%.2E' % Decimal('40800000000.00000000000000')

# returns '4.08E+10'
"
argparse optional parameter within positional,"import argparse as ap                                                           

p = ap.ArgumentParser()                                                         
p.add_argument('-v', action='store_true')                                       
p.add_argument('-l', action='store_true')                                       
p.add_argument('files', nargs='*', action='append')                             

args, unknown = p.parse_known_args()
while unknown:
    args, unknown = p.parse_known_args(unknown, args) 

print(args)
"
Accessing a value from an np.array from a while loop,"import math
#import numpy as np 
from pylab import plot, show
def model(Dt=1, time_step = 50, w1 = 1, steepness_SS_a=1, 
          speed_SS_a=1, threshold_SS_a=1, WS_a=1, SS_a=0, 
          t=0, t_final=30):
    result = [SS_a]
    timesteps =[]
    for ti in range(t,t_final+1,Dt):
        result.append( ... ) #<- put here your complicate formula 
        timesteps.append(ti)
    print( timesteps )  
    plot(result)
    show()
    #return result  

model() 
"
find a list of keywords from a text string and find inexact matches,">>> tosearch = ""This is a text string where I typed hlelo but I meant to type hello.""
>>> import string
>>> exclude = set(string.punctuation)
>>> tosearch = ''.join(ch for ch in tosearch if ch not in exclude)
>>> tosearch
'This is a text string where I typed hlelo but I meant to type hello'
>>> words = set(tosearch.split("" ""))
"
multiprocessing change current folder for every process,"import multiprocessing, os, shutil, tempfile
processes=16

def example_function(i):
    with tempfile.TemporaryDirectory() as path:
        os.chdir(path)
        print(os.getcwd())
        return i*i

if __name__ == '__main__':
    #starting pool
    pool=multiprocessing.Pool(processes)

    result=pool.map(example_function,range(1000))
"
Splitting a list by matching a regex to an element,"new_list = reduce(lambda a, b: a[:-1] + [ a[-1] + [ b ] ] if not element_regex.match(b) or not a[0] else a + [ [ b ] ], test_list, [ [] ])
"
How should I declare default values for instance variables in Python?,">>> class Test():
...     def __init__(self, attr=[]):
...         self.attr = attr
...     
>>> a = Test()
>>> b = Test()
>>> a.attr.append(1)
>>> a.attr
[1]
>>> b.attr
[1]
>>> 
"
How to remove or strip off white spaces without using strip() function?,"def Leading_White_Space(input_str):
  for i, c in enumerate(input_str):
    if not c.isspace():
      return input_str[i:]
"
Pythonic way to delete an item completely from a dictionary,"{k: [i for i in v if i != 'E'] for k, v in mydict.iteritems() if k != 'E'}
"
python accessing dictionary with wildcards,"    def get_all_matching(self, events):
        return (match for event in events for match in self.get_matching(event))

>>> for o in rd.get_all_matching(['a1b', 'b2c']):
    print o


item1
item2
"
Python Selenium continually check for phrase in page source,"import time
# some code
time.sleep(30) # delays for 30 seconds
"
Numpy Array Slicing,">>> indices = [offset + i for offset,length in offset_length for i in xrange(length)]
>>> a[indices]
array([ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 50, 51, 52, 60, 61, 62, 63,
       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 95])
"
Best way to strip punctuation from a string in Python,"s.translate(None, string.punctuation)"
Parsing through a dictionary of tuples,">>> from itertools import chain
>>> d = {'seq2': [(1,6)], 'seq1': [(1, 12), (16, 9), (32,9)], 'seq3': [], 'seq4': []}
>>> max(chain.from_iterable(d.values()),key=lambda x: x[1])
(1, 12)
"
Compute 3 months rolling median from pandas DataFrame with date index,"df2 = pd.rolling_apply( df.set_index('created_on')['value'], window=90, 
                        func=np.nanmedian, freq='d', min_periods=1 )

df2[ (df2.index.day == 1)[1:] ]   # [1:] is a kludge to get end of month
                                  # rather than beginning, probably a 
                                  # better way to do that...

created_on
2015-01-31    2.5
2015-02-28    2.0
2015-03-31    2.0
2015-04-30    1.0
2015-05-31    2.0
"
Matching substring in another string,"for dir in list2:
    for path in list1:
        if path.find(dir) != -1:
            print(path)
"
Getting past slow list creation in python,"def your_loop(x):
    return list(map(lambda y: y**2, x))

%timeit your_loop(x)
100 loops, best of 3: 4.5 ms per loop
"
How to access argparse parse_args from another function,"def do_something(args):
    print 'from do_something ', args

def my_parse_args():
    parser = argparse.ArgumentParser(description='A demo script')
    parser.add_argument('arg1', help='an arg')
    return vars(parser.parse_args())

if __name__==""__main__"":
    args = my_parse_args()
    do_something(args)
"
Import array files with numpy,"# Load first array.
bigarray = numpy.load(filenames[0]);
# Add a new axis to make it 3D.
bigarray = bigarray[numpy.newaxis,...];
# Load rest of arrays.
for i in range(1,len(filenames)):
    bigarray = numpy.append(bigarray, numpy.load(filenames[i])[numpy.newaxis,...], axis=0);
"
Create the cartesian product (cross join) of two csv files in python,"import csv
from itertools import product

def main():
    with open('file1.csv', 'rb') as f1, open('file2.csv', 'rb') as f2:
        reader1 = csv.reader(f1, dialect=csv.excel_tab)
        reader2 = csv.reader(f2, dialect=csv.excel_tab)

        # Step 1: Read and write the headers separately.
        header1, header2 = next(reader1), next(reader2)
        with open('output.csv', 'wb') as out:
            writer = csv.writer(out, dialect=csv.excel_tab)
            writer.writerow(header1 + header2)
            # Step 2: Write the product of the rest of the rows.
            writer.writerows(
                row1 + row2 for row1, row2 in product(reader1, reader2))

main()
"
Create a list of dictionaries which contains nested dictionaries,"datalist = [{""vehicle_class"": ""c1"", ""vehicle_class_count1"": 16, ""vehicle_usage_count1"": 29, ""vehicle_usage"": ""u1"", ""vehicle_type_count1"": 16, ""vehicle_type"": ""t1""}, {""vehicle_class"": ""c2"", ""vehicle_class_count1"": 11, ""vehicle_usage_count1"": 29, ""vehicle_usage"": ""u1"", ""vehicle_type_count1"": 11, ""vehicle_type"": ""t1""},{""vehicle_class"": ""c2"", ""vehicle_class_count1"": 1, ""vehicle_usage_count1"": 29, ""vehicle_usage"": ""u2"", ""vehicle_type_count1"": 1, ""vehicle_type"": ""t3""},{""vehicle_class"": ""c3"", ""vehicle_class_count1"": 1, ""vehicle_usage_count1"": 29, ""vehicle_usage"": ""u2"", ""vehicle_type_count1"": 1, ""vehicle_type"": ""t2""}]

levels_index = {1: 'vehicle_usage', 2: 'vehicle_type', 3: 'vehicle_class'}


result = []


def build_node(obj, key):
    '''This build the node for your result list'''
    return {
        'name': obj[key],
        'imageURL': '',
        'type': obj[key],
        'size': obj['%s_count1' % key],
        'children': []
    }


def build_level(input_list, keyindex):
    ''' This build one level at a time but call itself recursively'''
    key = levels_index[keyindex]
    levels_memory = {'vehicle_usage': [], 'vehicle_type': [], 'vehicle_class': []}
    output = []
    for obj in input_list:
        if obj[key] not in levels_memory[key]:
            levels_memory[key].append(obj[key])
            output.append(build_node(obj, key))
            if keyindex < len(levels_index):
                output[-1]['children'] = build_level(
                    [_ for _ in input_list if _[key] == output[-1]['name']],
                    keyindex + 1)
    return output


print build_level(datalist, 1)
"
Conditionally combine columns in pandas data frame,"df[""ave""] = df[[""x1"", ""x2""]].mean(axis=1)
df[""ave""][df[""x1""] == 0] = 0
"
Python: indexing pandas series by datetime,"In [13]: res = s.groupby(s.index).apply(f)

In [14]: res
Out[14]: 
1990-04-01  1990-04-01    25.870
            1990-04-02    26.205
            1990-04-03    12.283
            1990-04-04    19.630
...
"
Selenium about how to get the new_driver after click the more_button?,"from selenium.common.exceptions import StaleElementReferenceException
from selenium.webdriver.support import expected_conditions as EC

class wait_for_more_than_n_elements(object):
    def __init__(self, locator, count):
        self.locator = locator
        self.count = count

    def __call__(self, driver):
        try:
            count = len(EC._find_elements(driver, self.locator))
            return count > self.count
        except StaleElementReferenceException:
            return False
"
Python derived class intricacies,"class Xyzzy(object):

    def __init__(self, which_factory):
        print('calling Xyzzy.__init__')
        self.which_factory = which_factory

    @classmethod
    def factory_foo(cls):
        print('calling factory_foo with', cls)
        return cls('factory_foo')

    @classmethod
    def factory_bar(cls):
        print('calling factory_bar with', cls)
        return cls('factory_bar')


class Yappy(Xyzzy):

    def __init__(self, which_factory):
        print('calling Yappy.__init__')
        super(Yappy, self).__init__(which_factory)
        print(which_factory)
"
How to look for consecutive repeats in regex?,"mystring = 'abccd'
m = re.match(r'.*(\w)\1', mystring)  
print m.group(1)  # 'c'
"
Python sort strings by count of appearances of the strings in the list,"In [28]: [elem for elem, _ in Counter(m2).most_common()]
Out[28]: ['b', 'a', 'c']
"
Proper handling of spark broadcast variables in a Python class,"class model(object):
    @staticmethod
    def foobar(a_model, mu):
        y = a_model.y
        def _foobar(x):
            return x - mu.value + y 
        return _foobar

    def __init__(self, sc):
        self.sc = sc
        self.y = -1
        self.rdd = self.sc.parallelize([1, 2, 3])

    def get_mean(self):
        return self.rdd.mean()

    def run_foobar(self):
        mu = self.sc.broadcast(self.get_mean())
        self.data = self.rdd.map(model.foobar(self, mu))
"
get all elements from list of lists in rows of 5,"for inner in mlist:
    print ''.join(inner)
"
Python argparse mutually exclusive group with 1 vs 2 arguments,"import argparse
parser = argparse.ArgumentParser(description=""Hello"")
group = parser.add_mutually_exclusive_group()
group.add_argument('--period', action='store')
group.add_argument('--df_dt', nargs='+')
args = parser.parse_args()
"
Extracting data according to a list,"def extract_data(s):
    check_set = set(['E1', 'E2', 'E7', 'E3', 'E9', 'E10', 'E12',
                     'IN1', 'IN2', 'IN4', 'IN10'])
    result = []
    for match in re.finditer(r'\b(E|IN)[-\d]+', s):
        for digits in re.findall(r'\d+', match.group(0)):
            item = match.group(1) + digits
            if item in check_set:
                result.append(item)
    return result
"
or in if statement - one condition of the two met,"if not (request.path.startswith(s) or request.path.startswith(a)):
"
My xticks are pushed to the left,"import numpy as np

x = range(10)
y = range(10)

ticks = [ctime(1), ctime(2), ctime(3)]
xtickpos = np.linspace(min(x), max(x), 3)

plt.plot(x,y)
plt.xticks(xtickpos, ticks)
"
what do the brackets mean around this python line?,"square_list = [i**2 for i in range(1,6)]
"
how to get the common items count of lists,"import itertools
import collections

q1 = 'q1'
q2 = 'q2'
q3 = 'q3'

dic_list = {
     q1:[1,2,3,4,5],
     q2:[2,3,5],
     q3:[2,5]
     }

#sets are much more efficient for this sort of thing.  Create a dict
#of the same structure as the old one, only with `set` as values 
#instead of `list`
dic_set = {k:set(v) for k,v in dic_list.items()}

new_dic = collections.defaultdict(dict)
for k1,k2 in itertools.combinations(dic_set,2):
     #to get the count, we just need to know the size of the intersection
     #of the 2 sets.
     value = len(dic_set[k1] & dic_set[k2]) 
     new_dic[k1][k2] = value
     new_dic[k2][k1] = value

print (new_dic)
"
What are the errors in this code?,"def am_i_alive(): 
    hit_points = 20
    if hit_points == 0: 
        print 'dead'
    elif hit_points <= 5: 
        print 'almost dead'
    else: 
        print 'alive'

am_i_alive()
"
Python encoding ISO to UTF8,"import email.header as eh

unicode_data= u''.join(
    str_data.decode(codec or 'ascii')
    for str_data, codec
    in eh.decode_header('=?ISO-8859-7?B?0OXm7/Dv8d/hIPP07+0gyuno4enx/u3h?='))
# unicode_data now is u'Πεζοπορία στον Κιθαιρώνα'
"
How to interpret 4 bytes as a 32-bit float using Python,"import struct

# if input is string, per @robyschek will fail on python 3
data=b'\x64\xd8\x64\x3f'  
print struct.unpack('<f', data)   #little endian
print struct.unpack('>f', data)   # big endian

#your input  
list1=[0x64, 0xD8, 0x6E, 0x3F]
# aa=str(bytearray(list1))  # edit: this conversion wasn't needed
aa= bytearray(list1) 
print struct.unpack('<f', aa)
​
"
Templating with both local and global variables using Python `format`,"""{GLOBAL_VAR} {local_var}"".format(**globals(), **locals())
"
Convert column of date objects in Pandas DataFrame to strings,df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')
"Django, exclude() function on list","list = [friend for friend in list if friend.user not in blocked_users]
"
Are variables instantiated to 'None' pass by value in Python?,"def doStuff():
    test = ""hello world"" # These 2 lines could be one
    return test          # return ""hello world""

def main():
    test = doStuff()
    print(test)
"
String Slicing Python,""""""""""""".join(s.rsplit(',', 1))"
Python match whitespaces,"import re

def correct(string):
    fmatch = re.sub(r'\s+', ' ', string)
    return fmatch

print correct(""This   is  very funny  and    cool.Indeed!"")
"
count the occurrences of a list item,l.count('b')
How to columnate a list in python?,"import itertools

rows =  [(""A"", 76),  (""B"", 56), (""C"", 42), (""D"", 31), (""E"", 31), (""F"", 25), (""G"", 24)]

def print_multi_cols(lrows, split_at=5, space_each=4):
    for row in itertools.izip(*itertools.izip_longest(*[iter(lrows)]*split_at, fillvalue=("" "", "" ""))):
        for col in row:
            print "" "".join([""%-*s"" % (space_each, item) for item in col]),
        print

print_multi_cols(rows, 2)
print_multi_cols(rows, 3)
"
How to count the number of lines of code retrieved using beautiful soup?,"imgTags = soup.select(""div.classname ul.classname a.classname img"")
#print number of <img> retreived :
print(len(imgTags))

for tag in imgTags:
    name = tag['alt']
    print(name)
"
Python 2.7 counting number of strings,">>> s = ['sdgsdgdsgjhsdgjgsdjsdgjsd', 'ads', 'dashkahdkdahkadhaddaad']
>>> cnt = 0
>>> for i in s:
        if len(i) > 20:
            cnt += 1


>>> cnt
2
"
Search all drives for a file,"import subprocess

driveStr = subprocess.check_output(""fsutil fsinfo drives"")
driveStr = driveStr.strip().lstrip('Drives: ')
drives = driveStr.split()
"
Trim or remove single white space char from delimited text,"s = ""40001#World Music#Mike Oldfield#Tubular Bells#   53# # #""
s2 = ""#"".join([i if i != "" "" else """" for i in s.split(""#"")])
print s2
"
Challenge: create a list by sorting a bunch of nested dict,"filtered = sorted(data[""GROUP-A""].items(), key= lambda kv: max(value for group_b in kv[1].itervalues() for key_b in group_b.itervalues() for group_c in key_b.itervalues() for value in group_c.itervalues()))
print filtered
"
Length of tab character,"print repr('test\ttest 2'.replace('\t', ' ' * 8))
print repr('tessst\ttest 2'.replace('\t', ' ' * 8))
# output: 'test        test 2' 
#         'tessst        test 2'
"
"Regex is working. But seriously dont know, what is wrong in some parts",">>> s = '''July 2005 – December - 2006 

(Nov '12 - Feb 12)

(Nov 12 - Feb 12       )

july 2005 – Dec 2012 ## Note here. If i press enter after Dec 2012 I will    get a match. Dont know why ?'''
>>> re.findall(r""(?mi)((?:\b(?:(?:jan|january|feb|february|mar|march|apr|april|may|jun|june|jul|july|aug|august|set|sep|september|oct|october|nov|november|dec|december)[/\.\s',’-]{0,4}\d{2,4}|(jan|january|feb|february|mar|march|apr|april|may|jun|june|jul|july|aug|august|set|sep|september|oct|october|nov|november|dec|december))[/\r-–––,]{0,4}[a-zA-Z]{3,8}[/\.\s',’-]{0,2}[\s]{0,4}\d{2,4}))"", s)
[('July 2005 – December - 2006', ''), (""Nov '12 - Feb 12"", ''), ('Nov 12 - Feb 12', ''), ('july 2005 – Dec 2012', '')]
>>> m = re.findall(r""(?mi)((?:\b(?:(?:jan|january|feb|february|mar|march|apr|april|may|jun|june|jul|july|aug|august|set|sep|september|oct|october|nov|november|dec|december)[/\.\s',’-]{0,4}\d{2,4}|(jan|january|feb|february|mar|march|apr|april|may|jun|june|jul|july|aug|august|set|sep|september|oct|october|nov|november|dec|december))[/\r-–––,]{0,4}[a-zA-Z]{3,8}[/\.\s',’-]{0,2}[\s]{0,4}\d{2,4}))"", s)
>>> [(x) for x,y in m]
['July 2005 – December - 2006', ""Nov '12 - Feb 12"", 'Nov 12 - Feb 12', 'july 2005 – Dec 2012']
"
What is regex for currency symbol?,">>> import unicodedata
>>> [ch for ch in '$99.99 / €77' if unicodedata.category(ch) == 'Sc']
['$', '€']
"
Pythonic way of getting a value from a list,"k = ""PROTO=""
keep = (ele for ele in x.split() if ele.startswith(k))
print(next(keep,"""").split(""="")[-1])
"
reversed() vs. xrange(),"my_list = [""hello""] * 100

def v1():
    for x in my_list[::-1]:
        pass

def v2():
    for x in reversed(my_list):
        pass

print timeit.timeit(v1)
print timeit.timeit(v2)
"
Dates ( pi-Day ),">>> from datetime import date
>>> def next_pi_date():
...     today = date.today()
...     pi_date = date(today.year, 3, 14)
...     if pi_date < today:
...         pi_date = pi_date.replace(year=pi_date.year + 1)
...     return pi_date
... 
>>> next_pi_date()
datetime.date(2015, 3, 14)
"
Replacing a unicode character in a string in Python 3,">>> s.replace('\\uf604','X')
'bla bla bla X bla bla bla'
"
Python text files merge from subdirectory,"import os
root = './'
files = [(path,f) for path,_,file_list in os.walk(root) for f in file_list]
out_file = open('master.txt','w')
for path,f_name in files:
    in_file = open('%s/%s'%(path,f_name), 'r')

    # write out root/path/to/file (space) file_contents
    for line in in_file:
        out_file.write('%s/%s %s'%(path,f_name,line))
    in_file.close()

    # enter new line after each file
    out_file.write('\n')

out_file.close()
"
python: convert list to dictionary,"lst =  [""comp1"", ""comp2"", ""comp1"", ""mycomp"", ""mycomp""]
d = {}
for i in lst:
    d[i] = d.get(i, 0) +1
print (d)
"
Get the max value for given keys in a dictionary?,"from operator import itemgetter
from itertools import groupby

key = itemgetter(0)
bestvalues = {tuple(best[:2]): best[2] 
              for key, group in groupby(sorted(information, key=key), key=key)
              for best in (max(group, key=itemgetter(2)),)}
"
Download a file and push into MySQL without timing out in Python,"# Prepare queue and end signaling handler
q = queue.Queue()
done = threading.Event()

# Function that fetches items from q and puts them into db after
# certain amount is reached
def store_db():
    items=[]

    # Until we set done
    while not done.is_set():
        try:
            # We may have 500 records and thread be done... prevent deadlock
            items.append(q.get(timeout=5))
            if len(items) > 1000:
                insert_into(items)
                items = []
            q.task_done()
         # If you wait longer then 5 seconds < exception
         except queue.Empty: pass

    if items:
        insert_into(items)

# Fetch all data in a loop
def continous_reading():
    # Fetch row
    q.put(row)

# Start storer thread
t = threading.Thread(target=store_db)
t.daemon = True
t.start()

continous_reading()
q.join() # Wait for all task to be processed
done.set() # Signal store_db that it can terminate
t.join() # to make sure the items buffer is stored into the db
"
How to print variables without spaces between values,"print('Value is ""{}""'.format(value))"
"Using Python3 and the argparse module, can I disallow an argument if a different one was passed?","import argparse
parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group()
group.add_argument('-a', help='Do A', action='store_true')
group.add_argument('-b', help='Do B', action='store_true')
args = parser.parse_args()
if args.a:
    print('A!')
if args.b:
    print('B!')
"
How to sort dict list with multiple key attributes - python,"seen_items = set()
filtered_dictlist = (x for x in dict_list if (x[""id""],x[""type""]) not in seen_items and not seen_items.add((x[""id""],x[""type""])))
sorted(filtered_dictlist,key=lambda x:(x[""type""],x[""id""]),reverse=True)
"
"Going through very long strings, moving characters around","import re

paren_regex = '(\(\w+\))'
square_bracket_regex = '(\[\w+\])'
curly_bracket_regex = '(\{\w+\})'
"
Search in a python list,"countedQuestions = Counter([question for q in answers for question in q])
"
Pandas append list to list of column names,"df = df[[col_start.extend(col_add)]]
"
Understanding pythons enumerate,"for item in myList:
    if item == something:
        doStuff(item)
"
Create five minute time blocks (Pandas/Python),"# let's say that data frame with observations and their mins is called omf
min_time = lambda row: row['epoch'] - omf[omf['observation'] == row['observation']]['min']
timeseries['new_epoch'] = timeseries.apply(min_time,axis=1)
"
all combination of a complicated list,"import itertools
def negations(seq):
    for prefixes in itertools.product(["""", ""-""], repeat=len(seq)):
        yield [prefix + value for prefix, value in zip(prefixes, seq)]

print list(negations([""a"", ""b"", ""c""]))
"
What does the Star operator mean in Python?,"def sum(*values):
    s = 0
    for v in values:
        s = s + v
    return s

s = sum(1, 2, 3, 4, 5)
"
Splitting binary file content in two parts using single byte separator in python,"import random

SEP = chr(0x29)


with open('file.dat', 'wb') as outfile:
    outfile.write(""<doc></doc>"")
    outfile.write(SEP)
    data = ''.join(chr(random.randint(0, 255)) for i in range(1024))
    outfile.write(data)


with open('file.dat', 'rb') as infile:
    data = infile.read()

xml, sep, binary_data = data.partition(SEP)

print xml
print len(binary_data)
"
Can anyone explain why this sorting won't work?,">>> print sorted.__doc__
sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list
"
Split the hash-tags from a tweet and then store them and the remaining string in a CSV,"import csv
# Open input file for reading and output file for writing.
# It's good practice to use the with open() context manager
with open('sample.csv', 'r') as csv_in, open('results.csv', 'w') as csv_out:
    # The reader will figure out the field names 
    # based on the first line in the file.
    reader = csv.DictReader(
        csv_in
    )
    # We have to tell the writer the fields and their order
    # and which dialect of csv we want. 
    writer = csv.DictWriter(
        csv_out, 
        fieldnames=reader.fieldnames + ['hashtags'],
        dialect=reader.dialect,
        quoting=csv.QUOTE_ALL,
    )
    # write the header line of the output csv
    writer.writeheader()

    # loop over each line in the csv. The header line is not 
    # part of this loop when using csv.DictReader
    for row in reader:
        # Split the tweet into words using str.split()
        words = row['tweet'].split()

        # If you need to modify this code, you should turn the 
        # following lines into one or two separate functions.
        # This will make debugging and testing easier.

        # Filter and join the words using str.startswith()
        row['tweet'] = ' '.join(
            w for w in words if not w.startswith('#'))

        # Extract the hashtags and remove the initial ""#""
        # using string slicing.
        row['hashtags'] = ','.join(
            w[1:] for w in words if w.startswith('#'))

        # write the modified row to the output csv
        writer.writerow(row)
"
how to quickly check if an object is in a list in python,"main_object_set = set(main_object_list)

for o in main_object_list:
    obj_list = o.get_this_object_list()
    objs_in_main_list = main_object_set.intersection(obj_list)
    for i in objs_in_main_list:
        //do something with i
"
python - how to check if table exists?,"def checkTableExists(dbcon, tablename):
    dbcur = dbcon.cursor()
    dbcur.execute(""""""
        SELECT COUNT(*)
        FROM information_schema.tables
        WHERE table_name = '{0}'
        """""".format(tablename.replace('\'', '\'\'')))
    if dbcur.fetchone()[0] == 1:
        dbcur.close()
        return True

    dbcur.close()
    return False
"
Trying to find the same item in a list with the context of hangman,">>> word = 'BANANA'
>>> hidden_word = [""_ ""] * len(word)
>>> def click_1 (key):
...     if key in word:
...         for index, character in enumerate(word):
...             if character == key:
...                 hidden_word[index] = character
...         print (hidden_word)
...     else:
...         print (""Nope"")
... 
>>> click_1('N')
['_ ', '_ ', 'N', '_ ', 'N', '_ ']
>>> click_1('B')
['B', '_ ', 'N', '_ ', 'N', '_ ']
>>> click_1('A')
['B', 'A', 'N', 'A', 'N', 'A']
"
Length of 2d list in python,"len2 = lambda l: sum([len(x) for x in l])
len2(mylist[0:3]) = 9
len2(mylist[1:3]) = 6
len2(mylist[2:3]) = 3
"
"In python 3, how to create child class instance using some magic in parent __new__?","class Number:
    def __new__(cls, value):
        if cls is not __class__:
            # Subclass, create an instance (invokes object.__new__)
            return super().__new__(cls)

        if isinstance(value, complex):
            return Complex(value)
        elif isinstance(value, (int, float)):
            return Real(value)
        else:
            raise TypeError('Ну ты и мудак!!!')

    def __init__(self, value):
        self.value = value
"
Python Regex Either/Or within Line,"for line in output.split(""\n""):
    value = None
    metric = """"
    for word in line.split():
        if word.isdigit():
            value = int(word)
        else:
            metric = metric + "" "" + word
    print ""%s => %s"" % (metric.strip("":""), str(value))
"
Remove lowercase words from python unicode string,"pattern = ur'([A-ZÄÖÜ][^., \t\n]*)'
result = "" "".join(re.findall(pattern, text))
"
Modifying code avoiding break statements,"if player == player1:
   score1=score1+1
if player == player2:
   score2=score2+1
"
Updating variables in a list using python's csv module,"import csv
a=8   
mylist = [a,'2','3']    
with open(""myfile.csv"", ""wb"") as myfile:
    wr = csv.writer(myfile, quoting=csv.QUOTE_ALL)    
    wr.writerow(mylist)    
    mylist[0] = mylist[0] + 1  ####  here you modify a list
    wr.writerow(mylist)
"
Finding locations where two strings differ,"import difflib

def diff(a, b):
    for tag, i1, i2, j1, j2 in difflib.SequenceMatcher(a=a, b=b).get_opcodes():
        if tag!='equal':
            yield a[i1:i2], b[j1:j2]

>>> d = list(diff('A B C D E F G'.split(), 'A X D Y Z W G'.split()))
>>> d
[(['B', 'C'], ['X']), (['E', 'F'], ['Y', 'Z', 'W'])]
>>> '\n'.join('{} -> {}'.format(*(' '.join(i) for i in l)) for l in d)
B C -> X
E F -> Y Z W
"
Python: how to map one list and one list of list together,"list1 = [1, 2, 3, 4, 5]
list2 = [[1, 2, 3], [5], [1, 6], [1, 0, 9, 10], [1, 5, 2]]
print [(item1, s) for item1, item2 in zip(list1, list2) for s in item2]
"
Subtract dates in Django?,"months = lambda a, b: abs((a.year - b.year) * 12 + a.month - b.month)
"
File name matching - middle of the string,"'[a-z][0-0][a-z][0-9][0-9][0-9][13579][a-z][0-9][0-9][0-9].txt'
"
Python Instantiate All Classes Within a Module,">>> actions = [obj() for obj in Action.__subclasses__()]
>>> actions
[<__main__.Move at 0x10fc14fd0>, <__main__.Look at 0x10fc14668>]
"
python list from python binary tree,"def create_list(tree, templist=[]):
    """"""
    >>> tree = BinaryTree(2, BinaryTree(29, BinaryTree(26)), BinaryTree(4, None, BinaryTree(2, BinaryTree(9))))
    >>> create_list(tree)
    [2, 29, 4, 26, None, None, 2, None, None, None, None, None, None, 9, None]

    """"""
    items = []
    queue = [tree]

    while queue:
        copy = queue[:]
        queue = []

        for item in copy:
            if item is None:
                items.append(None)
                queue.append(None)
                queue.append(None)
            else:
                items.append(item.key)
                queue.append(item.left)
                queue.append(item.right)

        if all((x is None for x in queue)):
            break

    return items
"
Improve current implementation of a setInterval python,"from threading import Event, Thread

def call_repeatedly(interval, func, *args):
    stopped = Event()
    def loop():
        while not stopped.wait(interval): # the first call is in `interval` secs
            func(*args)
    Thread(target=loop).start()    
    return stopped.set
"
Listing all instance of a class,"class MasterBlock(object):
    instances = []
    def __new__(cls, *args, **kwargs):
        instance = super(MasterBlock, cls).__new__(cls, *args, **kwargs)
        instance.instances.append(instance)
        return instance

    def main(self):
        print('in main of', self.__class__.__name__)  # for testing purposes

class RandomA(MasterBlock):
    def __init__(self):
        pass
    # inherit the main function

class AnotherRandom(RandomA):  # works for sub-subclasses, too
    def __init__(self):
        pass
    # inherit the main function

a=RandomA()
b=AnotherRandom()
c=AnotherRandom()

for instance in MasterBlock.instances:
    instance.main()
"
Create multiple dataframe using for loop in python 2.7,"import pandas as pd
import io

text = b""""""Start_Location  End_Location    Date
OFFICE          HOME            3-Apr-15
OFFICE          HOME            3-Apr-15
HOME            SHOPPING    3-Apr-15
HOME            SHOPPING    4-Apr-15
HOME            SHOPPING    4-Apr-15
SHOPPING    HOME            5-Apr-15
SHOPPING    HOME            5-Apr-15
HOME            SHOPPING    5-Apr-15""""""

locations = [""HOME"", ""OFFICE"", ""SHOPPING""]

df = pd.read_csv(io.BytesIO(text), delim_whitespace=True)
g = df.groupby(""Start_Location"")
for name, df2 in g:
    globals()[""df_"" + name.lower()] = df2
"
Inputing an identical string multiple times to a function,"def myfunc(*iterables):
    print iterables

myfunc('abc', 'abc', 'abc')   # 3 Arguments
# ('abc', 'abc', 'abc')
myfunc(['abc'] * 3)           # 1 Argument with 3 items in it
# (['abc', 'abc', 'abc'],)
myfunc(*['abc'] * 3)          # Unpack the 3 element list, to pass 3 arguments
# ('abc', 'abc', 'abc')
"
"Understanding numpy ""void"" dtype and generic arrays","In [85]: dt=np.dtype([('anything', 'O'), ('counter','i4')])

In [86]: np.array([(""hi"",1), (""bye"",1), ((1,1),2), (3,4)],dtype=dt)
Out[86]: 
array([('hi', 1), ('bye', 1), ((1, 1), 2), (3, 4)], 
      dtype=[('anything', 'O'), ('counter', '<i4')])
"
"How to plot a pandas df with labels on index, time series as list stored in one column","import pandas as pd
import numpy as np


df = pd.DataFrame({""ts"":  pd.Series([[pd.Timestamp('2014-04-08 00:00:00'), pd.Timestamp('2014-04-09 00:00:00'), pd.Timestamp('2014-04-10 00:00:00')], 
                                     [pd.Timestamp('2014-05-08 00:00:00'), pd.Timestamp('2014-05-09 00:00:00'), pd.Timestamp('2014-05-10 00:00:00')],  
                                     [pd.Timestamp('2014-06-08 00:00:00'), pd.Timestamp('2014-06-09 00:00:00'), pd.Timestamp('2014-06-10 00:00:00')], 
                                     [pd.Timestamp('2014-07-08 00:00:00'), pd.Timestamp('2014-07-09 00:00:00'), pd.Timestamp('2014-07-10 00:00:00')]],
                                     index=[ 'A', 'B', 'C', 'D'])})

print df                    

                                                  ts
A  [2014-04-08 00:00:00, 2014-04-09 00:00:00, 201...
B  [2014-05-08 00:00:00, 2014-05-09 00:00:00, 201...
C  [2014-06-08 00:00:00, 2014-06-09 00:00:00, 201...
D  [2014-07-08 00:00:00, 2014-07-09 00:00:00, 201...

#convert lists to columns
df = pd.DataFrame([ x for x in df['ts']], index=df.index)
print df

           0          1          2
A 2014-04-08 2014-04-09 2014-04-10
B 2014-05-08 2014-05-09 2014-05-10
C 2014-06-08 2014-06-09 2014-06-10
D 2014-07-08 2014-07-09 2014-07-10
"
How to just keep punctuation with a string in python?,">>> from string import letters, digits, whitespace, punctuation
>>> s = ""aaa; sf = fa = bla http://wa""
>>> s.translate(None, letters+digits+whitespace)
';==://'
"
Python sort list by regular expression,"b = sorted(a, key=lambda x: int(x.split(""NR;"")[-1].split("";"")[0]))
"
Change C object instance to Python subclass,"  def __getattr__(self, name):
    'Get the attribute from the model if possible.'
    if hasattr(self._model, name):
      return getattr(self._model, name)
    if isinstance(self._model, gtk.TreeModelFilter):
      if hasattr(self._model.get_model(), name):
        return getattr(self._model.get_model(), name)
"
re.search : a lack of understanding through 2 exemples,"if re.search(r""Crude protein \(min\.\)"",""Crude protein,protein,Protein,Protein    (crude),Crude protein (min.)"") : print(""ok"")
...
ok
"
if statement somehow always true,"while True:
    response = input(""for demonstration purpose: did the payment succeed, yes or no?"").lower()
    if response in ('y', 'yes', 'n', 'no'):
        payment_succeeded = response in ('y', 'yes')
        break
    print('Sorry, I did not understand that input, please try again.')
"
Replace the single quote (') character from a string,"""""""didn't"""""".replace(""'"", '')"
"Python Combinatorics, part 2","import collections, itertools

def get_combos(branches):
  rc=collections.defaultdict(list)
  for b in branches:
    rc[b.r,b.c].append(b)
  return itertools.product(*rc.values())
"
Python. How to get directory path from JSON?,"        yield parent + ('/' if data is not None and not len(data) else '')
"
Entries in Nested Dictionaries," >>> [ y.items() for x,y in myDict.items() ]
[[(1, 2), (2, 5), (3, 9), (4, 6), (5, 15)], [(1, 18), (2, 27), (3, 2), (4, 15), (5, 63)], [(1, 27), (2, 15), (3, 24), (4, 9), (5, 32)]]
"
Python-New To Python and programming in general-difference of two sets,"def hasNonemptyDiff(A,B):
    foundExampleYet = False
    for a in A:
        if(a in B): # here's the change
            foundExampleYet = True
    return foundExampleYet
"
"Convert decimal range to Numpy array, with each bit being an array element",">>> from numpy import arange, newaxis
>>> arange(2**4)[:,newaxis] >> arange(4)[::-1] & 1
array([[0, 0, 0, 0],
       [0, 0, 0, 1],
       [0, 0, 1, 0],
       [0, 0, 1, 1],
       [0, 1, 0, 0],
       [0, 1, 0, 1],
       [0, 1, 1, 0],
       [0, 1, 1, 1],
       [1, 0, 0, 0],
       [1, 0, 0, 1],
       [1, 0, 1, 0],
       [1, 0, 1, 1],
       [1, 1, 0, 0],
       [1, 1, 0, 1],
       [1, 1, 1, 0],
       [1, 1, 1, 1]])
"
Threading in Python and Queuing,"queueLock = threading.Lock()

def do_stuff(q):
    print threading.current_thread()
    while True:
        queueLock.acquire()
        x=str(q.get())
        print [x[i:]for i in range(len(x))]
        queueLock.release()    
        q.task_done()
"
Python flatten list (but not all the way),"def flatten(a):
    b = []
    for c in a:
        if isinstance(c, list) and any(isinstance(i, list) for i in c):
            b.extend(flatten(c))
        else:
            b.append(c)
    return b
"
How to comment/remove all print statements from Python codebase?,"find . -name '*.py' -exec sed -Ei ""s/\(^[[:space:]]*\)\(print.*$\)/#\1\2/g"" {} \;
"
How do I override a function of a python library?,"class my_class(module):
    def __init__(self, *args, **kwargs):
        super(my_class, self).__init__(*args, **kwargs)
    def dump(self):
        # do stuff
"
CrawlSpider fails to follow rule for some websites,"import urlparse, re
from scrapy import Spider, log
from bs4 import BeautifulSoup
from scrapy.http import Request
from govcrawl.items import DomainItem

class DomainSimpleSpider(Spider):
    name = ""govcrawl_simple""

    def parse(self, response):
        pages_done = self.crawler.stats.get_value('downloader/response_count')
        pages_todo = self.crawler.stats.get_value('scheduler/enqueued') - self.crawler.stats.get_value('downloader/response_count')
        log.msg(""URL: %s (%s) Crawled %d pages. To Crawl: %d"" % (self.start_urls[0], self.url_id, pages_done, pages_todo), spider = self)
        #import ipdb
        #ipdb.set_trace()
        soup = BeautifulSoup(response._body, ""html5lib"")
        links = []
        for tag in self.tags:
           for a in soup.find_all(tag):
              for attr in self.attrs:
                 if attr in a.attrs:
                    href = a.attrs[attr]
                    if href.startswith(""http""):
                       links.append(href)
                    href = urlparse.urljoin(response.url, href)
                    href_parts = urlparse.urlparse(href.replace('\t', '').replace('\r', '').replace('\n', '').replace(' ', '+'))
                    if re.match(self.allow, href_parts.path) and not self.forbidden_extension(href_parts.path):
                       yield Request(href)
        for script in soup([""script"", ""style""]):
           script.extract()
        item = DomainItem()
        item[""url""] = response.url
        #item[""text""] = re.sub(r'\s{2,}', ' ', remove_tags(' '.join(response.xpath('//body//text()').extract()))).strip()
        item[""text""] = soup.get_text()
        item[""links""] = links
        self.crawler.stats.inc_value('pages_crawled')
        yield item

    def forbidden_extension(self, url):
       url = url.lower()
       return url.endswith(""pdf"") or url.endswith(""jpg"") or url.endswith(""wmv"") or url.endswith(""avi"") or url.endswith(""pptx"") or url.endswith(""gif"") or url.endswith(""mp3"") or url.endswith(""mp4"") or url.endswith(""wav"") or url.endswith(""mov"") or url.endswith(""ppt"") or url.endswith(""xls"") or url.endswith(""doc"") or url.endswith(""docx"") or url.endswith(""xlsx"") or url.endswith(""flv"") or url.endswith(""wma"") or url.endswith(""jpeg"") or url.endswith(""png"") or url.endswith(""odf"") or url.endswith(""ods"") or url.endswith(""zip"") or url.endswith(""gz"") or url.endswith(""tar"") or url.endswith(""7z"") or url.endswith(""rar"") or url.endswith(""vob"")
"
Change C object instance to Python subclass,"class MyListStore(object):
  def __init__(self, title, filter=None):
    self.title = title
    self._model = gtk.ListStore(gobject.TYPE_INT, gobject.TYPE_STRING)
    if filter_func:
      self._model = self.model.filter_new()
      self._model.set_visible_func(filter)
"
how to give raw_input to subprocess,"b = subprocess.Popen(""ovs-vsctl add-br '{}'"".format(BR_EX), ...)
"
"Is it possible to fetch the first few, say 1K, of a webpage using python?","import requests
beginning = requests.get('http://example.com/').iter_content(1024).next()
"
Produce single out file from multiple lists in python,"import itertools
with open('outfile.txt', 'w') as outfile:
    outfile.write('animals ' + ' '.join('years_' + y for y in years) + '\n')
    for data in itertools.izip(years, animals, *sales):
        outfile.write(' '.join(data)+'\n)
"
More pythonic way for dealing with lists and dicts,"from itertools import chain

for keys, values in my_dict.iteritems():
    fmt_str = ', '.join(map(str, chain(keys, *values)))
    print fmt_str
"
Python: Passing a cursor back from a class for a dbi instance,"class create_db(object):

    def __init__(self):
        import psycopg2 as pq
        self.cn = pq.connect('dbname=mydb user=me')
        self.cr = self.cn.cursor()

    def execute(self, query, *args):

        results = self.cr.execute(query, args)

        return results
"
Datetime conversions to timestamp,">>> import datetime
>>> datetime.datetime.strptime(u'2015-06-24T12:00:00.000+0000','%Y-%m-%dT%H:%M:%S.%f%z')
datetime.datetime(2015, 6, 24, 12, 0, tzinfo=datetime.timezone.utc)
"
OrderedDict in IronPython missing?,"import sys
print(sys.version)
import _collections as _cl
print ""_collections:"", dir(_cl)
import collections as cl
print ""collections:"", dir(cl)
"
Programatically do a natural join on two tables,"hash = {}
for idx, row1 in enumerate(table1):
    hash[row1[0]] = idx #save the index of row by the key value

for row2 in table2:
    if hash.has_key(row2[0])
         newRow = table1[hash[row2[0]]] + row2[1:]
"
Grouping items in two lists,"l1 = ['r1', 'r1', 'r1', 'r2', 'r2', 'r3']
l2 = [1, 2, 3, 1, 2, 1]

d = {}
for i, j in zip(l1, l2):
  d[i] = d.get(i, {})
  d[i]['n%s' % j] = j
"
Escaping % in MySQLdb,"print ""a %s %d"" % () 
"
Is there a function in python that returns true if all members of an iterable are true?,"def foo(listOfInputs):
    return all(map(str.isnumeric,listOfInputs))
"
How to check method is exist in directly getattr widhout hasattr,"# if python < 3, for 'print' statement to work with 'lambda'
from __future__ import print_function

class RightObject(object):
    def __init__(self, text):
        self.text = text

    def required_method(self):
        print('executing %s' % self.text)

class WrongObject(object):
    pass

def exec_if_possible(instance, method):
    """""" This function checks for attribute and if it's a function. """"""
    if hasattr(instance, method):
        res_func = getattr(instance, method)
        if callable(res_func): # is it a function or not?
            res_func()
        else:
            print('it is not a function')
    else:
        print('bad object')

def try_exec(instance, method):
    """""" This is a straight-forward function. """"""
    try:
        res_func = getattr(instance, method)()
    except AttributeError as at_er:
        print(at_er)
    except TypeError as ty_er:
        print(ty_er)

right = RightObject('right one')
wrong = WrongObject()
func = 'required_method'

# This will work:
exec_if_possible(right, func)

# This will fail as expected:
exec_if_possible(right, 'text')
exec_if_possible(wrong, func)

# The same here:
try_exec(right, func)
try_exec(right, 'text')
try_exec(wrong, func)

# creating a simple crash informer:
default_func = lambda: print('default function')

# one liners, but it is not recommended to use them:
getattr(right, func, default_func)()
getattr(wrong, func, default_func)()
"
Python: Extracting Sentences From Line - Regex Needed Based on Criteria,"patt = r'(?:Dr\.|Mr\.|.)*?[.!?]\s?\n?'
"
Python Java forEach equivalent,"someList.stream().map(x -> {System.out.println(x); return x;}).collect(Collectors.toList())
"
Select POST/GET parameters with regular expression,"import re
input_keys = [key for key in request.POST if re.match(r""^inputs_"", key)]
"
Iterating over list or single element in python,"    if isinstance(x, collections.Iterable) and not isinstance(x, basestring):
"
How to get the bound method derived from a metaclass when the class has a method of the same name,"class Meta(type):
    def shadowed(cls):
        print ""Meta.shadowed() on %s"" % (cls.__name__,)
    def unshadowed(cls):
        print ""Meta.unshadowed() on %s"" % (cls.__name__,)

class Foo(object):
    __metaclass__ = Meta

    def shadowed(self):
        print ""Foo.shadowed()""

class Bar(object):
    __metaclass__ = Meta

Bar.unshadowed()                   #Meta.unshadowed() on Bar 
Bar.shadowed()                     #Meta.shadowed() on Bar
Foo.unshadowed()                   #Meta.unshadowed() on Foo
#Foo.shadowed()                    #TypeError    
Meta.shadowed.__get__(Foo, Meta)() #Meta.shadowed() on Foo
"
"Python Pylab, how to alter the size of the label specifying the magnitude of the axes","pylab.plot(x, y)

ax = pylab.gca() # Gets the current axis object

text = ax.yaxis.get_offset_text() # Get the text object

text.set_size(30) # # Set the size.

pylab.show()
"
Quick question regarding format of if-elif statements,"if (int(one[1]) == solution) or (int(two[1]) == solution):
    print ""Hello, world"" 
"
Split list python,"
import re

l = [' -80.82581786107986,39.83903198141125,0 -80.82377033116026,39.83364133601582,0 -80.82356083750963,39.82911201506083,0',
    '-80.82285757569279,39.82686138006091,0 -80.82211394716366,39.82370641582035,0 -80.82079041778377,39.82101855094219,0',
    ' -80.82008287730855,39.84462640578131,0 -80.82581786107986,39.83903198141125,0']

for s in l: 
    parts = map(float, re.split(r'[,\s+]', s.strip()))

    lats = []
    longs = []

    for i in range(0, len(parts), 3):
        long = parts[i]
        lat = parts[i+1]
        longs.append(long)
        lats.append(lat)

    print min(lats), min(longs)
"
Reverse String Function in Python (Primitive Steps),"def reverse(word):
    word_list = []
    for i in word:
        word_list.insert(0, word[i])
    return """".join(word_list)
"
return text file path,"import os

def findAll(fname, start_dir=os.getcwd()):
  my_files = []
  for root, dirs, files in os.walk(start_dir):
    for name in files:
      if name == fname:
        my_files.append(os.path.join(root, name))
  return my_files


print findAll('file1.txt')
print findAll('file1.txt', '/some/other/starting/directory')
"
pandas query rows by list,"In [5]: mylist = (1,3)

In [6]: df[df.customer_id.isin(mylist)]
Out[6]: 
       A  customer_id
1  abcde            1
3  abcde            3
"
Elegant way to print formatted list together with index values in python?,"for i in range(2):
    print fmt % ((i, ) + tuple(A[i]))
"
Removing white space from txt with python,"re.sub('\\s{2,}', '|', line.strip())"
Changing List Entry Syntax,"user_input = ""4,8,15,16,23,42""
numbers = [int(d) for d in user_input.split("","")]

print ""numbers:"", numbers
print ""sum of numbers:"", sum(numbers)
"
Serve image stored in SQLAlchemy LargeBinary column,"from base64 import b64encode

@app.route('/event/<int:id>/logo')
def event_logo(id):
    event = Event.query.get_or_404(id)
    image = b64encode(event.logo)
    return render_template('event.html', event=event, logo=image)
"
Why aren't my globals global?,"global x
x = 0

def increment_x():
    x += 1
    return x
"
"get the <a href=""http://en.wikipedia.org/wiki/ASCII"" rel=""nofollow noreferrer"">ASCII</a> value of a character as an int",ord('a')
Python: Output list = x largest numbers of input list,"output[:] = input[-len(output):]  # last 3 items
"
convert a string that is utf-8 code to real unicode string,"class unicode(basestring)
 |  unicode(string [, encoding[, errors]]) -> object
 |
 |  Create a new Unicode object from the given encoded string.
 |  encoding defaults to the current default string encoding.
"
Custom sort python,"alphabet_dict = dict([(x, alphabet.index(x)) for x in alphabet)
new_list = sorted(inputList, key=lambda word: [alphabet_dict[c] for c in word[0]])
"
python: generate unevenly spaced array,"def my_lin(lb, ub, steps, spacing=1.1):
    span = (ub-lb)
    dx = 1.0 / (steps-1)
    return [lb + (i*dx)**spacing*span for i in range(steps)]

lin = my_lin(0, 10, 11)
print lin
# visualize the spacing
print ''.join(' '*int(2*a)+'*' for a in lin)
"
"Python Sound (""Bell"")","import sys
sys.stdout.write('\a')
sys.stdout.flush()
"
python lxml inkscape namespace tags,"from lxml import etree
root = etree.Element('{http://www.w3.org/2000/svg}svg')
g = etree.SubElement(root, '{http://www.w3.org/2000/svg}g', id='layer-id')
"
Pulling salary from HTML job specs of differing structure and salary notation,"# -*- coding: utf-8 -*-
import re

import requests
from bs4 import BeautifulSoup

urls = [
    ""http://apply.ovoenergycareers.co.uk/vacancies/453/cro-manager/london/"",
    ""http://apply.ovoenergycareers.co.uk/vacancies/475/ovo-telesales-agent/bristol/"",
    ""https://gs7.globalsuccessor.com/centrica02/tpl_centrica02.asp?s=4A515F4E5A565B1A&jobid=48490,2356610248&key=21798303&c=028859657862&pagestamp=dbykvxmmwfnblykbqc"",
    ""http://jobs.emounlimited.com/senior-digital-project-manager/""
]

money_pattern = re.compile(ur""($|£)([0-9.,]+K?)(?:\s*-\s*(?:$|£)*([0-9.,]+K?)*)*"")
for url in urls:
    soup = BeautifulSoup(requests.get(url).text, ""html.parser"")
    text = soup.body.text

    print(""URL: "" + url)
    for currency, amount1, amount2 in money_pattern.findall(text):
        if not amount1 and not amount2:
            continue

        if not amount2:
            print(""Single amount found: %s, currency: %s"" % (amount1, currency))
        else:
            print(""Range found: %s - %s, currency: %s"" % (amount1, amount2, currency) )
    print(""------"")
"
how to get the last part of a string before a certain character?,">>> x = 'http://test.com/lalala-134'
>>> print x.rsplit('-', 1)[0]
http://test.com/lalala
>>> 'something-with-a-lot-of-dashes'.rsplit('-', 1)[0]
'something-with-a-lot-of'
"
Pandas: get index of removed row,">>> df_orig.index.difference(df_final.index)
Int64Index([1, 4], dtype='int64')
"
Call function based on argparse,"p=argparse.ArgumentParser()
p.add_argument('--cmd1', action='store_const', const=lambda:'cmd1', dest='cmd')
p.add_argument('--cmd2', action='store_const', const=lambda:'cmd2', dest='cmd')

args = p.parse_args(['--cmd1'])
# Out[21]: Namespace(cmd=<function <lambda> at 0x9abf994>)

p.parse_args(['--cmd2']).cmd()
# Out[19]: 'cmd2'
p.parse_args(['--cmd1']).cmd()
# Out[20]: 'cmd1'
"
Scipy Normaltest how is it used?,"In [12]: import scipy.stats as stats

In [13]: x = stats.norm.rvs(size = 100)

In [14]: stats.normaltest(x)
Out[14]: (1.627533590094232, 0.44318552909231262)
"
Naming dimensions in python?,"DA, DB, DC = range(3)
a.sum(DA)
"
replacing text in a file with Python,"replacements = {'zero':'0', 'temp':'bob', 'garbage':'nothing'}

with open('path/to/input/file') as infile, open('path/to/output/file', 'w') as outfile:
    for line in infile:
        for src, target in replacements.iteritems():
            line = line.replace(src, target)
        outfile.write(line)
"
Python - How to append the same XML element multiple times with lxml.objectify,"phone = objectify.Element('phone')
phone.type = data_dict['PRIMARY PHONE1']
phone.number = data_dict['PRIMARY PHONE TYPE 1']
root.customers.customer.append(phone)

phone = objectify.Element('phone')
phone.type = data_dict['PRIMARY PHONE2']
phone.number = data_dict['PRIMARY PHONE TYPE 2']
root.customers.customer.append(phone)
"
Splitting a Python list into groups of 5 and then printing,"for count, group in enumerate(n_split(dblist, 5), 1):
    print 'env{}: {}'.format(count, ' '.join(group))
"
Python web scraping for javascript generated content,"from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

driver = webdriver.Firefox()
driver.get('http://www.doi2bib.org/#/doi/10.1007/s00425-007-0544-9')

element = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH, '//pre[@ng-show=""bib""]')))
print(element.text)

driver.close()
"
X pattern in python 3.2,"def pattern_writer2(pattern_size):
    for t in range(pattern_size):
        pattern = list(""."" * pattern_size)
        pattern[t] = ""x""
        pattern[-(t+1)] = ""x""
        print """".join(pattern)
"
"Implementing ""select distinct ... from ..."" over a list of Python dictionaries","def select_distinct(dictionaries, keys):
  seen = set()
  for d in dictionaries:
    v = tuple(d[k] for k in keys)
    if v in seen: continue
    yield v
    seen.add(v)
"
serching for nested item in nested list [python],">>> ""ny"" in (sublist[1] for sublist in lst)
True
"
Pythonic way to write a loop,"a = [1, 2, 3]
b = [4, 5, 6]
result = [x - y for x in a for y in b]
"
how to sort a list of string by every element's numeric value,"a = [""part 1"", ""part 3"" , ""part 10"", ""part 2""]
print sorted(a, key=lambda x:int(x.split()[1]))
"
Finding the most similar numbers across multiple lists in Python,"def item_selection(listA, listB, listC):
    # make the list of partially-filled triplets
    triplets = [[a] for a in listA]
    iT = 0
    iB = 0
    while iT < len(triplets):
        # make iB the index of a value in listB closes to triplets[iT][0]
        while iB < len(listB) and listB[iB] < triplets[iT][0]:
            iB += 1
        if iB == 0:
            triplets[iT].append(listB[0])
        elif iB == len(listB)
            triplets[iT].append(listB[-1])
        else:
            # look at the values in listB just below and just above triplets[iT][0]
            # and add the closer one as the second member of the triplet
            dist_lower = distance([triplets[iT][0], listB[iB]])
            dist_upper = distance([triplets[iT][0], listB[iB + 1]])
            if dist_lower < dist_upper:
                triplets[iT].append(listB[iB])
            elif dist_lower > dist_upper:
                triplets[iT].append(listB[iB + 1])
            else:
                # if they are equidistant, add both
                triplets[iT].append(listB[iB])
                iT += 1
                triplets[iT:iT] = [triplets[iT-1][0], listB[iB + 1]]
        iT += 1
    # then another loop while iT < len(triplets) to add in the numbers from listC
    return min(triplets, key = distance)
"
python - Is there a way to store a function in a list or dictionary so that when the index (or key) is called it fires off the stored function?,"dispatcher = {'foobar': [foo, bar], 'bazcat': [baz, cat]}

def fire_all(func_list):
    for f in func_list:
        f()

fire_all(dispatcher['foobar'])
"
Python: How to check characters occurrence in string in one line,"underscores = ('_', '__')
if myString.endswith(underscores): pass
"
How to add a time control panel to a FuncAnimation from matplotlib,"import numpy as np
import matplotlib.pyplot as plt
from matplotlib.mlab import bivariate_normal
from matplotlib.widgets import Slider, Button, RadioButtons

#Setup figure and data
fig, ax = plt.subplots()
plt.subplots_adjust(bottom=0.25)
delta = 0.5
t = np.linspace(0.0, 100.0, 256)
x = np.linspace(-4.0, 4.001, 512)
y = np.linspace(-4.0, 4.001, 512)
X, Y = np.meshgrid(x, y)
Z1 = bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
XZslice = np.zeros((256,512,512))
for i in range(t.shape[0]):
    XZslice[i,:,:] = (Z1 - Z2) * t[i]/10.
cmap = plt.cm.rainbow
im = ax.pcolormesh(XZslice[128,:,:], cmap=cmap)
fig.colorbar(im)
axcolor = 'lightgoldenrodyellow'
axtime = plt.axes([0.25, 0.1, 0.65, 0.03], axisbg=axcolor)
stime = Slider(axtime, 'Time', 0.0, 100.0, valinit=50.0)

#Routines to reset and update sliding bar
def reset(event):
    stime.reset()

def update(val):
    time = int(stime.val/100.* 256)
    im.set_array(XZslice[time,:,:].ravel())
    fig.canvas.draw()

#Bind sliding bar and reset button  
stime.on_changed(update)
resetax = plt.axes([0.8, 0.025, 0.1, 0.04])
button = Button(resetax, 'Reset', color=axcolor, hovercolor='0.975')
button.on_clicked(reset)

plt.show()
"
Get Pairs of List Python,"def func(alist):
    return zip(alist, alist[1:])
"
Python Ternary Style: Is this good or bad style?,"for state in states: score += penalty if state == bad else bonus
"
Match rows between two files and mark the matched strings,"import re
with open('fileA.txt') as A:
    A_content=[x.strip() for x in A]
with open('fileB.txt') as B:
    B_content=[x.strip() for x in B]
output=[]
for line_A in A_content:
    for line_B in B_content:
        #do whatever formatting you need on the text, 
        # I am just surrounding it with *'s here

        replace = ""**"" + line_B + ""**""

        #use re.sub, 
        # details here: https://docs.python.org/2/library/re.html#re.sub

        line_A = re.sub(line_B, replace , line_A)
    #I am adding everything to the output array but you can check if it is 
    # different from the initial content. I leave that for you to do
    output.append(line_A)
"
How do I print this class variable?,"class Contacts:
    all_contacts = []

    def __init__(self, name, email):
       self.name = name
       self.email = email
       Contacts.all_contacts.append(self)

    def __str__(self):
       return '%s, <%s>' % (self.name, self.email)

    def __repr__(self):
        return str(self)
"
How to reshape a networkx graph in Python?,"def construct_projection(label):
    r1 = r2 = 0.5
    theta = math.pi / 6
    phi = math.pi / 3
    x = int( 'p' in label) + r1 * math.cos(theta) * int('r' in label) - r2 * math.cos(phi) * int('s' in label)
    y = int( 'q' in label) + r1 * math.sin(theta) * int('r' in label) + r2 * math.sin(phi) * int('s' in label)
    return (x,y)
"
List as a function argument - modifications discarded,"def hidePasswords(L, password):
    for elem in L:
        if elem == password:
            elem = ""*""*len(password)
    return L
"
"Python - mysqlDB, sqlite result as dictionary","def dict_gen(curs):
    ''' From Python Essential Reference by David Beazley
    '''
    import itertools
    field_names = [d[0].lower() for d in curs.description]
    while True:
        rows = curs.fetchmany()
        if not rows: return
        for row in rows:
            yield dict(itertools.izip(field_names, row))
"
How do I recreate a nested list from a long string of information in Python?,"def sentence(text):
    iter_text = iter(text.split())
    # split text on spaces and create a single iterator from it

    def word(i_text, num_chars):
        """"""Helper function to return a list of the num_chars length
        pulled out of the iterator i_text""""""

        return [next(i_text) for _ in range(num_chars)]
        # [int(next(i_text)) ... ] for your literal output, but since you're
        # encrypting as a string it seems more consistent to DECRYPT to a string

    return [word(iter_text, int(ch)) for ch in iter_text]
"
Python - Convert a key-value string to a dictionary,">>> inputstring = 'A=Astring,B=Bstring,C=Cstring'
>>> dict(entry.split('=') for entry in inputstring.split(','))
{'A': 'Astring', 'C': 'Cstring', 'B': 'Bstring'}
"
Find 1 letter and 2 numbers using RegEx,"found = re.search(pattern, filenames[0])
"
How can i extract metdata from django models,"def get_model_metadata(model_class, meta_whitelist=[]):
  field_list = model_class._meta.fields
  return_data = {}
  for field in field_list:
    field_name = field.name
    field_meta = field.__dict__
    return_meta = {}
    for meta_name in field_meta:
      if meta_name in meta_whitelist:
        return_meta[meta_name] = field_meta[meta_name]
    if len(return_meta) > 0:
      return_data[field_name] = return_meta
  return return_data
"
pytest: parameterized test with cartesian product of arguments,"import pytest

numbers = [1,2,3,4,5]
vowels = ['a','e','i','o','u']
consonants = ['x','y','z']


@pytest.fixture(params=numbers)
def number(request):
    return request.param

@pytest.fixture(params=vowels)
def vowel(request):
    return request.param

@pytest.fixture(params=consonants)
def consonant(request):
    return request.param


def test(number, vowel, consonant):
    pass
"
Evaluate integral from sympy as lambda function,">>> import numpy as np
>>> f = lambdify(x, integrate(x**2+2,x), ""numpy"")
>>> f(np.arange(10))
array([   0.        ,    2.33333333,    6.66666667,   15.        ,
         29.33333333,   51.66666667,   84.        ,  128.33333333,
        186.66666667,  261.        ])
"
Python: Selenium send_key not working,"from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


driver = webdriver.Firefox()
driver.get(""https://semantria.com/demo"")

item = driver.find_element_by_css_selector(""form#analyze_url_form input[name=link]"")
item.send_keys(""http://finance.yahoo.com/news/skystar-bio-pharmaceutical-company-provides-133000048.html"" + ""\n"")

wait = WebDriverWait(driver, 30)

sentiment_value = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ""strong.sentiment_score_value"")))
print(sentiment_value.text)
"
Python: Finding symmetries in list of lists,"sym = [x for x in list if x not in no_sym and not no_sym.append(switch(i))]
"
Get information out of sub-lists in main list elegantly,"from collections import defaultdict
nums = defaultdict(list)
for arr in a:
    key = tuple(arr[:2]) # make the first two floats the key
    nums[key].append( arr[2] ) # append the third float for the given key

a_processed = [[k[0], k[1], sum(vals)/len(vals)] for k, vals in nums.items()]
"
Converting a List within a List from String to Integers,"def cond1_c():
    with open(""condition1.txt"",""r"") as f:
        c1resplist = [[int(x) for x in line.split()] for line in f]
    return c1resplist, len(c1resplist)
print cond1_c()
# ([[1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3]], 10)
"
In Python how can I print the rows in my text file in a random order?,"import random
with open('filename.txt', 'r') as fin:
    lines = list(fin)

random.shuffle(lines)
for line in lines:
    print line,  # the trailing comma suppresses the newline since the line already has that.
"
Converting Images with Python,"def convert(image):
    f = open(image,""rb"")
    data = f.read()
    f.close()
    string = base64.b64encode(data)
    convert = base64.b64decode(string)
    t = open(""Puppy2.jpg"", ""wb"")
    t.write(convert)
    t.close()
"
logit and inverse logit functions for extreme values,"from bigfloat import *
def logit(p):
    with precision(100000):
        return log(p)- log(1 -BigFloat(p))

def inv_logit(p):
    with precision(100000):
        return exp(p) / (1 + exp(p))

int(round(logit(inv_logit(12422.0))))
# gives 12422
int(round(logit(inv_logit(-12422.0))))
# gives -12422
"
Python: Not finding value in list that should be there,"KFCFzip = [[93201,93399], [93529,93535], [93601,93899], [95301,95399]]

for line in text:
    array= line.strip().split("","")
    zip = int(array[6][0:5]))
    print(zip)
    found = False
    for r in KFCFzip:
        if zip >= r[0] and zip < r[1]:
            found = True
            break
    if found:
        print(""yes"")
"
Convert DataFrame column type from string to datetime,"In [12]: pd.to_datetime(pd.Series(['05/23/2005']), format=""%m/%d/%Y"")
Out[12]:
0   2005-05-23
dtype: datetime64[ns]
"
How should I remove all dicts from a list that have None as one of their values?,">>> filter(lambda d: None not in d.values(), ToD)
({'age': 'x', 'name': 'Blah1'}, {'age': 'y', 'name': 'Blah2'})
"
Python equivalent syntax for verbatim string literal in C#,"from textwrap import dedent

s = dedent(""""""\
           Hello {0}
           Hello1 {0}"""""")
file_handle.write(s.format(""world""))
"
Pyside - Select all text when QLineEdit gets focus,"import sys
from PySide.QtGui import QLineEdit, QApplication, QVBoxLayout, QWidget
class MyLineEdit(QLineEdit):
    def __init__(self, parent=None):
        super(MyLineEdit, self).__init__(parent)

    def mousePressEvent(self, e):
        self.selectAll()      

app = QApplication(sys.argv)
top = QWidget()
layout = QVBoxLayout()
layout.addWidget(MyLineEdit())
layout.addWidget(MyLineEdit())
top.setLayout(layout)
top.show()
app.exec_()
"
How to add progressbar in python,"niter = 10000

prog = ProgressReporter(niter)

for i in range(niter):
    doSomeWork()
    prog.update()
prog.finish()
"
File Inout Output multiple delimiters,"g = ""ENGL 1301,preprofessional,MATH 2413,""
commas = g.count("","")  # I put this up here so it isn't called multiple times
if commas == 2:
    print ""yay""
elif commas == 3:  # I used `elif` here since `commas` cannot equal 2 and 3
    print ""nay""
"
"PageRank python implementation, algorithm","
import numpy as np

def pagerank(M, d, v_quadratic_error):
    count = 0
    N = M.shape[1]
    while True:
        v = np.random.rand(N, 1)
        if (v != 0).all(): break
    v = v / np.linalg.norm(v)
    R = d * M + ((1 - d) / N * np.ones((N, N)))
    while True:
        last_v = v
        v = np.dot(R, v)
        count += 1
        print('iteration # {}: {}'.format(count, np.isfinite(v)))
        if np.linalg.norm(v - last_v, 2) <= v_quadratic_error: break
    return v

M = np.array(np.mat('0 0 0 0 1 ; 0.5 0 0 0 0 ; 0.5 0 0 0 0 ; 0 1 0.5 0 0 ; 0 0 0.5 1 0'))
print(pagerank(M, 0.80, 0.001))
"
How to access key in Python dictionary,"import itertools
lst = [{'a': 1}, {'b': 2}, {'c': 3}] 
print ', '.join(itertools.chain(*lst))
"
Downsize series containing boolean data with resample,"In [107]: ts.resample('5min', how=sum)
Out[107]: 
2011-01-01 00:00:00    2
2011-01-01 00:05:00    0
2011-01-01 00:10:00    1
2011-01-01 00:15:00    0
2011-01-01 00:20:00    1
Freq: 5T, dtype: float64
"
Python Pickle Load Takes Longer Each Iteration,"def get_time():
    return int(time.time())

while(count < 10):    
    filepath='/home/shared/word_out.gz'
    start = get_time()
    f = gzip.open( filepath, ""rb"" )
    pickleFile = cPickle.Unpickler( f )
    paData = pickleFile.load()
    f.close()
    end = get_time()

    print 'Time ellapsed' , end - start
    count+=1
"
indexing one array and doing operation on another,">>> a=[0,1,2,0,0,0,1,2,3,0,0,1,2]
>>> b=[1,2,1,2,3,1,4,5,1,5,6,7,8]
>>> indx=[i for i,j in enumerate(a) if j==0]+[len(a)]
>>> l= list(zip(a,b))
>>> [sum(v[1] for v in l[i:j]) for i,j in zip(indx,indx[1:])]
[4, 2, 3, 11, 5, 21]
"
Python: How to iterate lists of dictionaries Fast,"NA = object()  # Will compare different to everything in interesting_vals
result = [dictB[5] for dictB in listB if dictB.get(5, NA) in interesting_vals]
"
Plotting categorical data with pandas and matplotlib,df.groupby('colour').size().plot(kind='bar')
Find path of module without importing in Python,">>> import imp
>>> imp.find_module('sqlalchemy')
(None, '/usr/lib/pymodules/python2.6/sqlalchemy', ('', '', 5))
>>> imp.find_module('pip')
(None, '/usr/local/lib/python2.6/dist-packages/pip-0.7.1-py2.6.egg/pip', ('', '', 5))
>>> imp.find_module('threading')
(<open file '/usr/lib/python2.6/threading.py', mode 'U' at 0x7fb708573db0>, '/usr/lib/python2.6/threading.py', ('.py', 'U', 1))
"
Split string with delimiters in Python,">>> import re
>>> s = ""[greeting] Hello my friends [me] my name is John. [bow] nice to meet you.""
>>> re.findall(r'\[[\w\s.]+\]|[\w\s.]+', s)
['[greeting]', ' Hello my friends ', '[me]', ' my name is John. ', '[bow]', ' nice to meet you.']
"
How do I add custom field to Python log format string?,"import logging

class AppFilter(logging.Filter):
    def filter(self, record):
        record.app_name = 'Super App'
        return True

logger = logging.getLogger(__name__)
logger.addFilter(AppFilter())
syslog = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s %(app_name)s : %(message)s')
syslog.setFormatter(formatter)
logger.setLevel(logging.INFO)
logger.addHandler(syslog)

logger.info('The sky is so blue')
"
Modifying nested dictionaries,"empty = {'151': {'1': 'empty', '0': 'empty', '2': '2.30', '8': ['empty', 'empty', 5, {""foo2"": ""bar2"", ""1"": ""empty""}]}}
full = {'151': {'1': 3.4, '0': 3.6, '2': 2, '8': ['foo', 'bar', 'baz', {""foo3"": ""bar3"", ""1"": ""2""}]}}

def repl(a, b):
    if isinstance(a, dict) and isinstance(b, dict):
        clean = {}
        for k, v in a.items():
            # This is the case where we want to replace what we have in b if we have something.  Just in case, use the dict.get method and provide a default.
            if v == 'empty':
                clean[k] = b.get(k, 'Not there')
            # If the value is another dict, then call this function with the value, and put the return as the value for our current key
            elif isinstance(v, dict):
                v_clean = repl(v, b.get(k, {}))
                clean[k] = v_clean
            # The value isn't equal to 'empty', and it isn't another dict, so just keep the current value.
            elif isinstance(v, list):
                v_clean = repl(v, b.get(k, []))
                clean[k] = v_clean
            else:
                clean[k] = v
        # Finally, return the cleaned up dictionary.
    elif isinstance(a, list) and isinstance(b, list):
        clean = []
        for item_a, item_b in zip(a, b):
            if item_a == 'empty':
                clean.append(item_b)
            elif isinstance(item_a, dict):
                clean_a = repl(item_a, item_b)
                clean.append(clean_a)
            else:
                clean.append(item_a)
    return clean

print repl(empty, full)
"
Help with speeding up dictionary sort loop in Python?,"sorted_B = [list(value) for key, value in 
                groupby(sorted(B_dict.values()), key=itemgetter(2,3))]
"
Delete a dictionary item if the key exists,"try:
    del mydict[key]
except KeyError:
    pass
try:
    del mydict[key]
except KeyError:
    pass"
How to convert a array of dimension 3 * 200 * 120 into a 1*600 *120 in python?,"import numpy as np
a = [ np.array([[2,3,4,5,6,10]]), np.array([[7,3,9,1,2,3]]), np.array([[3,7,34,345,22,1]]) ]
np.vstack(a)
# array([[  2,   3,   4,   5,   6,  10],
#        [  7,   3,   9,   1,   2,   3],
#        [  3,   7,  34, 345,  22,   1]])
"
Can one modify the default repr behavior through a metaclass?,"class Meta(type):
    def __new__(cls, clsname, clsbase, clsdict):
        newcls = super().__new__(cls, clsname, clsbase, clsdict)
        def custom_repr(self):
            return '{}, Custom __repr__'.format(clsname)
        newcls.__repr__ = custom_repr
        return newcls

class Foo(metaclass=Meta):
    pass
"
"Removing a selection from a listbox, as well as remove it from the list that provides it","from tkinter import *
things = [{""dictionaryItem"":""value""}, {""anotherDict"":""itsValue""}, 3, ""foo"", [""bar"", ""baz""]]
root = Tk()
f = Frame(root).pack()
l = Listbox(root)
b = Button(root, text = ""delete selection"", command = lambda: delete(l))
b.pack()
l.pack()

for i in range(5):
    l.insert(END, things[i])

def delete(listbox):

    global things
    # Delete from Listbox
    selection = l.curselection()
    l.delete(selection[0])
    # Delete from list that provided it
    value = eval(l.get(selection[0]))
    ind = things.index(value)
    del(things[ind])
    print(things)

root.mainloop()
"
A way to convert numbers to seconds,"from datetime import datetime, date, time
a = datetime.combine(date.today(), time(0, 6, 58))
b = datetime.combine(date.today(), time(0, 7, 12))
"
Suffix if statement,"def suffixed_names (side, suffix)
    joint_names = [""_Clavicle_"", ""_UpperArm_"", ""_UnderArm_"", ""_Wrist_""]
    return  [side.upper() + jn + str(suffix) for jn in joint_names]
"
Reason for the difference between arg and atan2,"import numpy as np
import matplotlib as plt

xv = np.array(np.linspace(-10,10,200), dtype=np.complex)
plt.plot(xv, np.angle(np.cos(xv)))
"
"How do you control how an object is ""seen"" by other functions when passed as an argument?","class Vector(object):
    # rest of the class

    def __getitem__(self, index):
        return (self.x, self.y)[index]
"
columnize with ljust in python,"text = [ 'a', 'abcdef', 'abc' ]

longest = max( len(x) for x in text )

for x in text:
   print ""| %*s |"" % (longest, x)

print 

for x in text:
   print ""| %*s |"" % (-longest, x)
"
Python: How to measure time spent waiting for I/O?,"import time                                                

def measure_time(f):

  def timed(*args, **kw):
    ts = time.time()
    result = f(*args, **kw)
    te = time.time()

    print '%r (%r, %r) %2.2f sec' % \
          (f.__name__, args, kw, te-ts)
    return result

return timed
"
YAML parsing to Objects (PyYAML Python3),"import yaml

yaml_str = """"""\
!!python/object:try.Settings
annual_volatility_target: 0.25
""""""

class Settings:
    def __init__(self, annual_volatility_target):
        self.__setstate__({annual_volatility_target: annual_volatility_target})

    def __setstate__(self, kw):
        self.annual_volatility_target = kw.get('annual_volatility_target')
        self.daily = self.annual_volatility_target/np.sqrt(252)

    def __repr__(self):
        return ""Setting({}, {})"".format(self.annual_volatility_target, self.daily)

settings = yaml.load(yaml_str)

print(settings)
"
Python regex expression and return an array,"import re

str = 'ABCDX PPP [ATT:A01AD05 B01AC06 N02BA01]'
matched = re.search('([\S\s]+?)\s\[.*?(ATT:[^\]]+)', str)
if matched:
    first = matched.group(1)
    result = matched.group(2).split(' ')
    result[0:0] = [first]
    print result
"
"In Python, how do I get a list of all partitions in Mac OS X?","import subprocess

process = subprocess.Popen(['df -h | awk \'{print $(NF-1),$NF}\''], stdout=subprocess.PIPE, shell=True)
out, err = process.communicate()
out = out.splitlines()[1:] # grab all the lines except the header line
results = {}
for i in out:
    tmp = i.split(' ')
    results[tmp[1]] = tmp[0]

for key, value in results.items():
    print key + "" is "" + str(value) +"" full""
"
Why are changes to a list made in a sub-process not showing up in the parent process?,"import subprocess
import select
import multiprocessing
import time


def log_file_reader(filename, counter):
    f = subprocess.Popen(['tail', '-F',filename], stdout=subprocess.PIPE,stderr=subprocess.PIPE)
    p = select.poll()
    p.register(f.stdout)
    while True:
        if p.poll(1):
            line = f.stdout.readline().strip()
            if line:
                '''appends 1 to counter if line is valid'''
                with counter.get_lock():
                    counter.value += 1


def main():
    m = multiprocessing.Manager()
    counter = multiprocessing.Value('i', 0) # A process-safe int, initialized to 0
    # starts up a process keep tailing file
    reader_process = multiprocessing.Process(target=log_file_reader, args=(""/home/haifzhan/logfile.log"", counter))
    reader_process.start()

    # main thread check the counter every 5 seconds
    while True:
        time.sleep(5)
        with counter.get_lock():
            print ""periodically check---counter:{0},id:{1}"".format(counter.value, id(counter))
"
How do I parse XML with attribute in python?,"import xml.etree.ElementTree as ET
tree = ET.parse('D:/test.xml')
root = tree.getroot()

def get_info(food_id):
    for child in root.findall(""*[@id='{0}']//"".format(food_id)):
        print(child.text)

get_info(1)
"
Python string replace two things at once?,"""""""obama"""""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')"
Get battery status using wmi in python?,"from win32com.client import GetObject

WMI = GetObject('winmgmts:')
for battery in WMI.InstancesOf('Win32_Battery'):
    print(battery.EstimatedChargeRemaining)
"
How to handle empty sequence with theano.scan()?,"import theano
import theano.tensor as tt
import theano.ifelse


def step(x_t, s_tm1):
    return s_tm1 + x_t


def compile():
    K = tt.lscalar()
    t = tt.arange(1, K)
    zero = tt.constant(0, dtype='int64')
    outputs, _ = theano.scan(step, sequences=[t], outputs_info=[zero])
    output = theano.ifelse.ifelse(tt.gt(K, 1), outputs[-1], zero)
    return theano.function([K], outputs=[output])


def main():
    f = compile()
    print f(3)
    print f(2)
    print f(1)
    print f(0)
    print f(-1)


main()
"
Get everything between two spaces including a word stem,">>> s = '[download] /tmp/743979_file.mp4 has already been downloaded'
>>> m = s.split()[1]
>>> if '_file' in m:
        print(m)


/tmp/743979_file.mp4
"
Equivalent of count list function in numpy array,"from scipy.spatial.distance import cdist
count = (cdist(listScore,np.atleast_2d([2,0]))==0).sum()
"
Unable to set the value of a SelectControl element,"import mechanize
br = mechanize.Browser()
br.open(""http://www.planibus.sto.ca/HastinfoWeb/StartTimetableForm.aspx"")
br.select_form(name=""TimetableQueryForm"")
select = br.form.controls[8] # DatePicker$DaysDropDownList
select.possible_items()
>>> []
"
Infinite input using argparse,"import argparse
the_parser = argparse.ArgumentParser()
the_parser.add_argument('--input_files',nargs='+')
args = the_parser.parse_args()
"
Python - set list range to a specific value,"lower, upper = bounds
upper += 1
my_list[lower:upper] = ['foo'] * (upper - lower)
"
Pandas: extract and select data from columns using a pattern,"import pandas as pd
df = pd.DataFrame(['present absent absent present'.split(),
                   'absent present present absent'.split()],
                  columns='elem_1_pre elem_1_post elem_2_pre elem_2_post'.split(),
                  index='Observation1 Observation2'.split(),)
df = pd.DataFrame(df.values == 'present',
                  columns=df.columns,
                  index=df.index)
print(df)
#              elem_1_pre elem_1_post elem_2_pre elem_2_post
# Observation1       True       False      False        True
# Observation2      False        True       True       False

for i in range(1,3):
    elem = ['elem_{i}_{s}'.format(i=i, s=suf) for suf in ('pre', 'post')]
    change = 'elem_{i}_change'.format(i=i)
    df[change] = df[elem[0]] ^ df[elem[1]]
print(df.ix[:, 'elem_1_change elem_2_change'.split()])
"
Associating units with Pandas DataFrame,"import pandas as pd
from StringIO import StringIO

x = '''
longitude,latitude
degrees_east,degrees_north
-142.842,-1.82
-25.389,39.87
-37.704,27.114
'''

content = StringIO(x.strip())

def read_csv(content):
    columns = next(content).strip().split(',')
    units = next(content).strip().split(',')
    obs = pd.read_table(content, sep="",\s*"", header=None)
    obs.columns = ['{c} ({u})'.format(c=col, u=unit)
                   for col, unit in zip(columns, units)]
    return obs

obs = read_csv(content)
print(obs)
#    longitude (degrees_east)  latitude (degrees_north)
# 0                  -142.842                    -1.820
# 1                   -25.389                    39.870
# 2                   -37.704                    27.114
print(obs.dtypes)
# longitude (degrees_east)    float64
# latitude (degrees_north)    float64
"
optimize python key-searching in hierarchichal dictionary,"@property
def ngenes(self):
    return len(self.genes)
"
Want to count the number of values in a column that meet a condition,"np.where(fs >= 0.75)[0].size
"
Counting occurences of words that appear in a list using Python,"with open(""dictionary.txt"",""r"") as f:
    for line in f:
        print ""Count "" + line + str((a_master).count(line.strip())) 
"
Split a string and add into `tuple`,"s = ""012345""
[s[i:i + 2] for i in range(0, len(s), 2)]
"
"NumPy: Iterating over items to right, bottom of given element w/ its index","enum_upperdiag = lambda mat: (((j,c),(r,k)) for n in [len(mat)-1] 
                                 for r in range(n) for c in range(n-r) 
                                 for j in range(r+1,n) for k in range(c+1,n-j+1))
"
Sorting a defaultdict by value in python,"sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"
Vectorize this function in Numpy Python,"new_y = np.zeros((a.shape[0], a.max()+1))
new_y[np.indices(a.ravel().shape)[0], a.ravel()] = 1.
"
Python list iterator behavior and next(iterator),">>> a = iter(list(range(10)))
>>> for i in a:
...    print('Printing: {}'.format(i))
...    next(a)
... 
Printing: 0
1
Printing: 2
3
Printing: 4
5
Printing: 6
7
Printing: 8
9
"
How to compare 2 list where string matches element in alternate list,"from collections import OrderedDict
def EntryToFieldMatch(Entry, Fields):
    valid = []
    # create orderedDict from the words in Fields
    # dict lookups are 0(1)
    st = OrderedDict.fromkeys(Fields)
    # iterate over Entry
    for word in Entry:
        # split the words once on whitespace
        spl = word.split(None, 1)
        # if the first word/word appears in our dict keys
        if spl[0] in st:
            # add to valid list
            valid.append(word)
            # remove the key
            del st[spl[0]]
    print valid
    print ""-""*50
    # only invalid words will be left
    print st.keys()
"
simulate time python,"import datetime

past_time =  datetime.datetime.utcnow()
present_time =  datetime.datetime.utcnow()
for i in range(10):
    while((present_time - past_time).seconds < 1):
        present_time = datetime.datetime.utcnow()
    my_fct(......)
    past_time = present_time
"
"How to format in numpy savetxt such that zeros are saved only as ""0""","def savetxt_compact(fname, x, fmt=""%.6g"", delimiter=','):
    with open(fname, 'w') as fh:
        for row in x:
            line = delimiter.join(""0"" if value == 0 else fmt % value for value in row)
            fh.write(line + '\n')
"
Python: Print next x lines from text file when hitting string,"from itertools import islice

with open('/tmp/results_nslookup.txt', 'r') as f:
    for line in f:
        if line == 'Non-authoritative answer:\n':
            print ''.join(islice(f, 8))
"
Time-efficient combination of numpy functions,"import numpy as np
import numexpr as ne

def func1(A, B):
    A = A ** 3
    A = np.maximum(A, 0.001)
    return np.divide(B, A)

def func2(A, B):
    return ne.evaluate(""B / where(A**3 > 0.001, A**3, 0.001)"",
                       local_dict={'A':A,'B':B})

A, B = np.random.randn(2, 1000, 1000, 3)

print(np.allclose(func1(A, B), func2(A, B)))
# True
"
Matplotlib fill_between() workaround,"xdata = ...
ydata = ...
xleft, xright = 13.3979400087, 13.414973348
xfill = np.linspace(xleft, xright)
yfill = np.interp(xfill, xdata, ydata)
plt.fill_between(xfill, 0, yfill, color='r')
"
Why isn't my solution to Project Euler 9 working?,"[[a,b, sqrt(a**2 + b**2)] for a,b in combinations(range(1,1000),2) if 1000000-2000*a-2000*b+2*a*b==0]
"
Interleaving Lists in Python,"from itertools import chain, izip
list(chain.from_iterable(izip(list_a, list_b)))
"
Python scripting strategies: running script twice vs excec,"def buildCommandList(other parameters...):
    commandList = []
    generate_diff(commandList.append, other parameters...)
    return commandList
"
"Python builtin functions aren't really functions, right?","class MyDictSubclass(dict):
    pass
"
all permutation/combination to fill slots with a dataframe,"from itertools import chain
combs_generator = chain(*(product('ABCD', repeat=k) for k in range(1,6)))
combs = pd.DataFrame(list(combs_generator))

       0     1     2     3 

4
0     A  None  None  None  None
1     B  None  None  None  None
2     C  None  None  None  None
3     D  None  None  None  None
4     A     A  None  None  None
5     A     B  None  None  None
6     A     C  None  None  None
7     A     D  None  None  None
8     B     A  None  None  None
9     B     B  None  None  None
10    B     C  None  None  None
11    B     D  None  None  None
12    C     A  None  None  None
13    C     B  None  None  None
14    C     C  None  None  None
15    C     D  None  None  None
"
Python sql query insert data in columns,"sql = 'INSERT INTO table_name ({fields}) VALUES ({values})'
fields = ', '.join(query_data.keys())
values = ', '.join(['""{0}""'.format(value) for value in query_data.values()])
composed_sql = sql.format(fields=fields, values=values)
"
Python - regex to match url with mongo object id,">>> re.findall(r'\/api\/v1\/users\/([a-f\d]{24})\/submissions','/api/v1/users/556b352f87d4693546d31185/submissions')
['556b352f87d4693546d31185']
"
Ordered dictionary output in python,"dictionary = {'key1': ['value1', 'value2', 'value3'], 'key2': ['value1', 'value2']}

for key, values in sorted(dictionary.items()):
   for value in values:
       print '{} {}'.format(key, value)
"
Python class inheritance: dynamic attribute creation,"class Parent:

    PATH_PROPERTIES = 'parent'

    def __init__(self, path):
        self.props = { self.PATH_PROPERTIES: path }

    @property
    def path(self):
        return self.props[self.PATH_PROPERTIES]


class Child(Parent):

    PATH_PROPERTIES = 'child'         

c = Child('path')
print(c.path)
"
How to disregard the NaN data point in numpy array and generate the normalized data in Python?,"import numpy as np

a = np.random.rand(10)            # Generate random data.
a = np.where(a > 0.8, np.nan, a)  # Set all data larger than 0.8 to NaN

a = np.ma.array(a, mask=np.isnan(a)) # Use a mask to mark the NaNs

a_norm  = a / np.sum(a) # The sum function ignores the masked values.
a_norm2 = a / np.std(a) # The std function ignores the masked values.
"
"Inherit from a built-in class, can't change args of __init__","class Foo(date):
    def __new__(cls, year, month=1, day=1):
        return super(Foo, cls).__new__(cls, year, month, day)
"
Comparing two dataframe (python pandas) by datetime intervals,"df2 = df2.stack().reset_index(level=1)
df2 = df2.drop('level_1', axis=1)
df2.columns = ['Failuredate']
print df2
          Failuredate
0 2015-12-22 03:31:00
0 2015-12-22 03:33:00

#resample and fill missing data 
df2 = df2.groupby(df2.index).apply(lambda x: x.set_index('Failuredate').
                      resample('1min', how='first',fill_method='ffill')).reset_index(level=1)
print df2
          Failuredate
0 2015-12-22 03:31:00
0 2015-12-22 03:32:00
0 2015-12-22 03:33:00
"
Plural String Formatting,"class PluralDict(dict):
    def __missing__(self, key):
        if '(' in key and key.endswith(')'):
            key, rest = key.split('(', 1)
            value = super().__getitem__(key)
            suffix = rest.rstrip(')').split(',')
            if len(suffix) == 1:
                suffix.insert(0, '')
            return suffix[0] if value <= 1 else suffix[1]
        raise KeyError(key)

data = PluralDict({'tree': 1, 'bush': 2, 'flower': 3, 'cactus': 0})
fmt = ""{tree} tree{tree(s)}, {bush} bush{bush(es)}, {flower} flower{flower(s)}, {cactus} cact{cactus(i,us)}""
print(fmt.format_map(data))
"
choose a list by string python,"dct = {""a"": [],
    ...
    ""d"": []}
"
Convert pango markup string to GtkTextTag properties,"def parse_markup_string(string):
    '''
    Parses the string and returns a MarkupProps instance
    '''
    #The 'value' of an attribute...for some reason the same attribute is called several different things...
    attr_values = ('value', 'ink_rect', 'logical_rect', 'desc', 'color')

    #Get the AttributeList and text
    attr_list, text, accel = pango.parse_markup( string )
    attr_iter = attr_list.get_iterator()

    #Create the converter
    props = MarkupProps()
    props.text = text

    val = True
    while val:
            attrs = attr_iter.get_attrs()

            for attr in attrs:
                    name = attr.type
                    start = attr.start_index
                    end = attr.end_index
                    name = pango.AttrType(name).value_nick

                    value = None
                    #Figure out which 'value' attribute to use...there's only one per pango.Attribute
                    for attr_value in attr_values:
                            if hasattr( attr, attr_value ):
                                    value = getattr( attr, attr_value )
                                    break

                    #There are some irregularities...'font_desc' of the pango.Attribute
                    #should be mapped to the 'font' property of a GtkTextTag
                    if name == 'font_desc':
                            name = 'font'
                    props.add( name, value, start, end )

            val = attr_iter.next()

    return props
"
How to print current loop number in an iteration over a dictionary in Python?,"print '\n'.join('{}. {}'.format(i, d[k]) for (i,k) in enumerate(sorted(d, key=d.get), 1))
1. apple
2. cat
3. dog
"
Getting word count from a python list,">>> My_list = [""white is a colour"", ""orange is a fruit"", ""blue is a mood"", ""I like candy""]
>>> [word for line in My_list for word in line.split()]
['white', 'is', 'a', 'colour', 'orange', 'is', 'a', 'fruit', 'blue', 'is', 'a', 'mood', 'I', 'like', 'candy']
>>> sum(len(line.split()) for line in My_list)
15
"
if statement vs. expression,">>> from itertools import cycle
>>> x_values = cycle((1, 'spam', 3.14))
>>> next(x_values)
1
>>> next(x_values)
'spam'
>>> next(x_values)
3.14
>>> next(x_values)
1
"
Python - categorizing items in a list based on occurrence in a dictionary of lists,"items = set(items)
fruits = set(foods_dict['fruit']) & items
veggies = set(foods_dict['veg']) & items
others = items - fruits - veggies
"
Permute rows and columns of a matrix,"b = b[::-1] # invert the row order

print(repr(b))
# array([[1, 1, 1, 0, 0],
#        [1, 0, 1, 0, 0],
#        [1, 1, 0, 1, 1],
#        [0, 0, 1, 0, 1],
#        [0, 0, 1, 1, 1]])
"
is there a way to get the index for multiple lists python?,"for x in a:
    for y in b:
        print(x + "" "" + y)
"
How to get Case Insensitive Python SET,">>> l = ['#Trending', '#Trending', '#TrendinG', '#Yax', '#YAX', '#Yax']
>>> {v.lower(): v for v in l}.values()
['#TrendinG', '#Yax']
>>> {v.lower() for v in l}
set(['#trending', '#yax'])
"
Python - Fastest way to check if a string contains specific characters in any of the items in a list,">>> def jamie(lelist, lestring):
    return next(itertools.chain((e for e in lelist if e in lestring), (None,))) is not None

>>> t_jamie = timeit.Timer(""jamie(lelist, lestring)"", setup=""from __main__ import lelist, lestring, jamie"")
>>> t_jamie.timeit(100000)
0.22237164127909637
"
How can I calculate the variance of a list in python?,"import numpy as np
results=[-14.82381293, -0.29423447, -13.56067979, -1.6288903, -0.31632439,
          0.53459687, -1.34069996, -1.61042692, -4.03220519, -0.24332097]

print np.var(results)
"
Check if a directory exists in a zip file with Python,"any(x.startswith(""%s/"" % name.rstrip(""/"")) for x in z.namelist())
"
Python - Pygame random obstacle height issues,"Pipe1 = Pipe(scrollx)

if Pipe1.drawn == True:
    Pipe1.update()
else:
    Pipe1 = Pipe(scrollx)
    Pipe1.draw(screen)
"
Python regex: Reject one two-digit number and accept other two-digit numbers,"reobj = re.compile(r""""""
    # Match a word that is not: 'BAD'
    \b         # Anchor to start of word.
    (?!BAD\b)  # Verify that this word is not 'BAD'
    \w+        # Ok. Safe to match non-BAD word.
    \b         # Anchor to end of word.
    """""", re.VERBOSE)
"
Applying Operation to Pandas column if other column meets criteria,"df.loc[df['float_col'] > 5, 'int_col'] = df['int_col'] * 2
"
What's the cleanest (most Pythonic) way of creating a dictionary with list values from a sequence?,"dict_stuff = {}
for key, value in stuff:
    dict_stuff.setdefault(key, []).append(value)
"
"My Maxent Classifier works fine with gis algorithm but does not work with iis algorithm. It is not throwing any error, just some warnings","from itertools import chain
from collections import defaultdict

import nltk
from nltk.classify import MaxentClassifier, accuracy
from nltk.corpus import movie_reviews

def bag_of_words(words):
    """"""
    Change a document into a BOW feature vector represented by a dict object.
    """"""
    return dict([(word, True) for word in words])


def label_feats_from_corpus(corp, feature_detector=bag_of_words):
    """"""
    Change the corpus into a feature matrix. Sometimes the proceess is 
    known as vectorization. The default is the use BOW features.
    """"""
    label_feats = defaultdict(list)
    for label in corp.categories():
        for fileid in corp.fileids(categories=[label]):
            feats = feature_detector(corp.words(fileids=[fileid]))
            label_feats[label].append(feats)
    return label_feats


def split_label_feats(lfeats, split=0.75):
    """"""
    Splits corpus into train and test portion.
    This module is used after using `label_feats_from_corpus`.
    """"""
    train_feats = []
    test_feats = []
    for label, feats in lfeats.iteritems():
        cutoff = int(len(feats) * split)
        train_feats.extend([(feat, label) for feat in feats[:cutoff]])
        test_feats.extend([(feat, label) for feat in feats[cutoff:]])
    return train_feats, test_feats


# Extract features from corpus and for each document label it with the appropriate labels. 
label_feats = label_feats_from_corpus(movie_reviews)
'''
for label in label_feats:
    for document in label_feats[label]: 
        print label, document
        break
    break
'''

# Let's split the data up into train and test.
train_documents, test_documents = split_label_feats(label_feats) 
'''
# Now we see that the `split_label_feats` change the key value structure such that each iteration of train_feats gives us a document with a tuple of the (features, label)
for features, label in train_documents:
    print label, features
    break

print len(train_documents)
print len(test_documents)
# Get the number of documents in movie_review corpus
num_docs_in_corpus = len(list(chain(*[movie_reviews.fileids(categories=[cat]) for cat in movie_reviews.categories()])))
print len(train_documents) + len(test_documents) == num_docs_in_corpus
'''

# To train the tagger.
me_classifier = nltk.MaxentClassifier.train(train_documents, algorithm='iis', trace=0, max_iter=3)
print accuracy(me_classifier, test_feats)
"
pandas save date in ISO format?,"In [72]:

NumberOfSamples = 10
import datetime as dt
dates = pd.date_range('20130101',periods=NumberOfSamples,freq='90S')
df3 = pd.DataFrame(index=dates)
df3.index = df3.index.map(lambda x: dt.datetime.strftime(x, '%Y-%m-%dT%H:%M:%SZ'))
df3
Out[72]:
Empty DataFrame
Columns: []
Index: [2013-01-01T00:00:00Z, 2013-01-01T00:01:30Z, 2013-01-01T00:03:00Z, 2013-01-01T00:04:30Z, 2013-01-01T00:06:00Z, 2013-01-01T00:07:30Z, 2013-01-01T00:09:00Z, 2013-01-01T00:10:30Z, 2013-01-01T00:12:00Z, 2013-01-01T00:13:30Z]
"
Appending Quotations in Text File to Each line,"with open('file') as f:
  file_date = f.read()
updated_file_data = ""sometext\n"".join(map(""'{0}'"".format, file_date.split('\n')))
"
Remove items from list by using python list comprehensions,"[x for i, x in enumerate(unculledlist) if (i % 6) % 2 == 0 if (i % 5) % 2 == 0]
"
"Python equivalent to ""find -type f""","import os
import os.path

for root, dirs, files in os.walk('/path/to/directory'):
    for f in files:
        fname = os.path.join(root, f)
        if os.path.isfile(fname):
            print fname  # or do something else with it...
"
BeautifulSoup4 table,">>> import re
...
>>> soup.find(text=re.compile(r""\.doc$""))
u'filename.doc'
>>> soup.find(""td"", text=re.compile(r""\.doc$"")).get_text()
u'filename.doc'
>>> soup.find(text=lambda text: text and text.endswith(""doc""))
u'filename.doc'
>>> soup.find(""td"", text=lambda text: text and text.endswith(""doc"")).get_text()
u'filename.doc'
"
Check if set of elements in pandas index,"In [132]:

l=[1,2,7]
df = pd.DataFrame({'a':[0,1,2,3,4]})
df.index.intersection(l)
Out[132]:
Int64Index([1, 2], dtype='int64')
"
Python argparse helper section,"import argparse

def print_names():
    outstr = ""usage: scriptname -l 'First Name' 'Second Name' ""
    outstr += ""Some message for this argument ""
    print(outstr)

 parser = argparse.ArgumentParser()
 parser.add_argument('-l', help=print_names(), nargs=2)
 args = vars(parser.parse_args())
"
Count number of values in python,">>> lis = [0, 0, 0, 0, 0, 120, 120, 120, 120, 120, 240, 240, 240, 240, 240, 0, 0, 0, 0, 0, 120, 120, 120, 120, 120]
>>> lis[14:].count(0)
5
>>> lis[14:17].count(0)
2
"
"Epoch time is one hour out from UTC, should be UTC+1",">>> import time, calendar
>>> sample = '2014-04-11 10:13:36'
>>> int(time.mktime(time.strptime(sample, pattern)))
1397207616
>>> int(calendar.timegm(time.strptime(sample, pattern)))
1397211216
"
extracting specific data from a text file in python,"processes = []

with open(""file.txt"", ""r"") as f:
    lines = f.readlines()

    # Loop through all lines, ignoring header.
    # Add last element to list (i.e. the process name)
    for l in lines[1:]:
        processes.append(l.split()[-1])

print processes
"
How to extract the price from html using regex in python,"<span [^>]*>(\d+)\D(\d+)\D[^<]*
"
Python Find all letter chars in string and surround with text,"import re

s = ""m * x + b""
print re.sub(""([a-wyzA-Z])"", r""var['\1']"", s)
"
Python time format with three-digit hour,"hours = int(time_string.split("":"")[0]) * 3600
mins  = int(time_string.split("":"")[1]) * 60
secs  = int(time_string.split("":"")[2])

return hours + mins + secs
"
"""While not in"" error - python","while not any(guess in PH for guess in [guess1, guess2, guess3, guess4]):
"
Counting permuations in Python,"import operator
from collections import Counter
from math import factorial
def npermutations(l):
    num = factorial(len(l))
    mults = Counter(l).values()
    den = reduce(operator.mul, (factorial(v) for v in mults), 1)
    return num / den
"
Return a Boolean instead of a string containing True or False in Python,"def weekend(day):
    return day == 'Saturday' or day == 'Sunday'
"
"Keep last word on each line of text file, delete rest","import sys
with open(sys.argv[1]) as f, open('out.txt', 'w') as out:
     for line in f:
         out.write(line.split()[-1]+'\n')
"
Python: Remove 0s from floats in string,"repl=lambda x: x.group(1) + (x.group(2).rstrip('0').rstrip('.'))
re.sub('(?<!\d)(\d+)(\.\d*)(?!\d)',repl,string)
"
removing pairs of elements from numpy arrays that are NaN (or another value) in Python,">>> a[~(a == 5).any(1)]
array([[  1.,  10.],
       [ NaN,   6.],
       [  6.,  NaN]])
"
Removing first appearance of word from a string?,">>>import re
>>>re.sub(""Description: "","""",mystring,count=1)
'Mary had a little lamb Description: '
"
Generate date ranges broken by month for a given period,"from datetime import datetime, timedelta

def genDatePeriods(startDate, endDate, format='%Y-%m-%d'):
    curr = datetime.strptime(startDate, format).date()
    end = datetime.strptime(endDate, format).date()

    while curr <= end:
        # first day of the next month, using modular arithmetic
        next_month = curr.replace(
            month=curr.month % 12 + 1, year=curr.year + curr.month // 12,
            day=1)
        curr_formatted = curr.strftime(format)
        # end date is next month's first day, minus one day,
        # or the given endDate, whichever comes first
        end_formatted = min(next_month - timedelta(days=1), end).strftime(format)
        yield [curr_formatted, end_formatted]
        curr = next_month
"
How can I format a float using matplotlib's LaTeX formatter?,"ax.set_title('$%s \\times 10^{%s}$' % ('3.5', '+20'))"
What is the best way to create a python dictionary from a string?,"C:\>py -m timeit -s ""import x"" ""x.optionA(x.line)""
100000 loops, best of 3: 3.01 usec per loop

C:\>py -m timeit -s ""import x"" ""x.optionB(x.line)""
100000 loops, best of 3: 5.15 usec per loop

C:\>py -m timeit -s ""import x"" ""x.optionC(x.line)""
100000 loops, best of 3: 2.88 usec per loop
"
Change Python Class attribute dynamically,"class B(A):
   @classmethod
   def set_cls_attr(cls, xxx):   
       if xxx:
           cls.cls_attr = 'this_value'
       else
           cls.cls_attr = 'that_value'
"
Python - how to convert ctime to '%m/%d/%Y %H:%M:%S',"from datetime import datetime
import time
d = datetime.strptime(time.ctime(),""%a %b %d %H:%M:%S %Y"")

d.strftime('%m/%d/%Y %H:%M:%S')
Out[9]: '11/06/2013 19:01:11'
"
How to convert a python utc datetime to a local datetime using only python standard library?,"EPOCH_DATETIME = datetime.datetime(1970,1,1)
SECONDS_PER_DAY = 24*60*60

def utc_to_local_datetime( utc_datetime ):
    delta = utc_datetime - EPOCH_DATETIME
    utc_epoch = SECONDS_PER_DAY * delta.days + delta.seconds
    time_struct = time.localtime( utc_epoch )
    dt_args = time_struct[:6] + (delta.microseconds,)
    return datetime.datetime( *dt_args )
"
flask+ftplib basic application,"def fetchlines(line=None):
    if line is not None:
        # As long as we are called with a line
        # store the line in the array we added to this function
        fetchlines.lines.append(line)
    else:
        # When we are called without a line
        # we are retrieving the lines
        # Truncate the array after copying it
        # so we can re-use this function
        lines = fetchlines.lines[:]
        fetchlines.lines = []
        return lines

fetchlines.lines = []

@app.route(""/"")
def hello():
    ftp = FTP(""someaddress"")
    ftp.login()
    ftp.dir(fetchlines)
    lines = fetchlines()
    return ""<br>"".join(lines)
"
Save tuple of numpy arrays to disk?,"import csv
writer = csv.writer(open(""file.csv"",""w""))
for row in array:
     writer.writerow(str(row))
"
scipy.sparse dot extremely slow in Python,">>> X.T.dot(L.dot(X))
array([[  81.85399873,    3.75640482,    1.62443625, ...,    6.47522251,
           3.42719396,    2.78630873],
       [   3.75640482,  109.45428475,   -2.62737229, ...,   -0.31310651,
           2.87871548,    8.27537382],
       [   1.62443625,   -2.62737229,  101.58919604, ...,    3.95235372,
           1.080478  ,   -0.16478654],
       ..., 
       [   6.47522251,   -0.31310651,    3.95235372, ...,   95.72988689,
         -18.99209596,   17.31774553],
       [   3.42719396,    2.87871548,    1.080478  , ...,  -18.99209596,
         108.90045569,  -16.20312682],
       [   2.78630873,    8.27537382,   -0.16478654, ...,   17.31774553,
         -16.20312682,  105.37102461]])
"
How to index observable coordinates in an astropy Table,"magnitude_below_20 = x['Apparent Magnitude'] < 20
dec_above_m10 = x['Dec'] > -10*u.degree
# Get every row that satisfies both conditions:
x_from_comb_condition = x[magnitude_below_20 & dec_above_m10]
# or using the numpy-ufunc (gives the same result):
x_from_comb_condition = x[np.logical_and(magnitude_below_20, dec_above_m10)]
"
Pythonic way to eval all octal values in a string as integers,">>> re.sub(r'\b0+(?!\b)', '', '012+2+0-01+204-0')
'12+2+0-1+204-0'
"
Is there a more pythonic way of writing the following maximum-value function:,">>> def greatest_max_iter(values):
...     max_value = max(v for k, v in values)
...     return (k for k, v in values if v == max_value)
... 
"
How do i find the iloc of a row in pandas dataframe?,"In [131]:
dates = pd.date_range('1/1/2000', periods=8)
df = pd.DataFrame(np.random.randn(8, 4), index=dates, columns=['A', 'B', 'C', 'D'])
df

Out[131]:
                   A         B         C         D
2000-01-01  0.095234 -1.000863  0.899732 -1.742152
2000-01-02 -0.517544 -1.274137  1.734024 -1.369487
2000-01-03  0.134112  1.964386 -0.120282  0.573676
2000-01-04 -0.737499 -0.581444  0.528500 -0.737697
2000-01-05 -1.777800  0.795093  0.120681  0.524045
2000-01-06 -0.048432 -0.751365 -0.760417 -0.181658
2000-01-07 -0.570800  0.248608 -1.428998 -0.662014
2000-01-08 -0.147326  0.717392  3.138620  1.208639

In [133]:    
window_stop_row = df[df.index < '2000-01-04'].iloc[-1]
window_stop_row.name

Out[133]:
Timestamp('2000-01-03 00:00:00', offset='D')

In [134]:
df.index.get_loc(window_stop_row.name)

Out[134]:
2
"
How to add two Sparse Vectors in Spark using Python,"SparseVector.__add__ = add
v1 = Vectors.sparse(5, {0: 1.0, 2: 3.0})
v2 = Vectors.sparse(5, {0: -3.0, 2: -3.0, 4: 10})
v1 + v2
## SparseVector(5, {0: -2.0, 4: 10.0})
"
Python regex parsing and putting into a multidimensional list,">>> import re
>>> re.findall(r'\S+', ""defenders\t2\n"")
['defenders', '2']
"
Skip/pass over view function so the next can execute in Flask,"@app.route('/<slug>')
def feature(slug):
    if slug_in_database(slug):
        return ""feature: "" + slug
    return catch(slug)

@app.route('/<path:url>')
def catch(url):
    return ""catch: "" + url
"
Get attribute of all items in container python,"bb = B([A(i) for i in range(10)])
bb.b = 5
print(list(bb.a))
print(bb.b)
"
writing specific lines from one file to another file,"with open('letter.txt') as l, open('fixed.txt', 'w') as f:
    for lines in l:
        if not lines.startswith(""WOOF""):
            print(lines.strip(), file=f)
"
Python: Linklist deque addfront & addrear,"class DequeLL:

    def __init__(self):
        self.head = None
        self.last = None
        self.length = 0

    def __str__(self): # Refactored for clarity
        width = (max(len(node.data) for node in self.allNodes()) 
                    if self.head else 0) # width to avoid ambiguity with self.length
        s = ['\u2510{}\u250c'.format(' '*width)]
        for node in self.allNodes():
            s.append('\u2502{:<{}}\u2502'.format(node.data, width))
        s.append('\u2514{}\u2518'.format('\u2500'*width))
        return '\n'.join(s)

    def addFrontDLL(self, item):
        temp = Node(str(item))
        temp.setNext(self.head)
        self.head = temp
        if self.last is None: # if adding to an empty deque, set the last node, too
            self.last = temp
        self.length += 1
        print(self) # refactored the pretty-printing into __str__ for clarity

    def addRearDLL(self, item):
        node = Node(str(item))
        node.next = None
        if self.length == 0:
            self.head = self.last = node
        else:
            last = self.last
            last.next = node
            self.last = node
        self.length = self.length + 1 
        print(self)

    def allNodes(self):
        node = self.head
        while node is not None:
            yield node
            node = node.next
"
Is there a way to append the name of a function to a list automatically?,"import inspect
mylist = [v for v globals().itervalues() if inspect.isfunction(v) and v.__module__ == __name__]
"
Using regex to replace object within brackets in a text file,"ss = 'one [two [three] ] end of line'
print re.sub(r'\[.+?\]\s?','',ss)
"
How to capture all characters in binary string without python interpreting it,"for char in packet:
    print(""%5d %2s %2r"" % (ord(char), char, char))
"
How do I store account information in python so that it can be accessed later?,"In [4]: import json

In [5]: datastring = json.dumps(data)

In [6]: datastring
Out[6]: '{""amount"": 273, ""password"": ""94aefb8be78b2b7c344d11d1ba8a79ef087eceb19150881f69460b8772753263"", ""user"": ""a1ef7bf9b9098c49c8aa4e6e8b42b199762a55f85ec6ad215a76045088276fcc""}'

In [7]: json.loads(datastring)
Out[7]: {u'amount': 273, u'password': u'94aefb8be78b2b7c344d11d1ba8a79ef087eceb19150881f69460b8772753263', u'user': u'a1ef7bf9b9098c49c8aa4e6e8b42b199762a55f85ec6ad215a76045088276fcc'}
"
Why does Python modify the list which is out of the loop?,">>> current_trace = [[3,5,1,5,7,9,4]]
>>> sliding_tristep(current_trace)
...
>>> current_trace
[[3, 5, 1, 5, 7, 9, 4]]
"
Does Django Have a Way to Auto-Sort Model Fields?,"## This class is used to replicate QuerySet methods into a manager.
## This way:  Partyline.objects.for_user(foo) works the same as
## Partyline.objects.filter(date=today).for_user(foo)
class CustomQuerySetManager(models.Manager):
    def get_query_set(self):
        return self.model.QuerySet(self.model)
    def __getattr__(self, attr, *args):
        try:
            return getattr(self.__class__, attr, *args)
        except AttributeError:
            return getattr(self.get_query_set(), attr, *args)


class Partyline(models.Model):
    ## Define fields, blah blah.
    objects = CustomQuerySetManager()
    class QuerySet(QuerySet):
        def sort_for_request(self, request):
            sort_field = request.REQUEST.get('sortby', 'did').strip()
            reverse_order = False
            if sort_field.startswith('-'):
                search = sort_field[1:]
            else:
                search = sort_field
                reverse_order = True

            # Check to see if the sort term is valid.
            if not (search in Partyline._meta.get_all_field_names()):
                sort_field = 'did'

            partylines = self.all().order_by(sort_field)
            if reverse_order:
                partylines.reverse()
            return partylines
        def for_user(self, user):
            if is_user_type(request.user, ['admin']):
                return self.all()
            else:
                ## Code from get_my_partylines goes here.
                return self.all() ## Temporary.
"
How to convert .txt file into xml file using python?,"#!python3

import re
import xml.etree.ElementTree as ET

rex = re.compile(r'''(?P<title>Longitude
                       |Latitude
                       |date&time
                       |gsm\s+cell\s+id
                     )
                     \s*:?\s*
                     (?P<value>.*)
                     ''', re.VERBOSE)

root = ET.Element('root')
root.text = '\n'    # newline before the celldata element

with open('cell.txt') as f:
    celldata = ET.SubElement(root, 'celldata')
    celldata.text = '\n'    # newline before the collected element
    celldata.tail = '\n\n'  # empty line after the celldata element
    for line in f:
        # Empty line starts new celldata element (hack style, uggly)
        if line.isspace():
            celldata = ET.SubElement(root, 'celldata')
            celldata.text = '\n'
            celldata.tail = '\n\n'

        # If the line contains the wanted data, process it.
        m = rex.search(line)
        if m:
            # Fix some problems with the title as it will be used
            # as the tag name.
            title = m.group('title')
            title = title.replace('&', '')
            title = title.replace(' ', '')

            e = ET.SubElement(celldata, title.lower())
            e.text = m.group('value')
            e.tail = '\n'

# Display for debugging            
ET.dump(root)

# Include the root element to the tree and write the tree
# to the file.
tree = ET.ElementTree(root)
tree.write('cell.xml', encoding='utf-8', xml_declaration=True)
"
Python lambda closure scoping,">>> def makeFunc(n):
...     return lambda x: x+n
>>> stuff = [makeFunc(n) for n in [1, 2, 3]]
>>> for f in stuff:
...     print f(1)
2
3
4
"
Converting tuples to multiple indices in a Pandas Dataframe,">>> pd.DataFrame(d.values(), index=pd.MultiIndex.from_tuples(d.keys(), names=['id', 'act_type']))
                     bar__sum  foo__sum
id        act_type                     
100001799 ActivityB         7         3
100000550 ActivityA        14        12
"
calculate the sum of repeated numbers in a tuple,"sums = []
prev = -1
curr_sum = 0

for element in data:
    if element != prev:
        if prev > 0:
            sums.append(curr_sum)
        curr_sum = 0
        prev = 0
    curr_sum += element

sums.append(curr_sum)
"
Count character repeats in Python,">>> import re
>>> len(re.findall(""X+"", s))
5
"
Regular expression for class using Beautifulsoup,"soup.find('div', {""class"": lambda x: x and x.startswith(""divnew""))})
"
QFileDialog opening two dialogs,"filepath = str(QFileDialog.getOpenFileName(options=QFileDialog.DontUseNativeDialog)))
"
Triangle number pattern in python,"for c in range(1, num):
    print(' '*(num-1-c), *range(c-1, 0, -1), sep='')
"
"Minimum, Maximum and Average in a single iteration","@cython.boundscheck(False)
@cython.wraparound(False)
def minmaxAvg(list x):

    cdef int i
    cdef int _min, _max, total
    _min = x[0]
    _max = x[0]
    total = 0
    for i in x:
        if i < _min: _min = i 
        elif i > _max: _max = i 
        total += i
    return _min, _max, total/len(x)
"
Interploating list using python,"import functools
f = functools.partial(interp, x, y)
v = list(map(f, u))
"
"Check if all values of a list are less than a certain number, if not set it to that number","result = []
for item in a:
    if item > 3:
        result.append(item)
    else:
        result.append(3)
"
From Matlab to Python - Solve function,"[sqrt((-x + 3)**2 + (-y + 1)**2) - sqrt((-x + 4)**2 + (-y + 6)**2) - 0.3, sqrt((-x + 3)**2 + (-y + 1)**2) - sqrt((-x + 10)**2 + (-y + 4)**2) - 0.42]
[{x: 6.45543078993649, y: 3.14390310591109}, {x: 6.67962865117349, y: 2.61399193301427}]
"
take only text from a certain line of multi-line Python String,">>> my_string
'#Delete 544574\n#Delete 457545\n \n\nThis email body contains two examples here.'
>>> import re
>>> map(int,re.findall(""#.* (\d+)\n"",my_string))
[544574, 457545]
"
how to parse HTML tags in RSS feed in Python,"from bs4 import BeautifulSoup
soup = BeautifulSoup(post.description)
texts = soup.findAll(text = True)
print ''.join(texts)
"
Concatenate Items within nested list python,"x = ['a', '1', ['c', 'd', ['e', ['f', '123']]]]

def recurse(y):
    left,right = [],None

    # Here we loop over the elements and whenever we encounter
    # another list, we recurse.  
    for elem in y:
        if isinstance(elem,list):
            right = recurse(elem)
        else:
            left.append(elem)

    # If there is no further nested list, return only the 
    # concatenated values, else return the concatenated values 
    # and the next list in the nest.
    if right is None:
        return ["""".join(left)]
    else:
        return ["""".join(left),right]

print recurse(x)
"
pandas.rolling_sum weird inaccuracy,"In [481]: df=pd.DataFrame( { 'x':[0,0,.1,.2,0,0] } )

In [482]: df2 = pd.rolling_sum(df,window=2)

In [483]: df2
Out[483]: 
              x
0           NaN
1  0.000000e+00
2  1.000000e-01
3  3.000000e-01
4  2.000000e-01
5  2.775558e-17
"
How to find the text of a h1 tag html format with no link?,"from bs4 import BeautifulSoup

html = """"""<h1 class=""titleClass"" itemprop=""name"">
    Text title here
    <a class=""titleLink"" href=""somelink-here.html"">
        text link here
    </a>
</h1>""""""

soup = BeautifulSoup(html)

p = soup.find('h1', attrs={'class': 'titleClass'})
p.a.extract()
print p.text.strip()
"
All instances of maximum,"def max_temp(data):
    maximum = float('-inf')
    times = []
    for entry in data:
        time, temp = entry[:2]
        if temp == maximum:
            times.append(time)
        elif temp > maximum:
            maximum = temp
            times = [time]
    return maximum, times
"
re.scanner only searching start of string,"
import re
line = '''\
1 h words words words
bla 2 h words words
'''

scanner = re.Scanner([
    (r""([0-9]+(?:\ h|h))"",    lambda scanner, token: (""HOURS"", token)),
    (r'.', lambda scanner, token: None),
    ], flags=re.DOTALL)

results, remainder = scanner.scan(line)
print(results)
"
Why does python 2.6 not update my numpy array?,">>> f = k.astype(float)
>>> f
array([[    0.,     0.,  4863.,  1464.]])
>>> f[0][0] = 1e-3
>>> f
array([[  1.00000000e-03,   0.00000000e+00,   4.86300000e+03,
          1.46400000e+03]])
"
Assigning lower case alphabet as keys in a dictionary?,"for word in word_list:
    word_dict.setdefault(word[0], set()).add(word)
"
Python - how to ignore escape chars in regexp,"(STR\()""(.+?)(?<!\\)(""\))
"
Looping over a tuple in jinja2,"nested_dates = []
for y, yeardict in sorted(datedict.items()):
    yearlist = []
    for m, days in sorted(yeardict.items()):
        yearlist.append((m, sorted(days)))
    nested_dates.append((y, yearlist))
"
Check if certain value is contained in pandas column python,"print df[df['date'].str.contains('07311954')]
"
How to read records terminated by custom separator from file in python?,"def delimited(file, delimiter='\n', bufsize=4096):
    buf = ''
    while True:
        newbuf = file.read(bufsize)
        if not newbuf:
            yield buf
            return
        buf += newbuf
        lines = buf.split(delimiter)
        for line in lines[:-1]:
            yield line
        buf = lines[-1]
"
"Python itertools tee, clones and caching","def tee(iterable, n=2):
    it = iter(iterable)
    deques = [collections.deque() for i in range(n)]
    def gen(mydeque):
        while True:
            if not mydeque:             # when the local deque is empty
                newval = next(it)       # fetch a new value and
                for d in deques:        # load it to all the deques
                    d.append(newval)
            yield mydeque.popleft()
    return tuple(gen(d) for d in deques)
"
Add [] around numbers in strings,">>> import re
>>> inputstring = ""pixel1blue pin10off output2high foo9182bar""
>>> re.sub(r'(\d+)', r'[\1]', inputstring)
'pixel[1]blue pin[10]off output[2]high foo[9182]bar'
"
how to keep the precision when convert string to double value,">>> s = '[-97.173125220360362, -97.173125220360362]'
>>> [decimal.Decimal(x) for x in s.strip('[]').split(',')]
[Decimal('-97.173125220360362'), Decimal('-97.173125220360362')]
"
Python SQLITE3 SELECT query with datetime calculated string not working,"
import sqlite3
import datetime as DT

this_year = (DT.date(DT.date.today().isocalendar()[0], 1, 1))
# this_year = (""'""+str(this_year)+""'"")
# this_year = DT.date(DT.date.today().year,1,1)
with sqlite3.connect(':memory:') as conn:
    cursor = conn.cursor()
    sql = '''CREATE TABLE TEST_TABLE
        (""ID"" TEXT,
        ""DATE_IN"" DATE,
        ""WEEK_IN"" number)
    '''
    cursor.execute(sql)
    sql = 'INSERT INTO TEST_TABLE(ID, DATE_IN, WEEK_IN) VALUES (?,?,?)'
    cursor.executemany(sql, [[1,'2012-03-25',13],[2,'2013-03-25',13],])
    sql = 'SELECT ID FROM TEST_TABLE where WEEK_IN = 13 and DATE_IN > ?'
    cursor.execute(sql, [this_year])
    for row in cursor:
        print(row)
"
Python - read - rewrite on a text file (Driving me crazy),"with open('1.txt') as f1, open('2.txt') as f2, open('3.txt') as f3:
    for line in zip(f1,f2,f3):
        print ' '.join(e.strip() for e in line)
"
Converting numpy arrays of arrays into one whole numpy array,"import numpy as np

x = np.array([ np.array([[0, 0, 0, 1, 0, 0],
                         [0, 1, 0, 0, 0, 0],
                         [0, 0, 3, 7, 0, 0],
                         [0, 0, 0, 2, 0, 0]], dtype=np.uint8),
               np.array([[0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0],
                         [0, 0, 4, 8, 0, 0],
                         [0, 0, 0, 8, 0, 2]], dtype=np.uint8),
               np.array([[0, 0, 0, 0, 0, 0],
                         [1, 0, 0, 0, 0, 0],
                         [0, 0, 5, 9, 0, 0],
                         [0, 0, 0, 1, 0, 0]], dtype=np.uint8)], dtype=object)

print len(x)

print x[0].shape

y=np.zeros([len(x),x[0].shape[0],x[0].shape[1]],dtype=np.uint8)

print y.shape

for i in range(len(x)):
    y[i,:,:] = x[i]

print y
"
generating a grid in a function,">>> nodes = 3
>>> res=[[0]*nodes]*nodes
>>> res
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
>>> res[0][0] = 'echo'
>>> res
[['echo', 0, 0], ['echo', 0, 0], ['echo', 0, 0]]
"
Why use **kwargs in python? What are some real world advantages over using named arguments?,"Model.objects.filter(foo__lt = 4, bar__iexact = 'bar')
"
Count equal tuple-elements of a list in Python3,"counter = dict()
for item in org:
    if item not in counter:
        counter[item] = 1
    else:
        counter[item] += 1 
    # Alternatively, just: counter[item] = counter.get(item, 0) + 1      
"
substring of a string using python?,"import re

needles = ['accept','freed','partie','accepta','freeing','party']
haystack = ""I am accepting your invitation for the party.""

words = re.findall(r'(\w+)', haystack)
results = [(word, key) for key in needles for word in words if key in word]

# Or, the long way

results = []
for key in needles:
    for word in words:
        if key in word:
            results.append((word, key))

for word,key in results:
    print('Found {} {}'.format(word, key))
"
Custom sorting in pandas dataframe,"df = pd.DataFrame([[1, 2, 'March'],[5, 6, 'Dec'],[3, 4, 'April']], columns=['a','b','m'])
s = df['m'].apply(lambda x: {'March':0, 'April':1, 'Dec':3}[x])
s.sort()

In [4]: df.set_index(s.index).sort()
Out[4]: 
   a  b      m
0  1  2  March
1  3  4  April
2  5  6    Dec
"
pandas create dataframe from two files,"#df1 = pd.read_csv('ftp://ftp.swpc.noaa.gov/pub/lists/xray/'+date+'_Gp_xr_1m.txt', 
df1 = pd.read_csv(io.StringIO(temp1), 
                 sep=""\s+"", 
                 index_col=None, 
                 skiprows=19, 
                 parse_dates={'datetime': [0,1,2,3]}, 
                 header=None,
                 date_parser=dateparse,
                 usecols=[0, 1, 2, 3, 6, 7])
print df1.head()
             datetime             6             7
0 2016-02-03 00:00:00  2.130000e-09  4.600000e-07
1 2016-02-03 00:01:00  1.840000e-09  4.510000e-07
2 2016-02-03 00:02:00  1.790000e-09  4.520000e-07
3 2016-02-03 00:03:00  1.580000e-09  4.580000e-07

#df2 = pd.read_csv('ftp://ftp.swpc.noaa.gov/pub/lists/xray/'+date+'_Gp_xr_1m.txt', 
df2 = pd.read_csv(io.StringIO(temp), 
                 sep=""\s+"", 
                 index_col=None, 
                 skiprows=19, 
                 parse_dates={'datetime': [0,1,2,3]}, 
                 header=None,
                 date_parser=dateparse,
                 usecols=[0, 1, 2, 3, 6, 7])
print df2.head()
             datetime             6             7
0 2016-02-04 00:00:00  4.850000e-09  5.280000e-07
1 2016-02-04 00:01:00  3.070000e-09  5.290000e-07
2 2016-02-04 00:02:00  4.480000e-09  5.260000e-07
3 2016-02-04 00:03:00  3.210000e-09  5.170000e-07
4 2016-02-04 00:04:00  4.230000e-09  5.180000e-07
"
How to generate a filmstrip image in python from a folder of images?,"#!/usr/bin/env python

import os, os.path
from contactsheet import make_contact_sheet

def make_film_strip(fnames,
                   (photow,photoh),
                   (marl,mart,marr,marb),
                   padding):
    return make_contact_sheet(fnames,
                              (1, len(fnames)),
                              (photow,photoh),
                              (marl,mart,marr,marb),
                              padding)
"
Filtering Characters from a String,"''.join(c for c in str1 if c not in str2)
"
"Python pylab: Making a plot with adjusted spines, but doesn't plot","x = np.linspace(xStart, xStop, num=(xStart-xStop)*100)
"
Efficient item binning algorithm (itertools/numpy),"import numpy as np

def binnings(n, k, cache={}):
    if n == 0:
        return np.zeros((1, k))
    if k == 0:
        return np.empty((0, 0))
    args = (n, k)
    if args in cache:
        return cache[args]
    a = binnings(n - 1, k, cache)
    a1 = a + (np.arange(k) == 0)
    b = binnings(n, k - 1, cache)
    b1 = np.hstack((np.zeros((b.shape[0], 1)), b))
    result = np.vstack((a1, b1))
    cache[args] = result
    return result

if __name__ == '__main__':
    import timeit
    print timeit.timeit('binnings(20, 5, {})', setup='from __main__ import binnings', number=1)
"
create instance of a class in the same class's definition in python,"class MyClass:
    def __init__(self, create):
        if create:
            self.set_child(create=False)

    def set_child(self,child = None, create = True):
        child = MyClass(create) if child is None else child
        self.child=child

mc=MyClass()
"
How to make a list of dictionaries for unknown number of keys in dictionary?,"def makelist(filename, keys):
    result = []
    with open('%s.txt' % filename) as f:
        for line in f:
            result.append(dict(zip(keys, line.split('|'))))
    return result
"
Taken username: how can I have only one space at the end when suggesting an alternative username?,">>> result = ''
>>> for char in name:
...     result += char + space
... 
>>> result += '.'
>>> result
'G * e * o * r * g * e * .'
"
Dereferencing lists inside list in Python,"[[] for _ in range(3)]
"
How to get domain of words using WordNet in Python?,"# Gets domains given synset.
for ss in wn.all_synsets():
    ssid = str(ss.offset()).zfill(8) + ""-"" + ss.pos()
    if synset2domains[ssid]: # not all synsets are in WordNet Domain.
        print ss, ss.lemma_names('fre'), ssid, synset2domains[ssid]
"
R dcast equivalent in python pandas,"In [14]: pd.crosstab(index=df['values'], columns=[df['convert_me'], df['age_col']])
Out[14]: 
convert_me  Convert1  Convert2  Convert3
age_col           23        33        44
values                                  
21.71502           1         0         0
58.35506           0         1         0
60.41639           0         0         1
"
Regex within html tags,"# -*- coding: utf-8 -*-
from bs4 import BeautifulSoup

data = u""""""
<div id=""left-stack"">
  <span>View In iTunes</span></a>
 <span class=""price"">£19.99</span>
 <ul class=""list"">
    <li>HD Version</li>
""""""

soup = BeautifulSoup(data)
print soup.find('span', class_='price').text[1:]
"
Using Dictionary to match codons,">>> pairs = {'A':'T', 'C':'G', 'T':'A', 'G':'C'}
>>> codonsA = ['AAG', 'TAC', 'CGG', 'GAT', 'TTG', 'GTG', 'CAT', 'GGC', 'ATT', 'TCT']
>>> codonsB = ['TAA', 'CTA', 'AAC', 'TTC', 'AGA', 'CCC', 'CCG', 'GTA']
>>> list(codons_pair(pairs, codonsA, codonsB))
[('AAG', 'TTC'), ('GAT', 'CTA'), ('TTG', 'AAC'), ('CAT', 'GTA'), ('GGC', 'CCG'), ('ATT', 'TAA'), ('TCT', 'AGA')]
"
subset-by-subset list comparison in python,"print all(set(e[0]).issubset(e[1]) for e in zip(list1, list2))
"
Pythonic Way to Sort a List of Comma Separated Numbers,"lin = [i.strip().split(', ') for i in open(sys.argv[1]).readlines()]
lin = sorted(lin)
"
Python- Parser the today's date out of Dateutil,"from datetime import *
today = date.today()
print(today.strftime('%Y-%m-%d'))
"
Build a Pandas pd.tseries.offsets from timedelta,">>> pd.DateOffset(days=td.days, 
                  hours=td.seconds // 3600, 
                  minutes=(td.seconds // 60) % 60)
<DateOffset: kwds={'hours': 1, 'minutes': 0, 'days': 0}>
"
Filling in a single colour background in OpenCV,"#include <iostream>
#include <vector>

#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>


int main(int argc, char* argv[])
{
    // Load input image (3-channel)
    cv::Mat input = cv::imread(argv[1]);
    if (input.empty())
    {
        std::cout << ""!!! failed imread()"" << std::endl;
        return -1;
    }   

    // Convert the input to grayscale (1-channel)
    cv::Mat grayscale = input.clone();
    cv::cvtColor(input, grayscale, cv::COLOR_BGR2GRAY);
"
Preventing axis from updating on camera move - mayavi python,"axes.axes.fly_mode = 'none'
"
re.findall not returning a match,"val = re.findall('02[E|e]800000000000000(.*)00+',hexa_string)
"
Storing a single list of references to elements in several other lists in python,"class IndirectList():
    def __init__(self, *args):
        self.array = list()

        for subarray in range(len(args)):
            for element in range(len(args[subarray])):
                self.array.append((args[subarray], element))

    def __len__(self):
        return len(self.array)

    def __getitem__(self, key):
        if key not in range(len(self.array)):
            raise IndexError
        return (self.array[key][0])[self.array[key][1]]

    def __setitem__(self, key, value):
        if key not in range(len(self.array)):
            raise IndexError
        (self.array[key][0])[self.array[key][1]] = value
"
Custom Locks Threading python,"from PySide import QtCore

mutex = QtCore.QMutex()

class QtLock(QtCore.QThread):

    def __init__(self, name):
        super(QtLock, self).__init__()
        self.name = name

    def run(self):

        for i in range(10):
            mutex.lock()
            print i, self.name,
            mutex.unlock()

threads = []
for i in range(5):
    name = chr(i + ord('a'))
    threads.append(QtLock(name))

for thread in threads:
    thread.start()

for thread in threads:
    thread.wait()
"
Fastest way in Python to find a 'startswith' substring in a long sorted list of strings,"from bisect import bisect_left
def word_exists(wordlist, word_fragment):
    try:
        return wordlist[bisect_left(wordlist, word_fragment)].startswith(word_fragment)
    except IndexError:
        return False # word_fragment is greater than all entries in wordlist
"
Fastest way to code iteration through XML items using python's minidom?,"dict([(basename(f.getAttribute('name')), f.getAttribute('state').lower() == 'true')
  for f in parseString(raw).getElementsByTagName('feature')])
"
Reading file string into an array (In a pythonic way),"import csv

arrays = []
# declare the format of you csv file and Python will turn line into
# lists for you 
parser = csv.reader(open(your_file), delimiter=' '))
for l in parser: 
    arrays.append(np.array((array.float(i) for i in l)))
"
Passing multiple value_list in Django,"from collections import OrderedDict

keyvals = OrderedDict([
    ('taxdec','landproperty__ctaxdec'),
    ('brgy', 'ssectionid__sbrgyid__cbrgyname')
])

m = ButuanMaps.objects.filter(clandpin=getpin).values_list(*keyvals.values())
result = dict(zip(keyvals, zip(*m)))
"
How to look through a phrase in a dictionary?,"def f2(a, s):
    if s in a[""contents""]:
        if ""phrase"" not in a:
            a[""phrase""] = [s]
        else:
            a[""phrase""].append(s)
    for b in a[""descendent""]:
        f(b, s)
"
Extract html cell data XPath,"src = """"""<tr align=""center"" class=""tableRow1Font"" >
<td>OPEN</td>
<td>80002</td>
<td>
<span style=""font-weight:bold;"">
ACCY
</span> 
<A HREF=""http://bulletin.gwu.edu/search/?P=ACCY+2001"" target=""_blank"">
<span style=""font-weight:bold;"">
2001
</span>
</A>
</td>
<td>10</td>
<td>Intro Financial Accounting</td>
<td>3.00</td>
<td> Ray, K</td>
<td><a href=""http://virtualtour.gwu.edu/#MON"" target=""_blank"" >MON</a> 113</td>
<td>MW<br>12:45PM - 02:00PM</td>
<td>08/25/14 - 12/06/14</td>
<td>
</td>
</tr>""""""

from lxml import html

tree = html.fromstring(src)
tds = tree.xpath(""//td/descendant-or-self::*/text()[normalize-space()]"")

print "", "".join([td.strip() for td in tds])
"
Numeric Sort in Python,"list1 = [""1"",""10"",""3"",""22"",""23"",""4"",""2"",""200""]
list1 = [int(x) for x in list1]
list1.sort()
"
PYTHON - 'for' index changing because of list.pop() call,"def filter_low(lst, maxk, threshold=3):
    for item in lst:
        c = sum(1 for k in maxx if item==k.f)
        if c >= threshold:
             yield item


new_seen = list(filter_low(seen, maxk, 3))
"
Python: Best way to parse the following,"# note this is different from the minimal change above
def parse_preflop_hand(hand, value):
    if len(hand) < 3 and hand[0] != hand[1]:
        return {hand + 's': value, hand+'o': value}
    else:
        return {hand: value}

final_dict = {}
for token in handstring.split(','):
    for unparsed_hand, value in token.split("":""):
        final_dict.update(parse_preflop_hand(unparsed_hand))
"
Combine multiple heatmaps in matplotlib,"pcolor(D2-D1)
"
self.after doesn't wait when passing value,"import functools
functools.partial(self.waitmuchmore, value)
"
python 2.7: round a float up to next even number,"import math

def round_up_to_even(f):
    return math.ceil(f / 2.) * 2
"
Python: Print list of unknown length?,"print '<img src=""%s"">' * len(foo) % tuple(foo)
"
Python hide already printed text,"numLines = 1
print(""Hello world!"")
print(""\033[<{0}>A"".format(numLines), ""This came AFTER hello world line"")
"
Find bracket which are not closed without using regex in python,"def check_brackets(s):
    counter = 0
    for chr in s:
        if chr == ""("":
            counter += 1
        elif chr == "")"":
            counter -= 1
            if counter < 0:
                return False
    return counter == 0
"
Correct way to do 'if list in list' python,"if any(i in listB for i in listA):
    do something
"
Running ansible-playbook using Python API,"class Runner(object):
    ''' core API interface to ansible '''

    # see bin/ansible for how this is used...

    def __init__(self,
        host_list=C.DEFAULT_HOST_LIST,      # ex: /etc/ansible/hosts, legacy usage
        module_path=None,                   # ex: /usr/share/ansible
        module_name=C.DEFAULT_MODULE_NAME,  # ex: copy
        module_args=C.DEFAULT_MODULE_ARGS,  # ex: ""src=/tmp/a dest=/tmp/b""
        ...
        pattern=C.DEFAULT_PATTERN,          # which hosts?  ex: 'all', 'acme.example.org'
        remote_user=C.DEFAULT_REMOTE_USER,  # ex: 'username'
        remote_pass=C.DEFAULT_REMOTE_PASS,  # ex: 'password123' or None if using key
        remote_port=None,                   # if SSH on different ports
        private_key_file=C.DEFAULT_PRIVATE_KEY_FILE, # if not using keys/passwords
        sudo_pass=C.DEFAULT_SUDO_PASS,      # ex: 'password123' or None
        ...
        sudo=False,                         # whether to run sudo or not
        sudo_user=C.DEFAULT_SUDO_USER,      # ex: 'root'
        module_vars=None,                   # a playbooks internals thing
        play_vars=None,                     #
        play_file_vars=None,                #
        role_vars=None,                     #
        role_params=None,                   #
        default_vars=None,                  #
        extra_vars=None,                    # extra vars specified with he playbook(s)
        is_playbook=False,                  # running from playbook or not?
        inventory=None,                     # reference to Inventory object
        ...
        su=False,                           # Are we running our command via su?
        su_user=None,                       # User to su to when running command, ex: 'root'
        su_pass=C.DEFAULT_SU_PASS,
        vault_pass=None,
        ...
        ):
"
how to check if two numbers in a list are the same in Python,"def sites(x):
    r = []
    modulo = []
    ln = len(x)
    for i,ele in enumerate(x):
        sm = int(float(ele)) + (i + 1)
        r.append(sm)
    for j in range(ln):
        som = r[j] % ln
        modulo.append(som)
    return modulo
"
Remove multiple items from list in Python,"removeset = set(removelist)
newlist = [v for i, v in enumerate(oldlist) if i not in removeset]
"
If statement looking for float is not working,"totaltime = 0.0

while True:
    try:     
        new_time = float(input(""How long will this task take?\n> ""))
        totaltime += new_time
        break
    except ValueError:
        print(""You must enter a valid number, written as (H.M)."")
"
Custom indent width for BeautifulSoup .prettify(),"r = re.compile(r'^(\s*)', re.MULTILINE)
def prettify_2space(s, encoding=None, formatter=""minimal""):
    return r.sub(r'\1\1', s.prettify(encoding, formatter))
"
Python sudoku solver blocks,"distance = [[[0 for k in range(10)] for j in range(3)] for i in range(3)]

distance[0][0][0] = '*'
distance[0][1][0] = 2
distance[0][2][0] = 3
distance[1][0][0] = 4
distance[1][1][0] = 5
distance[1][2][0] = 6
distance[2][0][0] = 7
distance[2][1][0] = 8
distance[2][2][0] = 9

for i in range(0,3):
    for j in range(0,3):
        if distance[i][j][0] == '*':
            for k in range(1,10):
                distance[i][j][k] = 1

if distance[0][0][0] == '*':
    for i in range(0,3):
        for j in range(0,3):
            if distance[i][j][0] != '*':
                k = distance[i][j][0]
                for i in range(0,3):
                    for j in range(0,3):
                        distance[i][j][k] = 0
print (distance)
"
How to find zero crossings with hysteresis?,"def hyst(x, th_lo, th_hi, initial = False):
    hi = x >= th_hi
    lo_or_hi = (x <= th_lo) | hi
    ind = np.nonzero(lo_or_hi)[0]
    if not ind.size: # prevent index error if ind is empty
        return np.zeros_like(x, dtype=bool) | initial
    cnt = np.cumsum(lo_or_hi) # from 0 to len(x)
    return np.where(cnt, hi[ind[cnt-1]], initial)
"
how to get the date from datetime,"theDate = str(myDatetime.date())
theTime = str(myDatetime.time())
"
Quick and easy way to check if all items in a dictionary are empty strings?,"not any(dict.itervalues())
"
Adding ith element of two lists,">>> list_1 = [['a','b','c'],['1','2','3'],['ab','bc','cd']]
>>> list_2 = [['12','34','56'],['h','j','k'],['01','02','03']]
>>> [l1 + l2 for l1, l2 in zip(list_1, list_2)]
[['a', 'b', 'c', '12', '34', '56'], ['1', '2', '3', 'h', 'j', 'k'], ['ab', 'bc', 'cd', '01', '02', '03']]
"
"Python: create fixed point decimal from two 32-bit ints (one for int portion, one for decimal)",">>> from fractions import Fraction
>>> Fraction(0x9481ef80, 2**32) + Fraction(0x4ca1f350)
Fraction(43140329262089183, 33554432)
>>> float(_)
1285682000.5801077
"
Why am I not allowed to have multiple assignments in for each loop with different lengths of lists in python,"import itertools
for key in itertools.islice(sorted(dict.keys(), key=custom_sort), 10):
    # Only the first 10 keys are processed.
"
Python efficient way to compare list item with partial item from other list,"matched_filenames = [f.fname + f.fext for f in matched]
# -> ['222.txt']
"
how to format csv with some sub items,">>> import csv
>>> from cStringIO import StringIO
>>> items = [{'name': 'foo', 'total_price' : 15, 'price': [4, 2, 4, 5]}, {'name': 'bar', 'total_price' : 10, 'price': [5, 2, 3]}]
>>> f = StringIO()
>>> csv_writer = csv.writer(f)
>>> for item in items:
...     csv_writer.writerow([item['name'], item['total_price']])
...     csv_writer.writerows(['', p] for p in item['price'])
... 
>>> print f.getvalue()
foo,15
,4
,2
,4
,5
bar,10
,5
,2
,3
"
Open existing file of unknown extension,"filename = next(glob.iglob(os.path.join(folder, name + '.*')))
"
Is there a way to use PhantomJS in Python?,"from selenium import webdriver

driver = webdriver.PhantomJS() # or add to your PATH
driver.set_window_size(1024, 768) # optional
driver.get('https://google.com/')
driver.save_screenshot('screen.png') # save a screenshot to disk
sbtn = driver.find_element_by_css_selector('button.gbqfba')
sbtn.click()
"
searching the strings in a text file in another string,"raw_letters = raw_input('Input the letters: ')

# read out the entire contents of the file to search over
with open('TextFile.txt', 'r') as g:
    full_file = g.read()

# print each permutation that occurs somewhere in the file
for p in permutations(raw_letters):
    p_as_string = ''.join(p)
    if p_as_string in full_file:
        print(p_as_string)
"
python: How to compare elements within one list,"minimum = min(xs)
print(minimum)
"
How to get the first value in a python dictionary,"from collections import OrderedDict
my_dict = OrderedDict({'BigMeadow2_U4': (1609.32, 22076.38, 3.98), 'MooseRun': (57813.48, 750187.72, 231.25), 'Hwy14_2': (991.31, 21536.80, 6.47) })
"
How to add lower function to this code," print [item.lower() for item in row[1::-1] # Same thing, but it helps to break these things up into steps
"
python split using re and a lookup to a list,"import re
fabric = ['Combed Cotton', 'Polyester', 'Organic Cotton', 'Bamboo Viscose']
fabric_type = ['Brushed 3-ply', 'Fine Jersey']

test_cases = [
    ""100% Certified Organic Cotton Jersey 155 g / 4.6 oz."",
    ""100% Certified Organic Cotton Jersey 145 g / 4.3 oz."",
    ""100% Certified Organic Cotton Jersey 155 g / 4.6 oz."",
    ""100% Certified Organic Cotton Jersey 155 g / 4.6 oz."",
    ""100% Certified Organic Cotton Jersey 155 g / 4.6 oz."",
    ""100% Certified Organic Cotton Pique 180 g / 5.3 oz."",
    ""100% Certified Organic Cotton Pique 180 g / 5.3 oz."",
    ""100% Certified Organic Cotton Jersey 155 g / 4.6 oz."",
    ""100% Certified Organic Cotton Jersey 155 g / 4.6 oz."",
    ""100% Certified Organic Cotton Fine Jersey 115g / 3.4 oz."",
    ""100% Certified Organic Cotton Fine Jersey 115g / 3.4 oz."",
    ""100% Organic Cotton Brushed 3-ply 310 g / 9.1 oz."",
    ""100% Organic Cotton Brushed 3-ply 310 g / 9.1 oz."",
    ""100% Organic Cotton Brushed 3-ply 290 g / 8.6 oz."",
    ""100% Organic Cotton Brushed 3-ply 290 g / 8.6 oz."",
    ""100% Certified Organic Cotton Brushed 3-ply 280-300g / 8.3-8.9 oz."",
    ""100% Certified Organic Cotton Brushed 3-ply 280-300g / 8.3-8.9 oz."",
    ""100% Certified Organic Cotton Brushed 3-ply 280-300g / 8.3-8.9 oz."",
    ""100% Certified Organic Cotton Brushed 3-ply 280-300g / 8.3-8.9 oz."",
    ""100% Certified Organic Cotton Brushed 3-ply 280-300g / 8.3-8.9 oz."",
    ""100% Organic Cotton Plain Weave 120 g / 3.5 oz."",
    ""100% Organic Cotton Twill Weave 170 g / 5.1 oz."",
    ""100% Certified Organic Cotton Jersey 155 g / 4.6 oz."",
    ""100% Combed Cotton Interlock 240g / 7.2 oz."",
    ""100% Combed Cotton Interlock 200g / 6 oz."",
    ""100% Combed Cotton Jersey 165g / 4.95 oz.  (Melange Grey: 60% Cotton 40% Polyester)"",
    ""100% Combed Cotton Interlock 240g / 7.2 oz."",
    ""100% Combed Cotton 1x1 Rib 240g / 7.2 oz."",
    ""100% Combed Cotton Jersey 150g / 4.5 oz"",
    ""100% Combed Cotton Jersey 155g / 4.65 oz.  (Melange Grey: 60% Cotton 40% Polyester)"",
    ""100% Combed Cotton Fine Jersey 115g / 3.4 oz. (Melange Grey: 85% Cotton 15% Viscose)"",
    ""100% Combed Cotton Fine Jersey 115g / 3.4 oz. (Melange Grey: 85% Cotton 15% Viscose)"",
    ""100% Combed Cotton Jersey 150g / 4.5 oz (Melange Grey: 74% Cotton 26% Polyester)"",
    ""100% Combed Cotton Jersey 160g / 4.8 oz."",
    ""100% Combed Cotton Sheer Jersey 90g / 2.65 oz."",
    ""100% Combed Cotton Sheer Jersey 115g / 3.4 oz."",
    ""70% Bamboo Viscose 30% Organic Cotton Fine Jersey 115g / 3.4 oz."",
    ""70% Bamboo Viscose 30% Organic Cotton Fine Jersey 115g / 3.4 oz."",
    ""70% Bamboo Viscose 30% Organic Cotton Jersey 150g / 4.4 oz."",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""45% Combed Cotton 45% Modal 10% Lycra Elastane Jersey 240g / 7.2 oz."",
    ""100% Organic Cotton Canvas Weave 340g"",
    ""100% Tencel Lyocell Fine Jersey 120g / 3.5 oz."",
    ""100% Tencel Lyocell Fine Jersey 120g / 3.5 oz."",
    ""100% Tencel Lyocell Fine Jersey 120g / 3.5 oz."",
    ""100% Combed Cotton Fine Jersey 115g"",
    ""100% Certified Organic Cotton Brushed 3-ply 280 / 8.3 oz."",
    ""100% Certified Organic Cotton Interlock 200 / 5.9 oz."",
    ""100% Certified Organic Cotton Interlock 200 / 5.9 oz."",
    ""100% Certified Organic Cotton Interlock 200 / 5.9 oz."",
    ""100% Certified Organic Cotton Interlock 200 / 5.9 oz."",
    ""100% Organic Cotton Brushed 3-ply 290 g / 8.6 oz."",
    ""100% Combed Cotton Fine Jersey 115g / 3.4 oz. (Melange Grey: 60% Cotton 40% Polyester)"",
    ""100% Combed Cotton Fine Jersey 115g / 3.4 oz. (Melange Grey: 60% Cotton 40% Polyester)"",
    ""80% Combed Cotton 20% Polyester Brushed 3-Ply 320g / 9.4 oz"",
    ""80% Combed Cotton 20% Polyester Brushed 3-Ply 320g / 9.4 oz"",
    ""100% Tencel Lyocell Fine Jersey 120g / 3.5 oz"",
    ""100% Tencel Lyocell Fine Jersey 120g / 3.5 oz"",
    ""100% Combed Cotton Fine Jersey 115g / 3.4 oz. (Melange Grey: 60% Cotton 40% Polyester)"",
    ""Printed on FSC Mix certified paper using vegetable inks"",
    ""96% Cotton 4% Polyester Fine Speckled Jersey 130-150 g/m2"",
    ""96% Cotton 4% Polyester Fine Speckled Jersey 130-150 g/m2"",
    ""100% Combed Cotton Supersoft Jersey 175 g/m2"",
    ""60% Combed Cotton 40% Polyester Brushed 3-ply 280 g/m2"",
    ""60% Combed Cotton 40% Polyester Brushed 3-ply 280 g/m2"",
    ""100% Combed Cotton Supersoft Jersey 175 g/m2"",
    ""100% Combed Cotton Supersoft Jersey 175 g/m2"",
    ""100% Combed Cotton Jersey 135 g/m2 (Mélange Grey: 60% Cotton 40% Polyester) Jersey 135 g/m2"",
    ""70% Bamboo Viscose 30% Organic Cotton Jersey 150 g/m2"",
    ""70% Bamboo Viscose 30% Organic Cotton Jersey 115 g/m2"",
    ""100% Organic Cotton Jersey 155 g/m2"",
    ""100% Organic Cotton Jersey 155 g/m2"",
    ""60% Recycled Organic Cotton 40% Recycled Polyester Jersey 165g / 4.95 oz."",
    ""60% Recycled Organic Cotton 40% Recycled Polyester Jersey 165g / 4.95 oz."",
    ""60% Recycled Organic Cotton 40% Recycled Polyester Brushed 2-ply 280 / 8.3 oz."",
    ""60% Recycled Organic Cotton 40% Recycled Polyester Twill Weave 220 g / 6.5 oz."",
    ""60% Recycled Organic Cotton 40% Recycled Polyester Twill Weave 220 g / 6.5 oz."",
    ""100% Combed Cotton Interlock 240g / 7.2 oz."",
    ""100% Combed Cotton Jersey 165g / 4.95 oz.  (Melange Grey: 60% Cotton 40% Polyester)"",
    ""100% Combed Cotton Sheer Jersey 115g / 3.4 oz."",
    ""100% Combed Cotton Jersey 150g / 4.5 oz"",
    ""100% Combed Cotton Jersey 155g / 4.65 oz.  (Melange Grey: 60% Cotton 40% Polyester)"",
    ""100% Combed Cotton Jersey 150 g/m2 (Mélange Grey: 60% Cotton 40% Polyester)"",
    ""100% Combed Cotton Fine Jersey 115g / 3.4 oz. (Melange Grey: 60% Cotton 40% Polyester)"",
    ""100% Combed Cotton Fine Jersey 115g / 3.4 oz. (Melange Grey: 60% Cotton 40% Polyester)"",
    ""50% Cotton, 50% Polyester Jersey 160g / 4.7 oz."",
    ""50% Cotton, 50% Polyester Jersey 160g / 4.7 oz."",
    ""100% Combed Cotton Sheer Jersey 90g / 2.65 oz."",
    ""100% Combed Cotton Sheer Jersey 90g / 2.65 oz."",
    ""100% Combed Cotton Sheer Jersey 105g / 3.15 oz."",
    ""100% Combed Cotton Sheer Jersey 115g / 3.4 oz."",
    ""70% Bamboo Viscose 30% Organic Cotton Fine Jersey 115g / 3.4 oz."",
    ""70% Bamboo Viscose 30% Organic Cotton Jersey 150g / 4.4 oz."",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""80% Combed Cotton 20% Polyester Brushed 3-ply 320 g/m2"",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""80% Combed Cotton 20% Polyester Brushed 3-ply 320 g / 9.4 oz"",
    ""80% Combed Cotton 20% Polyester 320g / 9.4 oz."",
    ""80% Combed Cotton 20% Polyester Brushed 3-Ply 320g / 9.4 oz"",
    ""80% Combed Cotton 20% Polyester Brushed 3-Ply 320g / 9.4 oz"",
    ""100% Tencel Lyocell Fine Jersey 120g / 3.5 oz."",
    ""100% Combed Cotton Fine Jersey 115g / 3.4 oz. (Melange Grey: 60% Cotton 40% Polyester)"",
    ""100% Certified Organic Cotton Interlock 200 g/m2"",
    ""100% Certified Organic Cotton Interlock 200 g/m2"",
    ""100% Certified Organic Cotton Interlock 200 g/m2"",
    ""100% Certified Organic Cotton Interlock 200 g/m2"",
    ""100% Combed Cotton Jersey 150g / 4.5 oz (Melange Grey: 74% Cotton 26% Polyester)"",
    ""100% Combed Cotton Jersey 150g / 4.5 oz"",
    ""100% Combed Cotton Jersey 130g / 3.8 oz"",
    ""100% Combed Cotton Jersey 130g (Mélange Grey: 85% Cotton 15% Viscose)"",
    ""100% Combed Cotton  Jersey 150g (Mélange Grey: 85% Cotton 15% Viscose) (Other Mélange: 60% Cotton 40% Polyester)"",
    ""100% Combed Cotton Jersey 150g / 4.5 oz"",
    ""100% Combed Cotton Jersey 150g / 4.5 oz"",
    ""                                             | 99% Cotton 1% Viscose)"",
    ""100% Combed Cotton Jersey 130g"",
    "" |0% Combed Cotton Fine Jersey 115g (Mélange Grey: 85% Cotton 15% Viscose) (Mélange White: 99% Cotton 1% Viscose)"",
    ""80% Combed Cotton 20% Polyester Brushed 3-Ply 320g / 9.4 oz"",
    ""100% Combed Organic Cotton Jersey 155g / 4.6 oz"",
    ""100% Combed Cotton Jersey 130g""
]

fabric_rx = re.sub(""\s+"",""\s+"",""|"".join(fabric))
fabric_type_rx = re.sub(""\s+"",""\s+"",""|"".join(fabric_type))

expr = ""(?:\d{1,3}\%\s(?:""+ fabric_rx +"")(?:\s+))|(?:""+ fabric_type_rx +""(?:\s+))|(?:.{2,})""
rx = re.compile(expr)

for test in test_cases:
    try:
        results = re.findall(rx, test)
        for idx, item in enumerate(results):
            results[idx] = item.strip()
        print results
    except:
        print ""Format error: %s"" % test
"
Use same string format for multiple items in Python 3,"a = 1.23981321
b = 34
c = 9.567123

print('{:.4f} - {:.4f} - {:.4f}'.format(a, b, c)) # Original

print('{a:{f}} - {b:{f}} - {c:{f}}'.format(a=a, b=b, c=c, f='.4f')) # New
"
Pandas Dataframe Multicolor Line plot,"from matplotlib.collections import LineCollection
import matplotlib.dates as mpd

x=mpd.date2num(df.index.to_pydatetime())
y=df.winds.values
c=df['temp'].values
points = np.array([x, y]).T.reshape(-1, 1, 2)
segments = np.concatenate([points[:-1], points[1:]], axis=1)
lc = LineCollection(segments, cmap=plt.get_cmap('copper'), norm=plt.Normalize(0, 10))
lc.set_array(c)
lc.set_linewidth(3)
ax=plt.gca()
ax.add_collection(lc)
plt.xlim(min(x), max(x))
ax.xaxis.set_major_locator(mpd.HourLocator())
ax.xaxis.set_major_formatter(mpd.DateFormatter('%Y-%m-%d:%H:%M:%S'))
_=plt.setp(ax.xaxis.get_majorticklabels(), rotation=70 )
plt.savefig('temp.png')
"
create mask of non-nan matrix intersections,"from numpy import isfinite
isfinite(arr_a) * isfinite(arr_b)
"
Flask route rule as function args,"@app.route('/test/<command>/<path:path>')
def test(command, path):
    args = path.split('/')
    return "" "".join(args)
"
Python Find n words before and after a certain words,"import re
import numpy

# open the file? 
test_string = "" a lot of text read from file ... Department of Something is called (DoS) and then more texts and more text...""
regex_acronym = r'\b[A-Z][a-zA-Z\.]*[A-Z]\b\.?'

ra = re.compile(regex_acronym)
for m in ra.finditer(test_string):
    print m.start(), m.group(), m.span()
    n = len(m.group()) * 2
    regex_pre_post = r""((?:[a-zA-Z'-]+[^a-zA-Z'-]+){0,%d})("" % n
    regex_pre_post += regex_acronym 
    regex_pre_post += "")((?:[^a-zA-Z'-]+[a-zA-Z'-]+){0,%d})"" % n
    found= re.findall(regex_pre_post, test_string)
    print found

    found = found[0] # For a single match, just do this.
    pre = found[0]
    acro = found[1]
    post = found[2]
    print pre, acro, post
"
How do I perform HTML decoding/encoding using Python/Django?,"# Python 2.x:
import HTMLParser
html_parser = HTMLParser.HTMLParser()
unescaped = html_parser.unescape(my_string)

# Python 3.x:
import html.parser
html_parser = html.parser.HTMLParser()
unescaped = html_parser.unescape(my_string)
"
Translating timestamp to Human Readable format,"dte = ""2002-08-22T07:00:00Z""
print( datetime.strptime(dte, ""%Y-%m-%dT%H:%M:%SZ""))
utc = datetime.strptime(dte, ""%Y-%m-%dT%H:%M:%SZ"").replace(tzinfo=_utc)
for tz in pytz.all_timezones:
    tz = timezone(tz)
    dt = (utc.astimezone(tz))
    if str(dt.time()) == ""00:00:00"":
        print(tz)
        print(dt)
"
Python: slicing elements of lists in lists in lists differently depending on sublist,"[[[num, position, text[op]]
  for (num, position, text), op in zip(chunk, [slice(-4, None), slice(None), slice(4)])]
 for chunk in results]
"
Find unique elements of floating point array in numpy (with comparison using a delta value),"import numpy as np
TOL = 1.0e-3
a = np.random.random((10,10))
i = np.argsort(a.flat)
d = np.diff(a.flat[i])
result = a.flat[i[d>TOL]]
"
Accessing the values of a key,"d = Data[""weight_factors""]
myvar = d[""parameter1""] * d[""parameter2""] + d[""parameter3""]
"
Why __instancecheck__ is not always called depending on argument?,">>> import __builtin__
>>> def isinstance(a, b):
...     class tmp(type(a)):
...          pass
...     return __builtin__.isinstance(tmp(), b)
... 
>>> __builtin__.isinstance(a, A)
True
>>> isinstance(a, A)
__instancecheck__
True
"
How does Python perform during a list comprehension?," d = {
        'large': lambda item: item > 100,
        'small': lambda item: item < 100,
      }
 return [item for item in data if d[mode](item)]
"
Python: put all function arguments into **kwargs automatically,"def f1(arg1, arg2, arg3):
    f2(arg1=arg1, arg2=arg2, arg3=arg3)
"
While in a for loop,">>> list1 = [0,0,0,0,0,1,2]
>>> count = 0
>>> for item in list1:
...     if item == 0:
...         count = count + 1
...     else:
...         break
... 
>>> print count
5
"
How to slice one MultiIndex DataFrame with the MultiIndex of another,"cond1 = (df.index.get_level_values('b').isin(['foo'])) & (df.index.get_level_values('c').isin(['can']))
cond2 = (df.index.get_level_values('b').isin(['bar'])) & (df.index.get_level_values('c').isin(['baz']))
df[cond1 | cond2]
"
"Python Dictionaries: Grouping Key, Value pairs based on a common key, value","list1 = [{'name': 'bob', 'email': 'bob@bob.com', 'address': '123 house lane', 
'student_id': 12345}, {'name': 'steve', 'email': 'steve@steve.com',
'address': '456 house lane', 'student_id': 34567}, {'name': 'bob',
'email': 'bob2@bob2.com', 'address': '789 house lane', 'student_id': 45678}]

dict1 = {}
for content in list1:
    if content['name'] in [name for name in dict1]:
        dict1[content['name']] = {'emails': dict1[content['name']]['emails'] + [content['address']], 'addresses': dict1[content['name']]['addresses'] + [content['email']]}
    else:
        dict1[content['name']] = {'emails': [content['email']], 'addresses': [content['address']]}
print dict1
"
"matplotlib: subplot background (axes face + labels) colour [or, figure/axes coordinate systems]","import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

fig, axes = plt.subplots(3, 2)

rect = Rectangle((0.08, 0.35), 0.85, 0.28, facecolor='yellow', edgecolor='none',
                 transform=fig.transFigure, zorder=-1)
fig.patches.append(rect)
plt.show()
"
Python: Search a text file and then output specific data,"def mergeData(file1name, file2name, outfilename, a_filter_func):
    """""" Merge the data of two files. """"""
    mergedData = defaultdict(list)
    with open(file1name, 'r') as file1, open(file2name, 'r') as file2, open(outfilename, 'w') as outfile:
        for line in file1:
            splt = line.split()
            if a_filter_func(splt[1]):
                mergedData[splt[0].lstrip('0')].append(line)
        for line in file2:
            splt = line.split()
            if a_filter_func(splt[1]):
                mergedData[splt[0]].append("" "".join(splt[:4]))
        for k in mergedData:
            outfile.write(""\n"".join(mergedData[k]) + ""\n"")
"
How to unpack tuples in nested list?,">>> a = [ [(2, 3, 5), (3, 4, 6), (4, 5, 7), (1, 1, 1), (1, 2, 3)],
...       [(4, 9, 2), (8, 8, 0), (3, 5, 1), (2, 6, 8), (2, 4, 8)],
...       [(8, 7, 5), (2, 5, 1), (9, 2, 2), (4, 5, 1), (0, 1, 9)]]
>>> zip(*(zip(*x) for x in a))
[((2, 3, 4, 1, 1), (4, 8, 3, 2, 2), (8, 2, 9, 4, 0)), ((3, 4, 5, 1, 2), (9, 8, 5, 6, 4), (7, 5, 2, 5, 1)), ((5, 6, 7, 1, 3), (2, 0, 1, 8, 8), (5, 1, 2, 1, 9))]

>>> for row in _:
...     print row
... 
((2, 3, 4, 1, 1), (4, 8, 3, 2, 2), (8, 2, 9, 4, 0))
((3, 4, 5, 1, 2), (9, 8, 5, 6, 4), (7, 5, 2, 5, 1))
((5, 6, 7, 1, 3), (2, 0, 1, 8, 8), (5, 1, 2, 1, 9))
"
Displaying output of shell commands with shared environments,"while not_dead_yet:
    line = cmd.stdout.readline()

for line in iter(cmd.stdout.readline, b''):
    pass
"
How can I increase number in input statement in python?,"classes = []

number_classes = int(input(""How many classes did you take? ""))
print()

for i in range(1, number_classes + 1):
    p = input(""What is the name of class "" + i)
    q = input(""What grade did you get in that class? "")
    classes.append((p,q))
"
making a string into a list within a list comprehension,"[word for word in lowers if len(word)>=5 and sorted(word)==list(word)]
"
convert JPG to txt causes change in file size in python,"import os
from scipy.misc import imread
import numpy as np

imagePath = 'c:/your jpgs/'
savepath = imagePath

#save as text no decompressing
for filename in os.listdir(imagePath):
    if filename!='.DS_Store' and filename[-3:]=='jpg':
        with open(filename,'rb') as fin:
            b = fin.read()
            fin.close()
        out = ','.join(b)+'\n'
        with open(savepath+'trainMatrix1.txt','a') as fut:
            fut.write(out)
            fut.close()
"
"Class 'list' does not define '__mod__', so the '%' operator cannot be used","env.hosts = [""{}"".format(server_ip_var)]
"
NDB MyModel.get_by_id() cannot find entity by key_name,"client = Client.get_by_id(key_name, parent=self.user.key)
"
Assigning numpy array based on condition,"In [90]: age = np.array([np.nan, 30, 20, 10])

In [91]: (age > 20.0).astype(float)
Out[91]: array([ 0.,  1.,  0.,  0.])

In [92]: np.clip(age-20, 0, 1)
Out[92]: array([ nan,   1.,   0.,   0.])
"
Input html form data from python script,"Mechanize
Forms
List the forms
import mechanize

br = mechanize.Browser()
br.open(url)

for form in br.forms():
    print ""Form name:"", form.name
    print form
"
NumPy array sum reduce,"import numpy as np

# Input array
A = np.array([[1,2,4.0],
             [1,1,5.0],
             [1,2,3.0],
             [0,1,9.0]])

# Extract xy columns            
xy = A[:,0:2]

# Perform lex sort and get the sorted indices and xy pairs
sorted_idx = np.lexsort(xy.T)
sorted_xy =  xy[sorted_idx,:]

# Differentiation along rows for sorted array
df1 = np.diff(sorted_xy,axis=0)
df2 = np.append([True],np.any(df1!=0,1),0)
# OR df2 = np.append([True],np.logical_or(df1[:,0]!=0,df1[:,1]!=0),0)
# OR df2 = np.append([True],np.dot(df1!=0,[True,True]),0)

# Get unique sorted labels
sorted_labels = df2.cumsum(0)-1

# Get labels
labels = np.zeros_like(sorted_idx)
labels[sorted_idx] = sorted_labels

# Get unique indices
unq_idx  = sorted_idx[df2]

# Get counts and unique rows and setup output array
counts = np.bincount(labels, weights=A[:,2])
unq_rows = xy[unq_idx,:]
out = np.append(unq_rows,counts.ravel()[:,None],1)
"
Python- How to generate random integers with multiple ranges?,"from random import randint, choice

for _ in range(5):
    r = choice([(1,5),(9,15),(21,27)])
    print(randint(*r))
"
Python Timenow Without Milliseconds?,">>> from datetime import datetime
>>> d = datetime.now()
>>> d
datetime.datetime(2016, 1, 4, 17, 31, 32, 976902)
>>> print(d)
2016-01-04 17:31:32.976902
>>> print(d.strftime('%Y-%m-%d %H:%M:%S'))
2016-01-04 17:31:32
"
Pickle doesn't take my registered custom type reduce function into account on python 2.6,"from copy_reg import dispatch_table
from types import TypeType, StringType, TupleType
from pickle import Pickler, PicklingError


def pickler_save(self, obj):
    # Check for persistent id (defined by a subclass)
    pid = self.persistent_id(obj)
    if pid:
        self.save_pers(pid)
        return

    # Check the memo
    x = self.memo.get(id(obj))
    if x:
        self.write(self.get(x[0]))
        return

    # Check the type dispatch table
    t = type(obj)
    f = self.dispatch.get(t)
    if f:
        f(self, obj) # Call unbound method with explicit self
        return

    # Check copy_reg.dispatch_table
    reduce = dispatch_table.get(t)
    if reduce:
        rv = reduce(obj)
    else:
        # Check for a class with a custom metaclass; treat as regular class
        try:
            issc = issubclass(t, TypeType)
        except TypeError: # t is not a class (old Boost; see SF #502085)
            issc = 0
        if issc:
            self.save_global(obj)
            return

        # Check for a __reduce_ex__ method, fall back to __reduce__
        reduce = getattr(obj, ""__reduce_ex__"", None)
        if reduce:
            rv = reduce(self.proto)
        else:
            reduce = getattr(obj, ""__reduce__"", None)
            if reduce:
                rv = reduce()
            else:
                raise PicklingError(""Can't pickle %r object: %r"" %
                                    (t.__name__, obj))

    # Check for string returned by reduce(), meaning ""save as global""
    if type(rv) is StringType:
        self.save_global(obj, rv)
        return

    # Assert that reduce() returned a tuple
    if type(rv) is not TupleType:
        raise PicklingError(""%s must return string or tuple"" % reduce)

    # Assert that it returned an appropriately sized tuple
    l = len(rv)
    if not (2 <= l <= 5):
        raise PicklingError(""Tuple returned by %s must have ""
                            ""two to five elements"" % reduce)

    # Save the reduce() output and finally memoize the object
    self.save_reduce(obj=obj, *rv)


Pickler.save = pickler_save
"
Transform character array into integers with python,"from collections import Counter
def solve(lis):
    for row in lis:
        c = Counter(row)
        maxx = max(c.values())
        yield [int(c[x] < maxx) for x in row]
...         
>>> pprint(list(solve(lis)))
[[0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
 [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
 [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
 [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
 [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1],
 [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1]]
"
How to add two lists into dictionary?,">>> dict(zip(i,map(list,zip(*j))))
{'Type': ['input', 'output', 'input'], 'value': ['1234', '2345', '567'], 'Pin': ['abc', 'xyz', 'pqr']}
"
Position of maximum value in column in pandas,"In [7]: df.ix[df['B'].idxmax(), 'A']
Out[7]: 4
"
Strip all but first 5 characters - Python," sequence = [1,2,3,4,5,6,7,8,9,10] # range(1,11)

 sequence[0:5:1] == sequence[0:5] == sequence[:5] 
 # [1, 2, 3, 4, 5]

 sequence[1:len(sequence):1] == sequence[1:len(sequence)] == sequence[1:]
 # [2, 3, 4, 5, 6, 7, 8, 9, 10]

 sequence[0:len(sequence):2] == sequence[:len(sequence):2] == sequence[::2]
 # [1, 3, 5, 7, 9]
"
Recursively walking a Python inheritance tree at run-time,">>> A = type(""A"", (object,), {'a':'A var'})  # create class A
>>> B = type(""B"", (A,), {'b':'B var'})       # create class B
>>> myvar = B()

def getvars(obj):
    ''' return dict where key/value is attribute-name/class-name '''
    retval = dict()
    for i in type(obj).mro():
        for k in i.__dict__:
            if not k.startswith('_'):
                retval[k] = i.__name__
    return retval

>>> getvars(myvar)
{'a': 'A', 'b': 'B'}

>>> for i in getvars(myvar):
    print getattr(myvar, i)   # or use setattr to modify the attribute value

A Var
B Var
"
How do I reference all class instances at the same time?,"import gc

mobile_suits = [o for o in gc.get_objects() if isinstance(o, Mobilesuits)]
"
Limit function execution in Python,"class TestClass(object):
    def timed_method(self, return_queue):
        do_other_stuff()
        return_queue.put(True)
        return
"
Trying to extract strings using regex - Python,"In [71]: p = re.compile(r'{PakBusPort_(.*?)}')

In [72]: p.findall(res)
Out[72]: ['somename']
"
Counting booleans in dictionary,"num_true = sum(1 for condition in d.values() if condition)
"
Extending the behavior of an inherited function in Python,"class Base(object):

    def load(self):
        print('do logic A')
        print('do logic B')


class Child(Base):

    def load(self):
        super().load()
        print('do logic C')


c = Child()
c.load()   
"
Numpy array with position,">>> x = np.ma.array(100+np.arange(9), mask=[0,1,0,0,0,1,1,1,0]).reshape((3,3))

    masked_array(data =
    [[100 -- 102]
     [103 104 --]
     [-- -- 108]],
         mask =
    [[False  True False]
     [False False  True]
     [ True  True False]],
         fill_value = 999999)

>>> i = np.nonzero(~np.ma.getmask(x))   # get the indices of the unmasked items

    (array([0, 0, 1, 1, 2]), array([0, 2, 0, 1, 2]))

>>> np.vstack((i, x[i]))  # build an array with the indices and elements together

    [[  0   0   1   1   2]
     [  0   2   0   1   2]
     [100 102 103 104 108]]
"
plotting autoscaled subplots with fixed limits in matplotlib,"# old style
fig = plt.figure()
ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222, sharex=ax1, sharey=ax1)
ax3 = fig.add_subplot(223, sharex=ax1, sharey=ax1)
ax3 = fig.add_subplot(224, sharex=ax1, sharey=ax1)
"
Look ahead without itertools,"dic={'a':[''.join(per) for per in permutations('AGUCN')]}
"
Printing until a specific character position in python,">>> '// {} {}'.format('USERID:'.ljust(16, '.'), 'ADET_ID')
'// USERID:......... ADET_ID'
"
"How do I parse argparse arguments into a list of strings, stopping on a predefined flag argument?","def preprocess(lst):
    """"""
    process an iterable into 2 lists.
    The second list contains the portion bracketed by '--cmdname' and '--cmdname--'
    whereas the first portion contains the rest of it.
    """"""
    try:
        i1 = lst.index('--cmdname')
        i2 = lst.index('--cmdname--')
        argv1 = lst[i1+1:i2]
        argv2 = lst[:i1]+lst[i2+1:]
    except ValueError:
        argv1 = lst
        argv2 = []

    return argv1,argv2
"
how can we compare two lists which are in two different files?,"data1 = [int(line.strip()) for line in open(""a.txt"", 'r')]
data2 = [int(line.strip()) for line in open(""b.txt"", 'r')]
res = list((set(data1) - set(data2)).union(set(data2) - set(data1)))
"
"Login, Navigate and Retrieve data behind a proxy with Python","HTTP POST for a HTML Form
import requests
a = 4
b = 5
data = {""a"": a, ""b"": b}
url = ""http://example.com/formaction/url""
req = requests.post(url, data=data)
"
How do i make a list a list of list?,">>> l= [1,0,1,1,1,0,1,0,          
...     0,0,0,1,1,0,0,0,                      
...     1,1,1,0,0,1,0,0,                      
...     0,0,0,0,0,1,1,1] 

>>> [l[i:i+8] for i in range(0,len(l),8)]
[[1, 0, 1, 1, 1, 0, 1, 0], 
 [0, 0, 0, 1, 1, 0, 0, 0], 
 [1, 1, 1, 0, 0, 1, 0, 0], 
 [0, 0, 0, 0, 0, 1, 1, 1]]
"
How to loop through a function for each item in list?,"item = stock.stock_list(location_name)
 """"""eg; bread, rice, coke""""""
for x in sorted(item):
    print stock.stock_price(x)
"
i cant use the equals or the enter key on my keyboard to get an answer for anything,"try:
    # for Python2
    from Tkinter import *
except ImportError:
    # for Python3
    from tkinter import *


class GUI(Frame):

    # Create and return a packed frame.
    def frame(self, side): 
        w = Frame(self)
        w.pack(side=side, expand=YES, fill=BOTH)
        return w

    # Create and return a button.
    def button(self, root, side, text, command=None): 
        w = Button(root, text=text, command=command) 
        w.pack(side=side, expand=YES, fill=BOTH)
        return w

    def hello(self):
        self.display.set('hello')

    def keyPressed(self,event):
        #test to see whether enetr is pressed
        if event.keysym == 'Return':
            self.hello()
    def __init__(self):
        Frame.__init__(self)
        self.option_add('*Font', 'Verdana 12 bold')
        self.pack(expand=YES, fill=BOTH)
        self.master.title('Simple GUI')

        # The StringVar() object holds the value of the Entry.
        self.display = StringVar()
        e = Entry(self, relief=SUNKEN, textvariable=self.display)
        e.pack(side=TOP, expand=YES, fill=BOTH)


        # Clear button.
        clearF = self.frame(BOTTOM)
        self.hello_button = self.button(clearF, LEFT, 'Hello', self.hello)
        #bind keypresses
        self.bind_all('<Key>', self.keyPressed)


if __name__ == '__main__':
 GUI().mainloop()
"
Having trouble with packing and unpacking frames in Tkinter,"instructions.pack()
"
Select all the rows based on a column value pandas,"import pandas as pd

data = pd.DataFrame(
{'1': {0: 'one', 1: 'one', 2: 'two', 3: 'three', 4: 'two', 5: 'two', 6: 'one', 7: 'three'}, 
'0': {0: 'Gm', 1: '922', 2: '933', 3: '952', 4: 'Gm', 5: '960', 6: '963', 7: '999'}, 
'3': {0: 0, 1: 2, 2: 4, 3: 6, 4: 8, 5: 10, 6: 12, 7: 14}, 
'2': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}})

print data

     0      1  2   3
0   Gm    one  0   0
1  922    one  1   2
2  933    two  2   4
3  952  three  3   6
4   Gm    two  4   8
5  960    two  5  10
6  963    one  6  12
7  999  three  7  14
"
Minimum s-t Edge cut which takes edge weight into consideration,"cut_weight, partitions = nx.minimum_cut(G, 0, 4, capacity='weight')
edge_cut_list = []
for p1_node in partitions[0]:
    for p2_node in partitions[1]:
        if G.has_edge(p1_node,p2_node):
            edge_cut_list.append((p1_node,p2_node))
"
Class with Object as a parameter,"class Classic: pass
class NewStyle(object): pass

print(dir(Classic))
# ['__doc__', '__module__']

print(dir(NewStyle))
# ['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
"
How to write data to a binary file using Python,"out = [0]  # your output array

s = ""Example"" # a byte string, not a Unicode string
l = list(s)   # convert to array of ints

out = out + l
print out
"
Reset color cycle in Matplotlib,"def set_color_cycle(self, clist=None):
    if clist is None:
        clist = rcParams['axes.color_cycle']
    self.color_cycle = itertools.cycle(clist
"
Share a dictionary betweeen multiple live threads,"import thread

d = dict()
m = thread.allocate_lock()

def foo():
    m.acquire_lock()
    print(d['key'])

def bar():
    d['key'] = 'value'
    m.release_lock()

if __name__ == '__main__':

    m.acquire_lock()
    t1 = thread.start_new_thread(foo,())
    t2 = thread.start_new_thread(bar,())
"
What method attributes are used in Django?,"def perform_function_checks(function_list):
    for afunc in function_list:
        if getattr(afunc, 'takes_args'):
            print ""function '%s' takes args! how unusual!"" % (afunc.__name__,)
        if getattr(afunc, 'number_of_args'):
            print ""function '%s' takes %s args."" % (afunc.__name__, afunc.number_of_args)
        if getattr(afunc, 'type_of_args'):
            print ""function '%s' takes %s args: %s"" (afunc.__name__, len(afunc.type_of_args), ["", and "".join(str(item)) for item in afunc.type_of_args])
        if getattr(afunc, 'uses_black_magic'):
            print ""oh no! function '%s' uses black magic!"" % (afunc.__name__,)

perform_function_checks([add, subtract, get_attribute_value])

# prints:
# function 'add' takes args! how unusual!
# function 'add' takes 2 args.
# function 'add' takes 2 args: <type 'int'>, and <type 'int'>
# function 'subtract' takes args! how unusual!
# function 'subtract' takes 2 args.
# function 'subtract' takes 2 args: <type 'int'>, and <type 'int'>
# function 'get_attribute_value' takes args! how unusual!
# function 'get_attribute_value' takes 2 args.
# function 'get_attribute_value' takes 2 args: <type 'object'>, and <type 'str'>
# oh no! function 'get_attribute_value' uses black magic!
"
How to get the current model instance from inlineadmin in Django,"class MyModelAdmin(admin.ModelAdmin):
    def get_form(self, request, obj=None, **kwargs):
        kwargs['formfield_callback'] = partial(self.formfield_for_dbfield, request=request, obj=obj)
        return super(MyModelAdmin, self).get_form(request, obj, **kwargs)

    def formfield_for_dbfield(self, db_field, **kwargs):
        if db_field.name != ""car"":
            kwargs.pop('obj', None)
        return super(MyModelAdmin, self).formfield_for_dbfield(db_field, **kwargs)

    def formfield_for_manytomany(self, db_field, request=None, **kwargs):
        person = kwargs.pop('obj', None)
        if db_field.name == ""car"" and person:
            kwargs['queryset'] = Cars.objects.filter(owner=person)
        return super(MyModelAdmin, self).formfield_for_manytomany(db_field, request, **kwargs)
"
Getting names from HTML file via python,"source = urllib2.urlopen(link)
html = source.read()
source.close();
soup = BeautifulSoup(html, ""html.parser"")  
"
Writing loop to get the data during some specific periods in Python,"from datetime import timedelta, datetime

def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + timedelta(n)


start_date = datetime(year=2015, month=1, day=1)
end_date = datetime.today()

for single_date in daterange(start_date, end_date):
    value = single_date.strftime(""%Y-%m-%d"")

    print value
"
How to remove all symbols and spaces from the String?,">>> import string
>>> allowed = set(string.lowercase + string.digits)
>>> ''.join(filter(allowed.__contains__, a.lower()))
'kingstonusb1gb2gb32gb'
"
Using pandas fillna() on multiple columns,"In [36]: df = pd.DataFrame({'A': [0, np.nan, 2, 3, np.nan, 5], 'B': [1, 0, 1, np.nan, np.nan, 1]})

In [37]: df
Out[37]: 
    A   B
0   0   1
1 NaN   0
2   2   1
3   3 NaN
4 NaN NaN
5   5   1

In [38]: df2 = pd.DataFrame({'A': [0, np.nan, 2, 3, 4, 5], 'B': [1, 0, 1, 1, 0, 0]})

In [40]: df2
Out[40]: 
    A  B
0   0  1
1 NaN  0
2   2  1
3   3  1
4   4  0
5   5  0

In [52]: df.update(df2, overwrite=False)

In [53]: df
Out[53]: 
    A  B
0   0  1
1 NaN  0
2   2  1
3   3  1
4   4  0
5   5  1
"
Randomly Interleave 2 Arrays In Python,"c = map(next, random.sample([iter(a)]*len(a) + [iter(b)]*len(b), len(a)+len(b)))
"
Python: Sub sequence search,"import itertools

sequence = ""abccabac""

subsequence = ""abc""

for combo in itertools.combinations(enumerate(sequence), len(subsequence)):
    if """".join(pair[1] for pair in combo) == subsequence:
        print([pair[0] for pair in combo])
"
Python properties as instance attributes,"class Monster(object):
    def __init__(self, traits):
        self._traits = traits

    def __getattr__(self, name):
        if name in self._traits:
            return self._traits[name]
        raise AttributeError(name)
"
Using variable length argument lists and named parameters together,"def wrapper(f):
    def wrapped(*args, **kwargs):
        print kwargs[""uname""]
        return mainfunc(*args, **kwargs)
    return wrapped

@wrapper
def foo(uname=""Test""):
    return uname + ""bar""

# the @decorator is equivalent to `foo = wrapper(foo)`
"
finding identical rows and columns in a numpy array,"import itertools

for pair in itertools.combinations(range(len(A)),2):
    if np.array_equal(A[pair[0]],A[pair[1]]) and np.array_equal(A[:,pair[0]],A[:,pair[1]]): #compare columns
        print pair
"
Python: Filter lines from a text file which contain a particular word,[line for line in open('textfile') if 'apple' in line]
How to store arrays of pixels in Pygame,"coords = {}
coords['y1'] = [[255,255,255],[255,0,0]] #add dynamic keys to your dictionary and fill them with the right values
"
Clearing specific cache in Django,"$ ./manage.py shell
>>> from django.core.cache import cache
>>> cache.has_key('/post/1234/')
# this will return True or False, whether the key was found or not
# if False, keep trying until you find the correct key ...
>>> cache.has_key('domain.com/post/1234/') # including domain.com ?
>>> cache.has_key('www.domain.com/post/1234/') # including www.domain.com ?
>>> cache.has_key('/post/1234') # without the trailing / ?
"
memoize to disk - python - persistent memoization,"import json

def persist_to_file(file_name):

    def decorator(original_func):

        try:
            cache = json.load(open(file_name, 'r'))
        except (IOError, ValueError):
            cache = {}

        def new_func(param):
            if param not in cache:
                cache[param] = original_func(param)
                json.dump(cache, open(file_name, 'w'))
            return cache[param]

        return new_func

    return decorator
"
"how to remove characters from items in a list, using another list as reference",">>> [''.join(j for j in i if j not in forbiddenList) for i in tempList]
['ths', 's', '', 'test']
"
Python numpy: sum every 3 rows (converting monthly to quarterly),">>> a = numpy.random.rand(30000000)
>>> cProfile.run('sumeveryxrows(a, 3)')
         8 function calls in 0.263 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.258    0.258 <stdin>:1(<lambda>)
        1    0.005    0.005    0.263    0.263 <string>:1(<module>)
        1    0.000    0.000    0.258    0.258 _methods.py:31(_sum)
        1    0.000    0.000    0.263    0.263 {built-in method exec}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.258    0.258    0.258    0.258 {method 'reduce' of 'numpy.ufunc' objects}
        1    0.000    0.000    0.000    0.000 {method 'reshape' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.258    0.258 {method 'sum' of 'numpy.ndarray' objects}
"
Python regex: How to match a string at the end of a line in a file?,"var1 = 'network1'
print(re.search(r'.*(\s+'+ var1 + r':)', line).group(1))
"
Extract random values from list that fulfil criteria? Python,"random.choice([s for s in list_of_strings if len(s) > x])
"
Matching multiple regex patterns with the alternation operator?,"re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')"
How to read from a text file compressed with 7z in Python,"import os
import py7zlib

class SevenZFileError(py7zlib.ArchiveError):
    pass

class SevenZFile(object):
    @classmethod
    def is_7zfile(cls, filepath):
        """""" Determine if filepath points to a valid 7z archive. """"""
        is7z = False
        fp = None
        try:
            fp = open(filepath, 'rb')
            archive = py7zlib.Archive7z(fp)
            n = len(archive.getnames())
            is7z = True
        finally:
            if fp: fp.close()
        return is7z

    def __init__(self, filepath):
        fp = open(filepath, 'rb')
        self.filepath = filepath
        self.archive = py7zlib.Archive7z(fp)

    def __contains__(self, name):
        return name in self.archive.getnames()

    def bytestream(self, name):
        """""" Iterate stream of bytes from an archive member. """"""
        if name not in self:
            raise SevenZFileError('member %s not found in %s' %
                                  (name, self.filepath))
        else:
            member = self.archive.getmember(name)
            for byte in member.read():
                if not byte: break
                yield byte

    def readlines(self, name):
        """""" Iterate lines from an archive member. """"""
        linesep = os.linesep[-1]
        line = ''
        for ch in self.bytestream(name):
            line += ch
            if ch == linesep:
                yield line
                line = ''
        if line: yield line
"
Blocking Tkinter interface until thread finishes its task,"from tkinter import *
from tkinter.ttk import *
import time
import threading

class Interface:
    def __init__(self, master):
        self.master = master
        self.browse_button= Button (master, text=""Browse"", command=self.browser)
        self.browse_button.pack()
        self.progressbar = Progressbar(mode=""determinate"", maximum=75)

    def browser (self):
        t = threading.Thread(target=self.read_file, args=(""filename"",))
        self.progressbar.pack()
        self.browse_button.config(state=""disabled"")
        self.master.config(cursor=""wait"")
        self.master.update()

        t.start()
        while t.is_alive():
            self.progressbar.step(1)
            self.master.update_idletasks()  # or try self.master.update()
            t.join(0.1)

        self.progressbar.config(value=""0"")
        self.progressbar.pack_forget()
        self.browse_button.config(state=""enabled"")
        self.master.config(cursor="""")

    def read_file (self, filename):
        time.sleep(7)  # actually do the read here

window = Tk()
starter = Interface(window)
window.mainloop()
"
Python - Writing white space to imported CSV data,"''.join(elem.rjust(8) for elem in (i,j))
"
Python transforming one dimensional array into two dimensional array,">>> zip(*[iter(l)]*size) # Assuming 2 was the input
[(1, 2), (3, 4), (5, 6), (7, 8)]
"
Regular expression match a or b pattern,">>> import re
>>> files = [""noi100k_0p55m0p3_fow71f"",\
...      ""fnoi100v5_71f60s"",\
...      ""noi100k_0p55m0p3_151f_560s"",\
...      ""noi110v25_560s""]
>>> for i in files:
...     keyws = i.split(""_"")
...     for j in keyws:
...         match = re.match(r""noi(\w+)k|fnoi(\w+)v(\w+)|noi(\w+)v(\w+)"",j)
...         if match: 
...             results = match.group(1) or match.group(2) or match.group(4)
...             print ""Results :"", results
... 
Results : 100
Results : 100
Results : 100
Results : 110
"
How to use a .NET method which modifies in place in Python?,"itemIDs = map(int, itemIDs)
itemNames = map(unicode, itemNames)
"
search in pandas series des not work,"df[df['name'].isin([specific_name])]
"
"most concise way to operate over two lists, returning list of lists in python","matchMatrix = [[i.match(j) for j in targetLines] for i in matchLines ]
"
convert first column of data from text file into a list in python,">>> with open('abc') as f:
       lis = [line.split()[0] for line in f]
>>> lis
['12', '13', '14', '15', '16', '17', '18']
"
Double every letter in string,"# drewk's answer, optimized by using from_iterable instead of *
def double_chain(s):
    return ''.join(chain.from_iterable(zip(s, s)))

# Ashwini Chaudhary's answer
def double_mult(s):
    return ''.join([x*2 for x in s])

# Jon Clements' answer, but optimized to take the re.compile and *2 out of the loop.
r = re.compile('(.)')
def double_re(s):
    return r.sub(r'\1\1', s)
"
Unique attributes for certain data,"import re

last_post = soup.find('dt', text=re.compile('Last Post'))
last_post.find_next_sibling('dd').span.string
"
Unable to perform join in the inner lists of a list of lists,"new_list.append([sep.join(i)])
"
"How to sort a list of objects , based on an attribute of the objects?","ut.sort(key=lambda x: x.count, reverse=True)"
Conditionally parsing a string,"""{}{}{}"".format(subdomain, '.' if subdomain else '', fullDomain)
"
Unpickling python objects with a changed module path,"from .packageA import * # Ensures that all the modules have been loaded in their new locations *first*.
from . import packageA  # imports WrapperPackage/packageA
import sys
sys.modules['packageA'] = packageA  # creates a packageA entry in sys.modules
"
Using ctypes to grab a pointer from a nullary function (segfault) x64,"from ctypes import *;
clib = cdll.LoadLibrary('/home/soltanmm/tmp/a.out');
print(clib.r2())
"
Is there an easy way to add arguments with values to python3 cmd.Cmd?,"import cmd

def parse(arg):
    return tuple(k.partition('=') for k in arg.split())

class MyShell(cmd.Cmd):
    def do_foo(self, arg):
        for x, _, y in parse(arg):
            print(x, y)

    def complete_foo(self, text, line, begidx, endidx):
        # Cmd treats = as the end of params; we don't want that.
        if line.endswith('='):
            return ()

        opts = ['param1=', 'param2', 'param3=']
        return [opt for opt in opts if opt.startswith(text)]

MyShell().cmdloop()
"
Reading Text File From Webpage by Python3,"list(map(float,re.findall(""^X-DSPAM-Confidence: ([0-9.]+)"",qq, re.M)))
"
word/pair list using dictionaries and strings,">>> text= ""I say what I mean. I mean what I say. i do.""
>>> sentences = text.lower().split('.')
>>> dic = {}
>>> for i, sen in enumerate(sentences):
...     for word in sen.split():
...         if word not in dic:
...             dic[word] = [i]
...         elif dic[word][-1] != i:     # this prevents duplicate entries
...             dic[word].append(i)
... 
>>> dic
{'i': [0, 1, 2], 'do': [2], 'say': [0, 1], 'what': [0, 1], 'mean': [0, 1]}
"
Iterate list of numbers,">>> from itertools import product
>>> list(product(range(1, 10), repeat=2))
[(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9)]
"
Apache Spark CombineByKey with list of elements in Python,"aggregated_counts = (data
    .map(lambda kv: (kv, 1))
    .reduceByKey(add)
    .map(lambda kv: (kv[0][0], (kv[0][1], kv[1])))
    .groupByKey()
    .mapValues(lambda xs: (list(xs), sum(x[1] for x in xs))))

aggregated_counts.collect()
## [('a', ([('v', 1), ('u', 1)], 2)), ('b', ([('w', 1), ('x', 2)], 3))]
"
Python: convert a dot separated hex values to string?,">>> a=""73.69.67.6e.61.74.75.72.65""  
>>> """".join(chr(int(e, 16)) for e in a.split('.'))  
'signature'  
>>>
"
argparse argument order,"import argparse
class CustomAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if not 'ordered_args' in namespace:
            setattr(namespace, 'ordered_args', [])
        previous = namespace.ordered_args
        previous.append((self.dest, values))
        setattr(namespace, 'ordered_args', previous)
parser = argparse.ArgumentParser()
parser.add_argument('--test1', action=CustomAction)
parser.add_argument('--test2', action=CustomAction)
"
Django Template - Convert a Python list into a JavaScript object,"from django.core.serializers import serialize
from django.db.models.query import QuerySet, ValuesListQuerySet
from django.utils.safestring import mark_safe
from django.template import Library

import json

register = Library()

def jsonify(object):

    if isinstance(object, ValuesListQuerySet):
        return mark_safe(json.dumps(list(object)))
    if isinstance(object, QuerySet):
        return mark_safe(serialize('json', object))
    return mark_safe(json.dumps(object))

register.filter('jsonify', jsonify)
jsonify.is_safe = True   
"
Deleting rows with Python in a CSV file,"$ cat test.py 
import csv
with open('first.csv', 'rb') as inp, open('first_edit.csv', 'wb') as out:
    writer = csv.writer(out)
    for row in csv.reader(inp):
        if row[2] != "" 0"":
            writer.writerow(row)
$ cat first.csv 
6.5, 5.4, 0, 320
6.5, 5.4, 1, 320
$ python test.py 
$ cat first_edit.csv 
6.5, 5.4, 1, 320
"
python 2.7.5+ print list without spaces after the commas,"print(repr(data).replace("" "", """"))                 # [1,2,3,4]
"
Python permutations of x unique characters repeated y times each,"from itertools import permutations

permutation_list = set(permutations(x * y))
"
"I use os.system to run executable file, but it need a .so file, it can't find library","import subprocess
env = os.environ.copy()
env['LD_LIBRARY_PATH'] = os.getcwd()
proc = subprocess.Popen(""./mydemo"", shell=True, env=env)
proc.wait()
"
Extracting rows from a table,"from lxml import html

HTML = """"""<table border=""0"" cellspacing=""1"" cellpading=""3"" width=""100%"">
<tr bgcolor=""#505050"">
    <td><b></b></td>
    <td colspan=""2"" align=""center"" class=""white""><b>Last Day</b></td>
    <td colspan=""2"" align=""center"" class=""white""><b>Last Week</b></td>
</tr>
<tr bgcolor=""#505050"">
    <td class=""white""><b>Race</b></td>
    <td align=""center"" class=""white""><b>Killed Players</b></td>
    <td align=""center"" class=""white""><b>Killed by Players</b></td>
    <td align=""center"" class=""white""><b>Killed Players</b></td>
    <td align=""center"" class=""white""><b>Killed by Players</b></td>
</tr>
<tr bgcolor=""#F1E0C6"">
    <td>A</td>
    <td align=""right"">0</td>
    <td align=""right"">3</td>
    <td align=""right"">0</td>
    <td align=""right"">13</td>
</tr>
<tr bgcolor=""#D4C0A1"">
    <td>B</td>
    <td align=""right"">0</td>
    <td align=""right"">0</td>
    <td align=""right"">0</td>
    <td align=""right"">7</td>
</tr>
<tr bgcolor=""#F1E0C6"">
    <td>C</td>
    <td align=""right"">0</td>
    <td align=""right"">0</td>
    <td align=""right"">0</td>
    <td align=""right"">1</td>
</tr>
<tr bgcolor=""#D4C0A1"">
    <td>D</td>
    <td align=""right"">0</td>
    <td align=""right"">0</td>
    <td align=""right"">0</td>
    <td align=""right"">7</td>
</tr>
<tr bgcolor=""#505050"">
    <td class=white><b>Total</b></td>
    <td align=""right"" class=""white""><b>210</b></td>
    <td align=""right"" class=""white""><b>1060458</b></td>
    <td align=""right"" class=""white""><b>1132</b></td>
    <td align=""right"" class=""white""><b>5585115</b></td>
</tr>""""""

tree = html.fromstring(HTML)
results = defaultdict

for item in tree.xpath('//table/tr[not(contains(@bgcolor, ""505050""))]'):
    print item.xpath('.//td/text()')
"
Cannot send an email with python smtp,"import os
import email
import email.encoders
import email.mime.text
import smtplib

# message/email details
my_email = 'myemail@gmail.com'
my_passw = 'asecret!'
recipients = ['jack@gmail.com', 'jill@gmail.com']
subject = 'This is an email'
message = 'This is the body of the email.'
file_name = 'C:\\temp\\test.txt'

# build the message
msg = email.MIMEMultipart.MIMEMultipart()
msg['From'] = my_email
msg['To'] = ', '.join(recipients)
msg['Date'] = email.Utils.formatdate(localtime=True)
msg['Subject'] = subject
msg.attach(email.MIMEText.MIMEText(message))

# build the attachment
att = email.MIMEBase.MIMEBase('application', 'octet-stream')
att.set_payload(open(file_name, 'rb').read())
email.Encoders.encode_base64(att)
att.add_header('Content-Disposition', 'attachment; filename=""%s""' % os.path.basename(file_name))
msg.attach(att)

# send the message
srv = smtplib.SMTP('smtp.gmail.com', 587)
srv.ehlo()
srv.starttls()
srv.login(my_email, my_passw)
srv.sendmail(my_email, recipients, msg.as_string())
"
"How can I scrape the value/text of an exact <td> using its xpath, after selecting a drop-down using selenium?","from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


driver = webdriver.Chrome()
wait = WebDriverWait(driver, 10)

url = 'http://www.cmegroup.com/trading/energy/crude-oil/light-sweet-crude_quotes_settlements_futures.html'
driver.get(url)

select = Select(driver.find_element_by_id(""cmeTradeDate""))
for option in select.options:
    # selecting a value in the dropdown
    select.select_by_value(option.get_attribute(""value""))

    # wait for the table to load
    wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, "".cmeProgressPanel"")))

    # get the desired price
    selected_price = driver.find_element_by_xpath('//*[@id=""settlementsFuturesProductTable""]/tbody/tr[1]/td[6]')
    print(option.text, selected_price.text)
"
Find the longest common interval between points on graph,"from itertools import chain, groupby

def get_longest_interval(x):
    longest_interval = max(
        ([v for _, v in grp] for k, grp in groupby(enumerate(
            set.intersection(*(set(chain(*(range(int(start), int(end)+1) for (start, end) in f_intervals))) for f_intervals in x))
        ), lambda (index, num): index-num)), key=len
    )
    return longest_interval[0], longest_interval[-1]

x1 = [[['3', '7'], ['9', '17']],
      [['1', '5'], ['10', '20']],
      [['0', '6'], ['12', '19']]]

x2 = [[[3, 7], [9, 21]],
      [[1, 5], [10, 20]],
      [[0, 6]]]

for x in x1, x2:
    print get_longest_interval(x)

# This prints
(12, 17)
(3, 5)
"
Find phase difference between two (inharmonic) waves,"import numpy, scipy
from scipy.signal import correlate

# Load datasets, taking mean of 100 values in each table row
A = numpy.loadtxt(""vb-sync-XReport.txt"")[:,1:].mean(axis=1)
B = numpy.loadtxt(""vb-sync-YReport.txt"")[:,1:].mean(axis=1)

nsamples = A.size

# regularize datasets by subtracting mean and dividing by s.d.
A -= A.mean(); A /= A.std()
B -= B.mean(); B /= B.std()

# Put in an artificial time shift between the two datasets
time_shift = 20
A = numpy.roll(A, time_shift)

# Find cross-correlation
xcorr = correlate(A, B)

# delta time array to match xcorr
dt = numpy.arange(1-nsamples, nsamples)

recovered_time_shift = dt[xcorr.argmax()]

print ""Added time shift: %d"" % (time_shift)
print ""Recovered time shift: %d"" % (recovered_time_shift)

# SAMPLE OUTPUT:
# Added time shift: 20
# Recovered time shift: 20
"
Converting string to datetime object in Python (GAE)?,"In [70]: import dateutil.parser as parser
In [71]: parser.parse('Sunday 31st of July 2005 ( 02:05:50 PM )',fuzzy=True)
Out[71]: datetime.datetime(2005, 7, 31, 14, 5, 50)
"
Python handling options and args,"import argparse
parser = argparse.ArgumentParser()
parser.add_argument(""-u"", action='store_true')
parser.add_argument(""-d"")
args = parser.parse_args()

if args.u and not args.d:
    parser.error('You must use the -d switch when setting -u!')
"
Layouts within Layouts in Kivy with Python,"class ListScreen(Screen):

    layout = BoxLayout(orientation ='vertical')
    layout.add_widget(top_buttons=BoxLayout()) # <--------
    top_buttons.add_widget(save=Button(text='Save')
"
Pythonic shortcut (syntax sugar) for nested self.__parent__.__parent__,"value = find_interface(self, ResourceA if some_condition else ResourceB).method()
"
Does it takes RAM to save a readlines array?,"with open(outputfile,'w') as fo:
    for inputfile in inputfiles: #assuming inputfiles is a list of filepaths
        with open(inputfile,'r') as fi:
            for chunk in iter(lambda: fi.read(chunksize), ''):
                fo.write(fi.read(chunk))
            fo.write('\n') #newline between each file(might not be necessary)
"
python multiple inputs and multiple outputs,"import glob
indir, outdir = '/home/directory/', '/home/directory/out/'
files = glob.glob1(indir, '*.sam')
infiles  = [indir  + f              for f in files]
outfiles = [outdir + f[:-3] + ""out"" for f in files]
for infile, outfile in zip(infiles, outfiles):
    do_stuff_with_files(infile, outfile)
"
Write value to hidden element with selenium python script,"browser.execute_script(""document.getElementById('XYZ').value+='1'"")"
Filter numpy array by comparing elements to elements in prior row without looping,"import pandas as pd

df = pd.DataFrame([[43.97, 43.97, 43.75, 43.94],
                   [43.97, 44.25, 43.97, 44.25],
                   [44.22, 44.38, 44.12, 44.34],
                   [44.41, 44.84, 44.38, 44.81],
                   [44.97, 45.09, 44.47, 45.00],
                   [44.97, 45.06, 44.72, 44.97],
                   [44.97, 45.12, 44.91, 44.97]],
                  columns=['O', 'H', 'L', 'C'])

values = df[df.C > df.H.shift(2)]
print values
"
Python: Looping through multiple csv files and making multiple new csv files,"import glob
from shutil import copy2
import shutil
files = glob.glob('cvs_DIR/*csv')

for file in files:

    try:
        # need to have full path of cvs_DIR
        oldName = os.path.join(cvs_DIR, file)
        newName = os.path.join(cvs_DIR, file[:4] + '_offset.csv')
        copy2(oldName,newName)

    except shutil.Error as e:
        print('Error: {}'.format(e))
"
Matching parts of lines in a file (python),"bc = {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A', 'N':'N'}

f = open('chr22.fa')
l = ''.join(line.strip() for line in f)
f.seek(0)

for line in f:
    fields = line.split('\t')
    gene_ID, chr, strand = fields[:2]

    start = int(fields[3])
    end = int(fields[4])

    if strand == '-':
        start, end = -(start + 1), -(end + 1)

    geneseq = ''.join(bc[base.upper()] for base in l[start:end])
"
"Message ""encryption"" through a set of given rules returns incomplete result","import string # This module holds lists of characters that you would find useful.

def encryptMessage(original_message):
    original_message = str(original_message)
    secret_message = []
    conversions = {""1"": ""@"", ""2"": ""#"", ""3"": ""$""}
    for letter in original_message:
        if letter in string.ascii_uppercase:
            secret_message.append(letter.lower() + ""^"")
        elif letter in '123':
            secret_message.append(conversions[letter])
        elif letter in string.ascii_lowercase:
            secret_message.append(letter)
        else:
            secret_message.append(""*"")
    return ''.join(secret_message)
"
If I truncate a file to zero in Python 3 do I also need to seek to position zero?,">>> with open('/tmp/test', 'w') as test:
...     test.write('hello!')
...     test.flush()
...     test.truncate(0)
...     test.tell()
... 
6
0
6
"
How to convert a Python tkinter canvas postscript file to an image file readable by the PIL?,"import io
def savefirst():
    cnv = getscreen().getcanvas() 
    global hen
    ps = cnv.postscript(colormode = 'color')
    hen = filedialog.asksaveasfilename(defaultextension = '.jpg')
    im = Image.open(io.BytesIO(ps.encode('utf-8')))
    im.save(hen + '.jpg')
"
How can I join two queries on the same table with python / sqlalchemy?,"subq = self.session.query(DataMeasurement).\
    filter_by(data_source='Sensor1').subquery()
q = self.session.query(
    DataMeasurement.timestamp,
    # Use labels to distinguish between identically named columns.
    # This is optional.
    subq.c.sensor_output.label('output1'),
    DataMeasurement.sensor_output.label('output2')
).filter(
    (DataMeasurement.data_source == 'Sensor2') &
    (DataMeasurement.timestamp == subq.c.timestamp)
)

# Simply get a list of named tuples.
print q.all()
# Or access each column using properties.
for row in q:
    print row.timestamp, row.output1, row.output2
"
parsing HTML table using python - HTMLparser or lxml,">>> d = data[4:]
>>> d[0] = d[0][1:]
>>> zip(*d)
[('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'), ('0', '1', '0', '1', '7', '0', '0', '2', '2', '3', '0', '1'), ('1', '0', '0', '0', '0', '1', '1', '0', '0', '1', '3', '0'), ('3', '8', '4', '5', '6', '14', '6', '5', '10', '8', '3', '4'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('4', '2', '4', '3', '8', '7', '8', '8', '16', '4', '6', '4'), ('16', '4', '7', '12', '4', '15', '17', '15', '22', '28', '23', '13'), ('0', '1', '0', '1', '1', '0', '1', '1', '2', '0', '1', '2'), ('6', '6', '9', '11', '13', '17', '15', '17', '19', '15', '8', '15'), ('2', '1', '2', '0', '0', '1', '2', '0', '4', '2', '1', '1'), ('2', '2', '1', '3', '0', '2', '1', '2', '2', '1', '2', '0'), ('0', '0', '0', '0', '2', '0', '0', '0', '0', '0', '0', '0'), ('3', '3', '0', '3', '2', '5', '10', '2', '0', '1', '1', '2'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('3', '0', '2', '0', '1', '1', '2', '5', '2', '1', '3', '1'), ('2', '4', '9', '3', '7', '3', '15', '16', '8', '6', '7', '2'), ('0', '0', '0', '2', '1', '0', '2', '0', '0', '0', '1', '0'), ('26', '25', '45', '34', '30', '24', '53', '33', '27', '15', '20', '29'), ('1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('0', '0', '0', '0', '0', '0', '3', '0', '1', '1', '0', '1'), ('0', '1', '0', '1', '0', '0', '3', '0', '0', '0', '0', '0'), ('7', '2', '7', '2', '7', '5', '6', '11', '8', '3', '8', '7'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('5', '4', '10', '6', '5', '6', '7', '2', '11', '9', '3', '3'), ('6', '14', '16', '18', '12', '13', '16', '25', '31', '26', '18', '20'), ('0', '1', '0', '1', '0', '1', '0', '4', '1', '1', '3', '1'), ('8', '1', '5', '3', '4', '9', '9', '8', '9', '8', '7', '13'), ('2', '0', '1', '0', '1', '1', '1', '0', '0', '4', '0', '0'), ('0', '0', '1', '0', '0', '1', '1', '0', '0', '0', '0', '1'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('0', '0', '1', '0', '0', '0', '0', '1', '1', '0', '0', '0'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'), ('0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0'), ('0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0'), ('2', '0', '4', '5', '6', '2', '2', '3', '1', '1', '3', '3'), ('0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0')]
"
numpy: column-wise dot product,">>> from numpy.core.umath_tests import inner1d
>>> A = np.array([[1,2,3,4],[5,6,7,8]])
>>> inner1d(A.T, A.T)
array([26, 40, 58, 80])
"
Python - In a string find a character and print remaining part of string in a new line,">>> strs = ""abc+bcd+cdf""
>>> re.sub(r'\+|;','\n',strs)
'abc\nbcd\ncdf'
"
Breaking out of infinite loop,"while True:
    print(""\n1. Surname\n2. D.O.B\n3. Quit"")
    try:
        select = int(input(""Please select an option: ""))
        if select == 1:
            surnameSearch()
        elif select == 2:
            DOB_search(BkRdr)
        elif select == 3:
            break
    except:
        print(""That was an incorrect option, please try again:"")
"
Generator which leaves a placeholder at the beginning and at the end of the input iterator intact,"from __future__ import print_function
from  itertools import tee, izip, ifilterfalse


def window(iterable,n):
    els = tee(iterable,n)
    for i,el in enumerate(els):
        for _ in range(i):
            next(el, None)
    return izip(*els)


def replace(iterable,placeholder=255):
    it = enumerate(iterable)

    def save_last(iterable):
        for i in iterable:
            yield i
        replace.last_index = i[0] #Save the last value
    it = save_last(it)

    it = ifilterfalse(lambda x: x[1]==placeholder, it)
    for i,(left,right) in enumerate(window(it,2)):
        if i==0:
            for j in range(left[0]):
                yield placeholder
        yield left[1]
        if right[0]>left[0]+1:
            if left[1]==right[1]:
                for _ in range(right[0]-left[0]-1):
                    yield left[1]
            else:
                for _ in range(right[0]-left[0]-1):
                    yield placeholder
    yield right[1]
    if right[0]<replace.last_index:
        for i in range(replace.last_index-right[0]):
            yield placeholder


a = [255,1,255,255,1,255,255,255,2,2,255,255,255,2,2,3,255,255,255,3,255,255]        
print('\nInput: {}'.format(a))
output = list(replace(a))
print('Proram output: {}'.format(output))
print('Goal output  : {}'.format([255,1,1,1,1,255,255,255,2,2,2,2,2,2,2,3,3,3,3,3,255,255]))
"
Match >>number and replace it,">>(\d+) 
"
Variables not receiving amounts? Python,"from datetime import datetime,timedelta
def main():
    time_Amount = timedelta( seconds = int(input('Enter time in seconds: ')))

    while (time_Amount == timedelta(seconds = 0)):
        time_Amount = timedelta( seconds = int(input(""Enter a non-zero amount of seconds: "")))    

    calc_time = datetime(1,1,1) + time_Amount
    print(""--------Break Down--------"")
    print(""%d day(s), %d hour(s), %d minute(s), %d second(s)"" %
          (calc_time.day-1, calc_time.hour, calc_time.minute, calc_time.second))
"
Python - Flatten lists of lists of two different types in one function,">>> list1 = [[[0 , 0], [0, 1], [0 ,2]]]
>>> list2 = [[[[0, 0] , [0, 1], [0, 2]], [[1, 0], [1, 1], [1 ,2]]]]
>>> [sum(x, []) for x in list1]
[[0, 0, 0, 1, 0, 2]]
>>> [sum(x, []) for a in list2 for x in a]
[[0, 0, 0, 1, 0, 2], [1, 0, 1, 1, 1, 2]]
>>> 
"
How to intersect dictionary key (that is a text file) and print the value from the key that generated more intersections,"    ...
#use text files as keys
most_intersection_key = None
most_intersection = None
most_intersection_len = 0
me = me.split()
for lyrics in songs:
    with open(lyrics) as f:
        the_plant = f.read().split()
    intersection = me_and_the_plant(me, the_plant)
    intersection_len = len(intersection)
    if intersection_len > most_intersection_len:  # most seen?
        most_intersection_key = lyrics
        most_intersection_len = intersection_len
        most_intersection = intersection

if most_intersection_key:
    print most_intersection_key, most_intersection_len, most_intersection
else:
    print 'there were no intersections'
"
Easy way to find what item repeated in list,"In [5]: Counter(l).most_common()
Out[5]: [(4, 2), (1, 1), (2, 1), (3, 1)]
"
Conditional import in a module,"if condition:
    import matplotlib as mlib
else:
    import modifiedmatplotlib as mlib
"
letter/word guessing game in python,"allletters = set(list('abcdefghijklmnopqrstuvwxyz'))
while( len(usedletters) != len(allletters) ):
    guessedletter = raw_input(""pick a letter"")
    allletters.difference_update(guessedletter)
"
"Having list of keys, get list/tuple of values from dict","""http://{0[listener_port]}:{0[listener_host]}"".format(self.options)
"
Rounding entries in a Pandas DafaFrame,"df.round({'Alabama_exp': 2, 'Credit_exp': 3})"
Scatter plots in Pandas/Pyplot: How to plot by category,"import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
np.random.seed(1974)

# Generate Data
num = 20
x, y = np.random.random((2, num))
labels = np.random.choice(['a', 'b', 'c'], num)
df = pd.DataFrame(dict(x=x, y=y, label=labels))

groups = df.groupby('label')

# Plot
fig, ax = plt.subplots()
ax.margins(0.05) # Optional, just adds 5% padding to the autoscaling
for name, group in groups:
    ax.plot(group.x, group.y, marker='o', linestyle='', ms=12, label=name)
ax.legend()

plt.show()
"
How to find all possible sequences of elements in a list?,">>> from itertools import permutations
>>> list(permutations([2, 3, 4]))
[(2, 3, 4), (2, 4, 3), (3, 2, 4), (3, 4, 2), (4, 2, 3), (4, 3, 2)]
"
Sorting the catalog results by multiple fields,"results = portal_catalog.searchResults(query)
results = sorted(results, key=lambda b: (b.item_publication_year, b.item_publication_month))
"
Cleaning HTML tables with Pandas,">>> url = 'http://www.astro.keele.ac.uk/jkt/debcat/'
>>> df = pd.read_html(url, header=0)
>>> df1 = df[1]
>>> df1.head()
     System    Period (days)   V  B-V   Spectral type   \
0  V3903 Sgr            1.744      NaT             NaT   
1   V467 Vel            2.753      NaT             NaT   
2     EM Car            3.414      NaT             NaT   
3      Y Cyg            2.996      NaT             NaT   
4   V478 Cyg            2.881      NaT             NaT   

                Mass (Msun )               Radius (Rsun)   \
0  27.27 ± 0.55 19.01 ± 0.44  8.088 ± 0.086 6.125 ± 0.060   
1     25.3 ± 0.7 8.25 ± 0.17      9.99 ± 0.09 3.49 ± 0.03   
2  22.89 ± 0.32 21.43 ± 0.33      9.35 ± 0.17 8.34 ± 0.14   
3  17.57 ± 0.27 17.04 ± 0.26      5.93 ± 0.07 5.78 ± 0.07   
4  16.67 ± 0.45 16.31 ± 0.35  7.423 ± 0.079 7.423 ± 0.079   

        Surface gravity (cgs)                 log Teff (K)   \
0  4.058 ± 0.016 4.143 ± 0.013  4.580 ± 0.021 4.531 ± 0.021   
1  3.842 ± 0.016 4.268 ± 0.017  4.559 ± 0.031 4.402 ± 0.046   
2  3.856 ± 0.017 3.926 ± 0.016  4.531 ± 0.026 4.531 ± 0.026   
3      4.16 ± 0.10 4.18 ± 0.10  4.545 ± 0.007 4.534 ± 0.007   
4  3.919 ± 0.015 3.909 ± 0.013  4.484 ± 0.015 4.485 ± 0.015   

                 log (L/Lsun)   [M/H]  (dex)   \
0  5.087 ± 0.029 4.658 ± 0.032            NaN   
1  5.187 ± 0.126 3.649 ± 0.110            NaN   
2      5.02 ± 0.10 4.92 ± 0.10            NaN   
3                          NaN    0.00 ± 0.00   
4      4.63 ± 0.06 4.63 ± 0.06            NaN   

                               References and notes   
0                   Vaz et al. (1997A&A...327.1094V)  
1             Michalska et al. (2013MNRAS.429.1354M)  
2           Andersen & Clausen (1989A&A...213..183A)  
3       Simon, Sturm & Fiedler (1994A&A...292..507S)  
4  Popper & Hill (1991AJ....101..600P) Popper & E...  

[5 rows x 11 columns]
"
Pandas Time Index pick largest number/last number on given day,"df.groupby('Date').agg({'Actual':'last','Predicted':'last','Error':'last'})
"
How to extract numerical data from a text file,"no_data = [int(num) for num in new_data]
# or
no_data = map(int, new_data)
"
Python: How can I read the elements,">>> from collections import Counter
>>> c = Counter({' ': 18, 'r': 14, 'i': 10, 'b': 8, 'm': 7, 'j': 6, 'v': 6, 'x': 6, 'p': 4, 'w': 4, 'k': 3, 'y': 3, 'l': 2, 'n': 2, 'u': 2, '\n': 1, 'e': 1, 'd': 1, 'h': 1, 'q': 1, 's': 1, 't': 1})
>>> c['r']
14
"
Python Create Combinations from Multiple Data Frames,"expand_grid(dict(var_1.to_dict('list'), **var_2.to_dict('list')))

In [122]: expand_grid(dict(var_1.to_dict('list'), **var_2.to_dict('list')))
Out[122]:
     val_1  val_2
0  0.00789    0.5
1  0.00789    1.0
2  0.01448    0.5
3  0.01448    1.0
4  0.03157    0.5
5  0.03157    1.0
"
Extract block from CSS by Regular expression or any other method?,"/\* *Custom-D Start *\*/\s*(.*?)/\* *Custom-D End *\*/
"
Python specific format output with itertools.product,"e = [['x'], [0, 1], [0, 1, 2]]
product(e)   # won't work
product(e[0], e[1], e[2])   # ok when e's length is exactly 3
product(*e)   # works for any e -> equivalent to product(e[0], e[1], ....)
"
Getting a new series conditional on some rows being present in Python and Pandas,"In [11]: res = pd.merge(df[df['Item_Id'] == 1], df[df['Item_Id'] == 2],
                        on=['weeknum', 'Location_Id'])

In [12]: res
Out[12]:
   weeknum  Location_Id  Item_Id_x  averageprice_x  Item_Id_y  averageprice_y
0   201138         8501          1        0.129642          2        0.188274
"
"in Python, how to convert list of float numbers to string with certain format?","str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]
"
numpy.array boolean to binary?,"In [10]: vector_C.astype(int)
Out[10]: array([1, 0, 0, 0])

In [11]: vector_C.astype(float)
Out[11]: array([ 1.,  0.,  0.,  0.])
"
Python select columns with similar names,"l = ([u'VESSELTYPE', u'VESSELNAME', u'PERIODSTART', u'PERIODEND', u'ESTREDELI', u'HIRE', u'DAYS Mar-14', u'DAYS Q2 2014', u'DAYS Q3 2014', u'DAYS Q4 2014', u'DAYS Q1 2015', u'DAYS Q2 2015', u'DAYS Q3 2015', u'DAYS Q4 2015', u'NUMDAYS'], 'AnotherItem')

days = [s for s in l[0] if s.startswith('DAYS')]
print days
"
Adding multiple dictionaries to a key in python dictionary,"if name is not None and ent is not None and col is not None:
    value.setdefault(name, []).append({ent: col})
"
Selenium with Python - find elements of more than one css class,"elements = driver.find_elements_by_css_selector("".dropdown"")
# or
elements = driver.find_elements_by_class_name(""dropdown"")
# elements[0]
# elements[1]
# ...
"
Iterating over list or single element in python,">>> class MyIter(object):
...     def __iter__(self):
...         return iter(range(10))
... 
>>> i = MyIter()
>>> isinstance(i, collections.Iterable)
True
>>> collections.Iterable.__subclasshook__(type(i))
True
"
fill in list in multiple steps,"import itertools

""""""Finds all non-negative integer sequences whose sum equals `total`, and who have `size` elements.""""""
def possible_sums(total, size):
    if total == 0:
        yield [0]*size
        return
    if size == 1:
        yield [total]
        return
    for i in range(total+1):
        left = [i]
        for right in possible_sums(total-i, size-1):
            yield left + right

""""""
combines two lists a and b in order like:
[a[0], b[0], a[1], b[1]...]

""""""
def interleave(a,b):
    result = []
    for pair in itertools.izip_longest(a,b):
        for item in pair:
            if item is not None:
                result.append(item)
    return result

""""""flattens a list of lists into a one dimensional list""""""
def flatten(seq):
    return [x for item in seq for x in item]

def permutations(tup, limit):
    one_segments = [[1]*size for size in tup]
    for i in range(len(tup)-1):
        one_segments[i].append(0)
    remaining_zeroes = limit - sum(tup) - len(tup) + 1
    assert remaining_zeroes >= 0, ""not enough room to separate ranges!""
    for gap_sizes in possible_sums(remaining_zeroes, len(tup)+1):
        zero_segments = [[0]*size for size in gap_sizes]
        yield flatten(interleave(zero_segments, one_segments))

for seq in permutations((4, 3), 10):
    print seq
"
Disabling button state from other method,"class Abc:

    def __init__(self,root):
        p1Buzz = Button(root, text = ""P1 BUZZ"", command = self.buzzed)
        p1Buzz.pack()
        self.p1A = Button(root, text = ""A"")
        self.p1A.config(state='disabled')
        self.p1A.pack()

    def buzzed(self):
        self.p1A.config(state='normal')

if __name__ == '__main__':
    root = Tk()
    myapp = Abc(root)
    root.mainloop()
"
How do I get nodes from the specific edge in the networkx?,"import networkx as nx
g = nx.Graph()
g.add_edge(1,2)
g.add_edge(2,3)
g.edges()
"
List of classes to dict,"people_dict = {p.get_name(): p for p in people_list}
"
How can I execute shell command with a | pipe in it,"import subprocess

subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)
"
Access multiple elements of list knowing their index,">>> import numpy as np
>>> a = np.array([-2, 1, 5, 3, 8, 5, 6])
>>> b = [1, 2, 5]
>>> print list(a[b])
[1, 5, 5]
"
Plus and minus sequence in Python,">>> (-1)**0
1
>>> (-1)**1
-1
>>> (-1)**2
1
>>> (-1)**3
-1
>>> (-1)**4
1
"
SimpleHTTPServer add default.htm default.html to index files,"import os
import sys
import SimpleHTTPServer
import BaseHTTPServer

class MyHTTPRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        if not self.redirect():
            SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)

    def do_HEAD(self):
        if not self.redirect():
            SimpleHTTPServer.SimpleHTTPRequestHandler.do_HEAD(self)

    def redirect(self):
        path = self.translate_path(self.path)
        if os.path.isdir(path):
            for base in ""index"", ""default"":
                for ext in "".html"", "".htm"", "".txt"":
                    index = base+ext
                    index_path = os.path.join(path, index)
                    if os.path.exists(index_path):
                        new_path = self.path
                        if not new_path.endswith('/'):
                            new_path += '/'
                        new_path += index

                        self.send_response(302)
                        self.send_header(""Location"", new_path)
                        self.end_headers()
                        return True
        return False

def test(HandlerClass = MyHTTPRequestHandler,
         ServerClass = BaseHTTPServer.HTTPServer):
    BaseHTTPServer.test(HandlerClass, ServerClass)


if __name__ == '__main__':
    test()
"
Python Loops Complication,"counter = 0
while counter < 3:
    counter += 1
"
Python: find difference in dicts,"print(set(dictA.iteritems()).difference(dictB.iteritems()))
"
Sum up non-unique rows in DataFrame,"df.groupby('id').sum().reset_index()
# or
df.groupby('id', as_index=False).sum()   # @John_Gait
"
python multi-processing zombie processes,"def f(x):
    return x*x

if __name__ == '__main__':
    pool = Pool(processes=4)              # start 4 worker processes
    result = pool.apply_async(f, [10])    # evaluate ""f(10)"" asynchronously
    print result.get(timeout=1)           # prints ""100"" unless your computer is *very* slow
    print pool.map(f, range(10))          # prints ""[0, 1, 4,..., 81]""
"
python dictionary evaluates true if key is not present,"if ('verision') and ('importance' in a):
"
Create a list (of tuples?) from two lists of different sizes,"import itertools

def task(kw,text):
    i = itertools.cycle(kw)
    return tuple(next(i)+t if t.isalpha() else t for t in text)

print(task('lemon','hi there!'))
"
Check if R is installed from python,"from subprocess import Popen, PIPE
proc = Popen([""which"", ""R""],stdout=PIPE,stderr=PIPE)
exit_code = proc.wait()
if exit_code == 0:
    print (""Installed"")
"
How to work with UTF-16 in python ctypes?,"import sys
import ctypes

if sys.version_info[0] > 2:
    unicode = str

def decode_utf16_from_address(address, byteorder='little',
                              c_char=ctypes.c_char):
    if not address:
        return None
    if byteorder not in ('little', 'big'):
        raise ValueError(""byteorder must be either 'little' or 'big'"")
    chars = []
    while True:
        c1 = c_char.from_address(address).value
        c2 = c_char.from_address(address + 1).value
        if c1 == b'\x00' and c2 == b'\x00':
            break
        chars += [c1, c2]
        address += 2
    if byteorder == 'little':
        return b''.join(chars).decode('utf-16le')
    return b''.join(chars).decode('utf-16be')

class c_utf16le_p(ctypes.c_char_p):
    def __init__(self, value=None):
        super(c_utf16le_p, self).__init__()
        if value is not None:
            self.value = value

    @property
    def value(self,
              c_void_p=ctypes.c_void_p):
        addr = c_void_p.from_buffer(self).value
        return decode_utf16_from_address(addr, 'little')

    @value.setter
    def value(self, value,
              c_char_p=ctypes.c_char_p):
        value = value.encode('utf-16le') + b'\x00'
        c_char_p.value.__set__(self, value)

    @classmethod
    def from_param(cls, obj):
        if isinstance(obj, unicode):
            obj = obj.encode('utf-16le') + b'\x00'
        return super(c_utf16le_p, cls).from_param(obj)

    @classmethod
    def _check_retval_(cls, result):
        return result.value

class UTF16LEField(object):
    def __init__(self, name):
        self.name = name

    def __get__(self, obj, cls,
                c_void_p=ctypes.c_void_p,
                addressof=ctypes.addressof):
        field_addr = addressof(obj) + getattr(cls, self.name).offset
        addr = c_void_p.from_address(field_addr).value
        return decode_utf16_from_address(addr, 'little')

    def __set__(self, obj, value):
        value = value.encode('utf-16le') + b'\x00'
        setattr(obj, self.name, value)
"
how to use Json in Python,"self.__statusdata = json.dumps(statusdata)
statusdata = json.loads(self.__statusdata)
"
Django lte/gte query on a list,"from numpy import array as a
gpstimes=a([151,152,153,190,649,652,920,996])
starts=a([100,600,900,1000])
ends=a([180,650,950,1000])
names=a(['a','b','c','d',])
names_for_times=[]

for time in gpstimes:
    start_pos=starts.searchsorted(time)
    end_pos=ends.searchsorted(time)
    if start_pos-1 == end_pos:
        print time, names[end_pos]
    else:
        print str(time) + ' was not within any frame'
"
Split an array according to it's information,"#we separate the diameters from the rest
diameter_column= arr[:,0]
#we create a (1D) bool array that match diameter between 0 and 20
diameter_filter=(diameter_column<=20) * (diameter_column>=0)
#we use the boolean array as an index to select the right asteroids
filtered_arr=arr[diameter_filter,:]
"
Best way to iterate through entries delimited by two keywords?,"import re

# the regular expression treats newlines as a regular character, so the
# multiline entries are okay. It's non-greedy, so it gets individual entries.
pat = re.compile(r'&CRB(.+?)&END',  re.DOTALL)

s = ''' &CRB  A='test1'   B=123,345, 678   &END
Misc text potentially between entries ...
&CRB  A='test2'   
             B=788, 345, 3424   &END
&CRB  A='test3'   
             B=788, 345, 3424   &END
&CRB  A='test4' B=788, 345, 3424   &END'''

for entry in pat.findall(s):
   # do something with each entry
   print entry
"
Greatest Common Superclass,"def gcs(*instances):
    classes = [type(x).mro() for x in instances]
    for x in classes[0]:
        if all(x in mro for mro in classes):
            return x

print gcs(b, e)
print gcs(d, e)
print gcs(e, e)
"
Alternative to python string item assignment,">>> b = bytearray('abc0efg')
>>> b[3] = 'd'
>>> b
bytearray(b'abcdefg')
"
Python3 how to seperate items in truple,">>> list1 = 'it is, a good,day'
>>> ' ouf '.join(map(str.strip,list1.split(',')))
'it is ouf a good ouf day'
"
Create a specialized dictionary from a text file,"with open('abc') as f:
    dic = dict(line.split()[1:] for line in f)

>>> print(dic)
{'NAME': '0', 'MOREOFTHESAME': '1'}
"
Pygame Text Anchor Right,"# first text draw normally

text_1 = self.font.render(message_1, True, color)
text_1_rect = text_1.get_rect()

# second text

text_2 = self.font.render(message_2, True, color)
text_2_rect = text_2.get_rect()

text_2_rect.right = text_1_rect.right # align to right side of first text
"
"rpy2, copula, How to import parameters? Python","from rpy2.robjects.packages import importr
copula = importr('copula')
myCop_clayton = copula.archmCopula(family=""clayton"", dim =7, param=2)
from rpy2.robjects.vectors import StrVector, ListVector
from rpy2.robjects import r
myMvd = copula.mvdc(copula=myCop,
                    margins=StrVector([""norm"", ""norm""]),
                    paramMargins = r(""""""
                                     list(list(mean=0.66,sd = 0.1),
                                          list(mean=0.66,sd = 0.1))
                                     """"""))
"
Find all indices of maximum in Pandas DataFrame,"In [46]: import itertools as IT

In [47]: import operator

In [48]: idx = np.where(df.values == rowmax[:,None])

In [49]: groups = IT.groupby(zip(*idx), key=operator.itemgetter(0))

In [50]: [[df.columns[j] for i, j in grp] for k, grp in groups]
Out[50]: [['cat1', 'cat1'], ['cat2'], ['cat3', 'cat3']]
"
Dynamic fields in a Python string,">>> fields = {'foo': 'The Foo value', 'bar': 'A barren area', 'spam': 'The greatest canned meat!', 'eggs': 'scrambled or easy over?'}
>>> template = 'Please provide me with eggs, {eggs}'
>>> template.format(**fields)
'Please provide me with eggs, scrambled or easy over?'
"
"python, regex to find anchor link html",">>> from BeautifulSoup import BeautifulSoup
>>> soup = BeautifulSoup('''<ul class=""something"">
... <li id=""li_id"">
... <a href=""#"" title=""myurl"">URL Text</a>
... </li>
... </ul>''')
"
Repeatedly using one subprocess.Popen instance in python,"import subprocess
import shlex
proc = subprocess.Popen(shlex.split('fdisk -l'))
proc.communicate()
proc = subprocess.Popen(shlex.split('fdisk -l'))
proc.communicate()
"
Numpy - Dot Product of a Vector of Matrices with a Vector of Scalars,"In [64]: (data * vector[:,None,None]).sum(axis=0)
Out[64]: 
array([[ 70,  70,  70,  70],
       [100, 100, 100, 100],
       [130, 130, 130, 130]])
"
Why python decorator will lose func attribute __doc__?,">>> def wrapper(f):
    def func(*args):
        """"""The wrapper func's docstring.""""""
        return f(*args)
    return func

>>> @wrapper
def test(x):
    """"""The test func's docstring.""""""
    return x ** 2

>>> test.__doc__
""The wrapper func's docstring.""
"
Finding end tag content in HTML with BeautifulSoup,"re.sub('[:\s+]', '', soup.find('strong', text=re.compile('Date')).next_sibling)
"
Python subprocess + scp - can't read all output,"proc = subprocess.Popen(['scp', '-o BatchMode=yes',
                                'user@server:/location/file.txt',
                                '/someplace/file.txt'],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE)
proc.wait()
print 'result: %s' % repr(proc.stderr.readline())
"
Pandas multiIndex DataFrame sort,"In [107]: df
Out[107]:
   a  b  c
0  9  1  4
1  0  5  7
2  5  9  8
3  3  9  7
4  1  2  5

In [108]: df.assign(sum=df.sum(axis=1)).sort_values('sum', ascending=True)
Out[108]:
   a  b  c  sum
4  1  2  5    8
1  0  5  7   12
0  9  1  4   14
3  3  9  7   19
2  5  9  8   22
"
Index the first and the last n elements of a list,l[:3] + l[-3:]
python word counter w/ sorted frequency,"for k, v in sorted(frequency.items(), key=lambda x: x[1], reverse=True):
    print(k, v)
"
In dictionary output is not getting as expected in PYTHON,"b = {}
for ...
    b.update(arg)
"
Python: extra assignments in functions,">>> def f(x):
        return x + 2

>>> def g(x):
        y = x + 2
        return y

>>> dis(f)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_ADD          
              7 RETURN_VALUE        
>>> dis(g)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (2)
              6 BINARY_ADD          
              7 STORE_FAST               1 (y)

  3          10 LOAD_FAST                1 (y)
             13 RETURN_VALUE 
"
Doctest fails due to unicode leading u,"#!/usr/bin/env python
r""""""
>>> u""This is a tokenized sentence s\u00f3"".split()
[u'This', u'is', u'a', u'tokenized', u'sentence', u's\xf3']
""""""
import doctest
import re
import sys

class Py23DocChecker(doctest.OutputChecker):
    def check_output(self, want, got, optionflags):
        if sys.version_info[0] > 2:
            want = re.sub(""u'(.*?)'"", ""'\\1'"", want)
            want = re.sub('u""(.*?)""', '""\\1""', want)
        return doctest.OutputChecker.check_output(self, want, got, optionflags)

if __name__ == ""__main__"":
    import unittest

    suite = doctest.DocTestSuite(sys.modules['__main__'], checker=Py23DocChecker())
    sys.exit(len(unittest.TextTestRunner().run(suite).failures))
"
Sum of multiple list of lists index wise,">>> data = [[[5, 10, 30, 24, 100], [1, 9, 25, 49, 81]],
...         [[15, 10, 10, 16, 70], [10, 1, 25, 11, 19]],
...         [[34, 20, 10, 10, 30], [9, 20, 25, 30, 80]]]
>>> for res in zip(*data):
...     print [sum(j) for j in zip(*res)] 
... 
[54, 40, 50, 50, 200]
[20, 30, 75, 90, 180]
"
How do I get the index of multiple occurrences of the same character in a string?,"def capitals(word):
    return [i for i, ch in enumerate(word) if ch.isupper()]
"
Numpy - Averaging multiple columns of a 2D array,"data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)"
Strip special characters and punctuation from a unicode string,"text.translate(dict.fromkeys(ord(c) for c in string.punctuation))
"
Summing values in nested list when item changes,"#!/usr/bin/python
# -*- coding: utf-8 -*-

a = [[1, 0],[1, 2],[2, 9],[3, 0],[3, 8],[3, 1]]
res = {}
for i in a:
    if i[0] in res:
        res[i[0]] += i[1]
    else:
        res[i[0]] = i[1]

print res
"
Create new list based on values taken from sublist,">>> a = [[0,0,0,1,1,1,2,2,2], [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9],
... [0.21,0.22,0.23,0.24,0.25,0.26,0.27,0.28,0.29]]
>>> zip(*(col for col in zip(*a) if col[0] == 2))
[(2, 2, 2), (0.7, 0.8, 0.9), (0.27, 0.28, 0.29)]
"
pygame text variables,"health = wordfont.render(""Your health: {0}"".format(self.a), 1, (255, 9, 12))
"
matplotlib pick_event returns incorrect pressed keys,"class PlotPanel(wx.Panel):

    def __init__(self, parent):
        wx.Panel.__init__(self, parent)

        self.figure = mplFigure(figsize=(9, 6))
        self.ax = self.figure.add_subplot(111)
        self.ax.plot([1, 2, 3, 4], [2, 3, 5, 8], marker=""o"", markersize=20, picker=10, linestyle=""None"")
        self.canvas = mplCanvas(self, -1, self.figure)

        self.figure.canvas.mpl_connect('pick_event', self.onClick)
        self.canvas.Bind(wx.EVT_KEY_DOWN, self._on_key_down)
        self.canvas.Bind(wx.EVT_KEY_UP, self._on_key_up)

        self.states = {""cmd"":False, ""ctrl"":False, ""shift"":False}

    def onClick(self, event):
        print event
        #print ""You pressed key '%s' while clicking!"" % pressedKey
        print ""Pressed keys:"", [k for k in self.states if self.states[k]]
        dlg = TestDialog(self)
        dlg.ShowModal()

    def _on_key_down(self, evt):
        self._set_state(evt)
        evt.Skip()

    def _on_key_up(self, evt):
        self._set_state(evt)
        evt.Skip()

    def _set_state(self, evt):
        self.states[""cmd""] = evt.CmdDown()
        self.states[""ctrl""] = evt.ControlDown()
        self.states[""shift""] = evt.ShiftDown()

class MainFrame(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, -1, ""matplotlib pick_event problem"")
        self.plotarea = PlotPanel(self)
        self.mainSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.mainSizer.Add(self.plotarea, 1, wx.EXPAND)
        self.SetSizer(self.mainSizer)
        self.mainSizer.Fit(self)

class TestDialog(wx.Dialog):

    def __init__(self, parent):     

        pre = wx.PreDialog()
        pre.SetExtraStyle(wx.DIALOG_EX_CONTEXTHELP)
        pre.Create(parent, -1, ""sample dialog"", size=(200, 100), style=wx.CAPTION|wx.RESIZE_BORDER)
        self.PostCreate(pre)

        self.parent = parent
        self.Bind(wx.EVT_KEY_DOWN, self.parent._on_key_down)
        self.Bind(wx.EVT_KEY_UP, self.parent._on_key_up)

        btn = wx.Button(self, -1, ""OK"")
        btn.Bind(wx.EVT_BUTTON, self._OnClick)

    def _OnClick(self, evt):
        self.EndModal(wx.ID_OK)
"
Evaluate variable in context,">>> C = Context({""person"": p})
>>> C.get(""person"")
<class '__main__.PersonClass'>
>>> C.get(""person"").name
'Test'
"
How do I improve the speed of this code? (Solving ODEs with scipy.integrate.odeint),"def __connectionistModel_vec(self, g, t):
    """"""
        Returning the ODE system
    """"""
    g_ia_s = np.zeros(self.nGenes * self.nCells)

    g_2d = g.reshape((self.nCells, self.nGenes))
    W = np.array(self.Params[""W""])
    mData = np.array(self.mData)
    g_ia_s = np.zeros((self.nCells, self.nGenes))       

    for a in xrange(0, self.nGenes):
        g_ia = self.Params[""R""][a] *\
            self.__sigmoid( (W[a*self.nGenes:(a+1)*self.nGenes]*g_2d).sum(axis=1) +\
                self.Params[""Wm""][a]*mData +\
                self.Params[""h""][a] ) -\
            self.Params[""l""][a] * g_2d[:,a]
        g_ia[0] += self.Params[""D""][a] * ( - 2*g_2d[0,a] + g_2d[1,a] )
        g_ia[-1] += self.Params[""D""][a] * ( g_2d[-2,a] - 2*g_2d[-1,a] )
        g_ia[1:-1] += self.Params[""D""][a] * ( g_2d[:-2,a] - 2*g_2d[1:-1,a] + g_2d[2:,a] )

        g_ia_s[:,a] = g_ia

    return g_ia_s.ravel()
"
String of list or strings to a tuple,">>> def convert_to_tuple(elem):
        if isinstance(elem, list):
            return tuple(elem)
        elif isinstance(elem, basestring):
            return (elem,)
        else:
            # Do Something
            pass


>>> convert_to_tuple('abc')
('abc',)
>>> convert_to_tuple(['abc', 'def'])
('abc', 'def')
"
Output Daffodils-Numbers with python,"while True:
    x1 = raw_input(""please enter a number x1="")
    x2 = raw_input(""please enter a number x2="")
    quit = ('q','Q')
    if x1 in quit or x2 in quit:
        break
    else:
        try:
            x1, x2 = int(x1), int(x2)
        except:
            print(""please enter only numbers"")
            continue
    # The mathematical part... (for completeness) (not my code)
    if x1>x2:
        x1,x2=x2,x1
    for n in xrange(x1,x2):
        i=n/100
        j=n/10%10
        k=n%10
        if i*100+j*10+k==i+j**2+k**3:
            print ""%-5d""%n
"
Python trivia game,"import sys
import random

class Question(object):
    def __init__(self, question, answer, options):
        self.question = question
        self.answer = answer
        self.options = options

    def ask(self):
        print self.question + ""?""
        for n, option in enumerate(self.options):
            print ""%d) %s"" % (n + 1, option)

        response = int(sys.stdin.readline().strip())   # answers are integers
        if response == self.answer:
            print ""CORRECT""
        else:
            print ""wrong""

questions = [
    Question(""How many legs on a horse"", 4, [""one"", ""two"", ""three"", ""four"", ""five""]),
    Question(""How many wheels on a bicycle"", 2, [""one"", ""two"", ""three"", ""twenty-six""]),

    # more verbose formatting
    Question(question=""What colour is a swan in Australia"",
             answer=1,
             options=[""black"", ""white"", ""pink""]),    # the last one can have a comma, too
    ]

random.shuffle(questions)    # randomizes the order of the questions

for question in questions:
    question.ask()
"
Using matplotlib to annotate certain points,"fig = plt.figure()
data = (0, 2, 3, 5, 5, 5, 9, 7, 8, 6, 6)

ax = fig.add_subplot(1, 1, 1)
ax.plot(data, 'r-', linewidth=4)
ax.axvline(x=5, ymin=0, ymax=4.0 / max(data), linewidth=4)
ax.text(5, 4, 'your text here')
fig.show()
"
Pass a variable from python to shell script,"var1 = 1
var2 = 2
call(['bash', 'run.sh', str(var1), str(var2)])
"
Simple Image viewer,"img = None

def openimage():
    global img

    picfile = tkFileDialog.askopenfilename()
    img = ImageTk.PhotoImage(file=picfile)
    canvas.create_image(0,0, anchor=NW, image=img) 
"
How to exclude \n and \r from tell() count in Python 2.7,"data_read = … # data you have already read
len([b for b in data_read if b not in '\r\n'])
"
How to test membership of sequence in python list?,"s_list = [5,2,3]   # sequence to search for

# Setting up your dictionary
MyD = {'DOC3187' : [1, 2, 3, 6, 7],
    'DOC4552' : [5, 2, 3, 6],
    'DOC4974' : [1, 2, 3, 6],
    'DOC8365' : [1, 2, 3, 5, 6, 7],
    'DOC3738' : [1, 4, 2, 3, 6],
    'DOC5311' : [1, 5, 2, 3, 6, 7]}

query = str(s_list)[1:-1]  # make a string of '5, 2, 3'    
Matches = [ k for k in MyD if query in str(MyD[k]) ]
"
How to remove strings that contain letters from a list?,"def isNum(s):
    try:
            float(s)
            return True
    except ValueError:
            return False
lst = ['hello', '2U:', '-224.3', '45.1', 'SA 2']
bools = list(map(lst,isNum))
deleted = 0
for idx, val in enumerate(bools):
    if val:
            continue
    else:
            del lst[idx-deleted]
            deleted = deleted + 1
"
How do you evaluate a certain part of an array in Python?,"turns = [[4, 6, 2, 8, 1, 9, 5, 5, 3, 7, 6, 8, 2, 4]]
turns.append([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4])
turns.append([4, 6, 2, 8, 1, 9, 6, 5, 3, 7, 6, 8, 2, 4]) 
turns.append([0, 0, 26, 24, 3, 7, 5, 4, 25, 25, 21, 21, 21, 21])
turns.append([0, 0, 0, 0, 7, 3, 8, 2, 0, 0, 29, 29, 29, 29])
turns.append([0, 0, 0, 0, 26, 24, 0, 0, 0, 0, 0, 0, 0, 0])
"
How to make a large numpy array efficiently,"n = 30
assert 2 * (n // 2) == n
rows = 3**(n//2)
cols = n

arr = np.zeros((rows, cols), dtype=int)
shape = (rows,)

source = np.array([-1, 0, 1], dtype=np.int)[:, None]

for col in range(n//2):
    shape = (-1, 3, shape[-1]//3,)
    col_view = arr[:, col]
    col_view.shape = shape
    col_view[:] = source
"
Why is lxml not finding this class?,"import lxml.html
import urllib

response = urllib.urlopen('http://www.codecademy.com/username')
tree = lxml.html.parse(response)
# tree.write('/tmp/test.html')
root = tree.getroot()
print(root.find_class('stat-count'))
"
How to get a data miner to do specific search on web page?,"from lxml.html import parse
from urllib2 import urlopen

url = 'http://www.cfilt.iitb.ac.in/indowordnet/first?langno=3&queryword=%E0%A6%97%E0%A6%BE%E0%A6%A7%E0%A6%BE'
tree = parse(urlopen(url))

for label in tree.xpath('.//label[@id=""words""]/a'):
    print label.text
"
Slicing an image array into sub array,">>> import numpy as np
>>> a = np.ones((16,16))
>>> slice = a[:8,:8]
>>> slice.shape
(8, 8)
>>> a = np.ones((3,16))
>>> slice = a[:8,:8]
>>> slice.shape
(3, 8)
"
Python re.sub: ignore backreferences in the replacement string,"import re

x = r'hai! \1 <ops> $1 \' \x \\'
print ""want to see: ""
print x

print ""getting: ""
print re.sub("".(.)."", x, ""###"")
print ""over escaped: ""
print re.sub("".(.)."", re.escape(x), ""###"")
print ""could work: ""
print re.sub("".(.)."", x.replace(""\\"", ""\\\\""), ""###"")
"
Pandas clean column and apply optional multiplier,"# i am calling the specific column 'foo'
df = pd.DataFrame( [ '190000', '170000', '120k', '110K', '100000s', '68ks' ],
                   index=[21, 27, 29, 31, 33, 38], columns=['foo'] )

def clean( x ):
    from re import sub
    # \g<1> is whatever matches the the first (...)
    x = sub( r'(\d+)[kK]', r'\g<1>000', x )
    return sub( r'[^\d]', '' , x ) # remove any non-digit character

df.foo.map( clean ).astype( int )
"
How do I send a POST request to the page after it has been opened using Python?,"import requests
from pyquery import PyQuery as pq

url = 'http://wireless.walmart.com/content/getRatePlanInfo'
payload = {'carrierID':68, 'conditionToType':1, 'cssPrepend':'wm20'}
r = requests.post(url, data=payload)
d = pq(r.text)
"
How to sort a dictionary by value and by key?," from operator import itemgetter

 print(list(map(itemgetter(0), sorted(d.items(), key=itemgetter(1,0)))))
 ['Bob', 'Bruce', 'Thor', 'Tony', 'Steve']
"
Python max length of j-th item across sublists of a list,">>> for j in xrange(3):
...     print max(len(i[j]) for i in x)
...
5
2
3
"
Find duplicate items within a list of list of tuples Python,"import collections

# build an adjacency list representation of your input
graph = collections.defaultdict(set)
for l in ListA:
    for first, second in l:
        graph[first].add(second)
        graph[second].add(first)

# breadth-first search the graph to produce the output
output = []
marked = set() # a set of all nodes whose connected component is known
for node in graph:
    if node not in marked:
        # this node is not in any previously seen connected component
        # run a breadth-first search to determine its connected component
        frontier = set([node])
        connected_component = []
        while frontier:
            marked |= frontier
            connected_component.extend(frontier)

            # find all unmarked nodes directly connected to frontier nodes
            # they will form the new frontier
            new_frontier = set()
            for node in frontier:
                new_frontier |= graph[node] - marked
            frontier = new_frontier
        output.append(tuple(connected_component))
"
Return Subset of List that Matches Condition,"divisibleBySeven = [num for num in inputList if num and num % 7]
"
Trying to find a match in two strings - Python,"import difflib

string_a = 'python'
string_b = 'honbe'

matcher = difflib.SequenceMatcher(a=string_a, b=string_b)
match = matcher.find_longest_match(0, len(matcher.a), 0, len(matcher.b))
"
Iterating through multiple arrays,"array.append(x * y * 37000.0)
"
How to create an integer array in Python?,"array.array('i')
"
Convert python decimal to string in deeply nested and unpredictable list,"import json
import sys
from collections import MutableMapping, MutableSequence
from decimal import Decimal

def convert_decimal(json_data):
    stack = [json_data]
    while stack:
        json_data = stack.pop()
        if isinstance(json_data, MutableMapping): # json object
            it = json_data.items()
        elif isinstance(json_data, MutableSequence): # json array
            it = enumerate(json_data)
        else: # scalar data
            continue

        for k, v in it:
            if isinstance(v, Decimal):
                json_data[k] = str(v)
            else:
                stack.append(v)


# convert inplace
convert_decimal(data)
json.dump(data, sys.stdout, indent=2)
"
"Using a list as ""list of indexes"" to address elements of another list","import numpy as np
...
myarr = np.array(mylist)
val = myarr[tuple(index)]
print(val)
"
"Reading multiple lines in a file, and separating their values at the same time, to store it in dictionary","def f_it(f):
    for line in f:
        yield map(int, line.split())

connection = {}
with open(""test.txt"") as f:
    for a,b,c in f_it(f):
        connection[(a,b)] = c
"
Pythonic way of accessing recursively nested dict,"def set_val(d, keys, val):
    last = keys[-1]  # Key we want to set val on
    search_keys = keys[:-1]  # Keys we need to traverse
    reduce(lambda x,y: x[y], search_keys, d)[last] = val
"
"Add ""nan"" to numpy array 20 times without loop","np.append(n, np.zeros(20) + np.nan)
"
Pythonic way to store top 10 results,"from heapq import heappush, heappushpop

heap = []
for x in [18, 85, 36, 57, 2, 45, 55, 1, 28, 73, 95, 38, 89, 15, 7, 61]:
    calculation_result = x + 1 # Dummy calculation
    if len(heap) < 10:
        heappush(heap, calculation_result)
    else:
        heappushpop(heap, calculation_result)

top10 = sorted(heap, reverse=True) # [96, 90, 86, 74, 62, 58, 56, 46, 39, 37]
"
how to pack 4 9-bit and 1 4-bit int variable into 5 8-bit variable in python?,"import struct
ninebits = [0b110011001,0b000000000,0b111111111,0b010101010]
fourbit = 0b1010
pack = 0
for i,v in enumerate(ninebits):
    pack <<= 9
    pack |= v
pack <<= 4
pack |= fourbit
print('{:040b}'.format(pack))
print('{:010X}'.format(pack))
print(struct.pack('>LB',pack >> 8, pack & 0xFF))
"
String splitting in Python,">>> re.sub(r'(f?)ff', r'\1\n', '90500303040ff90500303040fff').splitlines()
['90500303040', '90500303040f']
"
Python list to nested keys,"def add_nested(d, keys, value):
    for k in keys[:-1]:
        d = d.setdefault(k, {})
    d[keys[-1]] = value
"
Python: how can I ingest arguments from JSON file?,"In [22]: def foo(k,v):
    if len(k)==1:
        k =  '-'+k
    else:
        k = '--'+k
    if isinstance(v,bool):
        return (k,)
    else:
        return k,str(v)
   ....:     
In [23]: argv=[]
In [24]: for k,v in dd.items():
    argv.extend(foo(k,v))
   ....:     
In [25]: argv
Out[25]: ['-f', '--int', '35', '--swd', 'SomeString']
"
python Pandas calling a complex function in groupby.agg,"txn = txn.sort_values(by='Send_Agent')
txn['repeat'] = ((txn['Send_Agent'].shift() == txn['Send_Agent']) 
                 & (txn['Send_Agent'].shift() == txn['Send_Agent']))

grouped = txn.groupby('Send_Agent')
result = grouped.agg(
    {'Pay_Amount':'mean',
     'time_diff':'min',
     'MTCN':'size',
     'Send_Phone':'nunique',
     'Refund_Flag':'count',
     'Send_Amount': 'mean',
     'repeat':'sum'})
print(result)
"
Python regular expression to change date formatting,"re.sub('-(?=\d-)', '-0', text)
"
Chart with lots of (but varied number of) Y values for each X value,"import matplotlib.pyplot as plt

thing1 = (10, [8,9,10,11,12])
thing2 = (25, [24,25,26,27])
thing3 = (30, [28,29,30,31,32,33])

thing1_y = []
for i in thing1[1]:
    thing1_y.append(i)
thing1_x = []
for i in range(len(thing1_y)):
    thing1_x.append(thing1[0])
"
Display multiple images in one IPython Notebook cell?,"for ima in images:
    plt.figure()
    plt.imshow(ima)
"
python: dots in the name of variable in a format string,"""""""Name: {0[person.name]}"""""".format({'person.name': 'Joe'})"
How to find the smallest missing numbers from a list without using inbuilt functions or modules,"Lists = [[1,2,4,5],[1,2,3,4,5,7],[1,4,5,6]]

for List in Lists:
    i = 1
    while i <= List[-1] + 1:
        if i in List:
            i += 1
        else:
            break
    print i
"
Py Pandas .format(dataframe),"import pandas as pd
import numpy as np
data = np.random.random((8,3))*10000
df = pd.DataFrame (data)
pd.options.display.float_format = '{:20,.2f}'.format
print(df)
"
Membership testing in a large list that has some wildcards,"# phrase_trie.py

from collections import defaultdict

CATEGORIES = {""!DETERMINER"": set([""a"",""an"",""the""]),
              ""!VERB"": set([""walked"",""talked"",""had""])}

def get_category(word):
    for name,words in CATEGORIES.items():
        if word in words:
            return name
    return None

class PhraseTrie(object):
    def __init__(self):
        self.children = defaultdict(PhraseTrie)
        self.categories = defaultdict(PhraseTrie)

    def insert(self, phrase):
        if not phrase: # nothing to insert
            return

        this=phrase[0]
        rest=phrase[1:]

        if this in CATEGORIES: # it's a category name
            self.categories[this].insert(rest)
        else:
            self.children[this].insert(rest)

    def contains(self, phrase):
        if not phrase:
            return True # the empty phrase is in everything

        this=phrase[0]
        rest=phrase[1:]

        test = False

        # the `if not test` are because if the phrase satisfies one of the
        # previous tests we don't need to bother searching more

        # allow search for [""!DETERMINER"", ""cat""]
        if this in self.categories: 
            test = self.categories[this].contains(rest)

        # the word is literally contained
        if not test and this in self.children:
            test = self.children[this].contains(rest)

        if not test:
            # check for the word being in a category class like ""a"" in
            # ""!DETERMINER""
            cat = get_category(this)
            if cat in self.categories:
                test = self.categories[cat].contains(rest)
        return test

    def __str__(self):
        return '(%s,%s)' % (dict(self.children), dict(self.categories))
    def __repr__(self):
        return str(self)

if __name__ == '__main__':
    words = PhraseTrie()
    words.insert([""he"", ""had"", ""!DETERMINER"", ""nerve""])
    words.insert([""he"", ""had"", ""the"", ""evren""])
    words.insert([""she"", ""!VERB"", ""the"", ""nerve""])
    words.insert([""no"",""categories"",""here""])

    for phrase in (""he had the nerve"",
                   ""he had the evren"",
                   ""she had the nerve"",
                   ""no categories here"",
                   ""he didn't have the nerve"",
                   ""she had the nerve more""):
        print '%25s =>' % phrase, words.contains(phrase.split())
"
How to reorder a python ordered dict based on array?,"mydict = {'Rust': {'definition':'rusts definition'},
          'Iron': {'definition':'iron definition'},
          'Pyrite': {'definition':'pyrite definition'}}

myorder = ['Pyrite', 'Rust', 'Iron']

from collections import OrderedDict

ordered = OrderedDict()
for k in myorder:
    ordered[k] = mydict[k]
"
sorting a list in python,"sorted(words, key=lambda x: 'a'+x if x.startswith('s') else 'b'+x)
"
Python - Get mac address,">>> address = 1234567890
>>> h = iter(hex(address)[2:].zfill(12))
>>> "":"".join(i + next(h) for i in h)
'00:00:49:96:02:d2'
"
Are there any way to scramble strings in python?,">>> from random import shuffle

>>> def shuffle_word(word):
...    word = list(word)
...    shuffle(word)
...    return ''.join(word)
"
Create an offset list python,">>> x=[]
>>> x.append(list('ABC'))
>>> x
[['A', 'B', 'C']]
>>> x.append(x[-1][1:]+x[-1][:1])
>>> x
[['A', 'B', 'C'], ['B', 'C', 'A']]
"
When the key is a tuple in dictionary in Python,"d = {(a.lower(), b): v for (a, b), v in list(d.items())}"
How to print single lines from file,"import sys

def main():
    log1 = sys.argv[1]
    log2 = sys.argv[2]

    with open(log1, 'r') as f:
        # print that first line only
        print (f.readline().strip('\n'))

        # print the other lines
        for l in f:
            print(l.strip('\n'))

if __name__ == ""__main__"":
    main()
"
Keeping rows in Pandas where the same ID appears more than n times and convert to list per ID,"In [54]: result = df.loc[df['VID'].isin(countdf[countdf['value'] > 3].index)]

In [55]: result.groupby('VID')['value'].apply(list).tolist()
Out[55]: [['xx1', 'xx2', 'xx3', 'xx4'], ['zz1', 'zz2', 'zz3', 'zz4', 'zz5']]
"
Write a Regular Expression in Python to match substring,">>> tokens = re.search(r""url:\s'(.*?)',\suid:\s'(.*?)',\stype:\s'(.*?)'"", value)
>>> url, uid, type = tokens.groups()
>>> url
'abs52fs'
>>> uid
'1fg23s4'
>>> type
'fgh54e'
"
python re.sub with variable,"Python2.x
>>> import HTMLParser
>>> s = 'Ell &#233;s la v&#237;ctima que expia els nostres pecats, i no tan sols els nostres, sin&#243; els del m&#243;n sencer.'
>>> print HTMLParser.HTMLParser().unescape(s)
Ell és la víctima que expia els nostres pecats, i no tan sols els nostres, sinó els del món sencer.
"
Dynamically adding class instance to Python instance à la __setattr__,"class B(object):
    _a = None

    @property
    def a(self):
        if self._a is None:
            self._a = A()
        return self._a
"
Python regex look ahead look behind,"r'(From:.*).*(To:.*).*(CC:.*).*(Subject:.*).*(Date:.*)'
"
Multiple Re.Subs Python,"name = re.sub(r""\."", r"" "", name)
name = re.sub(r""C126"", ""Perception"", name)
name = re.sub(r""Geo1"", ""Geography"", name)
"
"""Doing work"" on csv DictReader fails","import csv
headers = ['Symbol', 'Price', 'Date', 'Time', 'Change', 'Volume']
rows = [{'Symbol':'AA', 'Price':39.48, 'Date':'6/11/2007',
         'Time':'9:36am', 'Change':-0.18, 'Volume':181800},
        {'Symbol':'AIG', 'Price': 71.38, 'Date':'6/11/2007',
         'Time':'9:36am', 'Change':-0.15, 'Volume': 195500},
        {'Symbol':'AXP', 'Price': 62.58, 'Date':'6/11/2007',
         'Time':'9:36am', 'Change':-0.46, 'Volume': 935000}]

with open('stocks.csv','w') as f:
    f_csv = csv.DictWriter(f, headers)
    f_csv.writeheader()
    f_csv.writerows(rows)

with open('stocks.csv', 'r') as file:
    csvread = csv.DictReader(file, delimiter=',')

    with open('out.csv', 'w') as out:
        headertowrite = ['Time', 'Symbol', 'NewColumn']
        writer = csv.DictWriter(out, headertowrite, extrasaction='ignore')
        writer.writeheader()
        for row in csvread:
            row['NewColumn'] = '1'
            writer.writerow(row)
"
Fastest way to eliminate specific dates from pandas dataframe,"mask = ~np.in1d(df.index.date, pd.to_datetime(removelist).date)
df = df.loc[mask, :]
"
Use Regex to extract file path and save it in python,"df = pd.read_csv('yourfile.txt',header=None)
df.columns = ['paths']
# pandas string method extract takes a regex
df['paths'].str.extract('(\d{4})(\d{2})')
"
How to programmatically retrieve access_token from client-side OAuth flow using Python?,"class MyHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        print ""Going through 302:\n""
        print headers
        return urllib2.HTTPRedirectHandler.http_error_302(self, req, fp, code, msg, headers)
"
Context processor in forms.py,"#views.py
form = MyForm(request)

#forms.py
def __init__(self, req, *args, **kwargs):
    super(MyForm, self).__init__(*args, **kwargs)
    self.request = req

#somewhere in your form's body
max_min(self.request)
"
Flash event ceases upon input,"import pygame, sys, random
from pygame.locals import *

pygame.init()

BLACK =          (  0,   0,   0)
ABINO =          ( 34,  45, 102)
PINDLER =        (255, 123,  90)
MEXON =          (200, 190, 220)
WHITE =          (255, 255, 255)
YELLOW =         (255, 255,   0)
RED =            (255,   0,   0)
BLUE =           (  0,   0, 255)

size = [700, 500]
D = pygame.display.set_mode(size)
L = pygame.draw.aaline
R = pygame.draw.rect
G = random.randrange(1, 10)
GM = 1
GMT = 2
CIP = 1
CO = 2
V = 0
Blue = 1
event_500ms = pygame.USEREVENT + 1
pygame.time.set_timer(event_500ms, 500)

pygame.display.set_caption(""Moline"")
myfont = pygame.font.SysFont(""monospace"", 15)
T = myfont.render
M1S = ""RULES:""
M2S = ""1. To start, press each arrow key in a random sequence""
M2F = "" for roughly one second.""
M3S = ""2. To win, re-merge the four men on the crossmark.""
M4S = ""3. Complete before the running man completes a lap.""
M5S = ""4. Mouse movement is illegal and causes a severe time penalty.""
L1 = T(M1S, 1, (255, 255, 0))
L2 = T(M2S, 1, (255, 255, 0))
L2C = T(M2F, 1, (255, 255, 0))
L3 = T(M3S, 1, (255, 255, 0))
L4 = T(M4S, 1, (255, 255, 0))
L5 = T(M5S, 1, (255, 255, 0))
B = D.blit
Fx = 10
Fy = 10
L6 = T(""cheeeeeeeeese"", 1, (255, 255, 0))

def MOLINE1(D, x, y):
    pygame.draw.ellipse(D, BLACK, [1 + x, y, 10, 10], 0)

    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [10 + x, 27 + y], 2)
    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [x, 27 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 17 + y], [5 + x, 7 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [9 + x, 17 + y], 2)
    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [1 + x, 17 + y], 2)

def MOLINE2(D, x, y):
    pygame.draw.ellipse(D, BLACK, [1 + x, y, 10, 10], 0)

    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [10 + x, 27 + y], 2)
    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [x, 27 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 17 + y], [5 + x, 7 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [9 + x, 17 + y], 2)
    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [1 + x, 17 + y], 2)

def MOLINE3(D, x, y):
    pygame.draw.ellipse(D, BLACK, [1 + x, y, 10, 10], 0)

    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [10 + x, 27 + y], 2)
    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [x, 27 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 17 + y], [5 + x, 7 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [9 + x, 17 + y], 2)
    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [1 + x, 17 + y], 2)

def MOLINE4(D, x, y):
    pygame.draw.ellipse(D, BLACK, [1 + x, y, 10, 10], 0)

    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [10 + x, 27 + y], 2)
    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [x, 27 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 17 + y], [5 + x, 7 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [9 + x, 17 + y], 2)
    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [1 + x, 17 + y], 2)

def MOLINE5(D, x, y):
    pygame.draw.ellipse(D, BLACK, [1 + x, y, 10, 10], 0)

    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [10 + x, 27 + y], 2)
    pygame.draw.line(D, BLACK, [5 + x, 17 + y], [x, 27 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 17 + y], [5 + x, 7 + y], 2)

    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [9 + x, 17 + y], 2)
    pygame.draw.line(D, PINDLER, [5 + x, 7 + y], [1 + x, 17 + y], 2)

def FINISH(D, x, y):
    R(D, BLACK, ( 4, 42, 6, 6))
    R(D, WHITE, (10, 42, 6, 6))
    R(D, BLACK, (16, 42, 6, 6))
    R(D, WHITE, (22, 42, 6, 6))
    R(D, BLACK, (28, 42, 6, 6))
    R(D, WHITE, (34, 42, 6, 6))

    R(D, WHITE, ( 4, 48, 6, 6))
    R(D, BLACK, (10, 48, 6, 6))
    R(D, WHITE, (16, 48, 6, 6))
    R(D, BLACK, (22, 48, 6, 6))
    R(D, WHITE, (28, 48, 6, 6))
    R(D, BLACK, (34, 48, 6, 6))

    R(D, BLACK, ( 4, 54, 6, 6))
    R(D, WHITE, (10, 54, 6, 6))
    R(D, BLACK, (16, 54, 6, 6))
    R(D, WHITE, (22, 54, 6, 6))
    R(D, BLACK, (28, 54, 6, 6))
    R(D, WHITE, (34, 54, 6, 6))

x_speed = 0
y_speed = 0

x2_speed = 0
y2_speed = 0

x3_speed = 0
y3_speed = 0

x4_speed = 0
y4_speed = 0

x_coord = 300
y_coord = 300

x2_coord = 300
y2_coord = 300

x3_coord = 300
y3_coord = 300

x4_coord = 300
y4_coord = 300

X5_coord = 30
Y5_coord = 10

direction = 'right'

clock = pygame.time.Clock()

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                x_speed =- 3
                x2_speed = 3
                y3_speed =- 3
                y4_speed = 3
            elif event.key == pygame.K_RIGHT:
                x_speed = 3
                x2_speed =- 3
                y3_speed = 3
                y4_speed =- 3
            elif event.key == pygame.K_UP:
                y_speed =- 3
                y2_speed = 3
                x3_speed =- 3
                x4_speed = 3
            elif event.key == pygame.K_DOWN:
                y_speed = 3
                y2_speed =- 3
                x3_speed = 3
                x4_speed =- 3
            elif event.key == pygame.K_TAB:
                GMT += 1
                CIP = 2
                if GMT % 2:
                    GM = 2
                else:
                    GM = 1

        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT:
                x_speed=0
                x2_speed=0
                y3_speed=0
                y4_speed=0
            elif event.key == pygame.K_RIGHT:
                x_speed=0
                x2_speed=0
                y3_speed=0
                y4_speed=0
            elif event.key == pygame.K_UP:
                y_speed=0
                y2_speed=0
                x3_speed=0
                x4_speed=0
            elif event.key == pygame.K_DOWN:
                y_speed=0
                y2_speed=0
                x3_speed=0
                x4_speed=0

        elif event.type == MOUSEBUTTONDOWN:
            x_coord = 300
            y_coord = 300
            x2_coord = 300
            y2_coord = 300
            x3_coord = 300
            y3_coord = 300
            x4_coord = 300
            y4_coord = 300
            X5_coord = 30
            Y5_coord = 10
            direction = 'right'
            D.fill(BLACK)
            G = random.randrange(1, 10)
            CO = 2
            V = 2

        elif event.type == MOUSEBUTTONUP:
            X5_coord = 30
            Y5_coord = 10
            direction = 'right'

        if direction == 'right':
            X5_coord += 10
            if X5_coord == 670:
                direction = 'down'
        elif direction == 'down':
            Y5_coord += 10
            if Y5_coord == 460:
                direction = 'left'
        elif direction == 'left':
            X5_coord -= 10
            if X5_coord == 10:
                direction = 'up'
        elif direction == 'up':
            Y5_coord -= 10
            if Y5_coord == 10:
                direction = 'right'
        print(V, event, event.type, event_500ms, V == 2, event.type == event_500ms, Blue)
        if V == 2:
            if event.type == event_500ms:
                if Blue == 1:
                    D.fill(BLUE)
                    Blue = 2
                elif Blue == 2:
                    D.fill(YELLOW)
                    Blue = 1

    if V != 2:
        x_coord = x_coord + x_speed
        y_coord = y_coord + y_speed

        x2_coord = x2_coord + x2_speed
        y2_coord = y2_coord + y2_speed

        x3_coord = x3_coord + x3_speed
        y3_coord = y3_coord + y3_speed

        x4_coord = x4_coord + x4_speed
        y4_coord = y4_coord + y4_speed

        if GM == 2 and CIP == 2:
            D.fill(BLACK)
            CIP = 1

        if GM == 1:
            D.fill(MEXON)

        if G >= 6:
            B(L6, (80, 150))

        if G == 1 and CO == 2:
            x_coord = 366
            y_coord = 201

            x2_coord = 234
            y2_coord = 399

            x3_coord = 201
            y3_coord = 366

            x4_coord = 399
            y4_coord = 234

            CO = 1

        elif G == 2 and CO == 2:
            x_coord = 240
            y_coord = 312

            x2_coord = 360
            y2_coord = 288

            x3_coord = 312
            y3_coord = 240

            x4_coord = 288
            y4_coord = 360

            CO = 1

        elif G == 3 and CO == 2:
            x_coord = 405
            y_coord = 228

            x2_coord = 195
            y2_coord = 372

            x3_coord = 228
            y3_coord = 405

            x4_coord = 372
            y4_coord = 195

            CO = 1

        elif G == 4 and CO == 2:
            x_coord = 179
            y_coord = 309

            x2_coord = 421
            y2_coord = 291

            x3_coord = 309
            y3_coord = 179

            x4_coord = 291
            y4_coord = 421

            CO = 1

        elif G == 5 and CO == 2:
            x_coord = 315
            y_coord = 450

            x2_coord = 285
            y2_coord = 150

            x3_coord = 450
            y3_coord = 315

            x4_coord = 150
            y4_coord = 285

            CO = 1

        elif G == 6 and CO == 2:
            x_coord = 180
            y_coord = 390

            x2_coord = 420
            y2_coord = 210

            x3_coord = 390
            y3_coord = 180

            x4_coord = 210
            y4_coord = 420

            CO = 1

        elif G == 7 and CO == 2:
            x_coord = 267
            y_coord = 204

            x2_coord = 333
            y2_coord = 396

            x3_coord = 204
            y3_coord = 267

            x4_coord = 396
            y4_coord = 333

            CO = 1

        elif G == 8 and CO == 2:
            x_coord = 363
            y_coord = 390

            x2_coord = 237
            y2_coord = 210

            x3_coord = 390
            y3_coord = 363

            x4_coord = 210
            y4_coord = 237

            CO = 1

        elif G == 9 and CO == 2:
            x_coord = 234
            y_coord = 273

            x2_coord = 366
            y2_coord = 327

            x3_coord = 273
            y3_coord = 234

            x4_coord = 327
            y4_coord = 366

            CO = 1

        elif G == 10 and CO == 2:
            x_coord = 102
            y_coord = 267

            x2_coord = 498
            y2_coord = 333

            x3_coord = 267
            y3_coord = 102

            x4_coord = 333
            y4_coord = 498

            CO = 1




        B(L1, (47, 45))
        B(L2, (47, 60))
        B(L2C, (65, 75))
        B(L3, (47, 90))
        B(L4, (47, 105))
        B(L5, (47, 120))

        L(D, PINDLER, (40, 5), (695, 5), 10)
        L(D, PINDLER, (3, 42), (3, 495), 10)
        L(D, PINDLER, (3, 495), (695, 495), 10)
        L(D, PINDLER, (695, 495), (695, 5), 10)

        L(D, PINDLER, (3, 41), (658, 42), 10)
        L(D, PINDLER, (40, 5), (40, 458), 10)
        L(D, PINDLER, (40, 458), (658, 458), 10)
        L(D, PINDLER, (658, 458), (658, 42), 10)

        FINISH(D, Fx, Fy)

        MOLINE1(D, x_coord, y_coord)

        MOLINE2(D, x2_coord, y2_coord)

        MOLINE3(D, x3_coord, y3_coord)

        MOLINE4(D, x4_coord, y4_coord)

        MOLINE5(D, X5_coord, Y5_coord)


        pygame.draw.line(D, PINDLER, (303, 302), (307, 306), 1)
        pygame.draw.line(D, PINDLER, (307, 302), (303, 306), 1)

    pygame.display.flip()

    clock.tick(60)

pygame.quit()
"
How to render an ordered dictionary in django templates?,"return render_to_response('results.html',
    {'data': sorted(results_dict.iteritems())})
"
Calculating Area Under Individual Peaks in Python After FFT,"ft = np.fft.fft(y)
integral = sum(ft[105:121])
"
Using BeautifulSoup to extract specific dl and dd list elements,"for item in list(zip(soup.find_all(""dd"")[0::3],soup.find_all(""dd"")[2::3])):
    date, salary = item
    print ', '.join([date.string, salary.string])
"
limit plot title to only show a certain number of decimal places,">>> ""{0:.2f}"".format(123.678956)   # Or ""{:.2f}"".format(123.678956)
'123.68'
"
Python equivalent of Mathematica's Sow/Reap,"farm = []

def sower(func):
    def wrapped(*args, **kw):
        farm.append([])
        return func(*args, **kw)
    return wrapped

def sow(val):
    farm[-1].append(val)
    return val

def reap(val):
    return val, farm.pop()
"
Python: no. of occurences of each character in a string,"from collections import Counter, defaultdict

def test_counter(s):
    return Counter(s)

def test_get(s):
    res = {}
    for char in s:
        res[char] = res.get(char, 0) + 1
    return res

def test_in(s):
    res = {}
    for char in s:
        if char in res:
            res[char] += 1
        else:
            res[char] = 1
    return res

def test_defaultdict(s):
    res = defaultdict(int)
    for char in s:
        res[char] += 1
    return res


s = open('/usr/share/dict/words').read()
#eof

import timeit

test = lambda f: timeit.timeit(f + '(s)', setup, number=10)
setup = open(__file__).read().split(""#eof"")[0]
results = ['%.4f %s' % (test(f), f) for f in dir() if f.startswith('test_')]
print  '\n'.join(sorted(results))
"
How to remove spaces while writing in INI file- Python,"def remove_whitespace_from_assignments():
    separator = ""=""
    config_path = ""config.ini""
    lines = file(config_path).readlines()
    fp = open(config_path, ""w"")
    for line in lines:
        line = line.strip()
        if not line.startswith(""#"") and separator in line:
            assignment = line.split(separator, 1)
            assignment = map(str.strip, assignment)
            fp.write(""%s%s%s\n"" % (assignment[0], separator, assignment[1]))
        else:
            fp.write(line + ""\n"")
"
Can't seem to get the 2nd option to work,"if sys.argv[1].lower().startswith('c')
"
"determine number of rows of an (M,N) array and (M,) array with same function","for item1 in np.atleast_2d(data)[:,0]:
    print item1
"
Reshape list of lists based on position of the element,"zip(*lst)
"
Turbo sort - Time Limit Exceeded,"import sys
from itertools import imap
T = int(raw_input())
lines = sys.stdin.readlines()
lis = imap(str, sorted(imap(int, lines)))
print ""\n"".join(lis)
"
Cleaner way to move renamed files when walking over directory,"def check_names(dirpath, file_name):
    check = False
    new_name = None
    first_check = re.match(""^\d\d - "", file_name)
    second_check = re.match(""^\d\d "", file_name)
    if first_check or second_check:
        check = True
        if first_check:
            new_name = file_name[first_check.span()[1]:]
        else:
            new_name = file_name[second_check.span()[1]:]
        old_path = os.path.join(dirpath, file_name)
        new_path = os.path.join(dirpath, new_name)
        shutil.move(old_path, new_path)
    return check, new_name


def get_old_file(check, a_file):
    if not check[0]:
        old_file = a_file
    else:
        old_file = check[1]
    return old_file

def move_music(source_dir, destination, dirpath, a_file):
    check = check_names(dirpath, a_file)
    dir_name = os.path.split(dirpath)[-1]
    if dir_name != source_dir:
        check_folders(destination, dir_name)
        if os.path.join(source, dir_name) not in COPIED_DIRECTORIES:
                path = os.path.join(source, dir_name)
                COPIED_DIRECTORIES.append(path)
        old_file = get_old_file(check, a_file)
        old_path = os.path.join(dirpath, old_file)
        new_path = os.path.join(destination , dir_name)
        shutil.move(old_path, new_path)

    else:
        old_file = get_old_file(check, a_file)
        old_path = os.path.join(dirpath, old_file)
        shutil.move(old_path, destination)

def check_move(source, destination, file_extension, sub_string):
    source_dir = os.path.split(source)[-1]
    for dirpath, dirnames, filenames in os.walk(source):
        for a_file in filenames:
            if (a_file.endswith(file_extension) 
                and sub_string in a_file):
                move_music(source_dir, destination, dirpath, a_file)
"
Python: Cut off the last word of a sentence?,""""""" """""".join(content.split(' ')[:-1])"
python find a dictionary in a dictionary,">>> label2field = {
    field_val['label']: field_key
    for field_key, field_val in myDict.items()
}

>>> label2field['more']
'custom_field4'

>>> myDict[label2field ['foo']]['data']
'bar1 bar2'
"
How to list an image sequence in an efficient way? Numercial sequence comparison in Python,"import glob
images = glob.glob(""image_[0-9]*"")
"
Is there a more efficient way to append lines from a large file to a numpy array? - MemoryError,"from scipy import sparse
import textmining
import lda

# a small example matrix
tdm = textmining.TermDocumentMatrix()
tdm.add_doc(""here's a bunch of words in a sentence"")
tdm.add_doc(""here's some more words"")
tdm.add_doc(""and another sentence"")
tdm.add_doc(""have some more words"")

# tdm.sparse is a list of dicts, where each dict contains {word:count} for a single
# document
ndocs = len(tdm.sparse)
nwords = len(tdm.doc_count)
words = tdm.doc_count.keys()

# initialize output sparse matrix
X = sparse.lil_matrix((ndocs, nwords),dtype=int)

# iterate over documents, fill in rows of X
for ii, doc in enumerate(tdm.sparse):
    for word, count in doc.iteritems():
        jj = words.index(word)
        X[ii, jj] = count
"
how do you obtain the address of an instance after overriding the __str__ method in python,">>> class Foo:
...     def __str__(self): return ""Foo instance""
... 
>>> a = Foo()
>>> print a
Foo instance
>>> print repr(a)
<__main__.Foo instance at 0x1004d1c68>
"
get count of values associated with key in dict python,sum(1 if d['success'] else 0 for d in s)
Add in word boundary syntax to list of strings,"re_badpositions = [r""\b{word}\b"".format(word=word) for word in badpositions]

indexes = {badpositions[i]:re.search(re_badpositions[i],text) for i in range(len(badpositions))}
"
Does an equivalent of override exist for nested functions?,"# Returns a copy of original_fn with its internal function
# called name replaced with new_fn.
def monkey_patch_fn( original_fn, name, new_fn ):

  #Little helper function to pick out the correct constant
  def fix_consts(x):
    if x==None: return None
    try:
      if x.co_name == name:
        return new_fn.func_code
    except AttributeError, e:
        pass
    return x

  original_code = original_fn.func_code
  new_consts = tuple( map( fix_consts, original_code.co_consts ) )
  code_type_args = [
     ""co_argcount"", ""co_nlocals"", ""co_stacksize"", ""co_flags"", ""co_code"",
     ""co_consts"", ""co_names"", ""co_varnames"", ""co_filename"", ""co_name"",
     ""co_firstlineno"", ""co_lnotab"", ""co_freevars"", ""co_cellvars"" ]

  new_code = types.CodeType(
     *[ ( getattr(original_code,x) if x!=""co_consts"" else new_consts )
        for x in code_type_args ] )
  return types.FunctionType( new_code, {} )
"
How to write a return value of a function into new column of a pandas dataframe,"import re

df = pd.DataFrame({'col1':[3,4,5],'col2':['a,ben,c','a,r,ben','cat,dog'],'col3':[1,2,3]})

#In [220]: df
#Out[220]:
#   col1     col2  col3
#0     3  a,ben,c     1
#1     4  a,r,ben     2
#2     5  cat,dog     3

df['new'] = df.col2.apply(lambda x: re.sub(',?ben|ben,?', '', x))

#In [222]: df
#Out[222]:
#   col1     col2  col3      new
#0     3  a,ben,c     1      a,c
#1     4  a,r,ben     2      a,r
#2     5  cat,dog     3  cat,dog
"
How to write the Fibonacci Sequence in Python,"from math import sqrt
def F(n):
    return ((1+sqrt(5))**n-(1-sqrt(5))**n)/(2**n*sqrt(5))
"
how to show instance attributes in sphinx doc?,"class MyClass(object):
    """"""    
    Description for class 

    """"""

    def __init__(self, par1, par2):
        self.var1 = par1 #: initial value: par1
        self.var2 = par2 #: initial value: par2

    def method(self):
        pass
"
Appending to a line,"re.sub(""Apples\r"", ""Apples: 1\r"", fruits)
"
How to truncate a string's length to the largest multiple of a smaller integer?,"x = 3
s = 'hello world'

s[:(len(s) // x) * x]
"
Split based by a-z character in an alphanumeric string in python,">>> import re
>>> s = ""5d4h2s""
>>> p = re.compile(""([0-9])([a-z])"")
>>> for m in p.findall(s):
...   print m
... 
('5', 'd')
('4', 'h')
('2', 's')
"
Delete second row of header in PANDAS,"df.columns = df.columns.droplevel(1)
print df
       AA  BB  CC  DD
Index                
1       1   2   3   4
2       5   6   7   8
3       9   1   2   3
"
What is the best way in python to get a denormalized array from this ordered array?,"raw_data = [ 'LEVEL 1', 'SUBJECT A', 'GROUP X', 'COMMENT i', 'COMMENT ii',
'COMMENT iii', 'GROUP Y', 'COMMENT iv', 'COMMENT v', 'COMMENT vi', 'LEVEL 2',
'SUBJECT B', 'GROUP Z', 'COMMENT vii', 'COMMENT viii', 'COMMENT ix', 
'SUBJECT C', 'GROUP X2', 'COMMENT x', 'COMMENT xi', 'COMMENT xii', 
'COMMENT xiii', 'GROUP Y2', 'COMMENT xiv', 'COMMENT xv', 'COMMENT xvi' ]

level, subject, group, comment = '', '', '', ''

result = []

for item in raw_data:

    if item.startswith('COMMENT'): 
        comment = item
    elif item.startswith('GROUP'): 
        group = item
        comment = ''
    elif item.startswith('SUBJECT'): 
        subject = item
        group = ''
    elif item.startswith('LEVEL'): 
        level = item
        subject = ''

    if level and subject and group and comment:
        result.append([level, subject, group, comment])

import pprint
pprint.pprint(result)
"
pandas - sort by absolute value without changing the data,"In [162]:
df['sort'] = df.b.abs()
df.sort(columns='sort').drop('sort', axis=1)

Out[162]:
   a  b
2  3 -1
3  4  2
0  1 -3
1  2  5
4  5 -9
"
Python - Getting Rid of Spaces in String,"In [733]: s='6800       MAIN ST'

In [734]: ' '.join(s.split())
Out[734]: '6800 MAIN ST'
"
Pandas - Conditional Probability of a given specific b,"df.groupby('a').b.apply(lambda g: g.value_counts()/len(g))
"
how to get the date from datetime,"theDate = myDatetime.strftime('%Y-%m-%d')
theTime = myDatetime.strftime('%H:%M:%S')
"
How can I check if an object is an iterator in Python?,"def isiterable(x):
  try: iter(x)
  except TypeError: return False
  else: return True
"
Appending variable length columns in Pandas dataframe Python,"df = pd.DataFrame({col: pd.Series(range(df[col].min(), 
                                        df[col].max() + 1)) for col in df.columns })
print (df)
"
Jinja2: Converting hex to Base64,"import base64
def b64encode(s):
    return base64.b64encode(s)

jinja2_environment.filters['b64encode'] = b64encode
"
how to intersect lists in python with respect to index,"def shortest_of(lists):
    return min(lists, key=len)

def contains_sublist(lst, sublst):
    n = len(sublst)
    return any((sublst == lst[i:i+n]) for i in xrange(len(lst)-n+1)) 

def longest_common(lists):
    if not lists:
        return ()
    res = set()    
    base = shortest_of(lists)
    length = len(base)

    for i in xrange(length, 0, -1):
        for j in xrange(length - i + 1):
            candidate = ', ' + str(base[j:i+j]).strip('[]') + ','
            #candidate = base[j:i+j]  

            for alist in lists:
                if not candidate in ', ' + str(alist).strip('[]') + ',':
                #if not contains_sublist(alist, candidate):   
                    break
            else:
                res.add(tuple([int(a) for a in candidate[2:-1].split(',')]))
                #res.add(tuple(candidate))

        if res:
            return tuple(res)    

    return ()

if __name__ == '__main__':
    a = [1,0,2,5,4,3,1]
    b = [1,2,5,4,3,0,1]
    c = [1,3,5,4,2,0,1]

    print longest_common([a,b,c])
    print longest_common([b,c])
"
Python using the numbers 1 through 10 in a functions equation,"for t in range(10):
    print(""The falling distance in %d seconds is %s"" %(t, fallingDistance(t)))
"
How to turn a list/tuple into a space separated string in python using a single line?,">>> t = (""a"", ""b"", ""c"")
>>> "" "".join(t)
'a b c'
>>> 
"
Global variable in thread class does not update,"import threading
import time


boolean = False


class ThreadClass(threading.Thread):
    def __init__(self):
        super(ThreadClass, self).__init__()

    def run(self):
        global boolean
        for i in range(6):
            print str(i), boolean
            time.sleep(1)


t = ThreadClass()
t.start()

time.sleep(3)
boolean = True

t.join()
print 'end script'
"
Use regular expressions to match any number of characters as long as the first character isn't a digit,"not teststring[len(value):][:1].isdigit()
"
Why asyncio.wait does not wait for the FIRST_COMPLETED,"async def display_dt():

    while not stop_future.done():
        print('dt-1', datetime.datetime.now())
        # sleep 5 seconds or stop_future done
        await asyncio.wait([asyncio.sleep(5), stop_future], return_when=FIRST_COMPLETED) # <----
        print('dt-2', datetime.datetime.now())

    task = asyncio.Task.current_task()
    task.cancel()
    print(stop_future.result())
"
Regex capturing inserted variables in PHP SQL string statements,">>> import re
>>> query = ""SELECT * FROM `users` WHERE user='$user' AND password='$pass';"";
>>> re.findall(r""='(\$\w+)'"", query)
['$user', '$pass']
"
"dictionary of dictionaries, get keys in common for values","inp = ""easyCrate0/CMS_TRACKER_SY1527_4"".split(""/"")
common = []
for k in Dict:
    if all(x in Dict[k].values() for x in inp): # if all of the values match the user input, add it to common list
        common.append(k) 
print (common)
['25465466', '470311412']
"
Pandas Conditionally Concatenate,"print df
   bar  foo
0   [a  [a]
1  [b]   [b

for cols in df.columns:
    #print df[cols].str[-1] != ']'  
    df.loc[df[cols].str[-1] != ']', cols] = df[cols] + ']'
print df   
   bar  foo
0  [a]  [a]
1  [b]  [b]  
"
Convert a list of lists back into a list of tuples,"last_list = [tuple(x) for x in Long_list]
"
Looking into getting into Python specifically for a project that involves threads and graphs,"import multiprocessing as mp

def f(name):
  print name

p = mp.Process(target=f, args=('bob',))
q = mp.Process(target=f, args=('jeff',))
p.start()
q.start()
p.join()
q.join()
"
how to get cookie in template webpy,"render_partial = web.template.render('templates/', globals=template_globals)
template_globals.update(render=render_partial)
"
Limit the size of wxListCtrl in wxpython,"import wx
import wx.lib.mixins.listctrl as listmix

class TestListCtrl(wx.ListCtrl, listmix.ListCtrlAutoWidthMixin):
    def __init__(self, *args, **kwargs):
        wx.ListCtrl.__init__(self, *args, **kwargs)
        listmix.ListCtrlAutoWidthMixin.__init__(self)

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)
        self.panel = wx.Panel(self)
        self.panel.SetBackgroundColour(wx.GREEN)

        self.list = TestListCtrl(self, style=wx.LC_REPORT, size=(200, -1))
        self.list.InsertColumn(0, 'Name')
        self.list.InsertColumn(1, 'Age')   

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.list, proportion=0, flag=wx.EXPAND)
        self.sizer.Add(self.panel, proportion=1, flag=wx.EXPAND)

        self.SetSizerAndFit(self.sizer)
        self.SetSize((600, 400))       
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
"
jinja2 print to console or logging,"def debug(text):
  print text
  return ''

environment.filters['debug']=debug
"
PySide and python logging,"class OutLog:
    def __init__(self, edit, out=None, color=None):
        """"""(edit, out=None, color=None) -> can write stdout, stderr to a
        QTextEdit.
        edit = QTextEdit
        out = alternate stream ( can be the original sys.stdout )
        color = alternate color (i.e. color stderr a different color)
        """"""
        self.edit = edit
        self.out = None
        self.color = color

    def write(self, m):
        if self.color:
            tc = self.edit.textColor()
            self.edit.setTextColor(self.color)

        self.edit.moveCursor(QtGui.QTextCursor.End)
        self.edit.insertPlainText( m )

        if self.color:
            self.edit.setTextColor(tc)

        if self.out:
            self.out.write(m)
"
Is there any case in python when using a while loop would be best practice?,"def collatz(n):
    print n
    while n > 1:
        n = n // 2 if n % 2 == 0 else n * 3 + 1
        print n
"
grouping rows in list in pandas groupby,"In [202]:

df.groupby('a')['b'].apply(lambda x: x.tolist())

Out[202]:
a
A       [1, 2]
B    [5, 5, 4]
C          [6]
dtype: object

In [203]:

%timeit df.groupby('a')['b'].apply(lambda x: x.tolist())
%timeit df.apply(lambda row: df.groupby('a').get_group(row['a'])['b'].tolist(), axis=1)
1000 loops, best of 3: 888 µs per loop
100 loops, best of 3: 2.83 ms per loop
"
Creating Adjacency Lists from Dicts in Python,"g = {1:{2:.5, 3:.2}, 2:{4:.7}, 4:{5:.6, 3:.3}}
hubs = g.items() # list of nodes and outgoing vertices
size=max(map(lambda hub: max(hub[0], max(hub[1].keys())), hubs))+1 # matrix dimension is highest known node index + 1
matrix=[[None]*size for row in range(size)] # set up a matrix of the appropriate size

for node, vertices in hubs: # loop through every node in dictionary
    for vertice, weight in vertices.items(): # loop through vertices
        matrix[vertice][node] = weight # define adjacency of both nodes by assigning the vertice's weight
"
Can I have a non-greedy regex with dotall?,"re.findall('a*?bc*?', 'aabcc', re.DOTALL)"
Looping and returning all values in a dictionary,"def calc_check(workers):
    return sum(sum(hours) * 13 for hours in workers.values())
"
Python multiply range,">>> print ['{0:.2f}'.format(float(15)/x*100) for x in range(15,21)]
['100.00', '93.75', '88.24', '83.33', '78.95', '75.00']
"
Python Regex and the Copyright Symbol,"import sys
import unicodedata as ud
import re
import argparse
import functools

__usage__ = '''\
unicode_lookup.py -u '\d'    # Shows all unicode symbols that regex match '\d'
unicode_lookup.py number     # Shows all unicode symbols whose name regex matches 'number'
'''


def lookup(name_pat=None, from_num=0, to_num=0x10ffff, unicode_pattern=None,
           category_pattern=None, ignore_unnamed=True,
           combining=False):
    fmt = u""{symbol} {num} {cat} {bi} {w} {comb} {mir} '{name}'""
    print(fmt.format(
        symbol='Symbol', num='Num', name='NAME',
        cat='Category', bi='Bidirectional', w='Width',
        comb='Combining', mir='Mirrored'))
    for num in range(from_num, to_num + 1):
        s = unichr(num)
        if unicode_pattern and not unicode_pattern.match(s):
            continue
        category = ud.category(s)
        if category_pattern and not category_pattern.match(category):
            continue
        try:
            name = ud.name(s)
            if name_pat and not name_pat.search(name):
                continue
        except ValueError:
            if ignore_unnamed:
                continue
            else:
                name = '?'
        bidirectional = ud.bidirectional(s)
        combining_class = ud.combining(s)
        if combining and not combining_class:
            continue
        mirrored = ud.mirrored(s)
        width = ud.east_asian_width(s)
        data = dict(num=num, symbol=s, name=name,
                    cat=category, bi=bidirectional, w=width,
                    comb=combining_class, mir=mirrored)
        print(fmt.format(**data).encode('utf-8'))


def parse_options():
    parser = argparse.ArgumentParser(
        epilog=__usage__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('name_pat',
                        type=functools.partial(re.compile, flags=re.IGNORECASE))
    parser.add_argument('-f', '--from_num', default=0, type=int)
    parser.add_argument('-t', '--to_num', default=0x10ffff, type=int)
    parser.add_argument('-u', '--unicode_pattern',
                        type=functools.partial(re.compile, flags=re.UNICODE))
    parser.add_argument('--category_pattern', type=re.compile)
    parser.add_argument('--show_unnamed', action='store_true')
    parser.add_argument('--combining', action='store_true')
    return parser.parse_args()

if __name__ == '__main__':
    opt = parse_options()
    lookup(name_pat=opt.name_pat, from_num=opt.from_num, to_num=opt.to_num,
           unicode_pattern=opt.unicode_pattern,
           category_pattern=opt.category_pattern,
           ignore_unnamed=not opt.show_unnamed,
           combining=opt.combining)
"
Python: creating string array with integers,"a = [ ['x1_{}'.format(x), 'x1_{}'.format(x)] for x in range(1,101)]
b = []
for i in a:
  b.extend(i)
"
Numpy: Convert values in a 1-D array based upon dictionary,"In [63]: keys = np.array(mapping.keys())

In [64]: vals = np.array(mapping.values())

In [65]: result = vals[(data.reshape(-1, 1) == keys).nonzero()[1]]

In [66]: result
Out[66]: array([9, 0, 9, 9, 5, 0])
"
How can I get pandas Timestamp offset by certain amount of months?,"In [135]:
k=2
t1 + pd.datetools.relativedelta(months=k)

Out[135]:
Timestamp('2013-06-01 00:00:00')
"
Fastest way to modify list values with condition python,">>> list(map(lambda s: s+(100 if s < 4 else 1), a))
"
Convert a binary string into IEEE-754 single precision - Python,">>> a = [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0,
...      1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1]
>>> i = int(''.join(map(str, a)), 2)
>>> import struct
>>> struct.unpack('f', struct.pack('I', i))[0]
1.100000023841858
"
match dates using python regular expressions,"import datetime
import re

def valid_date(datestring):
        try:
                mat=re.match('(\d{2})[/.-](\d{2})[/.-](\d{4})$', datestring)
                if mat is not None:
                        datetime.datetime(*(map(int, mat.groups()[-1::-1])))
                        return True
        except ValueError:
                pass
        return False
"
Is it possible to concatenate QuerySets?,"strings = []
for i in range(0,(searchDiff+1)):
    filterString = str(int(searchRange[0]) + i)
    strings.append(filterString)

my_query_set = MyModel.objects.filter(arn__in=strings)
"
What is the correct way to make SQLalchemy store strings as lowercase?,"import sqlalchemy.types as types

class LowerCaseText(types.TypeDecorator):
    '''Converts strings to lower case on the way in.'''

    impl = types.Text

    def process_bind_param(self, value, dialect):
        return value.lower()

class User(Base):
    __tablename__ = 'user'
    id = Column(LowerCaseText, primary_key=True)
    ...
"
Python Crypto - example script explanation,"from Crypto.Cipher import AES
import base64

def rpad(s, fill='=', multiple=8):
    """"""
    Pad s with the fill char so the length of the string 
    is a multiple of `multiple` (default 8).
    """"""
    return s + fill * (-len(s) % multiple)

key = """"""
4e 99 06 e8  fc b6 6c c9  fa f4 93 10  62 0f fe e8
f4 96 e8 06  cc 05 79 90  20 9b 09 a4  33 b6 6c 1b
""""""
key = key.replace("" "","""").replace(""\n"","""").decode('hex')

mode = AES.MODE_CBC
iv = ""\x00""*16
enc = AES.new(key, mode, iv)

password = ""j1Uyj3Vx8TY9LtLZil2uAuZkFQA/4latT76ZwgdHdhw""
decoded = base64.b64decode(rpad(password, multiple=4))

o = enc.decrypt(decoded)
print(o[:-ord(o[-1])].decode('utf16'))
"
How to check if a specific integer is in a list,"if number_you_are_looking_for in list:
    # your code here
"
Legend only shows one label when plotting with pandas,"fig, ax = plt.subplots()

ax.plot(var.index.to_datetime(), var.total, 'b', label='Variance')
ax.set_ylabel('Variance of log wages')

ax2 = ax.twinx()
ax2.plot(shares.index.to_datetime(), shares.average, 'g' , label='Average Age')
ax2.set_ylabel('Average age')

lines = ax.get_lines() + ax2.get_lines()
ax.legend(lines, [line.get_label() for line in lines], loc='upper center')

ax.set_title('Wage Variance and Mean Age')
plt.show()
"
"Python, how to keep a non-class method as non-class method?","class Son_1(object):

    son_func = staticmethod(func_1)

class Son_2(object):

    son_func = staticmethod(func_2)
"
Fill NaN values in dataframe with pandas,"df = pd.DataFrame({'A': [4, None, None, 5, None, None],
                   'B': [2, None, None, 3, None, None],
                   'C': range(6)})

>>> df
    A   B  C
0   4   2  0
1 NaN NaN  1
2 NaN NaN  2
3   5   3  3
4 NaN NaN  4
5 NaN NaN  5

>>> df.fillna(method='ffill')
   A  B  C
0  4  2  0
1  4  2  1
2  4  2  2
3  5  3  3
4  5  3  4
5  5  3  5
"
Fermat Factorisation with Python,"#from math import ceil

def isqrt(n):
  x = n
  y = (x + n // x) // 2
  while y < x:
    x = y
    y = (x + n // x) // 2
  return x

def fermat(n, verbose=True):
    a = isqrt(n) # int(ceil(n**0.5))
    b2 = a*a - n
    b = isqrt(n) # int(b2**0.5)
    count = 0
    while b*b != b2:
        if verbose:
            print('Trying: a=%s b2=%s b=%s' % (a, b2, b))
        a = a + 1
        b2 = a*a - n
        b = isqrt(b2) # int(b2**0.5)
        count += 1
    p=a+b
    q=a-b
    assert n == p * q
    print('a=',a)
    print('b=',b)
    print('p=',p)
    print('q=',q)
    print('pq=',p*q)
    return p, q

n=103591*104729
fermat(n)
"
Python regex - Ignore parenthesis as indexing?,"re.findall('((?:A|B|C)D)', 'BDE')"
Find palindromic primes in Python,"count = 0
number = 2
while count < N
    if number is palidromic prime
        print number
        count += 1
    number += 1
"
Convert unicode codepoint to UTF8 hex in python,"chr(int('fd9b', 16)).encode('utf-8')"
Searching for a string in a multidimentional list and appending the sublist containing match to empty list,"def foo(myList,key,first=True):
    if first: #First Element Search
        return [x for x in myList if key in x]
    else: #Search Both Element
        return [x for x in myList if key in x or key in x[1]]

>>> foo(myList,'abc',0)
[['abc', 'abc-321']]
>>> foo(myList,'abc',1)
[['abc', 'abc-321'], ['def', '789-abc']]
"
Convert ast.Num to decimal.Decimal for precision in python,"from cStringIO import StringIO
from tokenize import generate_tokens, untokenize, NAME, NUMBER, OP, STRING

def is_float_literal(s):
    """"""Identify floating-point literals amongst all numeric literals.""""""
    if s.endswith('j'):
        return False  # Exclude imaginary literals.
    elif '.' in s:
        return True  # It's got a '.' in it and it's not imaginary.
    elif s.startswith(('0x', '0X')):
        return False  # Must be a hexadecimal integer.
    else:
        return 'e' in s  # After excluding hex, 'e' must indicate an exponent.

def decistmt(s):
    """"""Substitute Decimals for floats in a string of statements.

    >>> from decimal import Decimal
    >>> s = 'print +21.3e-5*-.1234/81.7'
    >>> decistmt(s)
    ""print +Decimal ('21.3e-5')*-Decimal ('.1234')/Decimal ('81.7')""

    >>> exec(s)
    -3.21716034272e-007
    >>> exec(decistmt(s))
    -3.217160342717258261933904529E-7

    """"""
    result = []
    g = generate_tokens(StringIO(s).readline)   # tokenize the string
    for toknum, tokval, _, _, _  in g:
        if toknum == NUMBER and is_float_literal(tokval):
            result.extend([
                (NAME, 'Decimal'),
                (OP, '('),
                (STRING, repr(tokval)),
                (OP, ')')
            ])
        else:
            result.append((toknum, tokval))
    return untokenize(result)
"
what's a good way to combinate through a set?,list(powerset('abcd'))
Python: replace some tags to html tags in string,"sample = re.sub(r'\\b(.*?)\\b', r'<h5>\1</h5>', sample)
sample = re.sub(r'\\a(\s*\w+)', r'<a href=""#task"">\1</a>', sample)
"
How to specify in YAML to always create log file in the project's folder using dictConfig?,"import os
import yaml

def logmaker():
    path = os.path.dirname(os.path.realpath(__file__))
    path = os.path.join(path, 'bot.log')
    return logging.FileHandler(path)

def main():
    # The file's path
    path = os.path.dirname(os.path.realpath(__file__))

    # Config file relative to this file
    loggingConf = open('{0}/logging.yml'.format(path), 'r')
    logging.config.dictConfig(yaml.load(loggingConf))
    loggingConf.close()
    logger = logging.getLogger('cloaked_chatter')
    logger.debug('Hello, world!')

if __name__ == '__main__':
    main()
"
Import single csv file with one data field going to separate table,"with open('foo.csv') as f:
    for row in csv.DictReader(f):
        cursor.execute('''INSERT INTO Product (ProductID, Name, UOM) 
                          VALUES (:ProductID, :Name, :UOM)''', row)
        for alias in row['Alias'].split(';'):
            cursor.execute('''INSERT INTO ProductAlias (Name, Alias) 
                              VALUES (?, ?)''', row['Name'], alias)
"
concatenate print stmt inside and outside of for loop into a sentence in python,"def PrintFruiteListSentence(list_of_fruits):
    sentence = 'You would like to eat '
    for i, item in enumerate (list_of_fruits):
        if i != (len(list_of_fruits) - 1):
            sentence += item + ' as fruit ' + str(i+2) + ' and '
        else:
            sentence += item + ' as fruit ' + str(i+2)
    sentence += ' in your diet'
    print sentence
"
finding index of an item closest to the value in a list that's not entirely sorted,">>> min(enumerate(a), key=lambda x: abs(x[1]-11.5))
(16, 11.33447)
"
How to access HttpRequest from urls.py in Django,"class MyListView(ListView):
    def dispatch(self, request, *args, **kwargs):
        self.queryset = Resources.objects.filter(user = request.user.username)
        return super(MyListView, self).dispatch(request, *args, **kwargs)
"
parsing a dns configuration file with python,"import re

dnsconf = open('dns.txt', 'rt')

x = []
for line in dnsconf:
    cont = re.findall('^local-data:\s+\""(\S+)\s+IN\s+(\S+)\s+(\S+)\""', line)
    if cont:
        x.append(cont)
        print cont
"
How to get categorical data back after transformations?,"import pandas as pd
import sklearn.feature_extraction as FE

data = pd.DataFrame({
    'foo': ['hi', 'no', 'please', 'no', 'yea', 'hi'], 
    'bar': [1, 5, 7, 2, 4, 5], 
    'zoo': ['car', 'bike', 'car', 'bus', 'bus', 'car']})

X_dicts = data.to_dict('records')
vec = FE.DictVectorizer(sparse=False)
X_vec = vec.fit_transform(X_dicts)

def inverse_transform(vec, X_vec):
    feature_map = vec.inverse_transform(X_vec)
    result = list()
    for dct in feature_map:
        newdct = dict()
        for k, v in dct.items():
            if '=' in k:
                k, v = k.split('=', 1)
            newdct[k] = v
        result.append(newdct)
    return result

data2 = pd.DataFrame(inverse_transform(vec, X_vec))
print(data2)
"
"Python float formatting - like ""g"", but with more digits","(""%e"" if log10(n) < -5 else ""%f"") % n
"
How to run an operation on a collection in Python and collect the results?,"def foo(x):
    return lambda f: f*x
"
Compare two lists in python and print the output,"children = {child.get('value') for child in xml_data}
for item in main_list:
    if item[4] in children:
        print(item[4])
"
How can I set Polymorphic Identity after a class is defined?,"from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import class_mapper

Base= declarative_base()


class A(Base):
    __tablename__ = ""a""

    id = Column(Integer, primary_key=True)
    type = Column(String)
    __mapper_args__ = {""polymorphic_on"": type, ""polymorphic_identity"": ""a""}

class B(A):
    pass

mapper = class_mapper(B)
mapper.polymorphic_identity = ""b""
mapper.polymorphic_map[""b""] = mapper

e = create_engine(""sqlite://"", echo=True)

Base.metadata.create_all(e)

s = Session(e)

s.add_all([A(), B(), B(), A(), A()])
s.commit()

s.close()

assert [obj.type for obj in s.query(B).order_by(A.id)] \
            == ['b', 'b']

assert [type(obj) for obj in s.query(B).order_by(A.id)] \
            == [B, B]

assert [obj.type for obj in s.query(A).order_by(A.id)] \
            == ['a', 'b', 'b', 'a', 'a']
"
Sorting a set of values,"sorted(s, key=float)"
Sort Python Dictionary by first four characters in Key,">>> sorted(yourdict.items(), key=lambda item: int(item[0].split()[0]))
[('0 -> 332', 877), ('666 -> 999', 4388), ('1333 -> 1665', 7998), ('3000 -> 3332', 9753), ('3666 -> 3999', 6267), ('4000 -> 4332', 4383), ('5666 -> 5999', 4495), ('6333 -> 6665', 7966)]
"
Accessing non-consecutive elements of a list or string in python,"def select(lst, *indices):
    return (lst[i] for i in indices)
"
Find combination of items in the same line in one file text and thei frequency,"from collections import defaultdict
import itertools

frequencies = defaultdict(int)
for line in open_file:
    line = line.strip().split()
    list1_used = ...
    list2_used = ...
    for combination in itertools.product(list1_used, list2_used):
        frequencies[combination] += 1
"
Regex positive look behind and look ahead,"import re
p = re.compile(ur'^ABC\S+\s+(\S+)(?=.*\sactive\b)', re.MULTILINE)

re.findall(p, input)
"
How can I format a list into a tuple with sub-tuples?,"result = []
for elem in inputlist:
    elems = elem.split(', ')
    elems[4:] = [tuple(elems[4:])]
    result.append(tuple(elems))
"
Open existing file of unknown extension,"import os
import glob

filename = glob.glob(os.path.join(folder, name + '.*'))[0]
"
"refactor code in order to use 3 values to make plot & tuple indices must be integers, not float","D=(0.133e-4,0.243e-4,0.283e-4)
for i, dval in enumerate(D):
    dx[i] = sc.sqrt(dval*dt/M)
"
How to create numpy.ndarray from tuple iteration,"In [46]:

np.array(a, dtype=object)
Out[46]:
array([['1A34', 'RBP', 0.0, 1.0, 0.0, 0.0, 0.0, 0.0],
       ['1A9N', 'RBP', 0.0456267, 0.0539268, 0.331932, 0.0464031,
        4.41336e-06, 0.522107],
       ['1AQ3', 'RBP', 0.0444479, 0.201112, 0.268581, 0.0049757,
        1.28505e-12, 0.480883],
       ['1AQ4', 'RBP', 0.0177232, 0.363746, 0.308995, 0.00169861, 0.0,
        0.307837]], dtype=object)
"
Delete digits in Python (Regex),"s = re.sub('^\\d+\\s|\\s\\d+\\s|\\s\\d+$', ' ', s)"
Generate all possible permutations of subsets containing all the element of a set,"from itertools import combinations, permutations
t = ('a', 'b', 'c', 'd', 'e')
slicer = [x for x in combinations(range(1, len(t)), 2)]
result = [(x[0:i], x[i:j], x[j:]) for i, j in slicer for x in permutations(t, len(t))]
"
"Using xticks, ticks not aligned properly with figure","import matplotlib.pyplot as plt

list_of_lists_of_lengths = [range(1000),range(500,2000)]
plt.subplot(1,1,1)    
plt.boxplot(list_of_lists_of_lengths)
plt.xlabel('max gap')
plt.ylabel('cluster lengths')
max_distance = (0, 100)
locs, labels = plt.xticks()
plt.xticks(locs, max_distance, size='small')
plt.show()
"
Python: How do you call a method when you only have the string name of the method?,">>> json_functions={}
>>> def make_available_to_json(f):
...  json_functions[f.__name__]=f
...  return f
...
>>> @make_available_to_json
... def sayhello():
...  print ""Hello World!""
...
>>> json_functions.get(""sayhello"")()
Hello World!
>>> json_functions[""sayhello""]()
Hello World!
>>> json_functions.get(""prove_riemann_hypothesis"", sayhello)()
Hello World!
"
calculations using both a value from a list and the index of that value?,">>> a = [1,2,3,4,5]
>>> b = [elem * (i+1) for i, elem in enumerate(a)]
>>> b
[1, 4, 9, 16, 25]
"
Run a few command line commands from c++,"#include <sys/types.h>
#include <sys/stat.h>

struct stat buf;
stat(filename, &buf);

// If it's a regular file, print the size in bytes
if ((buf.st_mode & S_IFREG) == S_IFREG)
{
  off_t size = buf.st_size;
  fprintf(stdout, ""%s is a regular file\n"", filename);
  fprintf(stdout, ""%s is a regular file: size %zd bytes\n"", filename, size);
}
"
lxml/beautifulsoup: Extracting text between two different tags,"from bs4 import BeautifulSoup, Tag

data = """"""
<data>Here is some text about a frog.  <hello ref=""1""/>This frog is <hello ref=""2""/>orange<goodbye idref=""2""/> and has polka-dots.<goodbye idref=""1""/>  Isn't this interesting?</data>
""""""
soup = BeautifulSoup(data, ""xml"")

text = """"
for elm in soup.find(""hello"", ref=""1"").next_siblings:
    if elm and elm.name == ""goodbye"" and elm.get(""idref"") == ""1"":
        break

    text += elm.get_text() if isinstance(elm, Tag) else elm

print(text)
"
Input issue Python,"if set(x).issubset(set('mui')):
"
List of dictionaries - how to format print output,"'{%(score)s-%(numrep)s}' % d
"
Python CSV: write rows according to dict mapping,"replacement_map = {'123' : ('a123', '1234'), '456' : ('00456',)}
input = ['123', '456', '234', '123', '789']
output = []
for value in input:
    try:
        output.extend(replacement_map[value])
    except KeyError:
        output.append(value)
"
How to encode English plain-text (consisting only of letters a-z and whitespace) using a 5-bit character encoding in Python?,"# This should not be more than 8
BITS = 5

def get_last_bits(value, count):
    return value & ((1<<count) - 1)

def pack(data):
    buf = bytearray(1)
    used_bits = 0

    for num in data:
        # All zeroes is a special value marking unused bits
        if not isinstance(num, int) or num <= 0 or num.bit_length() > BITS:
            raise TooMuchBits(num)

        # Character fully fits into available bits in current byte
        if used_bits <= 8 - BITS:
            buf[-1] |= num << used_bits
            used_bits += BITS

        # Character should be split into two different bytes
        else:
            # Put lowest bit into available space
            buf[-1] |= get_last_bits(num, 8 - used_bits) << used_bits
            # Put highest bits into next byte
            buf.append(num >> (8 - used_bits))
            used_bits += BITS - 8

    return bytes(buf)

def unpack(data):
    buf = bytearray()
    data = bytearray(data)

    # Characters are filled with logic AND and therefore initialized with zero
    char_value = 0
    char_bits_left = BITS

    for byte in data:
        data_bits_left = 8

        while data_bits_left >= char_bits_left:
            # Current character ends in current byte
            # Take bits from current data bytes and shift them to appropriate position
            char_value |= get_last_bits(byte, char_bits_left) << (BITS - char_bits_left)

            # Discard processed bits
            byte = byte >> char_bits_left
            data_bits_left -= char_bits_left

            # Zero means the end of the string. It's necessary to detect unused space in the end of data
            # It's otherwise possible to detect such space as a 0x0 character
            if char_value == 0:
                break

            # Store and initialize character 
            buf.append(char_value)
            char_value = 0
            char_bits_left = BITS

        # Collect bits left in current byte
        if data_bits_left:
            char_value |= byte
            char_bits_left -= data_bits_left

    return buf
"
"Better way, of writing a Long ""if"" statements?","if suit  in (""Diamonds"",""Hearts"",""Clubs"",""Spades"") and value in (""Ace"",""king"",""Queen""....):
    return ""Accepted""
else:
    return ""Wrong input""
"
Using FOR IN and dictionaries in PYTHON 2.7,">>> a = dict()
>>> a['trees'] = dict()
>>> a['trees']['oak'] = 453
>>> a['trees']['pine'] = 12
>>> a['trees']['chestnut'] = 65
>>> b = a['trees']
>>> for key,value in b.iteritems():
...     b[key] = value + 100
... 
>>> a
{'trees': {'chestnut': 165, 'oak': 553, 'pine': 112}}
"
pandas long to wide windowing,"def rolling(df, window_size=2):
    dfs = [df]
    for i in range(1, window_size):
        dfs.append(df.shift(-i))
    res = pd.concat(dfs, axis=1).iloc[:-(window_size-1)]
    colnames = [c + str(i) for i in range(1, window_size+1) for c in df.columns]
    reorder = [c + str(i) for c in df.columns for i in range(1, window_size+1)]
    res.columns = colnames
    return res[reorder]

print rolling(df, 3)
"
what should I change in my function,"def fun(list_1):
    data_frames = []
    for each_value in list1:
        # perform some operation and create a new data frame(pandas) named ""new_data_frame"" for each value in the list
        print each_value
        data_frames.append(new_data_frame)

return data_frames
"
"GAE python - how to change the ""one"" that a ""many"" object points to?","from google.appengine.ext import db

class SuppSet(db.Model):
    name = db.StringProperty()

class Supp(db.Model):
    suppset = db.ReferenceProperty(SuppSet, collection_name='supp_list')

suppSet0, suppSet1 = SuppSet(name = '0'), SuppSet(name = '1')
suppSet0.put()
suppSet1.put()

supp = Supp(suppset=suppSet0)
supp.put()

print 'suppSet0.supp_list: %r' % list(suppSet0.supp_list)
print 'suppSet1.supp_list: %r' % list(suppSet1.supp_list)
print 'suppset for sup: %s' % supp.suppset.name

supp.suppset = suppSet1
supp.put()

print 'suppSet0.supp_list: %r' % list(suppSet0.supp_list)
print 'suppSet1.supp_list: %r' % list(suppSet1.supp_list)
print 'suppset for sup: %s' % supp.suppset.name
"
Python copy matrix,"def reduce_matrix(M, i, j):
    newM=list(M[:])
    print id(M[0]), id(M[1]), id(M[2])
    for q in range(len(newM)+1):
        if q==i-1:
            del newM[q]
    for y in range(len(newM)):
        for x in range(len(newM[y])):
            if x==j-1:
                del newM[y][x]
    return newM

lis = [[1,2,3],[3,4,5],[7,4,2]]
print id(lis[0]), id(lis[1]), id(lis[2])
reduce_matrix(lis, 1, 1)

>>>
3074546604 3072046316 3072047084
3074546604 3072046316 3072047084
"
How can I get the decorators of a function?,"class record_decorator(object):
    def __init__(self, decorator):
        self.decorator = decorator

    def __call__(self, func):
        result = self.decorator(func)
        if not hasattr(result, 'decorators'):
            if hasattr(func, 'decorators'):
                result.decorators = func.decorators[:]  # copy
            else:
                result.decorators = []
        result.decorators.append(self.decorator)
        return result

>>> def a(func):
...     print 'decorating with a'
...     return func
...
>>> def a(func):
...     print 'decorating with a'
...     return func
...
>>> @record_decorator(b)
... @record_decorator(a)
... def myfunc(): pass
...
decorating with a
decorating with b
>>> myfunc.decorators
[<function __main__.a>, <function __main__.b>]
"
Fastest way to load numeric data into python/pandas/numpy array from MySQL,"conversions[FIELD_TYPE.DECIMAL] = float
conversions[FIELD_TYPE.NEWDECIMAL] = float
"
Python passing in a list of parameters to be used as dynamic properties,"class MultipleMacroFor(object):
    def __init__(self, macro, names):
        self._macro = macro
        self._names = names

    def get_renderable(self, macro_var):
        return get_template_attribute(self.macro, macro_var)

    def __getattr__(self, name):
        if name in self._names:
            return self.get_renderable(name)
        raise AttributeError(
            ""object %s has no attribute '%s'"" % (
                type(self).__name__, name)
            )
"
subtraction operator python,"b = ""the""
a = ""theAtheBthethe""
a = """".join(a.rsplit(""the"", 2))   # or """".join(a.rsplit(""thethe"", 1)) if you want to remove ""theth"" of the string
print a
>>> ""theAtheB""
"
Assigning list to an array in python,"f=open('/path_to_file/list_2_array.dat', 'r')
l = []
for line in f.readlines():
    l.append(int(line.strip().split()[-1]))
array=np.array(l)
"
Strip whitespace from Mako template output (Pylons),"from mako import TemplateLookup

template_lookup = TemplateLookup(directories=['.'])
template = template_lookup.get_template(""index.mako"")
whitespace_mess = template.render(somevar=""no whitespace here"")
return whitespace_mess # Why stop here?
"
Iterating over dict values,"z = {'x':(123,""SE"",2,1),'q':(124,""CI"",1,1)}
for i in z.keys(): #reaching the keys of dict
    for x in z[i]: #reaching every element in tuples
        if x==""CI"": #if match found..
            print (""{} holding {}."".format(i,x)) #printing it..
"
"PyLint, PyChecker or PyFlakes?","#!/usr/local/bin/python
# by Daniel Rosengren, modified by e-satis
""""""
Module doctring
""""""


import time
from sys import stdout

BAILOUT = 16
MAX_ITERATIONS = 1000

def mandelbrot(dim_1, dim_2):
    """"""
    function doc string
    """"""
    cr1 = dim_1 - 0.5
    ci1 = dim_2
    zi1 = 0.0
    zr1 = 0.0

    for i in xrange(MAX_ITERATIONS) :
        temp = zr1 * zi1
        zr2 = zr1 * zr1
        zi2 = zi1 * zi1
        zr1 = zr2 - zi2 + cr1
        zi1 = temp + temp + ci1

        if zi2 + zr2 > BAILOUT:
            return i

    return 0

def execute() :
    """"""
    func doc string
    """"""
    print 'Rendering...'
    for dim_1 in xrange(-39, 39): 
        stdout.write('\n')
        for dim_2 in xrange(-39, 39):
            if mandelbrot(dim_1/40.0, dim_2/40.0) :
                stdout.write(' ')
            else:
                stdout.write('*')


START_TIME = time.time()
execute()
print '\nPython Elapsed %.02f' % (time.time() - START_TIME)
"
Python group data into one hour intervalls,"import pandas as pd

times = [
'2015-05-01 14:05:49',
'2015-05-12 14:35:49',
'2015-05-13 09:56:48',
'2015-05-07 11:01:15',
'2015-05-13 11:00:04',
'2015-05-23 11:30:04',
'2015-05-05 13:21:27',
]

df = pd.DataFrame(pd.to_datetime(times), columns=['date'])

print(df.groupby(df['date'].map(lambda x: x.hour)).describe())
"
How to use postgres cursor within Python code,"cursor = conn.cursor(name='cursor_x')
query = ""select * from t""
cursor.execute(query)
for row in cursor:
    print row
"
Python: Regular Expression not working properly,">>> pattern1 = r""""""(?x)               # set flag to allow verbose regexps
...               ([A-Z]\.)+         # abbreviations, e.g. U.S.A.
...               |\$?\d+(\.\d+)?%? # numbers, incl. currency and percentages
...               |\w+([-']\w+)*    # words w/ optional internal hyphens/apostrophe
...               |[+/\-@&*]        # special characters with meanings
...               |\S\w*                       # any sequence of word characters# 
... """"""            
>>> text=""My weight is about 68 kg, +/- 10 grams.""
>>> re.findall(pattern1, text)
[('', '', ''), ('', '', ''), ('', '', ''), ('', '', ''), ('', '', ''), ('', '', ''), ('', '', ''), ('', '', ''), ('', '', ''), ('', '', ''), ('', '', ''), ('', '', ''), ('', '', '')]
>>> pattern2 = r""""""(?x)                   # set flag to allow verbose regexps
...                       (?:[A-Z]\.)+           # abbreviations, e.g. U.S.A.
...                       |\d+(?:\.\d+)?%?       # numbers, incl. currency and percentages
...                       |\w+(?:[-']\w+)*       # words w/ optional internal hyphens/apostrophe
...                       |(?:[+/\-@&*])         # special characters with meanings
...                     """"""
>>> text=""My weight is about 68 kg, +/- 10 grams.""
>>> re.findall(pattern2, text)
['My', 'weight', 'is', 'about', '68', 'kg', '+', '/', '-', '10', 'grams']
"
How to find elements of an array in Python and add more information to it,">>> from nltk import sent_tokenize, word_tokenize, pos_tag
>>> sent = ""John write His name as Ishmael""
>>> tagged_sents = [pos_tag(word_tokenize(i)) for i in sent_tokenize(sent)]
>>> added_annotation_sents = []
>>> for sentence in tagged_sents:
...     each_sent = []
...     for word, pos in sentence:
...             caps = ""CAPITALIZED"" if word[0].isupper() else None
...             isnoun = ""noun"" if word[1][0] == ""N"" else ""non-noun""
...             each_sent.append((word,caps,isnoun))
...     added_annotation_sents.append(each_sent)
... 
>>> added_annotation_sents
[[('John', 'CAPITALIZED', 'non-noun'), ('write', None, 'non-noun'), ('His', 'CAPITALIZED', 'non-noun'), ('name', None, 'non-noun'), ('as', None, 'non-noun'), ('Ishmael', 'CAPITALIZED', 'non-noun')]]
"
Can I convert a tuple to a parameter list 'inline'?,"error_info = traceback.format_exception(*sys.exc_info())
"
Remove repeating spaces manually in a string,"# you iterate over the *initial* length of Ret
for i in range(0, len(Ret)):
    # ...
    elif Ret[i] == "" "":
        if space is False:
            space = True
        else:
            # when you hit a space and you have seen a space directly
            # before then you check the next index…
            if i+1 == len(Ret):
                Ret = Ret[:i]
            else:
                # … and remove the next index from the string
                Ret = Ret[:i] + Ret[(i+1):]

    # now at the end of the loop, `i` is incremented to `i + 1`
    # although you have already removed the character at index `i`
    # making the next character you would have to check belong to
    # index `i` too
"
How can I get a full list of class members without instantiating a class?,"class a(object):
    b = 'a'
    c = 'd'

print dir(a)
"
Cross-list comprehension in Python,"a_sep = [x.split('/')[1] for x in a]
idxs = [i for i, x in enumerate(a_sep) if x in b]
"
How to equalise two different Dataframe column into same size,"df1 = pd.DataFrame(np.random.rand(100,2), columns = list('ab'))
df2 = pd.DataFrame(np.random.rand(50,2), columns = list('ab'))
x = len(df1)/len(df2)
df3 = pd.DataFrame(columns=['a', 'b'], index=df1.index)
df3[::x] = df2.values

In[78]: df3.head()
Out[78]: 
           a          b
0  0.3328085  0.7470998
1        NaN        NaN
2  0.8862908  0.5316886
3        NaN        NaN
4  0.7480417  0.7225618
"
Removing the first folder in a path,os.path.join(*x.split(os.path.sep)[2:])
Break bytes object into n equally sized blocks based on index,"ciphertext = b'ciphertext'

blocks = [ciphertext[i:i+keylength] for i in range(0, len(ciphertext), keylength)]
# [b'cip', b'her', b'tex', b't']

transposed = [bytes(t) for t in zip_longest(*blocks, fillvalue=0)]
# [b'chtt', b'iee\x00', b'prx\x00']
"
convert double to float in Python,"struct.unpack('f', struct.pack('f', 0.00582811585976))"
Print python list in groups of 3,"from itertools import imap,islice

li = ['sea','mountain','desert',
      'Emma','Cathy','Kate',
      'HH','VVVVVVV','AAA',
      'round','flat','sharp',
      'nut','banana','apple',
      'heeeeeeeeeeen','tiger','snake'
      'red','purple','white',
      'atlantic','pacific','antarctic',
      'Bellini']

print 'len of li == %d\n' % len(li)
def cols_print(li,nc):
    maxel = tuple(max(imap(len,islice(li,st,None,nc)))+2
                  for st in xrange(nc))

    nblines,tail = divmod(len(li),nc)
    stakes = nc*['%%-%ds']
    form = ''.join(stakes) % maxel

    itn = iter(li).next

    print '\n'.join(form % tuple(itn() for g in xrange(nc))
                  for i in xrange(nblines)) 
    if tail:
        print ''.join(stakes[nc-tail:]) % maxel[0:tail] % tuple(li[-tail:]) + '\n'
    else:
        print


for nc in xrange(3,8):
    cols_print(li,nc)
    print 'mwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwmwm'
"
Map arrays with duplicate indexes?,"In [120]: flat_coord = np.ravel_multi_index(coord.T, (3,3))

In [121]: sums = np.bincount(flat_coord, weights)

In [122]: a = np.zeros((3,3))

In [123]: a.flat[:len(sums)] = sums

In [124]: a
Out[124]: 
array([[ 1.,  0.,  3.],
       [ 1.,  0.,  3.],
       [ 0.,  2.,  0.]])
"
Python Converting a sorted dictionary to list?,"[a for a,_ in sorted(zip(L1, L2), key=lambda x: x[1], reverse=True)][:3]
"
Sorting names containing numbers,"l.split()[0]
"
How to use string formatting to dynamically assign variables,"instance = getattr(rsyslog, 'instance{}'.format(this_instance_number))
setattr(instance, attribute, variable)
"
Regex for removing data in parenthesis,"item = re.sub(' ?\\([^)]+\\)', '', item)"
Minimum and maximum timestamps per hour bucket,">>> from datetime import datetime
>>> from itertools import groupby
>>> def min_max_per_hour(iterable):
...     for dayhour, grouped in groupby(iterable, lambda dt: (dt.date(), dt.hour)):
...         minimum = next(grouped)  # first object is the minimum for this hour
...         maximum = minimum  # starting value
...         for dt in grouped:
...             maximum = dt   # last assignment is the maximum within this hour
...         yield (minimum, maximum)
...
>>> textfile = '''\
... 16-07-2015 18:08:20
... 16-07-2015 18:08:22
... 16-07-2015 18:08:30
... 16-07-2015 18:08:40
... 17-07-2015 10:04:01
... 17-07-2015 10:14:31
... 17-07-2015 10:14:59
... 17-07-2015 12:24:11
... '''.splitlines()
>>> datetimes = (datetime.strptime(line.strip(), '%d-%m-%Y %H:%M:%S') for line in textfile)
>>> for mindt, maxdt in min_max_per_hour(datetimes):
...     print mindt, maxdt
...
2015-07-16 18:08:20 2015-07-16 18:08:40
2015-07-17 10:04:01 2015-07-17 10:14:59
2015-07-17 12:24:11 2015-07-17 12:24:11
"
How to refer to the lower classes perameters of a class in a class in python,"class dog:
    def __init__(self,x,y):
        self.x=x
        self.y=y
    def print_a(self):
        print self.x.a
        print self.y.a
"
Set partition with fixed size,"from itertools import permutations

def take(l, partition):
  if len(partition) == 1:
    for p in permutations(l):
      yield (p,)
  else:
    for p in permutations(l,partition[0]):
      for t in take([x for x in l if x not in p], partition[1:]):
        yield (p,) + t
"
python: how to plot one line in different colors,"import numpy as np
import matplotlib.pyplot as plt

def uniqueish_color():
    """"""There're better ways to generate unique colors, but this isn't awful.""""""
    return plt.cm.gist_ncar(np.random.random())

xy = (np.random.random((10, 2)) - 0.5).cumsum(axis=0)

fig, ax = plt.subplots()
for start, stop in zip(xy[:-1], xy[1:]):
    x, y = zip(start, stop)
    ax.plot(x, y, color=uniqueish_color())
plt.show()
"
Time series with appending issue in pandas data frame,"import pandas as pd

df = pd.DataFrame({""a"":[1,2,3], ""b"":[31,41,51],""c"":[31,52,23]}, index=[""z"", ""y"", ""x""])
df.index = pd.date_range('20160101',periods=3,freq='T')

df1 = pd.DataFrame({""a"":[41,55,16]}, index=[""w"", ""v"", ""u""])
df1.index = pd.date_range('20160104',periods=3,freq='T')

df2 = pd.DataFrame({""b"":[24,3,57]}, index=[""w"", ""v"", ""u""])
df2.index = pd.date_range('20160104',periods=3,freq='T')

df3 = pd.DataFrame({""c"":[111,153,123]}, index=[""w"", ""v"", ""u""])
df3.index = pd.date_range('20160104',periods=3,freq='T')
"
RDD to multidimensional array,"rdd = sc.parallelize(xrange(1, 10))
nrow = int(rdd.count() ** 0.5) # Compute number of rows

rows = (rdd.
   zipWithIndex(). # Add index, we assume that data is sorted
   groupBy(lambda (x, i): i / nrow). # Group by row
   # Order by column and drop index
   mapValues(lambda vals: [x for (x, i) in sorted(vals, key=lambda (x, i): i)])))
"
python: find and replace numbers < 1 in text file,"string_numbers=contents.split()
print(string_numbers)
# ['0.259515E+03', '0.235095E+03', '0.208262E+03', '0.230223E+03', '0.267333E+03', '0.217889E+03', '0.156233E+03', '0.144876E+03', '0.136187E+03', '0.137865E+00']
"
Transforming a list,"d = {}
l = [['0', '10'], ['0', '11'], ['0', '12'], ['1', '10'], ['1', '11']]
for p in l:
    if p[0] in d:
        d[p[0]].append(p[1])
    else:
        d[p[0]] = [p[1]]

>>> d
{'1': ['10', '11'], '0': ['10', '11', '12']}
"
How to change a list in a for loop? Labouchere in Python,"bet.pop(0) # remove first
bet.pop(-1) # remove last
"
Python (2.7) - Replacing multiple patterns in a string using re,">>> re.sub(r'\.\s*(?!$)', r'.  ', re.sub(r'\s+', ' ', s))
'This is a strange sentence.  There are too many spaces.  And.  Some periods are not.  placed properly.'
"
Permute a list using Python,"import pprint
from itertools import product

def myproduct():
    keys = 'abcdefg'
    values = [(0, 1) for k in keys]

    for value in product(*values):
        d = dict(zip(keys, value))
        # Skip: C and F that are 0 (False)
        if d['c'] == 0 or d['f'] == 0:
            continue

        # Skip: When A is false, E and G cannot be false
        if d['a'] == 0 and (d['e'] == 0 or d['g'] == 0):
            continue

        # Skip: When B is false, D cannot be false
        if d['b'] == 0 and d['d'] == 0:
            continue

        yield d  # This 'permutation' is good

for d in myproduct():
    pprint.pprint(d)
"
Search data object and concatenate items in array of strings,"def joinItems(myList, version)
    toConcate = []
    for dct in filter(lambda dct: dct[u""version""] == version, myList):
       toConcate.extend(dct[u""items""])

    return ""seperator"".join(toConcate)
"
python strong/weak dynamic/static type language?,"for a in {1, 'abc', 3.14159}:
    print a
    print type(a)
"
Displaying Label widget based on Radio Button answer,"try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk


class MainApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        # the main container that holds all the frames
        container = tk.Frame(self)

        container.pack(side = ""top"", fill = ""both"", expand = True)
        container.grid_rowconfigure(0, weight = 1)
        container.grid_columnconfigure(0,weight = 1)

        def show_1(button):
            self.frame_2.grid_remove()
            self.frame_1.show(button)

        def show_2(button):
            self.frame_1.grid_remove()
            self.frame_2.show(button)

        self.frame_1 = Page1(container, show_2)
        self.frame_2 = Page2(container, show_1)


class Page1(tk.Frame):
    def __init__(self,parent,callback):
        tk.Frame.__init__(self,parent)
        self.grid(row = 0, column = 0, sticky = ""w"")
        self.callback = callback

        lbl1 = tk.Label(self,text = ""Yes"",font =(""Helvetica"",12,""bold""))
        lbl1.grid(row=1,sticky=""W"")

        lbl2 = tk.Label(self,text = ""No"",font =(""Helvetica"",12,""bold""))
        lbl2.grid(row=1,column=1,sticky=""W"")

        btn1 = tk.Button(self, text=""next page"", font=('MS', 24, 'bold'))
        btn1.grid(row=3,column = 0,columnspan=1)

        self.var1 = tk.BooleanVar()
        rButton1 = tk.Radiobutton(self,variable = self.var1,value=True)

        rButton1.grid(row=2,sticky = ""W"")

        rButton2 = tk.Radiobutton(self,variable = self.var1,value=False)
        rButton2.grid(row=2,column=1,sticky = ""W"")

        btn1['command']= self.button_clicked

    def button_clicked(self):
        if self.var1.get():
            self.callback('button_one')
        else:
            self.callback('button_two')


class Page2(tk.Frame):
    def __init__(self,parent,controller):
        tk.Frame.__init__(self,parent)

    def show(self, selected_button):
        if selected_button == 'button_one':
            text = ""This is reccomendation 2""
        elif selected_button == 'button_two':
            text = ""This is reccomendation 3""
        else:
            text = selected_button
        print(selected_button)
        lbl = tk.Label(self,text=text,font=(""Helvetica"",12,""bold""))
        lbl.pack()
        self.grid()


app = MainApp()
app.mainloop()
"
Vectorized (partial) inverse of an N*M*M tensor with numpy,"import numpy as np
a = np.random.rand(12, 3, 3)
np.linalg.inv(a)
"
Inputting data from file into tuple,"filename = 'temps.txt'

all_temps = []

with open(filename, 'r') as f:
    for line in f:
        line = [s.strip() for s in line.split(',')]
        city = line[0]
        temps = [float(s) for s in line[1:] if s]
        all_temps.append((city, temps))

for city, temps in all_temps:
    print('city:{0}, temps:{1}'.format(city, temps))
"
How to use subprocess when multiple arguments contain spaces?,subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])
Python lxml - How to remove empty repeated tags,"return all((recursively_empty(c) for c in e.getchildren()))
"
Storing data into namedtuples with empty fields to add other stuff,"from collections import namedtuple

field_names = data[0].replace("" "", ""_"").lower().split("","")
field_names += ['placeholder_1', 'placeholder_2']
Entry = namedtuple('Entry', field_names)

list_of_named_tuples = []
mock_data = [None, None]
for row in data[1:]:
    row_data = row.split("","") + mock_data
    list_of_named_tuples.append(Entry(*row_data))
"
More efficient way of running a random traversal of a directed graph with Networkx,"G = nx.DiGraph()
<add some stuff to G>

# Get a random path from the graph
all_paths = nx.all_pairs_shortest_path(G)

# Choose a random source
source = random.choice(all_paths.keys())
# Choose a random target that source can access
target = random.choice(all_paths[source].keys())
# Random path is at
random_path = all_paths[source][target]
"
Most efficient way to add an item and at the same time remove one from a list with a fixed length,"activities = [None] * 5
index = 0

# some code in-between

activities[index] = activity

if index == 4:
    index = 0
else:
    index = index + 1
"
Subtract dates in Django?,"months = lambda a, b: abs((a.year - b.year) * 12 + a.month - b.month) + int(abs(a.day - b.day) > 15)
"
Convert Varied Text Fields of Duration to Seconds in Pandas,"from collections import defaultdict
import re

def humantime2seconds(s):
    d = {
      'w':      7*24*60*60,
      'week':   7*24*60*60,
      'weeks':  7*24*60*60,
      'd':      24*60*60,
      'day':    24*60*60,
      'days':   24*60*60,
      'h':      60*60,
      'hr':     60*60,
      'hour':   60*60,
      'hours':  60*60,
      'm':      60,
      'min':    60,
      'mins':   60,
      'minute': 60,
      'minutes':60
    }
    mult_items = defaultdict(lambda: 1).copy()
    mult_items.update(d)

    parts = re.search(r'^(\d+)([^\d]*)', s.lower().replace(' ', ''))
    if parts:
        return int(parts.group(1)) * mult_items[parts.group(2)] + humantime2seconds(re.sub(r'^(\d+)([^\d]*)', '', s.lower()))
    else:
        return 0

df['seconds'] = df.driving_duration_text.map(humantime2seconds)
"
Python: split elements of a list,[i.partition('\t')[-1] for i in l if '\t' in i]
xml filtering with python,"import xml.etree.ElementTree as xee
data='''\
<node1>
  <node2 a1=""x1""> ... </node2>
  <node2 a1=""x2""> ... </node2>
  <node2 a1=""x1""> ... </node2>
</node1>
'''
doc=xee.fromstring(data)

for tag in doc.findall('node2'):
    if tag.attrib['a1']=='x2':
        doc.remove(tag)
print(xee.tostring(doc))
# <node1>
#   <node2 a1=""x1""> ... </node2>
#   <node2 a1=""x1""> ... </node2>
# </node1>
"
Python variable value reset out of loop,"q = [ [ 0 for j in range(2) ] for i in range(2) ]
"
get characters from string in python,"p = re.compile(""^TestVar\s+(\d{8})\s+(\S+)"", re.MULTILINE) 
m = p.findall(input) 
"
Python bytearray isn't as long as it should be,"with open('testfile', 'wb') as f:
    f.write('\r\n')
with open('testfile', 'r') as f:
    assert f.read() == '\n' # converted
"
How do I split a list into a list of lists on a specific character in the elements?,">>> a
['(617) 965-2555<br />\nOrganization Name', 'Street Name', 'City', 'Zip code', '(413) 333-2251<br />\nOrg Name 2', 'Address', 'City', 'Zip code 2', '(617) 568-7777</p>\n\n']
>>> [i.split(""{}"") for i in ""{}"".join(a).split(""\n"")]
[['(617) 965-2555<br />'], ['Organization Name', 'Street Name', 'City', 'Zip code', '(413) 333-2251<br />'], ['Org Name 2', 'Address', 'City', 'Zip code 2', '(617) 568-7777</p>'], [''], ['']]
"
Handy return values in Python,"def test(a):
    ''' Always returns a 3-tuple, composed of Flag,data,data. Data may be None '''
    if a > 0:
        return True, None, None
    else:
        return False, 123, 'foo'

flag,data1,data2 = test(a)
"
Python: Unsorted/Sorted Lists Return Different Values?,"total += abs(med - i)
"
Can you open stdin as a file on MS Windows in Python?,"import os
import tempfile

with tempfile.NamedTemporaryFile(delete=False) as f:
     f.write('\n'.join(inbuff).encode('utf-8'))

p = Popen(['/path/to/myapp', '-i', f.name], stdout=PIPE)
outbuff, conditionbuff = [], []
for line in iter(p.stdout.readline, ''):
    line = line.strip().decode('utf-8')
    if 'condition' in line:
        conditionbuff.append(line)
    else:
        outbuff.append(line)
p.stdout.close()
p.wait()
os.remove(f.name) #XXX add try/finally for proper cleanup
"
Convert a list of tuples (3 elements each) to a dict {a: {b: set(c)}},">>> structure = {}
>>> for a, b, c in ['foo', 'bar', 'baz']:
    structure.setdefault((a, b), set()).add(c)


>>> structure
{('b', 'a'): set(['r', 'z']), ('f', 'o'): set(['o'])}
"
Python Filtering 2 Lists,"r = [v for v in secondlst if v not in lst]
"
Get function name as a string in python,">>> def func():
...     pass
... 
>>> new_func = func
>>> print func.__name__
func
>>> print new_func.__name__
func
"
How to get max value for a specific key from a python dictionary,"d = dict((row[0], row[1:]) for row in zip(a['columns'], *a['data']))
"
How would I check if a number is odd in python without using modulo or a library?,"def isOdd(num): 
     return not (num/2.0).is_integer() and type(num) in [int, long]
"
How do you filter a string to only contain letters?,"def letters(input):
    valids = []
    for character in input:
        if character.isalpha():
            valids.append(character)
    return ''.join(valids)
"
If I use a for loop in python do I need to set the variable being used to count to 0 or will the for loop set it?,"for i in range(len(somelist)):
    element = somelist[i]
"
Find indices of common values in two arrays,"def unq_searchsorted_v1(A,B):
    out1 = (np.searchsorted(B,A,'right') - np.searchsorted(B,A,'left'))==1
    out2 = (np.searchsorted(A,B,'right') - np.searchsorted(A,B,'left'))==1  
    return out1,out2
"
filter items in a python dictionary where keys contain a specific string,"filtered_dict = {k:v for (k,v) in d.items() if filter_string in k}
"
"python3 string ""abcd"" print: aababcabcd?","def string_splosion(string):
    i, result = 0, ''
    while i < len(string): # < instead of <=
        i += 1
        result += string[:i]
    return result
"
Better and concise way of writing this regex pattern to examine conjoined occurrence of these phrases?,"if (""University"" in string or ""School"" in string) and (""Business"" in string or ""Management"" in string):
    ...
"
How to get class name when there is attribute attached?,"class Foo(object):
    def MethodName():
        pass

print type(Foo()).__name__ 
# Foo
"
Python: multidimensional array masking,">>> import numpy as np
>>> A = np.ones((5,5), dtype=int)
>>> B = [1, 3, 7, 23]
>>> A.put(B, [0]*len(B))
>>> A
array([[1, 0, 1, 0, 1],
       [1, 1, 0, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1]])
"
Importing matlab structs within structs in python,"from scipy.io import loadmat

data = loadmat('filename.mat', squeeze_me=True, struct_as_record=False)

leaf1 = data['tree1'].leaf1
# 1

leaf2 = data['tree1'].leaf2
# 2
"
python: multiple arithmetic operations for numpy array,"arr = np.zeros((N, M, T))
for it in xrange(T):
    arr[:,:,it] -= np.sum(arr[:,:,:it], axis=2)
"
how to convert a list into a pandas dataframe,"import pandas as pd
import numpy as np
rows = [(u'KY', [u'McConnell'], [u'Grimes'], [u'Rep']),
        (u'AR', [u'Cotton'], [u'Pryor'], [u'Dem']),
        (u'MI', [u'Land'], [u'Peters'], [])]

def get(r, nth):
    '''helper function to retrieve item from nth list in row r'''
    return r[nth][0] if r[nth] else np.nan

def remove_list_items(list_of_records):
    for r in list_of_records:
        yield r[0], get(r, 1), get(r, 2), get(r, 3)
"
possible speed up of pandas apply,"In [176]: p1, p2, df_later = find_values('ABC', pd.Timestamp('4:15:03'))

In [177]: p1, p2
Out[177]: (35.710000000000001, 37.369999999999997)

In [178]: df_later
Out[178]: 
                   Timestamp  Price
2 2015-01-19 04:15:05.184000  37.37
3 2015-01-19 05:36:25.240000  37.60
4 2015-01-19 05:44:40.678000  36.51
"
A functon that finds the numeric letter from the input,"def get_level(module_info):
    for i in module_info[0]:
        if str.isdigit(i):
            return i
"
"Merge multiple *.csv, *.txt, or *.ascii files based on a common field using python","#!/usr/bin/env python
import argparse, csv
if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='merge csv files on field', version='%(prog)s 1.0')
    parser.add_argument('infile', nargs='+', type=str, help='list of input files')
    parser.add_argument('--out', type=str, default='temp.csv', help='name of output file')
    args = parser.parse_args()
    data = {}
    fields = []

    for fname in args.infile:
        with open(fname, 'rb') as df:
            reader = csv.DictReader(df)
            for line in reader:
                # assuming the field is called ID
                if line['ID'] not in data:
                    data[line['ID']] = line
                else:
                    for k,v in line.iteritems():
                        if k not in data[line['ID']]:
                            data[line['ID']][k] = v
                for k in line.iterkeys():
                    if k not in fields:
                        fields.append(k)
            del reader

    writer = csv.DictWriter(open(args.out, ""wb""), fields, dialect='excel')
    # write the header at the top of the file
    writer.writeheader()
    writer.writerows(data)
    del writer
"
calling a mysql and printing data matching text file(python),"cursor = db.cursor()

# execute SQL select statement
cursor.execute(""SELECT name FROM Vehicle"")

# commit your changes
db.commit()

keywords=[]
"
Python - short syntax and list comprehension and iterations,"for attr in kwargs.viewkeys() & self.attrs:
    setattr(self, attr, kwargs[attr])
"
What is the easiest way to convert list with str into list with int?,[int(i) for i in str_list]
Python - Split a list of integers into positive and negative,">>> B=filter(lambda x:x<0,A)
>>> C=filter(lambda x:x>0,A)
>>> B
[-3, -2, -5, -7]
>>> C
[1, 8, 4, 6]
"
Creating a multi-part MIME message with a binary component for an HTTP request in Python 3,"from email.encoders import encode_noop
from email.generator import BytesGenerator
from email.mime.application import MIMEApplication
import io

# Actual binary ""file"" I want to encode (in real life, this is a file read from disk)
bytesToEncode = b'Q\x0dQ'

# unique marker that we can find and replace after message generation
binarymarker = b'GuadsfjfDaadtjhqadsfqerasdfiojBDSFGgg'

app = MIMEApplication(binarymarker, _encoder=encode_noop)
b = io.BytesIO()
g = BytesGenerator(b)
g.flatten(app, linesep='\r\n')  # linesep for HTTP-compliant header line endings

# replace the marker with the actual binary data, then you have the output you want!
body = b.getvalue().replace(binarymarker, bytesToEncode)
"
how to select specific words and put them into tuple - list?,"url =""http://aetoys.tumblr.com""
source = requests.get(url)
text = source.text
soup = BeautifulSoup(text)

print [ x[""href""]  for div in soup.findAll('li',{'class':'has-sub'}) for x in div.find_all('a',href=True)]


['#', '#', '/onepiece_book', '/onepiece', '#', '/naruto_book', '/naruto', '#', '/bleach_book', '/bleach', '/kingdom', '/tera', '/torico', '/titan', '/seven', '/fairytail', '/soma', '/amsal', '/berserk', '/ghoul', '/kaizi', '/piando', '#', '/onepiece_book', '/onepiece', '#', '/naruto_book', '/naruto', '#', '/bleach_book', '/bleach', '#', '/conan', '/silver', '/hai', '/nise', '/hunterbyhunter', '/baku', '/unhon', '/souleater', '/liargame', '/kenichi', '/dglayman', '/magi', '/suicide', '/pedal', '#', '/dobaku', '/gisei', '/dragonball', '/hagaren', '/gantz', '/doctor', '/dunk', '/susi', '/reborn', '/airgear', '/island', '/crows', '/beelzebub', '/zzang', '/akira', '/tennis', '/kuroco', '/claymore', '/deathnote']
"
Centering a Numpy array of images,"In [7]: x - x.mean()
Out[7]: 
array([[-12., -11., -10.,  -9.,  -8.],
       [ -7.,  -6.,  -5.,  -4.,  -3.],
       [ -2.,  -1.,   0.,   1.,   2.],
       [  3.,   4.,   5.,   6.,   7.],
       [  8.,   9.,  10.,  11.,  12.]])

In [8]: (x - x.mean()) / x.std()
Out[8]: 
array([[-1.6641005, -1.5254255, -1.3867504, -1.2480754, -1.1094003],
       [-0.9707253, -0.8320502, -0.6933752, -0.5547002, -0.4160251],
       [-0.2773501, -0.1386750,  0.       ,  0.1386750,  0.2773501],
       [ 0.4160251,  0.5547002,  0.6933752,  0.8320502,  0.9707253],
       [ 1.1094003,  1.2480754,  1.3867504,  1.5254255,  1.6641005]])
"
Python: Concatenate list of lists in the algebraic way,"ABC = [ list(chain.from_iterable(z)) for z in product(*SETS) ]
"
Python - Generate a list of IP addresses from user input,"import itertools

ranges = [range(r[0], r[1] + 1) if len(r) == 2 else r for r in parsed_ranges]
addresses = itertools.product(*ranges)
"
Any way I could make this more efficient?,"if question.lower() in ""yes"": # ""y"" is in ""yes"", so is ""yes"" (a string is a substring of itself)
"
Python: split float after 3rd decimal place,">>> import re
>>> s = """"""1.782-100.799
... -18.107-102.016
... -17.504104.059""""""
>>> re.findall('-?\d{1,3}(?:\.\d{3})*', s)
['1.782', '-100.799', '-18.107', '-102.016', '-17.504', '104.059']
"
python unicode issues in both python2 and python3,"try:
    # Python 3
    from urllib.parse import unquote
except ImportError:
    # Python 2
    from urllib import unquote

percent_encoded = '''
%D9%85%D8%A7%D9%81%D8%B8%D8%A9_%D8%A7%D9%84%D8%A8%D8%AF%D8%A7%D8%A6%D8%B9
%D8%A3%D9%88%D8%B1%D9%8A%D9%88%D9%8A%D9%84%D8%A7
Battle_of_Nicopolis
Qingdao
'''
print(unquote(percent_encoded))
"
Python - sort method parameter takes same precedence,"from functools import total_ordering

@total_ordering
class Contact(object):
    # ...

    def __eq__(self, other):
        if self.lastName != other.lastName:
            return False
        return self.firstName == other.firstName

    def __lt__(self, other):
        if not self.lastName:
            if not other.lastName:
                return self.firstName < other.firstName
            return self.firstName < other.lastName
        return (self.lastName, self.firstName) < (other.lastName, other.firstName)
"
Python-Location of a letter in a two dimensional string,"def find_index(table, letter):
    for r_index, row in enumerate(table):
        if letter in row:
            return (r_index, row.index(letter))
"
How can I correct my code to produce a nested dictionary?,"for i in kinetic_parameters:
        if d.get(i[1]) is None:
            d[i[1]]={}
        d[i[1]][i[2]]=i[3]
"
Use cases for the 'setdefault' dict method,"# really verbose
new = {}
for (key, value) in data:
    if key in new:
        new[key].append( value )
    else:
        new[key] = [value]


# easy with setdefault
new = {}
for (key, value) in data:
    group = new.setdefault(key, []) # key might exist already
    group.append( value )


# even simpler with defaultdict 
new = defaultdict(list)
for (key, value) in data:
    new[key].append( value ) # all keys have a default already
"
How do I search for a substring with a quotation mark inside a string in Python?,"if astring.find(""can\'t"")>-1:
    print ""found it""
else:
    print ""did not find it""
"
Python producing two instances of data set,"import urllib
import re
##NL East stats.
teamstate = [""wsh"",""phi"",""nym"",""mia"",""atl""]
teamnamelist = [""washington-nationals"",""philadelphia-phillies"",""new-york-mets"",""miami-marlins"",""atlanta-braves""]
teamlist = [""Washington Nationals"",""Philadelphia Phillies"",""New York Mets"",""Miami Marlins"",""Atlanta Braves""]

for x, y, z in zip(teamstate, teamnamelist, teamlist):
    url = ""http://espn.go.com/mlb/team/_/name/%s/%s"" % (x, y)
    htmlfile = urllib.urlopen(url)
    htmltext = htmlfile.read()
    regex = '<span class=""stat"">(.+?)</span>'
    pattern = re.compile(regex)
    val = re.findall(pattern,htmltext)[1]
    print ""The batting average of the %s is %s."" % (z, str(val))
"
Converting a nested tuples into nested dictionaries,"dic2 = {key: [{k: v} for sublist in value for k, v in sublist] for key, value in dic1.items()}
"
Efficient way to find the largest key in a dictionary with non-zero value,"max(k for k, v in x.items() if v != 0)"
"How to print a list with integers without the brackets, commas and no quotes?","print(''.join(map(str, data)))"
wxPython threading wxGauge,"for i in range(10):
    pub.sendMessage(""update"", i+1)
    time.sleep(1)
"
How to remove square bracket from pandas dataframe,df['value'] = df['value'].str.strip('[]')
Python: How to transform a 'flat' sequence into a sequence of tuples?,">>> [itertools.islice(lst, i, None, 2) for i in range(2)]
[<itertools.islice object at 0x7f958a79eaf8>, <itertools.islice object at 0x7f958a79eaa0>]
"
synchronization across multiple processes in python,"import multiprocessing
import datetime
import random
import time

def funfun(number):
    time.sleep(random.randint(0,10))
    now = datetime.datetime.now()
    return ""%s says hello, World! at time: %s""  % (number,now)

if __name__ == ""__main__"":
    pool = multiprocessing.Pool(10)
    for item in pool.imap(funfun,[i for i in range(10)]):
        print item
"
How to extract from a list of objects a list of specific attribute?,[o.my_attr for o in my_list]
"In Python, is there a way to insert a line break and spaces every 68 characters of a string?","indentation = ';' + ' ' * 11
params = {
    'width': 80,
    'initial_indent': indentation,
    'subsequent_indent': indentation
}
result = '\n'.join([textwrap.fill(line, **params)
                    for line in input_text.splitlines()])
"
"Is a variable the name, the value, or the memory location?",">>> x=5    # discussed
>>> id(x)  # the 'id' which in cPython is the memory address.
140246146681256
>>> y=x    # now two names, 'x' and 'y' associated with that object
>>> id(y)  
140246146681256     # same object
>>> z=5    # no guaranteed, likely the same object referred to by 'x' and 'y'
>>> id(z)
140246146681256     # id is the same! The object labeled 'x' was found and labeled 'z'
>>> del x           # ref count to object '140246146681256' decreased by 1
>>> del y           # same
>>> z
5
>>> id(z)
140246146681256    # same object but the names ''x' and 'y' no longer label it
"
python how to save new objects into a list without duplication,"class Connection_XML(XML_Element_Class):
    def __init__(self):
        self.name = None
        self.type = None
        self.ID = None
        self.max_size = None
        self.queue_size = None
        self.direction = None
    def do_something(self):
        pass
"
How do I add a method with a decorator to a class in python?,"def logDecorator(func):

    def wrapper(*args, **kwargs):
        print ""Before"", func.__name__
        ret = func(*args, **kwargs)
        print ""After"", func.__name__
        return ret

    return wrapper

class MyClass(object):

    @logDecorator
    def mymethod(self):
        print ""xxx""


MyClass().mymethod()
"
Dataframe-Normalize each row by row's maximum,"In [205]:
df.div(df.max(axis=1), axis=0)

Out[205]:
      A    B     C
0  1.00  0.5  0.50
1  0.25  1.0  0.25
2  0.00  1.0  0.50
"
"New colum in pandas, based on another colums last value","import numpy as np
diff = df['Open'].diff()
conditions = [diff > 0, diff < 0]
choices = [1, 0]
df['increasing'] = np.select(conditions, choices, default=2)
"
How to modify the time that 'date' changes (00:00:00) in an index in Pandas dataframe?,"# read in your dataframe
import pandas as pd
df = pd.read_csv('dt_data.csv', skipinitialspace=True)
df.columns = ['mydt', 'close', 'dif'] # changed your column name to 'mydt'
df.mydt = pd.to_datetime(df.mydt) # convert mydt to datetime so we can operate on it

# keep times outside [15:15 to 17:00] interval
df = df[(((df.mydt.dt.hour >= 15) & (df.mydt.dt.minute > 15)) 
                                  | (df.mydt.dt.hour == 16))==False]

# increment the day count for hours >= 17 at start of new 'day'
ndx = df[df.mydt.dt.hour>=17].index
df.ix[ndx, 'mydt'] += pd.Timedelta(days=1)

df.set_index('mydt', inplace=True, drop=True)
print(df)

                           close       dif
mydt                                      
2015-01-02 17:00:00.211  2030.25  0.300000
2015-01-02 17:00:02.456  2030.75  0.595138
2015-01-02 00:02:01.955  2036.75 -0.400000
2015-01-02 00:04:04.887  2036.50 -0.391144
2015-01-02 15:14:56.207  2021.50 -4.732677
2015-01-02 15:14:59.020  2021.50 -4.731172
2015-01-05 17:00:00.105  2020.50  0.000000
2015-01-05 17:00:01.077  2021.00  0.423094
"
first user input being ignored python,"def stupidFacebookPost():
    integerValues = []
    productValues = []
    commonValue = []
    while True:
        try:
            integer = int(input(""Enter a Integer Value ""))
            Product = int(input(""Enter a Product Value ""))
            integerValues.append(integer)
            productValues.append(Product)
            print(integerValues) #testing
            print(productValues) #testing
        except ValueError:
            break

    for integers in  integerValues:
        for products in productValues:
            commonValue.append(int(products) // int(integers))
            print(commonValue) #test
            integerValues.pop([0])
            productValues.pop([0])
    print('the Common Value is {}'.format((commonValue)))

stupidFacebookPost()
"
Python regex separate space-delimited words into a list,"re.split("" +"", ""hello world sample text"")
"
How can we fetch the elements of the list of specific index?,">>> a= ['Sample Date', '4/21/2015', '10/14/2014', '9/16/2014', '7/10/2014', '8/11/2014', '8/3/2014', '7/20/2014', '7/6/2014', '8/11/2014', '8/11/2014', '8/11/2014'] 
>>> b=[5, 9, 10, 11]
>>> [a[i-1] for i in b]
['7/10/2014', '7/6/2014', '8/11/2014', '8/11/2014']
"
"Search Fasta file in python, return read efficiently","from Bio import SeqIO
for seq_record in SeqIO.parse(""ls_orchid.fasta"", ""fasta""):
    print(seq_record.id)
    print(repr(seq_record.seq))
    print(len(seq_record))
"
Stop reading process output in Python without hang?,"threading.Timer solution
import collections
import subprocess
import threading

def main():
    # start process, redirect stdout
    process = subprocess.Popen([""top""], stdout=subprocess.PIPE, close_fds=True)

    # terminate process in timeout seconds
    timeout = 2 # seconds
    timer = threading.Timer(timeout, process.terminate)
    timer.start()

    # save last `number_of_lines` lines of the process output
    number_of_lines = 200
    q = collections.deque(process.stdout, maxlen=number_of_lines)
    timer.cancel()

    # print saved lines
    print ''.join(q),

if __name__==""__main__"":
    main()
"
How to XOR hex values in a list with another fixed hex value,"initial_list=['C2', 'DA', 'DA', 'C6', 'D6']
print ['{:02X}'.format( int(i, 16) ^ 0xBA)  for i in initial_list]
"
Concatenation of a variant number of keys of a dictionary Python (recursion?),"import itertools

dct = {
    'bk1': {
        'k11': ['a1', 'b1', 'c1'],
        'k12': ['a2', 'b2', 'c2']
    },
    'bk2':{
        'k21': ['d1', 'e1'],
        'k22': ['d2', 'e2'],
        'k23': ['d3', 'e3']
    },
    'bk3': {
        'k31': ['f1', 'g1', 'h1'],
        'k32': ['f2', 'g2', 'h2']
    }
}

big_keys = dct.keys()
small_keys = (dct[big_key].keys() for big_key in big_keys)

res = {}
for keys_from_each in itertools.product(*small_keys):
    key = ""_"".join(keys_from_each)

    value = []
    for big_key, small_key in zip(big_keys, keys_from_each):
        value.extend(dct[big_key][small_key])

    res[key] = value
"
Check for unique values in a dictionary and return a list,"def existsOnce3(aDict):  
    vals = {}
    # create dict to sum all value counts
    for i in aDict.values():
        vals.setdefault(i,0)
        vals[i] += 1   
    # use each v/val from aDict as the key to vals
    # keeping each k/key from aDict if the count is 1
    return sorted(k for k, v in aDict.items() if vals[v] == 1)
"
splitting merged words in python,"import re
lines = ""I like bananasAnd this is a new line.And another one.""
print re.sub(r""([a-z\.!?])([A-Z])"", r""\1 \2"", lines)
# I like bananas And this is a new line. And another one.
"
applying for loop such that counters are multiplied rather than being added in python,"from itertools import count, takewhile

def powers_of_two():
    for i in count():
        yield 2 ** i

for i in takewhile(lambda x: x < 20, powers_of_two()):
    print i
"
Fill data gaps with average of data from adjacent days,"df[ df.isnull() ] = np.nanmean( [ df.shift(-48), df.shift(48) ] )
"
arrays using python,"def stem_and_syns(unformatted_string): #unformatted string is your stem_array
    stem_string = unformatted_string[1:-1] #same as before
    stem, synonyms_string = stem_string.split(""|"") #split the stem and synonyms
    stem = stem.strip() #clean the stem
    synonyms = [synonym.strip() for synonym in synonym_string.split("","")] #same as before
    return stem, synonyms
"
Eliminating spaces between equal signs in ConfigParser - Python,"#!/usr/bin/env python3
import sys
from configparser import ConfigParser
from io import StringIO


CONFIG = '''
[Box]
box.active = false
resolution_tracker.active = true
box.api_key = 
box.api_secret = 
box.job_interval = 480
box.max_attempts = 6
box.users = 

[Google]
google.active = true
google.job_interval = 480
google.users = <useremail>
google.key_file_name = <key_file>
google.service_account_id = <account_id>
'''

parser = ConfigParser()
parser.readfp(StringIO(CONFIG))
parser.write(sys.stdout, space_around_delimiters=False)
"
Make a list of words from given characters,"from collections import deque
from itertools import product
from string import ascii_lowercase, digits

def generate_words(start, length, _chars=ascii_lowercase + digits):
    remainder = length - len(start)
    if remainder < 1:
        yield start
        return
    for letters in product(_chars, repeat=remainder):
        combo = deque(letters + (start,))
        for _ in range(remainder + 1):
            yield ''.join(combo)
            combo.rotate()
"
Algorithm to perform K-combinations for all k on sentences,"import itertools

l = [s.strip() for s in open('test.txt')]

for i in range(len(l)):
  print '\n'.join(map(' | '.join, itertools.combinations(l, i + 1)))
"
Matplotlib : Default Resolution of Plot Mouse-over Values,"import matplotlib.pyplot as plt

def formatter(x, y):
    return '{:0.0f} rainbows, {:0.0f} unicorns'.format(10*x, 10*y)

fig, ax = plt.subplots()
ax.format_coord = formatter
plt.show()
"
Match character from string with binary list,">>> from itertools import compress
>>> list(compress(""abcdefg"", [1, 1, 0, 0, 1, 1, 0]))
['a', 'b', 'e', 'f']
"
Assign scientific notation to variable in Python,">>> a = 31234.34234
>>> ""{:.3e}"".format(a)
'3.123e+04'
"
Sorting values of a dictionary based on a list,"base = data['AttrA'] # keep a reference to the original sort order
for key in data:
    data[key] = [x for (y,x) in sorted(zip(base, data[key]))]
"
Pandas creates DataFrame with first header column in it's own row,"df = pd.DataFrame.from_csv(io.StringIO(t), index_col=None)
"
Copy 2D array to a 3D one - Python / NumPy,"H = data.reshape(N,Nt,N).swapaxes(1,2)
"
Python regex search AND split,">>> 'aaa bbb ccc ddd eee fff'.partition('ddd')
('aaa bbb ccc ', 'ddd', ' eee fff')
"
Change the type of a global variable in a function initializing it,"class MyProgram(object):
    def __init__(self):
        # ... lots of initialization ...
        self.myObject = foo.bar.SomeClass(init_variable)

    def usage(self):
        self.myObject.member1

if __name__ == ""__main__"":
    m = MyProgram()
    m.usage()
"
Get the difference between dates in the form of list years and months,"from datetime import date, datetime
def spanning_months(start, end):
    assert start <= end
    current = start.year * 12 + start.month - 1
    end = end.year * 12 + end.month - 1
    while current <= end:
        yield date(current // 12, current % 12 + 1, 1)
        current += 1
"
Delete same rows from list of lists in python,"seen = set()
block = [row for row in block if row[0] not in seen and not seen.add(row[0])]
"
List all branches of subfolders in directory with python,"islink, join, isdir = path.islink, path.join, path.isdir

# We may not have read permission for top, in which case we can't
# get a list of the files the directory contains.  os.path.walk
# always suppressed the exception then, rather than blow up for a
# minor reason when (say) a thousand readable directories are still
# left to visit.  That logic is copied here.
try:
    # Note that listdir and error are globals in this module due
    # to earlier import-*.
    names = listdir(top)
except error, err:
    if onerror is not None:
        onerror(err)
    return

dirs, nondirs = [], []
for name in names:
    if isdir(join(top, name)):
        dirs.append(name)
    else:
        nondirs.append(name)  # not interesting

if topdown: # not inretesting
    yield top, dirs, nondirs
for name in dirs:
    new_path = join(top, name)
    if followlinks or not islink(new_path): # not interesting
        for x in walk(new_path, topdown, onerror, followlinks):
            yield x
if not topdown: # not inretesting
    yield top, dirs, nondirs # not inretesting
"
Chunking bytes (not strings) in Python 2 and 3,"def chunked(size, source):
    for i in range(0, len(source), size):
        yield source[i:i+size]
"
How to join mixed list (array) (with integers in it) in Python?,""""""":"""""".join(str(x) for x in b)"
Python: Passing conditional parameters by name,"class FooBarInterface(object):
    def f(self, foo, bar):
        raise NotImplementedError
class A(FooBarInterface):
    def f(self, foo, bar):
        return a()
class B(FooBarInterface):
    def f(self, foo, bar):
        return bb(bar=bar)
class C(FooBarInterface):
    def f(self, foo, bar):
        return ccc(foo=foo)

if funcname == 'a':
  obj = A()
elif funcname == 'b':
  obj = B()
elif funcname == 'c':
  obj = C()
# call it, uniformly
obj.f()
"
How to convert IETF BCP 47 language identifier to ISO-639-2?,">>> import pycountry
>>> lang = pycountry.languages.get(alpha2='aa')
>>> lang.terminology
u'aar'
"
Fill in missing values with nearest neighbour in Python numpy masked arrays?,"import numpy as np
import numpy.ma as ma

a = np.arange(100).reshape(10,10)
fill_value=-99
a[2:4,3:8] = fill_value
a[8,8] = fill_value
a = ma.masked_array(a,a==fill_value)
print(a)

# [[0 1 2 3 4 5 6 7 8 9]
#  [10 11 12 13 14 15 16 17 18 19]
#  [20 21 22 -- -- -- -- -- 28 29]
#  [30 31 32 -- -- -- -- -- 38 39]
#  [40 41 42 43 44 45 46 47 48 49]
#  [50 51 52 53 54 55 56 57 58 59]
#  [60 61 62 63 64 65 66 67 68 69]
#  [70 71 72 73 74 75 76 77 78 79]
#  [80 81 82 83 84 85 86 87 -- 89]
#  [90 91 92 93 94 95 96 97 98 99]]

for shift in (-1,1):
    for axis in (0,1):        
        a_shifted=np.roll(a,shift=shift,axis=axis)
        idx=~a_shifted.mask * a.mask
        a[idx]=a_shifted[idx]

print(a)

# [[0 1 2 3 4 5 6 7 8 9]
#  [10 11 12 13 14 15 16 17 18 19]
#  [20 21 22 13 14 15 16 28 28 29]
#  [30 31 32 43 44 45 46 47 38 39]
#  [40 41 42 43 44 45 46 47 48 49]
#  [50 51 52 53 54 55 56 57 58 59]
#  [60 61 62 63 64 65 66 67 68 69]
#  [70 71 72 73 74 75 76 77 78 79]
#  [80 81 82 83 84 85 86 87 98 89]
#  [90 91 92 93 94 95 96 97 98 99]]
"
Speed up counting number of distinct columns,"def num_distinct_rows(M):
    return len(np.unique(asvoid(M)))
"
python delete those keys from dictionary who has same value,">>> dicts = {'met_293': ['81.0175','4','7','7','29.76','23','1','0','22','28.57','2','[KG]EHY'],'met_394': ['79.9579','4','7','7','29.76','18','3','0','15','28.57','2','EHY[ILV]'],'met_309': ['81.0175','4','7','7','29.76','23','1','0','22','28.57','2','[KG]EHY'],'met_387': ['79.9579','4','7','7','29.76','18','3','0','15','28.57','2','EHY[ILV]']}
>>> seen = set()
>>> {k:v for k,v in dicts.iteritems() 
                                 if v[11] not in seen and not seen.add(v[11])}
{'met_394': ['79.9579', '4', '7', '7', '29.76', '18', '3', '0', '15', '28.57', '2', 'EHY[ILV]'],
 'met_293': ['81.0175', '4', '7', '7', '29.76', '23', '1', '0', '22', '28.57', '2', '[KG]EHY']}
"
Cant print list out of python function,"print 'List Local Files'

VALUES_SEPARATOR = "",""

with open('./local.csv','r') as localFile :
    lines = []
    for line in localFile:
        #use line[:-1] to remove the end line ""\n"" symbol.
        splitLine = line[:-1].split(VALUES_SEPARATOR)
        splitAgain = splitLine[2].replace('""', '')

        lines.append(splitAgain)#store the line in a out-of-the-loop variable.

    print(lines)
"
Limiting/throttling the rate of HTTP requests in GRequests,"DEFAULT_BURST_WINDOW = datetime.timedelta(seconds=5)
DEFAULT_WAIT_WINDOW = datetime.timedelta(seconds=15)


class BurstThrottle(object):
    max_hits = None
    hits = None
    burst_window = None
    total_window = None
    timestamp = None

    def __init__(self, max_hits, burst_window, wait_window):
        self.max_hits = max_hits
        self.hits = 0
        self.burst_window = burst_window
        self.total_window = burst_window + wait_window
        self.timestamp = datetime.datetime.min

    def throttle(self):
        now = datetime.datetime.utcnow()
        if now < self.timestamp + self.total_window:
            if (now < self.timestamp + self.burst_window) and (self.hits < self.max_hits):
                self.hits += 1
                return datetime.timedelta(0)
            else:
                return self.timestamp + self.total_window - now
        else:
            self.timestamp = now
            self.hits = 1
            return datetime.timedelta(0)
"
Using bisect for combing items with a distance condition,"with open(""test.txt"") as f:
    r = re.compile(""(\d+)"")
    for line in f:
        a, b = line.lstrip(""0123456789. "").split("">> "")
        a_keys = [int(i.group()) for i in r.finditer(a)]
        b_keys = [int(i.group()) for i in r.finditer(b)]
        a = a.strip(""()\n"").split("","")
        b = b.strip(""()\n"").split("","")
        for ele, k in zip(a, a_keys):
            ind = bisect(b_keys, k, hi=len(b) - 1)
            ind -= k - b_keys[ind] < b_keys[ind-1] - k
            print(""{} -> {}"".format(ele, b[ind] if abs(b_keys[ind] - k) < 5 else ""NULL""))
"
"Problem with 2D interpolation in SciPy, non-rectangular grid","ax = subplot(1,1,1, projection=""polar"", aspect=1.)
ax.pcolormesh(theta, r, Z)
"
How to remove lines in a Matplotlib plot,"from matplotlib import pyplot
import numpy, weakref
a = numpy.arange(int(1e3))
fig = pyplot.Figure()
ax  = fig.add_subplot(1, 1, 1)
lines = ax.plot(a)

l = lines.pop(0)
wl = weakref.ref(l)  # create a weak reference to see if references still exist
#                      to this object
print wl  # not dead
l.remove()
print wl  # not dead
del l
print wl  # dead  (remove either of the steps above and this is still live)
"
Array initialized with numpy is much slower in a loop with if statement,"def primes(prime_max):
    prime_flags = numpy.ones(prime_max, dtype=bool)
    prime_flags[0] = prime_flags[1] = False
    for i in range(2, prime_max):
        if prime_flags[i]:
            prime_flags[2*i::i] = False
    return prime_flags.nonzero()[0]
"
How to detect undecoded characters in python?,"def strip_unprintable(data):
    return ''.join(c for c in data if c in string.printable)
"
How to process sub-lists separately?,"mainlist = [[2,4,5],[3,2,4],[3,1,5]]

m = []
for e in mainlist:
    l = sum([i for i in e if i < 2.5])
    k = [i for i in e if i >= 2.5] # to distribute smaller values
    j = float(l)/len(k)
    newlist = [x + j for x in k]
    m.append(max(newlist))

print m
"
Linking two related lists of different lengths in python,">>> it = iter(a)
>>> prev = next(it)
>>> result = []
for x in b:
    if x <= prev:
        result.append(prev)
    else:
        prev = next(it)
        result.append(prev)
...         
>>> result
[8, 8, 8, 8, 16, 16]
"
Python RDF lib - String value for nodes,"lit = rdflib.term.Literal('Literal\nvalue', lang='en')

print(str(lit))
print('---')
print(lit.n3())
"
How do I find out if a combination of numbers are in another combination of numbers?,">>> def set_test(mylist):
...     for short_tuple in mylist:
...         short_tuple_set = set(short_tuple)
...         for combo in itertools.combinations((range(1, 50)), 5):
...             if short_tuple_set.issubset(combo):
...                 yield combo
... 
>>> def create_combos(mylist):
...     for short_tuple in mylist:
...         short_tuple_set = set(short_tuple)
...         remainder = (i for i in range(1, 50) if i not in short_tuple_set)
...         for combo in itertools.combinations(remainder, 5 - len(short_tuple)):
...             combo = sorted(combo + short_tuple)
...             yield combo
... 
>>> all(a == tuple(b) for a, b in itertools.izip_longest(set_test(mylist), create_combos(mylist)))
True
"
Remove punctuation from Unicode formatted strings,"import regex as re

def remove_punctuation(text):
    return re.sub(ur""\p{P}+"", """", text)
"
Python: Converting from binary to String,"struct.pack('<I', 1633837924)"
Python finding most common pattern in list of strings,"calls = ['admobapioauthcert', 'admobapinewsession', 'admobendusercamp']
filter(lambda x : x[1]>1 and len(x[0])>2,Counter(reduce(lambda x,y:x + y,reduce(lambda x,y: x+y, map(lambda z :map(lambda x : map(lambda g: z[g:x+1],range(len(z[:x+1]))),range(len(z))),calls)))).most_common())
"
WxPython Panel Refresh,"class EasyWidgetUpdater:
     widgets = {}
     def SetValue(self,valueDict):
         for k,v in valueDict.items():
             if k in self.widgets:
                   set_widget_value(self.widgets[k],v)
     def GetValue(self):
         result = {}
         for k,widget in self.widgets:
             result[k] = get_widget_value(widget)
         return result
"
Iterate through a dynamic number of for loops (Python),"def seq_pow2(N):
    shp = 2*np.ones(np.log2(N),dtype=int)
    return np.arange(N).reshape(shp).ravel('F')
"
delete every nth row or column in a matrix using Python,"np.delete(a, list(range(0, a.shape[0], 8)), axis=0)
"
Shorten method chaining in Python variable,"replace_dict = dict(one=1, two=2, three=3)
foo_list = foo.split(' ')
foo = ' '.join(replace_dict.get(k, k) for k in foo_list)
"
Making default output file dependent on input file,"import os
def convert(in_fname, out_fname = None):
    # start by sanitizing parameters
    if out_fname is None:
        basename, ext = os.path.splitext(in_fname)
        out_fname = basename + "".faa""

    # read data
    with open(in_fname) as inf:
        data = inf.read()   # or inf.readlines()

    # do conversion
    result = do_conversion(data)

    # write result
    with open(out_fname, ""w"") as outf:
        outf.write(result)  # or .write(""\n"".join(result))
"
Increasing speed of python code,"def f_wo_append():
    '''Function without append'''
    P = 75
    numcustomers = 0
    for person in popn.people:
        person.customer = iscust = person.utility >= P
        numcustomers += iscust
    return numcustomers
"
PHP list() equivalent in Python,">>> class MyClass(object):
...   def __iter__(self):
...     return iter([1, 2, 3])
... 
>>> a, b, c = MyClass()
>>> print a, b, c
1 2 3
"
Pandas Dataframe count availability of string in a list,"In [2]: pattern = '|'.join(mylist)
In [2]: count = frame.a.str.contains(pattern).sum() # will add up True values
In [3]: count/float(len(mylist))*100
Out[3]: 66.666666666666
"
i cant use the equals or the enter key on my keyboard to get an answer for anything,"try:
    # for Python2
    from Tkinter import *
except ImportError:
    # for Python3
    from tkinter import *
    # Calculator is a class derived from Frame.  Frames, being someone generic,
    # make a nice base class for whatever you what to create.
# Calculator is a class derived from Frame.  Frames, being someone generic,
        # make a nice base class for whatever you what to create.
class Calculator(Frame):

    # Create and return a packed frame.
    def frame(this, side): 
        w = Frame(this)
        w.pack(side=side, expand=YES, fill=BOTH)
        return w

    def keyPressed(self,event):
        #test to see whether enetr is pressed
        if event.keysym == 'Return':
            self.calc()

    # Create and return a button.
    def button(this, root, side, text, command=None): 
        w = Button(root, text=text, command=command) 
        w.pack(side=side, expand=YES, fill=BOTH)
        return w

    # Enter a digit.
    need_clr = False
    def digit(self, digit):
        if self.need_clr:
            self.display.set('')
            self.need_clr = False
        self.display.set(self.display.get() + digit)

    # Change sign.
    def sign(self):
        need_clr = False
        cont = self.display.get()
        if len(cont) > 0 and cont[0] == '-':
            self.display.set(cont[1:])
        else:
            self.display.set('-' + cont)

    # Decimal
    def decimal(self):
        self.need_clr = False
        cont = self.display.get()
        lastsp = cont.rfind(' ')
        if lastsp == -1:
            lastsp = 0
        if cont.find('.',lastsp) == -1:
            self.display.set(cont + '.')

    # Push a function button.
    def oper(self, op):
        self.display.set(self.display.get() + ' ' + op + ' ')
        self.need_clr = False

    # Calculate the expressoin and set the result.
    def calc(self):
        try:
            self.display.set(eval(self.display.get()))
            self.need_clr = True
        except:
            showerror('Operation Error', 'Illegal Operation')
            self.display.set('')
            self.need_clr = False

    def __init__(self):
        Frame.__init__(self)
        self.option_add('*Font', 'Verdana 12 bold')
        self.pack(expand=YES, fill=BOTH)
        self.master.title('Simple Calculator')

        # The StringVar() object holds the value of the Entry.
        self.display = StringVar()
        e = Entry(self, relief=SUNKEN, textvariable=self.display)
        e.pack(side=TOP, expand=YES, fill=BOTH)

        # This is a nice loop to produce the number buttons.  The Lambda
        # is an anonymous function.
        for key in (""123"", ""456"", ""789""):
            keyF = self.frame(TOP)
            for char in key:
                self.button(keyF, LEFT, char,
                            lambda c=char: self.digit(c))

        keyF = self.frame(TOP)
        self.button(keyF, LEFT, '-', self.sign)
        self.button(keyF, LEFT, '0', lambda ch='0': self.digit(ch))
        self.button(keyF, LEFT, '.', self.decimal)

        # The frame is used to hold the operator buttons.
        opsF = self.frame(TOP)
        for char in ""+-*/="":
            if char == '=':
                btn = self.button(opsF, LEFT, char, self.calc)
            else:
                btn = self.button(opsF, LEFT, char, 
                                  lambda w=self, s=char: w.oper(s))

        # Clear button.
        clearF = self.frame(BOTTOM)
        self.button(clearF, LEFT, 'Clr', lambda w=self.display: w.set(''))
        self.bind_all('<Key>', self.keyPressed)
     # Make a new function for the - sign.  Maybe for . as well.  Add event
     # bindings for digits to call the button functions.

     # This allows the file to be used either as a module or an independent
     # program.
if __name__ == '__main__':
    Calculator().mainloop()
"
Python: hex conversion always two digits,">>> ""abcd"".encode(""hex"")
'61626364'
"
Passing double quote shell commands in python to subprocess.Popen()?,"command = 'ffmpeg -i ""concat:1.ts|2.ts"" -vcodec copy -acodec copy temp.mp4'
output,error  = subprocess.Popen(
                    command, universal_newlines=True, shell=True,
                    stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
"
Handling empty space in reading table from text file python,"import numpy as np
data = np.genfromtxt('UK.txt',skiprows=8,delimiter=(4,7,7,7,7,7,7,7,7,7,7,7,7,8,7,7,7,8))
"
All combinations fourteen item array,"for item in itertools.product([0, 1], repeat=14):
    print item
"
"Exec, closures and scopes","gl = dict(globals())
gl.update({'f':f})
"
Extract data using HTMLParser,"from HTMLParser import HTMLParser

data = """"""
<tr>
  <td style=""color: #0000FF;text-align: center""><p>Sam<br/>John<br/></p></td>
</tr>
""""""

class Parser(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.recording = False

    def handle_starttag(self, tag, attrs):
        if tag == 'p':
            self.recording = True

    def handle_endtag(self, tag):
        if tag == 'p':
            self.recording = False

    def handle_data(self, data):
        if self.recording:
            print data

parser = Parser()
parser.feed(data)
"
Numpy array creation with patterns,"import numpy as np

rows = 20
cols = 10
n = 3

def running_view(arr, window, axis=-1):
    """"""
    return a running view of length 'window' over 'axis'
    the returned array has an extra last dimension, which spans the window
    """"""
    shape = list(arr.shape)
    shape[axis] -= (window-1)
    assert(shape[axis]>0)
    return np.lib.index_tricks.as_strided(
        arr,
        shape + [window],
        arr.strides + (arr.strides[axis],))


#fixed number of ones per row in random contiguous place
data = np.zeros((rows, cols), np.uint8)

I = np.arange(rows)
J = np.random.randint(0,cols-n+1, rows)

running_view(data, n)[I,J,:] = 1
print data
"
How can I get the number of records that reference a particular foreign key in Django?,"Comments.objects.filter(post=post).count()
"
List comprehension to return highest value,">>> from bs4 import BeautifulSoup
>>> soup = BeautifulSoup('''\
... <div class=""pagination"">
...     <a href=""/travel__world-desktop-wallpapers/page/2"">2</a>
...     <a href=""/travel__world-desktop-wallpapers/page/3"">3</a>
...     <a href=""/travel__world-desktop-wallpapers/page/4"">4</a>
...     ...
...     <a href=""/travel__world-desktop-wallpapers/page/31"">31</a>
...     <a href=""/travel__world-desktop-wallpapers/page/32"">32</a>
...     <a href=""/travel__world-desktop-wallpapers/page/33"">33</a>
...     <a href=""/travel__world-desktop-wallpapers/page/2"">Next »</a>
... </div>
... ''')
>>> max(int(link.text) for link in soup.find('div', class_='pagination').find_all('a') if link.text.strip().isdigit())
33
"
Comparing two dataframes of different length row by row and adding columns for each row with equal value,"import pandas as pd

df1 = pd.DataFrame({'Column1': [1,2,3,4,5], 
    'Column2': ['a','b','c','d','e'], 
    'Column3': ['r','u','k','j','f']})

df2 = pd.DataFrame({'Column1': [1,1,1,2,2,3,3], 'ColumnB': ['a','d','e','r','w','y','h']})

dfs = pd.DataFrame({})
for name, group in df2.groupby('Column1'):
    buffer_df = pd.DataFrame({'Column1': group['Column1'][:1]})
    i = 0
    for index, value in group['ColumnB'].iteritems():
        i += 1
        string = 'Column_' + str(i)
        buffer_df[string] = value

    dfs = dfs.append(buffer_df)

result = pd.merge(df1, dfs, how='left', on='Column1')
print(result)
"
python conditional lock,"set_condition = threading.Condition()
current_args = set()

def fn_set(arg):
    set_condition.acquire()
    try:
        while arg in current_args:
            set_condition.wait()
        current_args.add(arg)
    finally:
        set_condition.release()
    # do stuff
    set_condition.acquire()
    try:
        current_args.remove(arg)
        set_condition.notifyAll()
    finally:
        set_condition.release()
"
How to change parameters without stopping the program,"from __future__ import print_function # Python 2/3 compatibility

import sys
from time import sleep
from threading import Thread

if sys.version_info.major < 3:
    input = raw_input

def do_something():
    # doing the work
    sleep(1)

usrinpt = ''

def main():
    n = 1
    while usrinpt != 'stop':
        n += 1
        do_something()
    print('\nnumber of loops', n)

thread = Thread(target=main)
thread.start()

while True:
    print('Enter ""stop"" to terminate program')
    usrinpt = input().strip().lower()
    if usrinpt == 'stop':
        break

thread.join()
"
Force LaTeX font to match default matplotlib font,"fig.suptitle(r'H$_{\rm two}$ Emission from GJ832')
"
How to grab one random item from a database in Django/postgreSQL?,model.objects.all().order_by('?')[0]
Where to define variable working with function,"def question(attempt, answer):
    score = 0
    #if attempt is true, add 1 to score
    #if attempt is false, do nothing to score
    if attempt == answer:
        score += 1
        return score
    print(""Your score is %r."" % score)
"
Python: cycle through elements in list reversing when the end is reached,"from itertools import cycle, islice, chain

a = range(1, 11)
b = reversed(a)
c = cycle(chain(a, b))
d = list(islice(c, 100)) # `c` is infinite - hence the `islice` to stop at some point...
"
Is there a way to append a function with arguments into a list?,">>> from functools import partial
>>> def foo(bar, baz): print (bar, baz)
... 
>>> p = partial(foo, 1, 2)
>>> p()
(1, 2)
>>> p = partial(foo, 1)
>>> p(2)
(1, 2)
"
'Tiling' a 2d array using numpy,"def get_majority(a):
    a = a.ravel()
    a = np.sort(a)
    diff = np.empty(len(a)+1, 'bool')
    diff[0] = True
    diff[-1] = True
    diff[1:-1] = a[1:] != a[:-1]
    where = np.where(diff)[0]
    counts = where[1:] - where[:-1]
    argmax = counts.argmax()
    uniq_a = a[diff[1:]]
    return uniq_a[argmax]
"
Remove string quotes from array in Python,"import ast
xll =  [['321731.20991025254,' '790958.3493565321,'], ['321731.20991025254,' '790958.3493565321,']]
>>> [ast.literal_eval(xl[0]) for xl in xll]
[(321731.20991025254, 790958.3493565321), (321731.20991025254, 790958.3493565321)]
"
Conditionally format a string - Python,"""This is an awesome string"".replace(""a"",""@"")   # ""This is @n @wesome string""

""This is an awesome string"".replace(""a"",""@"",1) # ""This is @n awesome string""
"
Dictionary as value in dictionary,">>> nested_dictionary = {'a': {'b': 'c', 'd': 'e', 'f': 'g'}, 'h': {'i': 'j', 'k': 'l', 'm': 'n'}}
>>> nested_dictionary['a']
{'b': 'c', 'd': 'e', 'f': 'g'}
>>> nested_dictionary['a']['f']
'g'
"
"How to take output from iterating, store that in a dictionary","keywords = []
for url in google.search('sleep', num=2, stop=1):
    article = Article(url)      
    article.download() 
    article.parse()
    article.nlp()  

    keywords += article.keywords

print(keywords)
"
Rounding a number in python but keeping ending zeros,">>> '{:.2f}'.format(round(2606.89579999999, 2))
'2606.90'
"
Any quick way to labelize a list in Python?,">>> from collections import defaultdict
>>> from functools import partial
>>> from itertools import count
>>> from random import choice
>>> fruits = ['apple', 'banana', 'pear', 'cherry', 'melon', 'kiwi', 'pineapple']
>>> listFruit = [choice(fruits) for _ in xrange(100)]
>>> unique_count = defaultdict(partial(next, count(1)))
>>> [unique_count[el] for el in listFruit]
[1, 2, 3, 2, 4, 5, 6, 7, 1, 2, 4, 6, 3, 7, 3, 4, 5, 2, 5, 7, 3, 5, 1, 3, 3, 5, 2, 2, 6, 4, 6, 2, 1, 1, 3, 6, 6, 4, 7, 2, 6, 4, 5, 2, 1, 7, 7, 7, 4, 3, 7, 3, 1, 1, 5, 3, 3, 6, 5, 6, 1, 4, 3, 7, 2, 7, 7, 4, 7, 1, 4, 3, 7, 3, 4, 5, 1, 5, 5, 1, 5, 6, 3, 4, 3, 1, 1, 1, 5, 7, 2, 2, 6, 3, 6, 1, 1, 6, 5, 4]
>>> unique_count
defaultdict(<functools.partial object at 0x1026c5788>, {'kiwi': 4, 'apple': 1, 'cherry': 5, 'pear': 2, 'pineapple': 6, 'melon': 7, 'banana': 3})
"
modified a given list inside a function,"from __future__ import division
import multiprocessing as mp   

def read_occupation( matrix,i ):
    matrix[i]=[1,2,3]

def main():
    manager=mp.Manager()
    matrix=manager.list([ [0] ] * 4)

    for index in xrange(0,3,2):
        p1 = mp.Process( target=read_occupation, args=(matrix,index) )
        p2 = mp.Process( target=read_occupation, args=(matrix,index+1) )

        p1.start()
        p2.start()

        p1.join()
        p2.join()

    print matrix

if __name__ == '__main__':
    main()
"
combining lists: three lists into one new list,">>> x = [10,20,1]
>>> y = [10,15,2]
>>> z = [12,23,3]
>>> zip(x, y, z)
[(10, 10, 12), (20, 15, 23), (1, 2, 3)]
"
Find last match with python regular expression,">>> lst = [2, 3, 4]
>>> lst[-1]
4
"
Python OrderedDict with dictionary within list?,">>> print('\n'.join(['\n'.join(['{}:{}'.format(i,j) for i,j in d.items()]) for d in storeItems]))
Price:30
Max:100
Name:Auto-Enter
Price:100
Max:5
Name:Multiplier
Price:200
Max:3
Name:Factory
"
How to flatten a nested list in python?,"def flatten(items):
    non_list_items = []

    for item in items:
        if isinstance(item, list):
            for inner_item in flatten(item):
                yield inner_item
        else:
            non_list_items.append(item)

    yield non_list_items
"
Appending to lists stored in a nested dictionary,">>> d['s1']
defaultdict(<type 'list'>, {'port2': [[2, 2, 2]], 'port1': [[0, 0, 0], [1, 1, 1]]})
>>> d['s1']['port1']
[[0, 0, 0], [1, 1, 1]]
"
adding arithmetic values to dictionary?,"var1 = 5
var2 = -190
{k: [v, v/var1, v/var1+var2] for k, v in band1.iteritems()}
"
How to find visible bluetooth devices in Python?,"from bluetooth import *

print ""performing inquiry...""

nearby_devices = discover_devices(lookup_names = True)

print ""found %d devices"" % len(nearby_devices)

for name, addr in nearby_devices:
     print "" %s - %s"" % (addr, name)
"
How to decode a python string,"data = pipestr.split(""|"")
code = re.sub(
    r""([0-9a-f]+)"",  # find all hexadecimals
    lambda match: data[int(match.group(1), 16)],  # replace them by indexing the data
    base64.b64decode(b64str)  # insert into the structure
)
"
8 tile solver with repeated nodes - Python,"class Board(object):
    def __init__(self, matrix, whitepos=None):
        self.matrix = matrix
        self.whitepos = whitepos
        if not whitepos:
            for y in xrange(3):
                for x in xrange(3):
                    if board[y][x] == 0:
                        self.whitepos = (x, y)
    def __eq__(self, o):
        # Note that comparing whitepos is not strictly necessary; but I left 
        # it in as a safety measure in case the board state gets corrupted.
        # If speed becomes an issue, take it out.
        return (self.matrix, self.whitepos) == (o.matrix, o.whitepos)

class Node(object):
    def __init__(self, board, parent):
        self.state = board
        self.parent = parent
        if not parent:
            self.g = 0
        else:
            self.g = parent.g + 1
        self.h = heuristic(board)

    def test_goal(self):
        return is_final_state(self.state)

    def expand(self):
        children = []
        b = self.state
        x, y = get_whitepos(b)
        if x > 0:
            children.append(Node(move(b, x, y, -1, 0), self))
        if x < 2:
            children.append(Node(move(b, x, y, +1, 0), self))
        if y > 0:
            children.append(Node(move(b, x, y, 0, -1), self))
        if y < 2:
            children.append(Node(move(b, x, y, 0, +1), self))
        return children

    def __eq__(self, o):
        # Note that you don't have to compare parents, since your goal
        # is to eliminate ANY nodes with the same position.
        return self.state == o.state

class Solution(object):
    def __init__(self, node, mem_needed, steps):
        self.node = node
        self.mem_needed = mem_needed
        self.iterations = steps

    def inc(self, other):
        self.node = other.node
        self.mem_needed = max(self.mem_needed, other.mem_needed)
        self.iterations += other.iterations

#...

print_solution(""bl"", bl_search(board))
# I commented out all but the first search to avoid cluttering up the output.
"
Python: Comparing all elements of two arrays and modifying 2nd array,"c = []

for i in a:
    if any(np.isclose(i, b)):
        c.append(i)
    else:
        c.append(0.0)
"
Split line into category and text,">>> foo = [""neg * , This is a sentence"",""pos * , This is another sentence""]
>>> [p.split('*', 1) for p in foo]
[['neg ', ' , This is a sentence'], ['pos ', ' , This is another sentence']]
"
Finding minimum value element-wise in three 2d submatrices,"other = np.ones((3,3,3))*np.arange(1,4).reshape(3,1,1)

other
#array([[[ 1.,  1.,  1.],
#        [ 1.,  1.,  1.],
#        [ 1.,  1.,  1.]],

#       [[ 2.,  2.,  2.],
#        [ 2.,  2.,  2.],
#        [ 2.,  2.,  2.]],

#       [[ 3.,  3.,  3.],
#        [ 3.,  3.,  3.],
#        [ 3.,  3.,  3.]]])

other[dist.argmin(0), np.arange(dist.shape[1])[:, None], np.arange(dist.shape[2])]
#array([[ 1.,  1.,  3.],
#       [ 2.,  1.,  3.],
#       [ 3.,  3.,  3.]])
"
python regex finditer,">>> import re
>>> s = 'id=186 s_id=0  channel_name=[cspacer0]---BlaBla--- number=2'
>>> re.findall(r'=(\S+)', s)
['186', '0', '[cspacer0]---BlaBla---', '2']
"
Python text file data extraction,"from collections import defaultdict

keep = ['P2', 'P4', 'G6']
tmp_dict = defaultdict(str)

# a function to handle formatting of output
def output_format(the_dict):
    return '\t'.join([the_dict[k].rstrip() for k in keep]) + '\n'

with open('test.txt') as infile, open('output.txt', 'w') as outfile:
    for line in infile:

        # if there's non-whitespace text on this line
        if line.strip():
            k, v = line.split(' : ')

            # store the data if the key is relevant,
            # appending if the key has already been hit
            if k in keep:
                tmp_dict[k] += v.rstrip() + ' '

        # when there's a blank line, write the data to
        # the output file and clear the temporary dict
        else:
            outfile.write(output_format(tmp_dict))
            tmp_dict = defaultdict(str)

    # one last time, in case file doesn't end in newline
    outfile.write(output_format(tmp_dict))
"
Problems using Scrapy to scrape craigslist.org,"import scrapy
from craiglist.items import StackItem

class CraiglistSpider(scrapy.Spider):
    name = ""craiglist_spider""
    allowed_domains = [""puertorico.craigslist.org""]
    start_urls = (
        'http://puertorico.craigslist.org/search/sya',
    )

    def parse(self, response):
        items = response.selector.xpath(""//p[@class='row']"")
        for i in items:
            item = StackItem()
            item['prices'] = i.xpath(""./a/span[@class='price']/text()"").extract()
            item['url'] = i.xpath(""./span[@class='txt']/span[@class='pl']/a/@href"").extract()


            yield item
"
BeautifulSoup4 class with whitespaces not treated as single string,"soup = BeautifulSoup('<div class=""class1 class2 class3"">...</div>',""xml"")
print(soup.find('div')['class'])
class1 class2 class3
"
Pandas - make a column dtype object or Factor,"df['col_name'] = df['col_name'].astype('category')
"
Counting number of elements in nested list,"# Authors per year
authors_per_year = { year: len(authors) for year, authors in the_list }
"
Run Length Encoding in Python with List Comprehension,"rle = ''.join(['{}{}'.format(k, sum(1 for _ in g)) for k, g in groupby(string)])
"
Iterating over dictionaries using for loops,list(d.items())
How to convert hex string to integer in Python?,"y = str(int(x, 16))"
"Python modules, referencing other modules within the same package?","import sys
sys.path.append('/path/to/wibble')
"
GroupBy and Sum in SQLAlchemy?,"from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, ForeignKey, Numeric, DateTime, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import Session, relationship

engine = create_engine('sqlite://', echo=True)
session = Session(bind=engine)
Base = declarative_base(bind=engine)


class CostCenter(Base):
    __tablename__ = 'cost_center'

    id = Column(Integer, primary_key=True)


class Expense(Base):
    __tablename__ = 'expense'

    id = Column(Integer, primary_key=True)
    cost_center_id = Column(Integer, ForeignKey(CostCenter.id), nullable=False)
    value = Column(Numeric(8, 2), nullable=False, default=0)
    date = Column(DateTime, nullable=False)

    cost_center = relationship(CostCenter, backref='expenses')


Base.metadata.create_all()

session.add_all([
    CostCenter(expenses=[
        Expense(value=10, date=datetime(2014, 8, 1)),
        Expense(value=20, date=datetime(2014, 8, 1)),
        Expense(value=15, date=datetime(2014, 9, 1)),
    ]),
    CostCenter(expenses=[
        Expense(value=45, date=datetime(2014, 8, 1)),
        Expense(value=40, date=datetime(2014, 9, 1)),
        Expense(value=40, date=datetime(2014, 9, 1)),
    ]),
    CostCenter(expenses=[
        Expense(value=42, date=datetime(2014, 7, 1)),
    ]),
])
session.commit()

base_query = session.query(
    Expense.date,
    func.sum(Expense.value).label('total')
).join(Expense.cost_center
).group_by(Expense.date)

# first query considers center 1, output:
# 2014-08-01: 30.00
# 2014-09-01: 15.00
for row in base_query.filter(CostCenter.id.in_([1])).all():
    print('{}: {}'.format(row.date.date(), row.total))

# second query considers centers 1, 2, and 3, output:
# 2014-07-01: 42.00
# 2014-08-01: 75.00
# 2014-09-01: 95.00
for row in base_query.filter(CostCenter.id.in_([1, 2, 3])).all():
    print('{}: {}'.format(row.date.date(), row.total))
"
Replacing multiple letters in a word with number in python?,"from string import maketrans
instr = ""abcdenghi""
outstr = ""222555777""
trans = maketrans(instr, outstr)
text = ""again""
print text.translate(trans)
"
Python requests urlencode not working?,"import requests
s = requests.Session()
s.params = {'access_token': 'foobarbaz'} # so you don't have to specify it every time
query = ('{""user_sex"":""SELECT sex FROM user WHERE uid=me()"",'
         '""friends"":""SELECT uid, name FROM user WHERE uid IN '
         '(SELECT uid2 FROM friend WHERE uid1 = me()) '
         'AND not (sex in (SELECT sex FROM #user_sex)) '
         ' ORDER BY name""}')
s.get('https://graph.facebook.com/fql', params={'q': query})
"
How can I return a value to a superclass without overriding the parent function?,"class Parent:
    def f(self, *v_args):
        arg = self.helper_f(*v_args)
        print(""Received {}."".format(arg))
        return arg ** 3

    def helper_f(self,*args):
        ""really should be an abstract method, must be implemented in a subclass""
        raise NotImplementedError(""Must override in a subclass!"") 

class Child(Parent):
    def helper_f(self, c, b, a):
        print(a, b, c)
        return a

# Prints ""Received 2."". Sets value to 8.
value = Child().f(0, 1, 2)
"
Django reference url in views.py,"from django.core.urlresolvers import reverse

class ExampleView(TemplateView):
    some_var = request.build_absolute_uri(reverse('example2'))
    print some_var
"
convert image to value matrix,"import Image
import numpy as np
img = Image.open(""Chess_Board.bmp"")
a = np.array(img.convert('P', palette=Image.ADAPTIVE, colors=4))
blockLengthX = np.argmin(a[0]==a[0,0])
blockLengthY = np.argmin(a[:,0]==a[0,0])
result = a[::blockLengthX, ::blockLengthY]
"
Replace non-ASCII characters with a single space,"re.sub('[^\\x00-\\x7F]+', ' ', text)"
Python tkinter - timer,"from tkinter import *
from random import randint

root = Tk()
root.geometry('600x470')
root.title('Catch The Button - Game')

clicks = 0
time = 20

def change():
    global clicks
    clicks += 1
    clicksLabel['text'] = 'Clicks: ' + str(clicks)
    rand = randint(1,5)

    if rand == 1:
        button.pack(side = LEFT, padx = randint(1, 220), pady = randint(1, 220))
    elif rand == 2:
        button.pack(side = RIGHT, padx = randint(1, 220), pady = randint(1, 220))
    elif rand == 3:
        button.pack(side = TOP, padx = randint(1, 220), pady = randint(1, 220))
    else:
        button.pack(side = BOTTOM, padx = randint(1, 220), pady = randint(1, 220))

def update_time():
    global time
    time = time-0.1
    timeLabel.config(text=str(time))
    if time<0.01: # Account for rounding errors
        timeLabel.config(text='0')
        button.pack_forget()
        Label(root, text='You scored {}'.format(clicks), font=('Helvetica', 20, 'bold')).pack()
    else:
        timeLabel.after(100, update_time)

clicksLabel = Label(root, text = 'Clicks: 0')
clicksLabel.pack(side=LEFT, anchor=N)

timeLabel = Label(root, text=str(time))
timeLabel.pack(side=RIGHT, anchor=N)
timeLabel.after(100, update_time)

button = Button(root, text = 'Catch me  :P', command = change)
button.pack(side = BOTTOM, padx = randint(1, 220), pady = randint(1, 220))

root.mainloop()
"
Creating new variables based on two columns as index one column as new variable names python pandas or R,"library(data.table)
dcast.data.table(setDT(df)[,Item:=paste0('Price', Item)],
                                         ...~Item, value.var='Price')
"
Split list in tuples of three,"from itertools import izip_longest

def grouper(n, iterable, fillvalue=None):
    ""Collect data into fixed-length chunks or blocks""
    # grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

for a, b, c in grouper(3, seq):
    pass
"
pygame - how to change an image/blit over previous one?,"running = True
stage = 1

while running:

    screen.fill(black)
    screen.blit(bg, (0, 0))
    screen.blit(label, (65, 420))

    if stage == 1:
        screen.blit(bg2, (37, 30))
    else:
        screen.blit(bg3, (37, 30))        

    pygame.display.update()

    for event in pygame.event.get():

        if event.type == QUIT or \
                (event.type == pygame.KEYDOWN and event.key == K_ESCAPE):
            pygame.quit()
            sys.exit()

        if event.type == pygame.KEYDOWN and event.key == K_SPACE:
            stage += 1
"
Return Shared Values using Python Dictionary,"mylist = [""shirt"",""pants"",""shoes"",""tie"",""jacket""]

str_data =""""""shirt Zara
shirt GAP
shirt Old Navy
shirt Banana_Republic
shoes Banana_Republic
shoes Zenga
shoes Zara
shoes Nike
shoes Adidas
tie Hermes
tie Ferragamo
tie Alfani
jacket Alfani
jacket Under_Armour
jacket Nike
jacket Polo
jacket The_North_Face""""""

#dict list
data_dicts = [{line.split()[1]: line.split()[0]} for line in str_data.split(""\n"")]

clothes_matches = {}

#turn into a single dictionary
for data_dict in data_dicts:
    for key, value in data_dict.items():
        try:
            clothes_matches[key].append(value)
        except KeyError:
            clothes_matches[key] = [value]

#count the number of o occurrences for each brand
result = []
for key,value in clothes_matches.items():
    if len(value) >= 2:
        result.append(key)

print(result)
"
Formatting display of numbers in Python 3,">>> format(yournumber, '.3f')
'87.282'
"
python BeautifulSoup finding certain things in a table,"import re
from bs4 import BeautifulSoup

data = """"""
<div>
    <table>
        <A href=""javascript:Set_Variables('foo1','bar1''')"" onmouseover=""javascript: return window.status=''"">
        <A href=""javascript:Set_Variables('foo2','bar2''')"" onmouseover=""javascript: return window.status=''"">
    </table>
</div>
""""""

soup = BeautifulSoup(data)

pattern = re.compile(r""javascript:Set_Variables\('(\w+)','(\w+)'"")
for a in soup('a'):
    match = pattern.search(a['href'])
    if match:
        print match.groups()
"
"Manipulating a list to increase code efficiency, struggling","# Create a class to represent the planets.  Each planet will be an
# instance of this class, with attributes 'm' and 'p'.
class Planet(object):
    def __init__(self, m, p):
        self.m = m
        self.p = p

# Iterate over the three lists ""in parallel"" using zip().
for name, m, p in zip(planet, planetv, planetp):
    # Create a Planet and store it as a module-global variable,
    # using the name from the 'planet' list.
    globals()[name] = Planet(m, p)
"
Python: How do you read a chunk of text from a file without knowing how long the file actually is?,"contents = input_file.readlines()
input_file.close()
"
How to pass a list as parameter function into a timeit call in Python 3.2.3?,"mylist = function_generates_a_list()
def newfunc():
   function_to_test(mylist)
"
Can I match multiline string in python without using re.DOTALL?,"/* A */
/* B */
"
Replacing items in a dictionary of lists in Python,">>> {k:[e if e is not None else 'None' for e in v] for k,v in di.items()}
{'Rochester102': ['Henrich, Norton', '08/18/2014', '12/17/2014', 'None'], 'Rochester100': ['Caeser, Julius', '08/18/2014', '12/17/2014', 'None'], 'Rochester101': ['None', 'None', 'None', '08/18/2012'], 'Chester100': ['Caesar, Augustus', '05/10/2012', '09/09/2012', 'None']}
"
python equivalent of GNU 'cat' that shows unique lines,"filenames = ['file1', 'file2', 'file3']
for filename in filenames:
    with open(filename) as f:
        for line in f:
            print line,
"
How does this function to remove duplicate characters from a string in python work?,print(' '.join(OrderedDict.fromkeys(s)))
Selenium Xpath I am trying to select the checkbox in col2 where name is in col1 - using following axis or descendant,"//table//td[text()='CRM']/following::input[1]
"
Lambda recursion over list in Python,"recur = lambda l:len(l) if not isinstance(l,(tuple,list)) else sum(map(recur,l))
"
Something seems to be stuck in memory,"class Foo(object):
    x = []

    def __init__(self):
        self.x = x
"
How can I get pyyaml.safe_load() to handle python/unicode tag?,"yaml.SafeLoader.add_constructor()
"
Print multiple arguments in python,"print(('Total score for', name, 'is', score))"
Plot parametric mean in Python,"r = np.exp(np.arange(1,5))
a = np.arange(5)

In [33]: r
Out[33]: array([  2.71828183,   7.3890561 ,  20.08553692,  54.59815003])

In [34]: a
Out[34]: array([0, 1, 2, 3, 4])

In [39]: r*a[:,None]
Out[39]: 
# this is  2.7...         7.3...        20.08...       54.5...         # times:
array([[   0.        ,    0.        ,    0.        ,    0.        ],   # 0
       [   2.71828183,    7.3890561 ,   20.08553692,   54.59815003],   # 1
       [   5.43656366,   14.7781122 ,   40.17107385,  109.19630007],   # 2
       [   8.15484549,   22.1671683 ,   60.25661077,  163.7944501 ],   # 3
       [  10.87312731,   29.5562244 ,   80.34214769,  218.39260013]])  # 4

In [40]: np.outer(a,r)
Out[40]: 
array([[   0.        ,    0.        ,    0.        ,    0.        ],
       [   2.71828183,    7.3890561 ,   20.08553692,   54.59815003],
       [   5.43656366,   14.7781122 ,   40.17107385,  109.19630007],
       [   8.15484549,   22.1671683 ,   60.25661077,  163.7944501 ],
       [  10.87312731,   29.5562244 ,   80.34214769,  218.39260013]])

# this is the mean of each column:
In [41]: (np.outer(a,r)).mean(1)
Out[41]: array([  0.        ,  21.19775622,  42.39551244,  63.59326866,  84.79102488])

# and the log of 1 + the above is:
In [42]: np.log(1+(np.outer(a,r)).mean(1))
Out[42]: array([ 0.        ,  3.09999121,  3.77035604,  4.16811021,  4.4519144 ])
"
Python dictionary sum,"from collections import Counter
import csv


def read_csv(fn):
    with open(fn, 'r') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        reader.next()    # Skip header
        for row in reader:
            ip, bytes = row
            yield ip, int(bytes)


totals = Counter()
for ip, bytes in read_csv('data.txt'):
    totals[ip] += bytes

print totals
"
InteractiveConsole.raw_input override not working,"class CustomInputConsole(code.InteractiveConsole):
    def __init__(self, input_file):
        code.InteractiveConsole.__init__(self) # old style class, so can't use super() here
        self.input_file = input_file

    def raw_input(self, prompt=""""):
        self.write(prompt)
        line = self.input_file.readline()
        if line:
            return line.rstrip(""\n"")
        raise EOFError()

    def runcode(self, _code):
        try:
            old_stdin = sys.stdin
            sys.stdin = self.input_file
            code.InteractiveConsole.runcode(self, _code)
        finally:
            sys.stdin = old_stdin
"
"aligning, spacing in python 3","...
print(""{:12}{:12}{:12}{:12}{:12}{:12}{:12}"".format(
      ""VUELO"",""AEROLINEA"",""PROCEDENCIA"",""FECHA"",""HORA"",""ESTADO"",""PUERTA""))
print(""{:12}{:12}{:12}{:12}{:12}{:12}{:12}"".format(*llegadas))
"
How many factors in an integer,"def factors(n):
    return filter(lambda i: n % i == 0, range(1, n + 1))
"
pythonic way of removing similar items from list,"from itertools import groupby

listOut = []
for value, group in groupby(listIn):
    listOut.append(next(group))
    for i in group:
        listOut.append(i)
        break
"
How can I get the list sorted out according to the IP address?,"import socket

results = []

with open('hostnames_list.txt') as f:
    for hostname in f:
        try:
            ip = socket.gethostbyname(hostname.strip())
        except socket.gaierror:
            ip = socket.gethostbyname('.'.join(hostname.strip().split('.')[1:]))
        results.append((ip, hostname.strip()))

for (ip, hostname) in sorted(results, key=lambda item: socket.inet_aton(item[0])):
    print (ip.ljust(30,' ')) + '' + (hostname.ljust(30,' '))
"
Being Pythonic: Collecting arbitrary strings - indexer,"words_list = string.split()
words_dict = {}

for a in range(len(words_list)):
    for b in range(a):
        phrase = "" "".join(words_list[b:a])
        if phrase in words_dict:
            words_dict[phrase] += 1
        else:
            words_dict[phrase] = 1

for i in words_dict:
    print i, words_dict[i]
"
copying one file's contents to another in python,"shutil.copy('file.txt', 'file2.txt')"
How to extract an element's content in HTML?,">>> soup.find('div', class_='data').img.next_sibling
u'\n  \xa0 SOME_TEXT\n'
"
HTTP GET packet sniffer in Scapy,"#!/usr/bin/python
from scapy.all import *

def http_header(packet):
        http_packet=str(packet)
        if http_packet.find('GET'):
                return GET_print(packet)

def GET_print(packet1):
    ret = ""***************************************GET PACKET****************************************************\n""
    ret += ""\n"".join(packet1.sprintf(""{Raw:%Raw.load%}\n"").split(r""\r\n""))
    ret += ""*****************************************************************************************************\n""
    return ret

sniff(iface='eth0', prn=http_header, filter=""tcp port 80"")
"
Python Image Library - Convert pixels to 2D list,"data = [ [255] * image.size[1] ] * image.size[0]
"
Append child in the middle,"import xml.dom.minidom

data = """"""<node-a>
    <node-1/>
    <node-2/>
    <node-3/>
</node-a>""""""

dom = xml.dom.minidom.parseString(data)
node_a = dom.getElementsByTagName('node-a')[0]

node_4 = dom.createElement('node-4')
node_a.appendChild(node_4)

node_3 = dom.getElementsByTagName('node-3')[0]
node2_a = dom.createElement('node-2a')
node_a.insertBefore(node2_a, node_3)

print dom.toprettyxml()
"
Modifying a subset of rows in a pandas dataframe,"df.ix[df.A == 0, 'B'] = np.nan"
Divide pandas DataFrame rows in specific number of random sets,"import numpy as np
num_groups = 5
df['group'] = np.random.randint(num_groups, size=len(df))
dfs = [grp for key, grp in df.groupby('group')]
"
finding some values after the specified text in python,"awk '/Texts which I want to specify/,EOF {print $1 "" "" $3}' | sort -n 
"
Pandas Pivot table nearest neighbor,"def lkp_data(c,d,v):
    d = df[(df['c'] == c) & (df['d'] == d) & (df['v'] == v)]['z']
    return None if len(d) == 0 else d.values[0]

df['z[c-1]'] = df.apply(lambda x: lkp_data(x['c'] - 1, x['d'], x['v']), axis=1)
df['z[c+1]'] = df.apply(lambda x: lkp_data(x['c'] + 1, x['d'], x['v']), axis=1)
df['z[d-1]'] = df.apply(lambda x: lkp_data(x['c'], x['d'] - 1, x['v']), axis=1)
df['z[d+1]'] = df.apply(lambda x: lkp_data(x['c'], x['d'] + 1, x['v']), axis=1)

    c   d      z  v  z[c-1]  z[c+1]  z[d-1]  z[d+1]
0  15  42   5460  1     NaN    7540     NaN    9620
1  15  42   6500  2     NaN    8580     NaN   10660
2  16  42   7540  1    5460     NaN     NaN    3452
3  16  42   8580  2    6500     NaN     NaN    4561
4  15  43   9620  1     NaN    3452    5460     NaN
5  15  43  10660  2     NaN    4561    6500     NaN
6  16  43   3452  1    9620     NaN    7540     NaN
7  16  43   4561  2   10660     NaN    8580     NaN
"
Compute the similarity between two lists,"from collections import Counter

counterA = Counter(listA)
counterB = Counter(listB)
"
Changing image hue with Python PIL,"import Image
import numpy as np

def rgb_to_hsv(rgb):
    # Translated from source of colorsys.rgb_to_hsv
    # r,g,b should be a numpy arrays with values between 0 and 255
    # rgb_to_hsv returns an array of floats between 0.0 and 1.0.
    rgb = rgb.astype('float')
    hsv = np.zeros_like(rgb)
    # in case an RGBA array was passed, just copy the A channel
    hsv[..., 3:] = rgb[..., 3:]
    r, g, b = rgb[..., 0], rgb[..., 1], rgb[..., 2]
    maxc = np.max(rgb[..., :3], axis=-1)
    minc = np.min(rgb[..., :3], axis=-1)
    hsv[..., 2] = maxc
    mask = maxc != minc
    hsv[mask, 1] = (maxc - minc)[mask] / maxc[mask]
    rc = np.zeros_like(r)
    gc = np.zeros_like(g)
    bc = np.zeros_like(b)
    rc[mask] = (maxc - r)[mask] / (maxc - minc)[mask]
    gc[mask] = (maxc - g)[mask] / (maxc - minc)[mask]
    bc[mask] = (maxc - b)[mask] / (maxc - minc)[mask]
    hsv[..., 0] = np.select(
        [r == maxc, g == maxc], [bc - gc, 2.0 + rc - bc], default=4.0 + gc - rc)
    hsv[..., 0] = (hsv[..., 0] / 6.0) % 1.0
    return hsv

def hsv_to_rgb(hsv):
    # Translated from source of colorsys.hsv_to_rgb
    # h,s should be a numpy arrays with values between 0.0 and 1.0
    # v should be a numpy array with values between 0.0 and 255.0
    # hsv_to_rgb returns an array of uints between 0 and 255.
    rgb = np.empty_like(hsv)
    rgb[..., 3:] = hsv[..., 3:]
    h, s, v = hsv[..., 0], hsv[..., 1], hsv[..., 2]
    i = (h * 6.0).astype('uint8')
    f = (h * 6.0) - i
    p = v * (1.0 - s)
    q = v * (1.0 - s * f)
    t = v * (1.0 - s * (1.0 - f))
    i = i % 6
    conditions = [s == 0.0, i == 1, i == 2, i == 3, i == 4, i == 5]
    rgb[..., 0] = np.select(conditions, [v, q, p, p, t, v], default=v)
    rgb[..., 1] = np.select(conditions, [v, v, v, q, p, p], default=t)
    rgb[..., 2] = np.select(conditions, [v, p, t, v, v, q], default=p)
    return rgb.astype('uint8')


def shift_hue(arr,hout):
    hsv=rgb_to_hsv(arr)
    hsv[...,0]=hout
    rgb=hsv_to_rgb(hsv)
    return rgb

img = Image.open('tweeter.png').convert('RGBA')
arr = np.array(img)

if __name__=='__main__':
    green_hue = (180-78)/360.0
    red_hue = (180-180)/360.0

    new_img = Image.fromarray(shift_hue(arr,red_hue), 'RGBA')
    new_img.save('tweeter_red.png')

    new_img = Image.fromarray(shift_hue(arr,green_hue), 'RGBA')
    new_img.save('tweeter_green.png')
"
python: shuffle characters in string to get all possible string combinations,">>> import itertools
>>> import pprint
>>> pprint.pprint(list(itertools.permutations(""spam"")))
[('s', 'p', 'a', 'm'),
 ('s', 'p', 'm', 'a'),
 ('s', 'a', 'p', 'm'),
 ('s', 'a', 'm', 'p'),
 ('s', 'm', 'p', 'a'),
 ('s', 'm', 'a', 'p'),
 ('p', 's', 'a', 'm'),
 ('p', 's', 'm', 'a'),
 ('p', 'a', 's', 'm'),
 ('p', 'a', 'm', 's'),
 ('p', 'm', 's', 'a'),
 ('p', 'm', 'a', 's'),
 ('a', 's', 'p', 'm'),
 ('a', 's', 'm', 'p'),
 ('a', 'p', 's', 'm'),
 ('a', 'p', 'm', 's'),
 ('a', 'm', 's', 'p'),
 ('a', 'm', 'p', 's'),
 ('m', 's', 'p', 'a'),
 ('m', 's', 'a', 'p'),
 ('m', 'p', 's', 'a'),
 ('m', 'p', 'a', 's'),
 ('m', 'a', 's', 'p'),
 ('m', 'a', 'p', 's')]
"
Get a list of values from a list of dictionaries in python,[d['key'] for d in l]
Can we use variable in name of variable in python,"d = {}
d['list1'] = [1, 2, 3]
d['list2'] = ['a', 'b', 'c']
"
Python while loop never stops even though it should,"  if position == k:
        success = True
        print(str((position)) + ' is the value of k.')
    elif k < position:
        step_size = ceil(step_size / 2.0)
        position -= long(step_size)
        print(step_size, position,k)
    else:
        step_size = ceil(step_size / 2.0)
        position += long(step_size)
        print(step_size, position)
"
Run function after a certain type of model is committed,"from sqlalchemy import event

class ModelChangeEvent(object):
    def __init__(self, session, *callbacks):
        self.model_changes = {}
        self.callbacks = callbacks

        event.listen(session, 'before_flush', self.record_ops)
        event.listen(session, 'before_commit', self.record_ops)
        event.listen(session, 'after_commit', self.after_commit)
        event.listen(session, 'after_rollback', self.after_rollback)

    def record_ops(self, session, flush_context=None, instances=None):
        for targets, operation in ((session.new, 'insert'), (session.dirty, 'update'), (session.deleted, 'delete')):
            for target in targets:
                state = inspect(target)
                key = state.identity_key if state.has_identity else id(target)
                self.model_changes[key] = (target, operation)

    def after_commit(self, session):
        if self._model_changes:
            changes = list(self.model_changes.values())

            for callback in self.callbacks:
                callback(changes=changes)

            self.model_changes.clear()

    def after_rollback(self, session):
        self.model_changes.clear()
"
Is there a better way to index dataframes?,"df = pd.DataFrame(index=pd.date_range('2009-1-1', periods=4))
df = pd.DataFrame({'id': np.arange(len(df))}, index=df.index)
#             id
# 2009-01-01   0
# 2009-01-02   1
# 2009-01-03   2
# 2009-01-04   3
"
I can't turn elements of my list into integers,"...
choice = requestInteger(...)
try:
  choice = int(choice)
except ValueError:
  # Spit some error message back
if (choice == 1):
...
"
Iterate over lists with a particular sum,"a_solution = [-1,]*11 + [1,]*13  
"
Parsing message parameters received by a GSM modem in python," def parse(x):
        res = []
        match = re.findall(""\+CMGL: (\d+),""""(.+)"""",""""(.+)"""",(.*),""""(.+)""""\n(.+)\n"", x)
        for each in match:
            res.append(each[5])
        return res
"
Python: how to split a string by multiple strings,">>> re.split(r'AND|OR',tr)
['apple ', ' orange ', ' banana']
"
From list to tree representation,"lista=[ ['a','b','c','d'],['b','f','g'],['c','h','i'],['d'],['h'],['i'],['f'],['g']]

def tree(root, d):
    return [root] + [tree(k, d) for k in d[root]]

d = {i[0]: i[1:] for i in lista}

root = 'a'
print(tree(root, d))
"
Python: Reading in .csv data as dictionary and printing out data as dictionary to .csv file?,"infile = open(sys.argv[1], 'rU')
csv_file = csv.DictReader(infile ,delimiter = ',')

<all other code>

infile.seek(0)
for row in csv_file:
    csvwriter.writerow(row)
test_file.close()
infile.close()
"
"How do I edit an executable with python by address/offset/bytes, like in a hex editor?","with open(path, 'r+b') as f:
    with contextlib.closing(mmap.mmap(f.fileno(), access=mmap.ACCESS_WRITE)) as m:
        m[first_position] = first_new_byte
        m[other_position] = other_new_byte
        # ...
"
Random DNA mutation Generator,"string = ""ATGT""
results = [mutate(string) for _ in range(100)]
for result_string, mutations in results:
    if mutations: # skip writing out unmutated strings
        print(result_string, mutations)
"
Efficient way to shift 2D-matrixes in python in both directions,"UP, DOWN, LEFT, RIGHT = 'up', 'down', 'left', 'right'

def shift(direction, number, matrix):
    ''' shift given 2D matrix in-place the given number of rows or columns
        in the specified (UP, DOWN, LEFT, RIGHT) direction and return it
    '''
    if direction in (UP, DOWN):
        n =  (number % len(matrix) if direction == UP else
            -(number % len(matrix)))
        h = matrix[:n]
        del matrix[:n]
        matrix.extend(h)
        return matrix
    elif direction in (LEFT, RIGHT):
        n =  (number % len(matrix[0]) if direction == LEFT else
            -(number % len(matrix[0])))
        temp = zip(*matrix)
        h = temp[:n]
        del temp[:n]
        temp.extend(h)
        matrix[:] = map(list, zip(*temp))
        return matrix
    else:
        return matrix

if __name__ == '__main__':
    def print_shifted_matrix(direction, number, matrix):
        print(direction + ': ' + (10-2-len(direction))*' ' +
              ('\n' + 10*' ').join(str(row)
                                  for row in shift(direction, number, matrix)))
        print

    matrix1 = [[1, 2, 3, 4],
               [5, 6, 7, 8],
               [9, 10, 11, 12]]

    matrix2 = [[1, 2, 3],
               [4, 5, 6],
               [7, 8, 9],
               [10, 11, 12]]

    for matrix in matrix1, matrix2:
        print_shifted_matrix('original', 0, matrix)
        print_shifted_matrix(UP, 1, matrix)
        print_shifted_matrix(DOWN, 1, matrix)
        print_shifted_matrix(LEFT, 1, matrix)
        print_shifted_matrix(RIGHT, 1, matrix)
"
How does a comma followed by a variable assignment concatenate?,"a = 'a'
b = 'b'

temp = a
a = b
b = temp

print(a) # 'b'
print(b) # 'a'
"
Concise way to split a string into a list of fixed number of tokens,"def three_tokens(s):
    tokens = s.split('-', 2)
    tokens.extend([''] * (3 - len(tokens)))
    return tokens
"
"Wanted Python to create a UTF-8 File, got an ANSI one. Why?","corpusFile = open(filename, mode = 'wb')
# ...
tagged_token = '\xdcml\xe4ut'
tagged_token = tagged_token.decode('ISO-8859-1')
corpusFile.write(tagged_token.encode('utf-8'))
corpusFile.write('\n')
"
Using function in Pandas to split text -- reasons not to use apply,"def getTextNum(col):
    ser   = col.str.split("":"")
    text  = np.where(ser.str[0] == ""Ab"", 1 ,0)
    num   = np.where(ser.str[0] == ""Ab"", ser.str[1].astype(int) ,-ser.str[1].astype(int))
    return pd.DataFrame({'Text':text,'Num':num}, columns= ['Text','Num'])

print getTextNum(df2['AB18'])
   AB18n  AB18t
0      1      1
1      0      1
2     -1      0
3      0      0
4     -1      0

df2[['AB18t', 'AB18n']] = getTextNum(df2['AB18'])
"
why is converting strings to ints in my lambda function slower than converting with list comprehension,"lambda x, y, i=int: i(x) * i(y), line1, line2
"
How to get pyparser to work in a particular form,"expr = Forward()
identifier = Word(alphas+'_', alphanums+'_')
expr = Forward()
function_call = Group(identifier + LPAR + Group(expr) + RPAR)

unop = oneOf(""+ -"")
binop = oneOf(""+ - * / %"")
operand = Group(Optional(unop) + (function_call | number | identifier))
binexpr = operand + binop + operand

expr << (binexpr | operand)

bnf = expr
"
stdtr in python giving nan for p-value while doing t-test,"In [7]:

import numpy as np
from scipy.special import stdtr
​
dof = 2176568
tf = -11.374250
2*stdtr(dof, -np.abs(tf))
Out[7]:
5.6293517178917971e-30
"
"python, locating and clicking a specific button with selenium","next = driver.find_element_by_xpath(""//li[@class='next']/a"")
prev = driver.find_element_by_xpath(""//li[@class='previous']/a"")
"
Speed up bitstring/bit operations in Python?,"from __future__ import print_function
import time
import gmpy2

def prime_numbers(limit=1000000):
    '''Prime number generator. Yields the series
    2, 3, 5, 7, 11, 13, 17, 19, 23, 29 ...
    using Sieve of Eratosthenes.
    '''
    sub_limit = int(limit**0.5)
    flags = gmpy2.xmpz(1)
    flags[(limit>>1)+1] = True
    f_scan0 = flags.bit_scan0
    current = 0
    prime = 2
    while prime <= sub_limit:
        yield prime
        current += 1
        current = f_scan0(current)
        prime = 2 * current + 1
        flags[2*current*(current+1):limit>>1:prime] = True
    while prime <= limit:
        yield prime
        current += 1
        current = f_scan0(current)
        prime = 2 * current + 1

start = time.time()
result = list(prime_numbers(1000000000))
print(time.time() - start)
"
Get only the first link of a URLs list with BeautifulSoup,"import re

soup.find('a', href=re.compile('^http://get.cm/get'))['href']
"
Print letters in specific pattern in Python,">>> def f(s):
        pat = re.compile(r'%(\d*)([a-zA-Z]+)')
        out = pat.sub(lambda m:int(m.group(1))*m.group(2) if m.group(1) else m.group(2), s)
        return out

>>> st = '%4g_%12k%p__%m'
>>> f(st)
'gggg_kkkkkkkkkkkkp__m'
"
Getting index of structured elements of a list in Python,"import re
mylist = ['name','mem','g1','g2','g3','val1','val2','val3','val1','name','mem','val1','val2','val3','val4']
mj = re.compile(r'^val\d+$')
print [[x[0] for x in g] for k, g in groupby(
                     enumerate(mylist), key=lambda x: bool(mj.search(x[1]))) if k]
"
python/cgi - serves distorted images,"import sys

if sys.platform == ""win32"":
    import os, msvcrt
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)
"
How to replace an instance in __init__() with a different object?,"class ClassA(object):
    def __new__(cls,theirnumber):
        if theirnumber > 10:
            # all big numbers should be ClassB objects:
            return ClassB.ClassB(theirnumber)
        else:
            # numbers under 10 are ok in ClassA.
            return super(ClassA, cls).__new__(cls, theirnumber)
"
Delete same rows from list of lists in python,">>> from pprint import pprint
>>> from collections import Counter
>>> block = [
...     ['alfa', 'T31360N', '2013-12-19 12:07:2'],
...     ['beta', 'D41535N', '2013-12-19 12:20:1'],
...     ['gamma', 'E61460N', '2013-12-19 13:58:2'],
...     ['delta', 'D133PR01', '2013-12-19 14:19:4'],
...     ['beta', 'Q3332N', '2013-12-19 14:19:5']
... ]
>>> seen = set()
>>> pprint([row for row in block if row[0] not in seen and not seen.add(row[0])])
[['alfa', 'T31360N', '2013-12-19 12:07:2'],
 ['beta', 'D41535N', '2013-12-19 12:20:1'],
 ['gamma', 'E61460N', '2013-12-19 13:58:2'],
 ['delta', 'D133PR01', '2013-12-19 14:19:4']]
>>> counts = Counter(row[0] for row in block)
>>> pprint([row for row in block if counts[row[0]] == 1])
[['alfa', 'T31360N', '2013-12-19 12:07:2'],
 ['gamma', 'E61460N', '2013-12-19 13:58:2'],
 ['delta', 'D133PR01', '2013-12-19 14:19:4']]
"
Fetching nested value given dot notation,"obj = {
  'Name': 'David',
  'Car': {
           'Make': 'Ford',
           'Year': 2008
   }
}
s = ""Car.Make""
x = obj
keys = s.split(""."")
for key in keys:
    x = x[key]
print(x)
"
pandas unique values multiple columns,">>> df1 = pd.concat([df]*100000) # DataFrame with 500000 rows
>>> %timeit np.unique(df1[['Col1', 'Col2']].values)
1 loops, best of 3: 619 ms per loop

>>> %timeit pd.unique(df1[['Col1', 'Col2']].values.ravel())
10 loops, best of 3: 49.9 ms per loop
"
Recursively matching filenames with glob argument,"grep -E ""ba(na)* split"" *.txt
grep -E ba\(na\)\*\ split *.txt
"
Reshaping Arrays in Numpy with variables,"In [94]: a[3:, :] = 23; print a
[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [23 23 23 23]
 [23 23 23 23]]
"
How to access a matrix in an .Rdata file in Python using rpy2,"import rpy2.robjects as robjects
import numpy as np

# load your file
robjects.r['load']('fname.RData')

# retrieve the matrix that was loaded from the file
matrix = robjects.r['fname']

# turn the R matrix into a numpy array
a = np.array(matrix)

print a
"
How to scroll Panel with GridBagSizer in wxPython,"class MyFrame( wx.Frame ):
    def __init__( self, parent, ID, title ):
        wx.Frame.__init__( self, parent, ID, title, wx.DefaultPosition, wx.Size( 400, 300 ) )

        self.InitUI()
        self.Center()
        self.Show()

    def InitUI(self):

        MPanel = MyPanel(self)
        GridBag = wx.GridBagSizer(2, 2)

        CO = [""RED"", ""BLUE""]

        for i in range(10):
            X = wx.StaticText(MPanel, size=(50,50), style=wx.ALIGN_CENTER, label="""")
            X.SetBackgroundColour(CO[i%2])
            GridBag.Add(X, pos=(i+1, 1), flag=wx.EXPAND|wx.LEFT|wx.RIGHT, border=1)

        GridBag.AddGrowableCol(1)
        MPanel.SetSizerAndFit(GridBag)

class MyApp( wx.App ):
    def OnInit( self ):
        self.fr = MyFrame( None, -1, ""K"" )
        self.fr.Show( True )
        self.SetTopWindow( self.fr )
        return True

app = MyApp( 0 )
app.MainLoop()
"
Simple Nested loop with Python,"data1 = set(l.rstrip() for l in open(raw_input(""Which is list1?"")))
data2 = set(l.rstrip() for l in open(raw_input(""Which is list2?"")))
for x in data1 - data2:
     print x
"
From a python dictionary to list of settings,"def dict_to_args(d, prefix=()):
    for k, v in d.iteritems():
        if isinstance(v, dict):
            for x in dict_to_args(v, prefix + (k,)):
                yield x
        else:
            yield ""."".join(prefix + (k,)) + "":"" + v
"
Counting specific letters or symbols in a text file in Python,"with open (""words.txt"", ""r"") as myfile:
    data = myfile.read().replace('\n', '')
    print(data)
    freq = data.count(Symbol)
    print(freq)
"
When and how often are properties calculated in python?,"@property
def area(self):
    try:
        return self._area
    except AttributeError:
        self.recalc_area()
        return self._area

def recalc_area(self):
    self._area = pi*self.r**2
"
Access files with wildcard filename in directory structure,"import glob
import os
files = []
for x in os.listdir(path_to_top_folder):
    if os.path.isdir(x):
        for fil in glob.glob(""{0}/*.txt"".format(x)):
            files += [os.path.split(fil)[-1]]
print files  
"
built-in max heap API in Python,"class Neg():
    def __init__(self, x):
        self.x = x

    def __cmp__(self, other):
        return -cmp(self.x, other.x)

def maxheappush(heap, item):
    heapq.heappush(heap, Neg(item))

def maxheappop(heap):
    return heapq.heappop(heap).x
"
Gauss-Legendre Algorithm in python,"pi = (a+b)**2 / (4*t)
"
Python argparse type and choice restrictions with nargs > 1,"import argparse
import collections


class ValidateCredits(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        # print '{n} {v} {o}'.format(n=args, v=values, o=option_string)
        valid_subjects = ('foo', 'bar')
        subject, credits = values
        if subject not in valid_subjects:
            raise ValueError('invalid subject {s!r}'.format(s=subject))
        credits = float(credits)
        Credits = collections.namedtuple('Credits', 'subject required')
        setattr(args, self.dest, Credits(subject, credits))

parser = argparse.ArgumentParser()
parser.add_argument('-c', '--credits', nargs=2, action=ValidateCredits,
                    help='subject followed by number of credits required',
                    metavar=('SUBJECT', 'CREDITS')
                    )
args = parser.parse_args()
print(args)
print(args.credits.subject)
print(args.credits.required)
"
"Iterate over nested lists, tuples and dictionaries",">>> element = {'Request': (16, 2), 'Params': ('Typetext', [16, 2], 2), 'Service': 'Servicetext', 'Responses': ({'State': 'Positive', 'PDU': [80, 2, 0]}, {})}
>>> for path, value in objwalk(element):
...     if isinstance(value, int):
...         parent = element
...         for step in path[:-1]:
...             parent = parent[step]
...         parent[path[-1]] = hex(value)
... 
>>> element
{'Params': ['Typetext', ['0x10', '0x2'], '0x2'], 'Request': ['0x10', '0x2'], 'Responses': [{'State': 'Positive', 'PDU': ['0x50', '0x2', '0x0']}, {}], 'Service': 'Servicetext'}
"
numpy.nextafter decrementing instead of incrementing,"In [12]: a = 1.15898324042702949299155079643242061138153076171875

In [13]: a
Out[13]: 1.1589832404270295

In [14]: numpy.nextafter(a, 0)
Out[14]: 1.1589832404270293

In [15]: numpy.nextafter(a, 1)
Out[15]: 1.1589832404270293

In [16]: numpy.nextafter(a, 1.16)
Out[16]: 1.1589832404270297

In [17]: numpy.nextafter(a, 2)
Out[17]: 1.1589832404270297
"
Python: what's the difference - abs and operator.abs,">>> import operator
>>> print(operator.abs.__doc__)
abs(a) -- Same as abs(a).
"
Merging lists of lists,">>> [list(map(list, zip(a,b))) for a,b in zip(L2, L1)]
[[['a', 1], ['b', 2]], [['c', 3], ['d', 4]], [['e', 5], ['f', 6], ['g', 7]]]
"
How do you divide list into equal parts?,"In [21]: l = [1,2,3,4,5,6,7,8]

In [22]: chunk = int(round(len(l)/3.0))

In [23]: result = [l[i:i+chunk] for i in range(0,len(l),chunk)]

In [24]: result
Out[24]: [[1, 2, 3], [4, 5, 6], [7, 8]]

In [25]: l = [1,2,3,4,5]

In [26]: chunk = int(round(len(l)/3.0))

In [27]: result = [l[i:i+chunk] for i in range(0,len(l),chunk)]

In [28]: result
Out[28]: [[1, 2], [3, 4], [5]]
"
When using LXML why is the body element not the parent of the table element in this snippet of html,"tree = html.fromstring(someString)
table_tops = set(tree.xpath('//table'))-set(tree.xpath('//table//table'))
"
Fastest way to iterate through a pandas dataframe?,"In [75]: df = pd.DataFrame({'A':range(5), 'B':range(10,20,2)})

In [76]: df
Out[76]: 
   A   B
0  0  10
1  1  12
2  2  14
3  3  16
4  4  18

In [77]: mask = (df['A'].shift(1) + df['B'].shift(2) > 12)

In [78]: mask
Out[78]: 
0    False
1    False
2    False
3     True
4     True
dtype: bool

In [79]: df[mask]
Out[79]: 
   A   B
3  3  16
4  4  18
"
Python Open Every File in a Folder,"import glob
for filename in glob.glob('*.txt'):
   # do your stuff
"
Locating (file/line) the invocation of a constructor in python,"import sys
def get_caller(ext=False):
    """""" Get the caller of the caller of this function. If the optional ext parameter is given, returns the line's text as well. """"""
    f=sys._getframe(2)
    s=(f.f_code.co_filename, f.f_lineno)
    del f
    if ext:
    	import linecache
    	s=(s[0], s[1], linecache.getline(s[0], s[1]))

    return s

def post_event(e):
    caller=get_caller(True)
    print ""Event %r posted from %r""%(e, caller)

## Testing the functions.

def q():
    post_event(""baz"")

post_event(""foo"")
print ""Hello!""
q()
"
Combining two columns from two dataframes; same indices but different lengths,"mask = (df['Actor']=='s')
df['Activity'] = df[mask]['Behavior']
df.ix[mask, 'Behavior'] = np.nan 
"
pandas: How do I select rows based on if X number of columns is greater than a number?,"data[data[data > 10].count(axis=1) > 5]
"
How regex match a statement with optional end part?,"[^\]]*  # matches 0 or more of any char that 
[^()]*  # matches 0 or more of any char that is not ( and )
"
Find max values in a dict containing lists,"temp_dict= {
    ""2010"": [2, 3, 4, 5, 7, 3, 20, 29, 34, 2, 10, 1],
    ""2011"": [2, 7, 4, 5, 9, 3, 20, 9, 34, 2, 10, 10]
}

# Find the highest temp of all years
ath = max([ max(v) for v in temp_dict.values()])

for key in temp_dict:
    # Output Year
    print(""Year{k}:"".format(k=key))
    x=0
    # Find max
    max_value = max(temp_dict[key])
    for temps in temp_dict[key]:
        # Output Month 
        x=x+1
        s = ""Month {x}:{v:3d}"".format(x=str(x), v=temps)
        # Tag the max value
        if max_value == temps:
            s += ""(YearHighest)"" 
        if ath == temps:
            s += ""(ATH)""
        print(s)
    print()
"
Automatically truncate numpy arrays,"import numpy as np

class truncarray(np.ndarray):
    def __new__( cls, array ):
        obj = np.asarray(array).view(cls)
        return obj
    def __add__( a, b ):
        s = slice(0, min(len(a),len(b)))
        return np.add(a[s],b[s])
    __radd__ = __add__

a = truncarray([1,2,3])
b = truncarray([4,5,6,7])
a_array = np.array([1,2,3])
b_array = np.array([4,5,6,7])
"
Pandas: Selecting rows based on value counts of a particular column,"s = df.sym.value_counts()

print s[s == 2].index
Index([u'e', u'b'], dtype='object')

print df[df.sym.isin(s[s == 2].index)]
      price sym
1  0.400157   b
2  0.978738   b
7 -0.151357   e
8 -0.103219   e
"
Broadcasting Error Pandas,"df2 = pd.DataFrame(df.ix[:,['col1', 'col2', 'col3']].div(df.col4, axis=0))
"
Python - How to call static member using class string?,"class BigClass:
    static_data = 42

    def foo(self):
        return ""frog""

bc = eval(""BigClass"" + ""()"")
print bc.foo()
print bc.static_data
"
Remove the last part of string separated with dot in Python,"output = inputstr.rpartition('.')[0]
"
"Efficiently reading lines from compressed, chunked HTTP stream as they arrive","import pycurl
import urllib2
import httplib
import StringIO

class CurlHTTPStream(object):
    def __init__(self, url):
        self.url = url
        self.received_buffer = StringIO.StringIO()

        self.curl = pycurl.Curl()
        self.curl.setopt(pycurl.URL, url)
        self.curl.setopt(pycurl.HTTPHEADER, ['Cache-Control: no-cache', 'Accept: text/event-stream'])
        self.curl.setopt(pycurl.ENCODING, 'gzip')
        self.curl.setopt(pycurl.CONNECTTIMEOUT, 5)
        self.curl.setopt(pycurl.WRITEFUNCTION, self.received_buffer.write)

        self.curlmulti = pycurl.CurlMulti()
        self.curlmulti.add_handle(self.curl)

        self.status_code = 0

    SELECT_TIMEOUT = 10

    def _any_data_received(self):
        return self.received_buffer.tell() != 0

    def _get_received_data(self):
        result = self.received_buffer.getvalue()
        self.received_buffer.truncate(0)
        self.received_buffer.seek(0)
        return result

    def _check_status_code(self):
        if self.status_code == 0:
            self.status_code = self.curl.getinfo(pycurl.HTTP_CODE)
        if self.status_code != 0 and self.status_code != httplib.OK:
            raise urllib2.HTTPError(self.url, self.status_code, None, None, None)

    def _perform_on_curl(self):
        while True:
            ret, num_handles = self.curlmulti.perform()
            if ret != pycurl.E_CALL_MULTI_PERFORM:
                break
        return num_handles

    def _iter_chunks(self):
        while True:
            remaining = self._perform_on_curl()
            if self._any_data_received():
                self._check_status_code()
                yield self._get_received_data()
            if remaining == 0:
                break
            self.curlmulti.select(self.SELECT_TIMEOUT)

        self._check_status_code()
        self._check_curl_errors()

    def _check_curl_errors(self):
        for f in self.curlmulti.info_read()[2]:
            raise pycurl.error(*f[1:])

    def iter_lines(self):
        chunks = self._iter_chunks()
        return self._split_lines_from_chunks(chunks)

    @staticmethod
    def _split_lines_from_chunks(chunks):
        #same behaviour as requests' Response.iter_lines(...)

        pending = None
        for chunk in chunks:

            if pending is not None:
                chunk = pending + chunk
            lines = chunk.splitlines()

            if lines and lines[-1] and chunk and lines[-1][-1] == chunk[-1]:
                pending = lines.pop()
            else:
                pending = None

            for line in lines:
                yield line

        if pending is not None:
            yield pending
"
Python: Optimise For loops using list-comprehension,"from functools import partial
heatmap_rgba = partial(cmap.to_rgba, alpha=0.5, bytes=True)
heatmap_per_list = partial(map, heatmap_rgba)
heatmap_color = map(heatmap_per_list, heatmap)
"
Truth tables in python using sympy,"def explore():
    expr_string = raw_input(""Enter an expression: "")
    expr = sympify(expr_string)
    variables = sorted(expr.free_symbols)
    for truth_values in cartes([False, True], repeat=len(variables)):
        values = dict(zip(variables, truth_values))
        print sorted(values.items()), expr.subs(values)
"
How to assign one value to the entire (or partial) list in Python?,">>> [5]*1 + [6]*3
[5, 6, 6, 6]
"
Python code for counting number of zero crossings in an array,"big = np.random.randint(-10, 10, size=10000000)
"
Python - How to generate a binning index for a list?,"values = [10,0,0,14,14,123,235,0,0,0,0,0,12,12,1235,23,234,15,15,23,136,34,34,37,45]
number_bins = 10
bins_lower = int(floor(len(values) / float(number_bins)))
bins_upper = int(ceil(len(values) / float(number_bins)))

splits = cycle([bins_lower, bins_upper])
bins = []
count = 0

while count < len(values):
    splitby = splits.next()
    bins.append(values[count:count+splitby])
    count += splitby

print bins
"
Count the same list's occur frequency in a multi-dimensional list?,">>> multilist = [[1,2],[3,4,5],[3,4,5],[5,6],[5,6],[5,6]]
>>> multituples = [tuple(l) for l in multilist]
>>> from collections import Counter
>>> tc = Counter(multituples)
>>> tc
Counter({(5, 6): 3, (3, 4, 5): 2, (1, 2): 1})
"
Python Decorator Self-firing,"def route(self, *rargs, **kargs):
    args = list(rargs)
    if kargs:
        print(kargs['methods'])
    def decorator(f):
        def wrapped(index_args):
            f(args[0])
        return wrapped
    return decorator
"
Python - Count elements of a list within a range of specified values,"my_list = ['[tag]', 'there', 'are', 'many', 'words', 'here', '[/tag]', '[tag]', 'some', 'more', 'here', '[/tag]', '[tag]', 'and', 'more', '[/tag]']

# string together your list
my_str = ','.join(mylist)

# split the giant string by tag, gives you a list of comma-separated strings
my_tags = my_str.split('[tag]')

# split for each word in each tag string
my_words = [w.split(',') for w in my_tags]

# count up each list to get a list of counts for each tag, adding one since the first split removed [tag]
my_cnt = [1+len(w) for w in my_words]
"
Effectively generate slot machine outcome,"from random import choice
reels = [reel1, reel2, ...]
outcome = [choice(reel) for reel in reels]
"
How to use sys.argv in python to check length of arguments so it can run as script?,"import sys

if __name__==""__main__"":
    print ""command arguments:"", sys.argv 
"
Best way to reset keys which expires in few minutes in python,"import threading, time, random

class Key(object):
    results={}
    def __init__(self,refresh,name):
        self.refresh=refresh
        self.name=name
        self.t0=time.time()
        self.t=threading.Timer(refresh,self.now_what)
        self.t.start()

    def now_what(self):
        s='{}: {:6.4f}'.format(self.name,time.time()-self.t0)
        Key.results.setdefault(self.refresh,[]).append(s)
        # do the thing you want at this time ref with the Key...

    def time_left(self):
        return max(self.t0+self.refresh-time.time(),0)

keys=[Key(random.randint(2,15),'Key {}'.format(i)) for i in range(1,1001)]
t=time.time()
while any(key.time_left() for key in keys):
    if time.time()-t > 1:
        kc=filter(lambda x: x, (key.time_left() for key in keys))
        if kc:
            tmpl='{} keys; max life: {:.2f}; average life: {:.2f}'
            print tmpl.format(len(kc),max(kc),sum(kc)/len(kc))
            t=time.time()

for k in sorted(Key.results):
    print '\nKeys with {} secs life:'.format(k)
    for e in Key.results[k]:
        print '\t{}'.format(e)
"
Text parsing convert equation blocks to Python statements,"import re

class SasTranslator:
    def __init__(self):
        # modes:
        #   0   not in START..END
        #   1   in START..END, no CASE seen yet
        #   2   in START..END, CASE already found
        self.mode   = 0
        self.offset = -1   # input line #

    def handle_blank(self, match):
        return """"

    def handle_start(self, match):
        if self.mode == 0:
            self.mode = 1
            return None
        else:
            raise ValueError(""Found 'select;' in select block, line {}"".format(self.offset))

    def handle_end(self, match):
        if self.mode == 0:
            raise ValueError(""Found 'end;' with no opening 'select;', line {}"".format(self.offset))
        elif self.mode == 1:
            raise ValueError(""Found empty 'select;' .. 'end;', line {}"".format(self.offset))
        elif self.mode == 2:
            self.mode = 0
            return None

    def handle_case(self, match):
        if self.mode == 0:
            raise ValueError(""Found 'when' clause outside 'select;' .. 'end;', line {}"".format(self.offset))
        elif self.mode == 1:
            test = ""if""
            self.mode = 2
            # note: code continues after if..else block
        elif self.mode == 2:
            test = ""elif""
            # note: code continues after if..else block

        test_var, op, test_val, assign_var, assign_val = match.groups()
        return (
            ""{test} {test_var} {op} {test_val}:\n""
            ""    {assign_var} = {assign_val}"".format(
                test       = test,
                test_var   = test_var,
                op         = op,
                test_val   = test_val,
                assign_var = assign_var,
                assign_val = assign_val
            )
        )

    #
    # Build a dispatch table for the handlers
    #

    BLANK    = re.compile(""\s*$"")
    START    = re.compile(""select;\s*$"")
    END      = re.compile(""end;\s*$"")
    CASE     = re.compile(""\s*when\((\w+)\s*([<>=]+)\s*([\d.-]+)\s*\)\s*(\w+)\s*=\s*([\d.-]+)\s*;\s*$"")

    dispatch_table = [
        (BLANK, handle_blank),
        (START, handle_start),
        (END,   handle_end),
        (CASE,  handle_case)
    ]

    def __call__(self, line):
        """"""
        Translate a single line of input
        """"""
        self.offset += 1

        for test,handler in SasTranslator.dispatch_table:
            match = test.match(line)
            if match is not None:
                return handler(self, match)

        # nothing matched!
        return None

def main():
    with open(""my_file.sas"") as inf:
        trans = SasTranslator()
        for line in inf:
            result = trans(line)
            if result is not None:
                print(result)
            else:
                print(""***unknown*** {}"".format(line.rstrip()))

if __name__==""__main__"":
    main()
"
Python3 defining room conditions,"isdark = True
print('bt' if isdark else 'dasd')
"
Check if dictionary exist within dictionary and if so change it,"import collections
class module_class(object):
    def __init__(self, submods={}):
        self.name = ""name""
        self.submods = collections.OrderedDict(submods)
"
PyGame Custom Event,"conditions = [ # blink if player is outside screen
              (lambda: not s_r.contains(player), pygame.event.Event(E_OUTSIDE)),
               # if mouse if over player then grow and shrink player  
              (lambda: player.collidepoint(pygame.mouse.get_pos()), pygame.event.Event(E_MOUSE))]

while True:
    # generate events from conditions
    map(pygame.event.post, [e for (c, e) in conditions if c()])

    for event in pygame.event.get():
       ...
"
Metaclass which decorate all the class methods using two different decorator implementation,"import collections
import functools
import types


def decorateAll(decorator):
    class MetaClassDecorator(type):

        def __new__(meta, classname, supers, classdict):
            for name, elem in classdict.items():
                if type(elem) is types.FunctionType:
                    classdict[name] = decorator(classdict[name])
            return type.__new__(meta, classname, supers, classdict)
    return MetaClassDecorator


class Counter(object):
    def __init__(self, fun):
        self.fun = fun
        self.cache = {None: self}
        self.count = collections.defaultdict(int)

    def __get__(self, obj, cls=None):
        if obj is None:
            return self

        try:
            return self.cache[obj]
        except KeyError:
            pass

        print('Binding {} and {}'.format(self.fun, obj))
        cex = self.cache[obj] = functools.partial(self.__call__, obj)
        return cex

    def __call__(self, obj, *args, **kwargs):
        print(""args:"", obj, *args, **kwargs)
        self.count[obj] += 1
        print(""{0} Exec {1} times"".format(self.fun.__name__, self.count[obj]))
        return self.fun(obj, *args, **kwargs)


class Account(object, metaclass=decorateAll(Counter)):

    def __init__(self, initial_amount):
        self.amount = initial_amount

    def withdraw(self, towithdraw):
        self.amount -= towithdraw

    def deposit(self, todeposit):
        self.amount += todeposit

    def balance(self):
        return self.amount


a = Account(33.5)

print(a.balance())
"
Dictionary key in python are RegExp,"li=[
(u'number ', u'int (10)', u'NO ', u'PRI', None, u'auto_increment '),
(u'number ', u'int (22)', u'NO ', u'PRI', None, u'auto_increment '),
(u'number ', u'int (11)', u'NO ', u'PRI', None, u'auto_increment '),
]

>>> [e for e in li if 1<int(re.search(r'\((\d+)\)$', str(e[1])).group(1))<11]
[(u'number ', u'int (10)', u'NO ', u'PRI', None, u'auto_increment ')]
"
Creating a dummy index list from a list of repeating inegers,"from itertools import groupby, cycle

output = [res for k, g in groupby(l) for orig, res in zip(g, cycle([k] + [-1] * (k - 1)))]
"
Couple of matplotlib newbie doubts,"#!/usr/bin/env python
import matplotlib
import matplotlib.pyplot as plt

matplotlib.use('Agg')   # This can also be set in ~/.matplotlib/matplotlibrc
for i in range(0,3):
    print 'Plotting',i
    # Reading a single column data file
    plt.plotfile('gen%s'%i,linestyle='none', marker='*')

    plt.xlabel('Population')
    plt.ylabel('Function Value')
    plt.title('Generation%s'%i)
    plt.axis([0,500,0,180])
    # This (old-style string formatting) also works, especial for Python versions <2.6:
    # filename='plot%03d.png'%i
    filename='plot{0:03d}.png'.format(i)
    print(filename)
    plt.savefig(filename)
    # plt.clf()  # clear current figure
"
Sort a Python dictionary by value,"sorted(list(d.items()), key=(lambda x: x[1]))"
Calculating the Letter Frequency in Python,">>> c = 's'
>>> results = [k for k,v in enumerate(s) if v == c]
>>> results_sum = sum(results)
>>> (results_sum / len(results)) / float(len(s))
0.5804132973944295
"
Python: Split string with multiple delimiters,">>> a='Beautiful, is; better*than\nugly'
>>> import re
>>> re.split('; |, |\*|\n',a)
['Beautiful', 'is', 'better', 'than', 'ugly']
"
Python beautiful soup issue,"country_meta = soup.find('meta', attrs={'property': 'og:country-name', 'content': True})
if country_meta:
    country = country_meta['content']
"
How do I remove extra parsing characters in a list?,">>> animals = [('dog', 'cat'), ('mouse', 'bird')]
>>> %timeit list(chain.from_iterable(animals))
100000 loops, best of 3: 2.31 us per loop
>>> %timeit [anim for item in animals for anim in item]
1000000 loops, best of 3: 1.13 us per loop

>>> animals = [('dog', 'cat'), ('mouse', 'bird')]*100
>>> %timeit list(chain.from_iterable(animals))
10000 loops, best of 3: 31.5 us per loop
>>> %timeit [anim for item in animals for anim in item]
10000 loops, best of 3: 73.7 us per loop

>>> animals = [('dog', 'cat'), ('mouse', 'bird')]*1000
>>> %timeit list(chain.from_iterable(animals))
1000 loops, best of 3: 296 us per loop
>>> %timeit [anim for item in animals for anim in item]
1000 loops, best of 3: 733 us per loop
"
How to remove words containing a substring in a python string?,">>> import re
>>> pattern = re.compile('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')
>>> s = 'Mi grupo favorito de CRIMINALISTICA. Ultima clase de cuatrimestre http://t.co/Ad2oWDNd4u'
>>> pattern.sub('', s)
'Mi grupo favorito de CRIMINALISTICA. Ultima clase de cuatrimestre '
"
Python Changing Array Values in While Loop,"i = 0 
while i <= length:
    u[:,i] = u[:,i] - u_val
    y[:,i] = y[:,i] - y_val
    i = i + 1
"
Check if value is between pair of values in a tuple?,"low, high = t
if low <= val <= high:
"
2D Array - Select range of columns,"B = A[m:n,:]
"
Trouble printing all items from a list in python,"required_part = SoupStrainer('table', class_=""results"")
for page in xrange(1, num_pages + 1):
    url = base_url.format(page=page, zipcode=zipcode)
    soup = BeautifulSoup(urllib2.urlopen(url), parse_only=required_part)

    print ""Page Number: %s"" % page
    for h2 in soup.find_all('h2'):
        print h2.text
"
Find first and last list within a list with a matching property,"def aggregate_flights(flights):
    last_id,start,end = None,None,None
    for row in flights:
        if row[-2] != last_id and last_id is not None:
            yield (last_id,(start,end))
            start,end = None,None
        if start is None:
            start = row[3]
        last_id = row[-2]
        end = row[4]
    yield (last_id,(start,end))
"
How to add more than 2 dictionaries together in python,"subjects = [""Accounts"", ""History"", ""Geography"", ""Chemistry"", ""Computer Science"", ""Maths"", ""Add maths"", ""English""]


def get_marks(i):
    name = input(""Enter the name of student %d: "" % i)  # (the name is only used for the subject prompts below)
    if not name:  # If the user doesn't enter a name, don't query for subjects either.
        return  # (implicitly returns None)
    marks = {}
    for subject in subjects:  # Loop over the subjects -- this is OP's code :)
        marks[subject] = float(input(""Enter "" + name + ""'s "" + subject + "" marks: ""))
    return marks


def get_student_marks():
    student_marks = []  # Gather the students' marks (as dicts) into this list.
    for i in range(10):  # Query for 10 students at most.
        marks = get_marks(i + 1)  # Get an individual student's marks as a dict.
        if not marks:  # If no name was entered (and None was thus returned)...
            break  # ... assume the user won't want to enter any more students and break out of the loop.
        student_marks.append(marks)  # Otherwise, save the marks...
    return student_marks  # and when the loop finishes, one way or another, return the list of dicts.


def print_total_marks(student_marks):
    total_marks = dict.fromkeys(subjects, 0)
    for marks in student_marks:  # Loop over each student...
        for subject, mark in marks.items():  # And then each pair of subject/mark...
            # (dict.fromkeys assures us that there's a key for every subject; no need to check at this point.)
            total_marks[subject] += mark  # ... and add that to the total.
    print (""Total marks for whole class are"", total_marks)


student_marks = get_student_marks()
print_total_marks(student_marks)
"
Put this request with Python httplib,"import requests
requests.put('http://www.somedomain.com:50070/webhdfs/v1/levi/4?op=CREATE')
"
"Python : Split a list of length n into a table or further lists, by type, retaining order","def type_split(sources):
    types = sorted(set(type(i) for i in sources))
    return [[item if type(item) == itype else None for item in sources] 
            for itype in types]  
"
Python XML Parsing: Returning a specific Attribute Tag Value,">>> import xml.etree.ElementTree as ET
>>> s=""""""<root>      <key name=""modifiable"">1</key>
...       <key name=""sharing"">global</key>
...       <key name=""app"">search</key>
...       <key name=""can_write"">1</key>
...       <key name=""ttl"">600</key></root>""""""
>>> root = ET.fromstring(s)
>>> root.find('.//key[@name=""app""]').text
'search'
"
Adding items to a list if it's not a function,"def dict_into_list(self):
    result = {}
    for each_key, each_item in self.__dict__.items():
        print(type(each_key), type(each_item))
        if inspect.isfunction(each_item) == False:
            result[each_key] = each_item
    return result
"
Python - Fastest way to generate list of random colours with fixed alpha,"num = 332000000
colorarray = np.empty((2 * num, 4), dtype=float)
colorarray[::2, :3] = np.random.random_sample((num, 3))
colorarray[::2, -1] = 0.6
colorarray[1::2] = colorarray[::2]
"
How to check if all elements of a list matches a condition?,">>> [x for x in items if x[2] == 0]
[[1, 2, 0], [1, 2, 0]]
"
How to split an UTF-8 string by an escape sequence provided as command line argument in Python 3?," arg = bytes(sys.argv[1], ""utf-8"").decode(""unicode_escape"")

print(arg)

l1 = u""12345\tktktktk"".split(arg)
print(l1)

l2 = u""633\tbgt"".split(arg)
print(l2)
"
split python source code into multiple files?,"# Module: f2.py
# Example 1: functions to store and retrieve global variables
gMyVar = 0
def print_world():
    print ""World!""
def get_gMyVar():
    return gMyVar # no need for global statement 
def inc_gMyVar():
    global gMyVar
    gMyVar += 1  

# Example 2: class methods to store and retrieve properties
class useMyVars(object):
    def __init__(self, myVar):
        self.myVar = myVar
    def getMyVar(self):
        return self.myVar
    def setMyVar(self, myVar):
        self.myVar = myVar
    def print_helloWorld(self):
        print ""Hello, World!""
"
Django template in nested dictionary,"{% for key, value in result_dict.items %}
    {{ value }}
{% endfor %}
"
Removing a comma after list ends,"import csv

reader = csv.reader(open('C:\Python33\excel.csv', newline=''), delimiter=' ', quotechar='|')
text_file = open(""output.txt"", ""w"")

lines = []
for row in reader:
    lines.append(', '.join(row))

output = "", "".join(lines)
print(output)
"
How to eliminate white space after backslash (Python 3.4),"print(""You entered %.1f\"" which converts into ""
      ""%.2fm."" % (imp_height_flt, imp_height_converted))
"
python create a set / dict / list and the sum of its values from a single list comprehension,"d, s = {}, 0
for i in l:
    d[i] = len(i)
    s += len(i)
"
Invert alternation regex,"a = ""abc def,ghi remove - this keep-that foo + bar +keep!""
import re
print re.sub(r'[^\w\s+-]|(?<!\w)-(?!\w)|\+(?!\w)', '', a)
#abc defghi remove  this keep-that foo  bar +keep
"
Convert JSON to CSV using Python (Idle),"rows = json.loads(x)
with open('test.csv', 'wb+') as f:
    dict_writer = csv.DictWriter(f, fieldnames=['longitude', 'latitude'])
    dict_writer.writeheader()
    dict_writer.writerows(rows)
"
Conditionally writing to different output files,"filenames_map = {""type1"":""option1"", ""type2"":""option2"", ""type3"":""option3""}
filename = filenames_map.get(type, ""default_option"")
with open(filname, ""w"") as targetFile:
    # do whatever needs to be done
"
Convert date to string with limited precision,">>> '123456'[:-3]
'123'
>>> '123456'[3:]
'456'
>>> '123456'[1:-1]
'2345'
>>> '123456'[::2]
'135'
>>> '123456'[::-1]
'654321'
>>> '123456'[-2::]
'56'
"
Number of occurrences in two strings using a for loop,"In [738]: def occurances(fst, sec):
     ...:     return sum(sec.count(c) for c in set(fst))

In [739]: occurances('fooled','hello world')
Out[739]: 7
"
How to Query model where name contains any word in python list?,"reduce(lambda x, y: x | y, [Q(name__contains=word) for word in list]))
"
Pull a line from a file and then delete it,"# Read the file as a list of strings, each string is a line.
with open('urls.txt', 'r') as f:
    lines = f.readlines()

# Delete the first line.
del lines[0]

# Write the rest back to the file.
with open('urls.txt' , 'w') as f:
    f.writelines(lines)
"
How to compare a list of lists/sets in python?,">>> [x for x in first_list if x not in secnd_list] + [x for x in secnd_list if x not in first_list]
[['Test3.doc', '3c3c3c', 3333],
 ['Test3.doc', '8p8p8p', 9999],
 ['Test4.doc', '4d4d4d', 4444]]
"
Access multiple elements of list knowing their index,">>> from operator import itemgetter 
>>> a = [-2, 1, 5, 3, 8, 5, 6]
>>> b = [1, 2, 5]
>>> print itemgetter(*b)(a)
(1, 5, 5)
"
Python Out of memory in range,"chunks = [
    {
        'offset': struct.unpack('<I', stream_file.read(int_length))[0],
        'length': struct.unpack('<I', stream_file.read(int_length))[0]
    }
    for _ in xrange(chunks_count)
]
"
Getting a slice of a numpy ndarray (for arbitary dimensions),"slicer = tuple(slice(i) for i in index)
"
New cumulative value col derived from existing col in a Pandas dataframe,"In [16]: df.sort([""L1"", ""L3""], ascending=[True, False])
Out[16]: 
  L1  L2   L3       new
0  X   1  200  0.800000
3  X   3  200  0.400000
1  X   2  100  1.000000
8  Y   3  100  0.900901
7  Y   2   10  0.990991
5  Y   1    1  1.000000
6  Z   3   20  0.444444
2  Z   1   15  0.777778
4  Z   2   10  1.000000
"
"Python/Regex - Match .#,#. in String","r'(?<=\.)\d+,\d+(?=\.)'
"
Bits list to integer in Python,">>> def intcaststr(bitlist):
...     return int("""".join(str(i) for i in bitlist), 2)
... 
>>> def intcastlookup(bitlist):
...     return int(''.join('01'[i] for i in bitlist), 2)
... 
>>> def shifting(bitlist):
...     out = 0
...     for bit in bitlist:
...         out = (out << 1) | bit
...     return out
... 
>>> timeit.timeit('convert([1,0,0,0,0,0,0,0])', 'from __main__ import intcaststr as convert', number=100000)
0.5659139156341553
>>> timeit.timeit('convert([1,0,0,0,0,0,0,0])', 'from __main__ import intcastlookup as convert', number=100000)
0.4642159938812256
>>> timeit.timeit('convert([1,0,0,0,0,0,0,0])', 'from __main__ import shifting as convert', number=100000)
0.1406559944152832
"
how to select an object from a list of objects by its attribute in python,"for person in a.pList:
    if person.num == 123:
        break
else:
    print ""Not found.""
dave = person
"
"scipy.sparse.hstack(([1], [2])) -> ""ValueError: blocks must be 2-D"". Why?","In [392]: np.asarray([(1,2)],dtype=object)
Out[392]: array([[1, 2]], dtype=object)

In [393]: np.asarray([(1,[2])],dtype=object)
Out[393]: array([[1, [2]]], dtype=object)

In [394]: np.asarray([([1],[2])],dtype=object)
Out[394]: 
array([[[1],
        [2]]], dtype=object)

In [395]: _.shape
Out[395]: (1, 2, 1)
"
How to write Default dictionary values to a file with new line?,"from collections import defaultdict

accounts = defaultdict(list)
accounts['11163722404385'] = [('a', 'list'),('another', 'list')]
accounts['1116372240485'] = [('one', 'more')]

with open(r'C:\temp\out.txt', 'a') as writer:
    for k,v in accounts.iteritems():
        csv = ';'.join([','.join(t) for t in v])
        writer.write(""%s,%s\n"" % (k, csv))
"
Convert an integer to a 2 byte Hex value in Python,">>> for i in range(8, 12):
...     print format(i, '#04x')
... 
0x08
0x09
0x0a
0x0b
"
python ete2 delete node from tree,"def remove_nodes(treeFile,idFile):

    t= Tree(treeFile,format=8)
    print t
    removed=[]
    for node in t:
        # print node.name
        if not find_id(idFile,'^'+node.name+'\s'):
            node.delete(prevent_nondicotomic=False)
            removed.append(node)

    print [n.name for n in removed]
    print t
    t.write(format=1, outfile=""newtree.nw"")
"
enumerate is iterating of letters of strings in a list instead of elements,">>> animal = ['cat', 'dog', 'fish' , 'monkey']
>>> name = ['george', 'steve', 'john', 'james']
>>> zip(name, animal)
[('george', 'cat'), ('steve', 'dog'), ('john', 'fish'), ('james', 'monkey')]
"
Validate a filename in python,"if not os.path.normpath('(path-to-wiki)/foo/bar.txt').startswith('(path-to-wiki)')  
   or re.search(r'[^A-Za-z0-9_\-\\]',userpath):
  ... Do what ever you want with an invalid path
"
Prune nodes not in networkx simple path?,"import networkx as nx
import itertools

G = nx.complete_graph(10) # or DiGraph, MultiGraph, MultiDiGraph, etc
# Concatenate all the paths and keep unique nodes (in one line)
all_path_nodes = set(itertools.chain(*list(nx.all_simple_paths(G, source=0, target=3))))
# Extract the induced subgraph from a given list of nodes
H = G.subgraph(all_path_nodes)
print(nx.info(H))
"
Python.h header file missing on Mac OS X 10.6,"#include <Python/Python.h>
"
How can I find script's directory with Python?,print(os.path.dirname(os.path.realpath(__file__)))
How to change dictionary from one format into another?,"unique_key_dict = {}
for date in file_dict:
  for key in file_dict[date]:
    if key not in unique_key_dict: unique_key_dict[key] = {}
    if date not in unique_key_dict[key]: unique_key_dict[key][date] = []
    unique_key_dict[key][date].append(file_dict[date][key])
"
How to detect a sign change for elements in a numpy array,"signchange[0] = 0
"
PyQt Collection of QLineEdit objects,"for widget in qApp.allWidgets():
    if isinstance(widget, QtGui.QLineEdit):
        widget.clear()
"
Calculating element with most occurrences in list,"from collections import *

d = {
 0: ['4', '4', '5', '5', '1'], 
 1: [1,1,1,1,1,2,2,2,2,2,3,3,4], 
 2: ['3', '4', '1', '5', '5']
}

for i,j in d.items():

    c  = Counter(j)

    longest = c.most_common(1)[0][1]

    if longest > 1:

        result = []

        for x in c:

            if c[x] == longest:
                result.append(x)

        d[i] = result

print d

{0: ['5', '4'], 1: [1, 2], 2: ['5']}
"
Matplotlib Legend for Scatter with custom colours,"print type(ax.scatter(...))
"
"Python Dictionary, make range associated with its values and return them","from operator import itemgetter
d = {'A': 0.35, 'C': 0.2, 'T': 0.3, 'G': 0.15}

def W(d):
    ran = random.uniform(0, 1)
    tot = 0
    # sort from lowest value to highest
    for k, v in sorted(d.items(),key=itemgetter(1)):
        if tot <= ran < v + tot:
            return k
        tot += v
"
Python How to list all methods/classes that have been imported into a class,"code = """"""
from module1 import method1
from module2 import method2

class foo(object):
   def say_foo(self):
      method1()
   def talk(self):
      method2()
""""""

import ast, _ast

t = ast.parse(code)
for node in ast.walk(t):
    if isinstance(node, ast.ClassDef) and node.name == ""foo"":
        klass = node
        break

for node in ast.walk(klass):
    if isinstance(node, _ast.Call):
        print node.func.id
"
How do I add StandardPixmap to a layout?,"from PyQt4 import QtGui

if __name__ == '__main__':
    app = QtGui.QApplication([])
    label = QtGui.QLabel()
    label.setPixmap(app.style().standardPixmap(QtGui.QStyle.SP_MessageBoxWarning))
    label.show()
    app.exec_()
"
XLRD doesn't seem to be finding my variable inside the file,"var1 = str(sheet.cell_value(row,0)).strip()
"
Cython: unsigned int indices for numpy arrays gives different result,"#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) \
    (type)((char*)buf + i0 * s0 + i1 * s1)

  /* ""_tmp.pyx"":9
 *     p_two = int(max_loc[0])
 *     q_two = int(max_loc[1])
 *     r_one = response[q_one, p_one]             # <<<<<<<<<<<<<<
 *     r_two = response[q_two, p_two]
 */
  __pyx_t_3 = __pyx_v_q_one;
  __pyx_t_4 = __pyx_v_p_one;
  __pyx_t_5 = -1;

  if (unlikely(__pyx_t_3 >= (size_t)__pyx_bshape_0_response))
    __pyx_t_5 = 0;
  if (unlikely(__pyx_t_4 >= (size_t)__pyx_bshape_1_response))
    __pyx_t_5 = 1;

  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    {
      __pyx_filename = __pyx_f[0];
      __pyx_lineno = 9;
      __pyx_clineno = __LINE__;
      goto __pyx_L1_error;
    }
  }

  __pyx_t_1 = PyFloat_FromDouble((
    *__Pyx_BufPtrStrided2d(
      __pyx_t_5numpy_float32_t *,
      __pyx_bstruct_response.buf,
      __pyx_t_3, __pyx_bstride_0_response,
      __pyx_t_4, __pyx_bstride_1_response)));

  if (unlikely(!__pyx_t_1)) {
    __pyx_filename = __pyx_f[0];
    __pyx_lineno = 9;
    __pyx_clineno = __LINE__;
    goto __pyx_L1_error;
  }

  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r_one = __pyx_t_1;
  __pyx_t_1 = 0;

  /* ""_tmp.pyx"":10
 *     q_two = int(max_loc[1])
 *     r_one = response[q_one, p_one]
 *     r_two = response[q_two, p_two]             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = PyTuple_New(2);

  if (unlikely(!__pyx_t_1)) {
    __pyx_filename = __pyx_f[0];
    __pyx_lineno = 10;
    __pyx_clineno = __LINE__;
    goto __pyx_L1_error;
  }

  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_q_two);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_q_two);
  __Pyx_GIVEREF(__pyx_v_q_two);
  __Pyx_INCREF(__pyx_v_p_two);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_p_two);
  __Pyx_GIVEREF(__pyx_v_p_two);

  __pyx_t_2 = PyObject_GetItem(
    ((PyObject *)__pyx_v_response),
    ((PyObject *)__pyx_t_1));

  if (!__pyx_t_2) {
    __pyx_filename = __pyx_f[0];
    __pyx_lineno = 10;
    __pyx_clineno = __LINE__;
    goto __pyx_L1_error;
  }

  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_v_r_two = __pyx_t_2;
  __pyx_t_2 = 0;
"
How to use str.replace() with a dictionary of replacements? Python,"replacements = {ord(k): ord(v) for k, v in replacements.iteritems()}
sentence = sentence.translate(replacements)
"
Printing with indentation in python,"user = ""Username""
prefix = user + "":\t\t""
expanded_indent = textwrap.fill(prefix+'$', replace_whitespace=False)[:-1]
subsequent_indent = ' ' * len(expanded_indent)
wrapper = textwrap.TextWrapper(initial_indent=prefix,
                               subsequent_indent=subsequent_indent)
message = ""LEFTLEFTLEFTLEFTLEFTLEFTLEFT RIGHTRIGHTRIGHT "" * 3
print wrapper.fill(message)
"
pythonic way to associate list elements with their indices,"d = dict([(y,x) for x,y in enumerate(t)])
"
"How to open three files in loop, in python"," inputFiles = ['Members.txt', 'Members1.txt', 'Members2.txt']
 for membersFile in inputFiles:
     myFile = open(membersFile, 'r')
     # And rest of code goes in here.
     myFile.close()
"
Finding common rows (intersection) in two Pandas dataframes,"s1 = pd.merge(df1, df2, how='inner', on=['user_id'])"
Python / Regex: exclude everything except one thing,"if '-' == something:
   print 'hurray!'
"
Accessing file path in the os,"PATH = os.path.abspath(os.path.dirname(sys.argv[0]))
"
Textrank: complementing pagerank for sentence extraction using networkx,"import networkx as nx

# Directed Network
D = nx.DiGraph()
D.add_weighted_edges_from([('A', 'B', 0.5), ('A', 'C', 1)])

# Convert to undirected
G = D.to_undirected()

# Default max number of iterations failed to converge for me
print nx.pagerank(G, max_iter=200)

# Outputs:
{'A': 0.48648648872844047, 'C': 0.32567567418103965, 'B': 0.18783783709051982}
"
Obfuscated mandlebrot function - can someone deobfuscate it?,"import struct
i = 255
Y = lambda V, B, c: c and Y(V*V + B, B, c-1) if(abs(V) < 6) else (2 + c - 4 * abs(V)**-0.4)/i
v = 7200
x = 4800
C = range(v*x)
M = '<QIIHHHH'
color = lambda T: (T * 80 + T**9 * i - 950 * T**99, T*70 - 880* T**18 + 701 * T**9, T * i**(1-T**45*2))

f = open('M.bmp','wb')
for X in f.write('BM' + struct.pack(M, v*x*3+26, 26, 12, v, x, 1, 24)) or C:
    f.write(
        struct.pack('BBB',
            *color(sum([Y(0, (A%3/3. + X%v + (X/v + A/3/3. - x/2)/1j) * 2.5/x - 2.7, i)**2 for A in C[:9]]) / 9))
    )
"
Infinite loop while iterating dictionary Python,"def update_some(convert_dict, in_dict):
    in_dict_update = in_dict.copy()
    skipped_values = {}
    for k,v in convert_dict.items():
        try:
            return_value = eval(v, None, in_dict_update)
        except NameError:
            skipped_values[k] = v
        else:
            in_dict_update[k] = return_value
    if skipped_values:
        in_dict_update = update_some(skipped_values, in_dict_update)
    return in_dict_update
"
inverse of zip,"zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])"
Python - Convert a key-value string to a dictionary,"d = dict(entry.split('=') for entry in inputstring.split(','))
"
What is the fastest method for checking for duplicates in python?,"def set_way():
    my_set = set()
    my_set_add = my_set.add   # remember the method
    for ele in x:
        if ele not in my_set:
            my_set_add(ele)   # call the method directly
"
check if dataframe is of boolean type pandas,"In [7]:

type(df)
Out[7]:
pandas.core.frame.DataFrame
"
Get dictionary key by value if value is list,">>> mydict = {'george':[1,2,3],'amber':[18,19]}
>>> [i for i in mydict if 19 in mydict[i]]
['amber']
"
Copy numpy array from one (2-D) to another (3-D),"M,N = np.ogrid[:m,:n]
"
python list within list - why is the sublist repeated,"def create_inner_list(string):
    prev = 0
    mainlist = []
    sublist = []
    for each in string:
        if int(each) <= prev:
            prev = int(each)
            sublist.append(int(each))
        else:
            if sublist:
                mainlist.append(sublist)
            sublist = []
            mainlist.append(int(each))
            prev = int(each)
    if sublist:
        mainlist.append(sublist)
    return mainlist
"
Align matplotlib scatter marker left and or right,"ax.scatter(d1, 1, 200, marker=align_marker('>', halign='left'),
           clip_on=False, color='k', transform=ax.get_xaxis_transform())
ax.scatter(d2, 1, 200, marker=align_marker('<', halign='right'),
           clip_on=False, color='k', transform=ax.get_xaxis_transform())
"
Iterating over date in python,"from dateutil.relativedelta import relativedelta
start = start + relativedelta(months = +1)
"
Python Open Every File in a Folder,"path = '/some/path/to/file'

for filename in os.listdir(path):
    # do your stuff

for filename in glob.glob(os.path.join(path, '*.txt')):
    # do your stuff
"
Implementing Multicore Threading on this algorithm,"import multiprocessing, itertools

def stringForInt(args):
    num, charset, length = args ## hack hack hack
    setlen = len(charset)
    s = []
    s.append(charset[num % setlen])
    for n in xrange(1, length):
        num //= setlen
        s.append(charset[num % setlen])
    return ''.join(s)

def bruteforce(charset, length, mapper, raw=False):
    if not raw:
        charset = sorted(set(charset))
    return mapper(stringForInt, ((n,charset,length) for n in xrange(len(charset)**length)))

if __name__ == '__main__':
    import time, sys
    if len(sys.argv) == 1 or sys.argv[1] == 'map':
        mapper = map
    else:
        p = multiprocessing.Pool()
        pfunc = {'pmap':p.map,
                 'imap':p.imap,
                 'imapu':p.imap_unordered}[sys.argv[1]]
        mapper = lambda f, i: pfunc(f, i, chunksize=5)
    o = bruteforce('abcdefghijk',6,mapper)
    if not isinstance(o, list):
        list(o)
"
"Inheriting from ""str"" class","class MyString(str):
    def __getitem__(self, i):
        return type(self)(super(MyString, self).__getitem__(i))
"
Python: determine length of sequence of equal items in list,"l = [0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,2,2,2]
answer = []
for key, iter in itertools.groupby(l):
    answer.append((key, len(list(iter))))

# answer is [(0, 6), (1, 6), (0, 4), (2, 3)]
"
What are the limitations of callback functions associated with Tkinter traces?,"from Tkinter import *

class App(object):
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        self.optionvalue = IntVar(master)
        self.optionvalue.set(2)
        self.optionvalue.trace(""w"", self.callbackfunc)
        self.optionmenu = OptionMenu(master, self.optionvalue, 1, 2, 3, 4)
        self.optionmenu.pack()
        self.state = []

    def callbackfunc(self, *args):
        self.state.append(args)
        print self.state
        print self.optionvalue.get()


root = Tk()
app = App(root)
root.mainloop()
"
Generating random numbers with weighted probabilities in python,">>> np.random.choice(np.arange(len(b)), 5, p=b/len(a), replace=False)
array([5, 9, 4, 3, 8])
>>> np.random.choice(np.arange(len(b)), 5, p=b/len(a), replace=False)
array([7, 4, 6, 9, 1])
>>> np.random.choice(np.arange(len(b)), 5, p=b/len(a), replace=False)
array([3, 7, 4, 9, 6])
"
Using regex's to relabel and remove redundent items in a string,"for strg in string.splitlines():
if strg in ['@r=v4 ""v4""','@r=v2 ""v2""','@r=v3 ""v3""'] : # any string if there aren't huge amount of cases
    i += 1
    print '@r=v{} ""v{}""'.format(i,i)
else:
    print strg
"
Checking to see if array elements are equal,"a0 = a[:,0]
c = np.true_divide(a[:,1],b[np.searchsorted(a0,b[:,0],sorter=a0.argsort()),1])
"
Find list of keywords in string,">>> strs = ""['foo','abarc']""
>>> 'bar' in strs            #substring search
True
>>> lis = ['foo','abarc']    #item search
>>> 'bar' in lis
False
"
Python dict question. How to group similar strings?,"import collections

data = [
    {'firstname': 'John', 'lastname': 'Smith'}, 
    {'firstname': 'Samantha', 'lastname': 'Smith'}, 
    {'firstname': 'shawn', 'lastname': 'Spencer'},
]

new_data = collections.defaultdict(list)

for d in data:
    new_data[d['lastname']].append(d['firstname'])

print new_data
"
Pyschools Topic 3 Q 11 - DNA parity check,"def pairwiseScore(seqA, seqB): 
   # final score to keep track of the matches in DNA
   score = 0 
   # String helper this will tell us if a match happened previously
   #  and it will be used to show the relationships between the seqA and seqB
   prevMatch = """"   
   # https://docs.python.org/2/library/functions.html#zip
   # zip will transpose the two lists (char lists) into tuples based on their indices
   #  the we can use A,B to determine likeness of the two strings.
   for (A,B) in zip (seqA,seqB): # sync run through the lists (char lists) 
      if  A == B :              
         # if the string prevMatch has at least one character 
         #  and the last one is a '|' +3 otherwise +1
         score += 3 if len(prevMatch) > 0 and prevMatch[-1] == '|' else 1         
      else :         
         #strings don't match -1
         score -= 1
      # add the bar for the equal chars in strings. to output and 
      #  test for previous Match '| || |' etc... 
      prevMatch += '|' if ( A == B ) else ' '

   # basically asking for that string seqA, matches, seqB, score : #
   #  return a string 
   # GATAT    // seqA
   # | ||     // prevMatch
   # GCTAC    // seqB
   # Score: 3 // score
   return ""{}\n{}\n{}\nScore: {}"".format(seqA,prevMatch,seqB, score)
"
exit from ipython,">>> import sys
>>> class Quitter(object):
...     def __repr__(self):
...         sys.exit()
... 
>>> exit = Quitter()
"
Python - Identify a negative number in a list,"count = 0
for number in numbers:
    if number < 0:
        count += 1
"
How to format list and dictionary comprehensions,"current_team = dict((k,v) for k,v in list(team.items()) for player in v[‘player’] if player['year'] == 2013)
"
"Finding the most common pair, trio, etc. in a list of 20 random numbers, played 100 times","import functools
import itertools
import operator

lines = [[23, 52, 63, 76, 23, 45],
         [39, 52, 83, 33, 35, 23]]

# Set this variable before use!
permlength = 2

uniq = [set() for _ in range(len(lines))]
freq = [{} for _ in range(len(lines))]

for index, line in enumerate(lines):
    for j in line:
        freq[index][j] = freq[index].get(j, 0) + 1
        uniq[index].add(j)

counter = {}

print(""Total number of lines: {}"".format(len(lines)))

for i in range(len(lines)):
    print(""Line {}..."".format(i + 1))

    for j in itertools.combinations(uniq[i], permlength):

        freqp = [freq[i].get(j[x], 0) for x in range(permlength)]
        counter[j] = counter.get(j, 0) + functools.reduce(operator.mul, freqp)

sol = sorted(counter.items(), key=lambda value: value[1], reverse=True)

print(sol)
"
Python equivalent of Ruby's .select,"mapped_and_filtered = [x*2 for x in lst if x < 5]
# compare to:
mapped_and_filtered = map(lambda y: y*2, filter(lambda x: x < 5, lst))
"
Update row values where certain condition is met in pandas,"print df1
   stream  feat  another_feat
a       1     4             5
b       2     4             5
c       2     2             9
d       3     1             7

#filter columns all without stream
cols = [col for col in df1.columns if col != 'stream']
print cols
['feat', 'another_feat']

df1.loc[df1['stream'] == 2, cols ] = df1 / 2
print df1
   stream  feat  another_feat
a       1   4.0           5.0
b       2   2.0           2.5
c       2   1.0           4.5
d       3   1.0           7.0
"
Creating New Array when Second Array is > 0,">>> f=[0,1,2,3,4,5,6,7,8,9]
>>> sec=[0,0,0,0,0,0,1,1,1,1]
>>> 
>>> [i for i,j in zip(f,sec) if j]
[6, 7, 8, 9]
"
"In Python, how do you find the index of the first value greater than a threshold in a sorted list?","timeit bisect.bisect(l, 55)
# 375ns


timeit next((i for i,n in enumerate(l) if n > 55), len(l))
# 2.24us


timeit next((l.index(n) for n in l if n > 55), len(l))
# 1.93us
"
How to check if module attribute is a Class,"class Foo(object):
    pass

if isinstance(Foo, type):
    print(""Yep, it's new-style class"")
"
save output values in txt file in columns python,"with open ('new.txt','w') as f:
 for i in range(1,10):
     system = i,i+2*i
     f.write(str(system)+'\n')
"
Python : Alias in comprehensive list,">>> cols = [1,2] # list all the columns you want here
>>> with open('testfile') as f:
...     split_lines = [line.split(';') for line in f]
...     result = [[line[col] for col in cols] for line in split_lines]
... 
>>> result
[['darwin', 'simone'], ['de beauvoir', 'charles'], ['ramanujan', 'godfrey'], ['hardy', 'srinivasa'], ['germain', 'marguerite'], ['yourcenar', 'sophie'], ['harendt', 'michel'], ['foucault', 'hannah']]
"
How would I check if a number is odd in python without using modulo or a library?,"def isOdd(num):
    if type(num) not in [int, long]:
        return False
    if str(num)[-1] in ""13579"":
        return True
    return False
"
python getting a specific attribute from a list of objects,"dict_of_balls = {'Fred': Ball(10, 'red', 'Fred'), …}
# ...

the_ball = dict_of_balls[sys.argv[1]]
"
Is there an algorithm to find unique combinations of 2 lists? 5 lists?,"#!/usr/bin/env python
import itertools
a=[1,2]
b=['a','b']
c=[str(s)+str(t) for s,t in itertools.product(a,b)]
print(c)
['1a', '1b', '2a', '2b']

v=[1,'a']
w=[1,'b']
x=[1,'c']
y=[1,'d']
z=[1,'e']

r=[''.join([str(elt) for elt in p]) for p in itertools.product(v,w,x,y,z)]
print(r)
# ['11111', '1111e', '111d1', '111de', '11c11', '11c1e', '11cd1', '11cde', '1b111', '1b11e', '1b1d1', '1b1de', '1bc11', '1bc1e', '1bcd1', '1bcde', 'a1111', 'a111e', 'a11d1', 'a11de', 'a1c11', 'a1c1e', 'a1cd1', 'a1cde', 'ab111', 'ab11e', 'ab1d1', 'ab1de', 'abc11', 'abc1e', 'abcd1', 'abcde']
"
Does dictionary contain key containing multiple partial strings?,"if any('L_' in key for key in dict) and any('R_' in key for key in dict):
    print 'has both'
"
Creating a list from a Scipy matrix,"x = scipy.matrix([1, 2, 3]).transpose()"
How to iterate over Unicode characters in Python 3?,">>> s = ""abc\u20ac\U00010302\U0010fffd""
>>> len(s)
6
>>> for c in s:
...     print('U+{:04X}'.format(ord(c)))
...     
U+0061
U+0062
U+0063
U+20AC
U+10302
U+10FFFD
"
Why does my code not find a certain string that is present in an array?,"verbs = [""get"",
         ""put"",
         ""drop"",
         ""use"",
         ""enter"",
         ""leave"",
         ""walk"",
         ""search"",
         ""attack"",
         ""defend""]

nouns = [""journal"",
         ""magnifier"",
         ""glasses"",
         ""knife"",
         ""kite"",
         ""table"",
         ""chair"",
         ""key""]

inventory = """"

user_input = input(""What would you like to do?\n"")

#checking if there are a set of two instructions
action, obj = user_input.split()

if(action not in verbs):
    print(""I did not understand the verb entered."")
    print(""Please use:"", "", "".join(verbs))
else:
    print(""Recognized verb entered."")

    if(obj not in nouns):
        print(""I did not understand the noun entered."")
        print(""Please use:"", "", "".join(nouns))
    else:
        print(""Recognized noun entered."")
"
Python Filter List Items Relative to Each Other,"from itertools import groupby
from operator import itemgetter

def fruitfilter(fruits):
    for fruit, group in groupby(fruits, key=itemgetter(0)):
        yield max(group, key=itemgetter(2))

fruits = list(fruitfilter(fruits))
"
Python: List all the file names in a directory and its subdirectories and then print the results in a txt file,"import os

with open(""output.txt"", ""w"") as a:
    for path, subdirs, files in os.walk(r'C:\Users\user\Desktop\Test_Py'):
       for filename in files:
         f = os.path.join(path, filename)
         a.write(str(f) + os.linesep) 
"
I have a table of rows with checkboxes in columns. How do i select a particular checkbox,"String xpath = ""//span[@title = 'TITLE']/ancestor::tr[1]//input[@type = 'checkbox']""
"
"flask wtforms, what input is pressed","if request.form.get('botid'):
    # it has a botid field, it must be a deletion request
    form = BotFormDelete()
    form.validate()
    delete_bot(form.botid.data)
else:
    form = BotFormAdd()
    ....
"
Python deep zip,"import collections

def myzip(*args):
    if all(isinstance(arg, collections.Iterable) for arg in args):
        return [myzip(*vals) for vals in zip(*args)]
    return args
"
Referencing to elements of tuples when used as keys in a python dictionary,">>> dic = {('a','b'): 0, ('b','c'): 1, ('d','e'): 2}
>>> lines =[dic[k] for k in dic if k[1]=='c']  #returns all matching items
>>> lines
[1]
"
Elegant way to convert list to hex string,"hex(sum(b << i for i, b in enumerate(reversed(walls))))"
How to efficiently compute orientation of 3D normals in large pointclouds,"t0 = t.time()
esfera.add_orientation()
t1 = t.time()
dif = t1-t0
dif
Out[18]: 0.34514379501342773

t0 = t.time()
esfera.add_orientation2()
t1 = t.time()
dif = t1-t0
dif
Out[20]: 0.291456937789917
"
Python - Appending list to list during while loop - Result not as expected,"var_list.append(init_list[:])
"
How to build a utf8 string in python,">>> from __future__ import unicode_literals
>>> 'this is a {} {}'.format('привет', 'мир')
u'this is a \u043f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440'
"
Line construction with double iteration,"# This takes your data and creates a new array that is (T, V-1, 2, 3)
lstLines = np.concatenate((Spar_Res[:, :-1, None, :],
                           Spar_Res[:,  1:, None, :]), axis=2)
# This reshapes the array to be (T * (V - 1), 2, 3)
lstLines = lstLines.reshape(-1, 2, 3)
"
How to send unsent logs to python logging server when it comes back online?,"import os, os.path
import logging.handlers
import pickle

class BufferingSocketHandler(logging.handlers.SocketHandler):
    def __init__(self, host, port, buffer_file):
        super().__init__(host, port)
        self._buffer = FileBuffer(buffer_file)

    @property  # getter only
    def buffer(self):
        return self._buffer

    def _emit(self, record):
        try:
            s = self.makePickle(record)
            self.send(s)
            return (self.sock is not None)
        except Exception:
            self.handleError(record)
            return False

    def emit(self, record):
        self.send_buffer()
        success = self._emit(record)
        if not success:
            self.buffer.append(record)

    def send_buffer(self):
        try:
            self.acquire()
            success = True
            for item in self.buffer:
                success &= self._emit(item)
            if success:
                self.buffer.flush()
        finally:
            self.release()


class FileBuffer:
    def __init__(self, fname):
        self.fname = fname

    @property
    def size(self):
        return int(os.path.isfile(self.fname) \
                and os.path.getsize(self.fname))

    def append(self, data):
        with open(self.fname, 'ba') as f:
            pickle.dump(data, f)

    def __iter__(self):
        if self.size > 0:
            try:
                with open(self.fname, 'br') as f:
                    while True:
                        yield pickle.load(f)
            except EOFError:
                return

    def flush(self):
        if self.size > 0:
            os.remove(self.fname)
"
In Python how would I compare with multiple values using custom keys?,"...
    def __lt__(self, other):
        return (self.c, self.a, self.b) < (other.c, other.a, other.b)

...
list.sort()
"
"Python: Sorted representation of dict of lists, sorted by number of elements in list, after removing duplicates","print sorted(example_dict.items(),key=lambda x: len(set(x[1])))
"
Apply function row wise on pandas data frame on columns with numerical values,"import numpy as np
import pandas as pd

def cvscore(fclist):
    sd = np.std(fclist)
    mean = np.mean(fclist)
    cv = sd/mean
    return cv

df = pd.DataFrame({'AAA' : ['w','x','y','z'], 'BBB' : [10,20,30,40],
                   'CCC' : [100,50,-30,-50]})

df['Score'] = df.iloc[:, 1:].apply(cvscore, axis=1)
print(df)
"
How to retrieve subclasses as tuple of tuple,"tuple((x,) for x in BaseClass.__subclasses__())
"
Python Split path recursively,">>> import os
>>> s = ""E:/John/2012/practice/question11""
>>> os.path.split(s)
('E:/John/2012/practice', 'question11')
"
force MySQLdb to treat all MySQL data as strings,"from MySQLdb.constants import FIELD_TYPE
conv = { FIELD_TYPE.VARCHAR: str }
"
Python - Loadtext for specific number of lines,"a = 0
f = open('test.txt')
while a < 50:
    a = a + 1
    print f.readline(),
else:
    f.close()
"
What's Ruby's equivalent to Python's setDefault()?,"value = h[:some_key] ||= []
"
Using list comprehension to setup a list of unique dictionaries in Python,"import copy
stocklist = {'a': 0, 'b': 0, 'c': 0}
stockmap = [[copy.deepcopy(stocklist) for w in range(WIDTH)] for h in range(HEIGHT)]
"
python search for a set of words,"def find_any_gene(genes, text):
    """"""Returns True if any of the subsequences in genes
       is found within text.
    """"""
    for gene in genes:
        if gene in text:
           return True
    return False

mutations = 0
text = '...'

for sample in data_dict:
    for genes in data_dict[sample]
         if find_any_gene(genes, text):
             mutations += 1
"
Python adding values in Tuples,"In [34]: a=[(1,2),(4,5),(1,0)]

In [35]: b = [(3,2),(9,4),(2,2)]

In [36]: b.append(a.pop(a.index(max(a,key=sum))))

In [37]: b
Out[37]: [(3, 2), (9, 4), (2, 2), (4, 5)]

In [38]: a
Out[38]: [(1, 2), (1, 0)]
"
indexing one array and doing operation on another,">>> indx=[i for i,j in enumerate(a) if j==0]+[len(a)]
>>> indx
[0, 3, 4, 5, 9, 10, 13]
>>> zip(indx,indx[1:])
[(0, 3), (3, 4), (4, 5), (5, 9), (9, 10), (10, 13)]
"
remove values from a python dict,"for e in L.keys():
    dR[e] = {}
    for i in L[e].keys():
        dR[e][i] = {}
        for l, ivalue in L[e][i].iteritems():
            for j in Q[e].keys():
                #dR[e][i][j] = {} # What's up with this?  If you don't want an empty dict,
                                 # just don't create one.
                for q, jvalue in Q[e][j].iteritems():
                    deltaR = DeltaR(ivalue, jvalue) #this is a function that I create previously
                    if (0 < deltaR < 100):
                        dR[e][i][j] = deltaR
                if dR[e][i][j] in (nan, inf):
                    del dR[e][i][j]
"
"Python regex: Turn ""ThisFileName.txt"" into ""This File Name.txt""","import re
text = ""ThisFileName.txt""
print re.sub('([a-z])([A-Z])', r'\1 \2', text)
# Prints: ""This File Name.txt""
"
How do I implement SelectionSort and InsertionSort on a linked list in Python?,"def insertionSort(h):
    if h == None:
        return None
    #Make the first node the start of the sorted list.
    sortedList= h
    h=h.next
    sortedList.next= None
    while h != None:
        curr= h
        h=h.next
        if curr.data<sortedList.data:
            #Advance the nodes
            curr.next= sortedList
            sortedList= curr
        else: 
            #Search list for correct position of current.
            search= sortedList
            while search.next!= None and curr.data > search.next.data:
                search= search.next
            #current goes after search.
            curr.next= search.next
            search.next= curr
    return sortedList

def printList(d):
    s=''
    while d:
        s+=str(d.data)+""->""
        d=d.next
    print s[:-2]

l= unorderedList()
l.add(10)
l.add(12)
l.add(1)
l.add(4)
h= l.head
printList(h)

result= insertionSort(l.head)
d= result
printList(d)
"
Splitting a nested list into two lists,"my_list2, my_list1 = map(list, zip(*my_list))
"
Suggestions on matlab/python conversion,"import numpy as np
import matplotlib.pyplot as plt
#import math  #use np.* if you have it already imported

epsilon=0.0038*1.60217662*10**-19
k = 1.38*10**-23
T = np.arange(1,2000,0.1)
beta = 1.0/(k*T) #changed to 1.0 for safe measure; redundant

#partitionfunction
svec=np.arange(1,31,2)
p=np.zeros(max(svec)) #added pre-allocation
Zodd=np.zeros(len(T)) #added pre-allocation
for i in np.arange(len(T)): #changed to index Zodd from 0
    for s in svec:  #changed to avoid magic numbers
        p[s-1] = 3*(2*s+1)*np.exp(-(s**2+s)*epsilon*beta[i])   #changed to index p from 0; changed beta(i) to beta[i]; changed to np.exp
    Zodd[i] = sum(p)

#energy
ln_Zodd = np.log(Zodd)  #changed to np.log

Epara=np.zeros(len(T)-2)  #added pre-allocation
for i in np.arange(len(T) - 2): #changed to index Epara from 0
    Epara[i]=- (ln_Zodd[i + 1] - ln_Zodd[i]) / (beta[i + 1] - beta[i])   #changed bunch of () to []

#heat capacity
Cpara=np.zeros(len(T)-3)  #added pre-allocation
for i in np.arange(len(T) - 3): #changed to index Cpara from 0
    Cpara[i]=(Epara[i + 1] - Epara[i]) / (T[i + 1] - T[i])

#plot
x = k*T/epsilon
plt.plot(x[:6000],Cpara[:6000] / k,'r')  #fixed and simplified array indices
plt.axis([0, 7, 0, 1.5])
plt.ylabel('C_v/k')
plt.xlabel('kT/eps')
plt.show()
"
NumPy sort matrix rows by number of non-zero entries,">>> arr[(arr == 0).sum(axis=1).argsort()]
array([[1, 1, 1, 1, 1],
       [1, 0, 1, 1, 1],
       [0, 1, 0, 1, 1],
       [0, 0, 0, 0, 0]])
"
Windows subprocess with arguments,"import subprocess

    def myFunc():   
        p = subprocess.Popen(""C:\\Windows\\System32\\notepad.exe c:\\Users\\admin\\Desktop\\test.txt"", stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        out, err = p.communicate()
        print out
        print err

    myFunc()
"
numpy - Python - Selectively import parts of the .txt file,">>> import linecache
>>> linecache.getline('/tmp/lines.txt', 2)
'2013:10:15\n'
"
Bar charts with xaxis bins using Plotly or Matplotlib?,"import numpy as np
import pylab as P

mu, sigma = 200, 25
x = mu + sigma*P.randn(10000)

P.hist(x, 50)
P.show()
"
What is the fastest way to compare a text with a large number of regexp with python?,"regex.pyx
import re2
import string as pystring

cpdef list match_rules(char *pytext, dict compilled_rules):
    cdef int ok, scope, term
    cdef list response = []
    text = pystring.lower(pytext)
    for scope, rules in compilled_rules.iteritems():
        ok = 1
        for term,rule in rules.iteritems():
            if ok==1:
                if re2.search(rule, text):
                    ok=0
                    response.append([scope,term])
    return response
"
Update the value of a dictionary with elements in the lists Python,"total = float(um(Counter(seq_record.seq).values()))
for key,val in sorted_dict.items():
    newval = round(val/total, 4)
    sorted_dict[key] = newval
"
Spark RDD - Mapping with extra arguments,"json_data_rdd.flatMap(lambda j: processDataLine(j, arg1, arg2))
"
how to format date in ISO using python?,">>> import datetime
>>> str_date = '2/28/1987'
>>> datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()
'1987-02-28'
"
Get Day name from Weekday int,">>> import calendar
>>> list(calendar.day_name)
['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
"
Getting the keys out of a Multiindex?,"import pandas as pd

df = pd.DataFrame({'ID':[1,1,3],
                   'Dates':['2015-01-01','2015-01-01','2015-02-01'],
                   'C':[7,8,9]})
df['Dates'] = pd.to_datetime(df.Dates)
df.set_index(['ID', 'Dates'], inplace=True)
print (df)
               C
ID Dates        
1  2015-01-01  7
   2015-01-01  8
3  2015-02-01  9

print (df.index.get_level_values('ID').unique().tolist())
[1, 3]

#another a bit slowier solution
print (df.index.get_level_values('ID').drop_duplicates().tolist())
[1, 3]
"
Learning Python and using dictionaries,"dv = seqDic.keys()
"
Selecting Element followed by text with Selenium WebDriver,"driver.find_element_by_xpath(""//li/label/input[contains(..,'polishpottery')]"")"
String comparing in python,"import re
urls_parts=['week', 'weeklytop', 'week/day']
urls_parts = sorted(urls_parts, key=lambda x: len(x), reverse=True)
rexes = [re.compile(r'{part}\b'.format(part=part)) for part in urls_parts]

urls = ['www.mysite.com/weeklytop/2', 'www.mysite.com/week/day/2', 'www.mysite.com/week/4']
for url in urls:
    for i, rex in enumerate(rexes):
        if rex.search(url):
            print url
            print urls_parts[i]
            print
            break
"
Extracting specific data from CSV file,"dat %>%
    group_by(Student) %>%
    do(if (any((.$Course == 'C5') & (.$Grade == 'W'))) . else data.frame())
## Source: local data frame [10 x 3]
## Groups: Student
##    Student Course Grade
## 1        A     C1     A
## 2        A     C2     B
## 3        A     C3     A
## ...
"
How do I take 2 sorted lists and add them to another list while removing the elements,"c = []

aa, bb = a.pop(0), b.pop(0)
while True:
    if aa < bb:
        c.append(aa)
        try:
            aa = a.pop(0)
        except IndexError:
            c += b
            b = []
    else:
        c.append(bb)
        try:
            bb = b.pop(0)
        except IndexError:
            c += a
            a = []
"
"Django 1.1 FormWizard, Dynamically extend form","from django.contrib.formtools.wizard import FormWizard
from django import forms

class SubjectForm(forms.Form):
    subjects = forms.MultipleChoiceField(choices = (('language', 'language'), 
    													('sport','sport')))

class RelatedQForm(forms.Form):
    """"""Overload the __init__ operator to take a list of forms as the first input and generate the 
    fields that way.""""""
    def __init__(self, interested_subjects, *args, **kwargs):
    	super(RelatedQForm, self).__init__(*args, **kwargs)
    	for sub in interested_subjects:
    		self.field[sub] = forms.CharField(label = ""What do you think about %s"" % subject)

class SubjectWizard(FormWizard):
    def done(self, request, form_list):
    	process_form_list(form_list)

    def process_step(self, request, form, step):
    	if step == 1:
    		chosen_subs = form.cleaned_data['subjects']
    		self.form_list[1] = RelatedQForm(chosen_subs)
"
Is it possible get a dictionary of passed in parameters similar to kwargs(python)?,"def pickdict(d,*names):
    ""picks some values from a dict""
    return {n:d[n] for n in names}

class Obj(object):
    ""example inserting some named args as instance attributes""
    def __init__(self, arg1, arg2=4):
        self.__dict__.update(pickdict(locals(),'arg1','arg2'))
"
Python logging module - time since last log,"import datetime
import logging

import logaugment

logger = logging.getLogger()
handler = logging.StreamHandler()
formatter = logging.Formatter(""%(time_since_last)s: %(message)s"")
handler.setFormatter(formatter)
logger.addHandler(handler)
"
Perform check on lists,">>> main_voltages = [5.5, 15.7, 28.5]
>>> limit_list = [[5,10], [15,20], [25,30]]
>>> result = [b[0] <= a <= b[1] for (a, b) in zip(main_voltages, limit_list)]
>>> result
[True, True, True]
"
python keep-alive connection and download image,"import requests
r = requests.get(url='http://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg',stream=True)
print r.headers['last-modified']
"
How to find overlapping matches with a regexp?,"re.findall('(?=(\\w\\w))', 'hello')"
Delete rows without a related record using SQLAlchemy,"from sqlalchemy.sql import not_

# This fetches rows in python to determine which ones were removed.
Session.query(Table1).filter(not_(Table1.table2s.any())).delete(
    synchronize_session='fetch')

# If you will not be referencing more Table1 objects in this session then you
# can just ignore syncing the session.
Session.query(Table1).filter(not_(Table1.table2s.any())).delete(
    synchronize_session=False)
"
comparing two different lists,"E3 = []
p2 = 0
for e1 in E1:
    while p2 < len(E2) - 1 and abs(E2[p2] - e1) > abs(E2[p2+1] - e1):
        p2 += 1
    E3.append(E2[p2])
"
What is a Python code object?,">>> compile('sum([1, 2, 3])', '', 'single')
<code object <module> at 0x19ad730, file """", line 1>
>>> exec compile('sum([1, 2, 3])', '', 'single')
6
>>> compile('print ""Hello world""', '', 'exec')
<code object <module> at 0x19add30, file """", line 1>
>>> exec compile('print ""Hello world""', '', 'exec')
Hello world
"
Using a string as a variable name,"def post(self):
    var_list = ['var1', 'var2']
    result_list = []
    for var in var_list:
        result_list.append(self.request.get(var))
    return result_list # etc.
"
python - Overhead on looping over an iterable class,"setup = """"""
def create_generator(num):
    mylist = range(num)
    for i in mylist:
        yield i

class Generator(object):

    def __init__(self, num):
        self.start = 0
        self.end = num

    def __iter__(self):
        return self

    def next(self):
        if self.start == self.end:
            raise StopIteration
        else:
            self.start = self.start + 1
            return self.start

class Generator2(object):

    def __init__(self, num):
        self.mylist = range(num)

    def __iter__(self):
        for i in self.mylist:
            yield i
""""""

import timeit

print timeit.timeit('for p in create_generator(1000):p', setup, number=1000)
print timeit.timeit('for p in Generator(1000):p', setup, number=1000)
print timeit.timeit('for p in Generator2(1000):p', setup, number=1000)
"
What's the best way to find the closest matching type to an existing type?,"from inspect import getmro
[st for cls, st in MY_TYPES.items() if cls in getmro(ClassB)]

['This is ClassA or a subclass']
"
regex sbustitute only specific hit sequence,"re.sub(r'(?<![a-zA-Z])r_', 'l_', s)
"
Reading/writing files in Python,"with open(""russ.txt"", ""r"") as f, open(""output.txt"", ""w"") as fh:
    for line in f:
        symbol = line.split()[-1]
        if symbol != ""Ticker"":
            print symbol
            fh.write(symbol + ""\n"")
"
Matplotlib: Centroid of Scatter Plot Circles,"click = (120,480)
print ""Click "",click,"" transforms into:""
print ax1.transData.inverted().transform(click),"" for axes 1""
print ax2.transData.inverted().transform(click),"" for axes 2""
"
Modify element [0][0] in a Python 2D list,"[[False]*N for _ in range(N)]
"
Shortest way to convert these bytes to int in python?,"struct.unpack('>q', s)[0]"
Load lists from a text file,"
from ast import literal_eval

with open('test.txt', 'rb') as f:
    data = [literal_eval(line) for line in f]

print data
"
French regular Expression,"#!/usr/bin/python
# -*- coding: utf-8 -*-
import regex

data = u'ARMÉ tu ARMÉE det PROPRÉTEUR def ÉTERNUER def À LA MALEHEURE test'


pattern = r'(?u)\p{Lu}+(?: \p{Lu}+)*|\p{Ll}+'

matches = regex.findall(pattern, data)

print matches
"
Repeating rows and columns in Python,"X,Y = np.meshgrid(N,M[::-1])
"
How to get leaf nodes of a tree using Python?,"def get_leaf_nodes(self):
    leafs = []
    self._collect_leaf_nodes(self.root,leafs)
    return leafs

def _collect_leaf_nodes(self, node, leafs):
    if node is not None:
        if len(node.children) == 0:
            leafs.append(node)
        for n in node.children:
            self._collect_leaf_nodes(n, leafs)
"
Timestamp YYYY-MM-DDThh:mm:ss.sssTZD in Python,"now.strftime(""%Y-%m-%dT:%H:%M:%S"") 
"
Parse CSV file and aggregate the values,"import csv
from collections import defaultdict
reader = csv.DictReader(open('test.csv', newline=''))
cities = defaultdict(int)
for row in reader:
    cities[row[""CITY""]] += int(row[""AMOUNT""])

writer = csv.writer(open('out.csv', 'w', newline = ''))
writer.writerow([""CITY"", ""AMOUNT""])
writer.writerows([city, cities[city]] for city in cities)
"
Get nested arrays out of a dictionary,"def nodeMapForDict(d):
    node_map = []
    node_path = [] 
    def nodeRecursiveMap(d, node_path): 
        for key, val in d.items():
            if type(val) is not dict: node_map.append(node_path + [key]) 
            if type(val) is dict: 
                nodeRecursiveMap(val, node_path + [key])
    nodeRecursiveMap(d, node_path)
    return node_map
"
Finding the highest value,"averageNAS = []
for ...
    averageNAS.append((float(highNAS) + float(lowNAS)) / 2)
bestNAS = max(averageNAS)
"
Going through names of a set of matrices in Python,">>> A_1 = [1]
>>> eval('A_' + str(1))
[1]
"
How can I get generators/iterators to evaluate as False when exhausted?,"try:
    next
except NameError:       # doesn't show up until python 2.6
    def next(iter):
        return iter.next()

Empty = object()

class Boolean_Iterator(object):
    """"""Adds the abilities
    True/False tests:  True means there /may/ be items still remaining to be used
    """"""
    def __init__(self, iterator):
        self._iter = iter(iterator)
        self._alive = True
    def __iter__(self):
        return self
    def __next__(self):
        try:
            result = next(self._iter)
        except StopIteration:
            self._alive = False
            raise
        return result
    next = __next__                     # python 2.x
    def __bool__(self):
        return self._alive
    __nonzero__ = __bool__              # python 2.x
"
Pythonic way to get the largest item in a list,"max(a_list, key=operator.itemgetter(1))"
Python - Return top 5 words with highest frequency,">>> import collections
>>> def top5_words(text):
...     counts = collections.Counter(text.split())
...     return counts.most_common(5)
...
>>> top5_words(""""""As the title says, I need to write a code that returns a list of 5 words (from an input string) that have the highest frequency. This is what I have so far"""""")
[('that', 2), ('a', 2), ('I', 2), ('the', 2), ('have', 2)]
"
How can I keep track of object instances in a list with python without using constructors (__init__)?," class RevealAccess(object):
   """"""
      A data descriptor that sets and returns values
      normally and prints a message logging their access.
   """"""

    def __init__(self, initval=None, name='var'):
      self.val = initval
      self.name = name

    def __get__(self, obj, objtype):
      print 'Retrieving', self.name
      return self.val

    def __set__(self, obj, val):
      print 'Updating', self.name
      self.val = val
"
Defining large list-within- list array,"board = [[[False] * 10] * 22] #Cast the boolean to a list
"
How do I sum the first value in each tuple in a list of tuples in Python?,sum([pair[0] for pair in list_of_pairs])
How to sort with lambda in Python,"a = sorted(a, key=lambda x: x.modified, reverse=True)"
finding the number of elements in a defaultdict(list) python,"foo = {""a"":[1,2,3], ""b"":[3], ""c"":[1,2], ""d"":[1,2,3,4]}

n = 2

my_list = [key for key,val in foo.iteritems() if len(val) > n]
"
Have setup.py and easy_install inject a version number into a source file,"def get_version():
    """"""
    Gets the latest version number out of the package,
    saving us from maintaining it in multiple places.
    """"""
    local_results = {}
    execfile('project/version.py', {}, local_results)
    return local_results['__version__']

setup(
    name=""Project"",
    version=get_version(),
    ...
)
"
"Remove all special characters, punctuation and spaces from string","re.sub('[^A-Za-z0-9]+', '', mystring)"
How to convert a date string to different format,"datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')"
calling python builtin dict on a mock,">>> m = MagicMock()
>>> d = {""a"":""A"", ""b"":""B"", ""c"":""C""}
>>> m.keys.return_value.__iter__.return_value = [""a"", ""b"", ""c""]
>>> m.__getitem__.side_effect = [""A"",""B"",""C""]
>>> dict(m)
{'a': 'A', 'c': 'C', 'b': 'B'}
>>> #Little bit generic
>>> m.keys.return_value.__iter__.return_value = d.keys()
>>> m.__getitem__.side_effect = lambda k:d[k]
>>> dict(m)
{'a': 'A', 'c': 'C', 'b': 'B'}
"
insert a character into a list in python,"l[:] = ["";"".join(line.split())for line in l]
print(l)

['48998.tyrone-cluster;gic1_nwgs;mbupi;18:45:44;R;qp32', '48999.tyrone-cluster;gic2_nwgs;mbupi;0;Q;batch', '49005.tyrone-cluster;...01R-1849-01_2;mcbkss;00:44:23;R;qp32', '49032.tyrone-cluster;gaussian_top.sh;chemraja;0;Q;qp32', '49047.tyrone-cluster;jet_egrid;asevelt;312:33:0;R;qp128']
"
Heap Sort: how to sort?,"def heapsort(sqc):                                 
    def down_heap(sqc, k, n):                            
        parent = sqc[k]                                  

        while 2*k+1 < n:                                 
            child = 2*k+1                                
            if child+1 < n and sqc[child] < sqc[child+1]:
                child += 1                               
            if parent >= sqc[child]:                     
                break                                    
            sqc[k] = sqc[child]                          
            k = child                                    
        sqc[k] = parent                                  

    size = len(sqc)                                      

    for i in range(size/2-1, -1, -1):                    
        down_heap(sqc, i, size)                          

    for i in range(size-1, 0, -1):                       
        sqc[0], sqc[i] = sqc[i], sqc[0]                  
        down_heap(sqc, 0, i)                             
"
Fast math operations on an array in python,"B = empty(A.shape+(3,))
B[:,:,0] = A
B[:,:,1] = 1 # broadcasting again
B[:,:,2] = 0
"
python list comprehension vs +=,">>> s = 1000 * string
>>> timeit.timeit('f(s)', 'from __main__ import s, strip_spaces as f', number=100)
1.3209099769592285
>>> timeit.timeit('f(s)', 'from __main__ import s, strip_spaces_join as f', number=100)
1.2893600463867188
>>> s = 10000 * string
>>> timeit.timeit('f(s)', 'from __main__ import s, strip_spaces as f', number=100)
14.545105934143066
>>> timeit.timeit('f(s)', 'from __main__ import s, strip_spaces_join as f', number=100)
14.43651008605957
"
Identify groups of continuous numbers in a list,"ranges = []
for k, g in groupby(enumerate(data), lambda (i,x):i-x):
    group = map(itemgetter(1), g)
    ranges.append((group[0], group[-1]))
"
How does a python web server recognize no file name in url?,"if not filename or filename == b'/':
        filename = ""/index.htm""
    f = open(filename[1:])
"
Clashing namespaces with lxml etree,"from lxml import etree

NS_MAP = {
    ""p"" : ""http://parent-space.com/"",
    ""c"" : ""http://child-space.com/""
}
NS_PARENT = ""{%s}"" % NS_MAP[""parent""]
NS_CHILD = ""{%s}"" % NS_MAP[""child""]

parent = etree.Element(NS_PARENT + ""parent"", nsmap=NS_MAP)
child  = etree.SubElement(parent, NS_CHILD + ""child"")
child.text = ""Some Text""

print etree.tostring(parent, pretty_print=True)
"
Python fastest way to find values in big data,"from operator import itemgetter
from itertools import ifilter

points = set(ifilter(itemgetter(4), data))
getter = itemgetter(1,2)
final_list = [d for d in data if getter(d) in points]
"
the most pythonic matrix transposition,">>> lis = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]
>>> zip(*lis)
[('a', 'd', 'g'), ('b', 'e', 'h'), ('c', 'f', 'i')]
"
How to modify lxml autolink to be more liberal?,"import re
import lxml.html
import lxml.html.clean

url_regexp = re.compile(r""""""(?i)\b(?P<body>(?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|(?P<host>[a-z0-9.\-]+[.][a-z]{2,4}/))(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'"".,<>?«»“”‘’]))"""""")

DOC = """"""<html><body>
    http://foo.com/blah_blah
    http://foo.com/blah_blah/.
    http://www.extinguishedscholar.com/wpglob/?p=364.
    http://✪df.ws/1234
    rdar://1234
    rdar:/1234
    message://%3c330e7f840905021726r6a4ba78dkf1fd71420c1bf6ff@mail.gmail.com%3e
    What about &lt;mailto:gruber@daringfireball.net?subject=TEST&gt; (including brokets).
    bit.ly/foo
</body></html>""""""

tree = lxml.html.fromstring(DOC)
body = tree.find('body')
lxml.html.clean.autolink(body, [url_regexp], avoid_hosts=[])
print lxml.html.tostring(tree)
"
Plotting 'vectors' with different colors in matplotlib,"from matplotlib import pyplot as plt
import matplotlib.cm as cm
import numpy as np

# Some fake data
timeDate = np.arange(256)
Y = timeDate * 1.1 + 2
V = timeDate * 3 + 1

# Select the color map named rainbow
cmap = cm.get_cmap(name='rainbow')

# Plot each vector with a different color from the colormap. 
for ind, (t, y, v) in enumerate(zip(timeDate, Y, V)):
    plt.vlines(t,y,v ,color = cmap(ind))

plt.show()
"
How to discard pyparsing parseResults during parsing?,"OneOrMore(blockOfText).parseString(bigHonkingString)
"
Python: simple csv substring filter,"import csv

def filterCSVfile(path):
    filterSubstrings = set(['signal1', 'signal2'])  # for efficency reason

    with open(path, 'r') as csvData:
        filereader = csv.reader(csvData, delimiter=',')
        rows = [row for row in filereader if any([word in row[1] for word in filterSubstrings])] # change this row

    with open('output.csv', 'w') as outFileHandle
        writer = csv.writer(outFileHandle)  # get a write object
        writer.writerows(rows)

filterCSVfile('history.csv')
"
Python Textwrap - forcing 'hard' breaks,"def hard_wrap(input, width, indent=' '):
   for line in input:
      indent_width = width - len(indent)
      yield line[:width]
      line = line[width:]
      while line:
         yield '\n' + indent + line[:indent_width]
         line = line[indent_width:]
"
Print lines with numbers infront,"   print(""\n"".join(str(n,x))
"
Not able to following links in Scrapy,"from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.contrib.spiders import Rule, CrawlSpider
from scrapy.item import Item, Field
from scrapy.selector import HtmlXPathSelector


class JogadorItem(Item):
    nome = Field()
    time = Field()


class MoneyballSpider(CrawlSpider):
    name = ""moneyball""
    allowed_domains = [""esporte.uol.com.br"", ""click.uol.com.br"", ""uol.com.br""]
    start_urls = [""http://esporte.uol.com.br/futebol""]

    rules = (Rule(SgmlLinkExtractor(allow=(r'.*futebol/clubes/.*?/jogadores/', )), callback='parse_players', follow=True),
             Rule(SgmlLinkExtractor(allow=(r'.*futebol/clubes/.*', )), follow=True),)

    def parse_players(self, response):
        hxs = HtmlXPathSelector(response)
        jogadores = hxs.select('//div[@id=""jogadores""]/div/ul/li')
        items = []
        for jogador in jogadores:
            item = JogadorItem()
            item['nome'] = jogador.select('h5/a/text()').extract()
            item['time'] = hxs.select('//div[@class=""header clube""]/h1/a/text()').extract()
            items.append(item)
            print item['nome'], item['time']
        return items
"
Searching LDAP with Python without LDAP library,"$ cp -R 'site-packages/ldap' 'path-to-local-packages'

>>> import sys
>>> sys.path.append('path-to-local-packages')
>>> import ldap
"
Special case when finding min key for dictionary in Python,"x = {""A"":2, ""1"":2,""0"":1, ""5"":2}
m = max(x)
if m.isdigit():
    print(min(x))
else:
    print(m)
"
Translating regex match groups,"import re
from functools import partial

def _hexrepl(match):
    return chr(int(match.group(1), 16))
unescape = partial(re.compile(r'#([0-9A-F]{2})').sub, _hexrepl)

def pdfnames(inputtext):
    for match in Name.finditer(inputtext):
        yield unescape(match.group(0))
"
Creating a list by searching for substrings in python,"def test(padded_name):
    names = ['albert', 'bob', 'charlie']
    return any(padded_name.find(name) >= 0 for name in names)        

filtered_names = filter(test,padded_names)
"
Python: Last character of user input,"if raw_input('Enter a word: ')[-1:] == 's': # Or you can use [-1]
    do_stuff()
"
summing nested dictionary entries,"results = {}
for key in data.keys():
    # key is '20101021', '20101004'...
    # data[key].keys() is '4x4, '4x2'... so let's make sure
    # that the result dictionary contains all those '4x4', '4x2'
    # being zero if nothing better can be calculated.
    results[key] = dict.fromkeys(data[key].keys(), 0)

    for sub_key in data[key].keys():
        # sub_key is '4x4', '4x2'...
        # Also, don't consider a 'valid value' someting that is not a
        # ""Central Spectrum"" or a ""Full Frame""
        valid_values = [
            int(v) for k, v in data[key][sub_key].items()
            if k in [""Central Spectrum"", ""Full Frame""]
        ]
        # Now add the 'valid_values'
        results[key][sub_key] = sum(valid_values)
print results
"
"django , list of models to list of string","newList = map( str, myList )
"
Why are lists linked in Python in a persistent way?,"a = []
b = a
b = [9]
"
Python script printing lines twice,"with open(""FileName"", ""r"") as ins:
    <do stuff with ins>
"
Search and get a line in Python,"if ""token"" in mystring:
    print mystring
"
get current CPU and RAM usage,"psutil.cpu_percent()
psutil.virtual_memory()"
Simplify removes relational term in Sympy?,"from sympy import *
x, y, z = symbols('x y z')
f = symbols('f', cls=Function)
"
python 3.4 list comprehension - calling a temp variable within list,"def get_currency_by_type(curr, curr_type):
    for elem in curr:
        val, val_type = elem['currency'].split(',')
        if val_type == curr_type and float(val) > 0:
            yield float(val)

usd_curr = list(get_currency_by_type(curr, 'USD'))
"
dealing with multiple lists,"d = {'file1.txt': ['a', 'b', 'c'],
     'file2.txt': ['d', 'e', 'f'],
     'file3.txt': ['g', 'h', 'i']}

for filename, lst in d.iteritems():
    if lst:
        with open(os.path.join(dirpath, filename), 'w') as f:
            for elem in lst:
                f.write(elem)
"
How merge prev/next lists in python?,"items= [['F','G'], ['B','C'], ['A','B'], ['C','D'], ['E','F']]
mydict = dict(items)
for prev,next in items:
    if next in mydict:
        mydict[prev] = mydict[next]
        del mydict[next]
print(list(mydict.items()))
"
statsmodels - plotting the fitted distribution,"import numpy as np
from scipy import stats
import statsmodels.api as sm

# generate some data to check
nobs = 1000
n, p = 50, 0.25
dist0 = stats.nbinom(n, p)
y = dist0.rvs(size=nobs)
x = np.ones(nobs)

loglike_method = 'nb1'  # or use 'nb2'
res = sm.NegativeBinomial(y, x, loglike_method=loglike_method).fit(start_params=[0.1, 0.1])

print dist0.mean()
print res.params

mu = res.predict()   # use this for mean if not constant
mu = np.exp(res.params[0])   # shortcut, we just regress on a constant
alpha = res.params[1]

if loglike_method == 'nb1':
    Q = 1
elif loglike_method == 'nb2':    
    Q = 0

size = 1. / alpha * mu**Q
prob = size / (size + mu)

print 'data generating parameters', n, p
print 'estimated params          ', size, prob

#estimated distribution
dist_est = stats.nbinom(size, prob)
"
Indexing a pandas dataframe in Python,"   import numpy as np
   for group in df['Key'].unique():
       np.histogram(df[df['Key']==group]['Value'])
"
"Python: given list of columns and list of values, return subset of dataframe that meets all criteria","In [77]: permutation = np.array([0,2,2])

In [78]: col
Out[78]: ['a', 'b', 'c']

In [79]: df.loc[(df[col] == permutation).all(axis=1)]
Out[79]:
    a  b  c
10  0  2  2
15  0  2  2
16  0  2  2
"
Python implementation of Unix find's -prune flag,"import os
import fnmatch

for root, dirs, files in os.walk('.'):
    for d in dirs[:]:
        if fnmatch.fnmatch(d, 'tmp_*'):
            dirs.remove(d)
    print root
"
python: rename single column header in pandas dataframe,"data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"
Grab the parent id tag with beautiful soup?,"[(l, l.parent.get('id')) for l in links]
"
Using regex to replace object within brackets in a text file,"import re

ss = '''This is the [first]       line   
(And) another line
   [Inter][A] initially shifted
[Finally][B] the last
    Additional ending lines (this one without brackets):    
[Note that [ by the way [ref [ 1]] there are]    [some] other ]cases
tuvulu[]gusti perena[3]              bdiiii
    [Away [is this] [][4] ] shifted content
    fgjezhr][fgh
'''

def clean(x, regx = re.compile('( |(?<! ))+((?<!])\[[^[\]]*\])( *)')):
    while regx.search(x):
        print '------------\n',x,'\n','\n'.join(map(str,regx.findall(x)))
        x = regx.sub('\\1',x)
    return x


print '\n==========================\n'+clean(ss)
"
Read characters in a string only if I have found the part that I need? [Python],">>> response = 'Hello there. You have no ID. Your name is: Mud.'
>>> before, matched, after = response.partition('Your ID is: ')
>>> if after:
...     print after
"
Matching previously defined groups in python,"text = re.sub(r""\n\n"", somespecialsequence, text);
text = re.sun(r""\s*\n"", "" "", text);
text = re.sub(r""\s+"", "" "", text);
text = re.sub(somespecialsequence, ""\n\n"", text);
"
How to quickly used format to print a list?,"print((""{:12.6f} ""*3).format(*x))
"
Using Timegrouper '1M' to group and sum by columns is messing up my date index pandas python,"import pandas as pd
import glob



#change path by your 
df = pd.concat((pd.read_csv(f, 
                            sep='|', 
                            header=None, 
                            names=['cmte_id', '2', '3', '4', '5', 'trans_typ', 'entity_typ', '8', '9', 'state', '11', 'employer', 'occupation', 'date', 'amount', 'fec_id', 'cand_id', '18', '19', '20', '21', '22'], 
                            usecols= ['date', 'cmte_id', 'trans_typ', 'entity_typ', 'state', 'employer', 'occupation', 'amount', 'fec_id', 'cand_id'],
                            dtype={'date': str}
                           ) for f in glob.glob('test/itpas2_data/itpas2**.txt')), ignore_index=True)


#parse column date to datetime
df['date'] = pd.to_datetime(df['date'], format='%m%d%Y')

#remove rows, where date is NaN
df = df[df['date'].notnull()]

#set column date to index
df = df.set_index('date')

g = df.groupby([pd.TimeGrouper('1M'), 'cand_id', 'trans_typ'])['amount'].sum()
"
I need to open and rewrite a line in a file in Python,"infile = open('hey.txt','r+')
content = infile.readlines() #reads line by line and out puts a list of each line
content[1] = 'This is a new line\n' #replaces content of the 2nd line (index 1)
infile.write(content)
infile.close()
"
Numbers with hyphens or strings of numbers with hyphens,"import pandas as pd

df = pd.DataFrame({'foo':['100-200','1000-1100','1100-1200','200-300']})

df[['start', 'end']] = df['foo'].apply(lambda val: pd.Series(map(int, val.split('-'))))
df.sort(['start', 'end'], inplace=True)
print(df)
"
python - regex search and findall,"regex = re.compile('((\d+,)*\d+)')
"
Isolating lists based on value in python3,"#like the built-in function `max`, 
#but returns the index of the largest element
#instead of the largest element itself.
def index_of_max(seq, key=lambda item:item):
    return max(range(len(seq)), key=lambda idx: key(seq[idx]))

lists = [
    [2, 3, 2, 4, 5],
    [1, 3, 2, 3, 2],
    [1, 1, 2, 2, 2],
    [3, 2, 2, 4, 5]
]

idx = index_of_max(lists, key=lambda item: (sum(item), item[0]))
#add one to this result because Python lists are zero indexed, 
#but the original numbering scheme started at one.
print ""List # {} is largest."".format(idx+1) 
"
Determine which numbers in list add up to specified value,"import datetime as dt
from itertools import groupby
from math import ceil

def _unique_subsets_which_sum_to(target, value_counts, max_sums, index):
    value, count = value_counts[index]
    if index:
        # more values to be considered; solve recursively
        index -= 1
        rem = max_sums[index]

        # find the minimum amount that this value must provide,
        # and the minimum occurrences that will satisfy that value
        if target <= rem:
            min_k = 0
        else:
            min_k = (target - rem + value - 1) // value  # rounded up to next int

        # find the maximum occurrences of this value
        # which result in <= target
        max_k = min(count, target // value)

        # iterate across min..max occurrences
        for k in range(min_k, max_k+1):
            new_target = target - k*value
            if new_target:
                # recurse
                for solution in _unique_subsets_which_sum_to(new_target, value_counts, max_sums, index):
                    yield ((solution + [(value, k)]) if k else solution)
            else:
                # perfect solution, no need to recurse further
                yield [(value, k)]
    else:
        # this must finish the solution
        if target % value == 0:
            yield [(value, target // value)]

def find_subsets_which_sum_to(target, values):
    """"""
    Find all unique subsets of values which sum to target

        target   integer >= 0, total to be summed to
        values   sequence of integer > 0, possible components of sum
    """"""
    # this function is basically a shell which prepares
    #  the input values for the recursive solution

    # turn sequence into sorted list
    values = sorted(values)
    value_sum = sum(values)

    if value_sum >= target:
        # count how many times each value appears
        value_counts = [(value, len(list(it))) for value,it in groupby(values)]

        # running total to each position
        total = 0
        max_sums = [0]
        for val,num in value_counts:
            total += val * num
            max_sums.append(total)

        start = dt.datetime.utcnow()
        for sol in _unique_subsets_which_sum_to(target, value_counts, max_sums, len(value_counts) - 1):
            yield sol
        end = dt.datetime.utcnow()
        elapsed = end - start
        seconds = elapsed.days * 86400 + elapsed.seconds + elapsed.microseconds * 0.000001
        print(""  -> took {:0.1f} seconds."".format(seconds))

# I multiplied each value by 100 so that we can operate on integers
# instead of floating-point; this will eliminate any rounding errors.
values = [
    9856, 9856, 9856, 12944, 16000, 24219, 28687, 29000, 35101, 66500,
    67500, 67500, 67745, 67745, 69500, 69500, 69500, 69500, 71500, 72000,
    72500, 73000, 74500, 74500, 75000, 75000, 75000, 75000, 75893, 75893,
    76385, 76500, 78000, 78134, 78170, 81379, 82497, 82705, 85628, 87408,
    87444, 149811, 158000, 160000, 160000
]
sum_to = [
    298811,
    688441,
    850160  #,
            # 1438214
]

def main():
    subset_sums_to = []
    for target in sum_to:
        print(""\nSolutions which sum to {}"".format(target))
        res = list(find_subsets_which_sum_to(target, values))
        print(""  {} solutions found"".format(len(res)))
        subset_sums_to.append(res)
    return subset_sums_to

if __name__==""__main__"":
    subsetsA, subsetsB, subsetsC = main()
"
Python scikit learn pca.explained_variance_ratio_ cutoff,"import numpy as np
from sklearn.decomposition import PCA

np.random.seed(0)
my_matrix = np.random.randn(20, 5)

my_model = PCA(n_components=5)
my_model.fit_transform(my_matrix)

print my_model.explained_variance_
print my_model.explained_variance_ratio_
print my_model.explained_variance_ratio_.cumsum()
"
Why is pyparsing removing a named result?,"from pyparsing import *
latex_h  = QuotedString(""$"")('latex')
reg_text = Word(alphas)('text')
grammar  = Group(OneOrMore( latex_h | reg_text ))('line')

def parse_reg_text(s, loc, toks):
    if toks.text == 'dog':
        return ""atomic "" + toks.text
    else:
        return ""ninja "" + toks.text

reg_text.setParseAction(parse_reg_text)

sol = grammar.parseString('''dog $x^2$ cat $y^3$''')
print sol.dump()
"
json dict - python how to access,"d={ u'job_27301': [{u'auto_approve': u'0',
                 u'body_src': u'some text1'}],

  u'job_27302': [{u'auto_approve': u'0',
                 u'body_src': u'some text2'}],

  u'job_27303': [{u'auto_approve': u'0',
                 u'body_src': u'some text3'}] }

for k,v in d.iteritems(): # items in python 3
    print(v[0][""body_src""])
"
get current CPU and RAM usage,"pid = os.getpid()
py = psutil.Process(pid)
memoryUse = (py.memory_info()[0] / (2.0 ** 30))"
How to count numbers in a list from a csv file filtering out words and commas,"with open('test1.csv', newline='') as f:
    cols = {'count' : [], 'mean' : [], 'median' : [], 'minimum' : [], 'maximum' : [], 'std dev' : []}
    names = []
    for line in f:
        row = line.split(',')
        numbers = [float(i) for i in row[1:-1]]
        num_count = len(numbers)
        mean = sum(numbers) / num_count
        name = row[0]
        names.append(name)
        cols['count'].append(num_count)
        cols['mean'].append(mean)
        cols['minimum'].append(min(numbers))
        cols['maximum'].append(max(numbers))
"
Getting specific list element from a series,"with concurrent.futures.ProcessPoolExecutor(max_workers=4) as pool:
    jobs = []

    for i in range(njobs * 10):
        bounds = (ceil(i * data.shape[0] / float(njobs * 10)),
                  ceil((i + 1) * data.shape[0] / float(njobs * 10)))

        jobs.append(pool.submit(
            df[bounds[0]:bounds[1]].apply,
            some_func_returning_tuple_of_two,
            axis=1))

    result = pandas.DataFrame(
        list(itertools.chain.from_iterable([job.result() for job in jobs])),
        index=data.index,
        columns=('result', 'meta') if has_meta else ('result'))
"
how do I get a function to take two arguments?,"def search(myBigFancyX, myBigFancyList):

    counter = 0
    for number in myBigFancyList:
        if number == myBigFancyX:
            counter += 1
    return counter

if __name__ == ""__main__"":

    l = [4, 10, 4, 2, 9, 5, 4 ]
    x = int(input(""Enter an element to search for in the list: ""))

    occurances = search(x, l)
    if occurances == 0:
        print(""element does not occur in the list"")
    else:
        print(""the number of occurrences in L: "", occurances)
"
Python code for calculating number of an alphabet,">>> c = 'f'
>>> chr(ord(c) + 1)
'g'
"
Summing result of Monte Carlo Sim; python,"def MonteCarlo(starter, x):
    result = dict(w=0,l=0,n=0)
    for i in range(0, x):
        w,l,n = starterTrans3(starter)
        result['w']+=w
        result['l']+=l
        result['n']+=n
    return result
"
Python count everytime a string is found in another string,"ultrias = ""am 17""
response = ""Hi i am 17, did you know I am 17""

count = 0
data = response[:]
while True:
    start = data.find(ultrias)
    if start < 0:
        break
    data = data[start + len(ultrias):]
    count += 1
print(count)
"
emulating the behavior of findWhere() in python,"def find_where(iterable, dct):
    for item in iterable:
        if all(item[key] == value for key, value in dct.items()):
            yield item

my_list = [
  {'name': 'Thor', 'age': 23},
  {'name': 'Odin', 'age': 42},
  {'name': 'Freya', 'age': 50},
  {'name': 'Skadi', 'age': 23},
]

print list(find_where(my_list, {'age': 23}))
"
Python 3 While loop,"while True:
    try:
        name = input(""Enter texture pack name: "")
        name_length = int(len(name))
    if name_length <= 0:
        raise ValueError(""Nothing was written!"")
    elif name_length == 1:
        raise ValueError(""Only one character!"")
    elif name_length >= 18:
        raise ValueError(""More than 18!"")
    else:
        break
print (""Texture pack: %s"" % (name))
"
Can I write to terminal and a given file with one command in Python?,"from contextlib import contextmanager

@contextmanager
def replace_stdout(f):
    old_stdout = sys.stdout
    try:
        sys.stdout = PrintAndLog(f)
        yield
    finally:
        sys.stdout = old_stdout
"
Providing test data in python,"import unittest

data = [ 
    (2, True), 
    (3, False), 
    (4, True),
    (5, False)]

# this should be imported from a separate module.
def isEven(number):
    return True # quite buggy implementation

def create_test_func(num, expected):
    def _test_func(self):
        self.assertEqual(expected, isEven(num))
    return _test_func

class TestIsEven(unittest.TestCase):

    pass

# pyunit isn't pythonic enought use py.test instead
# till then we rely on such hackery
import new
for i, (num, expected) in enumerate(data):
    setattr(TestIsEven, 'test_data_%d'%i, create_test_func(num, expected))

if __name__ == ""__main__"":
    unittest.main()
"
Python - Fastest way to generate list of random colours with fixed alpha,"import numpy as np

colorarray = np.random.random_sample((332000000, 4))
colorarray[:, -1] = 0.6
colorarray = np.vstack([colorarray, colorarray])
"
Whats the most pythonic way to do this?,"train_end = (int(len(instances)*TRAINING_END) // CHANNELS) * CHANNELS
"
Dynamically adding class instance to Python instance à la __setattr__,"class B(object):
    def __getattr__(self, attr):
        if attr == 'a':
            self.a = A()
            return self.a
        raise AttributeError(attr)
"
python remove html tags including html entities but not normal text with a '&' prefix,">>> html = '<div><p>&abc is <b>my</b> input text</p></div>'
>>> print strip_tags(html)
 is  my  input text

>>> from bs4 import BeautifulSoup
>>> soup = BeautifulSoup(html)
>>> print soup.text
&abc is my input text
>>> soup = BeautifulSoup('=&abc= is my input text')
>>> soup.text
u'=&abc= is my input text'
"
selecting coordinates of an array by user input in python,"import fileinput
import linecache

file_name = input(""Enter the file name: "") #sample.txt

# selecting cells
select1 = int(input(""Enter row number: "")) #0
select2 = int(input(""Enter column number: "")) #1

# New value
newVal = int(input(""Enter row number: "")) #100

# Get nth line from the input file and strip any newline chars
textToSearch = linecache.getline(file_name, select1+1).strip('\n')

# Transform to the line read to a list 
tmpList = [int(_) for _ in textToSearch.split(' ')]

# Replace the list with the new value and form the str line back again
tmpList[select2] =  newVal
textToReplace = ' '.join(str(_) for _ in tmpList)

# Modify the sample.txt file inplace 
with fileinput.FileInput(file_name, inplace=True, backup='.bak') as file:
    for line in file:
        print(line.replace(textToSearch, textToReplace), end='')

file.close()
linecache.clearcache()
"
How to access particular element of tuples which are inside a nested dictionary Python,">>> for ip, (mac, t) in database['PC1'][3].items(): print mac, ip
02:02:02:02:02:02 192.168.0.2
01:01:01:01:01:01 192.168.0.1
"
Delete multiple Pandas DataFrame row where column value is this or that,"df[df['Type'].isin(type_val)]
"
"Difference between the built-in pow() and math.pow() for floats, in Python?","class Uncertain:
  def __init__(self, x, delta=0):
    self.delta = delta
    self.x = x
  def __pow__(self, other):
    return Uncertain(
      self.x**other.x, 
      Uncertain._propagate_power(self, other)
    )
  @staticmethod
  def _propagate_power(A, B):
    return math.sqrt(
      ((B.x*(A.x**(B.x-1)))**2)*A.delta*A.delta +
      (((A.x**B.x)*math.log(B.x))**2)*B.delta*B.delta
    )
"
GroupBy in pandas divided by date range,"bins = np.linspace(0, 10, 25, endpoint=False)
g1 = dfml.groupby([dfml.LEAGUE, dfml.MATCH_DATE.dt.month, 
                   pd.cut(dfml.MATCH_HOME, bins)]).agg({'MATCH_HOME' : 'min',
                                                        'PROFIT': sum,
                                                        'PROFIT_2': sum,
                                                        'TOTAL': sum
                                                       })
g1[g1['TOTAL'] > 0]
"
"Script to convert ASCII chars to ""<Uxxx>"" unicode notation","while IFS= read -r -n1 c;do printf ""<U%04X>"" ""'$c""; done < ./infile
"
Regex and Octal Characters,"print(re.findall(""'\\\\[0-7]{1,3}'"", str))"
how to read the lines from line 7 to line 265 in python?,"from collections import deque

def tail(iterable,n=None):
    """"""Return an iterator over the last n items, if n is none return a iterator over all elemens
       in iterable save the first

       tail('ABCDEFG',3) --> E F G
       tail('ABCDEFG')   --> B C D E F G """"""
    if n is None:
        resul = iter(iterable)
        next(resul,None)
        return resul
    return iter(deque(iterable, maxlen=n))
"
Stripping \r\n from a line,"line = line.strip('\r\n')
"
Convert float to string with cutting zero decimals afer point in Python,"str(round(value)).rstrip('0').rstrip('.')
"
Python: Getting specific list elements,"c = Counter((x.rstrip(punctuation).lower() for y in text for x in y.split() if x in relevant_items))
"
How to address/check whether a character in a string isn't a disallowed character?,"from string import ascii_letters, digits
allowed = set(""-_"" + ascii_letters + digits)
s = ""app-_l#e""
if all(ch in allowed for ch in s):
     # string only contains allowed characters
"
A better way of converting a string into a range of dates (and back again)?,"import time

def format_date_range(etime):
    input_date_strs = etime.split(' to ')

    # use a list comprehension and tuple expansion
    # typically 'i' is used for numbers, use of s hints at the items being strs
    start, end = [time.strptime(s, ""%Y-%m-%d"") for s in input_date_strs]

    # if both in the same year, omit it from start date
    start_fmt = ""%B %d"" if start.tm_year == end.tm_year else ""%B %d %Y""

    # if both in the same month and year, omit month from end date
    end_fmt = ""%d, %Y"" if (start.tm_mon, start.tm_year) == (end.tm_mon, end.tm_year) else ""%B %d %Y""

    return time.strftime(start_fmt, start)+ '-' + time.strftime(end_fmt, end)

TEST_TIMES = [
    '2014-10-21 to 2014-10-23',
    '2014-10-21 to 2015-10-23',
    '2014-10-21 to 2014-11-23',
    '2014-10-21 to 2015-10-23',
    ]

for etime in TEST_TIMES:
    print format_date_range(etime)
"
Namedtuple in Numpy,"pdt1=np.dtype((float, (2,)))
In [502]: points
Out[502]: 
array([(1.0, 2.0), (3.0, 4.0), (5.0, 6.0)], 
      dtype=[('x', '<f8'), ('y', '<f8')])
In [503]: points.view(pdt1)
Out[503]: 
array([[ 1.,  2.],
       [ 3.,  4.],
       [ 5.,  6.]])
In [504]: points.view(pdt1).sum(0).view(point_type)
Out[504]: 
array([(9.0, 12.0)], 
      dtype=[('x', '<f8'), ('y', '<f8')])
"
Comparing large list of hashes to other large list of hashes,"set_b = set(list_b)
for a in list_a:
    if a not in set_b:
         writeFile(...)
"
how to groupby pandas dataframe on some condition,"users = df.groupby('buyer_id').apply(lambda r: r['item_id'].unique().shape[0] > 1 and 
                                               r['date'].unique().shape[0] > 1 )*1
df.set_index('buyer_id', inplace=True)
df['good_user'] = users
"
Should I use a class in this: Reading a XML file using lxml,"class Knights:
   def __init__(self, name='Bedevere'):
       self.name = name
   def knight(self):
       self.name = 'Sir ' + self.name
   def speak(self):
       print self.name + "":"", ""Run away!""

class FerociousRabbit:
   def __init__(self):
       self.death = ""awaits you with sharp pointy teeth!""
   def speak(self):
       print ""Squeeeeeeee!""

def cave(thing):
   thing.speak()
   if isinstance(thing, Knights):
       thing.knight()

def scene():
   k = Knights()
   k2 = Knights('Launcelot')
   b = FerociousRabbit()
   for i in (b, k, k2):
      cave(i)
"
django admin - populate field with callable,"class MyModelAdmin(admin.ModelAdmin):
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == ""car"":
            kwargs[""queryset""] = Car.objects.filter(owner=request.user)
    return super(MyModelAdmin, self).formfield_for_foreignkey(db_field, request, **kwargs)
"
Display 'Counter' results on seperate line (Python),">>> from collections import Counter
>>> a = 'One,One,Two,Two,Three,Four,Five,Five'.split(',')
>>> count = Counter(a)
>>> for key, c in count.most_common():
...     print(""{}: {}"".format(key, c))
... 
Five: 2
Two: 2
One: 2
Three: 1
Four: 1
>>> for key, c in sorted(count.items(), key=lambda i: a.index(i[0])):
...     print(""{}: {}"".format(key, c))
... 
One: 2
Two: 2
Three: 1
Four: 1
Five: 2
>>> numbers = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}
>>> for key, c in sorted(count.items(), key=lambda i: numbers[i[0].lower()]):
...     print(""{}: {}"".format(key, c))
... 
One: 2
Two: 2
Three: 1
Four: 1
Five: 2
"
"Rock, Paper, Scissors - How to start a new game when there's a draw","import random

newgame = True
choosing = False

playerchoice = ''
computerchoice = ''

options = ['rock', 'scissors', 'paper', 'lizard', 'spock']

def play():
    global choosing, computerchoice, computerchoice, newgame
    choosing = True

    while choosing == True: # or while choosing 
        choose()

    result = get_result(playerchoice, computerchoice)

    if result[0] == 'Draw':
        print ""It's a draw, want to try again?"", ""Please type YES or NO:""

        # convert input into uppercase string, use dictionary to convert to boolean
        # default to False
        newgame = {'YES' : True, 'NO' : False}.get(str(input()).upper(), False)
        return # leave function back into 'while newgame' loop
    else:
        # fun code that converts the first value into the win/lose string, and combines it with the outcome of the round
        # join uses the string ', ' in between the two things we print
        values = [{True : 'You win!', False : 'You lose!'}[result[0]], result[1]]
        string = ', '.join(values)
        print string

def choose():
    global playerchoice, choosing, computerchoice

    print ""rock, paper, scissors, lizard, spock. What do you choose?""
    playerchoice = input()

    if playerchoice in options: # if playerchoice == any option
        print 'you chose', playerchoice

        computerchoice = options[random.randint(0,4)] # take advantage of list indexes
        print 'computer chose', computerchoice

        choosing = False
    else: 
        print ""this is not an option, please try again""

def get_result(playerchoice, computerchoice):
    results = {
               'rock' : {
                         'rock' : ('Draw',),
                         'paper' : (False, 'paper covers rock!'),
                         'scissors' : (True, 'rock crushes scissors!'),
                         'lizard' : (True, 'rock crushes lizard!'),
                         'spock' : (False, 'spock vaporizes rock!')
                        },
               'paper' : {
                          'rock' : (True, 'paper covers rock!'),
                          'paper' : ('Draw',),
                          'scissors' : (False, 'scissors cut paper!'),
                          'lizard' : (False, 'lizard eats paper!'),
                          'spock' : (True, 'paper disproves spock!')
                         },
               'scissors' : {
                             'rock' : (False, 'rock crushes scissors!'),
                             'paper' : (True, 'scissors cut paper!'),
                             'scissors' : ('Draw',),
                             'lizard' : (True, 'scissors kills lizard!'),
                             'spock' : (False, 'spock smashes scissors!')
                            },
               'lizard' : {
                           'rock' : (False, 'rock crushes lizard!'),
                           'paper' : (True, 'lizard eats paper!'),
                           'scissors' : (False, 'scissors kills lizard!'),
                           'lizard' : ('Draw',),
                           'spock' : (True, 'lizard poisons spock!')
                          },
               'spock' : {
                          'rock' : (True, 'spock vaporizes rock!'),
                          'paper' : (False, 'paper disproves spock!'),
                          'scissors' : (True, 'spock smashes scissors!'),
                          'lizard' : (False, 'lizard poisons spock!'),
                          'spock' : ('Draw',)
                         },
               }
    return results[playerchoice][computerchoice]

while newgame == True:
    play()
"
Python 3: test command line arguments,"#! /usr/bin/python3.2

import sys

if __name__ == '__main__':
    if len (sys.argv) < 4:
        print ( ['Usage: myscript [Dir] [Old] [New]',
            'Please enter Old and New',
            'Please enter New'] [len (sys.argv) - 1] )
"
How to capture iterated output variable into list for analysis,"my_list = [] #create empty list

   for url in list_of_urls:
    html = urllib.urlopen(url).read()
    soup = BeautifulSoup(html)

    for script in soup([""script"", ""style""]):
        script.extract()    # rip it out

    text = soup.get_text()

    lines = (line.strip() for line in text.splitlines())
    chunks = (phrase.strip() for line in lines for phrase in line.split(""  ""))
    text = '\n'.join(chunk for chunk in chunks if chunk)

    wiki = TextBlob(text)
    r = wiki.sentiment.polarity

    my_list.append(r) #add r to list my_list

print my_list
"
Fabric check user has permissions on file/folder,"from fabric.api import env, task, run, sudo as _sudo, settings, hide

env.user = 'vagrant'
env.key_filename = '~/.vagrant/machines/default/virtualbox/private_key'
env.host_string = '127.0.0.1'
env.port = '2222'


def is_file_writable(filepath, sudo=False):
    fn = run if not sudo else _sudo
    with settings(warn_only=True), hide('everything'):
        response = fn('test -w ' + filepath)
        return response.return_code == 0


@task
def sometask():
    print is_file_writable('/etc/sudoers')
    print is_file_writable('/etc/sudoers', sudo=True)
"
python check output find command not working,"from glob import glob 
files =  glob('/media/pi/*/config.txt')
"
Groupby with function remembering state,"def keyGen():
    curKey = 1
    newVal = yield None
    while True:
        oldVal, newVal = newVal, (yield curKey)
        if oldVal is None or abs(newVal-oldVal) > 100:
            curKey += 1

key = keyGen()
next(key)

>>> [(k, list(g)) for k, g in itertools.groupby(data, key.send)]
[(1, [1, 2, 100, 105]), (2, [300, 350, 375]), (3, [500]), (4, [800, 808])]
"
efficiently convert string (or tuple) to ctypes array,"_ = ctypes.memmove(pixarray, im.tostring(), w_px * h_px * 4)
"
Divide pandas DataFrame rows in specific number of random sets,"import numpy as np
num_groups = 5
dfs = [grp for key, grp in df.groupby(np.random.randint(num_groups, size=len(df)))]
"
"How do I modify a python array of strings to strip any alphanumerics, convert to float, and then store the float in the same array?","from string import ascii_letters

s='4.75M'
print(float(s.rstrip(ascii_letters))
4.75
"
Python 2.7: Detect DELETE key pressed on raw_input,"key = pygame.key.get_pressed()
        if key[pygame.K_DELETE]:
           #your code here...
"
Python Tkinter: Tree selection,"class DomTreeItem(TreeItem):
    def OnDoubleClick(self):
        if self.GetText() == ""level1"":
            node2.expand()
            node2.children[0].expand()
            node2.children[0].children[0].select()

[...]

class Application(Frame):
    def __init__(self, parent):
        global node2
"
Parse logs containing python tracebacks using logstash,"filter {

    multiline {
        pattern => ""^[^\[]""
        what => ""previous""
    }



    grok {
        match => [
            ""message"", ""\[pid\: %{NUMBER:process_id:int}\|app: 0\|req: %{NUMBER}/%{NUMBER}\] %{IPORHOST:clientip} \(\) \{%{NUMBER:vars:int} vars in %{NUMBER:bytes:int} bytes\} \[%{GREEDYDATA:timestamp}\] %{WORD:method} /%{GREEDYDATA:referrer} \=\> generated %{NUMBER:generated_bytes:int} bytes in %{NUMBER} msecs \(HTTP/%{NUMBER} %{NUMBER:status_code:int}\) %{NUMBER:headers:int} headers in %{NUMBER:header_bytes:int} bytes \(%{NUMBER:switches:int} switches on core %{NUMBER:core:int}\)%{GREEDYDATA:traceback}""
        ]
    }

    if ""_grokparsefailure"" in [tags] {
        grok {
            match => [
            ""message"", ""\[pid\: %{NUMBER:process_id:int}\|app: 0\|req: %{NUMBER}/%{NUMBER}\] %{IPORHOST:clientip} \(\) \{%{NUMBER:vars:int} vars in %{NUMBER:bytes:int} bytes\} \[%{GREEDYDATA:timestamp}\] %{WORD:method} /%{GREEDYDATA:referrer} \=\> generated %{NUMBER:generated_bytes:int} bytes in %{NUMBER} msecs \(HTTP/%{NUMBER} %{NUMBER:status_code:int}\) %{NUMBER:headers:int} headers in %{NUMBER:header_bytes:int} bytes \(%{NUMBER:switches:int} switches on core %{NUMBER:core:int}\)""
                ]
            remove_tag => [""_grokparsefailure""]
        }
    }

    else {
        mutate {
            convert => {""traceback"" => ""string""}
        }
    }

    date {
        match => [""timestamp"", ""dd/MM/YYYY:HH:MM:ss Z""]
        locale => en
    }
    geoip {
        source => ""clientip""
    }
    useragent {
        source => ""agent""
        target => ""Useragent""
    }
}
"
"Lambdify works with Python, but throws an exception with Cython","from sympy import S, lambdify # I'm assuming ""S"" comes from sympy
import numpy as np

CreateMagneticFieldsList = None # stops a compile error about CreateMagneticFieldsList being undefined

exec(""""""def CreateMagneticFieldsList(dataToSave,equationString,DSList):

    expression  = S(equationString)
    numOfElements = len(dataToSave[""MagneticFields""])

    #initialize the magnetic field output array
    magFieldsArray    = np.empty(numOfElements)
    magFieldsArray[:] = np.NaN

    lam_f = lambdify(tuple(DSList),expression,modules='numpy')
    try:
        # pass
        for i in range(numOfElements):
            replacementList = np.zeros(len(DSList))


            for j in range(len(DSList)):
                replacementList[j] = dataToSave[DSList[j]][i]

            try:
                val = np.double(lam_f(*replacementList))

            except:
                val = np.nan
            magFieldsArray[i] = val
    except:
        print(""Error while evaluating the magnetic field expression"")
    return magFieldsArray"""""")


list={""MagneticFields"":[1,2,3,4,5]}

out=CreateMagneticFieldsList(list,""MagneticFields*5.1"",[""MagneticFields""])
print(out)
"
"Python: Copy properties with it's functions (fget, fset, fdel) from one class to another",">>> def set_properties(cls):
...     for name, propcls in vars(AttrContainer).iteritems():
...         if name in cls.properties:
...             setattr(cls, name, vars(propcls)[name])
...     return cls
... 
>>> @set_properties
... class Item01Object(object):
...     properties = [""a"",""c""]
...     ATTR = None
... 
>>> @set_properties
... class Item02Object(object):
...     properties = [""b"",""c""]
...     ATTR = None
... 
>>> item01 = Item01Object()
>>> item01.c = 20
>>> item01.c
3
>>> item02 = Item02Object()
>>> item02.b = 42
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
AttributeError: can't set attribute
>>> item02.b
'Something'
"
When zero is not None or not False but digit 0,"result = var1 if var1 not in [None,False] else var2  # FAIL! DOES NOT WORK!!!!!!
"
Close rdpcap function - Scapy,"@conf.commands.register
def rdpcap(filename, count=-1):
    """"""Read a pcap file and return a packet list
count: read only <count> packets""""""
    return PcapReader(filename).read_all(count=count)
"
Error while checking if a string contains an element from a list in Python?,"x = {""hello"", ""hi"", ""hey""}
if x.intersections(af.x):
    af.greeting()
"
Write CSV Python,"with open (""from_baryon.csv"", ""r"") as inFile:
    with open (self.filename, ""a"") as outFile:
        out_file = csv.writer (outFile)
        in_reader = csv.reader(inFile)
        data = []
        lencount = 0
        for row in in_reader:
            out_file.writerow(row)
            tlen = len(''.join(row))
            data.append([tlen] + row)
            lencount += tlen
        data.insert(0,[lencount])
"
Can .findall() match multiple values in python etree?,"trees = log.findall('element1') or log.findall('element2')
"
Commutative combination of elements of two lists,"l = [['1','2','3'], ['a','b'], ['x','y']] 

set(tuple(sorted(p)) for p in product(*l) if len(set(p)) > 1)
"
Return a slice of an in-kernel query,"In [1]: pd.set_option('max_rows',10)

In [2]: N = 100000000

In [3]: df = DataFrame(dict(A = np.random.randn(N), B = np.random.randn(N)), index=date_range('20130101',freq='ms',periods=N))
df

In [4]: df
Out[4]: 
                                   A         B
2013-01-01 00:00:00        -1.184339 -0.362050
2013-01-01 00:00:00.001000 -0.431403 -0.602782
2013-01-01 00:00:00.002000  0.582003  1.207553
2013-01-01 00:00:00.003000  0.208940 -0.507944
2013-01-01 00:00:00.004000 -1.402088 -0.502517
...                              ...       ...
2013-01-02 03:46:39.995000  1.815447 -0.050623
2013-01-02 03:46:39.996000  0.071673  1.138665
2013-01-02 03:46:39.997000 -0.778820 -0.280813
2013-01-02 03:46:39.998000  0.920727  0.570497
2013-01-02 03:46:39.999000 -1.205459  0.437231

[100000000 rows x 2 columns]

In [5]: df.to_hdf('test.hdf','df', mode='w',format='table',compress='blosc')

In [6]: pd.read_hdf('test.hdf','df',where='(index>""2013-01-02 01:00:00"") and (index<""2013-01-02 01:00:01"")')
Out[6]: 
                                   A         B
2013-01-02 01:00:00.001000 -0.210051 -0.866118
2013-01-02 01:00:00.002000 -1.164465  0.388854
2013-01-02 01:00:00.003000  1.110326  0.925144
2013-01-02 01:00:00.004000  0.565132 -0.291035
2013-01-02 01:00:00.005000 -1.026886  0.047159
...                              ...       ...
2013-01-02 01:00:00.995000  0.280094 -1.080868
2013-01-02 01:00:00.996000 -1.394722 -0.523851
2013-01-02 01:00:00.997000  0.072997 -0.643343
2013-01-02 01:00:00.998000  0.721472  0.447951
2013-01-02 01:00:00.999000 -0.838169 -0.794621

[999 rows x 2 columns]

In [8]: %timeit pd.read_hdf('test.hdf','df',where='(index>""2013-01-02 01:00:00"") and (index<""2013-01-02 01:00:01"")').iloc[-1]
10 loops, best of 3: 31.6 ms per loop
"
"What’s the most Pythonic way of handling different, mutually-exclusive function inputs?","def relations(v, vtype='a'):
    functions = {
        'a': lambda x: x, 'b': lambda x: x-1,
        'c': lambda x: x * 2, 'd': lambda x: x**2
    }

    a = functions[vtype](v)
    b = 1 + a
    c = 0.5 * a
    d = a ** 0.5
    return a,b,c,d
"
"Python, neighbors on a regular grid",">>> M, N = 12, 10
>>> np.unravel_index(4, dims=(M, N))
(0, 4)
"
Programmatically download text that doesn't appear in the page source,"import requests

data = {
    'year': '1999',
    'month': '05',
    'day': '20',
    'locale': 'en-us'
}
response = requests.post('http://jebbushemails.com/api/email.py', data=data)

results = response.json()
for email in results['emails']:
    print email['dateCentral'], email['subject']
"
Adding new line to data for csv in python,"import csv

import requests
from bs4 import BeautifulSoup

r = requests.get('http://www.hoopsstats.com/basketball/fantasy/nba/opponentstats/16/12/eff/1-1')
soup = BeautifulSoup(r.text, ""html.parser"")

with open(""output.csv"", ""w"") as f:
    writer = csv.writer(f)

    for table in soup.find_all('table', class_='statscontent'):
        team = table.find('a').text
        stats = [team] + [stat.text for stat in table.find_all('center')]

        writer.writerow(stats)
"
Python/Django: How to remove extra white spaces & tabs from a string?,""""""" """""".join(s.split())"
List minimum in Python with None?,">>> L = [None, 1, 2]
>>> min(x for x in L if x is not None)
1
"
Using argparse with function that takes **kwargs argument,"In [2]: import argparse
In [3]: def foo(*args, **kwargs):
   ...:     print('args',args)
   ...:     print('kwargs',kwargs)
   ...:     
In [4]: parser=argparse.ArgumentParser()
In [5]: parser.add_argument('arg1')
In [6]: parser.add_argument('arg2',nargs='+')

In [7]: args=parser.parse_args('one two three'.split())
In [8]: args
Out[8]: Namespace(arg1='one', arg2=['two', 'three'])
"
Intercept method calls in Python,"class Foo(object):
    def __getattribute__(self,name):
        attr = object.__getattribute__(self, name)
        if hasattr(attr, '__call__'):
            def newfunc(*args, **kwargs):
                print('before calling %s' %attr.__name__)
                result = attr(*args, **kwargs)
                print('done calling %s' %attr.__name__)
                return result
            return newfunc
        else:
            return attr
"
Python Select best 4 from a JSON list,"import itertools

new_lst = []
for _, g in itertools.groupby(lst, key=lambda x: x['id']):
    new_lst.extend(sorted(g, key=lambda x: x['score'], reverse=True)[:4])
"
"Read, Slice and Re-structure data file block-by-block in Python","from itertools import chain

def get_lines(f, n=1):
    return [f.next() for i in xrange(n)]

class BlockReader(object):
    def __init__(self, f, n=1):
        self.f = f
        self.n = n
    def __iter__(self):
        return self
    def next(self):
        return [self.f.next() for i in xrange(self.n)]

fmt = ""{:<12}"" + ""{:<16}""*6 + ""\n""
cols = [
    ""Time"",
    ""Head(Depth=0)"",
    ""Head(Depth=-1)"",
    ""Head(Depth=-2)"",
    ""Moisture(Depth=0)"",
    ""Moisture(Depth=-1)"",
    ""Moisture(Depth=-2)""
]

def main():
    with open(""simulation.txt"") as inf, open(""result.txt"",""w"") as outf:
        # throw away input header
        get_lines(inf, 5)
        # write output header
        outf.write(fmt.format(*cols))

        # read input file in ten-line chunks
        for block in BlockReader(inf, 10):
            # grab time value
            time = float(block[1].split()[1])

            # grab head and moisture columns
            data = (line.split()[2:4] for line in block[6:9])
            values = (map(float,dat) for dat in data)
            h,m = zip(*values)

            # write data to output file
            outf.write(fmt.format(*chain([time],h,m)))

if __name__==""__main__"":
    main()
"
Save.npy masked array to a .npy array with NaNs where mask == True,"import numpy as np

arr = np.arange(2*3*4).reshape(2,3,4).astype(float)
mask = arr % 5 == 0

marr = np.ma.array(arr, mask=mask)
print(np.ma.filled(marr, np.nan))
"
Separate a list into four parts based on percentage even if the list is not divisible by 10. Python,"from numpy import cumsum

def percentage_split(seq, percentages):
    cdf = cumsum(percentages)
    assert cdf[-1] == 1.0
    stops = map(int, cdf * len(seq))
    return [seq[a:b] for a, b in zip([0]+stops, stops)]
"
Extract a column from a list of rows with Python,"l=[['John', '35', 'UK'],['Emma', '43', 'UK'],['Lucy', '25', 'AU']]
set(list(zip(*l)[2]))
{'AU', 'UK'}
"
Return a Boolean instead of a string containing True or False in Python,"def weekend(day):
    if day == 'Saturday' or day == 'Sunday':
        return True
    else:
        return False
"
How to change value of a selection using Python on Tryton,"records = Model.search([]) #Get all the records you wan to write. 
Model.write(records, {'state': 'new_state'})
"
"Bash or Python, When print characters to terminal, how to CHANGE a character at a FIXED position?","import sys
sys.stdout.write('this is a very long line')
sys.stdout.write('\rshort line')
sys.stdout.write('\n')
"
output the command line called by subprocess?,"proc = subprocess.Popen(shlex.split(cmd))
print ""the commandline is %s"" % cmd
"
Removing Processing Instructions with Python lxml,"from lxml import etree

string = ""<text><?oasys _dc21-?>Text <i>contents</i></text>""
tree = etree.fromstring(string)

pis = tree.xpath(""//processing-instruction()"")
for pi in pis:
    etree.strip_tags(pi.getparent(), pi.tag)

print etree.tostring(tree)
"
python numerically solving an equation with no sign change between the upper and lower bound,"from scipy.optimize import fsolve
import numpy as np

def f(r):
    return 0.1 + 1 / (2 * r ** 2) - 2 / (3 * np.sqrt(r ** 3))

r = fsolve(f, 1)
f(r)
"
Count multiple occurrences in a set list,">>> data = [[' ', ' ', ' ', ' ', ' ', ' ', ' '], 
            [' ', ' ', ' ', ' ', ' ', ' ', ' '], 
            [' ', ' ', ' ', ' ', ' ', ' ', ' ']]
>>> sum(x.count(' ') for x in data)
21
"
how to permute n elements from list recursively in python?,">>> from itertools import product
>>> list(product([0,1,5], repeat=2))
[(0, 0), (0, 1), (0, 5), (1, 0), (1, 1), (1, 5), (5, 0), (5, 1), (5, 5)]
>>> list(product([2,3], repeat=3))
[(2, 2, 2), (2, 2, 3), (2, 3, 2), (2, 3, 3), (3, 2, 2), (3, 2, 3), (3, 3, 2), (3, 3, 3)]
"
Merging dictionaries using a counter,"In [1]: import itertools
In [2]: x = {'a': 'foo', 'b': 'foobar'}
In [3]: y = {'c': 'barfoo', 'd': 'bar'}

In [4]: z = [key for key in itertools.chain(x, y)]

In [5]: z
Out[5]: ['a', 'b', 'c', 'd']

In [6]: dict(enumerate(z))
Out[6]: {0: 'a', 1: 'b', 2: 'c', 3: 'd'}

In [7]: dict(enumerate(z, 1))
Out[7]: {1: 'a', 2: 'b', 3: 'c', 4: 'd'}
"
How do I simulate a progress counter in a command line application in Python?,time.sleep(1)
"Use Numpy Multidimensional Array Slicing Without Using the [slice,slice] Syntax?","x = arr.__getitem__((slice(4, 6), slice(9, 10), slice(None, None, -1)))
x.__setitem__(0, 100)
"
"Pythonic way to merge two overlapping lists, preserving order","def merge(a, b):
    while True:
        try:
            idx = b.index(a[-1]) + 1  # leftmost occurrence of a[-1] in b
        except ValueError:  # a[-1] not in b
            return a + b
        if a[-idx:] == b[:idx]:
            return a + b[:idx]
"
How to plot values for multiple factors from one column across several dates in pandas + matplotlib?,"
import matplotlib.pyplot as plt
import pandas as pd
from pandas import Timestamp


df = pd.DataFrame({'animal': {12: 'dog', 44: 'dog', 47: 'dog', 69: 'rabbit', 76: 'rabbit', 84: 'dog', 122: 'rabbit', 162: 'rabbit', 177: 'rabbit', 190: 'rabbit', 217: 'dog', 219: 'dog', 220: 'dog', 226: 'rabbit'},
 'count': {12: 34573, 44: 30676, 47: 41821, 69: 56880, 76: 73172, 84: 30581, 122: 52895, 162: 58430, 177: 57132, 190: 53903, 217: 32001, 219: 35776, 220: 31095, 226: 53809},
 'date': {12: Timestamp('2014-12-29 00:00:00'), 44: Timestamp('2014-12-28 00:00:00'), 47: Timestamp('2014-12-31 00:00:00'), 69: Timestamp('2014-12-29 00:00:00'), 76: Timestamp('2014-12-31 00:00:00'), 84: Timestamp('2014-12-26 00:00:00'), 122: Timestamp('2014-12-25 00:00:00'), 162: Timestamp('2014-12-30 00:00:00'), 177: Timestamp('2014-12-27 00:00:00'), 190: Timestamp('2014-12-28 00:00:00'), 217: Timestamp('2014-12-27 00:00:00'), 219: Timestamp('2014-12-30 00:00:00'), 220: Timestamp('2014-12-25 00:00:00'), 226: Timestamp('2014-12-26 00:00:00')}})

df['animal'] = df['animal'].astype('category')
df = df.set_index('date')


df['day'] = df.index.day
df = df.sort_values(by='day')
grouped = df.groupby(['animal'])
fig, ax = plt.subplots()
for key, group in grouped:
    group.plot('day', 'count', label=key, ax=ax)

plt.legend(loc='best')

plt.show()
"
How to find a min value of a row in a specified column in a tuple - Python 2.6?,">>> from itertools import groupby
#filter items that contain '00:00'
>>> mylist = [x for x in mylist if x[-2] != '00:00' ]

#now group lists based on the the second last item
for k,g in groupby(mylist, key = lambda x :x [-2]):
    #find the min among the grouped lists based on the last item
    minn = min(g, key = lambda x : map(int,x[-1].split(':'))) 
    print minn
...     
['20120903', 'melon', 'shelf1', '05:31', '08:01']
['20120903', 'melon', 'shelf1', '10:18', '14:01']
['20120904', 'melon', 'shelf1', '05:32', '14:02']
['20120903', 'apple', 'shelf5', '05:34', '14:02']
['20120904', 'apple', 'shelf5', '05:33', '14:02']
"
python string to date ISO 8601,"def YYMMDD0FtoYYYYMMDD(date):
    return dt.datetime.strftime(dt.datetime.strptime(date, ""%y%m%d0F""), ""%Y-%m-%d"")
"
check if a string from a file exists in a list of list of strings: python,">>> l = [['str', 'foo'], ['bar', 'so']]

>>> s = 'foo'
>>> any(s in x for x in l)
True

>>> s = 'nope'
>>> any(s in x for x in l)
False
"
Removing nan in array at position from another numpy array,"mask = ~np.isnan(x) & ~np.isnan(y)
x = x[mask]
y = y[mask]
"
Python3 Unicode Decode Error,"import math

initMsg = '11101000110100001100101...'  # truncated due post limits.
decMsg = '11101000110100001100101...'

# Only printing the first 25 chars of the message for bevity:

a = int(initMsg,2)
print(a.to_bytes(math.ceil(a.bit_length()/8),'big')[:25])

a = int(decMsg,2)
print(a.to_bytes(math.ceil(a.bit_length()/8),'big')[:25])

a = int(decMsg+'0000000',2)
print(a.to_bytes(math.ceil(a.bit_length()/8),'big')[:25])

a = int(decMsg[:-1],2)
print(a.to_bytes(math.ceil(a.bit_length()/8),'big')[:25])
"
Opencv Python display raw image,"import numpy as np
fd = open('flight0000.raw', 'rb')
rows = 480
cols = 640
f = np.fromfile(fd, dtype=np.uint8,count=rows*cols)
im = f.reshape((rows, cols)) #notice row, column format
fd.close()
"
Find common sub string from the list of strings,"def find_prefix(string_list):
    prefix = []
    for chars in zip(*string_list):
        if len(set(chars)) == 1:
            prefix.append(chars[0])
        else:
            break
    return ''.join(prefix)
"
Print file passed in as argument,"print(f.read())
"
"how to sort class on datetime, sort collections.deque","class ReportDeque(deque):
    """"""
    Container for processing, sorting Report objects
    """"""

    def sort(self, *args, **kwargs):        
        items = [self.pop() for x in xrange(len(self))]
        items.sort(*args, **kwargs)
        self.extend(items)
"
How to use *args to combine multiple lists?,">>> l1 = [['a', 'b', 'c'], ['d', 'e', 'f']]
>>> l2 = [['A', 'B', 'C'], ['D', 'E', 'F']]
>>> lists = (l1, l2)
>>> [sum(l, []) for l in zip(*lists)]
[['a', 'b', 'c', 'A', 'B', 'C'], ['d', 'e', 'f', 'D', 'E', 'F']]
"
python changing integers/ floats to None in list,"for i in range(len(content2)):
    if not content2[i]:
        content2[i] = None
"
`pandas.DataFrame.apply` in a row by row operation,"In [23]: df.apply(lambda x: np.sort(x.values)[::-1], axis=1)
Out[23]: 
                   0         1         2         3         4
2012-10-17  2.602967  1.542735  1.081290  0.748706  0.682501
2012-10-18  2.482998  0.716789  0.148083  0.094104  0.058414
2012-10-19  2.396277  2.169018  1.365622  0.590767  0.524733
2012-10-20  2.138740  1.542485  1.173894  0.513535  0.186261
2012-10-21  1.401872  1.358439  0.919931  0.495713  0.055136
2012-10-22  1.116935  1.010086  0.506086  0.350249  0.323305
"
Round columns in pandas dataframe,"In [143]:
df[['Y','X']].apply(lambda x: pd.Series.round(x, 3))

Out[143]:
        Y      X
0  35.973 -2.735
1  35.592 -2.904
2  35.330 -3.391
3  35.393 -3.929
4  35.579 -3.943
5  35.520 -3.409
6  35.759 -3.079
"
using python WeakSet to enable a callback functionality,">>> class ClassB:
...     def listener(self, deleted):
...         print('ClassA {} was deleted, notified ClassB {}'.format(id(deleted), id(self)))
... 
>>> def listener1(deleted):
...     print('ClassA {} was deleted, notified listener1'.format(id(deleted)))
... 
>>> def listener2(deleted):
...     print('ClassA {} was deleted, notified listener2'.format(id(deleted)))
... 
>>> # setup, one ClassA and 4 listeners (2 methods, 2 functions)
... 
>>> a = ClassA()
>>> b1 = ClassB()
>>> b2 = ClassB()
>>> a.registerCallback(b1.listener)
>>> a.registerCallback(b2.listener)
>>> a.registerCallback(listener1)
>>> a.registerCallback(listener2)
>>> 
>>> # deletion, we delete one instance of ClassB, and one function
... 
>>> del b1
>>> del listener1
>>> 
>>> # Deleting the ClassA instance will only notify the listeners still remaining
... 
>>> del a
ClassA 4435440336 was deleted, notified ClassB 4435541648
ClassA 4435440336 was deleted, notified listener2
"
SymPy express variable in terms of another,"In [1]: from sympy import *

In [2]: x, y = symbols('x, y')

In [3]: expr = 2*x - 7*y

In [4]: solve(expr, y)
Out[4]: [2*x/7]
"
What does this Perl XML filter look like in Python?,"curl -u $1:$2 --silent ""https://mail.google.com/mail/feed/atom"" | python -c ' 
import sys
for s in sys.stdin:
    s=s.strip()
    if not s: print '\t',
    else: print s
' 
"
"multiprocessing GUI schemas to combat the ""Not Responding"" blocking","#!/usr/bin/env python3
import multiprocessing, time, random, sys
from PySide.QtCore import * # equivalent: from PyQt4.QtCore import *
from PySide.QtGui import *   # equivalent: from PyQt4.QtGui import *

def compute(num):
    print(""worker() started at %d"" % num)
    random_number = random.randint(1, 6)
    if random_number in (2, 4, 6):
        raise Exception('Random Exception in _%d' % num)
    time.sleep(random_number)
    return num

class MainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.toolBar = self.addToolBar(""Toolbar"")
        self.toolBar.addAction(QAction('Add Task', self, triggered=self.addTask))
        self.list = QListWidget()
        self.setCentralWidget(self.list)

        # Pool of Background Processes
        self.pool = multiprocessing.Pool(processes=4)

    def addTask(self):
        num_row = self.list.count()
        self.pool.apply_async(func=compute, args=(num_row,), callback=self.receiveResult,
                              error_callback=self.receiveException)
        item = QListWidgetItem(""item %d"" % num_row)
        item.setForeground(Qt.gray)
        self.list.addItem(item)

    def receiveResult(self, result):
        assert isinstance(result, int)
        print(""end_work(), where result is %s"" % result)
        self.list.item(result).setForeground(Qt.darkGreen)

    def receiveException(self, exception):
        error = str(exception)
        _pos = error.find('_') + 1
        num_row = int(error[_pos:])
        item = self.list.item(num_row)
        item.setForeground(Qt.darkRed)
        item.setText(item.text() + ' Retry...')
        self.pool.apply_async(func=compute, args=(num_row,), callback=self.receiveResult,
                              error_callback=self.receiveException)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())
"
concatenate strings based on ints from a list,">>> list0 = [""Test"", ""Test2"", ""More text"", ""Test123"", ""ttt"", ""abc"", ""okokok"", ""Hello""]
>>> list1 = [ [0, 1], [2], [3], [4,5,6], [7]]
>>> [''.join([list0[i] for i in indices]) for indices in list1]
['TestTest2', 'More text', 'Test123', 'tttabcokokok', 'Hello']
"
Unable to get set intersection to work,"def complex_file_to_dict(filename):
    out = dict()
    for line in open(filename):
        line = line.strip()
        if line.startswith('d.complex'):
            name = line
            out[name] = set()
        elif line:
            out[name].add(line)

    return out

res_1 = complex_file_to_dict('file1.txt')
res_2 = complex_file_to_dict('file2.txt')

for k1, set_1 in res_1.iteritems():
    for k2, set_2 in res_2.iteritems():
      print k1
      print k2
      for v in set_1 - set_2:
        print v
      print
"
How can I search a file for all text lines prefaced with numbers in a certain format and move them to a new line,"import re
import itertools
import textwrap

if __name__=='__main__':
    print ""{0:^78}"".format(""King James Bible"")

    books=iter(['Genesis', 'Exodus', 'Leviticus', 'Numbers', 'Deuteronomy', 'Joshua',
           'Judges', 'Ruth', 'I Samuel', 'II Samuel', 'I Kings', 'II Kings',
           'I Chronicles', 'II Chronicles', 'Ezra', 'Nehemiah', 'Esther', 'Job', 'Psalms',
           'Proverbs', 'Ecclesiastes', 'Song of Solomon', 'Isaiah', 'Jeremiah',
           'Lamentations', 'Ezekiel', 'Daniel', 'Hosea', 'Joel', 'Amos', 'Obadiah',
           'Jonah', 'Micah', 'Nahum', 'Habakkuk', 'Zephaniah', 'Haggai', 'Zechariah',
           'Malachi', 'Matthew', 'Mark', 'Luke', 'John', 'Acts', 'Romans', 'I Corinthians',
           'II Corinthians', 'Galatians', 'Ephesians', 'Philippians',
           'Colossians', 'I Thessalonians', 'II Thessalonians', 'I Timothy', 'II Timothy',
           'Titus', 'Philemon', 'Hebrews', 'James', 'I Peter', 'II Peter', 'I John',
           'II John', 'III John', 'Jude', 'Revelation'])

    with open(""KJV.txt"", ""rb"") as book:
        contents=book.read()
        data=re.split(r'(\d+:\d+)',contents)[1:]    
        del contents

    word_search = raw_input(r'Enter a word to search: ')

    for chapter_verse, line in itertools.izip(*[iter(data)]*2):
        if chapter_verse=='1:1':
            book=next(books)
        line=' '.join(line.split())
        if word_search in line:
            line=textwrap.fill(line,width=78)
            print('''\
{b} {c}
{l}
'''.format(b=book,c=chapter_verse,l=line))
"
specifying start and end positions from python list,"lst = ['100  0.0', '101  0.7', '102  0.8', '103  0.7', '104  0.0', '105  0.7', '106  0.8', '107  0.0']
start = False
results = []
prevEndPos = -1
for e in lst :
    elems = e.split()
    pos = int(elems[0])
    score = float(elems[1])
    print pos, score
    if score >= 0.6 :
        if start == False :
            start = True
            startPos = pos
        prevEndPos = pos
    else :
        if start :
            start = False
            endPos = prevEndPos
            results.append((startPos, endPos))

print results
"
Selecting item in a string from a starting point retrieved via regex (Python),"line = s[i]
idx = line.find(pattern)
if idx >= 0:
    end = idx+len(pattern)
    selection.append(line[end:end+5])
"
"Is this a ""pythonic"" method of executing functions as a python switch statement for tuple values?",">>> def run():
...   print 'run'
... 
>>> def walk():
...   print 'walk'
... 
>>> def talk():
...    print 'talk'
>>> switch={'run':run,'walk':walk,'talk':talk}
>>> switch['run']()
run
"
"how to write a conditional list comprehension, with ""extend"" functionality","nouns = [x for key, value in pos_dictionary.iteritems() if key.startswith('NN') for x in value]
"
How to read Python comprehension with two expressions?,"for row in matrix:
    for x in row:
        print x
"
How to count the number of words in a sentence?,len(s.split())
MySQL select number of element for field,"mysql> create table test (id int, name varchar(100));
Query OK, 0 rows affected (0.21 sec)

mysql> insert into test values (1,'foo'),(2,'foo'),(3,'foo'),(4,'bar'),(5,'oop'),(6,'bar'),(7,'oop');
Query OK, 7 rows affected (0.02 sec)
Records: 7  Duplicates: 0  Warnings: 0

select id,
name,
number 
from ( 
   select *, 
   @rn := if(@prev = name, @rn+1,0) as number , 
   @prev:=name 
   from test,(select @rn:=0,@prev:='')r order by name 
)t ;
"
Writing a function that prints a pyramid - two parameters,"def pyramid(h,symbol=""#""):
    for i in range(h):
        print("" "" * (h-i - 1) + symbol * (2 * i + 1))
    print()

pyramid(5)
"
Using lambda to create new list by altering/modifying old list,"
>>> oldlist = ['a','b','c']
>>> [str(i) + x for i, x in enumerate(oldlist, 1)]
['1a', '2b', '3c']
"
Python: Strip Everything but Numbers,"import re

numbers = re.compile('\d+(?:\.\d+)?')
numbers.findall(""It took 2.3 seconds"")
"
Add new keys to a dictionary while incrementing existing values,"from collections import Counter
count = Counter(x[3] for x in my_csv_reader)
"
"Python, Pandas: average every 2 rows together",">>> s = pd.Series(range(10))
>>> s
0    0
1    1
2    2
3    3
4    4
5    5
6    6
7    7
8    8
9    9
>>> ((s + s.shift(-1)) / 2)[::2]
0    0.5
2    2.5
4    4.5
6    6.5
8    8.5
"
How do I parse with LXML recursively in an elegant way?,"for i in tree.xpath('//div[@id=""element1""]/text()'):
    print i
"
Extract tuple from list,"lst[0]
"
Python: duplicating each element in a list,">>> oldList = [1, 2, 3, 4]
>>> newList = [x for x in oldList for _ in range(2)]
>>> newList
[1, 1, 2, 2, 3, 3, 4, 4]
"
How can display the lines from linux log file in browser,"{{ lines|linebreaks }}
"
Round robin on iterable,"class RoundRobin:
    def __init__(self, iterable):
        self._iterable = set(iterable)
        self._removed = set()

    def __iter__(self):
        for value in chain.from_iterable(self.repeat()):
            yield value

    def remove(self, item):
        self._removed.add(item)
        self._iterable.remove(item)

    def add(self, item):
        self._iterable.add(item)

    def repeat(self):
        while True:
            for item in self._iterable.copy():
                if not item in self._removed:
                    yield item
            self._removed = set()
"
python convert list to dictionary,"dict([['two', 2], ['one', 1]])"
Python Pandas. Creating DataFrame with Series does not preserve dtype,"df2 = pd.DataFrame({'id': df[""id""], 'value': df[""value""]*2})
"
Python dictionary add in value / optimize,"from collections import Counter

l = {'users': [{'photos': [{'tags': [1,2,3,4,5]}, {'tags': [3,4,5]}]},
               {'photos': [{'tags': [1]}, {'tags': [2,3,4,5]}]}]}

tags = Counter(t for u in l['users'] for p in u['photos'] for t in p['tags'])
print tags  # prints Counter({3: 3, 4: 3, 5: 3, 1: 2, 2: 2})
"
Python: Data validation using regular expression,"import re
data = ""asdsaq2323-asds""
if re.match(""^[a-zA-Z0-9*]+$"", data):
    print ""match""
else:
    print ""no match""
"
Python list to txt,"def random_grid(file):
    grid = []
    num_rows = raw_input(""How many raws would you like in your grid? "")
    num_columns = raw_input(""How many columns would you like in your grid? "")
    min_range = raw_input(""What is the minimum number you would like in your grid? "")
    max_range = raw_input(""what is the maximum number you would like in your grid? "")
    for row in range(int(num_rows)):
        grid.append([])
        for column in range(int(num_columns)):
            grid[row].append(random.randint((int(min_range)),(int(max_range))))         
    for row in grid:
        x = (' '.join([str(x) for x in row])) 
        print x

        with open(r""test.txt"", 'a') as text_file:
            text_file.write(x)
            text_file.write(""\n"")
"
Query when parameter is none django,"if y is None:
    qs = Model.objects.filter(x=x).filter(z=z)
elif z is None:
    qs = Model.objects.filter(x=x).filter(y=y)
...
"
ZeroMQ Pub/Sub simplest example is not working - What am I doing wrong?,"import sys
import zmq

port = ""5556""

context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.setsockopt(zmq.SUBSCRIBE, """")

print ""Collecting updates from weather server...""
socket.connect (""tcp://127.0.0.1:%s"" % port)

while True:
    print socket.recv()
"
Multiply scipy.lti transfer functions,"from scipy.signal.ltisys import TransferFunction as TransFun
from numpy import polymul,polyadd

class ltimul(TransFun):
    def __neg__(self):
        return ltimul(-self.num,self.den)

    def __mul__(self,other):
        if type(other) in [int, float]:
            return ltimul(self.num*other,self.den)
        elif type(other) in [TransFun, ltimul]:
            numer = polymul(self.num,other.num)
            denom = polymul(self.den,other.den)
            return ltimul(numer,denom)

    def __div__(self,other):
        if type(other) in [int, float]:
            return ltimul(self.num,self.den*other)
        if type(other) in [TransFun, ltimul]:
            numer = polymul(self.num,other.den)
            denom = polymul(self.den,other.num)
            return ltimul(numer,denom)

    def __rdiv__(self,other):
        if type(other) in [int, float]:
            return ltimul(other*self.den,self.num)
        if type(other) in [TransFun, ltimul]:
            numer = polymul(self.den,other.num)
            denom = polymul(self.num,other.den)
            return ltimul(numer,denom)

    def __add__(self,other):
        if type(other) in [int, float]:
            return ltimul(polyadd(self.num,self.den*other),self.den)
        if type(other) in [TransFun, type(self)]:
            numer = polyadd(polymul(self.num,other.den),polymul(other.den,self.num))
            denom = polymul(self.den,other.den)
            return ltimul(numer,denom)

    def __sub__(self,other):
        if type(other) in [int, float]:
            return ltimul(polyadd(self.num,-self.den*other),self.den)
        if type(other) in [TransFun, type(self)]:
            numer = polyadd(polymul(self.num,other.den),-polymul(other.den,self.num))
            denom = polymul(self.den,other.den)
            return ltimul(numer,denom)

    def __rsub__(self,other):
        if type(other) in [int, float]:
            return ltimul(polyadd(-self.num,self.den*other),self.den)
        if type(other) in [TransFun, type(self)]:
            numer = polyadd(polymul(other.num,self.den),-polymul(self.den,other.num))
            denom = polymul(self.den,other.den)
            return ltimul(numer,denom)

    # sheer laziness: symmetric behaviour for commutative operators
    __rmul__ = __mul__
    __radd__ = __add__
"
Find the Number of even intergers in a sequence,"def find_even_count():
    count = 0
    x = raw_input(""Enter a value, or q to quit: "")
    while (x != ""q"") and (x > 0):
        if (int(x) % 2 == 0):
            count += 1
        x = raw_input(""Enter a value, or q to quit: "")
    return count
"
urllib keeps freezing while trying to pull HTML data from a website - is my code correct?,"import requests
import BeautifulSoup

r = requests.get('http://example.com')
html = r.content
soup = BeautifulSoup(html)
table = soup.find(""table"", {""id"": ""targettable""})
"
Anyone offer a better solution? Right to left regex. using python,"re.search(r'[|]([^|]*)[|]Ab Initio Software', name, re.IGNORECASE).group(1)
"
Check if string contains a certain amount of words of another string,">>> [(s, st1.find(s)) for s in (' '.join(li[i:i+n]) for i in range(len(li)-n+1)) 
...     if s in st1]
[('D E', 6)]
"
Python List Question,"duplicate = []
# Sort the list so we can compare adjacent values
fail.sort()
#if you didn't want to modify the list in place you can use:
#sortedFail = sorted(fail)
#      and then use sortedFail in the rest of the code instead of fail
for i, x in enumerate(fail):
    if i+1 == len(fail):
        #end of the list
        break
    if x[:2] == fail[i+1][:2]:
        if x not in duplicate:
            duplicate.add(x)
        if fail[i+1] not in duplicate:
            duplicate.add(fail[i+1])
# diff is just anything not in duplicate as far as I can tell from the explanation
diff = [d for d in fail if d not in duplicate]
"
Decryption algorithm for a previously made encryption algorithm - python,"def conv_sym(o):
    o = o.replace('11','a')
    o = o.replace('12','b')
    o = o.replace('13','c') 
    o = o.replace('14','d')
    o = o.replace('15','e') 
    o = o.replace('21','f') 
    o = o.replace('22','g') 
    o = o.replace('23','h') 
    o = o.replace('24','i') 
    o = o.replace('25','j') 
    o = o.replace('31','k') 
    o = o.replace('32','l')   
    o = o.replace('33','m') 
    o = o.replace('34','n') 
    o = o.replace('35','o') 
    o = o.replace('41','p') 
    o = o.replace('42','q') 
    o = o.replace('43','r')
    o = o.replace('44','s')
    o = o.replace('45','t') 
    o = o.replace('51','u') 
    o = o.replace('52','v') 
    o = o.replace('53','w')
    o = o.replace('54','x') 
    o = o.replace('55','y') 
    o = o.replace('61','z') 
    o = o.replace('62',' ') 
    return o

enc_str = ""41114444""
dec_str = """"
while len(enc_str) > 0:
    sym = enc_str[:2]
    dec_str += conv_sym(sym)
    enc_str = enc_str[2:]
print (dec_str)
"
More elegant way to initialize list of duplicated items in Python,"def uniq(base, l):
    # function used to replace all values with the base
    nl = []
    for i in l:
        if type(i) is list:
            nl.append(uniq(base, i)) # recursion for deep lists
        else:
            nl.append(base)
    return nl
"
Matplotlib: set x y label in one line,"fig = plt.figure()
ax = fig.add_subplot(111, xlabel=""time"", ylabel=""money"")
"
JSON to pandas DataFrame,pd.read_json(elevations)
Python: Concatenate two strings for getting a variable from a class,"for attr, value in vars(student).iteritems():
    print attr, value
"
How can I avoid redundancy when I handle default arguments to modules that may also be parsed from the command line?,"#!/usr/bin/env python2.7
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

parser = ArgumentParser(prog='my_program',
                        formatter_class=ArgumentDefaultsHelpFormatter)
parser.add_argument('-a', default='alpha', help='your favorite greek letter')
parser.add_argument('-b', action='store_true', help='print numbers in binary format')

def funky(a=parser.get_default('a'), b=parser.get_default('b')):
    pass

if __name__ == '__main__':
    args = parser.parse_args()
    funky(**args.__dict__)
"
Reverse a string,''.join(reversed(string))
Python - Returning max number in an array. Errors,"In [4]: s = ['1.04','1.6','1.14']

In [5]: s_floats = [float(x) for x in s]

In [6]: s_floats
Out[7]: [1.04, 1.6000000000000001, 1.1399999999999999]
"
Unsure how to web-scrape a specific value that could be in several different places,"import re

from bs4 import BeautifulSoup
import requests

url = 'https://zkillboard.com/kill/44998359/'

pattern = re.compile(r""(?s)Name: (.*?)Security: (.*?)Corp: (.*?)Alliance: (.*?)"")

with requests.Session() as session:
    session.headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36'}

    response = session.get(url)    
    soup = BeautifulSoup(response.content)

    data = soup.select('form.form textarea#eft')[0].text

    for name, security, corp, alliance in pattern.findall(data):
        print name.strip()
"
How to add unicode character before a string? [Python],"lst = ['blahblah', 'boy', 'cool']

for word in lst:
    print(type(word.decode(""utf-8"")))
"
"What is a clean, pythonic way to have multiple constructors in Python?","class Cheese():
    def __init__(self, num_holes = None):
        if num_holes is None:
            ...
"
Toeplitz matrix using numpy/scipy,"from numpy import concatenate, zeros
from scipy.linalg import toeplitz

toeplitz(concatenate([[1., -.25], zeros(20)]))
"
Best way to locate this element in selenium?,"element = browser.find_elements_by_xpath(""//div[@style='visibility: visible; display: block;']/iframe[@style='height: 600px;']"")
"
Parsing data between multiple brackets and different kind of brackets,"from pyparsing import *

LBRACK,RBRACK,LBRACE,RBRACE,LANGLE,RANGLE,VERT_BAR = map(Suppress,""[]{}<>|"")

expr = Forward()

ident = Word(alphas, alphanums+'-_')

optional_expr = (LBRACK + expr + RBRACK)
reqd_expr = (LBRACE + expr + RBRACE)
user_expr = (LANGLE + OneOrMore(ident) + RANGLE)

term = ident | optional_expr | reqd_expr | user_expr
term = Group(term * (2,None)) | term

expr <<= OneOrMore(term + ~VERT_BAR | Group(delimitedList(term,VERT_BAR)))


tests = """"""\
element-type { a | b | c | d} [ duration ]
tcp [ udp-mode { off | on { encrypted | plain }}]"""""".splitlines()

for t in tests:
    print t
    print expr.parseString(t).asList()[0]
    print
"
Accented characters in Matplotlib,"ax.set_yticklabels(['\xe9', '\xe3', '\xe2'])"
How to find x to make sure sum(row[i])-sum(clo[i])=bi in python?,">>> from numpy import *
>>> from scipy import optimize
>>> def f1(p, b=array([5,-4,5,-6])):
    mp=matrix(array(p).reshape((4,4))) #or reshape((b.size, b.size))
    return sum(array(dot(mp-mp.T, array([1,1,1,1]))-b)**2) #or ones((b.size,))

>>> optimize.fmin(f1, range(16))
Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 467
         Function evaluations: 743
array([  8.55102418e-04,   1.19481331e+00,   9.84510105e-01,
         3.42579838e+00,   3.37327593e+00,   3.95448146e+00,
         1.18750846e+01,   8.73475559e+00,   5.64496730e+00,
         9.28651143e+00,   9.33505858e+00,   1.59977154e+01,
        -8.41311844e+00,   1.75017928e+01,   1.30696514e+01,
         1.46774131e+01])
"
Find if a number is a possible sum of two or more numbers in a given set - python,"def numPens(n):
  pen_sizes = [5, 8, 24]
  results = [True]
  for i in range(1, n+1):
    results.append(any(i >= size and results[i - size] for size in pen_sizes))
  return results[n]
"
In Python can one implement mixin behavior without using inheritance?,"def mixer(*args):
    """"""Decorator for mixing mixins""""""
    def inner(cls):
        for a,k in ((a,k) for a in args for k,v in vars(a).items() if callable(v)):
            setattr(cls, k, getattr(a, k).im_func)
        return cls
    return inner

class Mixin(object):
    def b(self): print ""b()""
    def c(self): print ""c()""

class Mixin2(object):
    def d(self): print ""d()""
    def e(self): print ""e()""


@mixer(Mixin, Mixin2)
class Foo(object):
    # Somehow mix in the behavior of the Mixin class,
    # so that all of the methods below will run and
    # the issubclass() test will be False.

    def a(self): print ""a()""

f = Foo()
f.a()
f.b()
f.c()
f.d()
f.e()
print issubclass(Foo, Mixin)
"
How do I convert part of a python tuple (byte array) into an integer,"import struct

response = (0, 0, 117, 143, 6)
struct.unpack("">I"", ''.join([chr(x) for x in response[:-1]]))
"
Python regex get text between last forward slash and then before first hyphen,"^.*\/([^-]*)-.*$
"
"Trying to determine the ""height"" of organisms Using Python Code","animals=[]
preys=[]

with open('AquaticFoodWeb.txt','r') as f:
    for line in f:
        animals.append(line.split()[0])
        preys.append(line.split()[-1])

height = {}

length = len(preys)
rank = 0
while preys != [None]*length:
    for index,(animal,prey) in enumerate(zip(animals,preys)):
        if prey not in animals:
            try:
                if height[prey] < rank:
                    height[prey] = rank
            except KeyError:
                height[prey] = 0

            height[animal] = height[prey] + 1

            preys[index] = None
            animals[index] = None
    rank += 1

print sorted(height.items(),key = lambda x:x[1],reverse=True)
"
"Django: Named URLs / Same Template, Different Named URL","def music_object_list(request, object_type, starts_with=None):
     if object_type == 'artists':
         return artist_list(request, starts_with=starts_with)
     elif object_type == 'albums':
         return album_list(request, starts_with=starts_with)
     ...
"
How do you do a python 'eval' only within an object context?,">>> class Foo(object):
...     @staticmethod
...     def bar():
...         return 3
>>> foo = Foo()
>>> eval('bar()', globals(), foo.__dict__)
NameError: name 'bar' is not defined
>>> eval('bar()', globals(), {k: getattr(foo, k) for k in dir(foo)}
3
"
Strange Output from Python urllib2,"import requests
r = requests.get('http://www.elegantthemes.com/gallery/')
print r.content
"
comparing row in numpy array,"import numpy as np
numrows, numcols = 10,3
x = np.random.random((numrows, numcols)) > 0.5
x = x.view(','.join(numcols * ['i1'])) # <- View the rows as a 1D structured array...

unique_vals, indicies = np.unique(x, return_inverse=True)
counts = np.bincount(indicies)

print unique_vals, counts
"
How to check for a necessary input of raw_input?,"ans = ''
while not ans: # While the input given is an empty string
    ans = raw_input('Enter: ')
"
Quickest way to move numbers from one list to another,"data2 = sorted(data)
import bisect

%%timeit
data2[bisect.bisect(data2,7):]
# 13.6 us per loop
"
Beautiful Soup to Find and Regex Replace text 'not within <a></a> ',"import BeautifulSoup
import re

soup = BeautifulSoup.BeautifulSoup()
html = '''
<html><body>
 <div> <a href=""www.test1.com/identify"">test1</a> </div>
 <div><br></div>
 <div><a href=""www.test2.com/identify"">test2</a></div>
 <div><br></div><div><br></div>
 <div>
   This should be identified 

   Identify me 1 

   Identify me 2 
   <p id=""firstpara"" align=""center""> This paragraph should be<b> identified </b>.</p>
 </div>
</body></html>
'''
soup.feed(html)
for txt in soup.findAll(text=True):
    if re.search('identi',txt,re.I) and txt.parent.name != 'a':
        newtext = re.sub(r'identi(\w+)', r'replace\1', txt.lower())
        txt.replaceWith(newtext)
print(soup)


<html><body>
<div> <a href=""www.test1.com/identify"">test1</a> </div>
<div><br /></div>
<div><a href=""www.test2.com/identify"">test2</a></div>
<div><br /></div><div><br /></div>
<div>
   this should be replacefied 

   replacefy me 1 

   replacefy me 2 
   <p id=""firstpara"" align=""center""> This paragraph should be<b> replacefied </b>.</p>
</div>
</body></html>
"
How to unpack a list?,"def foo(*mylist):
    bar(""first"", *mylist)

def bar(*vals):
    print ""|"".join(vals)

foo(""a"",""b"")
"
Python regex and using s/ in pattern,">>> import re
>>> sample = '.jalsdkjflkajsdf_lajsdlfIFIX_100(IFIX_asdf_200)'
>>> patternI1 = r'\.\w*(IPROC|IFIX|IPTAT)\w*?(\d\d*)\D*.*\(\w*(IPROC|IFIX|IPTAT)\w*?(\d\d*)\D*.*\)'
>>> re.search(patternI1, sample).groups()
('IFIX', '100', 'IFIX', '200')
"
Checking if sys.argv[x] is defined,"Arg_list = collections.namedtuple('Arg_list', arg_names)
args = Arg_list(*(args.get(arg, None) for arg in arg_names))
"
Pyinstaller Jinja2 TemplateNotFound,"# -*- mode: python -*-

# <<< START ADDED PART    
from PyInstaller.building.build_main import Analysis, PYZ, EXE, COLLECT, BUNDLE, TOC


def collect_pkg_data(package, include_py_files=False, subdir=None):
    import os
    from PyInstaller.utils.hooks import get_package_paths, remove_prefix, PY_IGNORE_EXTENSIONS

    # Accept only strings as packages.
    if type(package) is not str:
        raise ValueError

    pkg_base, pkg_dir = get_package_paths(package)
    if subdir:
        pkg_dir = os.path.join(pkg_dir, subdir)
    # Walk through all file in the given package, looking for data files.
    data_toc = TOC()
    for dir_path, dir_names, files in os.walk(pkg_dir):
        for f in files:
            extension = os.path.splitext(f)[1]
            if include_py_files or (extension not in PY_IGNORE_EXTENSIONS):
                source_file = os.path.join(dir_path, f)
                dest_folder = remove_prefix(dir_path, os.path.dirname(pkg_base) + os.sep)
                dest_file = os.path.join(dest_folder, f)
                data_toc.append((dest_file, source_file, 'DATA'))

    return data_toc

pkg_data = collect_pkg_data('<yourapplication>')  # <<< Put the name of your package here
# <<< END ADDED PART    

block_cipher = None

a = Analysis(['..\\CommerceApp_withPyInstaller\\run.py'],
             pathex=['D:\\PythonProjects\\CommerceAppExe'],
             binaries=None,
             datas=[],
             hiddenimports=[],
             hookspath=[],
             runtime_hooks=[],
             excludes=[],
             win_no_prefer_redirects=False,
             win_private_assemblies=False,
             cipher=block_cipher)
pyz = PYZ(a.pure, a.zipped_data,
             cipher=block_cipher)
exe = EXE(pyz,
          a.scripts,
          exclude_binaries=True,
          name='SupplyTracker',
          debug=False,
          strip=False,
          upx=True,
          console=True )
coll = COLLECT(exe,
               a.binaries,
               a.zipfiles,
               a.datas,
               pkg_data,  # <<< Add here the collected files
               strip=False,
               upx=True,
               name='SupplyTracker')
"
Merge dictionaries with the same values to a single dictionary,"dicts = [
 {'point': '-2.43896484341047, 53.4369463378926',
  'time': '2015-06-17 12:51:16+01:00',
  'title': 'Queen and Royal Family Members Visit Manchester'},
 {'point': '-0.150032043436181, 51.5402430395087',
  'time': '2015-06-20 12:52:29+01:00',
  'title': 'Price Harry Quits the Army to Concentrate on Charity Work'},
 {'point': '-0.150032043436181, 51.5402430395087',
  'time': '2015-06-26 17:01:19+01:00',
  'title': 'A true friend: Ukraine president asks Tony Blair to take on advisory role'},
 {'point': '-77.1075439345789, 35.456615048032',
  'time': '2015-06-26 17:01:19+01:00',
  'title': 'A true friend: Ukraine president asks Tony Blair to take on advisory role'}]

ans = []
for time, title in set((d['time'], d['title']) for d in dicts):
    points = [d['point'] for d in dicts if (d['time'], d['title']) == (time, title)]
    ans.append({
        'point' : points if len(points) > 1 else points[0],
        'time'  : time,
        'title' : title })
"
Checking for gzip or plain text and reading the file without checking extensions - python,"try: 
    fin = gzip.open(phrasetablefile, 'rb')
except:
    fin = open(phrasetablefile, 'rb')

for line in fin:
    pass # do something
fin.close()
"
how to print tags or id in tkinter used in python,"main_line = f.create_line(200,300,300,300, tags=""main_line_tag"", width=5)
tags_text = ', '.join(f.gettags(main_line))
line_text = ""%s: %s"" % (main_line, tags_text)
f.create_text(220,320, text=line_text)
"
What is the best way to access stored procedures in Django's ORM,"def make_instance(instance, values):
    '''
    Copied from eviscape.com

    generates an instance for dict data coming from an sp

    expects:
        instance - empty instance of the model to generate
        values -   dictionary from a stored procedure with keys that are named like the
                   model's attributes
    use like:
        evis = InstanceGenerator(Evis(), evis_dict_from_SP)

    >>> make_instance(Evis(), {'evi_id': '007', 'evi_subject': 'J. Bond, Architect'})
    <Evis: J. Bond, Architect>

    '''
    attributes = filter(lambda x: not x.startswith('_'), instance.__dict__.keys())

    for a in attributes:
        try:
            # field names from oracle sp are UPPER CASE
            # we want to put PIC_ID in pic_id etc.
            setattr(instance, a, values[a.upper()])
            del values[a.upper()]
        except:
            pass

    #add any values that are not in the model as well
    for v in values.keys():
        setattr(instance, v, values[v])
        #print 'setting %s to %s' % (v, values[v])

    return instance
"
Python change an array's value from array index,">>> yourDict = {'a':1, 'b':{'c':1, 'd': {'b':1}}}
>>> indexList = ['b','d','b']

>>> reduce(lambda d,i:d[i], indexList[:-1], yourDict)[indexList[-1]] = ""test""
>>> yourDict
{'a': 1, 'b': {'c': 1, 'd': {'b': 'test'}}}
"
Python - Search a list item that contains a string (match case),">>> pattern='First name'
>>> [s for s in mylist if re.search(r'\b{}\b'.format(pattern),s)]
['First name Mike']
"
Creating dictionaries in a faster way - Python,"dict_st={}
for line in f:
    for item in line.split():
        k, v = map(int, item.split('-'))
        dict_st.setdefault(k, []).append(v)
"
os.path.join producing an extra forward slash,"folder = 1
run_folder = os.path.join(currentwd, 'Folder_{:03d}'.format(folder))
"
wx.TextCtrl GetLineLength wx.CallAfter not working,"self.line_count = 0
while True:
    line = self.process1.stderr.readline().decode('utf-8')
    wx.CallAfter(self.appendAndTrim, line)
"
How to delete some characters from a string by matching certain character in python,">>> import timeit
>>> timeit.timeit(""'one, two'.split(',', 1)[0]"")
0.52929401397705078
>>> timeit.timeit(""'one, two'.partition(',')[0]"")
0.26499605178833008
"
Construct list of numbers of occurrences in list,">>> from collections import Counter
>>> Counter([1, 1, 2, 3, 3, 1, 2]).values()
[3, 2, 2]
>>> Counter([""a"", ""a"", ""b"", ""c"", ""c""]).values()
[2, 2, 1]
"
Python: PyQt QTreeview example - selection,"from PyQt5.QtWidgets import QTreeView,QFileSystemModel,QApplication

class Main(QTreeView):
    def __init__(self):
        QTreeView.__init__(self)
        model = QFileSystemModel()
        model.setRootPath('C:\\')
        self.setModel(model)
        self.doubleClicked.connect(self.test)

    def test(self, signal):
        file_path=self.model().filePath(signal)
        print(file_path)


if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    w = Main()
    w.show()
    sys.exit(app.exec_())
"
Serializing binary data in Python,"a = [b""abc\xf3\x9c\xc6"", b""xyz""]
serialised = json.dumps([s.decode(""latin1"") for s in a])
print [s.encode(""latin1"") for s in json.loads(serialised)]
"
Recursive sorting function for list in Python,"from collections import OrderedDict

dic = OrderedDict()

def insert(name):
    current_dic = dic
    current_name = ''
    for name_elem in name.split('::'):
        current_name += ('::' if current_name else '') + name_elem
        if not current_name in current_dic:
            current_dic[current_name] = OrderedDict()
        current_dic = current_dic[current_name]

for group in [""foo"", ""bar"", ""foo::fone"", ""foo::ftwo"", ""foo::ftwo::ffone""]:
    insert(group)
"
Is there any benefits for using * or ** in python?,"def add(a, b):
    return a + b

t = [5, 6]
print(add(*t))
"
Python Random Playing Card Generator Game,"elif num1 < 10:
    cardnum1 = num1

if num2 == 1:
    cardnum2 = ""Spades""
"
dictionary to JSON?,"import json

terms = {
     'root':      {'p': [],          'c': ['branch1', 'branch2', 'branch3']},
     'branch1':   {'p': ['root'],    'c': ['branch1.1']},
     'branch2':   {'p': ['root'],    'c': []},
     'branch3':   {'p': ['root'],    'c': []},
     'branch1.1': {'p': ['branch1'], 'c': []}
}

def transform(d, parent):
    return (
        {'name': parent}
            if not d[parent]['c'] else
        {'name': parent,
         'children': [transform(d, child) for child in d[parent]['c']]}
    )

print(json.dumps(transform(terms, 'root'), indent=2))
"
Multiple Paths Traversed and Displayed Filed type in Maya Menu with Python,"from functools import partial

# call this on every button selection
def test(filepath, ignore):
    # maya will send ""test(name, False)""; we just ignore the 'False'
    print ""Here's where I would reload"", filepath

example = cmds.window(title = 'example')
menubar = cmds.menuBarLayout()            

for name in folder_names:
    menuname = name
    if menuname:
        menuname = menuname.split(""/"")[-2] # we used trailing slashes
    else:
        menuname = ""root""
    cmds.menu(label = menuname)
    file_names = root_dict[name]
    file_names.sort()
    for fn in file_names:
        mi = cmds.menuItem(label = fn, command = partial(test, fn))
    cmds.setParent(menubar)
"
"Python: Zope's BTree OOSet, IISet, etc... Effective for this requirement?","import gc
import operator
import random
import time


nk = 1000

def popcon(d):
  for x in xrange(nk*1000):
    d['id%s' % x] = random.randrange(100*1000)

def sorted_container():
  ctr = dict()
  popcon(ctr)
  start = time.time()
  ctr_sorted = ctr.items()
  ctr_sorted.sort(key=operator.itemgetter(1))
  stend = time.time()
  return stend-start, ctr_sorted

def do_update(ctr, newones):
  start = time.time()
  dicol = dict(ctr)
  ctr.extend((k,v) for (k,v) in newones if v!=dicol.get(k,None))
  dicnu = dict(newones)
  ctr.sort(key=operator.itemgetter(1))
  newctr = [(k,v) for (k,v) in ctr if v==dicnu.get(k,v)]
  stend = time.time()
  return stend-start, newctr

def main():
  random.seed(12345)
  for x in range(3):
    duration, ctr = sorted_container()
    print 'dict-to-sorted, %d: %.2f sec, len=%d' % (x, duration, len(ctr))
    newones = [('id%s' % y, random.randrange(nk*100))
                for y in xrange(nk*990,nk*1010)]
    duration, ctr = do_update(ctr, newones)
    print 'updt-to-sorted, %d: %.2f sec, len=%d' % (x, duration, len(ctr))
    del ctr
    gc.collect()

main()
"
Python fill matrix with specific values,"values = set([1, 3, 5, 8])
"
Arranging number of strings using Python's lambda function,"def key_function(x):
    return len(x)

a = ['green egg','snail and lettuce','bacon','dorse naga','rutabaga ripple','cheese']
a.sort(key=key_function)
print a
"
Python Sympy angle of a complex number?,"expressionangle2 = sympy.log( n ).as_real_imag()[1]
"
Python - Capturing stdout of a multiple Popen subprocesses in real time to a file,"import subprocess


procs = []

for p in range(3):
        args = ['echo',""A Message from process #%d"" % p]
        #Funnel stdout to a file object, using buffering
        fout = open(""stdout_%d.txt"" % p,'w')
        p = subprocess.Popen(args,stdout=fout,bufsize=-1)
        procs.append(p)

#Wait for all to finish
for p in procs:
    p.communicate()
"
Python: Shorten If / Elif control flow tree (printing highest order string that is not None),"for msj in (level_3,level_2,level_1):
    if msj:
        print msj
        break
"
Using groupby to operate only on rows that have the same value for one of the columns pandas python,"import pandas as pd

org = ['doclist[0]', 'doclist[0]', 'doclist[1]', 'doclist[4]', 'doclist[4]']
np = [0, 1, 1, 1, 0]
pr = [0, 0, 0, 0, 1]
df = pd.DataFrame({'Organization':org, 'NP':np, 'Pr':pr})

# Make a ""lookup"" dataframe of the sums for each category
# (Both the ""NP"" and ""Pr"" colums of ""sums"" will contain the result)
sums = df.groupby('Organization').agg(lambda x: x['NP'].sum() + x['Pr'].sum())

# Lookup the result based on the contents of the ""Organization"" row
df['Sum'] = df.apply(lambda row: sums.ix[row['Organization']]['NP'], axis=1)
"
how to change the case of first letter of a string?,return s[0].upper() + s[1:]
Interpolation of values when zooming down,"import numpy as np
x = np.arange(16).reshape(4, 4)

xx = x.reshape(len(x) // 2, 2, x.shape[1] // 2, 2).transpose(0, 2, 1, 3).reshape(len(x) // 2, x.shape[1] // 2, -1).mean(-1)

print xx
"
Python: Extract JSON keys,">>> help(dict.keys)
Help on method_descriptor:

keys(...)
    D.keys() -> a set-like object providing a view on D's keys
"
Binary numbers of N digits,"n = 6
for i in xrange(16):
    b = bin(i)[2:]
    l = len(b)
    #b = str(0) * (n - l) + b  # <--------
    print b
"
How to compress a file with shutil.make_archive in python?,"tar = tarfile.open(fname + "".tar.gz"", 'w:qz')
tar.addfile(tarfile.TarInfo(""/home/user/file.txt""), ""/home/user/file.txt"")
tar.close()
"
"Removing a char from String, what's a more efficient way to do this?","def getAvailableLetters2(lettersGuessed):
    return string.ascii_lowercase.translate(None, lettersGuessed)

from timeit import timeit
print 'filter-->', timeit(""getAvailableLetters('Welcome')"", setup=""from __main__ import getAvailableLetters"")
print '.join-->', timeit(""getAvailableLetters1('Welcome')"",setup=""from __main__ import getAvailableLetters1"")
print 'trans-->', timeit(""getAvailableLetters2('Welcome')"",setup=""from __main__ import getAvailableLetters2"")
"
What is python 2.6 equivalent of iterfind(),">>> s='''<?xml version=""1.0"" encoding=""UTF-8""?>
... <drum>
...   <cmts>
...     <Pre_EQ>
...       <success field_name=""success"">1</success>
...       <coefficient field_name=""coefficient"">080118000000ffd00000ffe00000fff0001000200020fff000000010002000003fa0000000000020003000000020ffd00010001000000000000000000010000000000020ffc0000000000020000000500010ffe0fff0ffe0ffd0fff0fff0ffd0ffd0fff0</coefficient>
...     </Pre_EQ>
...   </cmts>
... </drum>'''
>>> tree = ET.fromstring(s)
>>> for elem in tree.findall('.//Pre_EQ/success'):
...     print elem.tag, elem.attrib, elem.text
... 
success {'field_name': 'success'} 1
>>>
>>>
>>> for elem in tree.findall('.//success'):
...     if elem.attrib.get('field_name') == ""success"":
...         print elem.tag, elem.attrib, elem.text
... 
success {'field_name': 'success'} 1
"
Python SQLITE3 SELECT query with datetime calculated string not working,"this_year = str(this_year)
"
How to apply function of multiple matrices to each element of a list of matrices with python numpy?,">>> array_a1 = np.array([[1, 2], [3, 4]])
>>> array_a2 = np.array([[5, 6], [7, 8]])
>>> array_a = np.array([array_a1, array_a2])
>>> array_b = np.array([[9, 10], [11, 12]])
>>> np.sum(f(array_a, array_b), axis=0)
array([[142, 156],
       [222, 244]])
"
Indexes of elements in Numpy array that satisfy conditions on the value and the index,"B = ind[A[ind]==value]
print B
[1 5]
"
how to check if 3 characters are in consecutive alpha order,">>> letters = ""lmn""
>>> ascii_lowercase.find(letters) != -1
True
"
"SOLVED: How do I create a ""Nested Loop"" that returns an item to the original list in Python and Scrapy","def parse(self, response):
    # Loop all the product elements, those div elements with a ""listing-item"" class
    for product in response.xpath('//div[@class=""listing-item""]'):
        # Create an empty item container
        item = ArcherItemGeorges()
        # Scrape the primary product name and keep in a variable for later use
        product_name = product.xpath('.//*[@class=""product-shop""]/h5/a/text()').extract()[0].strip()
        # Fill the 'product' field with the product name
        item['product'] = product_name
        # Fill the 'price' field with the scraped primary product price
        item['price'] = product.xpath('.//*[@class=""price-box""]/span/span[@class=""price""]/text()').extract()[0].strip()
        # Yield the primary product item. That with the primary name and price
        yield item
        # Now, for each product, we need to loop through all the subproducts
        for subproduct in product.xpath('.//*[@class=""more-views""]/following-sibling::div'):
            # Let's prepare a new item with the subproduct appended to the previous
            # stored product_name, that is, product + subproduct.
            item['product'] = product_name + ' ' + subproduct.xpath('a/text()').extract()[0].strip()
            # And set the item price field with the subproduct price
            item['price'] = subproduct.xpath('text()[2]').extract()[0].strip()
            # Now yield the composed product + subproduct item.
            yield item
"
Smallest ASCII Value in a List,"def alphabetize(s, delimiter="",""):
    values = s.split(delimiter)  # convert to a list
    result = []
    while values:
        # this is effectively select-sort - which is O(n**2) -
        # but even worse because deleting a list item is also
        # O(n), making it O(n**3) overall
        smallest = min(range(len(values)), key=values.__getitem__)
        result.append(values[smallest])
        del values[smallest]
    # rejoin the sorted items to a string
    return delimiter.join(result)
"
Regex matching CSS,"import re
p = re.compile(ur'\b(\w+):(\w+)(?=;)')
test_str = u"".pancake{height:200px;taste:delicious;}""

re.findall(p, test_str)
"
"If I have a list of words, how can I check if string does not contain any of the words in the list, and efficiently?","if any(word in stopWords for word in msg.split()):
    ...
"
Python sorting list of dictionaries by multiple keys,"def multikeysort(items, columns):
    from operator import itemgetter
    comparers = [((itemgetter(col[1:].strip()), -1) if col.startswith('-') else
                  (itemgetter(col.strip()), 1)) for col in columns]
    def comparer(left, right):
        for fn, mult in comparers:
            result = cmp(fn(left), fn(right))
            if result:
                return mult * result
        else:
            return 0
    return sorted(items, cmp=comparer)
"
Fliping dictionary key value Python,">>> from collections import defaultdict
>>> new_d = defaultdict(tuple)
>>> for k,v in d.items():
...     new_d[v] += (k,)
... 
>>> new_d
defaultdict(<type 'tuple'>, {0: (0, 4, 8), 1: (1, 5, 12), 2: (2, 6, 7, 10, 13, 14, 16), 3: (3,), 4: (9, 11, 15)})
"
Handling flexible function arguments in Python,"import inspect
import someapi

def foo(args*):
    argspec = inspect.getargspec(someapi.foo)

    if len(args) > len(argspec.args):
        args = args[:len(argspec.args)]

    return someapi.foo(*args)
"
Removing empty entries and adding them as a whitespace in the previous entry of a list,">>> s = ""The quick  brown fox""
>>> re.findall(r'((?:(?<=^\s)\s*)?\S+\s*(?=\s\S|$))', s)
['The', 'quick ', 'brown', 'fox']
>>> s1 = ""  The quick  brown fox""
>>> re.findall(r'((?:(?<=^\s)\s*)?\S+\s*(?=\s\S|$))', s1)
[' The', 'quick ', 'brown', 'fox']
"
Python division,">>> from __future__ import division
>>> (10 - 20) / (100 - 10)
-0.1111111111111111
"
How to retain the order of items in dictionary?,"Parameters = collections.OrderedDict()
Parameters = {""current"": '50mA', ""voltage"": '230', ""resistance"": '40 ohms'}                
"
django - convert mssql datetime to separate date and time,"import datetime
d=datetime.datetime.strptime(""2014-04-04 22:35:00.207"", ""%Y-%m-%d %H:%M:%S.%f"")
print (""Date: %s"" % (d.date()))
print (""Time: %s"" %(d.time()))
print (""Time: %s"" %(d.time().strftime(""%I:%M:%S %p"")))
"
For loop troubleshooting,"def hms(s):
    h = s / 3600
    s -= h * 3600
    m = s / 60
    s -= m * 60
    return (h, m, s)

print hms(10000)  # => (2, 46, 40)
print hms(1000)  # => (0, 16, 40)
"
Can I decode this audio format?,"import json, subprocess
file_name = u'/path/to/some/file.mp3'
command=[""/path/to/ffmpeg/bin/ffprobe"",
         '-print_format', 'json',
         '-v', 'quiet',
         '-show_error',
         '-show_format',
         #'-show_frames',
         #'-show_packets',
         '-show_streams',
         '-show_program_version',
         '-show_library_versions',
         '-show_versions',
         '-show_private_data',
         file_name]
process_data=subprocess.Popen(command, stderr = subprocess.PIPE, stdout = subprocess.PIPE)
returncode = process_data.wait()
json_result=json.loads(process_data.stdout.read())
print json_result.get(u'format')
"
Is it better to use root logger or named logger in Python,"import logging
import mylib
logger = logging.getLogger(__name__)

def main():
    logging.basicConfig(format='%(asctime)s %(module)s %(levelname)s: %(message)s',
                        datefmt='%m/%d/%Y %I:%M:%S %p', level=logging.INFO)  
    logger.info('Started')
    mylib.do_something()
    logger.info('Finished')

if __name__ == '__main__':
    main()
"
Pythonic way to extract the file name and its parent directory from the full file path?,"import os
full_filename = ""/path/to/file.txt""
fname = os.path.basename(full_filename)
onedir = os.path.join(os.path.basename(os.path.dirname(full_filename)), os.path.basename(full_filename))
"
How do I get a row of a 2d numpy array as 2d array,"a
#array([[1, 2],
#       [3, 4],
#       [5, 6]])

a.sum(1)
#array([ 3,  7, 11])

a.sum(1, keepdims=True)
#array([[ 3],
#       [ 7],
#       [11]])
"
Numpy change elements based on threshold and then do element by element addition,"m_ongoing = np.zeros((197,10))

for i in range(LOWER, UPPER + 1):
    fname = file_name+str(i)+"".txt""
    cur_resfile = np.genfromtxt(fname, delimiter = "","", skiprows = 1)

    # add one to the places where cur_file > 1
    m_ongoing[cur_resfile > 1] += 1
"
Separate odd and even numbers into different output files,"import numpy as np

a = np.loadtxt(""test.txt"")

np.savetxt(""odd.txt"", a[a%2==1])
np.savetxt(""even.txt"", a[a%2==0])
"
python for large data processing,"import multiprocessing

X = [""a"",""b""]
Y = [""c"",""d"",""e""]
Z= [""f"",""g""]

pool = multiprocessing.pool()
result_list = [] # create a list to store the simulation results

for A in itertools.combinations(X,1):
    for B in itertools.combinations(Y,2):
        for C in itertools.combinations(Z, 2):

        D = A + B + C
        result_list.append(pool.apply_async(
                simulation_function,
                args=(D,))) # note the extra comma - args must be a tuple

# do other stuff
# now iterate over result_list to check the results when they're ready
"
"Is it possible to alter the values in a dictionary, keeping the key value constant?","d = {}
for i in range(100):
    if not i % 4:
        if 'Four' not in d:
            d['Four'] = []
        d['Four'].append(i)
"
"Saving a deep copy of an object, then modifying it and saving another copy?","seq = 1
a_dict = {}
moves = []
while seq < 4:
 a_dict['key' + str(seq)] = 'value' + str(seq)
 moves.append(copy.deepcopy(a_dict))
 seq = seq + 1

print moves
"
"Is it possible to alter the values in a dictionary, keeping the key value constant?","d = {'Four': [i for i in range(100) if not i % 4]}
"
Reformatting Dates after strptime Python,"import csv
import datetime
with open('test.txt','r') as infile, open('output.txt','w') as outfile:
    inr = csv.reader(infile,delimiter='\t')
    ouw = csv.writer(outfile,delimiter='\t')
    for row in inr:
            d = datetime.datetime.strptime(row[0],'%Y-%m-%d %H:%M:%S')
            p = float(row[1])
            nr = [d.day, d.hour, d.minute, p*0.2]
            ouw.writerow(nr)
"
"Getting the name of the @property being accessed, set or deleted in Python","import inspect
class A(object):
    @property
    def b(self):
        print inspect.stack()[0][3]

A().b
"
How to subset a data frame using Pandas based on a group criteria?,df.loc[df.groupby('User')['X'].transform(sum) == 0]
"""Cloning"" row or column vectors",">>> x = array([1,2,3])
>>> x
array([1, 2, 3])
>>> x.transpose()
array([1, 2, 3])
>>> matrix([1,2,3])
matrix([[1, 2, 3]])
>>> matrix([1,2,3]).transpose()
matrix([[1],
        [2],
        [3]])
"
Python - finding the longest sequence with findall,">>> import re
>>> max(re.findall(""g+"", ""fggfggggfggfg""), key=len)
'gggg'
"
"Referencing a class' method, not an instance's","class A(int):
    def sqr(self):
        return A(self*self)

sqr = A.sqr
a = A(5)
print sqr(a) # Prints 25
"
Replacing row values in pandas,"In [60]:

a = np.array(([100, 100, 101, 101, 102, 102],
                 [0,1,3,3,3,4]))
df = pd.DataFrame(a.T)
df
Out[60]:
     0  1
0  100  0
1  100  1
2  101  3
3  101  3
4  102  3
5  102  4
In [61]:

df.loc[(df[0]==101) & (df[1]==3)] = 200,10
df
Out[61]:
     0   1
0  100   0
1  100   1
2  200  10
3  200  10
4  102   3
5  102   4
"
Stdout encoding in python,print('\xc5\xc4\xd6'.encode('UTF8'))
"How would one bind two different button click events to the same label, namely ""<Button-1>"" and ""<Double-Button1>"" to same label?","import Tkinter as tk

def test(event, extra=None):
    print extra

master = tk.Tk()

b1 = tk.Button(master, text=""QUIT"", command=master.destroy, width=20, heigh=5)
b1.pack()

b2 = tk.Label(master, text=""OK"", width=20, heigh=5)
b2.pack()

b2.bind('<Double-Button-1>', lambda event:test(event,101))

b2.bind('<Button-1>', lambda event:test(event,1))
b2.bind('<Button-2>', lambda event:test(event,2))
b2.bind('<Button-3>', lambda event:test(event,3))

master.mainloop()
"
"In Python, how to make sure database connection will always close before leaving a code block?","import contextlib

@contextlib.contextmanager
def dbconnect(**kwds):
  dbConnection = MySQLdb.connect(**kwds)
  try:
    yield dbConnection
  finally:
    closeDb(dbConnection)
"
Python remove all whitespace in a string,"sentence = ' hello  apple'
"" "".join(sentence.split())
>>> 'hello apple'
"
Is it possible to simulate the unavailability of modules in Python tests?,"import sys
import os

original_path = sys.path[:]
def reset():
    # Teardown
    sys.path = original_path[:]
    if ""resource"" in sys.modules:
        del sys.modules[""resource""]


import resource
print(""resource exists"")

reset()

sys.path.insert(0, os.path.join(os.getcwd(), ""mocked_modules""))


try:
    import resource
except ImportError:
    print(""resource does not exist"")

reset()
import resource
print(""resource exists"")
"
How to sum column values with python,">>> from collections import defaultdict
>>> x = defaultdict(dict, 
    {
        u'row1': {u'column1': 33, u'column2': 55, u'column3': 23}, 
        u'row2': {u'column1': 32, u'column2': 32, u'column3': 17}, 
        u'row3': {u'column1': 31, u'column2': 87, u'column3': 18}
    }) 

>>> sums = defaultdict(int)
>>> for row in x.itervalues():
        for column, val in row.iteritems():
            sums[column] += val


>>> sums
defaultdict(<type 'int'>, {u'column1': 96, u'column3': 58, u'column2': 174})
"
When are create and update called in djangorestframework serializer?,"def save(self, **kwargs):
    # Will be done on every save
    kwargs['last_changed'] = timezone.now()
    return super().save(**kwargs)

def create(self, instance, data):
    # Will only be done if a new object is being created
    data['initial_creation'] = timezone.now()
    return super().create(instance, data)
"
transfer textfile contents into database python,">>> import sqlite3
>>> ins = '''\
... hello hello hello
... hello hello hello hello hello
... hello hello hello hello
... '''.splitlines()
>>> parseTable = []
>>> for line in ins:
...     row = line.split()[:5]
...     row.extend([None] * (5 - len(row)))
...     parseTable.append(row)
... 
>>> conn = sqlite3.connect(':memory:')
>>> c = conn.cursor()
>>> c.execute('''CREATE TABLE sample (Item_0 TEXT, Item_1 TEXT, Item_2 TEXT, Item_3 TEXT, Item_4 TEXT)''')
<sqlite3.Cursor object at 0x1083d8960>
>>> query_string = 'INSERT INTO sample VALUES (?, ?, ?, ?, ?)'
>>> c.executemany(query_string, parseTable)
<sqlite3.Cursor object at 0x1083d8960>
>>> conn.commit()
>>> c.execute('SELECT * FROM sample')
<sqlite3.Cursor object at 0x1083d8960>
>>> for row in c:
...     print row
... 
(u'hello', u'hello', u'hello', None, None)
(u'hello', u'hello', u'hello', u'hello', u'hello')
(u'hello', u'hello', u'hello', u'hello', None)
"
Should internal class methods returnvalues or just modify instance variables in python?,"class QueryHelper(object):
    def __init__(self, param, text):
        self._param = param
        self._query = self._build_query(text)

    def _build_query(self, text):
        return text + "" and ham!""

class RefinedQueryHelper(QueryHelper):
    def _build_query(self, text):
        # no need to know how the query object is going to be used
        q = super(RefinedQueryHelper, self)._build_query()
        return q.replace(""ham"", ""spam"")
"
"What is the best way to do automatic attribute assignment in Python, and is it a good idea?","for key,value in defaults.iteritems():
    assigned.setdefault(key,value)
"
Aspect ratio in semi-log plot with Matplotlib,"ticks = np.arange(min_logx, max_logx, 1)
ticklabes = [r""$10^{}$"".format(tick) for tick in ticks]

pl.yticks(ticks, ticklabels)
"
Need to add an element at the start of an iterator in python,"import itertools
   ...
o, peek = itertools.tee(o)
if isneat(peek.next()): ...
"
Google python class [string2.py] exercise F,">>> def mix_combine(a, b):
...     return a[0:int((len(a)+1)/2)] + b[0:int((len(b)+1)/2)] + a[int((len(a)+1)/2):] +b[int((len(b)+1)/2):]
...

>>> a = ""abcd""
>>> b = ""wxyz""
>>> mix_combine(a,b)
'abwxcdyz'
>>> a = ""abcde""
>>> b = ""vwxyz""
>>> mix_combine(a,b)
'abcvwxdeyz'
>>>
"
How to pass keyword arguments in reduce over Pandas merge function,"import functools
outer_merge = functools.partial(pd.merge, how=""outer"")
reduce(outer_merge, tmp)
"
Building class names from a list of strings,"def class_factory(classname):
    base_class = getattr(tk, classname)

    class CustomClass(base_class):
        def __init__(self, parent, **kwargs):
            objparams, packparams = dispatch_parameters(self, **kwargs)
            base_class.__init__(self, parent, objparams)
            self.pack(packparams)

    CustomClass.__name__ = classname
    return CustomClass
"
Running python from windows command prompt on many files,"with open(sys.argv[1], 'r') as f:
    do_something_with(f)
"
TkInter Label Change Font Size by Text Length,"import Tkinter as tk
import tkFont

class DynamicLabel(tk.Label):
    def __init__(self, *args, **kwargs):
        tk.Label.__init__(self, *args, **kwargs)

        # clone the font, so we can dynamically change
        # it to fit the label width
        font = self.cget(""font"")
        base_font = tkFont.nametofont(self.cget(""font""))
        self.font = tkFont.Font()
        self.font.configure(**base_font.configure())
        self.configure(font=self.font)

        self.bind(""<Configure>"", self._on_configure)

    def _on_configure(self, event):
        text = self.cget(""text"")

        # first, grow the font until the text is too big,
        size = self.font.actual(""size"")
        while size < event.width:
            size += 1
            self.font.configure(size=size)

        # ... then shrink it until it fits
        while size > 1 and self.font.measure(text) > event.width:
            size -= 1
            self.font.configure(size=size)

class Example(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)

        self.label = DynamicLabel(self, text=""Resize the window to see the font change"", width=20)
        self.label.pack(fill=""both"", expand=True, padx=20, pady=20)

        parent.geometry(""300x200"")

if __name__ == ""__main__"":
    root = tk.Tk()
    Example(root).pack(fill=""both"", expand=True)
    root.mainloop()
"
Python: sorting dictionary of dictionaries,">>> from collections import OrderedDict
>>> od = OrderedDict(sorted(dic.items(), key=lambda x: x[1]['Fisher'], reverse=True))
>>> od
OrderedDict([
('course', {'Fisher': 4.0, '#': 1}),
('will', {'Fisher': 3.5, '#': 1}),
('of', {'Fisher': 2.0, '#': 1}),
('i', {'Fisher': -0.2222222222222222, '#': 1})
])
"
XML parsing python,"import xml.dom.minidom as minidom
dom = minidom.parse('test.xml')
data={}
for dct in dom.getElementsByTagName('dict'):
    keys=dct.getElementsByTagName('key')
    # key.nextSibling can be an integer or string or date element, or Text node
    # key.nextSibling.firstChild is a Text node or None
    vals=[key.nextSibling.firstChild for key in keys]
    # drill down to the text inside the keys and vals
    keys=[key.firstChild.data for key in keys]
    vals=[val.data if val else None for val in vals]
    data=dict(zip(keys,vals))
    if data['Track ID']=='1208':
        print(data['Location'])
        break
"
"What is the equivalent of ""none"" in django templates?","# someapp/models.py
class UserProfile(models.Model):
    user = models.OneToOneField('auth.User')
    # other fields

    def get_full_name(self):
        if not self.user.first_name:
            return
        return ' '.join([self.user.first_name, self.user.last_name])

# template
{{ user.get_profile.get_full_name }}
"
Using Xpath in Scrapy to select any text below paragraph,">>> response.xpath(""//div/p[contains(., 'Description:')]/following-sibling::p"").extract()
[u'<p> Line 1 </p>', u'<p> Line 2 </p>']
"
Python - Pandas: Find largests values off-diagonal,"from pandas import *


L = [[17.917153, 10.875160,   9.970251],   
     [9.780500,  16.261098,  10.021619], 
     [12.293967, 10.608844,  10.870527]]

df = DataFrame(L)

df2 = df.unstack().copy()

df2.sort()

IDX = df2[:].index

IDX = list(reversed(IDX))


M = []

for x in IDX[1:]:
    if(x[0]==x[1]):
        continue
    M.append(x);
    if(len(M)==2):
        break;

Max1 = M[0]
Max2 = M[1]


print ""Max1 : "", Max1, ""->"", df2[Max1] 
print ""Max2 : "", Max2, ""->"", df2[Max2]
"
Assigning boolean values to integer,"class SwitchBoard(object):
    def __init__(self, num_switches):
        # create a dict of {number: state} key-values
        self.switches = {i: False for i in range(num_switches)}

    def flip(self, num):
        # test for the number being one of the dict's keys
        if num in self.switches:
            if self.switches[num]:
                print(""Lightswitch %s was on!"" % num)
            else:
                print(""Lightswitch %s was off!"" % num)
            # flip the value
            self.switches[num] = not self.switches[num]
        else:
            print(""Lightswitch %s does not exist!"" % num)

    def flip_every_nth(self, n):
        for i in range(0, len(self.switches), n):
            self.flip(i)


x = SwitchBoard(8)
x.switches
x.flip(1)
x.flip(3)
x.flip(1)
x.flip(10)
x.switches
x.flip_every_nth(3)
"
Python 2.7: reading from .txt to matrix,"    with open('new.txt') as f:
        l = [map(int, line.strip()) for line in f]
    print l
"
How can i read these 2 words specifically?,"blues = reds = 0
for word in a.split():
    if word == 'blue':
        blues += 1
    if word == 'red':
        reds += 1
print(""red:"", reds)
print(""blue:"", blues)
"
Open file and save it in another function with tkinter,"self.save_name = tkFileDialog.askopenfilename(title='Select a file')
with open(self.save_name, 'rb') as f:
    self.the_data = f.read() # insert processing here
"
Pandas - FillNa with another column,df['Cat1'].fillna(df['Cat2'])
"python, wrap and object into a list if not is an iterable","try:
    iter(obj)
except TypeError, te:
    obj = list(obj)
"
Python wild card match,"import csv

search_text = raw_input('Enter search text:').strip()

file2 =  '/home/vivek/Desktop/stackoverflow/file3.txt'

with open(file2) as fp1:
    root = csv.reader(fp1)
    if search_text==""*"":
        result =  list(root)
    else:
        result = [i for i in root  if search_text==i[0]]
        #result = []
        #for i in root:
        #   if search_text == i[0]:
        #       result.append(i)

print result
"
Most pythonic way to remove tuples from a list if first element is a duplicate,">>> setup = '''
orig = [(1,2),(1,3),(2,3),(3,3)]
newlist = []
seen = set()
def fun():
    for (a, b) in orig:
        if not a in seen:
            newlist.append((a, b))
            seen.add(a)
    return newlist
'''
>>> print (min(timeit.Timer('fun()', setup=setup).repeat(7, 1000)))
0.0004833390384996095
"
"Python equivalent of Tcl ""clock add"" command for date-spinning spinbox?",">>> from datetime import date, timedelta
>>> 
>>> current_date = date(year=2000, month=1, day=1)
>>> current_date.isoformat()
'2000-01-01'
>>> 
>>> next_date = current_date + timedelta(days=1)
>>> next_date.isoformat()
'2000-01-02'
>>> 
>>> previous_date = current_date - timedelta(days=1)
>>> previous_date.isoformat()
'1999-12-31'
"
"Extraction of variables from text, with completely different formatting, using Python",">>> example = '''\
... 0 -> 1
... 3 -> 2
... 2 -> 6,5
... 8 -> 7
... 5 -> 9,4,1
... '''.splitlines()
>>> def genoutput(iterable):
...     for line in iterable:
...         first, second = (l.strip() for l in line.split('->'))
...         for value in second.split(','):
...             yield first + value.strip()
... 
>>> list(genoutput(example))
['01', '32', '26', '25', '87', '59', '54', '51']
"
Elegant expression for row-wise dot product of two matrices,"a = np.random.normal(size=(5000, 1000))
b = np.random.normal(size=(5000, 1000))

%timeit np.einsum('ij, ij->i', a, b)
# 100 loops, best of 3: 8.4 ms per loop

%timeit np.sum(a*b, axis=1)
# 10 loops, best of 3: 28.4 ms per loop
"
Why can I access a non-global variable in one module from another in python?,"def function():
    while True:
        x = 5
        break
    def nested():
        print(x)
    nested() # prints 5
    x = 10
    nested() # prints 10
"
How to join certain items in list,"answer  = [] # final answer
partial = [] # partial answer
for e in lst:
    if e == '':           # if current element is an empty string … 
        if partial:       # … and there's a partial answer
            answer.append(''.join(partial)) # join and append partial answer
            partial = []  # reset partial answer
    else:                 # otherwise it's a new element of partial answer
        partial.append(e) # add it to partial answer
else:                     # this part executes after the loop exits
    if partial:           # if one partial answer is left
        answer.append(''.join(partial)) # add it to final answer
"
Clear invalid escape in python?,"a.replace('\\','')
"
Fetch the details from SOAP xml response,"import lxml.etree as ET
import xmltodict
import json   

# LOAD XML AND XSL
dom = ET.parse('soap.xml')
xslt = ET.parse('XSLTScript.xsl')

# TRANSFORM
transform = ET.XSLT(xslt)
newdom = transform(dom)

# NEW TREE OUTPUT
return_xml = ET.tostring(newdom, encoding='UTF-8', pretty_print=True, xml_declaration=True)
print(return_xml.decode(""utf-8""))

return_dict = xmltodict.parse(return_xml)
print(return_dict)

return_json = json.dumps(return_dict, indent=4)
print(return_json)
"
What is the proper way I can invoke firefox from a python3 program?,"from selenium import webdriver
from selenium.webdriver.common.keys import Keys

driver = webdriver.Firefox()
driver.get(""http://www.python.org"")
assert ""Python"" in driver.title
elem = driver.find_element_by_name(""q"")
elem.send_keys(""selenium"")
elem.send_keys(Keys.RETURN)
driver.close()
"
Python dealing with string-matching,"if all(i not in s for i in ('not found', 'account_id')):
"
Checking column values in python panda,"In [56]: (df.apply(pd.Series.nunique, axis=1) == 1).astype(int)
Out[56]:
a    1
b    0
c    1
dtype: int32
"
Get the href text of a link that has a certain class attribute using BeautifulSoup in Python,"soup = BeautifulSoup(html)
anchors = soup.find_all('a', {'class': 'Unique_Class_Name', 'href': True})

for anchor in anchors:
    print (anchor['href'])
"
How can I convert Unicode to uppercase to print it?,print('ex\xe1mple'.upper())
What's the short way to add same symbol at the specified place in ncurses?,"from curses import wrapper
def main(stdscr):
    stdscr.clear()  # clear above line. 
    for r in range(5,10):
      for c in range(10, 20):
        stdscr.addstr(r, c, '#')        
    stdscr.addstr(11, 0, 'Press Key to exit: ')
    stdscr.refresh()
    stdscr.getkey()

wrapper(main)
"
How to treat a returned/stored string like a raw string in Python?,"x = '\xff\x00'
y = ['%02x' % ord(c) for c in x]
print y
"
How to get columns as row combinations in python?,"d1 = pd.melt(data, id_vars=['country','region'], value_vars=['max', 'min','default'])
       .sort_values(['country','region']).reset_index(drop=True)

#fill NaN in column value method ffill 
#(propagate last valid observation forward to next valid)
d1['value'] = d1['value'].fillna(method='ffill')

d1['key'] = 1
#you can use double d1
d3 = pd.merge(d1, d1, on='key')
d3 = d3.drop(['key'],axis=1)

#filter columns by conditions - boolean indexing
d3 = d3[(d3['region_x'] == d3['region_y']) & (d3['country_x'] == d3['country_y'])]
        .reset_index(drop=True)

#if condition is true get value_x else value_y
#if neccesarry, convert to int by astype(int)
d3['rate'] = np.where(np.in1d(d3['country_x'], 'A'), d3['value_x'],d3['value_y']).astype(int)

d3 = d3.drop(['value_x','country_y','region_y','value_y'],axis=1)

d3.columns = ['country','region','Option1','Option2','measure']
d3 = d3[['country','region','measure','Option1','Option2']]
"
Optional string segment in pyparsing,"from pyparsing import *

identifier = Word(alphas, alphanums).setName('identifier')
DOT = Suppress('.')

# Option 1 - fully specified options
full_database_name = identifier('user') + DOT + identifier('database')
just_database_name = identifier('database')
table_name = (full_database_name + DOT + identifier('table') | 
              just_database_name + DOT + identifier('table'))

# Option 2 - use FollowedBy to explicitly lookahead when checking for leading user
table_name = (Optional(identifier('user') + FollowedBy(2*(DOT+identifier)) + DOT) + 
                identifier('database') + DOT + identifier('table'))

# Option 3 - use liberally matching expression, with a parse action to assign fields
def assignTableFields(fields):
    if len(fields) == 2:
        fields['database'],fields['table'] = fields
    elif len(fields) == 3:
        fields['user'],fields['database'],fields['table'] = fields
    else:
        raise ParseException(""wrong number of fields"")
table_name = delimitedList(identifier, delim='.').setParseAction(assignTableFields)

for test in (""a.b.c"", ""b.c""):
    print test
    print table_name.parseString(test).dump()
    print
"
How to interact with a Terminal in python,"import subprocess
process1 = subprocess.Popen([""ls"", ""-l""])
process2 = subprocess.Popen([""ls"", ""-l""])
"
Very strange behavior of operator 'is' with methods,">>> dict.__repr__.__get__(None, dict) is dict.__repr__  # None means no instance
True
"
Python Overwriting List Element,"def calculate (i): pass #math goes here
#nested:
aggregateList = [[calculate(i) for i in range(iterates)] for _ in range(trials)]
#flat:
aggregateList = [x for trial in ([calculate(i) for i in range(iterates)] for _ in range(trials)) for x in trial]
"
"python3, how to repeat a list of character","aminoacids = ['A', 'R', 'N', 'D', 'C', 'Q', 'E', 'G', 'H', 'I', 'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V']

pair_no_change = ['A', 'K']

original_pairs = [['A', 'K'], ['A', 'K'], ['A', 'K'], ['A', 'K'], ['A', 'K'],['D', 'E'], ['S', 'F'], ['B', 'C'], ['Y', 'V'], ['K', 'W']]

fq = 5

def frequency(original_pairs, pair_no_change, fq):
    updated_pairs = list(list())
    for pair in original_pairs:
        if pair != pair_no_change:
            pair[0] *= fq
            pair[1] *= fq
            updated_pairs.append([pair[0], pair[1]])
        else:
            continue
    return updated_pairs

updated_pairs = frequency(original_pairs, pair_no_change, fq)
#print(updated_pairs)
for pair in updated_pairs:
    for i ,j in zip(list(pair[0]), list(pair[1])):
        print [i,j]
"
Simple Python loop counter issue,"total_days = 3
days = [0 for _ in range(total_days)]
"
How do I use Python's itertools.groupby()?,"for key, group in groupby(things, lambda x: x[0]):
    listOfThings = "" and "".join([thing[1] for thing in group])
    print key + ""s:  "" + listOfThings + "".""
"
"3g coverage map - visualise lat, long, ping data","import numpy as np
import pylab as pl

longs = (np.random.rand(60, 1) + np.linspace(-np.pi, np.pi, 80000)).reshape(-1)
lats = np.sin(longs) + np.random.rand(len(longs)) * 0.1

bad_index = (longs>0) & (longs<1)
bad_longs = longs[bad_index]
bad_lats = lats[bad_index]

ranges = [[np.min(lats), np.max(lats)], [np.min(longs), np.max(longs)]]
h, lat_range, long_range = np.histogram2d(lats, longs, bins=(300,300), range=ranges)
bad_h, lat_range2, long_range2 = np.histogram2d(bad_lats, bad_longs, bins=(300,300), range=ranges)

y, x = np.where(h)
count = h[y, x]
pl.scatter(long_range[x], lat_range[y], s=count/20, c=count, linewidths=0, cmap=""Blues"")

count = bad_h[y, x]
pl.scatter(long_range2[x], lat_range2[y], s=count/20, c=count, linewidths=0, cmap=""Reds"")

pl.show()
"
"Using matplotlib, is it possible to set properties for all subplots on a figure at once?","for grph in [graphA, graphB]:
    grph.#edit features here
"
Changing called command in Powershell,"Get-Help about_alias
"
Custom ordering in Django,"class Foo(models.Model):
    name = models.CharField(max_length=128)

Foo.objects.create(name='a10')
Foo.objects.create(name='a1')
Foo.objects.create(name='a2')

ordered = sorted(Foo.objects.all(), key=lambda n: (n[0], int(n[1:])))
print ordered # yields a1, a2, 10
"
Python guesses my number (reverse number guess) UnboundLocalError,"        if greater_or_smaller == 'g':
            number = randint(number, 50)
            answer = raw_input(""Is your number %d? y/n> "" % number)
            if answer == 'y':
                print ""Hooray!""
            elif answer == 'n':
                greater_or_smaller()

        elif greater_or_smaller == 's':
            number = randint(1, number)
            answer = raw_input(""Is your number %d? y/n> "" % number)
            if answer == 'y':
                print ""Hooray!""
            elif answer == 'n':
                greater_or_smaller()
"
Iterate two lists in the same loop,">>> list1, list2, list3 = [0, 1], ['a', 'b'], [2, 3]
>>> from itertools import chain
>>> for item in chain(list1, list2, list3):
...     print(item)
0
1
a
b
2
3
"
Missing and Additional values in 2 list,"set(list1).difference(list2)
set(list2).difference(list1)
"
Python slicing from last to first element?,"some_list[::-len(some_list) + 1]
"
Get the highest possible gmtime for any architecture,"def find_max_gmtime_timestamp():
    ts = 1
    overflow = GmtimeOverflowTable()
    assert overflow[float('+inf')] and not overflow[ts]
    while not overflow[ts]:
        ts *= 2
    ts = binary_search(overflow, BOUNDARY, ts//2, ts)
    max_ts = ts - 1
    assert overflow[max_ts+1] and not overflow[max_ts]
    return max_ts
"
Python: Persistent variable in a module without a class?,"outervar = None # this is global

def foo():
    if(outervar): #this refers to the local variable
       outervar = ""you fail it"" # this creates a local variable
"
Using closure to decorate a class's methods,"import inspect

def proxy(bridge, target):
    def proxyfy(cls):
        for bname, func in inspect.getmembers(target, predicate=inspect.ismethod):
            fname = func.__name__
            if fname in cls.__dict__:
                print 'ignoring %s.%s' % (cls, fname)
                continue
            print 'adding %s.%s' % (cls, fname)
            def proxy_func(self, bname=bname, *args, **kwargs):
                print 'calling %s.%s.%s' % (cls, bridge, bname)
                bridge_member = getattr(self, bridge)
                return getattr(bridge_member, bname)(*args, **kwargs)
            setattr(cls, fname, proxy_func)
        return cls
    return proxyfy

def proxy(bridge):
    def proxyfy(cls):
        def __getattr__(self, attr):
            target = getattr(self, bridge)
            if attr.startswith('__') and not attr.endswith('__'):
                # unmangle
                attr = '_{}{}'.format(type(target).__name__, attr)
            return getattr(target, attr)
        setattr(cls, '__getattr__', __getattr__)
        return cls
    return proxyfy

class Base(object):
    def __init__(self, i):
        self._i = i

    def __bar(self):
        print 0

    def foo(self):
        print self._i

    def foo2(self):
        print 2 * self._i


# @proxy('_proxy', Base)
@proxy('_proxy')
class Delegate(object):
    def __init__(self, base):
        self._proxy = base

    def foo2(self):
        print 4 * self._proxy._i

d = Delegate(Base(1))
d.__bar() # d._proxy.__bar()
d.foo()   # d._proxy.foo()
d.foo2()  # d.foo2()
"
django filter when the some of the arguments are null,"students = Student.objects.filter(sales=current_user)
    
for key, value in form.cleaned_data.items():
    if value is not None:
        students = students.filter(**{key: value})
    
students = students.order_by(register_order, remaining_order, level_order)
"
python replace multiple characters in a string,">>> char = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
>>> secretkey = ""Dd18Abz2EqNPWhYTOjBvtVlpXaH6msFUICg4o0KZwJeryQx3f9kSinRu5L7cGM""
>>> trans = str.maketrans(char, secretkey)  
>>> s = ""Lets meet at the usual place at 9 am""
>>> s.translate(trans)
'0AvB WAAv Dv v2A tBtDP TPD1A Dv M DW'
"
"Slowing time, but not the program","mytimer = pygame.time.Clock() #creates timer
time_count = 0 #will be used to keep track of the time
mydelay = 5000 # will delay the main game by 5 seconds
canexit = False
start_menu = True # to start with the start menu rather than level1

#Do something before level 1
    if start_menu == True:
        ... do stuff
        if start_menu end:
             level1 = True
             time_count = 0

#START OF LEVEL 1
    if level1 == True:
    #updates  timer
        mytimer.tick() # start's ticking the timer
        time_count += mytimer.get_time() # add's the time since the last tick to time_count
    #check if mydelay has been reached
        if  time_count >= mydelay:
            level1 = False # so that you do not enter level1 again (even though this is redundant here since you will exit the game at the end of the loop... see canexit comment)
            level1yay = True # so that you can enter level1yay
            canexit = True # so that the game terminates at the end of the game loop 
            screen.blit(level1_image,background_position)

    if level1yay:
        screen.blit(background,background_position)

#Flip the Display
    pygame.display.flip()
    clock.tick(time)

 #Quit
 if canexit ==  True:
    pygame.quit()
"
How do I plot a histogram using Python so that x-values are frequencies of a spectra?,"Complete answer
import matplotlib.pyplot as plt
import numpy as np
np.random.seed(57)

N = 64 ; dw = 0.2
w = np.linspace(0,N*dw-dw,N)
X = 200 + (np.arange(N)-N/2)**2*np.random.random(N)

plt.bar(w, abs(X), align='center', width=dw)
plt.xticks([i*8*dw for i in range(N/8)]+[N*dw-dw/2])
plt.xlim(-dw/2,N*dw-dw/2)
plt.show()
"
Python: searching through html file grabbing <a> tags with the href and text content,"from lxml.etree  import fromstring, HTMLParser

xml = fromstring(_html, HTMLParser())

a_tags = xml.xpath(""//table[@id='yfncsumtab']//a"")

paired = dict((a.xpath("".//text()"")[0].strip(), a.xpath(""./@href"")[0]) for a in a_tags)
from pprint import pprint as pp
pp(paired)
"
Iterate over *args?,"def userInput(ItemA, ItemB, *args):
    THIS = ItemA
    THAT = ItemB
    MORE = args

    print THIS,THAT,MORE


userInput('this','that','more1','more2','more3')
"
Python app engine: how to save a image?,"#!/usr/bin/env python
#

import os
import urllib

from google.appengine.ext import blobstore
from google.appengine.ext import webapp
from google.appengine.ext.webapp import blobstore_handlers
from google.appengine.ext.webapp import template
from google.appengine.ext.webapp.util import run_wsgi_app

class MainHandler(webapp.RequestHandler):
    def get(self):
        upload_url = blobstore.create_upload_url('/upload')
        self.response.out.write('<html><body>')
        self.response.out.write('<form action=""%s"" method=""POST"" enctype=""multipart/form-data"">' % upload_url)
        self.response.out.write(""""""Upload File: <input type=""file"" name=""file""><br> <input type=""submit"" 
            name=""submit"" value=""Submit""> </form></body></html>"""""")

class UploadHandler(blobstore_handlers.BlobstoreUploadHandler):
    def post(self):
        upload_files = self.get_uploads('file') 
        blob_info = upload_files[0]
        self.redirect('/serve/%s' % blob_info.key())

class ServeHandler(blobstore_handlers.BlobstoreDownloadHandler):
    def get(self, resource):
        resource = str(urllib.unquote(resource))
        blob_info = blobstore.BlobInfo.get(resource)
        self.send_blob(blob_info)

def main():
    application = webapp.WSGIApplication(
          [('/', MainHandler),
           ('/upload', UploadHandler),
           ('/serve/([^/]+)?', ServeHandler),
          ], debug=True)
    run_wsgi_app(application)

if __name__ == '__main__':
  main()
"
Python: Detect number separator symbols and parse into a float without locale,"import re
with open('numbers') as fhandle:
    for line in fhandle:
        line = line.strip()
        separators = re.sub('[0-9]', '', line)
        for sep in separators[:-1]:
            line = line.replace(sep, '')
        if separators:
            line = line.replace(separators[-1], '.')
        print(line)
"
how to read a csv into a dictionary in python?,"import csv

with open('psc.csv',newline='') as pscfile:
    reader = csv.reader(pscfile)
    next(reader)
    results = dict(reader)  # pull in each row as a key-value pair
"
list(set) for nested lists?,"from collections import OrderedDict

t1 = [
    ['[7,', '158,'],
    ['[7,', '158,'],
    ['[51,', '158,'],
    ['[51,', '158,'],
    ['[51,', '158,'],
    ['[51,', '161,'],
    ['[51,', '161,'],
    ['[51,', '161,'],
    ['[298,', '114,'],
    ['[808,', '138,'],
    ['[808,', '138,']
]

d = OrderedDict()
for x in t1:
    t = tuple(x)
    d[t] = d.get(t, 0) + 1

[list(k) for k, v in d.items() if v >= 3] # [['[51,', '158,'], ['[51,', '161,']]
"
Python pandas: check if any value is NaN in DataFrame,df.isnull().values.any()
Getting pyobjc object from integer id,"import ctypes, objc
_objc = ctypes.PyDLL(objc._objc.__file__)

# PyObject *PyObjCObject_New(id objc_object, int flags, int retain)
_objc.PyObjCObject_New.restype = ctypes.py_object
_objc.PyObjCObject_New.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_int]

def objc_object(id):
    return _objc.PyObjCObject_New(id, 0, 1)
"
"Determine if 2 lists have the same elements, regardless of order?","sorted(x) == sorted(y)
"
How do I merge a list of dicts into a single dict?,"{k: v for d in L for k, v in list(d.items())}"
Python: How do I format a date in Jinja2?,"def format_datetime(value, format='medium'):
    if format == 'full':
        format=""EEEE, d. MMMM y 'at' HH:mm""
    elif format == 'medium':
        format=""EE dd.MM.y HH:mm""
    return babel.dates.format_datetime(value, format)

jinja_env.filters['datetime'] = format_datetime
"
sort 2d array by date in python 3.3,"big_array = array1 + array2 + array3
import dateutil.parser as p
print sorted(big_array,key=lambda x: p.parse(x[1]))
"
Finding words after keyword in python,"re.search('name (.*)', s)"
How to add numbers in an integer,"number = input('What number do you want to start with? ')

while len(number) > 1:
    number = str(sum(int(digit) for digit in number))

print('Result is', number)
"
Put a symbol between every letter in a list of strings,">>> listOne = ['!'.join(i) for i in listOne]
>>> listOne
"
How to encode stream of bits (not bytes) in Python - is any simple module for it?,"import unittest
import itertools

def encode(bits):
    '''Encode n bits to an integer using a leading 1 to mark the length of the bit stream.

    Example: [0,0,0] == 0b1000 == 16
    '''
    # start with an initial 1.
    # iteratively shift current value left and OR in new bit.
    return reduce(lambda n,b: n << 1 | b,bits,1)

def decode(encoded):
    '''Decode a positive integer into a list of 0/1 values.
    The most significant bit marks the length and is removed.

    Example:  137 = 0b10001001 = [0,0,0,1,0,0,1]
    '''
    if encoded < 1:
        raise ValueError('encoded must be > 0')
    return [1 if c=='1' else 0 for c in format(encoded,'b')][1:]

class Cases(unittest.TestCase):
    def testEncodeZeros(self):
        for i in xrange(100):
            bits = [0]*i
            self.assertEqual(encode(bits),2**i)
    def testEncodeOnes(self):
        for i in xrange(100):
            bits = [1]*i
            self.assertEqual(encode(bits),2**(i+1)-1)
    def testDecodeZeros(self):
        for i in xrange(100):
            encoded = 2**i
            self.assertEqual(decode(encoded),[0]*i)
    def testDecodeOnes(self):
        for i in xrange(100):
            encoded = 2**(i+1)-1
            self.assertEqual(decode(encoded),[1]*i)
    def testEncodeDecode(self):
        for n in xrange(10):
            for bits in itertools.product([0,1],repeat=n):
                self.assertEqual(decode(encode(bits)),list(bits))
    def testDecodeZero(self):
        self.assertRaises(ValueError,decode,0)
    def testDecodeNegative(self):
        self.assertRaises(ValueError,decode,-1)

if __name__ == '__main__':
    unittest.main()
"
How to measure Python import latencies,"import sys

import __builtin__
_orgimp = __builtin__.__import__

import logging
FORMAT = ""%(asctime)-15s %(message)s""
logging.basicConfig(format=FORMAT, level=logging.INFO)

def __import__(name, *a):
  r = sys.modules.get(name)
  if r is not None: return r
  logging.info('import bgn %s', name)
  r = _orgimp(name, *a)
  logging.info('import end %s', name)
  return r
__builtin__.__import__ = __import__

import pyparsing
"
"How to round up to 32 using the math module (Python 3,)","import math

def roundTo32(x, base=32):
    return int(base * math.ceil(float(x) / base))
"
"Compare lines in two .txt files, print out new line for not contained words","def get_first(line):
    return line.split(None, 1)[0]

def readline():
    with open(""textfile1.txt"",'r') as file, open(""textfile2.txt"",'r') as file2:
        string = set(map(get_first,file2))
        file2.seek(0)
        file2_dict = {}
        for line in file2:
            file2_dict[line.split(None, 1)[0]] = line
        for line in file:
            if line.strip() in string:
                print(file2_dict[line.rstrip()])    
            else:              ##if spl not in string print new line
                print()
"
Saving matplotlib figure with add_axes,"import pylab as plt

fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(212)

ax.plot(range(3))

ax_im = fig.add_subplot(211)
ax_im.plot(range(3), 'o--')
ax_im.set_xticks([])
ax_im.set_yticks([])

plt.show()
"
Discrete then linear colormap in matplotlib,"import numpy as np
import matplotlib.colors as mcolors
import matplotlib.pyplot as plt
np.random.seed(2016)

def make_colormap(seq):
    """"""Return a LinearSegmentedColormap
    seq: a sequence of floats and RGB-tuples. 
      - Every float is sandwiched between two RGB values.
      - The floats indicate locations (on a scale from 0.0 to 1.0) where the
        color map transitions from one RGB color to the next.
      - The floats should be in increasing order
      - The first and last values in the sequence are the first and last
        colors in color map.
    http://stackoverflow.com/q/16834861/190597 (unutbu)
    """"""
    seq = [(None,) * 3, 0.0] + list(seq) + [1.0, (None,) * 3]
    cdict = {'red': [], 'green': [], 'blue': []}
    for i, item in enumerate(seq):
        if isinstance(item, float):
            r1, g1, b1 = seq[i - 1]
            r2, g2, b2 = seq[i + 1]
            cdict['red'].append([item, r1, r2])
            cdict['green'].append([item, g1, g2])
            cdict['blue'].append([item, b1, b2])
    return mcolors.LinearSegmentedColormap('CustomMap', cdict)

c = mcolors.ColorConverter().to_rgb
cmap = make_colormap([(0,1,0), c('dark green')])
cmap.set_under('burnt red')
cmap.set_over('yellow green')

arr = np.random.randint(0, 102, size=(11, 11))
# modify arr so that 0 is mapped to a negative number (-2) and 1 is mapped to a
# positive number greater than 100, (say, 102), and all other values are
# decreased by 2
arr -= 2   
arr = np.where(arr==-1, 102, arr)

plt.imshow(arr, interpolation='nearest', cmap=cmap, vmin=0, vmax=100)
plt.colorbar(extend='both')
plt.show()
"
Capturing states between tags and href by xpath in python,"...
>>> tree = html.fromstring(lines)
>>> [li.text_content() for li in tree.xpath('//ul[@class=""test""]/li')]
['A: A', 'B: B', 'C: C', 'D: AAABBBCCC']
"
argparse: require optional arguments to precede positional arguments,"import argparse

p = argparse.ArgumentParser()
p.add_argument('-l', '--login')
p.add_argument('host')
p.add_argument('cmd', nargs=argparse.REMAINDER)
print p.parse_args('-la server ls'.split())
print p.parse_args('server ls -la'.split())
"
Renaming columns of dataframe list in Pandas,"import pandas as pd

col = ['open', 'high', 'low', 'close']
index = [1, 2, 3, 4]

df_all = {'df1': pd.DataFrame(columns=col, index=index),
          'df2': pd.DataFrame(columns=col, index=index), 
          'df3': pd.DataFrame(columns=col, index=index)}

for key, df in df_all.iteritems():
    df.rename(columns=lambda x: key+x, inplace=True)

print df_all['df1'].columns.tolist()
"
How to get a method called (decorator?) after every object method,"class Wrapper (type):
    def __new__(mcls, name, bases, nmspc):
        for attrname, attrval in nmspc.items():
            if callable(attrval) and attrname.startswith('crawl_'):
                nmspc[attrname] = wrapit(attrval)

        return super(Wrapper, mcls).__new__(mcls, name, bases, nmspc)
"
What is the pythonic way to this dict to list conversion?,"d = {'a.b1': [1,2,3], 'a.b2': [3,2,1], 'b.a1': [2,2,2]}
l = [k.split('.') + v for k, v in d.items()]
"
Divide number into digits and save them in list (array) using python,"dig = []
i = 0
while num > 9:
    dig.append(num % 10)
    i += 1
    num /= 10
dig.append(num)
"
How do I append to the correct deeply-nested list?,"d = {'mykey': 'myval'}
my_strings = ['key1_key2_key3', 'key54_key6_key85_key86', 
              'key1_key2_key3', 'key1_key2',
              'key54_key6_key85_key86', 'key103_key508_key2',
              ]
master_d = {}

for path in my_strings:
    tmp = master_d
    for key in path.split('_'):
        tmp = tmp.setdefault(key, {})
    tmp.setdefault('my_list', []).append(d)

from pprint import pprint
pprint(master_d)
"
Two sums from one list,"from itertools import izip
sample = [(1,3), (4,5), (8,2)]
t1, t2 = [sum(t) for t in izip(*sample)]
"
Removing duplicates from a list of lists based on a comparison of an element of the inner lists,"
from sortedcontainers import SortedDict

l = [[1, 2, 3], [1, 3, 4], [1, 4, 5], [2, 4, 3], [2, 5, 6], [2, 1, 3]]
d = SortedDict()
for sub in l:
    k = sub[0]
    if k not in d or sub[1] < d[k][1]:
        d[k] = sub


print(list(d.values()))
"
Split values and store into a list,"from sys import stdin
vl_list = []
for line in stdin.readlines():
    vl_list.extend(line.split("",""))
"
Split Python Flask app into multiple files,"from flask import Blueprint

account_api = Blueprint('account_api', __name__)

@account_api.route(""/account"")
def accountList():
    return ""list of accounts""
"
Reverse a string,"def reversed_string(a_string):
    return a_string[::(-1)]"
Adding a new column to a list of matrixs(arrays),">>> matrices = [np.matrix(np.random.randn(3,4)) for i in range(10)]
>>> for i, m in enumerate(matrices):
...     matrices[i] = np.hstack((m, np.ones((m.shape[0], 1), dtype=m.dtype)))
"
Finding time intervals per day from a list of timestamps in Python,"#!/usr/bin/env python
from datetime import date, timedelta
from itertools import groupby

epoch = date(1970, 1, 1)

result = {}
assert timestamps == sorted(timestamps)
for day, group in groupby(timestamps, key=lambda ts: ts // 86400):
    # store the interval + day/month in a dictionary.
    same_day = list(group)
    assert max(same_day) == same_day[-1] and min(same_day) == same_day[0]
    result[epoch + timedelta(day)] = same_day[0], same_day[-1] 
print(result)
"
Read bipartite graph,"edges = []
for u, v, d in G.edges(data=True): # note that d contains each edge's data
    if u.isdigit(): # if u is numeric put it first
        edges.append( (u, v, d) )
    else:
        edges.append( (v, u, d) )
"
find the set of integers for which two linear equalities holds true,"def solve(smin, smax, coef):
    """"""
    Return a list of lists of non-negative integers `n` that satisfy
    the inequalities,

    sum([coef[i] * n[i] for i in range(len(coef)]) > smin
    sum([(coef[i]+1) * n[i] for i in range(len(coef)]) < smax

    where coef is a list of positive integer coefficients, ordered
    from highest to lowest.
    """"""
    if smax <= smin:
        return []
    if smin < 0 and smax <= coef[-1]+1:
        return [[0] * len(coef)]

    c0 = coef[0]
    c1 = c0 + 1
    n_max = ((smax-1) // c1)
    solutions = []
    if len(coef) > 1:
        for n0 in range(n_max + 1):
            for solution in solve(smin - n0 * c0,
                                  smax - n0 * c1, 
                                  coef[1:]):
                solutions.append([n0] + solution)
    else:
        n_min = max(0, (smin // c0) + 1)
        for n0 in range(n_min, n_max + 1):
            solutions.append([n0])
    return solutions
"
Python - remove duplicate lines with specific key,"sort --field-separator=, --key=2,2 --unique < file
"
What is my function missing? (python),"import urllib, collections
txt = urllib.urlopen(""http://www.blahblahblah.com"").read()

tally = collections.Counter(txt)

def freq_threshold(char, n):
    if tally[char] > n:
        return tally[char]

print freq_threshold('b', 3)
"
python __repr__,"def __repr__(self):
    return '{0}({1})'.format(str(self.__class__.__name__), self.version)
"
how does strip() method works with append() method?,">>> '   asdfadsf '.strip()
'asdfadsf'

>>> '\nblablabla\n'.strip()
'blablabla'

>>> a = []
>>> a.append('   \n asdf \n    '.strip())
>>> a
['asdf']

>>> words = [' a ', '   b    ', '\nc\n']
>>> words = [word.strip() for word in words]
>>> words
['a', 'b', 'c']
"
sum of multiplication of cells in the same row but different column for pandas data frame,"import pandas as pd
import numpy as np

df = pd.DataFrame({'A':[1,2,3],'B':[2,3,4]})
print df
   A  B
0  1  2
1  2  3
2  3  4

print df['A'] * df['B']
0     2
1     6
2    12
dtype: int64

print (df['A'] * df['B']).sum()
20
"
Assign many values to an element of a list,"d.setdefault(day, []).append(activity)
"
How to get the path to the opened file from a script inside a OS X .app bundle?,"from string import *
from os import getpid
from subprocess import check_output, STDOUT

pid = getpid()

lsof = (check_output(['/usr/sbin/lsof', '-p', str(pid)], stderr=STDOUT)).split(""\n"")
for line in lsof[1:]:
    print line
"
Why do I get different charset when python use MySQLdb?,"conn = MySQLdb.connect(host='my_host',
                       ...
                       charset='utf8')
"
Loop Issue with Local Variable,"def blanks():
    all_line_max = []
    while True:
        try:
            strline = input()
            if strline:
                z = maxspaces(strline)
                all_line_max.append(z)
                y = ' '.join(strline.split())
                print(y)
            if strline == 'END':
                break
        except Exception:
            break
    print(max(all_line_max))
"
How to get request.environ values in python?,">>> import urlparse
>>> formdata = urlparse.parse_qs('ugq_no=2')
>>> formdata
{'ugq_no': ['2']}
>>> formdata['ugq_no']
['2']
>>> formdata['ugq_no'][0]
'2'
"
how to group a data in python,"fr = {}
inp = open(""file.txt"",'r').read().strip().split('\n')
for line in map(str.split,inp):
    k = int(line[0])
    l = float(line[-1])
    key = abs(k-1) / 10 * 10

    if fr.has_key(key):
        fr[key] += l
    else:
        fr[key] = l

for k in sorted(fr.keys()):
    sum = fr[k]
    print '%d-%d\t%f' % (k+1 if k else 0, k+10, sum) 
"
using a variable keyword for an optional argument name with python argparse,"args=parser.parse_args('-k mass 100 inf -k spin 0.5 1.0'.split())

Namespace(kwarg=[['mass', '100', 'inf'], ['spin', '0.5', '1.0']])
"
Python | accessing dll using ctypes,"import os
import ctypes

if os.name == 'nt':
    from ctypes import wintypes

    kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)

    def check_bool(result, func, args):
        if not result:
            raise ctypes.WinError(ctypes.get_last_error())
        return args

    kernel32.LoadLibraryExW.errcheck = check_bool
    kernel32.LoadLibraryExW.restype = wintypes.HMODULE
    kernel32.LoadLibraryExW.argtypes = (wintypes.LPCWSTR,
                                        wintypes.HANDLE,
                                        wintypes.DWORD)

class CDLLEx(ctypes.CDLL):
    def __init__(self, name, mode=0, handle=None, 
                 use_errno=True, use_last_error=False):
        if os.name == 'nt' and handle is None:
            handle = kernel32.LoadLibraryExW(name, None, mode)
        super(CDLLEx, self).__init__(name, mode, handle,
                                     use_errno, use_last_error)

class WinDLLEx(ctypes.WinDLL):
    def __init__(self, name, mode=0, handle=None, 
                 use_errno=False, use_last_error=True):
        if os.name == 'nt' and handle is None:
            handle = kernel32.LoadLibraryExW(name, None, mode)
        super(WinDLLEx, self).__init__(name, mode, handle,
                                       use_errno, use_last_error)
"
Find string within a string and save it to file on BioPython,"import csv

input_file = ""dp-input1.csv""

with open(input_file) as fp:
    root = csv.reader(fp, delimiter='|')
    result = [row[3].split(""."")[0] for row in root]
    #for row in root:
    #    tmp = row[3].split(""."")[0]
    #    result.append(tmp)

print ""Final result:-"", result
"
Initialize list with same bool value,">>> [False] * 10
[False, False, False, False, False, False, False, False, False, False]
"
Copying dicts from csv to a new dict-python,"with open(filename, 'rb') as f:
    reader = csv.DictReader(f)
    things = list(reader)
"
Python: Find Unique XML Attributes,"x = """"""<records>
<record something=""this"" name=""ABC""/>
<record something=""this"" name=""DEF""/>
<record name=""ABC""  something=""this""/>
<record name=""ABC""  something=""this""/>
<record name=""GHI""  something=""this""/>
<record noname=""ijk""  something=""this""/>
<record noname=""lmn""  something=""this""/>
<record noname=""xyz""  something=""this""/>
</records>""""""

from lxml.etree import  fromstring
tree = fromstring(x)

print(sorted({n.get(""name"") for n in tree.findall("".//record[@name]"")}))
"
How do I stack two DataFrames next to each other in Pandas?,"pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)"
Find variables defined in other module (python),"    import inspect
    stacks = inspect.stack()
    if len(stacks) > 1:
        outerFrame = stacks[1][0]
    else:
        outerFrame = stacks[0][0]
    localVariables = outerFrame.f_locals
    for lv in list(localVariables.keys()):
        lvk = localVariables[lv]
        if (inspect.isclass(lvk)):
            docattr = getattr(lvk, '_DOC_ATTR', None)
            if docattr is not None:
                # ... do something with docattr ...
"
"In pyparsing, how to assign a ""no match"" key value?","import pyparsing as pyp

comma = pyp.Literal(',').suppress()
# use parse actions to do type conversion at parse time, so that results fields
# can immediately be used as ints or floats, without additional int() or float()
# calls
floatnum = pyp.Regex(r'([\d\.]+)').setParseAction(lambda t: float(t[0]))
integer = pyp.Word(pyp.nums).setParseAction(lambda t: int(t[0]))

# define the command keyword - I assume there will be other commands too, they
# should follow this general pattern (define the command keyword, then all the
# options, then define the overall command)
aperture_defn_command_keyword = pyp.Literal('AD')

# define a results name for the matched integer - I don't know what this
# option is, wasn't in your original post
d_option = 'D' + integer.setResultsName('D')

# shortcut for defining a results name is to use the expression as a 
# callable, and pass the results name as the argument (I find this much
# cleaner and keeps the grammar definition from getting messy with lots
# of calls to setResultsName)
circular_aperture_defn = 'C' + comma + floatnum('diameter') + 'X'

# define the overall command
aperture_defn_command = aperture_defn_command_keyword(""command"") + d_option + pyp.Optional(circular_aperture_defn)

# use searchString to skip over '%'s and '*'s, gives us a ParseResults object
test = ""%ADD22C,0.35X*%""
appData = aperture_defn_command.searchString(test)[0]

# ParseResults can be accessed directly just like a dict
print appData['command']
print appData['D']
print appData['diameter']

# or if you prefer attribute-style access to results names
print appData.command
print appData.D
print appData.diameter

# convert ParseResults to an actual Python dict, removes all unnamed tokens
print appData.asDict()

# dump() prints out the parsed tokens as a list, then all named results
print appData.dump()
"
How to maintain different version of a python module?,"import numpy as np
np.array([1,2,3,4])
"
Python list popping and appending,"def sanitize(lst):
    # predefined list
    b = {1, 2}
    return sorted(lst, key=lambda v: v in b)
"
Why is my list not sorted as expected?,">>> sorted([4, 2, 5, 3, 8], cmp=lambda a, b: 1 if a > b else 0 if a == b else -1)
[2, 3, 4, 5, 8]
"
Python map() with cases,"resultList = [foo(x) if x > 0 else bar(x) for x in listOfNumbers)
"
Elegant ways to return multiple values from a function,"MyMultimap::iterator lower,upper;
boost::tie(lower,upper) = some_map.equal_range(key);
"
getting the opposite diagonal of a numpy array,"In [48]: np.diag(np.rot90(array))
Out[48]: array([ 4,  8, 12, 16, 20])
"
Python Array Cleanup Issues,"imat = [[0]*4 for _ in xrange(4)]
"
Making an Ascii table from a FITS file header,"import asciitable
import numpy as np

keys = ['RA', 'DEC']
data = {}

# Initialize ""data"" with empty lists for each key
for k in keys:
    data[k] = []

# Collect all data in the ""data"" dictionary
for i in range(0, 50):
    data['RA'].append(np.array(i))
    data['DEC'].append(np.array(i+1))

asciitable.write(data, ""coords.dat"", names=keys)
"
Python Decimals format,"'{0:.3g}'.format(num)
"
Parsing dhcpd.leases with Python and Regex,"import re

pattern = re.compile(r""lease ([0-9.]+) {.*?hardware ethernet ([:a-f0-9]+);.*?}"", re.MULTILINE | re.DOTALL)

with open(""/Users/smitty/Dropbox/Company/Network/DHCP-Info/dhcpd.leases"") as f:
    for match in pattern.finditer(f.read()):
        print(match.group(1), match.group(2))
"
why 1D scipy.interpolate.griddata using method=nearest produces nans?,"import numpy as np
import scipy.cluster.vq as vq
import matplotlib.pyplot as plt

target_points = np.array([1.,2.,3.,4.,5.,6.,7.])
points = (np.random.rand(50)*2*np.pi)
values = np.sin(points)
code, dist = vq.vq(target_points, points)
interp = values[code]

plt.plot(points,values,'o')
plt.plot(target_points,interp,'ro')
print interp
plt.show()
"
Python regex to match all words in {},">>> class MyTemplate(string.Template):
...     pattern = r'\{(\w+)\}'
>>> a = 'add {new} sentence {with} this word'
>>> t = MyTemplate(a)
>>> t.pattern.findall(t.template)
['new', 'with']
"
Adding column(s) from one dataframe to another python pandas,"import pandas as pd
import io

data = """"""
ColumnA    columnB    columnC   columnD
  A          B          C          D
  A          B          C          D
  A          B          C          D
    """"""
data1 = """"""
ColumnE    columnF    columnG
  E          F          G
  E          F          G
  E          F          G
    """"""

df = pd.read_csv(io.StringIO(data), delimiter='\s+')
df1 = pd.read_csv(io.StringIO(data1), delimiter='\s+')

df['columnF'] = pd.Series(df1['columnF'])

print(df)
"
Function to return the stripped whitespace of a string,"from itertools import takewhile

def lstripped(s):
    return ''.join(takewhile(str.isspace, s))

def rstripped(s):
    return ''.join(reversed(tuple(takewhile(str.isspace, reversed(s)))))

def stripped(s):
    return lstripped(s), rstripped(s)
"
How do you find and delete the highest integer in a list of unknown integers,"numbers = [3, 5, 77, 8]
print(id(numbers))
max_number = max(numbers)
numbers[:] = [number for number in numbers if number != max_number]
print(id(numbers))
"
Python: How to check if a variable has been already declared,"INITIAL = object()
foo = INITIAL
"
How to merge dictionaries within two lists if they have a common key-value pair?,"from itertools import chain
from collections import defaultdict

result = defaultdict(dict)

for c_dict in chain(L1, L2):
    result[c_dict[""id""]].update(c_dict)

print result.values()
"
find variations of a word in a string on python,"mystring=""walk walked walking talk talking talks talked fly flying""
list_of_words=[""walk"",""talk"",""fly""]

sp = mystring.split()
for x in list_of_words:
    li = [y for y in get_close_matches(x,sp,cutoff=0.5)
          if x in y]
    print '%-7s %d  in %-10s' % (x,len(li),li)
"
"How to sort the results of Counter.mostCommon(n) lexicographically (by counter, then by value)?","counter = Counter('abcdef')
most_common = sorted(counter.items(), key=lambda pair: (-pair[1], pair[0])) 
"
Django passing object to class,"def foo(column):
    class Foo(object):
        if column == 'a':
            bar = 'a'
            foo = 'c'
        else:
            bar = 'b'

    return Foo

for x in 'ab':
    cls = foo(x)
    print cls.bar
    print cls.foo
"
Fast distance calculation in scipy and numpy,"output = np.sqrt( np.sum( (A[:,:,np.newaxis,:] - B[:,np.newaxis,:,:])**2, axis=-1) )
"
How to find out the nested class hierarchy?,"import inspect

a = A.NestA

print a in [x[1] for x in inspect.getmembers(A, inspect.isclass)]
print a in [x[1] for x in inspect.getmembers(B, inspect.isclass)]
"
How can I loop through a list of strings?,"for i in range(len(test) - 1, -1, -1):
    if test[i] not in [""C"",""D""]:
        del test[i]
"
Sum up values from a dictionary (the Python way),">>> mydict ={'Plekhg2': {'Bcells': '233.55', 'DendriticCells': '190.12'}, 
...   'Barxxxx': {'Bcells': '132.11', 'DendriticCells': '92.01'}, }
>>> {k: sum(float(f) for f in v.itervalues()) for k, v in mydict.iteritems()}
{'Plekhg2': 423.67, 'Barxxxx': 224.12}
"
Python: finding files with matching extensions or extensions with matching names in a list,"def group_by_extension(filenames):
    '''Puts the filenames in the given iterable into a dictionary where
    the key is the last component of the filename and the value is
    a list of the filenames with that extension.'''
    keyfunc = lambda f: f.split('.', 1)[1]
    return dict( (k, list(g)) for k,g in groupby(
               sorted(filenames, key=keyfunc), key=keyfunc
           ) )
"
Reverse an input using tuples Python,"print ' '.join(reversed(a.split()))  # Python 2
"
How to align and compare two elements (sequence) in a list using python,"# Parse the file which was already split into split_list
split_list = ['>103L', 'Sequence:', 'MNIFEMLRIDEGLRLKIYKDTEGYYTIGIGHLLTKSPSLNSLDAAKSELDKAIGRNTNGVITKDEAEKLFNQDVDAAVRGILRNAKLKPVYDSLDAVRRAALINMVFQMGETGVAGFTNSLRMLQQKRWDEAAVNLAKSRWYNQTPNRAKRVITTFRTGTWDAYKNL', 'Disorder:', '----------------------------------XXXXXX-----------------------------------------------------------------------------------------------------------------------------XX']
header   = split_list[0] + "" "" + split_list[1]
seq      = split_list[2]
disorder = split_list[4]

# Create the new disorder string
new_disorder = [""Disorder: Posi R""]
for i, x in enumerate(disorder):
    if x == ""X"":
        # Appends of the form: ""AminoAcid Position""
        new_disorder.append( ""{} {}"".format(i, seq[i]) )

new_disorder = "" "".join(new_disorder)

# Output the modified file
open(""seq2.txt"", ""w"").write( ""\n"".join([header, seq, new_disorder]))
"
Using python to search a text file for the occurence of specific characters,"if 'g' in line and 'd' in line:
"
How to go back to a specific line,"import operator

print ""1) Add""
print ""2) Substract""
print ""3) Multiply""
print ""4) Divide""
print ""5) Exit""
while True:
    x=input(""Choose an operation: "")
    if x==5:
        break
    y=input(""How many numbers do you need to operate: "")
    operands=[input('Value {}'.format(i+1)) for i in range(count)]
    if x==1:
        op, value = operator.add, 0
    elif x==2:
        op, value = operator.sub, 0
    elif x==3:
        op, value = operator.mul, 1
    elif x==4:
        op, value = operator.truediv, 1
    for operand in operands:
        value = op(value, operand)
    print value
"
python - print last matching line in file,"from collections import deque

def read_logfile(master_log, linecount=1):
    lastmatches = deque(maxlen=linecount)
    for line in master_log:
        if '[76:Health]:' in line:
            lastmatches.append(line)
    for line in lastmatches:
        print line
"
Sorting a group of words inside a list,"a = [['hi', 'monday'], [], ['hello', 'indent', 'joe'], ['hi', 'low']]
a.sort(key=lambda l:(-len(l), l))
print a
"
Parsing bits from a 128 byte block of hex in Python,"string = ""100000000000000220000000000000003000000000000000"" \
         ""000000000000000000000000000000000000000000000000"" \
         ""000000000000000000000000000000000000000000000000"" \
         ""000000000000000000000000000000000000000000000000"" \
         ""000000000000000000000000000000000000000000000000"" \
         ""0000000000000000""

ranges = ['0', '2-1', '3', '127-4']

for offset in ranges:
    offset_list = offset.split('-')
    if len(offset_list) == 1:
        start = int(offset_list[0])
        end = int(offset_list[0])
    else:
        start = int(offset_list[1])
        end = int(offset_list[0])
    the_bytes = string[start*2:(end+1)*2]
    print('%d-%d: %s' % (start, end, the_bytes))
"
How to determine whether a Pandas Column contains a particular value,"In [31]: s.values
Out[31]: array(['a', 'b', 'c'], dtype=object)

In [32]: 'a' in s.values
Out[32]: True
"
string split() in python 2.6,">>> strs = 'bacarat,baccarat\r'
>>> strs.strip().split(',')
['bacarat', 'baccarat']
"
Log-sum-exp trick on a sparse matrix in scipy,"def logsumexp_row_nonzeros(X):
    result = np.empty(X.shape[0])
    for i in range(X.shape[0]):
        result[i] = logsumexp(X.data[X.indptr[i]:X.indptr[i+1]])
    return result
"
Apply multiple functions to multiple groupby columns,"In [95]: cust = lambda g: g[df.ix[g.index]['C'] < 0.5].sum()

In [96]: f = {'A':['sum','mean'], 'B':['prod'], 'D': {'my name': cust}}

In [97]: df.groupby('GRP').agg(f)
Out[97]:
            A                   B         D
          sum      mean      prod   my name
GRP
0    0.719580  0.359790  0.102004  0.204072
1    0.454824  0.227412  0.034060  0.570441
"
Splitting a list into each unique element,"def grouper(sequence):
    groups = []
    for i in set(sequence):
        groups.append([x for x in sequence if x == i])
    return groups

>>> grouper(range(6))
[[0], [1], [2], [3], [4], [5]]
>>> grouper([1, 1, 2, 3])
[[1, 1], [2], [3]]
>>> grouper([1, 1, 2, 3, 5, 3, 4, 3])
[[1, 1], [2], [3, 3, 3], [4], [5]]
>>> 
"
Matplotlib: want different plot for each line,"# create the first image as a template
l = plt.plot(x, list[0])
for sublist in list:
    l.set_ydata(sublist)
    plt.title(names[g])
    g = g + 1
    plt.savefig(genes[g-1])
"
How to compare list with actual string in Python?,">>> hostname = 'dc1dbx1145.dc1.host.com'
>>> hostname.split('.')[1]
'dc1'
"
Python: How to pass an Autoproxy object,"def RebuildProxy(func, token, serializer, kwds):
    '''
    Function used for unpickling proxy objects.

    If possible the shared object is returned, or otherwise a proxy for it.
    '''
    server = getattr(process.current_process(), '_manager_server', None)

    if server and server.address == token.address:
        return server.id_to_obj[token.id][0] # This returns the referent
    else:
        incref = (
            kwds.pop('incref', True) and
            not getattr(process.current_process(), '_inheriting', False)
            )
        return func(token, serializer, incref=incref, **kwds) # This returns the Proxy
"
Getting a specific value from a tuple within a list,"# prepare args using list comprehension
rect_args_list = [ tuple(item[1:]) + ( 16, 16) for item in tails ]
for rect_args in rect_args_list:
    pygame.draw.rect(windowSurface, RED, rect_args)
"
How to get the address of LoadLibraryA in Windows XP with Python 3?,"from ctypes import *
from ctypes import wintypes as win

kernel32 = windll.kernel32

GetModuleHandleA = kernel32.GetModuleHandleA
GetModuleHandleA.argtypes = [win.LPCSTR]
GetModuleHandleA.restype = win.HMODULE

GetProcAddress = kernel32.GetProcAddress
GetProcAddress.argtypes = [win.HMODULE,win.LPCSTR]
GetProcAddress.restype = c_void_p

h_kernel32 = GetModuleHandleA(b'kernel32')
load_address = GetProcAddress(h_kernel32, b'LoadLibraryA')
print('{:016X}'.format(h_kernel32))
print('{:016X}'.format(load_address))
"
Python reset to 0 a Multidimensional Array,"def reset_to_0(the_array):
    for i, e in enumerate(the_array):
        if isinstance(e, list):
            reset_to_0(e)
        else:
            the_array[i] = 0
"
Function inside class not being called,"this._method2(context); ===>  self._method2(context)
"
search the biggest number of one column in a list of list python,">>> li = [(1,2,5), (2,8,7),(3,6,9)]
>>> max(l[2] for l in li)
9
"
For-loop calling urllib.urlopen().getcode() is slow,"import requests as rq
import threading

urls = [""...={}"".format(x) for x in range(100)]

def get_status(url):
    if rq.get(url, verify=False).status_code != 404:
        print ""Successful: {}\n"".format(url)
    else:
        print ""Failed: {}"".format(url)

for url in urls:
    t = threading.Thread(None, get_status, url, (url,))
    t.start()
"
python: make the elements of a list within a certain range,">>> pi = 3.1415

>>> angle = 2*pi+0.5
>>> angle % (2*pi)
0.5

>>> angle = -4*pi + 0.5
>>> angle % (2*pi)
0.5
"
Print list as array Python,"def print_list(l,size):
    for x in l: 
        print x[2],
"
Splitting on last delimiter in Python string?,">>> s = ""a,b,c,d""
>>> s.rsplit(',', 1)
['a,b,c', 'd']
>>> s.rsplit(',', 2)
['a,b', 'c', 'd']
"
How to modify a Numpy array with conditional and function,"mask = (flat >= 0.2) & (flat < 0.7)
flat[mask] = func(flat, 0)[mask]
"
Limit calls to external database with Python CGI,"import datetime
import sqlite3 

class GpsCache(object):
    db_path = 'gps_cache.db'
    def __init__(self):
        self.con = sqlite3.connect(self.db_path)
        self.cur = self.con.cursor()

    def _get_period(self, dt=None):
        '''normalize time to 15 minute periods'''
        if dt.minute < 15:
           minute_period = 0
        elif 15 <= dt.minute < 30:
           minute_period = 15
        elif 30 <= dt_minute < 45: 
           minute_period = 30
        elif 45 <= dt_minute:
           minute_period = 25
        period_dt = datetime.datetime(year=dt.year, month=dt.month, day=dt.day, hour=dt.hour, minute=minute_period)
        return period_dt

    def get_cache(dt=None):
        period_dt = self._get_period(dt)
        select_sql = 'SELECT * FROM GPS_CACHE WHERE date_time = ""%s"";' % period_dt.strftime('%Y-%m-%d %H:%M')
        self.cur.execut(select_sql)
        result = self.cur.fetchone()[0]
        return result


    def put_cache(dt=None, data=None):
        period_dt = self._get_period(dt)
        insert_sql = 'INSERT ....'  # edit to your table structure
        try:
            self.cur.execute(insert_sql)
            self.con.commit()
        except sqlite3.OperationalError:
            # assume db is being updated by another process with the current resutls and ignore
            pass
"
Python Type Conversion,">>> l = ((1,2),(3,4))
>>> dict(map(lambda n: (n[0], unicode(n[1])), l))
{1: u'2', 3: u'4'}
"
Problems with encoding while parsing website (html) and getting strings,">>> apostrophes = dict.fromkeys(
...     (0x2013, 0x2018, 0x2019, 0x201b, 0x2035, 0x275b, 0x275c),
...     ""'"")
>>> phrase.translate(apostrophes)
""Dati aggregati dell'attività amministrativa""
"
"in Numpy, how to zip two 2-D arrays?","np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"
Dumping multiple variables to disk in Json. One variable per line,"with open(p_out, 'wb') as fp:
    json.dump(my_dictionary, fp, indent=0)
"
eliminating multiple occurrences of whitespace in a string in python,"def do_regex_compile():
  pattern = re.compile(r'\s+')
  for x in xrange(100000):
    # Don't do this
    # a = re.sub(pattern, ' ', s)
    a = pattern.sub(' ', s)

$ python revsjoin.py  
Regex:  2.72924399376
Compiled Regex:  1.5852200985
Join:  0.33763718605
"
403 status code while trying to access webpage from Python,"req = urllib2.Request('http://www.taringa.net/envivo/ajax.php')
req.add_header('User-Agent', 'Mozilla')
resp = urllib2.urlopen(req)
print resp.code  # Gives 200.
print resp.read()  # Gives the HTML of the page.
"
Tuple Numpy Data Type,">>> np.array([('ABC', ((1, 2, 3), (1, 2, 3))), ('CBA', ((3, 2, 1), (3, 2, 1)))],
             dtype='a3, (2, 3)i')
array([('ABC', [[1, 2, 3], [1, 2, 3]]), ('CBA', [[3, 2, 1], [3, 2, 1]])], 
      dtype=[('f0', '|S3'), ('f1', '<i4', (2, 3))])
"
Python list comprehension - simple,"[x * 2 if x % 2 == 0 else x
 for x in a_list]
"
lxml not parsing unicode properly for HTML,"data = r.content.decode('UTF-8')
# or
data = r.content.decode(r.encoding)
# then
node = lxml.html.fromstring(data)
self.fingerprint['Title'] = node.cssselect('.document-title div')[0].text
print '@@####', self.fingerprint['Title']
"
Faster way to store a NLTK FreqDict?,"fd = pickle.load(open(""data/fd.txt"", 'rb'))

def compute_ave_freq(word_forms):
    l = len(word_forms)
    return sum([fd.freq(form) for form in word_forms]) / l if l > 0 else 0
"
recursive script to rename folders ending with a space or period,"for root, dirs, files in os.walk('root path'):
    for dir in dirs:
        if dir.endswith(' ') or dir.endswith('.'):
            os.rename(...)
"
Need to export intermediate results from a SQL query script,"import pyodbc  # contains cursor.execute, the interface to SQL
import csv     # creates csv.writer, used to create the CSV file

    Textfile     = open( ""FileContainingSqlCode"", 'r' )  
    SQL_COMMANDS = Textfile.read();     #  Get SQL code for all reports

    cursor.execute( SQL_COMMANDS, Year, Month, Day )  # do all reports using 3 parameters 

    # Create first report from the first result set

    ReportID = 1

    filename = ""D:\\Report"" + str( ReportID ) + "".csv""
    OutFile  = open( filename, 'w', newline= '' ) 

    Results = csv.writer( OutFile, delimiter = ',', quotechar = '""', 
                          quoting = csv.QUOTE_MINIMAL )
    while True:            
        row = cursor.fetchone()
        if not row:
            break
        Results.writerow( row )
    OutFile.close()

    # Create the 2nd through Nth reports

    while ( cursor.nextset() ) :
        ReportID += 1

        filename = ""D:\\Report"" + str( ReportID ) + "".csv""
        OutFile =  open( filename, 'w', newline= '' ) 

        Results = csv.writer( OutFile, delimiter = ',', quotechar = '""', 
                          quoting   = csv.QUOTE_MINIMAL )
        while True:            
            row = cursor.fetchone()
            if not row:
                break
            Results.writerow( row )            
        OutFile.close() 

# end of Python 3.x code
"
parse string into columns python pandas /xa0 in stead of white space,"In [11]: df.File.str.split('\s\s+')
Out[11]: 
0       [firstname lastname, 05/31/1996, 9999999999, ]
1    [FN SometimesMiddileInitial. LN, 05/31/1996, 9...
Name: File, dtype: object
"
Evaluation order of positional and keyword arguments,">>> x = [1, 2, 3]
>>> count(*(float(y) for y in x), **{'three': x.pop()})
1.0, 2.0, 3
"
Python interpreted code optimisation,"import dis

def test():
    name = 'test'
    tdict = {}
    tdict[name] = 0
    tdict[name] += 1
    tdict[name] += 1

dis.dis(test)
"
Python Tkinter: Delete the Last Character of a String,"    if not self.e.get().isdigit():
        #take the string currently in the widget, all the way up to the last character
        txt = self.e.get()[:-1]
        #clear the widget of text
        self.e.delete(0, tk.END)
        #insert the new string, sans the last character
        self.e.insert(0, txt)
"
Reverse mapping class attributes to classes in Python,"reverse_mapping = {}

class A(object):
    _internal_attribute = 'A attribute'

reverse_mapping[A._internal_attribute] = A
"
"is it possible to create a dictionary ""template"" in python?","class recipe:
    def __init__(self,name,ingredients):
        self.name = name
        self.ingredients = ingredients
    def __str__(self):
        return ""{name}: {ingredients}"".format(name=self.name,ingredients=self.ingredients)

toast = recipe(""toast"",(""bread""))
sandwich = recipe(""sandwich"",(""bread"",""butter"",""ham"",""cheese"",""butter"",""bread""))
"
Loading SQLite3 values into Python variables,"with sqlite3.connect(':memory:') as conn:
    curs = conn.cursor()
    curs.row_factory = sqlite3.Row
    try:
        results = curs.execute( """"""SELECT mycol 
                                     FROM mytable 
                                    WHERE somecol = ?;"""""", 
                               (some_var,) ).fetchall()
    # you would put your exception-handling code here
    finally:
        curs.close()
"
"Writing Python lists into file, items seperated by semicolon","with open('file', 'w') as f:
    f.write(format_string.format(list[0], list[1], list[2]))
"
How to check function argument values in python?,"def __init__(self, *args):
    args = [argument or None for argument in args]
"
loop over tree like structure,"def foo(m):

  for i in range(0, len(m), 2):

    for j in range(len(m[i])-1):
      current = tuple(m[i][j:(j+2)])
      mm = m[i+1]
      if(len(mm) % 2 != 0 or (len(mm) > 1 and not type(mm[1][0]) is types.ListType)):
        currentl = mm[j]
        for k in range(0, len(currentl)-1):
          yield current, tuple(currentl[k:(k+2)])

      else:
        for res in foo(mm[2*j:2*j+2]):
          # this is for pretty print only
          if type(res) is types.TupleType and len(res)>1 and not type(res[0]) is types.TupleType:
            yield current, res
          else:
            # pretty print again
            c = [current]
            c+= res
            yield tuple(c)
"
How can I geolocate a bunch of IP addresses with Python?,"import urllib2
f = urllib2.urlopen(""http://api.hostip.info/get_html.php?ip=64.233.160.0"")
data = f.read()
f.close()
"
How to memoize method when one of its memoized parameters should be an instance variable,">>> class A(object):

    def __init__(self):
        self.time = 10

    @stateful_memoize('time')
    def f(self, x):
        print('Calling f with x={!r}, self.time={!r}'.format(x, self.time))
        return x * self.time

>>> a = A()
>>> a.f(1)
Calling f with x=1, self.time=10
10
>>> a.f(1)
10
>>> a.time = 5
>>> a.f(1)
Calling f with x=1, self.time=5
5
>>> a.time = 10
>>> a.f(1)
10
>>> a.f(2)
Calling f with x=2, self.time=10
20
>>> a.f.cache
{(1, 10): 10, (1, 5): 5, (2, 10): 20}
"
python lists manipulation group by count,"import operator

def compress(sequence):
    """"""Packs source sequence into sub-sequences and finds the longest""""""
    if not sequence: return []
    max_length = 0
    max_item = None
    cur_length = 0
    cur_item = sequence[0]
    compressed = []
    for item in sequence:
        if item == cur_item:
            cur_length += 1
        else:
            compressed.append((cur_item, cur_length))
            if cur_length >= max_length:
                max_length, max_item = cur_length, cur_item
            cur_item, cur_length = item, 1
    # Forgot to handle the last sequence
    compressed.append((cur_item, cur_length))
    if cur_length >= max_length:
        max_length, max_item = cur_length, cur_item
    # End of fixes
    return compressed, max_length, max_item

if __name__ == '__main__':
    sequence = [1,1,1,1,2,2,3,3,6,6,6,6,6,6,6,6,4,4,4,4,4,3,3,7,7,7,1,1]
    compressed, max_length, max_item = compress(sequence)

    print 'original:', sequence
    print 'compressed:', compressed
    print 'max_length:', max_length, 'max_item:', max_item
    print 'uncompressed:', [[item] * length for item, length in compressed] # This is for example only

    pre_result = [[max_item if length * 2 <= max_length else item] * length for item, length in compressed]
    print 'uncompressed with replace:', pre_result
    result = reduce(operator.add, pre_result) # Join all sequences into one list again
    print 'result:', result
"
Python - Return top 5 words with highest frequency,"import collections
def top5_words(text):
    counts = collections.Counter(text.split())
    return [elem for elem, _ in counts.most_common(5)]
"
Convert string date to timestamp in Python,"time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())"
How can I call a function and form a return object for use within my settings file?,"from django.utils.functional import wraps

def beta(view):
    @wraps(view)
    def inner(request, *args, **kwargs):
        if request.user.user_profile.beta:
            return view(request, *args, **kwargs)
        # Up to you how you return failure...
    return inner
"
How to get euclidean distance on a 3x3x3 array in numpy,"np.sum((x - [1, 1, 1])**2, axis=-1, keepdims=True)**0.5
"
Python Pythonic way to organize/design if statements,"if not x == 0 or y == 0:
    somestuff_B
"
How to type negative number with .isdigit?,"try:
    int(question)
    is_dig = True
except ValueError:
    is_dig = False
if is_dig:
  ......
"
python function slowing down for no apparent reason,"list2_set = set([tuple(x) for x in list2])
diff = [x for x in list1 if tuple(x) not in list2_set]
"
Is there any way that I can turn this into a list comprehension,"itertools.starmap(operator.add, 
                  itertools.izip_longest(self, other, fillvalue=0))
"
How to pipe parameter string to excutable in python?,"import subprocess

p = subprocess.Popen(['a.out'], stdin=subprocess.PIPE)
p.communicate('1 \n 3 \n 2 \n 5 \n 2...\n')
"
"How can I read a file, put contents in an array, shuffle the array, and then write the shuffled array to the file in python 2.7","import itertools

with open('test.txt','r') as infile, open('shuffles.txt','w') as outfile:
    words = infile.read().strip().split('\n')
    shuffles = itertools.permutations(words)
    output = '\n'.join(' '.join(shuffle) for shuffle in shuffles)
    outfile.write(output)
"
Numpy: get the column and row index of the minimum value of a 2D array,"In [9]: np.where(x == np.min(x))
Out[9]: (array([2]), array([1]))
"
to find the opinion of a sentence as positive or negative,"import nltk
from nltk.tokenize import sent_tokenize, word_tokenize
import csv

para = ""What can I say about this place. The staff of the restaurant is nice and the eggplant is not bad. Apart from that, very uninspired food, lack of atmosphere and too expensive. I am a staunch vegetarian and was sorely dissapointed with the veggie options on the menu. Will be the last time I visit, I recommend others to avoid""

sentense = word_tokenize(para)
word_features = []

for i,j in nltk.pos_tag(sentense):
    if j in ['JJ', 'JJR', 'JJS', 'RB', 'RBR', 'RBS']: 
        word_features.append(i)

rating = 0

for i in word_features:
    with open('words.txt', 'rt') as f:
        reader = csv.reader(f, delimiter=',')
        for row in reader:
            if i == row[0]:
                print i, row[1]
                if row[1] == 'pos':
                    rating = rating + 1
                elif row[1] == 'neg':
                    rating = rating - 1
print  rating
"
I would like to implement a loop but I don't know how to go about it,"print(""What do you wanna do?"")

input1 = input()

complex_inputs = [""stab this guy"", ""punch this guy""]

actions_list = [action for actions in complex_inputs for action in actions.split()]

while input1.lower() not in (actions_list or complex_inputs):
    print(""Sorry didn't catch that"")
    print(""What do you wanna do?"")
    input1 = input()

if input1.lower() in ""stab this guy"":
    print(""You stabbed that guy and killed him."")

elif (input1.lower() in ""punch this guy""):
    print(""You punched him..."")
"
How to use a map with *args to unpack a tuple in a python function call,"def merger((l,r,v,o)):
    return l+r

for m in mergelist:
         print merger(m)
"
"Setting up stateChanged signal in QStackedWidget, pyqt","import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *

class stackedExample(QWidget):
    def __init__(self):
        super(stackedExample, self).__init__()
        self.leftlist = QListWidget()
        self.leftlist.insertItem(0, 'Contact')
        self.leftlist.insertItem(1, 'Personal')
        self.leftlist.insertItem(2, 'Educational')

        self.stack1 = QWidget()
        self.stack2 = QWidget()
        self.stack3 = QWidget()

        self.stack1UI()
        self.stack2UI()
        self.stack3UI()

        # Renamed self.stack to self.stack since the convention is to start
        # class names with a capital but regular variables with a lower case.
        self.stack = QStackedWidget(self) 
        self.stack.addWidget(self.stack1)
        self.stack.addWidget(self.stack2)
        self.stack.addWidget(self.stack3)

        hbox = QHBoxLayout(self)
        hbox.addWidget(self.leftlist)
        hbox.addWidget(self.stack)

        self.setLayout(hbox)
        self.leftlist.currentRowChanged.connect(self.display)
        self.setGeometry(300, 50, 10, 10)
        self.setWindowTitle('StackedWidget demo')
        self.show()

    def stack1UI(self):
        layout = QFormLayout()
        layout.addRow(""Name"", QLineEdit())
        layout.addRow(""Address"", QLineEdit())
        # self.setTabText(0,""Contact Details"")
        self.stack1.setLayout(layout)

    def stack2UI(self):
        layout = QFormLayout()
        sex = QHBoxLayout()
        sex.addWidget(QRadioButton(""Male""))
        sex.addWidget(QRadioButton(""Female""))
        layout.addRow(QLabel(""Sex""), sex)
        layout.addRow(""Date of Birth"", QLineEdit())

        self.stack2.setLayout(layout)

    def stack3UI(self):
        layout = QHBoxLayout()
        layout.addWidget(QLabel(""subjects""))
        self.physicsCheckBox = QCheckBox(""Physics"")
        layout.addWidget(self.physicsCheckBox)
        self.physicsCheckBox.stateChanged.connect(self.physicsCheckBoxStateChanged)

        layout.addWidget(QCheckBox(""Maths""))
        self.stack3.setLayout(layout)


    def physicsCheckBoxStateChanged(self, state):
        isChecked = bool(state) # Convert from Qt.CheckState
        print(""physicsCheckBox: {}"".format(isChecked))

    def display(self, i):
        self.stack.setCurrentIndex(i)


def main():
    app = QApplication(sys.argv)
    ex = stackedExample()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
"
Multiplying every element of one array by every element of another array,"In [36]: %timeit np.array([y * a for a in x]).flatten()
1 loops, best of 3: 766 ms per loop
"
"Python threading, weird result","import threading
import time
import random

def loop_fn(i):
    n = random.randint(1,5)
    print ""process"", i,"" started ""
    time.sleep(n)
    print ""process"", i,"" finished""

threads = []
for i in range(1, 5):
    t = threading.Thread(target=loop_fn, args=(i,))
    t.start()
    threads.append(t)

for t in threads:
    t.join()
print ""end""
"
"Why is this python regular expression matching only one character, instead of the desired words?"," (?<! [A-Z0-9ÁÉÍÓÚÑ:;¿?()\-+.,] )             # ASSERT - Dont start in the middle of anything
 (                                            # (1 start)
      (?!                                          #  ASSERT - The start cannot be this phrases (add more)
           (?: NOM-059-SEMARNAT )
      )
      [A-ZÁÉÍÓÚÑ¿]                                 # Starts with a letter
      (?:
           (?!                                          # ASSERT - The body cannot contain this phrase  (add more)
                (?: [- ]{2,} | NOM\-059\-SEMARNAT )
           )
           [A-Z0-9ÁÉÍÓÚÑ:;¿?()\-+. ,] 
      ){9,}

      (?<= [A-ZÁÉÍÓÚÑ?] )                          # ASSERT - Ended with a letter
 )                                            # (1 end)
 (?! [a-z] )                                  #  ASSERT - Not a forward lower case when previous upper case that probably starts a sentence
"
select files from path,"l = [f for f in glob('*.faifb1p16m2.nc') if re.search(re1, f)]`
"
Reading rows from a CSV file in Python,"In [39]: with open(""data1.txt"") as f:
    for i,line in enumerate(f):             
        print ""line {0} = {1}"".format(i,line.split())
   ....:         
line 0 = ['Year:', 'Dec:', 'Jan:']
line 1 = ['1', '50', '60']
line 2 = ['2', '25', '50']
line 3 = ['3', '30', '30']
line 4 = ['4', '40', '20']
line 5 = ['5', '10', '10']
"
How to read Python Documentation,"import string

print string.lstrip(""abc"", ""a"") # ""bc""
print string.lstrip("" abc"") # ""abc""
"
"slice in python, is a copy or just a pointer","class Itemtest(object):
    def __init__(self, name):
        self.name = name
    def __repr__(self):
        return self.name
    def __setitem__(self, item, value):
        print ""__setitem__"", self, item, value
    def __getitem__(self, item):
        print ""__getitem__"", self, item
        return Itemtest(""inner"")

a = Itemtest(""outer"")
a[0:1] = [4]
temp = a[0:1]
temp[0] = 4
a[0:1][0] = 4
"
Python dynamic help and autocomplete generation,"import inspect
import functools


class _Default(object):
    def __init__(self, repr):
        self._repr = repr
    def __repr__(self):
        return self._repr


def _buildFacade(name, spec, docstring):
    """"""Build a facade function, matching the decorated method in signature.

    Note that defaults are replaced by instances of _Default, and _curried
    will reconstruct these to preserve mutable defaults.

    """"""
    args = inspect.formatargspec(
        formatvalue=lambda v: '=_Default({0!r})'.format(repr(v)), *spec)
    callargs = inspect.formatargspec(formatvalue=lambda v: '', *spec)
    return 'def {0}{1}:\n    """"""{2}""""""\n    return _curried{3}'.format(
        name, args, docstring, callargs)


def add_docs(tool):
    spec = inspect.getargspec(tool)
    args, defaults = spec[0], spec[3]

    arglen = len(args)
    if defaults is not None:
        defaults = zip(args[arglen - len(defaults):], defaults)
        arglen -= len(defaults)

    def _curried(*args, **kw):
        # Reconstruct keyword arguments
        if defaults is not None:
            args, kwparams = args[:arglen], args[arglen:]
            for positional, (key, default) in zip(kwparams, defaults):
                if isinstance(positional, _Default):
                    kw[key] = default
                else:
                    kw[key] = positional

        return tool(*args, **kw)

    name = tool.__name__
    doc = 'Showing help for {0}()'.format(name)
    facade_globs = dict(_curried=_curried, _Default=_Default)
    exec _buildFacade(name, spec, doc) in facade_globs

    wrapped = facade_globs[name]
    wrapped = functools.update_wrapper(wrapped, tool,
        assigned=filter(lambda w: w != '__doc__', functools.WRAPPER_ASSIGNMENTS))

    return facade_globs[name]
"
Can Python's comprehensions make groups?,">>> from itertools import groupby
>>> from operator import itemgetter
>>> inputlist = [(1,2,5),(2,10,13),(5,24,56),(1,8,10),(2,3,11)]
>>> {k: (min(item[1] for item in gv), max(item[2] for item in gv))
...          for k, g in groupby(sorted(inputlist, key=itemgetter(0)), itemgetter(0))
...          for gv in (list(g),)}
{1: (2, 10), 2: (3, 13), 5: (24, 56)}
"
"How to crawl only two pre-defined pages, but they scrape different items?","class MySpider(BaseSpider):
    name = ""myspider""
    allowed_domains = [""example.com""]
    pid = ""4545-fw""
    person = ""bob""

    def start_requests(self):
        start_urls = (
            ('http://www.example.com/person/%s/person.xml' % self.person, PersonItem),
            ('http://www.example.com/%s/product.xml' % self.pid, ProductItem),
        )
        for url, cls in start_urls:
            yield Request(url, meta=dict(cls=cls))

    def parse(self, response):
        item = response.meta['cls']()
"
Tensorflow Race conditions when chaining multiple queues,"tf.reset_default_graph()

queue_dtype = np.int32

# values_queue is a queue that will be filled with 0,1,2,3,4
# range_input_producer creates the queue and registers its queue_runner
value_queue = tf.range_input_producer(limit=5, num_epochs=1, shuffle=False)
value = value_queue.dequeue()

# value_squared_queue will be filled with 0,1,4,9,16
value_squared_queue = tf.FIFOQueue(capacity=50, dtypes=queue_dtype)
value_squared_enqueue = value_squared_queue.enqueue(tf.square(value))
value_squared = value_squared_queue.dequeue()

# value_squared_sum keeps running sum of squares of values 
value_squared_sum = tf.Variable(0)
value_squared_sum_update = value_squared_sum.assign_add(value_squared)

# register queue_runner in the global queue runners collection
num_threads = 2
qr = tf.train.QueueRunner(value_squared_queue, [value_squared_enqueue] * num_threads)
tf.train.queue_runner.add_queue_runner(qr)

sess = tf.InteractiveSession()
sess.run(tf.initialize_all_variables())
tf.start_queue_runners()

for i in range(5):
  sess.run([value_squared_sum_update])
  print sess.run([value_squared_sum])
"
Python: Best way to translate constants?,"arg_map = {1 : 'JOHN', 4 : 'SMITH', 8 : 'BEN'}
translated_result = map(arg_map.get, result_list)
"
Relace emotion html tags with emotion names using Python,"Help on function sub in module re:

sub(pattern, repl, string, count=0, flags=0)
    Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used.
"
How to print a text without substring in Python,"val = ""I was with my friend""

print val.replace(""was "", """")
"
Get file creation time with Python on Mac,"def get_creation_time(path):
    return os.stat(path).st_birthtime
"
Flask - fetching files from a subdirectory of main upload folder,"from werkzeug.security import safe_join

@app.route('/uploads/<new_folder_name>/<filename>')
def uploaded_file(filename, new_folder_name):
    path = safe_join(os.join(app.config['UPLOAD_FOLDER'], new_folder_name)
    if path is None:
        abort(404)
    files = os.listdir(path)
    if not files:
        abort(404)
    return send_from_directory(path, files[0])
"
Maintain count in python list comprehension,"[(i, x) for i, x in enumerate(some_list, 1) if x != 'p']
"
Using Python to use a website's search function,"In [13]: r = requests.get('http://www.pharmacy295.gr/el/products/autocomplete.json',data = payload ,headers = headers)

In [14]: print(r.json())
[{u'title': u'NEUTROGENA - Hand & Nail Cream - 75ml', u'discounted_price': u'5,31 \u20ac', u'photo': u'/system/uploads/asset/data/12584/tiny_108511.jpg', u'brand': u'NEUTROGENA ', u'path': u'/products/7547', u'price': u'8,17 \u20ac'}, {u'title': u'NEUTROGENA - Hand Cream (Unscented) - 75ml', u'discounted_price': u'4,03 \u20ac', u'photo': u'/system/uploads/asset/data/4689/tiny_102953.jpg', u'brand': u'NEUTROGENA ', u'path': u'/products/3958', u'price': u'6,20 \u20ac'}, {u'title': u'NEUTROGENA - PROMO PACK 1+1 \u0394\u03a9\u03a1\u039f  Lip Moisturizer - 4,8gr', u'discounted_price': u'3,91 \u20ac', u'photo': u'/system/uploads/asset/data/5510/tiny_118843.jpg', u'brand': u'NEUTROGENA ', u'path': u'/products/4644', u'price': u'4,60 \u20ac'}, {u'title': u'NEUTROGENA - Lip Moisturizer with Nordic Berry - 4.9gr', u'discounted_price': u'2,91 \u20ac', u'photo': u'/system/uploads/asset/data/12761/tiny_126088.jpg', u'brand': u'NEUTROGENA ', u'path': u'/products/7548', u'price': u'4,48 \u20ac'}]
"
Inheritance and classes,"class Home(Edifice):
    def __init__(self, storeys, area, bedrooms):
        super().__init__(storeys, area)
        self.__bedrooms = bedrooms
        self.message = ""For human habitation: {} bedrooms""

    def show_info(self):
        super(Home, self).show_info()
        print(""{}"".format(self.message.format(self.__bedrooms)))
"
Turning an existing array into a multidimensional,"my_dict['anotherarray'].append('things')
"
Set up a Python list from possibly non-existing variables,"for attr in ['__a', '__b', '__c']:
    try:
        var = getattr(self, attr)
        # Do something
    except AttributeError:
        pass # or do something else
"
How to read a text file with mixed data_types automatically in Python?,"data = np.genfromtxt('input_file', dtype=None , delimiter="","")
print (data)
"
How to create a list of sublists where the sublists are split strings?,"def main():
    names = list()
    with open(""users.txt"", ""r"") as myfile:
        for line in myfile:
            names.append(line.split('|'))
    print(names)
"
How can this datetime variable be converted to the string equivalent of this format in python?,"print(dt.strftime(""%d-%b-%Y %H:%m:%S""))
"
Transpose a Python Dataframe according many variables,"#create dataframe and stack, drop level of multiindex
s1 = (df['product'].str.split('|', expand=True)).stack()
s1.index = s1.index.droplevel(-1)
s1.name = 'product'

s2 = (df['Prices'].str.split('|', expand=True)).stack()
s2.index = s2.index.droplevel(-1)
s2.name = 'price'

#remove original columns    
df = df.drop(['product','Prices'], axis=1)

#join series to dataframe    
df1 = (df.join(s1).reset_index(drop=True))
df2 = (df.join(s2).reset_index(drop=True))

#join all togehter
print (pd.concat([df1, df2[['price']]], axis=1))
      date    conv product price
0  01/2016  'part'       A    15
1  01/2016  'part'       B    20
2  01/2016  'part'       C    30
3  01/2016  'part'       E    40
4  01/2016  'part'       F    50
5  01/2016   'pro'       D    10
6  01/2016   'pro'       B    10
"
Python splitting string to find specific content,"s = s.split('<')[1][:-1]
"
Replace string element with split method,">>> mystr = ""Higher id: 38""
>>> mylist = mystr.split(' ')
>>> mylist[-1] = ""55"" # t[-1] accesses the last element in the list
>>> print ' '.join(mylist)
Higher id: 55
"
Way to iterate though object in python,"class BoxWithOranges:
    def __init__(self):
        self.attributes = {}

    def __getitem__(self, key):
        return self.attributes[key]

    def __setitem__(self, key, value):
        self.attributes[key] = value
"
How can I get all the property names of a GTK Container?,">>> import inspect
>>> inspect.getmembers(gtk.Container)
"
Pickling a list consisting of 'n' 2-tuple values,"# Dummy data
from random import randint as r

a,b = 97,123

d = [(dict([(chr(r(a,b)),j) for j in range(1000)]),
       ''.join([chr(r(a,b)) for i in range(5)])) 
                            for j in range(100)]

# Pickle it
import cPickle as pickle

f = open('store.dat','w')
pickle.dump(d,f)
f.close()
"
Text clean up in Python,">>> import re
>>> word = ['roaming','overseas','samsung']
>>> s =  ""Contacted vodafone about going overseas and asked about roaming charges. The customer support officer says there isn't a charge but while checking my usage overseas.""
>>> pattern = r'|'.join(map(re.escape, word))
>>> re.findall(pattern, s)
['overseas', 'roaming', 'overseas']
>>> ' '.join(_)
'overseas roaming overseas'
"
How to convince python that an int type is actually a hex type?,"x = int(str(9663676416),16)
print x
print hex(x)
"
Python collections of non-base type?,"car1 = {'brand': 'foo', 'model': 'bar', 'hp': 23}
car2 = {'brand': 'baz', 'model': 'bar', 'hp': 34}
car2 = {'brand': 'baz', 'model': 'bar', 'hp': 14}
car_list = [car1, car2, car3]

car_list.sort(key=lambda c: c['hp'])
"
dont get how to make connection,"class ShoppingList (models.Model):
    user = models.ForeignKey(User,related_name=""user_shoplist"")
    list_name = models.CharField(max_length=200)
    # your other fields...

class Item(models.Model):
    from_list = models.ForeignKey(ShoppingList, related_name=""list_items"") 
    item_name = models.CharField(max_length=200)
    # more fields..



#user actions
user = request.user
user_shoplist = user.user_shoplist.create(list_name=""Dolls"")

#adding items to shopping list
new_item1 = user_shoplist.list_items.create(item_name='barbie')
new_item2 = user_shoplist.list_items.create(item_name='teddy')
#.... etc etc


# all shopping lists of a user
user_shopping_lists = user.user_shoplist.all()

#all items in a shopping list of a user (""user_shoplist"" from above)
all_items_in_a_shoppinglist = user_shoplist.list_items.all()
"
Resolve variables from a string,"a, b = map(int, s.split('x'))
res = a * b
"
putting value of one array into a list in python,">>> type(np.array([0,0,1,1,1,0]))
<type 'numpy.ndarray'>
>>> type(np.array([0,0,1,1,1,0]).tolist())
<type 'list'>
"
Python add days in epoch time,">>> import datetime
>>> orig = datetime.datetime.fromtimestamp(1425917335)
>>> new = orig + datetime.timedelta(days=90)
>>> print(new.timestamp())
1433693335.0
"
Python:List Addition,"Emp_TotDur = Assign.objects.select_related().filter(pName=selProject).filter()
    .order_by('laEmpNum').values_list('laEmpNum', 'duration')

[(k , sum(e for _,e in v)) for k,v in groupby(Emp_TotDur, itemgetter(0))]
"
Pandas: Change day,"import pandas as pd
from datetime import datetime

ps = pd.Series([datetime(2014, 1, 7), datetime(2014, 3, 13), datetime(2014, 6, 12)])
new = ps.apply(lambda dt: dt.replace(day=1))
"
How to add a list of tuples (Python),"def sum_prices(orderList, productPrices):
    sum = 0
    for (item, pounds) in orderList:
        if item not in productPrices:
            return 0
        sum += pounds * productPrices[item]
    return sum
"
Pythonic way to print list items,"print '\n'.join(str(p) for p in myList) 
"
Stripping content using regular expressions in python,"url = 'http://www.theguardian.com/sport/rss'
open_page = urlopen(url)
html_code = open_page.read()
open_page.close()

descriptions = re.findall(r'<description>(.*?)</description>',html_code)


for description in descriptions:
    if 'Latest news and features from theguardian.com' in description:
        pass
    else:

        #edited here
        cont = re.sub(""&lt.*?&gt"","""",description)

        print ""Description:"" ,cont
"
Python Multiprocessing DictProxy append to dict of list not working,"from collections import defaultdict
def filestat(file):
  try:
      stat = os.stat(file)
      user = pwd.getpwuid(stat[4])[0]
      group = grp.getgrgid(stat[5])[0]
      return user, file
  except OSError, e:
      print e
      return None
try:
    cores = (multiprocessing.cpu_count()*2)
except:
    cores = 8
print ""Starting parallel execution with "", cores, ""concurrency""
pool_get_attributes = multiprocessing.Pool(cores)
result_map = pool_get_attributes.map(filestat, files)
result = defaultdict(list)
for user,file in (r for r in result_map if r is not None):
    result[user].append(file)
pool_get_attributes.close()
pool_get_attributes.join()
"
How to get txt file into CSV?,"import pandas as pd, csv
df = pd.read_fwf(""filename.txt"", widths=(5,11,5), names=[""TypeA"", ""TypeB"", ""Charles""])
df.to_csv(""out.csv"", index=False, quoting=csv.QUOTE_ALL)
"
How to log IPython history to text file?,"import os

ip = get_ipython()

favfile = ""readline_favorites""

def load_readline_favorites():
    """"""load profile_dir/readline_favorites into the readline history""""""
    path = os.path.join(ip.profile_dir.location, favfile)
    if not os.path.exists(path):
        return

    with open(path) as f:
        for line in f:
            ip.readline.add_history(line.rstrip('\n'))

if ip.has_readline:
    load_readline_favorites()
"
Confusion about string find?," for counter, line in enumerate(completedataset):
     print counter + 1
     firstcomma = thestring.find(',')
     havename = thestring.find(t, 0, firstcomma)
     if havename >= 0:
         smallerdataset.write(line)
"
Python - how to delete all characters in all lines after some sign?,"for line in html.splitlines():
    cleaned = line.rsplit('@', 1)[0]
    print cleaned
"
Can't successfully compare strings with python,"for content in sort_list:
    flag = True
    content = content.lower()
    for thing in list1:
        thing = thing.lower()
        if thing in content:
            flag = False
            break
    if flag:
        print (""\n\n"",outcome,""\n\n"",content)
"
Naming returned columns in Pandas aggregate function?,"df = data.groupby(...).agg(...)
df.columns = df.columns.droplevel(0)
"
Pythonic way to set a maximum length parameter,"def func(lst, ln=None):
    if ln is None:
        return lst
    elif ln < 1:  # handles 0, and negative values.
        return []
    else:
        ln = max(ln, len(lst))
        return [i for i in lst if len(i) <= ln]
"
Convert a list of lists of tuples to a tuple of lists of lists in python,"def convert(data_structure):
    sentences = []
    tags = []

    for sentence in data_structure:
        sentence_words = []
        sentence_tags = []

        for word, tag in sentence:
            sentence_words.append(word)
            sentence_tags.append(tag)

        sentences.append(sentence_words)
        tags.append(sentence_tags)

    return (sentences, tags)
"
jquery flot prints dates on the x-axis,"import datetime
import time

msdate = time.mktime(datetime.date(2012, 5, 25).timetuple()) * 1000
"
Initialize empty list with same shape as array,"a = [[[[] for j in xrange(2)] for i in xrange(4)] for k in xrange(3)]
"
Apply multiple functions to the same argument in functional Python,"def functioncaller(*args, **kwargs):
    return lambda fun:fun(*args, **kwargs)
"
How do I tokenize a file with Python as a sequence of regular expressions?,"import re
import sys

def section(scanner, token):
    return ""SECTION"", scanner.match.group(1)

def some_line(scanner, token):
    return ""SOME LINE"", token

def garbage(scanner, token):
    sys.exit('Found garbage: {}'.format(token))

# scanner will attempt to match these patterns in the order listed.
# If there is a match, the second argument is called.
scanner = re.Scanner([  
    (r""section (\d+)$$"", section),
    (r""some line$"", some_line), 
    (r""\s+"", None),  # skip whitespace
    (r"".+"", garbage), # if you get here it's garbage
    ], flags=re.MULTILINE)


tokens, remainder = scanner.scan('''\

section 1

some line
''')
for token in tokens:
    print(token)
"
"Python: Convert those TinyURL (bit.ly, tinyurl, ow.ly) to full URLS",">>> import httplib
>>> conn = httplib.HTTPConnection('bit.ly')
>>> conn.request('HEAD', '/rgCbf')
>>> response = conn.getresponse()
>>> response.getheader('location')
'http://webdesignledger.com/freebies/the-best-social-media-icons-all-in-one-place'
"
Setting a Limit With BeautifulSoup,"import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen('http://finance.yahoo.com/q/ks?s=NATI%20Key%20Statistics').read()

soup = BeautifulSoup(page)

all_data = soup.findAll('td', ""yfnc_tabledata1"")

print all_data[2].getText()

# or - for more elements

for element in all_data[0:3]:
    print element.getText()

# write to CSV

import csv

with open(""results.csv"", ""wb"") as f:
    writer = csv.writer(f)

    writer.writerow([""header1"", ""header2"", ""header3""])  

    for element in all_data[0:3]:
        writer.writerow([element.getText(), ""column2"", ""column3""])
"
Split an utf-8 encoded string given a bytes offset (python 2.7),"# -*- coding: utf-8 -*- 

bar = ""hello ｡◕‿‿◕｡""
assert(isinstance(bar, str))

first_part = bar[:9]
second_part = bar[9:]
print first_part
print second_part
"
How to replace all Negative Numbers in Pandas DataFrame for Zero,"In [1]: import pandas as pd

In [2]: df = pd.DataFrame({'a': [0, -1, 2], 'b': [-3, 2, 1],
                           'c': ['foo', 'goo', 'bar']})

In [3]: df
Out[3]: 
   a  b    c
0  0 -3  foo
1 -1  2  goo
2  2  1  bar

In [4]: num = df._get_numeric_data()

In [5]: num[num < 0] = 0

In [6]: df
Out[6]: 
   a  b    c
0  0  0  foo
1  0  2  goo
2  2  1  bar
"
Obfuscating Strings with ASCII and base 128,"total = 0
for c in ""#car"":
    total <<= 7
    total += ord(c)
print total
"
Identifying groups of similar numbers in a list,"from statistics import mean

def ordered_cluster(data, max_diff):
    current_group = ()
    for item in data:
        test_group = current_group + (item, )
        test_group_mean = mean(test_group)
        if all((abs(test_group_mean - test_item) < max_diff for test_item in test_group)):
            current_group = test_group
        else:
            yield current_group
            current_group = (item, )
    if current_group:
        yield current_group

data = [4.1, 4.05, 4.14, 4.01, 3.97, 4.52, 4.97, 5.02, 5.05, 5.2, 5.18, 3.66, 3.77, 3.59, 3.72]

print(list(ordered_cluster(data, 0.5)))
"
Make special diagonal matrix in Numpy,"a = np.zeros((5,10))
i,j = np.indices(a.shape)
"
How to do result post-processing before rendering with django endless-pagination?,"from endless_pagination.templatetags.endless import PAGINATE_EXPRESSION

@register.tag
def paginate(parser, token, paginator_class=None):
    # Validate arguments.
    try:
        tag_name, tag_args = token.contents.split(None, 1)
    except ValueError:
        msg = '%r tag requires arguments' % token.contents.split()[0]
        raise template.TemplateSyntaxError(msg)

    # Use a regexp to catch args.
    match = PAGINATE_EXPRESSION.match(tag_args)
    if match is None:
        msg = 'Invalid arguments for %r tag' % tag_name
        raise template.TemplateSyntaxError(msg)

    # Retrieve objects.
    kwargs = match.groupdict()
    objects = kwargs.pop('objects')

    # The variable name must be present if a nested context variable is passed.
    if '.' in objects and kwargs['var_name'] is None:
        msg = (
            '%(tag)r tag requires a variable name `as` argumnent if the '
            'queryset is provided as a nested context variable (%(objects)s). '
            'You must either pass a direct queryset (e.g. taking advantage '
            'of the `with` template tag) or provide a new variable name to '
            'store the resulting queryset (e.g. `%(tag)s %(objects)s as '
            'objects`).'
        ) % {'tag': tag_name, 'objects': objects}
        raise template.TemplateSyntaxError(msg)

    # Call the node.
    return CustomPaginateNode(paginator_class, objects, **kwargs)
"
Python: Save Excel File As-Is To Folder,"xfile = requests.get(candidate_link)
file_name = candidate_link.split('/')[-1]
if xfile:
    with open(file_name, ""wb"") as f:
        f.write(xfile.content)
"
"Plotting sort of a heatmap whose colors are a result of a function x,y -> r,g,b","import numpy
from matplotlib import pyplot as plt
from numpy.core.umath_tests import inner1d

width, height = 300, 500

xs, ys = numpy.mgrid[:width, :height]
coordinates = numpy.dstack([xs, ys])

light_sources = {
    (0, 0): (0, 0, 0),
    (300, 0): (0, 0, 0),
    (0, 0): (0, 0, 0),
    (300, 500): (0, 0, 0),
    (100, 0): (0, 0, 200),
    (200, 150): (100, 70, 0),
    (220, 400): (255, 255, 255),
    (80, 220): (255, 0, 0),
}

weights = numpy.zeros([width, height])
values = numpy.zeros([width, height, 3])
"
Setting different color for each series in scatter plot on matplotlib,"import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm

x = np.arange(10)
ys = [i+x+(i*x)**2 for i in range(10)]

colors = cm.rainbow(np.linspace(0, 1, len(ys)))
for y, c in zip(ys, colors):
    plt.scatter(x, y, color=c)
"
What is the most pythonic way to iterate over OrderedDict,"
>>> d = {'a': 'b'}
>>> for i, (key, value) in enumerate(d.iteritems()):
...     print i, key, value
... 
0 a b
"
Remove following duplicates in a tuple,"def replace_dupes(ax):
    result = []
    seen = set()
    for x in ax:
        if x in seen:
            result.append('')
        else:
            seen.add(x)
            result.append(x)
    return result

ax = ('0','1','1','1','2','2','2','3')
print(replace_dupes(ax))
# ['0', '1', '', '', '2', '', '', '3']
"
Swap two numbers in list of tuples (python),"def index_2d(myList, v): #Returns tuple containing the position of v in the 2D list
  for i, x in enumerate(myList):
     if v in x:
        return (i, x.index(v))
"
etree xml parsing and deletion,">>> import lxml.etree as PARSER
>>> root = PARSER.fromstring(data)
>>> root.xpath(""//hosts/host[@name='server1']"")
[<Element host at 0xb6d2ce6c>]
>>> a = root.xpath(""//hosts/host[@name='server1']"")
>>> for i in a:
...    pp = i.getparent()
...    pp.remove(i)
... 
>>> PARSER.tostring(root, method=""xml"")
"
Run a function only by the thread that is the first one to reach it's calling,"from concurrent.futures import ThreadPoolExecutor, as_completed
from time import sleep
from random import random

job_count = 10

def is_even(x):
    return x % 2 == 0

def do_something(i):
    ""All odd jobs complete before even jobs""
    if not is_even(i):
        return i
    sleep(0.1 + random())
    return i

with ThreadPoolExecutor(max_workers=job_count) as executor:
    successful_result = None
    futures = [executor.submit(do_something, i) for i in range(job_count)]

    for future in as_completed(futures):
        result = future.result()
        if is_even(result):
            successful_result = result
            break

print(""the first successful result was:"", successful_result)
"
numpy equivalent of matlab dummyvar,">>> partitions = np.array([[1, 1, 2, 2, 1, 2, 2, 2, 1, 1],
...                        [1, 2, 2, 1, 2, 1, 2, 2, 2, 1],
...                        [1, 1, 1, 2, 2, 2, 1, 3, 3, 2]])
>>> n = np.max(partitions)
>>> d = (partitions.T[:, None, :] == np.arange(1, n+1)[:, None]).astype(np.int)
>>> d = d.reshape(partitions.shape[1], -1)
>>> d.dot(d.T)
array([[3, 2, 1, 1, 1, 1, 1, 0, 1, 2],
       [2, 3, 2, 0, 2, 0, 2, 1, 2, 1],
       [1, 2, 3, 1, 1, 1, 3, 2, 1, 0],
       [1, 0, 1, 3, 1, 3, 1, 1, 0, 2],
       [1, 2, 1, 1, 3, 1, 1, 1, 2, 2],
       [1, 0, 1, 3, 1, 3, 1, 1, 0, 2],
       [1, 2, 3, 1, 1, 1, 3, 2, 1, 0],
       [0, 1, 2, 1, 1, 1, 2, 3, 2, 0],
       [1, 2, 1, 0, 2, 0, 1, 2, 3, 1],
       [2, 1, 0, 2, 2, 2, 0, 0, 1, 3]])
"
Unexpected: flufl.enum prints integer value,"class Enum:
    __metaclass__ = EnumMetaclass
"
Prime generator in python returns multiple composites instead of primes,"primes = []
for n in range(2, 10):
    for m in range(2, n):
        if not(n % m):
            break
    else:
        primes.append(n)
"
Python: How can I see if a given month and day have already passed this year?,"import datetime

today = datetime.date.today()
yourdate = datetime.datetime.strptime(inputstring, '%d %b')
yourdate = yourdate.date().replace(year=today.year)

if yourdate >= today:
    # date not before today, attach *last* year
    yourdate = yourdate.replace(year=today.year - 1)
"
Python: Alphabetically sorting a list with letters and numbers in,">>> l = ['2,alex', '5,james', '3,ben']
>>> l.sort(key=lambda x: int(x.split(',')[0]))
>>> l
['2,alex', '3,ben', '5,james']
"
PHP to python pack('H'),">>> binascii.unhexlify('44756d6d7920537472696e67')
'Dummy String'
"
Condition with pass statement,"string = line.split(',')
if string[0] != 'Aa' and string[0] != 'Bb': # You need 'and' up here
  pass
else:
  print string # This will only be executed if the condition is false
"
Split string multiple times in Python,">>> re.findall(r't[^ts]*s', sample, flags=re.I)
['this', 'to be s', 'to s', 'trings']
"
Creating a list from a string that contains numbers separated by commas; Python 3,"def is_numeric(s):

    for char in s:
        if not char.isdigit() and char not in ["" "", ""."", "",""]:
            return False

    return True
"
How to insert unescaped html fragment in Beautiful Soup 4,"c.insert_before(soup.new_tag('div', **{'class': 'case'}))
"
Python/numpy issue with array/vector with empty second dimension,"In [236]: y.sum(axis=1,keepdims=True)
Out[236]: 
array([[ 6],
       [22],
       [38]])
In [237]: _.shape
Out[237]: (3, 1)
"
How to find the sum of the lengths of a list in a dictionary of dictionaries?,">>> key = 'a'
>>> sum(len(dct[key]) for dct in dataset.values())
5
"
get keys value's from dictionary in python,"print [{'newurl': d['url'], 'newtitle': d['content'], 'sumvalue': sum(d.get(item, 0) for item in ['a', 'z', 'd'])} for d in dictlist]
"
How to iterate through a list in a dictionary in python,"for (k,v) in sampleDict.iteritems():
    key          = k
    phone_number = v[0]
    last_name    = v[1][0]
    first_name   = v[1][0]
    # Do something
"
Efficiently select the best string from keys in a dict,"m.title = exif.get('Xmp.dc.subject') or exif.get('Xmp.dc.title') or original_filename_noextension
"
How to form a set of dictionaries,">>> myset = {tuple(sorted(d.items())) for d in mylist}
"
Checking file extension,"m.lower().endswith(('.png', '.jpg', '.jpeg'))
"
Searching fro string and converting it to another string python,"def parse_shot_success(string):
    words = [
        # (word, return value)
        ('scores', 'scores'),
        ('blocks', 'misses'),
        ('misses', 'misses'),
    ]

    for word, result in words:
        if word in string:
            return result

    return 'not a shot'
"
maximum value of a unique string in a list,"def find_latest(lst):
    prefixes = {}
    for entry in lst:
        code, value = entry[:2], int(entry.partition('.')[0][2:])
        if value > prefixes.get(code, (float('-inf'), ''))[0]:
            prefixes[code] = (value, entry)
    return [entry for value, entry in prefixes.values()]
"
Using a dictionary to index parallel arrays?,"d = {}
for (i,st) in enumerate(start):
    d[st] = (shape[i],length[i],end[i])
"
Find a value in a sublist and substract a previous element value with their element value,"Short answer
for previous, current in zip(mylist[:-1], mylist[1:]):
    if current[1] == 3:
        print previous[2] - current[2]
        print previous[3] - current[3]
"
Return the first item in a list matching a condition,"next(x for x in lst if matchCondition(x)) 
"
How to handle catch and handle redirect loops through requests.get or selenium?,"history = []
while url not in history and len(history) < 42:
    history.append(url)
    r = requests.get(url, allow_redirects=False)
    if 'location' in r.headers:
        url = r.headers['location']
"
Plotting large arrays in pyqtgraph,"import pyqtgraph as pg
import numpy as np
app = pg.mkQApp()
data = np.random.normal(size=(120,20000), scale=0.2) + \
       np.arange(120)[:,np.newaxis]
view = pg.GraphicsLayoutWidget()
view.show()
w1 = view.addPlot()
now = pg.ptime.time()
for n in data:
    w1.plot(n)
print ""Plot time: %0.2f sec"" % (pg.ptime.time()-now)
app.exec_()
"
Formatting regular expressions in Python,"if re.search(r'\b' + word + r'\b', sentence):
"
How to fill between two rings with matplotlib,"Rsaturn = 0.018
rs0 = np.array([[np.cos(phi), np.sin(phi), 0.] for phi in np.linspace(0., 2*np.pi, 100)])
plt.fill(Rsaturn*rs0[:,0], Rsaturn*rs0[:,1],'yellow')
plt.axis('equal')
"
Sorting a list of strings by their components,"from operator import itemgetter

nl = [x.split('~') for x in l]

nl.sort(key=itemgetter(1))
nl.sort(key=itemgetter(2))
nl.sort(key=lambda x: datetime.datetime.strptime(x[3], '%m/%d/%Y %H:%M'),
        reverse=True) # Newest first
nl.sort(key=itemgetter(0))
"
Sorting data from a table,"newTable = [] 
Intr     = ''
LineCt   = 0


for line in fetch_lines:
    if line[2].startswith('#') or line[2].startswith('----'): 
        # Within this if statement you can make adjustment to text item
        if line[2].startswith('#'):
           Intr =  Intr + "" Cortar em dois""
           LineCt +=1
        if line[2].startswith('----'):
           Intr =  '!SERVIR DEPOIS!' + Intr
           LineCt +=1   

for i,line in enumerate(fetch_lines):
    if line[2].startswith('#') or line[2].startswith('----'): pass        
    elif i == len(fetch_lines) - LineCt:
        newTable.append([line[0],line[1], line[2], Intr , """" ])
        Intr     = ''
    elif i < len(fetch_lines):
        newTable.append([line[0],line[1],line[2], '', """" ])        

print Intr        
for e in newTable: print e
"
Python array: formulas to populate array with data,"import itertools as it

def addVecs(a, b):
    return [e1 + e2 for e1, e2 in zip(a, b)]


def scaleVec(a, s):
    return [e*s for e in a]


# first 7 rows add 1 to a and 1 to c
add1 = [1, 0, 1, 0]

# next 5 rows add 1 to b and 1 to d
add2 = [0, 1, 0, 1]

# stack them accordingly
upper = list(it.chain(it.repeat(add1, 7),
                      it.repeat(add2, 5)))

# lower is the negated version of upper
lower = list(it.starmap(scaleVec, zip(upper, it.repeat(-1))))

# stack them
both = upper + lower

# create cumsum to get for each row the relative distance to the first row
# (istead of distance to previous)
sums = [[0, 0, 0, 0]]
for row in both:
    sums.append(addVecs(sums[-1], row))

# the first row
l = [0, 0, 2137, 1419]

# now for each row in sums, add it to l
result2 = list(it.starmap(addVecs, zip(it.repeat(l), sums)))
for row in result2:
    print(row)
"
How can i make a list of directories from two list nested (parent and child),"import os
import pprint
P= [""E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BD_Admin"" , ""E:\\GIS_DOCUMENT\\BCAS_Map\\BCAS_All.gdb\\BCAS_BD_Infrastructure""]
Cld1 = ['BGD_4_new_district', 'BGD_3_old_district', 'BGD_2_division', 'BGD_1_all', 'BGD_5_Upazilla', 'BGD_4_old_district', 'BGD_6_Union_court', 'BGD_6_Union', 'BD_exposed_coastal_area','BD_drought', 'BGD_1_River', 'BGD_1_River_detail', 'BD_international_bnd', 'BGD_1_River_1', 'BGD_7_Mauza', 'test', 'BGD_5_UpazillaAnno', 'BGD_4_new_districtAnno', 'BGD_4_new_districtAnno2']
Cld2 = ['BD_Health_Infrastructures_1', 'BD_Railway_Establishments_1', 'BGD_roads_1']

lis1 = [os.path.join(x, y) for x in P for y in Cld1]
lis2 = [os.path.join(x, y) for x in P for y in Cld2]

My_Full_Path = lis1 + lis2

pprint.pprint(My_Full_Path)
"
Python unpacking list value in kwargs,"expected_rows = []
for row in rows:    
    expected_rows.append(get_expected_rows(**row))
"
Pandas delete parts of string after specified character inside a dataframe,"from StringIO import StringIO
import pandas as pd

data = """"""   obs  a  b  c  d
1   1-23-12  1  2  3
2  12-23-13  4  5  5
3  21-23-14  4  5  5""""""

# Build dataframe from data
df = pd.read_table(StringIO(data), sep='  ')

# Reformat values for column a using an unnamed lambda function
df['a'] = df['a'].apply(lambda x: x.split('-')[0])
"
Complex numbers usage in python,">>> import cmath
>>> cmath.sin(2 + 3j)
(9.15449914691143-4.168906959966565j)
"
Python output format,"from psutil import disk_partitions


def diskinfo():
    for i, disk in enumerate(disk_partitions()):
        print ""Disk #{0:d} {1:s}"".format(i, disk.device)
        print "" Mount Point: {0:s}"".format(disk.mountpoint)
        print "" File System: {0:s}"".format(disk.fstype)
        print "" Options: {0:s}"".format(disk.opts)


diskinfo()
"
Python: Convert a string to an integer,int('  23  ')
How to terminate process from Python using pid?,p.terminate()
"Python List in List (""Stuck"")","def getMovies():

    movieinfo = {""Movie_Name"": [], ""Movie_Stars"": [], ""Movie_Budget"": []}
    print (""Your Movies"")
    amount_in_list = int(input(""How many Movies? ""))

    x = 1
    while x <= amount_in_list:
        film = input (""Name of film ... "")
        stars = input (""Main stars ..."")
        budget = input (""Budget ..."")
        movieinfo[""Movie_Name""].append(film)
        movieinfo[""Movie_Stars""].append(stars)
        movieinfo[""Movie_Budget""].append(budget)
        x+=1

    return movieInfo
"
Numpy meshgrid points,"X, Y = np.mgrid[xmin:xmax:100j, ymin:ymax:100j]
positions = np.vstack([X.ravel(), Y.ravel()])
"
Product of a sequence in NumPy,"In [284]: # Original inputs
     ...: A = np.arange(1.,5.,1)
     ...: G = np.array([[1.,2.],[3.,4.]])
     ...: 

In [285]: calcF(G,A)
Out[285]: 
[array([[-0.        , -0.00166667],
        [-0.01142857, -0.03214286]]), array([[-0.00027778,  0.        ],
        [ 0.00019841,  0.00126984]]), array([[  1.26984127e-03,   1.32275132e-04],
        [ -0.00000000e+00,  -7.93650794e-05]]), array([[-0.00803571, -0.00190476],
        [-0.00017857,  0.        ]])]

In [286]: vectorized_calcF(G,A) # Posted solution 
Out[286]: 
[array([[[-0.        , -0.00166667],
         [-0.01142857, -0.03214286]]]), array([[[-0.00027778,  0.        ],
         [ 0.00019841,  0.00126984]]]), array([[[  1.26984127e-03,   1.32275132e-04],
         [ -0.00000000e+00,  -7.93650794e-05]]]), array([[[-0.00803571, -0.00190476],
         [-0.00017857,  0.        ]]])]
"
Hide function not called,"lambda e, text=text:(handle_click(text), unshow_me(e))
"
how to get unique values set from a repeating values list,"def parse_the_file():
    lower = str.lower
    split = str.split
    with open('f.txt') as f:
        d = {}
        lines = f.read().split('\n')
        for A,B in [split(l) for l in lines]:
            try:
                d[lower(A)].add(B)
            except KeyError:
                d[lower(A)] = set(B)

        for a in d:
            print ""%s - %s"" % (a,"","".join(list(d[a])))

if __name__ == ""__main__"":
    parse_the_file()
"
Cannot find python xlrd version,">>> import xlrd
>>> getattr(xlrd, next(item for item in dir(xlrd) if 'version' in item.lower()))
'0.9.3'
"
"Python, how to implement a list subclass that evaluates as False if its items evaluate False?","Demonstration
class MagicList(list):
    def __bool__(self): # Python 3 uses __bool__ instead of __nonzero__
        return any(self)
    __nonzero__=__bool__ # ensure Python 2 <-> 3 compatibility
"
How to resample starting from the first element in pandas?,"df.resample('100L', loffset='50L')
"
Python- insert a character into a string,""",+"".join(c.rsplit(""+"", 1))
"
How to represent a dynamic list of ranges?,"for page in parse_ranges('1, 3, 4-7, 9-'):
    if page > 20:
        break

    print(page)
"
Imprecise floats in Tupper's self-referential formula,"def tuppers_formula(x, y):
    """"""Return True if point (x, y) (x and y both start at 0) is to be drawn black, False otherwise
    """"""
    k = 960939379918958884971672962127852754715004339660129306651505519271702802395266424689642842174350718121267153782770623355993237280874144307891325963941337723487857735749823926629715517173716995165232890538221612403238855866184013235585136048828693337902491454229288667081096184496091705183454067827731551705405381627380967602565625016981482083418783163849115590225610003652351370343874461848378737238198224849863465033159410054974700593138339226497249461751545728366702369745461014655997933798537483143786841806593422227898388722980000748404719
    return ((k + y)//17//2**(17*int(x) + int(y)%17))%2 > 0.5
"
Displaying output of shell commands with shared environments,"cmd.stdout.read()
for i in cmd.stdout:
list(cmd.stdout.readline())
"
A python non finished function,"def gaus(n, ls = list()):
    if n == 1:
        return ls
    else:
        ls.append(n / 2.)           # Step 1:  n / 2
        ls.append(ls[-1] * 3 + 1)   # Step 2: (n / 2) * 3 + 1
        return gaus(n - 1, ls)

print gaus(30)
"
Adding lambda functions with the same operator in python,"def triple(x):
   return x * 3

def square(x):
   return x * x

def triple_square(x):
   return triple(square(x))

def triple_plus_square(x):
    return triple(x) + square(x)

def triple_plus_square_with_explaining_variables(x):
    tripled = triple(x)
    squared = square(x)
    return tripled + squared
"
Django language change not working,"LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)
"
"if annonymous, what is a call to python lambda?","plus_three = map(lambda x: x+3, [1,2,3])
"
How to do dependency injection python-way?,"class MyClass(object):
    Popen = staticmethod(subprocess.Popen)
    def call(self):
        return self.Popen(...).communicate(...)
"
Pygame sprite jump with pressed key,"if not (event == None):
    if(event.type == pygame.KEYDOWN):
        if (event.key == pygame.K_UP or event.key == pygame.K_SPACE):
            jump_pressed = True
    elif (event.type == pygame.KEYUP):
        if (event.key == pygame.K_UP or event.key == pygame.K_SPACE):
            jump_pressed = False
"
figure of imshow() is too small,"imshow(random.rand(8, 90), interpolation='nearest', aspect='auto')
"
getting only integers from a list of tuples python 3,"from timeit import timeit
from operator import itemgetter

T = [('a',3), ('b', 4), ('c', 5), ('d', 1), ('e',2)] 

def one():
    [v for _, v in T]

def two():
    [v[-1] for v in T]

def three():
    list(map(itemgetter(1), T))

def four():
    list(map(lambda x:x[1], T))

def five():
    list(zip(*T))[1]

for func in (one, two, three, four, five):
    print(func.__name__ + ':', timeit(func))
"
How many times was logging.error() called?,"class callcounted(object):
    """"""Decorator to determine number of calls for a method""""""

    def __init__(self,method):
        self.method=method
        self.counter=0

    def __call__(self,*args,**kwargs):
        self.counter+=1
        return self.method(*args,**kwargs)


import logging
logging.error=callcounted(logging.error)
logging.error('one')
logging.error('two')
print logging.error.counter
"
Pandas: Find the maximum range in all the columns of dataframe,">>> df = pd.DataFrame(np.random.random((5,4)), index=pd.Series(range(1,6), name=""week""), columns=[""City{}"".format(i) for i in range(1,5)])
>>> df
         City1     City2     City3     City4
week                                        
1     0.908549  0.496167  0.220340  0.464060
2     0.429330  0.770133  0.824774  0.155694
3     0.893270  0.980108  0.574897  0.378443
4     0.982410  0.796103  0.080877  0.416432
5     0.444416  0.667695  0.459362  0.898792
>>> df.max() - df.min()
City1    0.553080
City2    0.483941
City3    0.743898
City4    0.743098
dtype: float64
>>> (df.max() - df.min()).idxmax()
'City3'
>>> df[(df.max() - df.min()).idxmax()]
week
1       0.220340
2       0.824774
3       0.574897
4       0.080877
5       0.459362
Name: City3, dtype: float64
"
Python How to get every first element in 2 Dimensional List,[i[0] for i in a]
Python re finding string between underscore and ext,"print epass.split(""_"")[-1].split(""."")[0]


>>> timeit.timeit(""epass.split(\""_\"")[-1].split(\"".\"")[0]"",setup=""from __main__
import epass"")
0.57268652953933608

>>> timeit.timeit(""regex.findall(epass)"",setup=""from __main__ import epass,regex
0.59134766185007948
"
Can someone help me understand special methods vs normal methods?,"class Point(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
"
converting iteration into a function,"def numerology(z):
    zstr1=str(z)
    accum1=0
    for x in zstr1:
        accum1 += int(x)
    str2=str(accum1)
    accum2=0
    for x in str2:
        accum2 += int(x)
    return accum2
"
Override __init__ for all classes in module,"from django.db import models

# A decorator to implement the behavior you want for the
# __init__ method
def new_init(func):
   def __init__(self, *args,  **kw):
       self.documentation = kw.pop(""documentation"", None)
       return func(self, *args, **kw)

for name, obj in models.__dict__.items():
    #check if obj is a class:
    if not isinstance(obj, type):
        continue

    # creates a new_init, retrieving the original one -
    # taking care for not to pick it as an unbound method -
    # check: http://pastebin.com/t1SAusPS
    new_init_method = new_init(obj.__dict__.get(""__init__"", lambda s:None))

    # dynamically creates a new sublass of obj, overriding just the __init__ method:
    new_class = type(name, (obj,), {""__init__"": new_init_method}) 

    # binds the new class to this module's scope:
    globals().__setitem__(name, new_class)
"
python string manipulation,">>> mystring = ""Safety/Report/Image/489""
>>> mystore = mystring.split('/')
>>> mystore
['Safety', 'Report', 'Image', '489']
>>> mystore[2]
'Image'
>>> 
"
replace multiple words - python,"sterm = ""some word"".split()
result = "" "".join(""<strong>%s</strong>"" % w for w in sterm)
"
What is the R equivalent of python base64.urlsafe_b64decode(client_secret)?,"' '.join(x.encode('hex') for x in base64.urlsafe_b64decode(""49ugdj9v_3290k3r902qkf9=""))
'e3 db a0 76 3f 6f ff 7d bd d2 4d eb f7 4d aa 91 ff'
"
How to create a GUI to add two numbers from different two checkboxes?,"from Tkinter import *

gui = Tk()

#create variables to store check state
checked1 = IntVar()
checked2 = IntVar()
#create values for the two boxes
cb1 = 5
cb2 = 10

#create a callback for our button
def callback():
    print(checked1.get()*cb1+checked2.get()*cb2)

c1 = Checkbutton(gui, text='b1', variable=checked1)
c2 = Checkbutton(gui, text='b2', variable=checked2)
b1 = Button(gui, text=""ADD"", command=callback)

c1.pack()
c2.pack()
b1.pack()

gui.mainloop()
"
I cannot print the final value of a variable,"def fibonacciRecursive(n, print_recAdd=True):
    global recAdd
    if n == 1 or n == 0:        
        retval = n  # <-- should this be 1?
    else:
        recAdd = recAdd + 1
        retval = fibonacciRecursive(n - 1, False) + fibonacciRecursive(n - 2, False)
    if print_recAdd:
        print recAdd
    return retval
"
Most Pythonic was to strip all non-alphanumeric leading characters from string,"while not s[0].isalnum(): s = s[1:]
"
pandas dataframe: index is DatetimeIndex and 4 columns. Some NaN,"anyNA = frame[(frame.A.isnull()) | (frame.B.isnull()) | (frame.C.isnull())]
"
Using Random Once in a While loop," # either declare before init, or use self.shuffled_list = .. in your init method
 shuffled_list = sorted(self.history_list, key=lambda k: random.random())

def review(self): 
        for item in class_name.shuffled_list:
            self.word = item+self.word
        self.word *= 7
        return self.word
"
Urllib and saving multiple urls to different filenames,"for i,url in enumerate(urls):
    try:
        image = urllib.URLopener()
        image.retrieve(url, filepaths[i])
    except ValueError:
        pass
"
How to choose a random input from 7 given input?,"import random
print ""WELCOME TO LOTTERY HACK MACHINE!!!\n""
today = int(raw_input( ""Please enter today's date: "" ))
if today<=31:
    print ""Please enter the 4-digit prize winning lottery number for the last 7 days""
    y = raw_input( ""Enter 7 numbers separated by commas: "" )
    input_list = y.split(',')
    numbers = [float(x.strip()) for x in input_list]
    print random.choice(numbers)

elif today>31:
    print ""A month has only 31 days ;P""
"
Trouble with signs on zero-exponents equations,"int(-40) ** 0 = (-40) ** 0 = 1
"
What kind of problems (if any) would there be combining asyncio with multiprocessing?,"import time
import asyncio
from concurrent.futures import ProcessPoolExecutor

def blocking_func(x):
   time.sleep(x) # Pretend this is expensive calculations
   return x * 5

@asyncio.coroutine
def main():
    #pool = multiprocessing.Pool()
    #out = pool.apply(blocking_func, args=(10,)) # This blocks the event loop.
    executor = ProcessPoolExecutor()
    out = yield from loop.run_in_executor(executor, blocking_func, 10)  # This does not
    print(out)

if __name__ == ""__main__"":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
"
How to replace all those Special Characters with white spaces in python?,"import re
original_string = open('foo.txt').read()
new_string = re.sub('[^a-zA-Z0-9\n\.]', ' ', original_string)
open('bar.txt', 'w').write(new_string)
"
Access python for loop values,"for item in soup.select(""div.view-content table tr"")[1:]:
    f.writerow([td.get_text(strip=True).encode(""utf-8"") for td in item.find_all(""td"")])
"
How to remove the trailing white spaces in python?,"new_s = input_str[:count+1]
"
cross-platform splitting of path in python,"import os.path

def os_path_split_asunder(path, debug=False):
    parts = []
    while True:
        newpath, tail = os.path.split(path)
        if debug: print repr(path), (newpath, tail)
        if newpath == path:
            assert not tail
            if path: parts.append(path)
            break
        parts.append(tail)
        path = newpath
    parts.reverse()
    return parts

def spacedman_parts(path):
    components = [] 
    while True:
        (path,tail) = os.path.split(path)
        if tail == """":
            components.reverse()
            return components
        components.append(tail)

if __name__ == ""__main__"":
    tests = [
        '',
        'foo',
        'foo/',
        'foo\\',
        '/foo',
        '\\foo',
        'foo/bar',
        '/',
        'c:',
        'c:/',
        'c:foo',
        'c:/foo',
        'c:/users/john/foo.txt',
        '/users/john/foo.txt',
        'foo/bar/baz/loop',
        'foo/bar/baz/',
        '//hostname/foo/bar.txt',
        ]
    for i, test in enumerate(tests):
        print ""\nTest %d: %r"" % (i, test)
        drive, path = os.path.splitdrive(test)
        print 'drive, path', repr(drive), repr(path)
        a = os_path_split_asunder(path)
        b = spacedman_parts(path)
        print ""a ... %r"" % a
        print ""b ... %r"" % b
        print a == b
"
str.replace issue,"if (isVowel == True):
"
creating a list of tuples using for loop,"def func_(lis):
    ind = 0
    lst = [] # Don't use 'list' as a name; it overshadows the built-in
    for h in lis:
        lst.append((h, ind))
        ind += 1 # Increment the index counter
    return lst
"
SQLite Python printing in rows?,"from itertools import groupby

for letter, rows in groupby(cur, key=lambda r: r[0][0]):
    print ' '.join([r[0] for r in rows])
"
Gnuplot command to matplotlib,"plot 'file.txt' matrix with image every 1:999:1:480  t  """"
"
Check if something is not in a list,"(3 not in [2, 3, 4])"
Scrapy - Retrieve spider object in dupefilter,"# /scheduler.py

from scrapy.core.scheduler import Scheduler


class MyScheduler(Scheduler):

    def enqueue_request(self, request):
        if not request.dont_filter and self.df.request_seen(request, self.spider):
            self.df.log(request, self.spider)
            return False
        dqok = self._dqpush(request)
        if dqok:
            self.stats.inc_value('scheduler/enqueued/disk', spider=self.spider)
        else:
            self._mqpush(request)
            self.stats.inc_value('scheduler/enqueued/memory', spider=self.spider)
        self.stats.inc_value('scheduler/enqueued', spider=self.spider)
        return True
"
numpy bytes to plain string,"bytes_string.decode('UTF-8')
"
Formatting Numbers So They Allign On Decimal Point,"def dot_aligned(seq):
    snums = [str(n) for n in seq]
    dots = [s.find('.') for s in snums]
    m = max(dots)
    return [' '*(m - d) + s for s, d in zip(snums, dots)]

nums = [4.8, 49.723, 456.781, -72.18]

for s in dot_aligned(nums):
    print(s)
"
get the path of a module in python,"import os
import re

print os.path.dirname(re.__file__)
"
finding index of multiple items in a list,"[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"
Python: Produce increments from a list to form an array,">>> d = map(list, d)
"
Increasing Speed of Fuzzy Matching words on two lists,"def find_fuzzymatch_samelist(list1, list2, cutoff=90):
    matchdict = dict()

    for i1, i2 in itertools.permutations(range(len(list1), repeat=2)

        u1 = list1[i1]
        u2 = list2[i2]

        if fuzz.partial_token_sort_ratio(u, u1) >= cutoff:    
            shortstr = min(u1, u2, key=len)
            longstr = max(u1, u2, key=len)     
            matchdict.get(shortstr, list).append(longstr)
    return matchdict
"
How to restart a python script after it finishes,"while True:
    ...
"
"Pandas: create timestamp from 3 columns: Month, Day, Hour","#!/usr/bin/env python
from datetime import datetime
import pandas as pd

print(pd.read_csv(
    'input.txt', sep=r'\s+', parse_dates=[[0, 1, 2]],
    date_parser=lambda *columns: datetime(2005, *map(int, columns)),
    index_col=0))
"
How to change variables fed into a for loop in list form,"scores = [..., ..., ...]

def processScore(score):
    '''Grades on a curve, where top score = 100%'''
    topScore = max(scores)
    return 100-topScore+score

newScores = [processScore(s) for s in scores]
"
Concatenating dictionaries of numpy arrays of different lengths (avoiding manual loops if possible),"In [11]: d2
Out[11]: {'r': array([ 0.3536318 ,  0.29363604,  0.91307454]), 's': array([46])}

In [12]: d2 = {name: pd.Series(arr) for name, arr in d2.iteritems()}

In [13]: d2
Out[13]:
{'r': 0    0.353632
1    0.293636
2    0.913075
dtype: float64,
 's': 0    46
dtype: int64}
"
python connected combinations of list items,">>> [lst[i:j] for i, j in combinations(range(len(lst)+1), 2)]
[[6], [6, 7], [6, 7, 8], [6, 7, 8, 9], [7], [7, 8], [7, 8, 9], [8], [8, 9], [9]]
"
Stripping punctuation from a list of lists of words,">>> [x.strip(string.punctuation) for x in punc]
[u'i',
 u'am',
 u'going',
 u'home',
 u'i',
 u'will',
 u'see',
 u'if',
 u'i',
 u'can',
 u'do',
 u'that',
 u'i',
 u'will',
 u'see']
"
Time function with arguments in python,"inp = """"""
def return_words(string):
    return [i for i in string if i.isdigit()]

return_words(string)
   """"""

list_of_inputs = ['inputstring1', 'inp2']

for s in list_of_inputs:
    print '{}'.format(s), '->', timeit(stmt=inp,
                                       number=1000000,
                                       setup=""string = '{}'"".format(s))
"
How to check if all elements of a list matches a condition?,any(item[2] == 0 for item in items)
Accessing the highest digits of large numbers from Python long,">>> n = 17**987273 # 1.2 million digits number

>>> digits = int(math.log10(n))

>>> k = digits - 24 # i.e. first 24 digits

>>> n / (10 ** k)
9953043281569299242668853L
"
Parse a json file and add the strings to a URL,"def processlinks(text):
    output = urllib.urlopen('http://google.com/' % text)
    print output.geturl()
    print output.read()

map(processlinks, jsonobj['data'])
"
How to get the mode for string variable when resampling with pandas,"def mode_(s):
    try:
        return s.mode()[0]
    except IndexError:
        return np.nan

In [22]: df.resample('H', how={'station_arrived':'count',
                               'action': mode_, 'lat1':'count', 'lon1':'count'})
Out[22]:
                    action  station_arrived  lon1  lat1
date_removed
2012-01-01 13:00:00      A                2     2     2
2012-01-01 14:00:00    NaN                0     0     0
2012-01-01 15:00:00    NaN                1     1     1
2012-01-01 16:00:00    NaN                0     0     0
...
"
how to create a new dictionary in for loop?,"og_dict = {'name':'user1', 'salary':'1k'}
og_dict_list =[]
for i in range(2,5):
    new = og_dict.copy()
    new['salary'] = str(i)+'k'
    og_dict_list.append(new)
for og_dict_obj in og_dict_list:
    print(og_dict_obj)
"
Filter array to show rows with a specific value in a specific column,"m = [row for row in l if 'a' == row[0]]
"
How can I load a csv file and store its contents into an (numpy) array in python?,">>> import numpy as np
>>> data1 = np.loadtxt(""1.txt"", dtype=np.object, delimiter="","")
>>> data2 = np.loadtxt(""2.txt"", dtype=np.object, delimiter="","")
>>> print data1
 [['A' 'B' 'D']
  ['E' 'G' 'A']]
"
How to apply a function to only one item in a sublist across all sublists?,">>> Original_List = [['a',1388547232,'b','c','d'],['y',13234542299,'d','c','d'],['z',1388547432,'b','c','d']]
>>> Desired_List = ([li[0], datetime.utcfromtimestamp(float(li[1])).month] + li[2:] for li in Original_List)
"
"Numpy, Reading from File with no delimiter but fixed pattern","import numpy as np
def process(iterable):
    for line in iterable:
        parts = [line[:11], line[11:24]] + line[24:].split()
        yield '@'.join(parts)
with open('data', 'rb') as f:
    data = np.genfromtxt(process(f), dtype=None, delimiter='@')

print(repr(data))
"
Pythonic way to copy a key/value from one dict to another,"uid_to_orderid = {d['uid']: d['orderid'] for d in d2}
output = [dict(d, orderid=uid_to_orderid[d['uid']]) for d in d1]
"
Python Print text after certain number of blank lines,">>> with open(""foo.txt"") as fin:
...     any(x.isspace() for x in fin) # skip to 1st blank line
...     any(x.isspace() for x in fin) # skip to 2nd blank line
...     next(fin)
... 
True
True
'    text:ffffff\n'
"
How to convert an iterative str.replace() with str.translate()? - python,">>> import re
>>> rx = '[%s]' % re.escape(string.punctuation)
>>> re.sub(rx, r"" \g<0> "", ""foo,,,bar!!1"")
'foo ,  ,  , bar !  ! 1'
"
How to get an attribute of an Element that is namespaced,"from lxml import etree

xml = """"""<FOO xmlns=""SOME_REALLY_LONG_STRING""
 xmlns:ss=""THE_VERY_SAME_REALLY_LONG_STRING_AS_ROOT""
>
    <child_of_foo>
        ....
    </child_of_foo>
    ...
    <SomethingIWant ss:Name=""bar"">
        ....
    </SomethingIWant>
    ...
</FOO>""""""

root = etree.fromstring(xml)
ns = {'ss': 'THE_VERY_SAME_REALLY_LONG_STRING_AS_ROOT'}

# i want just the first one for now
result = root.xpath('//@ss:Name', namespaces=ns)[0]
print(result)
"
How to make a list of Binary numbers a list of Dotted Decimal Numbers?,">>> list(map(lambda x:'.'.join(x[0][:4])+""/""+str(x[1])+"" ""+x[0][4], list(zip([[str(int(i, 2)) for i in  item.split()] for item in mylist], slashes))))
['130.0.0.0/14 0', '130.0.64.0/13 0', '130.0.128.0/14 1', '130.0.192.0/14 1']
"
Python: Passing function with arguments to a function,"x = 0
user_class_instance = user_class(0)
result = lib_func(user_class_instance, param1)
"
how to trim n characters of string in python?,"s = s[:-6] if s.endswith('000000') else s
"
How to avoid rehashing dict keys?,"class myset(MutableSet):
    def __init__(self, iterable=()):
        self.dictset = {}
        self.dictset.update(iterable)

    def __bomb__(s, *a, **k): raise NotImplementedError
    add = discard = __contains__ = __iter__ = __len__ = __bomb__
"
String substitution performance in python,"pattern1 = re.compile('[^0-9a-zA-Z]+')
pattern2 = re.compile('\s+')
for k in range(len(titles)):
    #remove all non-alphanumeric characters 
    s = re.sub(pattern1,' ',titles[k])

    #remove extra white space
    s = re.sub(pattern2,' ', s).strip()
"
How to convert any numeric string value in int?,">>> ast.literal_eval(""0o12"")
10
"
Get to nested dictionary in list,"first = None
for d in L:
    if 'firstname' in d and 'lastname' in d:
        first = d
        break
"
Python wait x secs for a key and continue execution if not pressed,"import sys
from select import select

print ""Press any key to configure or wait 5 seconds...""
timeout = 5
rlist, wlist, xlist = select([sys.stdin], [], [], timeout)

if rlist:
    print ""Config selected...""
else:
    print ""Timed out...""
"
Python Web Scraping - trying to get numbers from table tags,"from sys import exit
import lxml.html
import requests

url = 'http://www.myfxbook.com/community/outlook'
doc = requests.get(url)
root = lxml.html.fromstring(doc.text)

all_id_inputs = root.xpath(""//input[starts-with(@id,'outlookTip')]/@id"")

for ids in all_id_inputs:
    xpath_value = '//*[@id=""{}""]/@value'.format(ids)
    table_value = root.xpath(xpath_value)
    root_table  = lxml.html.fromstring(table_value[0])

    # print table_value[0]
    # print 
    firt_value      =  root_table.xpath(""//table/tr[2]/td[3]/text()"")
    second_value    =  root_table.xpath(""//table/tr[3]/td[3]/text()"")
    third_value     =   root_table.xpath(""//div/text()"")[1]

    print firt_value
    print second_value
    print third_value
    print 
"
Is there a better way to feed different parameters into a function with if-statements?,"def smartcopy(filestocopy, dest_path, show_progress = False):
    """"""Determines what buffer size to use with copy()
       Setting show_progress to True calls back display_progress()""""""
    #filestocopy is a list of dictionaries for the files needed to be copied
    #dictionaries are used as the fullpath, st_mtime, and size are needed
    if len(filestocopy.keys()) == 0:
        return None
    #Determines average file size for which buffer to use
    average_size = 0
    for key in filestocopy.keys():
        average_size += int(filestocopy[key]['size'])
    average_size = average_size/len(filestocopy.keys())
    #Smaller buffer for smaller files

    kwargs = {}
    if show_progress:
        kwargs['callback'] = lambda pos, total: display_progress(pos, total, key)

    #Bigger buffer for bigger files 
    if average_size >= 1024*10000: #Buffer sizes determined by informal tests on my laptop
        kwargs['buffer'] = 1024 * 2600

    for key, value in filestocopy.iteritems():
        #dest_path+key is the destination path, as the key is the relative path
        #and the dest_path is the top level folder
        copy(value['fullpath'], dest_path+key, **kwargs)
"
Python: Find an item in a list,"def purchase():
    from bisect import bisect_left
    data = {""b"": [10, 20, 30, 40], ""c"": [100, 200, 330], ""m"": [20, 40, 50], ""d"": [70, 80, 90], ""t"": [50, 85, 100]}
    for _ in range(2):
        item_type = raw_input(""Enter the item type-b,m,d,t,c:"")
        max_cost = int(input(""Enter the maximum item cost:""))
        v = data[item_type]
        ind = bisect_left(v, max_cost, hi=len(v) - 1)
        if v[ind] <= max_cost:
            print(""Sold for {}"".format(v[ind]))
            v.remove(v[ind])
        else:
            print(""Sorry, cheapest is {}"".format(v[0]))
"
"How to reset a global variable in python ""recursive"" function?","def getValueForSpecificKey(self, capturedLog, key, results=None):
    '''
    Get value from log for any specific key.
    capturedLog will be searched if it is a list or dictionary.
    Returns an empty list if the key is not found, or capturedLog is another type.
    '''
    if results is None:
        results = []               # start a new list if this is a non-recursive call

    if isinstance(capturedLog, dict):
        if key in capturedLog:
            results.append(capturedLog[key])     # found a result, add it to the list
            return results

        values = capturedLog.values()

    elif isinstance(capturedLog, list):
        values = capturedLog

    else:
        return results

    for value in values:  # recursive calls will add to the results list as necessary
        self.getValueForSpecificKey(value, key, results)

    return results
"
Anchor Layout to show many widgets in a screen at relative positions,"from kivy.app import App
from kivy.lang import Builder

root = Builder.load_string('''
FloatLayout:
    AnchorLayout:
        anchor_x: 'right'
        anchor_y: 'bottom'

        Button:
            text: 'Hello World'
            size: 100, 100
            size_hint: None, None

    AnchorLayout:
        anchor_x: 'left'
        anchor_y: 'center'

        Label:
            text: 'Am i a Label ?'
            size: 100, 100
            size_hint: None, None
''')

class MyJB(App):
    def build(self):
        return root

if __name__ == '__main__':
    MyJB().run()
"
Python string.strip stripping too many characters,">>> table_name, extension = os.path.splitext(""movies.csv"")
>>> table_name
'movies'
>>> extension
'.csv'
"
Python txt file- Reading and using information in file,"def readFile(infilepath):
    answer = {}
    with open(infilepath) as infile:
        for lastname in infile:
            lastname = lastname.strip()
            firstname = infile.readline().strip()
            year = infile.readline().strip()
            medal = infile.readline().strip()

            if year not in answer:
                answer[year] = {}
            if lastname not in answer[year]:
                answer[year][lastname] = {}
            if firstname not in answer[year][lastname]:
                answer[year][lastname][firstname] = {}
            if medal not in answer[year][lastname][firstname]:
                answer[year][lastname][firstname][medal] = 0
            answer[year][lastname][firstname][medal] += 1
    return answer

def count(medalcounts):
    year = input(""What year would you like to check: "").strip()
    answer = 0
    for lastname in medalcounts[year]:
        for firstname,medals in medalcounts[year][lastname].items():
            answer += sum(medals.values())
    print(answer, ""medals were awarded in"", year)

    firstname = input(""Enter first name: "").strip()
    lastname = input(""Enter last name: "").strip()
    for year,yeard in medalcounts.items():
        medals = yeard[lastname][firstname]
        for med,count in medals.items():
            print(""In year"", year, firstname, lastname, ""won"", count, '. gold silver bronze'.split()[med], ""medals"")
"
Searching python list for presence of combinations of only a set of strings,"In [1]: st = {""string3"", ""string1""}

In [2]: my_list = ['string1', 'string2', 'string3']

In [3]: st.issuperset(my_list)
Out[3]: False

In [4]: my_list = ['string1', 'string3']

In [5]: st.issuperset(my_list)
Out[5]: True

In [6]: my_list = ['string1']

In [7]: st.issuperset(my_list)
Out[7]: True

In [8]: my_list = ['string3']

In [9]: st.issuperset(my_list)
Out[9]: True
"
Replace a random instance of a substring in a string,"import re
from random import choice

def replace_random(src, frm, to):
    matches = list(re.finditer(frm, src))
    replace = choice(matches)
    return src[:replace.start()] + to + src[replace.end():]
"
Searching and updating hexadecimal values in python,"from collections import defaultdict

freq = defaultdict(int)
freq['182666828988'] += 1
freq['182666828988'] += 1
freq['183a2d4e3a12'] += 1

print(freq)
"
Python regexp everything between parenthesis on multiple lines,"m = re.findall(r'(?s)_\((.*?)\)', content)
"
How do I generate 8 different random numbers in python?,"from random import sample

print map(chr,sample(xrange(33, 126), 8))
"
How to modify the metavar for a positional argument in pythons argparse?,"import argparse
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = ""Print a range."")

    parser.add_argument(""start"", type = int, help = ""Specify start."", )
    parser.add_argument(""stop"", type = int, help = ""Specify stop."", )
    parser.add_argument(""step"", type = int, help = ""Specify step."", )

    args=parser.parse_args()
    print(args)
"
"Accessing Another Column By Value ,Pandas","In [28]:

df.loc[df.Name=='Pigeon','Category'].iteritems()
Out[28]:
[(1, 'Air'), (5, 'Air2')]
"
How to recover matplotlib defaults after setting stylesheet,"In [1]:

%matplotlib inline
In [2]:

import matplotlib as mpl
import matplotlib.pyplot as plt
In [3]:

inline_rc = dict(mpl.rcParams)
In [4]:

plt.plot(range(10))
Out[4]:
[<matplotlib.lines.Line2D at 0x72d2510>]
"
pass value by reference into python function,">>> def ugly_validate(value_lst, rules, default):
...     if value_lst[0].lower() not in rules:
...         value_lst[0] = default
...
>>> v = ""something""
>>> allowed = [""someoption"", ""someother""]
>>> default = ""default_value""
>>> v_lst = [v]
>>> ugly_validate(v_lst, allowed, default)
>>> v_lst
['default_value']
>>> v = ""someoption""
>>> v_lst = [v]
>>> ugly_validate(v_lst, allowed, default)
>>> v_lst
['someoption']
"
Quick way to extend a set if we know elements are unique,"masterSet = set()
for setA in iterable:
    masterSet = masterSet.union(setA)
"
Select by xpath knowing only ending of element's attribute,"//*[contains(@href, 'parent')]
"
Python Not Web Linking Entire variable in str.ljust,"content += '<a href=""/%s/"">%s</a> %s  %s' % tuple(itertools.chain((item.slug,),
           str(item.title).ljust(25).split("" "", 1), (item.date.ljust(10),)))
"
Sleeping after every Selenium function call,"yield driver.find_element_by_name(""Account"").click()
"
No nested nodes. How to get one piece of information and then to get additional info respectively?,"for dates in movie.xpath('.//div[@class=""showstimes""]/div[@class=""date""]'):
    date = dates.xpath('normalize-space()')
    for times in dates.xpath('following-sibling::span[preceding-sibling::div[1]=$current]', current=dates):
        time = times.xpath('a/text()')[0]
        url = times.xpath('a/@href')[0]
        format_type = times.xpath('span/text()')[0]
        print date, time, url, format_type
"
Populating list with images in PYQT,"try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s
"
Random string generation with upper case letters and digits in Python,">>> random.choice(""abcde"")
'a'
>>> random.choice(""abcde"")
'd'
>>> random.choice(""abcde"")
'b'
"
Remove NaN row from X array and also the corresponding row in Y,"mask = ~np.any(np.isnan(x), axis=1)
x = x[mask]
y = y[mask]
"
Pyglet hello world example doesn't show label until a key is pressed,"import pyglet

class Window(pyglet.window.Window):
    def __init__(self):
        super(Window, self).__init__(vsync = False)
        self.sprites = {}
        self.sprites['testlabel'] = label = pyglet.text.Label(""Hello World!"",
                        color=(255,255,255,255),
                        font_size=36,
                        x=self.width//2, y=self.height//2, #self here, being pyglet.window.Window that we've inherited and instanciated with super().
                        anchor_x=""center"", anchor_y=""center"")
        self.alive = 1

    def on_draw(self):
        self.render()

    def render(self):
        self.clear()
        for sprite_name, sprite_obj in self.sprites.items():
            sprite_obj.draw()
        self.flip()

    def on_close(self):
        self.alive = 0

    def run(self):
        while self.alive:
            self.render()
            # This is very important, this queries (and empties)
            # the pyglet event queue, if this queue isn't cleared
            # pyglet will hang because it can't input more events,
            # and a full buffer is a bad buffer, so we **NEED** this!
            event = self.dispatch_events()

win = Window()
win.run()
"
Removing all alphabets and commas from a string,"Help on function findall in module re:

findall(pattern, string, flags=0)
Return a list of all non-overlapping matches in the string.

If one or more groups are present in the pattern, return a
list of groups; this will be a list of tuples if the pattern
has more than one group.

Empty matches are included in the result.
"
Function that returns true or false if certain conditions are met?,"def typecheck(value):
    try:
        return len(value) == 8 and bool(int(value, 2))
    except TypeError, ValueError:
        return False
"
Why doesn't my Python RandomForestRegressor accurately predict training set data?,"def printLDF( aPopulationSET ):
    LDF_example, LDF_counts = np.unique( aPopulationSET, return_counts = True )
    GDF_sum_scaler          = float( LDF_counts.sum() )
    for i in xrange( LDF_example.shape[0] ):
        print ""{0: > 6d}: {1: > 6d} x {2: > 15.2f}            {3: > 15.4f} % {4: > 15.1f} %"".format( i, LDF_counts[i], LDF_example[i], 100 * LDF_counts[i] / GDF_sum_scaler, 100 * LDF_counts[:i].sum() / GDF_sum_scaler )
    return

>>> printLDF( forest.estimators_[:].predict( anExample ) )
"
"Python while, continue loops","items = [""A"", ""B"", ""C"", ""D"", ""E""]
for page in grouper(2, items):
    print(""::NewPage::"")
    for item in page:
        if item is not None:
            print(item)
"
re.sub - multi value and multi lines substitution,"#!/usr/bin/env python

import re

infile = 'in.conf'
outfile = 'out.conf'

change_vars_list = (r'%var1%', r'%var2%', r'%var3%')
change_values_list = ('newvalue1', 'newvalue2', 'newvalue3')

with open(infile, 'r') as inconf:
    lines = inconf.read()

    print('\nRaw lines:\n\n%s' % lines)
    print('\nVars to change:')
    print(change_vars_list)

    outdata = lines
    for var, value in zip(change_vars_list, change_values_list):
        outdata = re.sub(var, value, outdata)

    print('\nNew data:\n\n%s\n' % outdata)

with open(outfile, 'w') as outconf:
    outconf.write(outdata)
"
Assign variables to dictionary items with same key,"for row in enumerate(cursor):
    exec(""DB{0} = row[1][u'name']"".format(row[0] + 1))
"
pandas merging based on a timestamp which do not match exactly,"from io import StringIO
from pandas import read_csv, to_datetime

# how close do sessions have to be to be considered equal? (in minutes)
threshold = 5

# datetime column (combination of date + start_time)
dtc = [['date', 'start_time']]

# index column (above combination)
ixc = 'date_start_time'

df1 = read_csv(StringIO(u'''
date,start_time,employee_id,session_id
01/01/2016,02:03:00,7261824,871631182
01/01/2016,06:03:00,7261824,871631183
01/01/2016,11:01:00,7261824,871631184
01/01/2016,14:01:00,7261824,871631185
'''), parse_dates=dtc)

df2 = read_csv(StringIO(u'''
date,start_time,employee_id,session_id
01/01/2016,02:03:00,7261824,871631182
01/01/2016,06:05:00,7261824,871631183
01/01/2016,11:04:00,7261824,871631184
01/01/2016,14:10:00,7261824,871631185
'''), parse_dates=dtc)
"
Python datetime add,">>> from pytz import timezone, utc
>>> eastern = timezone('US/Eastern')
>>> utctime = utc.localize(datetime.strptime(s, ""%Y-%m-%d %H:%M:%S""))
>>> local_tz = utctime.astimezone(eastern)
>>> print mytime.strftime(""%Y.%m.%d %H:%M:%S"")
2013.08.11 15:48:49
"
Get item with value from tuple in python,"for obj, value in results:
    if value == key:
        result = (obj, value)
"
Removing numbers.,"print((l.swapcase()*2).strip())
"
escape characters and strings,"import yaml

config_list = ( 'sleep 200', '[sh, -xc, ""echo $test\'  test\' >> /etc/hosts""]')
results = {'properties': []}
run_cmd = results['properties']
for i in range(len(config_list)):
    run_cmd.append(config_list[i])

with open(""f2.yml"", ""w"") as yaml_file:
    yaml_file.write(yaml.dump(results, default_flow_style=False, allow_unicode=True))

yaml_file.close()

yaml_file2 = open('f2.yml', 'r')
data = yaml_file2.read()
print(yaml.load(data))
"
Listing select option values with Selenium and Python,"from selenium import webdriver

browser = webdriver.Firefox()
#code to get you to the page
select_box = browser.find_element_by_name(""countries"") # if your select_box has a name.. why use xpath?..... this step could use either xpath or name, but name is sooo much easier.
options = [x for x in select_box.find_elements_by_tag_name(""option"")] #this part is cool, because it searches the elements contained inside of select_box and then adds them to the list options if they have the tag name ""options""
for element in options:
    print element.get_attribute(""value"") # or append to list or whatever you want here
"
Python Optional Argument Pair,"parser=argparse.ArgumentParser()
parser.add_argument('--dates', nargs=2, metavar=('START DATE','END_DATE'),
                   help='start date and end date in YYYY-MM-DD')
print(parser.format_help())
"
Use attributes in heuristic,"def make_heuristic(G):
    def heuristic(a, b):
        a_attr, b_attr = [G.node[n][key] for n in (a, b)]
        ...
    return heuristic

nx.astar_path(G,start,end,make_heuristic(G))        
"
Elegant way to convert list to hex string,"hex(int(''.join([str(int(b)) for b in walls]), 2))"
Execute Commands Sequentially in Python,"""""""
command1
command2
command3
""""""
"
Python: Script to detect data Hazards,"dep_list = [opcodes[i] for i,dest in enumerate(dests) for src in srcs if dest in src]
"
Django contains None (or reversed contain),"from django.db.models import Q

qs = MyModel.objects.filter(~Q(icon__contains='any string'))
"
how to flatten a 2D list to 1D without using numpy?,">>> reduce(lambda x,y :x+y ,[[1,2,3],[1,2],[1,4,5,6,7]])
[1, 2, 3, 1, 2, 1, 4, 5, 6, 7]
"
Post request with many params in Python,">>> import requests
>>> from pprint import pprint
>>> params = {'name': ['val1', 'val2', 'val3', 'val4']}
>>> url = 'http://httpbin.org/get'
>>> response = requests.get(url, params=params)
>>> pprint(response.json())
{u'args': {u'name': [u'val1', u'val2', u'val3', u'val4']},
 u'headers': {u'Accept': u'*/*',
              u'Accept-Encoding': u'gzip, deflate, compress',
              u'Connection': u'close',
              u'Host': u'httpbin.org',
              u'User-Agent': u'python-requests/2.2.1 CPython/2.7.6 Darwin/13.2.0',
              u'X-Request-Id': u'2fb6d325-308a-4669-a791-73666ac0d298'},
 u'origin': u'84.92.98.170',
 u'url': u'http://httpbin.org/get?name=val1&name=val2&name=val3&name=val4'}
>>> url = 'http://httpbin.org/post'
>>> response = requests.post(url, data=params)
>>> pprint(response.json())
{u'args': {},
 u'data': u'',
 u'files': {},
 u'form': {u'name': [u'val1', u'val2', u'val3', u'val4']},
 u'headers': {u'Accept': u'*/*',
              u'Accept-Encoding': u'gzip, deflate, compress',
              u'Connection': u'close',
              u'Content-Length': u'39',
              u'Content-Type': u'application/x-www-form-urlencoded',
              u'Host': u'httpbin.org',
              u'User-Agent': u'python-requests/2.2.1 CPython/2.7.6 Darwin/13.2.0',
              u'X-Request-Id': u'473e4e2d-e125-45b8-9697-b93b23ec2eca'},
 u'json': None,
 u'origin': u'84.92.98.170',
 u'url': u'http://httpbin.org/post'}
"
Draw box around tick label in Matplotlib,"import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax.axis([0, 2000, 0, 2e-9])

ax.annotate('Cutoff', xy=(2000, 0), xytext=(0, -15 - ax.xaxis.labelpad),
            xycoords=('data', 'axes fraction'), textcoords='offset points',
            ha='center', va='top',
            bbox=dict(boxstyle='round', fc='none', ec='red'))

plt.show()
"
find string with format '[number]' using regex,"myre = re.compile(r'\[\d+\]')
newstring = myre.sub(replacement, yourstring)
"
numpy element transformation with lambda?,">>> a = np.array([-1, 23, 312, 47, -5])
>>> a.clip(0, 255)
array([  0,  23, 255,  47,   0])
"
Function that takes a nested list of strings and returns a new nested list with all strings capitalized?,"def capitalize_nested(t):
    if isinstance(t, list):
        return [capitalize_nested(s) for s in t]
    else:
        return t.capitalize()
"
"How to dynamically construct a closure's namespace ""pythonically""","def f(z):
    exec(""Y=""+str(z),locals())
    exec(""def closure():\n return Y*2"",locals())
    return eval(""closure"")
"
Lagrange interpolation in Python: as a result matematical formula,"def Lagrange (Lx, Ly):
    X=sympy.symbols('X')
    if  len(Lx)!= len(Ly):
        print ""ERROR""
        return 1
    y=0
    for k in range ( len(Lx) ):
        t=1
        for j in range ( len(Lx) ):
            if j != k:
                t=t* ( (X-Lx[j]) /(Lx[k]-Lx[j]) )
        y+= t*Ly[k]
    return y
"
Multiple Testcases Stdin (Python),"import sys

def read_data(source):
    N = int(next(source))
    for case in range(N):
        num_rows = int(next(source))
        rows = [next(source).split() for i in range(num_rows)]
        yield rows

for case in read_data(sys.stdin):
    print case
"
python scope issue with anonymous lambda in metaclass,"meth = lambda self : self.__dict__[key]
"
python re.sub : replace substring with string,">>> import re
>>> m = re.sub(r'10', r'20', ""hello number 10, Agosto 19"")
>>> m
'hello number 20, Agosto 19'
"
Backtracking in sudoku solver failing,"def propagate_fc(board, N, P, Q, row, col, num):
    # no copying any more here

    #row propagate
    for x in range(N):
        if board[x][col][0] == 0:
            if num in board[x][col][1]:
                board[x][col][1].remove(num)
        if len(board[x][col][1]) == 0:
           return False

    #col propagate
    for y in range(N):
        if board[row][y][0] == 0:
            if num in board[row][y][1]:
                board[row][y][1].remove(num)
        if len(board[row][y][1]) == 0:
            return False

    #box propagate
    rDiv = row/P
    cDiv = col/P
    for i in range((rDiv * P), ((rDiv + 1) * P)):
        for j in range((cDiv * Q), ((cDiv + 1) * Q)):
            if board[i][j][0] == 0:
                if num in board[i][j][1]:
                    board[i][j][1].remove(num)
            if len(board[i][j][1]) == 0:
                return False

    return board #success; return new board
"
What is IPython automagic?,"%run myscript.py
"
Python: appending to an array,"for <blah blah>
    num3,num1,num2,num4,num5 = data
    outputData.append('\t'.join(map(str, [num1, num2, num3, num4, num5])))

outfile.write('\n'.join(outputData))
"
Include empty values in a list according to specific positions (Python),"IncompleteList=['00:00:00', '00:00:01', '00:00:03','23:59:59']
IncompleteSet = set(IncompleteList)
MyList=['22', '33', '25','13']
CompleteList=['00:00:00', '00:00:01', '00:00:02', '00:00:03','23:59:59']
MyListIt = iter(MyList)
[next(MyListIt) if cl_elem in IncompleteSet else '' for cl_elem in CompleteList]
"
How to create dict using csv file with first row as keys,"import csv

with open('data.csv') as f:
    reader = csv.DictReader(f)
    for row in reader:
        print row
"
how python test binary data inside some plain text which was extract from database,"#!/usr/bin/env python
# -*- coding: utf-8  -*-

data = '''Some plain data脑$4BCR倯ご?3TVfrs枴贬    - 釱W hf颲[e?喸媼q屧ㄠ蚀厲蹳
          ZIO痙(r5?-i擯栧剗矹?尴?蝓玁帰XZ鞭#崛攳┸蹵X僦?攅Z@?らM;X藙?N蹮垀s@jQ?Z徸
          林炑M~?麒]H=颦C胝_р}""?Gixqz坽徸玨?O?Q+谍?w鬪??'''
tdata = '''This has no binary in it'''
bdata = '''炑M~?麒]H=颦C胝'''

pool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 '

def filter_data(blob):
    last_good_one = None
    for i, c in enumerate(blob):
        if c in pool:
            last_good_one = i
        else:
            break
    if last_good_one == None:
        raise BaseException('Only binary data!')
    return blob[:last_good_one+1]

print filter_data(data)
print filter_data(tdata)
print filter_data(bdata)
"
"wxPython New, Save, and SaveAs Methods","with open(os.path.join(self.dirname, self.filename), 'w') as filehandle:
    filehandle.write(contents)
"
Dictionary not recognizing floating point keys,"import numpy as np
arr = np.array([(1490775.0, 12037425.0)], dtype=[('foo','<f8'),('bar','<f8')])
arr.flags.writeable = False

G = dict()
G[arr[0]] = 0

print(type(G.keys()[0]))
# <type 'numpy.void'>

print(type(G.keys()[0][0]))
# <type 'numpy.float64'>

print(type(G.keys()[0][1]))
# <type 'numpy.float64'>

print(type(G))
# <type 'dict'>
"
"Remove duplicates from list, including original matching item",">>> ls = [1, 2, 3, 3]
>>> [x for x in ls if ls.count(x) == 1]
[1, 2]
>>>
"
"Merge child nodes with the similar parent node, xml, python","from collections import defaultdict
import xml.etree.ElementTree as ET

data = """"""<root>
    <article_date>09/09/2013
    <article_time>1
        <article_name>aaa1</article_name>
        <article_link>1aaaaaaa</article_link>
    </article_time>
    <article_time>0
        <article_name>aaa2</article_name>
        <article_link>2aaaaaaa</article_link>
    </article_time>
    <article_time>1
        <article_name>aaa3</article_name>
        <article_link>3aaaaaaa</article_link>
    </article_time>
    <article_time>0
        <article_name>aaa4</article_name>
        <article_link>4aaaaaaa</article_link>
    </article_time>
    <article_time>1
        <article_name>aaa5</article_name>
        <article_link>5aaaaaaa</article_link>
    </article_time>
    </article_date>
</root>
""""""

tree = ET.fromstring(data)

root = ET.Element('root')
article_date = ET.SubElement(root, 'article_date')
article_date.text = tree.find('.//article_date').text

data = defaultdict(list)
for article_time in tree.findall('.//article_time'):
    text = article_time.text.strip()
    name = article_time.find('./article_name').text
    link = article_time.find('./article_link').text
    data[text].append((name, link))

for time_value, items in data.iteritems():
    article_time = ET.SubElement(article_date, 'article_time')
    article_name = ET.SubElement(article_time, 'article_name')
    article_link = ET.SubElement(article_time, 'article_name')

    article_time.text = time_value
    article_name.text = '+'.join(name for (name, _) in items)
    article_link.text = '+'.join(link for (_, link) in items)

print ET.tostring(root)
"
"reading of csv into dictionary, first line becomes the name",">>> import csv
>>> sample = '''\
... Name,Surname,Address1,Address2,email,etc
... Adam1,Smith1,12 Connaugh Rd.,,adamsmith@gmail.com,etc...
... Adam2,Smith2,12 Connaugh Rd.,,adamsmith@gmail.com,etc...
... Adam3,Smith3,12 Connaugh Rd.,,adamsmith@gmail.com,etc...
... '''
>>> reader = csv.DictReader(sample.splitlines())
>>> print next(reader)
{'Surname': 'Smith1', 'Name': 'Adam1', 'Address1': '12 Connaugh Rd.', 'Address2': '', 'etc': 'etc...', 'email': 'adamsmith@gmail.com'}
>>> print next(reader)
{'Surname': 'Smith2', 'Name': 'Adam2', 'Address1': '12 Connaugh Rd.', 'Address2': '', 'etc': 'etc...', 'email': 'adamsmith@gmail.com'}
>>> print next(reader)
{'Surname': 'Smith3', 'Name': 'Adam3', 'Address1': '12 Connaugh Rd.', 'Address2': '', 'etc': 'etc...', 'email': 'adamsmith@gmail.com'}
"
Is time.mktime timezone free in python?,"#!/usr/bin/env python3
from datetime import datetime
import pytz # $ pip install pytz

pacific = pytz.timezone('America/Los_Angeles')
naive  = datetime(2015, 2, 2)
pacific_dt = pacific.localize(naive, is_dst=None)
print(pacific_dt.timestamp())

utc_dt = naive.replace(tzinfo=pytz.utc)
print(utc_dt.timestamp())

print(naive.timestamp()) #NOTE: interpret as local time
"
Is there a reason not to send super().__init__() a dictionary instead of **kwds?,"import time

def some_func(**kwargs):
    for k,v in kwargs.items():
        pass

def main():
    name = 'felix'
    location = 'here'
    user_type = 'player'

    kwds = {'name': name,
            'location': location,
            'user_type': user_type}

    start = time.time()
    for i in range(10000000):
        some_func(**kwds)

    end = time.time()
    print 'Time using expansion:\t{0}s'.format(start - end)
    start = time.time()
    for i in range(10000000):
        some_func(name=name, location=location, user_type=user_type)

    end = time.time()
    print 'Time without expansion:\t{0}s'.format(start - end)


if __name__ == '__main__':
    main()
"
Login into Server AND MySQL from Python,"def __init__(self):
    self.connection = MySQLdb.connect(host, user, password, db)
    self.cursor = self.connection.cursor()
"
testing whether a Numpy array contains a given row,"any(np.equal(a, [1, 2]).all(1))"
Vectorize a python loop over a numpy array,">>> def aForwardShiftingDependenceLOOP(): # proposed code-revision
...     aStopWATCH.start()                # ||||||||||||||||||.start
...     for thisPtr in range( 1, len( sig ) ):
...         #        |vvvvvvv|------------# FORWARD-SHIFTING-LOOP DEPENDENCE
...         prevPtr = thisPtr - 1  #|vvvvvvv|--STEP-SHIFTING avoids Numpy syntax
...         if ( sig[ thisPtr] < out[prevPtr] ):
...             out[  thisPtr] = out[prevPtr] * beta
...         else:
...             out[  thisPtr] = out[prevPtr] * alpha + ( aConst * sig[thisPtr] )
...     usec = aStopWATCH.stop()          # ||||||||||||||||||.stop
...     print usec, "" [usec]""

>>> aForwardShiftingDependenceLOOP()
57593  [usec]
57879  [usec]
58085  [usec]

>>> def anOriginalForLOOP():
...     aStopWATCH.start()
...     for n in range( 1, len( sig ) ):
...         if ( np.abs( sig[n] ) >= out[n-1] ):
...             out[n] = out[n-1] * alpha + ( 1 - alpha ) * np.abs( sig[n] )
...         else:
...             out[n] = out[n-1] * beta
...     usec = aStopWATCH.stop()
...     print usec, "" [usec]""

>>> anOriginalForLOOP()
164907  [usec]
165674  [usec]
165154  [usec]
"
Having two keys for each value in dictionary,"class City(object):
    def __init__(self, name):
        self.name = name

    def __eq__(self, other):
        return self.name == other

    def __hash__(self):
        return hash(self.name)
"
Creating multiple class instances from a list of names in Python?,"new_cards = [Card(**card) for card in card_list]  # make new card objects
cards = {card.name: card for card in new_cards}  # dict to ref cards by name 
print cards['Knight'].name
"
Python using Beautiful Soup for HTML processing on specific content,"from time import clock
import urllib
import re
import BeautifulSoup
import lxml.html

start = clock()
url = 'http://allrecipes.com/Recipe/Slow-Cooker-Pork-Chops-II/Detail.aspx'
data = urllib.urlopen(url).read()
print ""Loading took"", (clock()-start), ""s""

# by regex
start = clock()
x = data.find('Ingredients</h3>')
patingr = re.compile('<li class=""plaincharacterwrap"">\r\n +(.+?)</li>\r\n')
res1 = '\n'.join(patingr.findall(data,x))
print ""Regex parse took"", (clock()-start), ""s""

# by BeautifulSoup
start = clock()
bs = BeautifulSoup.BeautifulSoup(data)
ingreds = bs.find('div', {'class': 'ingredients'})
res2 = '\n'.join(s.getText().strip() for s in ingreds.findAll('li'))
print ""BeautifulSoup parse took"", (clock()-start), ""s  - same ="", (res2==res1)

# by lxml
start = clock()
lx = lxml.html.fromstring(data)
ingreds = lx.xpath('//div[@class=""ingredients""]//li/text()')
res3 = '\n'.join(s.strip() for s in ingreds)
print ""lxml parse took"", (clock()-start), ""s  - same ="", (res3==res1)
"
unique values in a pandas dataframe,"In [14]: df = DataFrame(np.random.randint(0,10,size=10000).reshape(100,100))

In [15]: %timeit Series(df.values.ravel()).unique()
10000 loops, best of 3: 137 ﾵs per loop

In [16]: %timeit np.unique(df.values.ravel())
1000 loops, best of 3: 270 ﾵs per loop
"
Checking SHA1 on a String,">>> import hashlib
>>> myhash = hashlib.sha1(""Fox"".encode('utf-8'))
>>> myhash.digest()
b'\xdf\xcd4T\xbb\xeax\x8au\x1ail$\xd9p\t\xca\x99-\x17'
>>> myhash.hexdigest()
'dfcd3454bbea788a751a696c24d97009ca992d17'
"
modifying elements list of tuples python,"l1 = [1, 2, 3]
l2 = ['a', 'b', 'c']

lol = [l1, l2]
lol[0][0] = 0

print(l1)  # prints [0, 2, 3]
"
how to make a multiplication table in python,"n=10
for a in range(1,n):
    val = """"
    for b in range(1,n):
        val = val + str(a*b) + "" ""
        print(val)
"
Sum concisely particular elements in a list of lists,">>> stacks = [[1, 2, 3], [[4, 5, 6], [1, 2, 3]]]
>>> wrapped = (s if isinstance(s[0], list) else [s] for s in stacks)
>>> total = [sum(x[1] for x in w) for w in wrapped]
>>> total
[2, 7]
"
Python lambda to print formatted nested list,"alphabeticalWord = lambda w: ''.join(sorted(word))

' '.join([alphabeticalWord(word) for word in sentence.split()])
"
How can I list the contents of a directory in Python?,os.listdir('/home/username/www/')
"Implementing a ""[command] [action] [parameter]"" style command-line interfaces?","import argparse


def main():
    arger = argparse.ArgumentParser()

    # Arguments for top-level, e.g ""subcmds.py -v""
    arger.add_argument(""-v"", ""--verbose"", action=""count"", default=0)

    subparsers = arger.add_subparsers(dest=""command"")

    # Make parser for ""subcmds.py info ...""
    info_parser = subparsers.add_parser(""info"")
    info_parser.add_argument(""-m"", ""--moo"", dest=""moo"")

    # Make parser for ""subcmds.py create ...""
    create_parser = subparsers.add_parser(""create"")
    create_parser.add_argument(""name"")
    create_parser.add_argument(""additional"", nargs=""*"")

    # Parse
    opts = arger.parse_args()

    # Print option object for debug
    print opts

    if opts.command == ""info"":
        print ""Info command""
        print ""--moo was %s"" % opts.moo

    elif opts.command == ""create"":
        print ""Creating %s"" % opts.name
        print ""Additional: %s"" % opts.additional

    else:
        # argparse will error on unexpected commands, but
        # in case we mistype one of the elif statements...
        raise ValueError(""Unhandled command %s"" % opts.command)


if __name__ == '__main__':
    main()
"
Python Pandas: Get index of rows which column matches certain value,"In [110]: np.flatnonzero(df['BoolCol'])
Out[112]: array([0, 3, 4])
"
Find nested sub-classes in a class in the order they're defined,"class A:
    pass

class B(metaclass=OrderedClass):
    x = 5
    class D(A):
        pass
    class C(A):
        pass

print(filter(lambda x: isinstance(getattr(B, x), type), b.members)))
"
Python Argument Binders,"print_hello = lambda *a, **kw: sys.stdout.write(""Hello world\n"", *a, **kw)
"
How to get a function name as a string in Python?,my_function.__name__
Getting the current day of another country python,"#!/usr/bin/env python
import calendar
from datetime import datetime
import pytz # $ pip install pytz

now = datetime.now(pytz.timezone('Asia/Tokyo')) # you could pass `timezone` object here
weekday = now.weekday() 
print(calendar.day_name[weekday])
"
"For Python 3.3, how can I make a list of functions using one lambda statement?","quadrant = [lambda x, y, sign = sign: (sign[0] * x, sign[1] * y)
    for sign in ((1, -1), (1, 1), (-1, 1), (-1, -1))]
"
CSV rows and columns calculating,"data = '''2,2,2
3,3,3
6,6,6
0,0,3
4,4,4
0,0,6'''

from StringIO import StringIO

import pandas as pd

df = pd.DataFrame.from_csv(StringIO(data), index_col=None, header=None)

print '\n all rows \n'
print df

print '\n group by column 2 \n'

for name, gr in df.groupby(2):
    print '\n name: %s \n' % name
    print gr
    print 'indexes:', gr.index
"
Placing variables inside a python list comprehension,"clips = [
ImageClip(os.path.join(folder,pic))
         .resize(width=w*9.3/16)
         .set_start(index*2+1)
         .set_end(index*2+3)
         .set_pos(lambda t:(max((402), (int(w-3*w*t))), ""center""))

    for index, pic in enumerate(picfiles)
]
"
check if element of list is present in elements of another list,"import re

a = [""Britney spears"", ""red dog"", ""\xa2xe3""]
b = [""cat"",""dog"",
     ""red dog is stupid"", 
     ""good stuff \xa2xe3"", 
     ""awesome Britney spears"",
     ""transferred dogcatcher""]

#This version leaves whitespace and will match between words.
regex = re.compile('|'.join(re.escape(x) for x in a))
c = [regex.sub("""",x) for x in b ]
print (c) #['cat', 'dog', ' is stupid', 'good stuff ', 'awesome ', 'transfercatcher']

#This version strips whitespace from either end
# of the returned string
regex = re.compile('|'.join(r'\s*{}\s*'.format(re.escape(x)) for x in a))
c = [regex.sub("""",x) for x in b ]
print (c) #['cat', 'dog', 'is stupid', 'good stuff', 'awesome', 'transfercatcher']

#This version will only match at word boundaries,
# but you lose the match with \xa2xe3 since it isn't a word
regex = re.compile('|'.join(r'\s*\b{}\b\s*'.format(re.escape(x)) for x in a))
c = [regex.sub("""",x) for x in b ]
print (c) #['cat', 'dog', 'is stupid', 'good stuff \xa2xe3', 'awesome', 'transferred dogcatcher']


#This version finally seems to get it right.  It matches whitespace (or the start
# of the string) and then the ""word"" and then more whitespace (or the end of the 
# string).  It then replaces that match with nothing -- i.e. it removes the match 
# from the string.
regex = re.compile('|'.join(r'(?:\s+|^)'+re.escape(x)+r'(?:\s+|$)' for x in a))
c = [regex.sub("""",x) for x in b ]
print (c) #['cat', 'dog', 'is stupid', 'good stuff', 'awesome', 'transferred dogcatcher']
"
Splicing mRNA using for a while loops,"def splice(seq, exons):
    newseq = """"
    next = 0
    for x, y in exons:
        newseq += seq[next:x]
        next = y
    newseq += seq[next:]        
    return newseq
"
Convert a pandas dataframe in a transactional data format to a list - Python,"df.groupby(['id'])['purchased_item'].apply(list).values.tolist()

In [434]: df.groupby(['id'])['purchased_item'].apply(list).values.tolist()
Out[434]:
[['apple', 'banana', 'carrot'],
 ['banana'],
 ['apple'],
 ['apple', 'carrot', 'diet_coke'],
 ['banana', 'carrot'],
 ['banana', 'carrot']]
"
Could python split return None while the string has two continuous tab('\t')?,"[x or None for x in ""1\t2\t3\t\t4"".split(""\t"")]
#>>> ['1', '2', '3', None, '4']
"
Find element in xml,"from xml.etree import ElementTree as ET

data = """"""<?xml version=""1.0""?>
<config version=""1.0"" timestamp=""xxxxxxxxxx"">
    <a>
        <aa>
        ..
        </aa>
    </a>
    <b>
        <bb>
        ...
        </bb>
    </b>
    <c>
        <cc>
            <ccc>
                <cccc>
                    <test>value to find</test>
                </cccc>
            </ccc>
        </cc>
    </c>
</config>""""""

tree = ET.fromstring(data)

parent = tree.find('.//cccc')
print next(iter(parent)).text
"
fastest way to iterate in python,"if self.color_array is None:
     self.color_array = numpy.empty((len(activity), 4))
diff_activity = (activity - self.min) / abs_diff
self.color_array[:, :3] = (start_colors + 
                           diff_activity[:, numpy.newaxis] + 
                           end_colors)
self.color_array[:, 3] = 1
"
Combine array along axis,"(a + b[:,None,:]).reshape(-1,a.shape[1])
"
express binary literals,"int('01010101111', 2)"
XML Parsing to .txt file Python,"import requests
url='http://forecast.weather.gov/MapClick.php?lat=47.6062&lon=-122.3321&FcstType=digitalDWML'
r = requests.get(url)

import xmltodict
result = xmltodict.parse(r.text)  
cd = result['dwml']['head']['product']['creation-date']['#text']
print(""creation-date ="",cd)
pop = result['dwml']['data']['parameters']['probability-of-precipitation']['value']
print(""\nprobability-of-precipitation ="", pop)
hqpf = result['dwml']['data']['parameters']['hourly-qpf']['value']
print(""\nhourly-qpf ="", hqpf)
"
Merge two CSV's with unique columns in python,"import pandas as pd

df1 = pd.read_csv(""fish1.csv"")
df2 = pd.read_csv(""fish2.csv"")

df = pd.concat([df1, df2]).fillna(0)
df = df[[""Date"", ""Time""] + list(df.columns[1:-1])]
df.to_csv(""merged_fish.csv"", index=False)
"
Getting the closest date to a given date,">>> from datetime import timedelta, datetime
>>> base_date = '10/29 06:59 AM'
>>> b_d = datetime.strptime(base_date, ""%m/%d %I:%M %p"")
>>> def func(x):
...         d =  datetime.strptime(x[0], ""%m/%d %I:%M %p"")
...         delta =  d - b_d if d > b_d else timedelta.max
...         return delta
... 
>>> lis2 = [('10/30 04:30 PM', '+1.5 -111', '-1.5 +101'), ('10/30 04:24 PM', '+1.5 -110', '-1.5     +100'), ('10/30 04:21 PM', '+1.5 -111', '-1.5 +101'), ('10/30 04:15 PM', '+1.5 -112', '-1.5 +102'), ('10/30 04:14 PM', '+1.5 -110', '-1.5 +100'), ('10/30 03:57 PM', '+1.5 -111', '-1.5 +101'), ('10/30 03:40 PM', '+1.5 -110', '-1.5 +100'), ('10/30 03:31 PM', '+1.5 -111', '-1.5 +101'), ('10/30 03:30 PM', '+1.5 -109', '-1.5 -101'), ('10/30 03:25 PM', '+1.5 -107', '-1.5 -103'), ('10/30 03:24 PM', '+1.5 -110', '-1.5 +100'), ('10/30 03:23 PM', '+1.5 -108', '-1.5 -102'), ('10/30 03:22 PM', '+1.5 -106', '-1.5 -104'), ('10/30 02:14 PM', '+1.5 -104', '-1.5 -106'), ('10/30 01:41 PM', '+1.5 -105', '-1.5 -105'), ('10/30 01:37 PM', '+1.5 -107', '-1.5 -103'), ('10/30 01:36 PM', '+1.5 -105', '-1.5 -105'), ('10/30 01:06 PM', '+1.5 -103', '-1.5 -107'), ('10/30 12:56 PM', '+2 -111', '-2 +101'), ('10/30 12:53 PM', '+2 -110', '-2 +100'), ('10/30 12:50 PM', '+2 -113', '-2 +103'), ('10/30 12:49 PM', '+2 -112', '-2 +102'), ('10/30 12:46 PM', '+2 -113', '-2 +103'), ('10/30 12:45 PM', '+2 -110', '-2 +100'), ('10/30 12:43 PM', '+2 -108', '-2 -102'), ('10/30 12:38 PM', '+2.5 -116', '-2.5 +106'), ('10/30 12:38 PM', '+2.5 -113', '-2.5 +103'), ('10/30 12:37 PM', '+2.5 -110', '-2.5 +100'), ('10/30 10:30 AM', '+2.5 -105', '-2.5 -105'), ('10/30 10:07 AM', '+3 -113', '-3 +103'), ('10/30 09:55 AM', '+3 -112', '-3 +102'), ('10/30 09:51 AM', '+3 -110', '-3 +100'), ('10/30 09:32 AM', '+3 -109', '-3 -101'), ('10/30 06:04 AM', '+3 -110', '-3 +100'), ('10/30 03:16 AM', '+3 -107', '-3 -103'), ('10/30 03:14 AM', '+3.5 -116', '-3.5 +106'), ('10/30 01:03 AM', '+3.5 -115', '-3.5 +105'), ('10/30 12:17 AM', '+3.5 -110', '-3.5 +100'), ('10/29 08:52 PM', '+3.5 -108', '-3.5 -102'), ('10/29 01:31 PM', '+3.5 -105', '-3.5 -105'), ('10/29 06:48 AM', '+3.5 -110', '-3.5 +100'), ('10/29 06:47 AM', '+3.5 -109', '-3.5 -101'), ('10/29 05:39 AM', '+3.5 -113', '-3.5 +103'), ('10/29 03:34 AM', '+3.5 -108', '-3.5 -102'), ('10/29 12:44 AM', '+3.5 -110', '-3.5 +100'), ('10/29 12:41 AM', '+3.5 -107', '-3.5 -103'), ('10/29 12:40 AM', '+3.5 -105', '-3.5 -105'), ('10/28 12:52 PM', '+4 -105', '-4 -105')]
>>> min(lis2, key = func)
('10/29 01:31 PM', '+3.5 -105', '-3.5 -105')
"
Making a Dictionary List with cx_Oracle,"    for i, col in enumerate(columns):
        # Create a new dictionary with field names as the key, 
        # row data as the value.
        #
        # Then add this dictionary to the new_list
        row_dict[col] = row[i]
"
Way to iterate two items at a time in a list?,"def grouper(n, iterable, fillvalue=None):
    ""Collect data into fixed-length chunks or blocks""
    # grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx""
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
"
SA: can I have a 'year' column_property for a Date column?,"query(Foo).filter(extract('year', Foo.date)==2011)
"
Parsing text to XML format,"import xmltodict
mydict = {}
# I added the contents to a file named 'afile.txt'
with open(""afile.txt"",""r"") as f:
    for line in f:
        # ignore lines containing a bracket
        if ""{"" not in line and ""}"" not in line:
            # Split string and remove whitespaces
            linesplit = line.split(""="")
            mydict[linesplit[0].strip()]=linesplit[1][:-1]
# define xml root tag
root = {
    'body': mydict
}
# parse (or unparce) to xml
print xmltodict.unparse(root, pretty=True)
"
Remove character from string if its not in a list...?,">>> contentjoined.translate(None,''.join([i for i in contentjoined if i not in aminoacids]))
'MDVFMKGLSKAKEGVVAAAEKTKQGVAEAAGKTKEGVLYVGSKTKEGVVHGVATVAEKTKEQVTNVGGAVVTGVTAVAQKTVEGAGSIAAATGFVKKDQLGKNEEGAPQEGILEDMPVDPDNEAYEMPSEEGYQDYEPEA'
>>> 
"
UPDATE doesnt use Model save method,"Forbidding Update on a Model
from django.db import models

class NoUpdateQuerySet(models.QuerySet):
    """"""Don't let people call update! Muahaha""""""
    def update(self, **kwargs):
        # you should raise a more specific Exception.
        raise Exception('You shall not update; use save instead.')

class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)

    # setting the custom manager keeps people from calling update.
    objects = NoUpdateQuerySet.as_manager()
"
"Python 2.7 - find and replace from text file, using dictionary, to new text file","with open('test_file.txt', 'r') as in_file:
    text = in_file.read()

with open('output_test_file.txt', 'w') as out_file:
    out_file.write(replace_all(text, spelling_dict))
"
Proxying variables in Python,"class MyProxy(Proxy):    
    def __init__(self, obj):
        super(MyProxy, self).__init__(obj)
        self.proxy_foo = 999

    def __getattribute__(self, item):
        #print(""__getattribute__({}, {})"".format(self, item))
        if item == 'foo':
            return self.proxy_foo
        if item == 'do_something':
            return functools.partial(object.__getattribute__(self, '_obj').__class__.do_something, self)
        return super(MyProxy, self).__getattribute__(item)

a = A()
myproxy = MyProxy(a)
"
How can I parallelize this Python for-loop?,"import concurrent.futures
import itertools

def process_stuff(img_part):
    Process1 = Do_something(img_part)
    Process2 = Do_something(Process1)

with concurrent.futures.ProcessPoolExecutor() as executor:
    i_iterator = arange(0, shape(img)[0] - window_size[0], 10)
    j_iterator = arange(0, shape(img)[1] - window_size[1], 10)
    product = itertools.product(i_iterator, j_iterator)
    parts_generator = (img[i: i + winSize[0], j: j + winSize[1]]
                       for i, j in product)

    executor.map(process_stuff, parts_generator)
"
how can I asynchronously map/filter an asynchronous iterable?,"import asyncio


class arange:
    def __init__(self, n):
        self.n = n
        self.i = 0

    async def __aiter__(self):
        return self

    async def __anext__(self):
        i = self.i
        self.i += 1
        if self.i <= self.n:
            await asyncio.sleep(0)  # insert yield point
            return i
        else:
            raise StopAsyncIteration


class MapFilter:
    def __init__(self, aiterable, p, func):
        self.aiterable = aiterable
        self.p = p
        self.func = func

    async def __aiter__(self):
        return self

    async def __anext__(self):
        while True:
            payload = await self.aiterable.__anext__()
            if self.p(payload):
                return self.func(payload)


async def main():
    aiterable = arange(5)
    p = lambda x: bool(x>2)
    func = lambda x: x*2

    async for i in MapFilter(aiterable, p, func):
        print(i)

if __name__ == ""__main__"":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
"
What is a Pythonic way to count dictionary values in list of dictionaries,">>> class DictCounter(object):
    def __init__(self, list_of_ds):
        keys = set(itertools.chain(*(i.keys() for i in list_of_ds)))
        for k in keys:
            self.__dict__[k] = collections.Counter([d.get(k) for d in list_of_ds])

>>> a = [{'test': 5, 'count': 4}, {'test': 3, 'other': 5}, {'test':3}, {'test':5}]
>>> d = DictCounter(a)
>>> d.test
Counter({3: 2, 5: 2})
>>> d.count
Counter({None: 3, 4: 1})
>>> d.other
Counter({None: 3, 5: 1})
"
Python - sum variables from a text file,"with open(""numberGood.txt"") as f:
    print(sum(float(line) for line in f))
"
"Python csv writer: write a string in front of an array, all in individual columns","#!/usr/bin/env python
import csv

names = ['a','b','c','d']
matrix = [[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]

with open('test.csv', 'a') as csvfile:
    writer = csv.writer(csvfile, dialect='excel')
    for name, matrix_row in zip(names, matrix):
        output_row = [name]
        output_row.extend(matrix_row)
        writer.writerow(output_row)
"
Iterate within directory to zip files with python,"def strip_all_ext(path):
    head, tail = os.path.split(path)
    basename = tail.split(os.extsep)[0]
    return os.path.join(head, basename)
"
How to flatten a list of list with variable lengths into a single list? python,"lst = ""aaabaabacabaacaca""
assert ''.join(flatten(go(iter(lst)))) == lst
"
Sum the three first values of a list of tuples and appending the result to it,"d = [(['dog', '9', 'teacher', '9', 'neighbor', '7'], 'rose   annoyed'), 
(['light', '99', 'lights', '1'], 'jimmy dimmed '),
(['tenant', '66', 'family', '5', 'renter', '5', 'neighbor', '4'], 'aaron evicted '), 
(['world', '8', 'painting', '6', 'website', '4', 'game', '4'], 'ralph created'),
(['zit', '10', 'popcorn', '6', 'pimple', '6', 'cherry', '5'], 'aaron popped')]

d2=[]
for t in d:
    tup=[t[0]]
    tup.append(t[1])
    tup.append(sum(int(x) for x in t[0][1::2]))
    d2.append(tuple(tup))

print(d2)
# [(['dog', '9', 'teacher', '9', 'neighbor', '7'], 'rose   annoyed', 25), 
   (['light', '99', 'lights', '1'], 'jimmy dimmed ', 100), 
   (['tenant', '66', 'family', '5', 'renter', '5', 'neighbor', '4'], 'aaron evicted ', 80), 
   (['world', '8', 'painting', '6', 'website', '4', 'game', '4'], 'ralph created', 22), 
   (['zit', '10', 'popcorn', '6', 'pimple', '6', 'cherry', '5'], 'aaron popped', 27)]
"
Filter not in Python,"Customers.objects.exclude(status__in=[1,2])
"
How to remove strings that contain letters from a list?,"def isNum(s):
    try:
            float(s)
            return True
    except ValueError:
            return False
lst = ['hello', '2U:', '-224.3', '45.1', 'SA 2']
lst = list(filter(isNum, lst))
"
Sum array objects by array object key,"tempsorted = sorted(temp, key=lambda x: x.oscis)
"
Limiting a number to a range,"r, g, b = (min(255, max(0, c)) for c in (r, g, b))
"
Optimized way for finding the number which satisfies specific conditions,"import itertools

for digs in itertools.product(range(8), repeat=8):
    counts = [0] * 8
    for d in digs:
        counts[d] += 1
    if counts == list(digs):
        print digs
"
Python regexp for data of byte numbers,"re.match('^[\0-\x0A]*$',data)
"
Parsing through a file,"for line in fileinput.readlines():
    a, b, c = line.split('\t')      # Variable unpacking; assumes each line has three columns
    if a == '?':
        function_a()
    if b == '?':
        function_b()
    if c == '?':
        function_c()
"
Adding up columns and selecting columns with largest sum,"In [249]:
# note that column 'X3' will produce a sum value of 2
t=""""""Y    X1  X2  X3
Y1   1   0   1
Y2   1   0   1
Y3   1   0   0
Y4   0   1   0""""""
# load the data
df = pd.read_csv(io.StringIO(t), sep='\s+', index_col=[0])
df

Out[249]:
    X1  X2  X3
Y             
Y1   1   0   1
Y2   1   0   1
Y3   1   0   0
Y4   0   1   0
"
Where does a python descriptor's state go?,"class Stored(object):
    """"""A data descriptor that stores instance values in itself.
    """"""
    instances = dict()
    def __init__(self, val):
        self.instances[self, None] = val
    def __get__(self, obj, objtype):
        return self.instances[self, obj]
    def __set__(self, obj, val):
        self.instances[self, obj] = val

class MyClass(object):
    x = Stored(3)
    y = Stored(9)

print(MyClass.x)
print(MyClass.y)
m = MyClass()
m.x = 42
print(m.x)
m.y = 19
print(m.y)
print(m.x)
"
"how do i properly make a for loop sit on one line, with commas and no spaces","num1=int(input('Enter your number range: '))
items = list()
for x in range(1,num1+1):
    if x % 3 == 0:
        items.append(""Fizz"")
    if x % 5 == 0:
        items.append('Buzz')
    if x % 3 != 0 and x % 5 != 0:
        items.append(str(x))

print(*items, sep=',')
"
how can i convert a string like 123245wkjsvd :/' to list and sort?,"print ''.join(sorted(""123245wkjsvd :/'""))
"
Efficiently computing the 3D Laplacian using FFT and Python,"cimport numpy as np
cimport cython
import numpy as np

#3D laplacian of a complex function
@cython.boundscheck(False) # turn of bounds-checking for entire function
def laplacianFD3dcomplex(np.ndarray[double complex, ndim=3] f, double complex dx, double complex dy, double complex dz):
    cdef unsigned int i, j, k, ni, nj, nk
    cdef double complex ifactor, jfactor, kfactor, ijkfactor
    ni = f.shape[0]
    nj = f.shape[1]
    nk = f.shape[2]
    cdef np.ndarray[double complex, ndim=3] lapf = np.zeros((ni,nj,nk)) +0.0J

    ifactor = 1/dx**2
    jfactor = 1/dy**2
    kfactor = 1/dz**2
    ijkfactor = 2.0*(ifactor + jfactor + kfactor)

    for i in xrange(1,ni-1):
        for j in xrange(1, nj-1):
            for k in xrange(1, nk-1):
                lapf[i, j, k] = (f[i, j, k-1] + f[i, j, k+1])*kfactor + (f[i, j-1, k] + f[i, j+1, k])*jfactor + (f[i-1, j, k] + f[i+1, j, k])*ifactor - f[i,j,k]*ijkfactor
    return lapf

#3D laplacian of a real function
@cython.boundscheck(False) # turn of bounds-checking for entire function
def laplacianFD3dreal(np.ndarray[double, ndim=3] f, double dx, double dy, double dz):
    cdef unsigned int i, j, k, ni, nj, nk
    cdef double ifactor, jfactor, kfactor, ijkfactor
    ni = f.shape[0]
    nj = f.shape[1]
    nk = f.shape[2]
    cdef np.ndarray[double, ndim=3] lapf = np.zeros((ni,nj,nk))

    ifactor = 1/dx**2
    jfactor = 1/dy**2
    kfactor = 1/dz**2
    ijkfactor = 2.0*(ifactor + jfactor + kfactor)

    for i in xrange(1,ni-1):
        for j in xrange(1, nj-1):
            for k in xrange(1, nk-1):
                lapf[i, j, k] = (f[i, j, k-1] + f[i, j, k+1])*kfactor + (f[i, j-1, k] + f[i, j+1, k])*jfactor + (f[i-1, j, k] + f[i+1, j, k])*ifactor - f[i,j,k]*ijkfactor
    return lapf
"
Pybtex does not recogonize bibtex entry,"import pybtex.database.input.bibtex
from StringIO import StringIO

def bibtex_string_to_data(s):
    parser = pybtex.database.input.bibtex.Parser()
    return parser.parse_stream(StringIO(s))

print bibtex_string_to_data(""""""
@article{article,
  author  = {Peter Adams},
  title   = {The title of the work},
  journal = {The name of the journal},
  year    = 1993,
  number  = 2,
  pages   = {201-213},
  month   = 7,
  note    = {An optional note},
  volume  = 4
}
"""""")
"
Traverse json object to print root to children path separeted by dot,"def json_as_dotted_path(obj, path=''):
    result = []
    for key, value in obj.iteritems():
        new_path = path + '.'  + key if path else key
        if isinstance(value, dict):
            result.extend(json_as_dotted_path(value, path=new_path))
        else:
            result.append(new_path)
    return result

json = {
    ""root"": {
        ""Child"": {
            ""subChild"": 10,
            ""subChild2"": 20
        },
        ""Child2"": {
            ""subChild2"": 20,
            ""subChild3"": 500
        }

    }
}

from pprint import pprint

pprint(json_as_dotted_path(json))
"
Average time a substring occurs,">>> count = lambda x: sum(s[i:i+m] == x for i in range(len(s)))
>>> X = [''.join(cs) for cs in itertools.product(""abc"", repeat=3)]
>>> counts = [count(x) for x in X]
"
how to print lists separately instead of merging them?,"lines = []
for x in range(0, 2):
    line = []
    for item in dic:
        for i,j in enumerate(abst):       
            if item == j:
                line.append(data[x][i])
    lines.append(line)

print lines
"
Create constants for offsets into a list,"if 'host' in host_info:
    del host_info['host']
"
Add methods to a class generated from other methods,"def process_asyncs(cls):

    def create_method(async_method):

        @class_or_instance
        def newmethod(self, *args, **kwargs):
            if 'verbose' in kwargs:
                verbose = kwargs.pop('verbose')
            else:
                verbose = False
            response = async_method(*args,**kwargs)
            result = self._parse_result(response, verbose=verbose)
            return result
        return newmethod

    methods = cls.__dict__.keys()
    for k in methods:
        methodname = k.replace(""_async"","""")
        if 'async' in k and methodname not in methods:
            async_method = getattr(cls, k)
            setattr(cls, methodname, create_method(async_method))

    return cls
"
Only the last row is inserted to my sql database from a text file after splitting it with PYTHON,"line.strip().split(' | ')
"
Python-Sqlalchemy Binary Column Type HEX() and UNHEX(),"from sqlalchemy import Column, types
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class Model(Base):
    __tablename__ = ""model""
    id = Column(types.Integer, primary_key=True)
    col = Column(HashColumn(20))

    def __repr__(self):
        return ""Model(col=%r)"" % self.col
"
Force python class member variable to be specific type,"class Foo(object):
    def _get_bar(self):
        return self.__bar
    def _set_bar(self, value):
        if not isinstance(value, int):
            raise TypeError(""bar must be set to an integer"")
        self.__bar = value
    bar = property(_get_bar, _set_bar)
"
Updating Tkinter label from a StringVar happens on a delay,"eventsdb_subset = self.eventsdb_subset
self.eventsdb_subset = sqldf('SELECT * from eventsdb_subset WHERE %s' % filterstring,locals())
self.db_info_string.set('Number of events: ' +str(len(self.eventsdb_subset)))
"
linux logfile to pandas dataframe,"awk '{gsub(/[][]/,"""");gsub("";"",FS);sub("","",RS)}1' file
string int string
string2 int2 string2
string3 int3 string3
string4 int4 string4
"
Imitating 'ppoints' R function in python,"import numpy as np
def ppoints(n, a):
    """""" numpy analogue or `R`'s `ppoints` function
        see details at http://stat.ethz.ch/R-manual/R-patched/library/stats/html/ppoints.html 
        :param n: array type or number""""""
    try:
        n = np.float(len(n))
    except TypeError:
        n = np.float(n)
    return (np.arange(n) + 1 - a)/(n + 1 - 2*a)
"
Key Bruteforcing,"mystring = ""abcdefghijklmnopqrstuvwxyz""

import itertools

for L1, L2, L3, L4, L5, L6, L7, L8, L9, L10 in itertools.combinations_with_replacement(mystring, 10):
    strr = """".join([L3, L7, L2, L1, L4, L5, L6, L10, L8, L9])
    if hashlib.md5(strr).hexdigest() == 'a50e38475041f76219748ee22c4377d4':
        print ('key = {}'.format(strr))
        break
"
Python Regular Expression searching backwards,">>> re.match(r'.*?(?=[_\d])', basename).group()
'mega'
"
"Find overlap of two lists, preserving sequence order","def lcs(a, b):
    tbl = [[0 for _ in range(len(b) + 1)] for _ in range(len(a) + 1)]
    for i, x in enumerate(a):
        for j, y in enumerate(b):
            tbl[i + 1][j + 1] = tbl[i][j] + 1 if x == y else max(
                tbl[i + 1][j], tbl[i][j + 1])
    res = []
    i, j = len(a), len(b)
    while i and j:
        if tbl[i][j] == tbl[i - 1][j]:
            i -= 1
        elif tbl[i][j] == tbl[i][j - 1]:
            j -= 1
        else:
            res.append(a[i - 1])
            i -= 1
            j -= 1
    return res[::-1]
"
"Redis still fills up when results_ttl=0, Why?","class RedisTools:
    '''
    A set of utility tools for interacting with a redis cache
    '''

    def __init__(self):
        self._queues = [""default"", ""high"", ""low"", ""failed""]
        self.get_redis_connection()

    def get_redis_connection(self):
        redis_url = os.getenv('REDISTOGO_URL', 'redis://localhost:6379')
        self.redis = redis.from_url(redis_url)

    def get_queues(self):
        return self._queues

    def get_queue_count(self, queue):
        return Queue(name=queue, connection=self.redis).count

    def msg_print_log(self, msg):
        print msg
        logger.info(msg)

    def get_key_count(self):
        return len(self.redis.keys('rq:job:*'))

    def get_queue_job_counts(self):
        queues = self.get_queues()
        queue_counts = [self.get_queue_count(queue) for queue in queues]
        return zip(queues, queue_counts)

    def has_orphanes(self):
        job_count = sum([count[1] for count in self.get_queue_job_counts()])
        return job_count < self.get_key_count()

    def print_failed_jobs(self):
        q = django_rq.get_failed_queue()
        while True:
            job = q.dequeue()
            if not job:
                break
            print job

    def print_job_counts(self):
        for queue in self.get_queue_job_counts():
            print ""{:.<20}{}"".format(queue[0], queue[1])
        print ""{:.<20}{}"".format('Redis Keys:', self.get_key_count())

    def delete_failed_jobs(self):
        q = django_rq.get_failed_queue()
        count = 0
        while True:
            job = q.dequeue()
            if not job:
                self.msg_print_log(""{} Jobs deleted."".format(count))
                break
            job.delete()
            count += 1

    def delete_orphaned_jobs(self):
        if not self.has_orphanes():
            return self.msg_print_log(""No orphan jobs to delete."")

        for i, key in enumerate(self.redis.keys('rq:job:*')):
            job_number = key.split(""rq:job:"")[1]
            job = Job.fetch(job_number, connection=self.redis)
            job.delete()
            self.msg_print_log(""[{}] Deleted job {}."".format(i, job_number))
"
Assigning to global variable inside a function doesn't work,"class sentimentTweet:
    def __init__(self,d={}):
        sentiment_words = d

    def getTweetSentiment(self,tweet_text):
        sentiment = 0
        words = extractWordsFromTweet(tweet_text)
        for word in words:
            if word in self.sentiments_words:
                sentiment += self.sentiments_words[word] #sentiment_words is empty
        return sentiment

sTwitter= sentimentTweet(loadSentiments(open(sys.argv[1]))) #u r creating an instance of the class and loading it 
print sTwitter.sentiment_words #Check, Try to print sentiment_words values 
"
Make python configobj to not put a space before and after the '=',"import os
import sys

class MyConfigParser:
  name = 'MyConfigParser'
  debug = False
  fileName = None
  fileContents = None
  configOptions = dict()  

  def __init__(self, fileName, debug=False):
    self.fileName = fileName
    self.debug = debug    
    self._open()

  def _open(self):       
    try:
        with open(self.fileName, 'r') as file:
    for line in file:
      #If it isn't a comment get the variable and value and put it on a dict
      if not line.startswith(""#"") and len(line) > 1:
    (key, val) = line.rstrip('\n').split('=')
    val = val.strip()
    val = val.strip('\""')
    val = val.strip('\'')
    self.configOptions[key.strip()] = val
except:
  print ""ERROR: File ""  + self.fileName + "" Not Found\n""

  def write(self):
try:
  #Write the file contents
  with open(self.fileName, 'r+') as file:
    lines = file.readlines()
    #Truncate file so we don't need to close it and open it again 
    #for writing
    file.seek(0)
    file.truncate()      

    i = 0
    #Loop through the file to change with new values in dict      
    for line in lines:    
      if not line.startswith(""#"") and len(line) > 1:
    (key, val) = line.rstrip('\n').split('=')
    try:
      if key in line:
        newVal = self.configOptions[key]
        #Only update if the variable value has changed
        if val != newVal:
          newLine = key + ""=\"""" + newVal + ""\""\n""
          line = newLine
    except:
      continue
      i +=1
      file.write(line)
except IOError as e:
  print ""ERROR opening file "" + self.fileName + "": "" + e.strerror + ""\n""


  #Redefinition of __getitem__ and __setitem__

  def __getitem__(self, key):  
try:
  return self.configOptions.__getitem__(key)
except KeyError as e:
  if isinstance(key,int):
    keys = self.configOptions.keys()
    return self.configOptions[keys[key]]
  else:
    raise KeyError(""Key "" +key+ "" doesn't exist"")

  def __setitem__(self,key,value):
self.configOptions[key] = value
"
How to simulate POST arguments in python,">>> form = {
...     'first_name': 'Per',
...     'last_name': 'Thulin',
... }
>>> from urllib import urlencode
>>> urlencode(form)
'first_name=Per&last_name=Thulin'
"
Eddited XML File with certain element,"tree = ET.fromstring(data)
team = next(team for team in tree.iter('team') 
            for number in team.iter('number') 
            if number.text == '78')

team.find('.//high_goals_made_tel').text = ""I've changed""
print ET.tostring(tree)
"
"String of strings for arbitrary amount, python",">>> x = ['dogs', 'cats']
>>> "", "".join(map(repr,x))
""'dogs', 'cats'""
"
How do I navigate results of a Biopython Entrez efetch?,"handle = Entrez.efetch(db=""Protein"", id= ""75192198"", rettype = ""fasta"")

for r in SeqIO.parse(handle, ""fasta""):
    print r.id, r.seq
"
How do I change an argument in a python function?,"def foo(x, k=None):
    if k is None:
        k = len(x)
    ...
"
"Convert Time Column to UTC Time, no date","import pandas as pd
x = pd.to_datetime(data).time

pd.Series(x)
"
Setting spines in matplotlibrc,"import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.pyplot import show

# Set up a default, sample figure. 
fig = plt.figure()
x = np.linspace(-np.pi,np.pi,100)
y = 2*np.sin(x)

ax = fig.add_subplot(1,2,2)
ax.plot(x,y)
ax.set_title('Normal Spines')

def hide_spines():
    """"""Hides the top and rightmost axis spines from view for all active
    figures and their respective axes.""""""

    # Retrieve a list of all current figures.
    figures = [x for x in matplotlib._pylab_helpers.Gcf.get_all_fig_managers()]
    for figure in figures:
        # Get all Axis instances related to the figure.
        for ax in figure.canvas.figure.get_axes():
            # Disable spines.
            ax.spines['right'].set_color('none')
            ax.spines['top'].set_color('none')
            # Disable ticks.
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

hide_spines()
show()
"
Python random and int to string question,"randomInts = [random.randrange(2000) for _ in range(100)]
"
How to pack in a certain order with Python,"import struct
a = struct.unpack('cccc', struct.pack('I', 0x12345678))
b = sum([[a[i+1], a[i]] for i in range(0, len(a), 2)], [])
struct.pack('cccc', *b)
"
"Scrapy, receive just the text from an unordered list, including text between other html tags","[u"""".join(li.xpath('.//text()').extract())
 for li in sel.xpath('//*[@id=""tab_description""]/ul/li')]
"
Difference of elements to find same adjacent,"numbers = [1,3,7,11,25,36,57,678,999]
count = sum([numbers[i] == numbers[i+1] for i in range(len(numbers)-1)])
>>> count
8
"
How to order list according to array values in python?,">>> from itertools import izip
>>> mylist = ['apple','banana','pear','orange'] 
>>> values = [3,1,2,4]
>>> [i[1] for i in sorted(izip(values, mylist))]
 ['banana', 'pear', 'apple', 'orange']
"
Change a specific element of a list in python?,"def getInt(msg, lo=None, hi=None):
    while True:
        try:
            val = int(raw_input(msg))
            if lo is None or lo <= val:
                if hi is None or val <= hi:
                    return val
        except ValueError:
            pass

class GameBoard(object):
    def __init__(self, width=4, height=4):
        self.width  = width
        self.height = height
        self.rows   = [['x']*width for _ in xrange(height)]

    def getMove(self):
        row = getInt('Please enter row (1-{0}): '.format(self.height), 1, self.height)
        col = getInt('Please enter column (1-{0}): '.format(self.width), 1, self.width)
        return row,col

    def move(self, row, col, newch='a'):
        if 1 <= row <= self.height and 1 <= col <= self.width:
            self.rows[row-1][col-1] = newch

    def __str__(self):
        return '\n'.join(' '.join(row) for row in self.rows)

def main():
    bd = GameBoard()

    row,col = bd.getMove()
    bd.move(row,col)

    print bd

if __name__==""__main__"":
    main()
"
Python: Reversing lists,"
>>> s = ""HELLO""
>>> s[6:-6:-1]
'OLLEH'
>>> s[ min(6,len(s)-1) : -6 :-1]
'OLLEH'
>>> s[ min(6,len(s)-1) : None :-1] #None also works fine
'OLLEH'
>>> s[6:-6:-1]
'OLLEH'
"
Multiple lines in python argparse help display,">>> import argparse
>>> parser = argparse.ArgumentParser(description='details',
...         usage='use ""%(prog)s --help"" for more information',
...         formatter_class=argparse.RawTextHelpFormatter)
>>> parser.add_argument('--argument', default=None,
...         help='''
...              First line
...              Second line
... 
...              More lines
...              ''')
_StoreAction(option_strings=['--argument'], dest='argument', nargs=None, const=None, default=None, type=None, choices=None, help='\n             First line\n             Second line\n\n             More lines\n             ', metavar=None)
>>> parser.print_help()
usage: use "" --help"" for more information

details

optional arguments:
  -h, --help           show this help message and exit
  --argument ARGUMENT  
                                    First line
                                    Second line

                                    More lines
"
Python encoding blocks of text using strings,"def code_char(char, key):
    ichar = int(char)
    ikey = int(key)
    return str(ichar+ikey)
"
Restrict kivy's TextInput to only ascii characters,"""food ресторан"".decode(""ascii"", errors='ignore')
"
convert a hexadecimal file and extract / display characters that belongs to a language,">>> x = ""60 42 00 64 62 D6 52 20 4E 65 75 2D 55 6C 6D 20 2F 20 45 76 C4""
>>> x_split = x.split(' ')    
>>> x_split = ', '.join(x_split)
>>> x_split = x_split.replace(', ', '\\x')
>>> x_split = u'\\x'+ x_split   
>>> x_split
u'\\x60\\x42\\x00\\x64\\x62\\xD6\\x52\\x20\\x4E\\x65\\x75\\x2D\\x55\\x6C\\x6D\\x20\\x2F\\x20\\x45\\x76\\xC4'
"
Can I get JSON to load into an OrderedDict in Python?,">>> json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode('{""foo"":1, ""bar"": 2}')
OrderedDict([('foo', 1), ('bar', 2)])
>>> 
"
Python: data structure to index sets to find supersets?,"In [90]: reduce(set.intersection, [fruit, nature])
Out[90]: set(['apple', 'banana'])

In [91]: reduce(set.intersection, [fruit, nature, green])
Out[91]: set(['apple'])

In [92]: reduce(set.intersection, [green, wood, nature])
Out[92]: set(['sometree', 'someplant', 'otherplant'])

In [93]: reduce(set.intersection, [green, wood, nature, tree])
Out[93]: set(['sometree'])
"
How to use a loop to print out data from a list,"your_list = [
    'Australia/AU/36/8177/22919',
    'Austria/AT/40/6936/8429',
    'Azerbaijan/AZ/31/2896/9421'
    'Bahamas/BS/44/79/351'
]

for element in your_list:
    print element
"
numpy type conversions for arrays vs. scalars,"In [151]: type(a-10)
Out[151]: numpy.int32
In [152]: np.promote_types(np.uint8,int)
Out[152]: dtype('int32')
"
How do I take a list of lists and rearrange them in python,">>> zip([1,2,3], [4,5,6])
[(1, 4), (2, 5), (3, 6)]
"
"List as value in dictionary, get key of longest list","
>>> testDict = {76: [4], 32: [2, 4, 7, 3], 56: [2, 58, 59], 10: [1, 2, 3, 4]}
>>> mx = max(len(x) for x in testDict.itervalues())
>>> [k for k, v in testDict.iteritems() if len(v)==mx]
[32, 10]
"
how do I clear a stringio object?,"Times
Python 2
>>> from timeit import timeit
>>> def truncate(sio):
...     sio.truncate(0)
...     return sio
... 
>>> def new(sio):
...     return StringIO()
... 
"
How to find all links in all paragraphs in Beautiful Soup,"all_links = [tag['href'] for tag in soup.select('p a[href]')]
"
"Possible to round numbers to the hundreds, thousands, etc. using Python 3's number formatting",">>> class rint(int):
...     def __format__(self, spec):
...         return int.__format__(int(round(self, -2)), spec)
... 
>>> raw_data = [111, 22222, 33333]
>>> data = map(rint, raw_data)
>>> [format(x, ',') for x in data]
['100', '22,200', '33,300']
"
Is there a python method to set the specified elements to be some value in a list?,">>> b = a[:]
>>> b[1:3] = [1] * 2
>>> b
[0, 1, 1, 0, 0]
"
proper formatting of python multiline [ for in ] statement,"all_params = get_params(some_stuff_here, and_another_stuff)
for param_one, param_two, param_three, param_four, param_five in all_params:
    pass
"
How to generate random numbers that are different?,"random.sample(range(1, 50), 6)"
Suppress unicode prefix on strings when using pprint,"import pprint

def my_safe_repr(object, context, maxlevels, level):
    typ = pprint._type(object)
    if typ is unicode:
        object = str(object)
    return pprint._safe_repr(object, context, maxlevels, level)

printer = pprint.PrettyPrinter()
printer.format = my_safe_repr
printer.pprint({u'foo': u'bar', u'baz': [u'apple', u'orange', u'pear', u'guava', u'banana'], u'hello': u'world'})
"
How do I create a new list with specific items from an old list in Python 2?,"newlist = [ list(filter(bool, x)) for x in oldlist ]
"
Is it possible to use reflection to examine a function's decorators in Python 2.5?,"def my_decorator(f):
     def wrapper(*args, **kwargs):
         return f(*args, **kwargs)
     wrapper.decorators = [wrapper]
     if hasattr(f, 'decorators'):
         wrapper.decorators.extend[f.decorators]
     return wrapper
"
Python replace XML content with Etree,"import xml.etree.ElementTree as etree

english_tree = etree.parse('en.xml')
french_tree = etree.parse('fr.xml')

for en, fr in zip(english_tree.iter(), french_tree.iter()):
   assert en.tag == fr.tag        # check if the structure is the same
   if en.tag == 'id':
       assert en.text == fr.text  # identification must be the same
   elif en.tag == 'string':
       if fr.text is None:
           fr.text = en.text
           print en.text          # display the inserted text

# Write the result to the output file.
with open('fr2.xml', 'w') as fout:
    fout.write(etree.tostring(french_tree.getroot()))
"
Plot special character as ① in matplotlib,"def circled(x):
    return chr(0x245F+x)    # Python 2: use unichr() instead of chr()
"
Concatenation of inner lists or ints,"In [9]: %timeit list(chain.from_iterable(solve(data)))
100000 loops, best of 3: 9.22 us per loop

In [10]: %timeit [a for x in data for a in (x if isinstance(x, Iterable) else [x])]
100000 loops, best of 3: 6.45 us per loop
"
tkinter frame border not displaying,"Tk.Frame.__init__(self,parent)
"
"Please help, this loop isn't working as expected and I don't know how to use booleans in Python","import itertools
primes = [2]
candidate_iter = itertools.count(3, 2)
while len(primes) < 1000:
    candidate = candidate_iter.next()
    if all(candidate % testprime != 0 for testprime in primes):
        primes.append(candidate)
print primes
"
how to import module from other directory in python?,"import imp
foo = imp.load_source('filename', 'File\Directory\filename.py')
"
How do I convert a tuple of tuples to a one-dimensional list using list comprehension?,">>> tupleOfTuples = ((1, 2), (3, 4), (5,))
>>> [element for tupl in tupleOfTuples for element in tupl]
[1, 2, 3, 4, 5]
"
How slice Numpy array by column value,"[~/repo/py]
|21>np.array([row for row in dd if row[1] == 1])
[21] 
array([[ 0.469,  1.   ,  0.479],
       [ 0.48 ,  1.   ,  0.508],
       [ 0.324,  1.   ,  0.324]])

[~/repo/py]
|22>np.array([row for row in dd if row[1] == 2])
[22] 
array([[ 0.567,  2.   ,  0.611],
       [ 0.22 ,  2.   ,  0.269]])
"
Python class returning value,"class MyClass():
    def __cmp__(self, other):
        return cmp(self.get_list(), other.get_list())
"
How can I properly join these strings together (by column then row)?,"print '\n'.join( ''.join('#' for column in range(10)) for row in range(10))
"
How to use a decorator to modify mutable class variables?,"def addItems(cls):
    cls.items = []
    cls.items.append(1)
    return cls
"
How to write the Fibonacci Sequence in Python,"def F():
    a,b = 0,1
    yield a
    yield b
    while True:
        a, b = b, a + b
        yield b
"
type conversion in python from int to float,data_df['grade'] = data_df['grade'].astype(float).astype(int)
Transpose this matrix(python3),"def transpose_matrix(matrix):
    matrix[:] = list(map(list, zip(*matrix)))
"
Script Slicing in Python,"s = []
for i in new_list:
    s.append(i[:6])
"
Scrapy: non-blocking pause,"class ScrapySpider(Spider):
    name = 'live_function'

    def start_requests(self):
        yield Request('some url', callback=self.non_stop_function)

    def non_stop_function(self, response):

        parse_and_pause = Deferred()  # changed
        parse_and_pause.addCallback(self.second_parse_function) # changed
        parse_and_pause.addCallback(pause, seconds=10)  # changed

        for url in ['url1', 'url2', 'url3', 'more urls']:
            yield Request(url, callback=parse_and_pause)  # changed

        yield Request('some url', callback=self.non_stop_function)  # Call itself

    def second_parse_function(self, response):
        pass
"
Recursive numeric triangle in python,"def tri2(size):
    row = map(str, range(1, size + 1))
    print '\n'.join(map(lambda n: ' '.join(row[n:]), range(size)))
"
negating with re.search (find strings that don't contain a specific character),"result = []
for word in someList:
    if 'p' not in word:
        result.append(word)
print result
"
Running a set of Python scripts in a list,"def run_example1():
    """"""
    This is example number 1. Running it should give you the following output:

    >>> run_example1()
    ""This is the output from example1.py""
    """"""

    os.system('python example1.py') # or you could use subprocess here

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
"
Optimise filtering lists in Python 2.7,"def get_clothes():
    for t in allThings:
       if t.garment:
           yield t

def get_hats():
    for t in get_clothes():
        if t.headgear:
            yield t
"
What's the simplest way to subtract a month from a date in Python?,"def monthdelta(date, delta):
    m, y = (date.month+delta) % 12, date.year + ((date.month)+delta-1) // 12
    if not m: m = 12
    d = min(date.day, [31,
        29 if y%4==0 and not y%400==0 else 28,31,30,31,30,31,31,30,31,30,31][m-1])
    return date.replace(day=d,month=m, year=y)

>>> for m in range(-12, 12):
    print(monthdelta(datetime.now(), m))


2009-08-06 16:12:27.823000
2009-09-06 16:12:27.855000
2009-10-06 16:12:27.870000
2009-11-06 16:12:27.870000
2009-12-06 16:12:27.870000
2010-01-06 16:12:27.870000
2010-02-06 16:12:27.870000
2010-03-06 16:12:27.886000
2010-04-06 16:12:27.886000
2010-05-06 16:12:27.886000
2010-06-06 16:12:27.886000
2010-07-06 16:12:27.886000
2010-08-06 16:12:27.901000
2010-09-06 16:12:27.901000
2010-10-06 16:12:27.901000
2010-11-06 16:12:27.901000
2010-12-06 16:12:27.901000
2011-01-06 16:12:27.917000
2011-02-06 16:12:27.917000
2011-03-06 16:12:27.917000
2011-04-06 16:12:27.917000
2011-05-06 16:12:27.917000
2011-06-06 16:12:27.933000
2011-07-06 16:12:27.933000
>>> monthdelta(datetime(2010,3,30), -1)
datetime.datetime(2010, 2, 28, 0, 0)
>>> monthdelta(datetime(2008,3,30), -1)
datetime.datetime(2008, 2, 29, 0, 0)
"
Numpy data points region/circle,"a=np.array([1,2,3,4,5])
b=np.array([6,7,8,9,10])
c=[np.complex(x,y) for x,y in zip(a,b)] 

for x in c:
    c[np.abs(c-x)<5]
"
How to calculate the value of the sum of squares defined as 1^2 + 2^2 + 3^2 + ... +n2 until a user specified sum has been reached,"while True:
    x = x + 1
    y = x ** 2
    total = total + y
    if total >= n:
        break
print(total)
"
Pyparsing strings where the order is unknown and some items may be missing,"from pyparsing import *

def marker(key):
    return Combine(CaselessLiteral(key) + Word(nums))

pat    = marker(""a"")
visit  = marker(""r"")
clone  = marker(""clone"")
primer = marker(""ba"") | marker(""primer"")
sep    = oneOf(""- _"").suppress()
other  = Word(alphanums + "":"")

file_ext = Literal(""."").suppress() + Word(alphanums)
EOL    = LineEnd().suppress()

tokens = [pat(""pat""),
          visit(""visit""),
          clone(""clone""),
          primer(""primer""),
          sep,other]
grammar = OneOrMore(MatchFirst(tokens)) + file_ext + EOL
"
for loop returning unexpected values when squaring values,">>> for index, val in enumerate(b): # enumerate yields an (index, value) tuple which gets unpacked.
        print '{0} : {1}*{1} = {2}'.format(index, val, val**2)


0 : 1*1 = 1
1 : 3*3 = 9
2 : -4*-4 = 16
3 : 5*5 = 25
4 : 5*5 = 25
5 : 3*3 = 9
6 : 2*2 = 4
7 : 1*1 = 1
8 : 4*4 = 16
9 : 8*8 = 64
10 : 9*9 = 81
"
How do I store a value entered on a Tk entry widget in a variable,"from Tkinter import *
import tkMessageBox

app = Tk()
# Message Window

def messagePop():
    get_data()
    tkMessageBox.showinfo('Results', '100% Very Good')

# Background colour

app.configure(bg='cornflower blue')

COLORS  =['snow', 'ghost white', 'white smoke', 'gainsboro', 'floral white', 'old lace',
    'linen', 'antique white', 'papaya whip', 'blanched almond', 'bisque', 'peach puff',
    'navajo white', 'lemon chiffon', 'mint cream', 'azure', 'alice blue', 'lavender',
    'lavender blush', 'misty rose', 'dark slate gray', 'dim gray', 'slate gray',
    'light slate gray', 'gray', 'light grey', 'midnight blue', 'navy', 'cornflower blue', 'dark slate blue',
    'slate blue', 'medium slate blue', 'light slate blue', 'medium blue', 'royal blue',  'blue',
    'dodger blue', 'deep sky blue', 'sky blue', 'light sky blue', 'steel blue', 'light steel blue',
    'light blue', 'powder blue', 'pale turquoise', 'dark turquoise', 'medium turquoise', 'turquoise',
    'cyan', 'light cyan', 'cadet blue', 'medium aquamarine', 'aquamarine', 'dark green', 'dark olive green',
    'dark sea green', 'sea green', 'medium sea green', 'light sea green', 'pale green', 'spring green',
    'lawn green', 'medium spring green', 'green yellow', 'lime green', 'yellow green',
    'forest green', 'olive drab', 'dark khaki', 'khaki', 'pale goldenrod', 'light goldenrod yellow',
    'light yellow', 'yellow', 'gold', 'light goldenrod', 'goldenrod', 'dark goldenrod', 'rosy brown',
    'indian red', 'saddle brown', 'sandy brown',
    'dark salmon', 'salmon', 'light salmon', 'orange', 'dark orange',
    'coral', 'light coral', 'tomato', 'orange red', 'red', 'hot pink', 'deep pink', 'pink', 'light pink',
    'pale violet red', 'maroon', 'medium violet red', 'violet red',
    'medium orchid', 'dark orchid', 'dark violet', 'blue violet', 'purple', 'medium purple',
    'thistle', 'snow2', 'snow3',
    'snow4', 'seashell2', 'seashell3', 'seashell4', 'AntiqueWhite1', 'AntiqueWhite2',
    'AntiqueWhite3', 'AntiqueWhite4', 'bisque2', 'bisque3', 'bisque4', 'PeachPuff2',
    'PeachPuff3', 'PeachPuff4', 'NavajoWhite2', 'NavajoWhite3', 'NavajoWhite4',
    'LemonChiffon2', 'LemonChiffon3', 'LemonChiffon4', 'cornsilk2', 'cornsilk3',
    'cornsilk4', 'ivory2', 'ivory3', 'ivory4', 'honeydew2', 'honeydew3', 'honeydew4',
    'LavenderBlush2', 'LavenderBlush3', 'LavenderBlush4', 'MistyRose2', 'MistyRose3',
    'MistyRose4', 'azure2', 'azure3', 'azure4', 'SlateBlue1', 'SlateBlue2', 'SlateBlue3',
    'SlateBlue4', 'RoyalBlue1', 'RoyalBlue2', 'RoyalBlue3', 'RoyalBlue4', 'blue2', 'blue4',
    'DodgerBlue2', 'DodgerBlue3', 'DodgerBlue4', 'SteelBlue1', 'SteelBlue2',
    'SteelBlue3', 'SteelBlue4', 'DeepSkyBlue2', 'DeepSkyBlue3', 'DeepSkyBlue4',
    'SkyBlue1', 'SkyBlue2', 'SkyBlue3', 'SkyBlue4', 'LightSkyBlue1', 'LightSkyBlue2',
    'LightSkyBlue3', 'LightSkyBlue4', 'SlateGray1', 'SlateGray2', 'SlateGray3',
    'SlateGray4', 'LightSteelBlue1', 'LightSteelBlue2', 'LightSteelBlue3',
    'LightSteelBlue4', 'LightBlue1', 'LightBlue2', 'LightBlue3', 'LightBlue4',
    'LightCyan2', 'LightCyan3', 'LightCyan4', 'PaleTurquoise1', 'PaleTurquoise2',
    'PaleTurquoise3', 'PaleTurquoise4', 'CadetBlue1', 'CadetBlue2', 'CadetBlue3',
    'CadetBlue4', 'turquoise1', 'turquoise2', 'turquoise3', 'turquoise4', 'cyan2', 'cyan3',
    'cyan4', 'DarkSlateGray1', 'DarkSlateGray2', 'DarkSlateGray3', 'DarkSlateGray4',
    'aquamarine2', 'aquamarine4', 'DarkSeaGreen1', 'DarkSeaGreen2', 'DarkSeaGreen3',
    'DarkSeaGreen4', 'SeaGreen1', 'SeaGreen2', 'SeaGreen3', 'PaleGreen1', 'PaleGreen2',
    'PaleGreen3', 'PaleGreen4', 'SpringGreen2', 'SpringGreen3', 'SpringGreen4',
    'green2', 'green3', 'green4', 'chartreuse2', 'chartreuse3', 'chartreuse4',
    'OliveDrab1', 'OliveDrab2', 'OliveDrab4', 'DarkOliveGreen1', 'DarkOliveGreen2',
    'DarkOliveGreen3', 'DarkOliveGreen4', 'khaki1', 'khaki2', 'khaki3', 'khaki4',
    'LightGoldenrod1', 'LightGoldenrod2', 'LightGoldenrod3', 'LightGoldenrod4',
    'LightYellow2', 'LightYellow3', 'LightYellow4', 'yellow2', 'yellow3', 'yellow4',
    'gold2', 'gold3', 'gold4', 'goldenrod1', 'goldenrod2', 'goldenrod3', 'goldenrod4',
    'DarkGoldenrod1', 'DarkGoldenrod2', 'DarkGoldenrod3', 'DarkGoldenrod4',
    'RosyBrown1', 'RosyBrown2', 'RosyBrown3', 'RosyBrown4', 'IndianRed1', 'IndianRed2',
    'IndianRed3', 'IndianRed4', 'sienna1', 'sienna2', 'sienna3', 'sienna4', 'burlywood1',
    'burlywood2', 'burlywood3', 'burlywood4', 'wheat1', 'wheat2', 'wheat3', 'wheat4', 'tan1',
    'tan2', 'tan4', 'chocolate1', 'chocolate2', 'chocolate3', 'firebrick1', 'firebrick2',
    'firebrick3', 'firebrick4', 'brown1', 'brown2', 'brown3', 'brown4', 'salmon1', 'salmon2',
    'salmon3', 'salmon4', 'LightSalmon2', 'LightSalmon3', 'LightSalmon4', 'orange2',
    'orange3', 'orange4', 'DarkOrange1', 'DarkOrange2', 'DarkOrange3', 'DarkOrange4',
    'coral1', 'coral2', 'coral3', 'coral4', 'tomato2', 'tomato3', 'tomato4', 'OrangeRed2',
    'OrangeRed3', 'OrangeRed4', 'red2', 'red3', 'red4', 'DeepPink2', 'DeepPink3', 'DeepPink4',
    'HotPink1', 'HotPink2', 'HotPink3', 'HotPink4', 'pink1', 'pink2', 'pink3', 'pink4',
    'LightPink1', 'LightPink2', 'LightPink3', 'LightPink4', 'PaleVioletRed1',
    'PaleVioletRed2', 'PaleVioletRed3', 'PaleVioletRed4', 'maroon1', 'maroon2',
    'maroon3', 'maroon4', 'VioletRed1', 'VioletRed2', 'VioletRed3', 'VioletRed4',
    'magenta2', 'magenta3', 'magenta4', 'orchid1', 'orchid2', 'orchid3', 'orchid4', 'plum1',
    'plum2', 'plum3', 'plum4', 'MediumOrchid1', 'MediumOrchid2', 'MediumOrchid3',
    'MediumOrchid4', 'DarkOrchid1', 'DarkOrchid2', 'DarkOrchid3', 'DarkOrchid4',
    'purple1', 'purple2', 'purple3', 'purple4', 'MediumPurple1', 'MediumPurple2',
    'MediumPurple3', 'MediumPurple4', 'thistle1', 'thistle2', 'thistle3', 'thistle4',
    'gray1', 'gray2', 'gray3', 'gray4', 'gray5', 'gray6', 'gray7', 'gray8', 'gray9', 'gray10',
    'gray11', 'gray12', 'gray13', 'gray14', 'gray15', 'gray16', 'gray17', 'gray18', 'gray19',
    'gray20', 'gray21', 'gray22', 'gray23', 'gray24', 'gray25', 'gray26', 'gray27', 'gray28',
    'gray29', 'gray30', 'gray31', 'gray32', 'gray33', 'gray34', 'gray35', 'gray36', 'gray37',
    'gray38', 'gray39', 'gray40', 'gray42', 'gray43', 'gray44', 'gray45', 'gray46', 'gray47',
    'gray48', 'gray49', 'gray50', 'gray51', 'gray52', 'gray53', 'gray54', 'gray55', 'gray56',
    'gray57', 'gray58', 'gray59', 'gray60', 'gray61', 'gray62', 'gray63', 'gray64', 'gray65',
    'gray66', 'gray67', 'gray68', 'gray69', 'gray70', 'gray71', 'gray72', 'gray73', 'gray74',
    'gray75', 'gray76', 'gray77', 'gray78', 'gray79', 'gray80', 'gray81', 'gray82', 'gray83',
    'gray84', 'gray85', 'gray86', 'gray87', 'gray88', 'gray89', 'gray90', 'gray91', 'gray92',
    'gray93', 'gray94', 'gray95', 'gray97', 'gray98', 'gray99']

# The position and size relative to the screen
app.geometry('500x500+450+140')

# The title of the program
app.title('Maths4Primary')

# The icon
app.wm_iconbitmap('MathIcon.ico')

# Object positioning in the program
# def GridPos:

# I might use the place() method for the screen layout.
Label(app, text=""Put these prices in order"", bg=""gold"", fg=""blue"").place(x=100,y=20)
Label(app, text= u""\xA3"" + ""20.50"", bg=""gold"", fg=""blue"").place(x=20,y=50)
Label(app, text=""Question 3"", bg=""gold"", fg=""blue"").place(x=20,y=120)

# Entry
def get_data():
    x_data = x.get()
    y_data = y.get()
    z_data = z.get()
    print ""x_data = {0} , y_data = {1} , z_data = {2}"".format(x_data,y_data,z_data)

x = Entry(app)
y = Entry(app)
z = Entry(app)

x.place(x=150,y=60)
y.place(x=150,y=80)
z.place(x=150,y=100)

# Buttons
B1 = Button(app,text='Marks',bg='gold',fg='blue', command = messagePop ).place(x=425,y=450)

app.mainloop()
"
How to evaluate arbitrary code in Python?,"s = """"""
for i in range(5):
    print(i)
""""""
exec s
"
How to find out two lists with same structure in python?,"if len(a) == len(b):
    for i in range(len(a)):
        if not same_structure(a[i], b[i]):
            return False
    return True
else:
    return False
"
Python regex to remove all words which contains number,">>> re.sub(r'\w*\d\w*', '', words).strip()
'ABCD abcd'
"
Create nested JSON from CSV,"output = {'persons': []}
with open('my_csv.csv') as csv_file:
    for person in csv.DictReader(csv_file):
        output['persons'].append({
            'type': 'config.profile',
            'id': person['id'],
            # ...add other fields (email etc) here...
        })

        # ...do similar for config.pictures, config.status, etc...

output_json = json.dumps(output)
"
Print out the whole directory tree,"import os 
def Test1(rootDir): 
    list_dirs = os.walk(rootDir) 
    for root, dirs, files in list_dirs: 
        for d in dirs: 
            print os.path.join(root, d)      
        for f in files: 
            print os.path.join(root, f) 
"
"in numpy, delete a row where an entry in a column cannot be converted to a float","In [9]:

A=np.genfromtxt('temp.txt')
A
Out[9]:
array([[  1.,   2.,   3.,   4.,   5.,   6.],
       [  1.,   2.,   3.,   4.,   5.,   6.],
       [  1.,   2.,   3.,   4.,   5.,  nan],
       [  1.,   2.,   3.,   4.,   5.,   6.],
       [  1.,   2.,   3.,   4.,   5.,   6.],
       [  1.,   2.,   3.,   4.,   5.,  nan],
       [  1.,   2.,   3.,   4.,   5.,   6.],
       [  1.,   2.,   3.,   4.,   5.,   6.]])
In [10]:

np.isfinite(A).all(1) #only TRUE when all the cells in the row are valid number
Out[10]:
array([ True,  True, False,  True,  True, False,  True,  True], dtype=bool)
In [11]:

A[np.isfinite(A).all(1)]
Out[11]:
array([[ 1.,  2.,  3.,  4.,  5.,  6.],
       [ 1.,  2.,  3.,  4.,  5.,  6.],
       [ 1.,  2.,  3.,  4.,  5.,  6.],
       [ 1.,  2.,  3.,  4.,  5.,  6.],
       [ 1.,  2.,  3.,  4.,  5.,  6.],
       [ 1.,  2.,  3.,  4.,  5.,  6.]])
"
Python: Sub sequence search,"char_generator = (pair for pair in enumerate(sequence) if pair[1] in subsequence)
for combo in itertools.combinations(char_generator, len(subsequence)):
    if all(pair[1]==char for pair,char in zip(combo,subsequence)):
        print([pair[0] for pair in combo])
"
Python system resources enumeration,"import os
import re
def meminfo():

    with os.popen('free -m') as f:
        output = f.read()

    fields = re.search(r'Mem\:\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)',
            output,re.M).group
    return dict(total=fields(1),used=fields(2),free=fields(3),
            shared=fields(4),buffers=fields(5),cached=fields(6))

print meminfo()
"
Python dictionary: Get list of values for list of keys,[mydict[x] for x in mykeys]
Remove all occurrences of a value from a Python list,">>> list(filter((2).__ne__, x))
[1, 3, 3, 4]
"
Inserting binary notation of numbers in python list,"x  = []
x.append('{:04b}'.format(10))
print(x)
x.append('{:04b}'.format(2))
print(x)
"
Python: Recursion: Passing some value down through the calls,"def recur(n, ds=None):
    if ds is None: ds = {}
    x=do_foo(n)
    if foo(n):
        ds[n] = recur(x, ds)
    else:
        return x
"
Python - unpack struct into multiple tuples,"def unpack_formats2(fmts, data):
    result = []
    i = 0
    for fmt in fmts:
        size = struct.calcsize(fmt)
        j = i+size
        result.append(struct.unpack(fmt, data[i:j]))
        i = j
    return result

In [80]: %timeit unpack_formats(fmts, data)
100000 loops, best of 3: 3.51 us per loop

In [81]: %timeit unpack_formats2(fmts, data)
1000000 loops, best of 3: 1.61 us per loop
"
Keep Track of Number of Bytes Read,"bytesread = 0
while True:
  line = fh.readline()
  if line == '':
    break
  bytesread += len(line)
"
how do i print to a a CSV file from different inputs in python,">>> writer = csv.DictWriter(f, fieldnames=player.keys())
>>> writer.writeheader()
>>> writer.writerow(player)
"
new dictionary from existing dictionary values,">>> firstDictionary = {""firstKey"" : ""A"", ""secondKey"" : ""B""}
>>> secondDictionary = {""firstKey"" : 3, ""secondKey"" : 47}
>>> emptyDictionary = {value : secondDictionary.get(key, None) for key, value in firstDictionary.items()}
>>> print emptyDictionary
{'A': 3, 'B': 47}
"
Add Integer into existing list,">>> a.append(str(b))
>>> a
['2345', '435']
"
Dot product vectorization - NumPy,"xc = x-c
b_out = ((xc.dot(A))*xc).sum(1) <= 1
"
How do you check in which module a function is defined? Python,">>> from math import sqrt
>>> sqrt.__module__
'math'
"
cannot extract item element from xml,"import urllib
from xml.etree import ElementTree


class News():

    base_url = 'http://finance.yahoo.com/rss/headline?s='
    query = 'goog'

    url = base_url + query
    response = urllib.urlopen(url)
    data = response.read()

    dom = ElementTree.fromstring(data)
    items = dom.findall('channel/item')


    for item in items:
        print(item.find('title').text)
"
Webscrapping using beautiful soup giving multiple results,"phonenum=soup.select("".phone-content"")
# set comprehension will remove the duplicate phone numbers
unique_phonenum = {p.text.strip().encode(""utf-8"") for p in phonenum}

for a in unique_phonenum:
    print a
"
Replace index in list,"for i in range(0,n):
    j = i / 3
    k = i % 3
    lists[i][j][k] = 2
"
Python - how to write strings to file without quotes and spaces?,"lst = ['blabla', 10, 'something']
# Open the file with a context manager
with open(""/path/to/file"", ""a+"") as myfile:
    # Convert all of the items in lst to strings (for str.join)
    lst = map(str, lst)  
    # Join the items together with commas                   
    line = "","".join(lst)
    # Write to the file
    myfile.write(line)
"
Printing all occurrences in a string starting with x and ending with y,"protein = '''DIMGYF*GLTGSR*VLSSGWIRAQSCTECG*SSEAGVEVRGVRQTDRHSQPARSAV*
SELQILFSFHLLSNCPELAPVAPGLVFRECPESLVSSRPREESPAAQALLTAAESSGTHAPAGGSRRAAAAA
KNFPGWEDRRQVAESRSQLLQAFPAS*ASPRR*RPEGGGEPRKRRRTCAQLRSHRLLNLGEREPRLPGAPSP
*QRRRGQVVGVRAAKTRRRPATAGSALIRSAGRAAALGSEFACGLRGTAAHEERSVSDRDFSKPGSARESTS
KSAGGILINPALPGASW*GGRSGDDSQRVRALLEKLSLSKAPGGAGVPRLPQPCCGPETCARSPN*PHVK*
RTVL*LQRWKRPSMTMPSTPRSSRPRADLMATVTPRS*'''

#Get rid of newlines
protein = protein.replace('\n', '')

print(""5'3' Frame 1:\n{0}\n"".format(protein))

maxloop = len(protein)
n = 0
while n < maxloop:
    met = protein.find(""M"", n)
    if met == -1:
        break

    stop = protein.find(""*"", met)
    if stop == -1:
        print('Error: no * found for frame starting at residue', met + 1)
        break

    orf = protein[met:stop]
    print(""Open reading frame starting at residue"", met + 1, "":"", orf)

    n = stop + 1
"
How to group buttons in pyQT,"import sys

lower_argv = [s.lower() for s in sys.argv]
if 'pyside' in lower_argv:
    from PySide import QtCore, QtGui
    QtCore.pyqtSignal = QtCore.Signal
    QtCore.pyqtSlot = QtCore.Slot
    print 'Using PySide'
else:
    from PyQt4 import QtCore, QtGui
    print 'Using PyQt4'

class MyButtonGroup(QtCore.QObject):
    trigger = QtCore.pyqtSignal((),(bool,))

    def addButton(self, button):
        button.clicked.connect(self.trigger.emit)

    def removeButton(self, button):
        button.clicked.disconnect(self.trigger.emit)


class MyWindow(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self, None)

        self.group = MyButtonGroup()
        button1 = QtGui.QPushButton(""button1"")
        button2 = QtGui.QPushButton(""button2"")
        self.group.addButton(button1)
        self.group.addButton(button2)
        self.group.trigger.connect(self.do_something)

        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(button1)
        layout.addWidget(button2)

    def do_something(self, x=False):
        print 'hello'


if __name__ == '__main__':
    app = QtGui.QApplication([])
    window = MyWindow()
    window.show()
    app.exec_()
"
wxPython menu text alignment,"menu = wx.Menu()
item_id = 1

# Ctrl+T is bound to the keybinding
accelerator_table = wx.AcceleratorTable([(wx.ACCEL_CTRL, ord('T'), item_id)])
self.setAcceleratorTable(accelerator_table)

# Ctrl+T is not included, but the menu item can be accessed via Alt key
item_name = '&My menu item'

help_text = 'Clicking this does something interesting.'
item = menu.Append(item_id, item_name, help_text)
"
Copy a single axis of a numpy array by index,"cpy = get(x, 1, 2).copy()
"
Computing total_seconds in Python for datetime module with true division enabled,"from __future__ import division
"
Python: appending to an array,"for <blah blah>
    num3,num1,num2,num4,num5 = data
    outfile.write('\t'.join(map(str, [num1, num2, num3, num4, num5])) + '\n')
"
Transpose Columns into 1 Column in Pandas,"df = pd.concat([df1.stack(), df2.stack(), df3.stack()], axis=1)
df.columns = ['A', 'B', 'C']
df.reset_index().rename(columns={'level_1': 'Year'})


  Country  Year  A   B   C
0     AFG  2012  1   2   3
1     AFG  2013  4   8  12
2     AFG  2014  7  14  21
3     AGO  2012  2   4   6
4     AGO  2013  5  10  15
5     AGO  2014  8  16  24
6     ALF  2012  3   6   9
7     ALF  2013  6  12  18
8     ALF  2014  9  18  27
"
How to generate these vectors quickly in Python?,"def gen(n, k):
    for x in itertools.combinations(range(n), k):
        for y in itertools.product([-1,1], repeat=k):
            zero = [0] * n
            for a, b in zip(x, y):
                zero[a] = b
            yield zero
"
Python: How to create a function? e.g. f(x) = ax^2,"In [3]: def f(x):
   ...:     return str(x**2) + 'a'
   ...: 

In [4]: f(3)
Out[4]: '9a'
"
how can i make a filter quality score?,"pointsTable = [
    (0, 0),
    (0.3, 1),
    (0.5, 2),
    (0.7, 2.5),
    (0.9, 3)
    ]

def calculate_quality_points(tp, tn, fp, fn):
    q = get_quality_score(tp, tn, fp, fn)
    return get_quality_points(q)

def get_quality_score(tp, tn, fp, fn):
    return float(tp + tn) / (tp + tn + 10 * fp + fn)

def get_quality_points(q):
    i = 0
    if q < 0 or q > 1:
        return -1
    for i in range(len(pointsTable) - 1):
        if q >= pointsTable[i][0] and q < pointsTable[i + 1][0]:
            return pointsTable[i][1]
    return pointsTable[len(pointsTable) - 1][1]
"
Remove string between 2 characters from text string,"re.sub('\\[.*?\\]', '', 'abcd[e]yth[ac]ytwec')"
pygame circle not changing,"import pygame
import random
pygame.init()

circles = [
    {
        ""width"": 2,
        ""filled"": False,
        ""position"": [250, 230]
    }, {
        ""width"": 2,
        ""filled"": False,
        ""position"": [250, 260]
    }, {
        ""width"": 2,
        ""filled"": False,
        ""position"": [250, 290]
    }, {
        ""width"": 2,
        ""filled"": False,
        ""position"": [250, 320]
    },
]

size = [720, 575] 
screen = pygame.display.set_mode(size)

done = False
clock = pygame.time.Clock()
while not done:
    clock.tick(30)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
             done = True

        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            x, y = event.pos

            for circle in circles:
                # Check if mouse was over it
                if circle[""bounding box""].collidepoint(x, y):
                    # Lets the circle draw
                    circle[""filled""] = True
                    circle[""width""] = 0

                    for othercircle in circles:
                        if othercircle is not circle:
                            othercircle[""filled""] = False
                            othercircle[""width""] = 2

                    if circle[""filled""] == True:
                        circle[""bounding box""] = pygame.draw.circle(screen, pygame.Color(""black""), circle[""position""], 7, circle[""width""])

    # Cleans the screen and sets the screen background
    screen.fill(pygame.Color(3, 255, 3))
    # Circles
    for circle in circles:
        circle[""bounding box""] = pygame.draw.circle(screen, pygame.Color(""black""), circle[""position""], 7, circle[""width""])
    # Update the screen
    pygame.display.flip()
"
Grouping python list into timeslots of 3 hours,"from pprint import pprint
result = {}
for current_dict in d:
    for key in current_dict:
        slots = {}
        for item in current_dict[key]:
            slots.setdefault(item.hour/3+1, [])
            slots[item.hour/3+1].append(item)
        result[key] = slots
pprint(result)
"
Python social auth partial pipeline resume after form submit button,"@partial
def twitter_email(backend, user, response, is_new=None,  *args, **kwargs):
     ...
     submit_social_data = backend.strategy.session.get('submit_social_data', None)
     if is_new and not submit_social_data:
                return redirect('redirect_url')
"
Python splitting list based on missing numbers in a sequence,">>> # Find runs of consecutive numbers using groupby.  The key to the solution
>>> # is differencing with a range so that consecutive numbers all appear in
>>> # same group.
>>> data = [ 1,  4,5,6, 10, 15,16,17,18, 22, 25,26,27,28]
>>> for k, g in groupby(enumerate(data), lambda (i,x):i-x):
...     print map(itemgetter(1), g)
...
[1]
[4, 5, 6]
[10]
[15, 16, 17, 18]
[22]
[25, 26, 27, 28]
"
Python Random Random,"if Airplane == 1:
while ....
"
Catching changes to a mutable attribute in python,"class Container(object):
    def __init__(self, data):
        self.data = data

    def __setattr__(self, name, value):
        if not hasattr(self, name) or getattr(self, name) != value:
            self.on_change()
        super(Container, self).__setattr__(name, value)

    def on_change(self):
        pass

class SomeClass(object):
    def __init__(self, attr):
        self._attr = attr
        self._attr.on_change = self._on_change

    @property
    def attr(self):
        return self._attr

    @attr.setter
    def attr(self,value):
        if self._attr != value:
            self._on_change()
        self._attr = value

    def _on_change(self):
        print ""Do some code here every time attr changes""
"
getting rid of some elements that contain just white space in a list,"In [36]: str.strip?
Type:       method_descriptor
String Form:<method 'strip' of 'str' objects>
Namespace:  Python builtin
Docstring:
S.strip([chars]) -> string or unicode

Return a copy of the string S with leading and trailing
whitespace removed.
If chars is given and not None, remove characters in chars instead.
If chars is unicode, S will be converted to unicode before stripping
"
Fast way to increment an array with a given number,"from time import clock
li = range(500000)
start = clock()
li = [i+5 for i in li]
print ""Time taken = %.5f"" % (clock() - start)
>> Time taken = 0.06355
"
Find a strict string in a field,"import sqlite3
import re

def resub(pat, sub, s):
return re.sub(pat, sub, s)

con = sqlite3.connect("":memory:"")
con.create_function(""resub"", 3, resub)
cur = con.cursor()
cur.execute(""select resub('[,!?]',' ', 'O Romeo, Romeo, wherefore art thou Romeo?')"")
print cur.fetchone()[0]
"
Python Object via Function,"def make_adder(x):
    def adder(y):
        return x + y
    return adder
"
"Duck-typable classes, ABC, iheritance, __new__","## [ . . . ]

class RandomSrc(BaseSource):
    def get(self):
        return random.random()

def create_source(choice):
    if choice == 0:
        return ManualSrc()
    elif choice == 1:
        return RandomSrc()
    else:
        raise ValueError('source choice parameter {} not valid'.format(choice))

if __name__ == '__main__':
    for use_src in range(4):
        print 'using source choice {}'.format(use_src)
        src = create_source(use_src)
        print src.get()
"
calculating average in python?,"child = int(input(""How many children do you have?""))
count = 1
total = 0
if child > 100:
    print(""Invalid!"")
else:
    while count <= child:
        n = int(input(""Enter child #%s"" %str(count)+ "" age:""))
        count += 1
        total += n

print(""Average age:"", total/child)
"
Convert from OrderedDict to list,">>> from collections import OrderedDict
>>> dct = OrderedDict([(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')])
>>> dct.items()
[(73, 'Mocha My Day'), (77, 'Coffee Cafe'), (83, 'Flavour Fusion'), (85, 'Mexican Grill')]
>>>
"
Python3 search value in this array,"from collections import Counter

values = Counter([(entry[1], entry[4]) for entry in long_array])
for value, count in values.items():
    if count > 1:
        print(str(count) + "" duplicates of "" + str(value))
"
Convert a string to a list of length one,"def f(maybe_list):
    if not isinstance(maybe_list, list):
        maybe_list = [maybe_list]
    # carry on, you have a list.
"
How to return parameters from all iterations of spicy.optimize.minimize,"def save_step(k):
    global steps
    steps.append(k)

steps = []
scipy.optimize.fmin(rosen, x0, full_output=True, callback=save_step)
print np.array(steps)[:10]
"
"What is the pythonic way to sort a list with multiple attributes, such that the first is sorted reversely but the second is not?",">>> l = [ ['a','b'], ['x','y'], ['a','y'], ['x', 'b'] ]
>>> sorted(sorted(l, key=lambda x: x[1]), key=lambda x: x[0], reverse=True)
[['x', 'b'], ['x', 'y'], ['a', 'b'], ['a', 'y']]
"
Is there a way to create argument in python's argparse that returns true in case no values given,"parser = argparse.ArgumentParser()
parser.add_argument('--resize', nargs='?', const=True)
"
"Format date like: Monday, 1st March","my_date.strftime('%A, %d %B')
"
Pythonic way to concatenate regex objects,"# create patterns here...
re_first = re.compile(...)
re_second = re.compile(...)
re_third = re.compile(...)

# create a list with them
regexes = [re_first, re_second, re_third]

# create the combined one
pattern_combined = '|'.join(x.pattern for x in regexes)
"
Get hours difference from UTC to given timezone with Python,"In [137]: ams.utcoffset(datetime.datetime(2012,1,1))
Out[137]: datetime.timedelta(0, 3600)

In [138]: pst.utcoffset(datetime.datetime(2012,1,1))
Out[138]: datetime.timedelta(-1, 57600)
"
Python 2.7: Passing class methods to another function,"class Geometry(object):
    uniqueID = -1
    def __init__(self):
        Geometry.uniqueID += 1
        self.id = Geometry.uniqueID

class Point(Geometry):
    def __init__(self, x, y):
        Geometry.__init__(self)
        self.x = x
        self.y = y

    def __str__(self):
        return '(%.2f, %.2f)' % (int(self.x*100)/100.0, int(self.y*100)/100.0)


    def __eq__(self, point):
        if type(point) is Point:
            if self.x == point.x and self.y == point.y:
                return True
            else:
                return False
        else:
            raise Exception(""The input parameter has to be a Point object!"")

    def identify(self, other):
        if type(other) is Point:
            if self.id == other.id:
                return True
            else:
                return False
        else:
            raise Exception(""The input parameter has to be a Point object!"")

    def distance(self, other):
        if type(other) is Point:
            x_square = (other.x - self.x) ** 2
            y_square = (other.y - self.y) ** 2
            d = (x_square + y_square) ** 0.5
            return float(d)
        else:
            raise Exception(""The input parameter has to be a Point object!"")

    def quadrant(self):
        output = """"
        if self.x > 0 and self.y > 0:
            output = ""Quad I""
        elif self.x < 0 and self.y > 0:
            output = ""Quad II""
        elif self.x < 0 and self.y < 0:
            output = ""Quad III""
        elif self.x > 0 and self.y < 0:
            output = ""Quad IV""
        elif self.x == 0:
            output = ""Y-axis""
        elif self.y == 0:
            output = ""X-axis""
        elif self.x == 0 and self.y == 0:
            output = ""Origin""

        return output

def test():

    p1 = Point(0, 3)
    p2 = Point(-3, 7)
    p3 = Point(-3, 7)

    return p1, p2, p3




def collinear(p1, p2, p3):
    p1x = p1.x
    p1y = p1.y

# m1 = ?
# m2 = ?


if __name__ == ""__main__"":

    p1, p2, p3= test()

    #Either this 
    print ""p1 is "" + p1.__str__()
    print ""p2 is "" + p2.__str__()
    print ""p3 is "" + p3.__str__()

    print ""\n*******************\n""

    #Or this
    print p1
    print p2
    print p3
"
How to translate the cast of a memory address in C into python ctypes call?,"from ctypes import *
libc = cdll.msvcrt

buf = create_string_buffer(256) 
buf_u = create_unicode_buffer(256)

libc.scanf(b""%s"",  buf)
libc.wscanf(""%s"",  buf_u)

print(buf.value)
print(buf_u.value)
"
Plotted arc: anomaly in the plot,"x = np.linspace(-np.pi/4, np.pi/4, round(np.pi / 2 / 0.001) + 1)
"
Search & replace a substring in python,"import re
def repl(matchobj):
    global counter
    counter = counter+1
    if counter == 2: 
        return '{replace-string}' 
    else: 
        return matchobj.group(0)

counter = 0
line = ""$lang['MY_KEY'] = '{search-string} wird in Analyse {search-string} bercksichtigt'"";
print re.sub(r'{.*?}',repl,line)
"
How to remove escape sequence like '\xe2' or '\x0c' in python,"re.sub(r'[\x00-\x08\x0b\x0c\x0e-\x1f\x7f-\xff]', '', text)
"
I do not understand Python raw string,">>> hello = r'\n'
>>> hello
'\\n'
>>> len(hello)
2
>>> list(hello)
['\\', 'n']
"
Python: printing elements from a list till a specific element,"for abc in list_of_lists:
    for s in takewhile(lambda x: x.count("" "") < 3, abc):
        print s
"
possible to set variable with multiple if statments?,">>> testmapping = {'dog': 1, 'cat': 2, ' ': 0}
>>> testmapping[x]
2
"
Refer to dictionary element in 'for' loop,"for dict_elem in map(operator.itemgetter('a'), dict_lst):
    print dict_elem
"
Can I dump blank instead of null in yaml/pyyaml?,"import sys
import yaml

from yaml.representer import Representer
from yaml.dumper import Dumper
from yaml.emitter import Emitter
from yaml.serializer import Serializer
from yaml.resolver import Resolver


yaml_str = """"""\
attrs:
  first:
  second: value2
""""""

class MyRepresenter(Representer):
    def represent_none(self, data):
        return self.represent_scalar(u'tag:yaml.org,2002:null',
                                 u'')

class MyDumper(Emitter, Serializer, MyRepresenter, Resolver):
    def __init__(self, stream,
            default_style=None, default_flow_style=None,
            canonical=None, indent=None, width=None,
            allow_unicode=None, line_break=None,
            encoding=None, explicit_start=None, explicit_end=None,
            version=None, tags=None):
        Emitter.__init__(self, stream, canonical=canonical,
                indent=indent, width=width,
                allow_unicode=allow_unicode, line_break=line_break)
        Serializer.__init__(self, encoding=encoding,
                explicit_start=explicit_start, explicit_end=explicit_end,
                version=version, tags=tags)
        MyRepresenter.__init__(self, default_style=default_style,
                default_flow_style=default_flow_style)
        Resolver.__init__(self)

MyRepresenter.add_representer(type(None),
                              MyRepresenter.represent_none)

data = yaml.load(yaml_str)
yaml.dump(data, stream=sys.stdout, Dumper=MyDumper, default_flow_style=False)
"
Regex - matching all text between two strings,">>> pat = re.compile(r'(^#[0-9]{2,})\s*\n((?:[^#].*\n)*)', re.MULTILINE)
>>> for t, e in pat.findall(s):
...     print t, e.count('\n')
...
#100 3
#1299 4
#1335 6
"
Iterating over dictionaries using for loops,"for (letter, number) in list(d.items()):
    pass"
Get name of file for command line,"filename=""myFileName.something""
fileInfo=QtCore.QFileInfo(filename)
name=fileInfo.baseName()
myCommand=""rungms %s.inp 13-64 1 0 %s.out""%(name,name)
"
parse commands with regex and python,"#!/usr/bin/env python
import re

commands = ""copy move"".split()
input_string  = ""something move 11 something move 12 something 13 copy 14 15""
tokens = iter(re.split(""(%s)"" % ""|"".join(map(re.escape, commands)), input_string))
result = []
for tok in tokens:
     if tok in commands:
        args = re.findall(r""\d+"", next(tokens, """"))
        result.append((tok,) + tuple(args) + ("""",)*(2 - len(args)))
print(result)
"
Python color map but with all zero values mapped to black,"import matplotlib.pyplot as plt
import numpy as np

# make some data
a = np.random.randn(10,10)

# mask some 'bad' data, in your case you would have: data == 0
a = np.ma.masked_where(a < 0.05, a)

cmap = plt.cm.OrRd
cmap.set_bad(color='black')

plt.imshow(a, interpolation='none', cmap=cmap)
"
How to get columns as row combinations in python?,"In [67]: %timeit old(data)
1 loops, best of 3: 2.46 s per loop

In [68]: %timeit new(data1)
100 loops, best of 3: 8.33 ms per loop
"
Printing a function and its parameters as a string,"print func.func_name, args, kwargs
"
login_required doesn't work when redirecting,"from django.core.urlresolvers import reverse_lazy 

LOGIN_URL = reverse_lazy('login')
"
Python float decimal places,"In [1]: round(1.234, 2)
Out[1]: 1.23

In [2]: round(1.2, 2)
Out[2]: 1.2
"
Get the string within brackets in Python,"import re

s = ""alpha.Customer[cus_Y4o9qMEZAugtnW] ...""
m = re.search(r""\[([A-Za-z0-9_]+)\]"", s)
print m.group(1)
"
Python timedate match,"times = [
    '1434615010.27858',
    '1434615010.27858',
    ]

time_dict = {}

for time in times:
    time_dict[time] = 1

for time in time_dict.keys():
    date = datetime.fromtimestamp(float(time))
    print((str(date).split('.')[0])[:-3])
"
Python split a list into subsets based on pattern,">>> [list(v) for k,v in itertools.groupby(mylist,key=lambda x:x[:5])]
[['sub_0_a', 'sub_0_b'], ['sub_1_a', 'sub_1_b']]
"
Search and replace between two files with search phrase in first file: Python,"with open('tobefixed.txt') as f:
    data = f.read()

for search_txt, replacement_txt in Label.iteritems():
    data = data.replace(search_txt, replacement_txt)

with open('fixed.txt', 'w') as f:
    f.write(data)
"
python periodic looping idiom?,"import time
import itertools

minute = 60

for next_time in itertools.count(time.time() + minute, minute):
    doSomeWork()
    sleep_time = next_time - time.time()
    if sleep_time > 0:
        time.sleep(sleep_time)
"
Data loading using arrays in Python,"print df.groupby('UserId')['WordID'].apply(lambda x: x.tolist()).values
[[20, 30, 40] [25, 16] [56, 44, 12]]
"
Single dash for argparse long options,"    if dest is None:
        if long_option_strings:
            dest_option_string = long_option_strings[0]
        else:
            dest_option_string = option_strings[0]
"
Error in RK4 algorithm in Python,"k2 = h*f(t+0.5*h, y+0.5*k1)
"
Is there a way to explode a string using a 'pattern',"text = """"""
col-1,col-2,Path: 9876 (IGP) Local-Pref: 310000   MED: 0 Communities: 1234:6 1234:95 1234:101 1234:202 1234:500 1234:903 1234:3369 1234:8000 1234:8002 1234:16925 9876:19827 Next Hop: x.x.127.151   Originator ID: x.x.155.144 Cluster List: 0.0.29.99 0.0.29.97 0.0.26.245 0.0.2.179 ,col-4,col-5
""""""

import re

text = re.sub(r'([A-Z][A-Za-z -]+:)', r'@\1', text)
data = {}
for m in re.finditer(r'@(.+?):([^,@]+)', text):
    data[m.group(1)] = m.group(2).strip()

import pprint
pprint.pprint(data)
"
Python: Grouping into timeslots (minutes) for days of data,"def add_missing_empty_frames(g):
    last_key = None
    for key, items in g:
        if last_key:
            while (key-last_key).seconds > 30*60:
                empty_key = last_key + timedelta(minutes=30)
                yield (empty_key, [])
                last_key = empty_key
        yield (key, items)
        last_key = key

for key, items in add_missing_empty_frames(g):
    ...
"
Re-read an open file Python,"with open(...) as fin:
    fin.read()   # read first time
    fin.seek(0)  # offset of 0
    fin.read()   # read again
"
Checking if correct value is outputed Python unit test,"import unittest
import sys
import io
import logging

from unittest.mock import patch

def get_input():
    pirateInput = input(""What be ye name?! "")
    print(""Ahoy Captain"", pirateInput)

class GetInputTest(unittest.TestCase):

    @patch('builtins.input', return_value='Hook')
    def test_ValuePrints(self, sth):
      log = logging.getLogger( ""SomeTest.testSomething"" )
      saved_stdout = sys.stdout
      try:
          out = io.StringIO()
          sys.stdout = out
          get_input()
          output = out.getvalue().strip()
          log.debug(output)
          assert output == 'Ahoy Captain Hook'
      finally:
          sys.stdout = saved_stdout

if __name__ == ""__main__"":
    logging.basicConfig( stream=sys.stderr )
    logging.getLogger( ""SomeTest.testSomething"" ).setLevel( logging.DEBUG )
    unittest.main()
"
Integrate using SciPy with variable integrand members and put into meshgrid,"for i in xrange(n_pts):
    r = float(i)/float(n_pts)*r_max
"
Python - Global counter,"class IdGenerator(object):
    def __init__(self):
        self.cur_id = 1
        self.lock = threading.Lock()
    def next_id(self):
        with self.lock:
            result = self.cur_id
            self.cur_id += 1
        return result
"
How to use the count() method on a list excluding some items,"if x <= 0 or x > 9:
    continue
"
Correctly parsing string literals with python's re module,"import re

text = r'''""This is a string with an \""escaped quote\"" inside it"". While """"===r?+r:wt.test(r)?st.parseJSON(r)    :r}catch(o){}st.data(e,n,r)}else r=t}return r}function s(e){var t;for(t in e)if((""data"" '''

for match in (re.findall(r'''(?x)   # verbose mode
    (?<!\\)    # not preceded by a backslash
    ""          # a literal double-quote
    .*?        # 1-or-more characters
    (?<!\\)    # not preceded by a backslash
    ""          # a literal double-quote
    ''', text)):
    print(match)
"
Create different combination / patterns between the data of two columns of a csv file by python,"from itertools import groupby, product
import csv

output_header = [""a_id"", ""b_id"", ""var1"", ""lo"", ""up"", ""var2"", ""lo"", ""up""]

f_input = open('dataFile.csv', 'rb')
csv_input = csv.reader(f_input)
input_header = next(csv_input)

f_output = open('resultFile.csv', 'wb')
csv_output = csv.writer(f_output)
csv_output.writerow(output_header)


for k1, g1 in groupby(csv_input, key=lambda x: (x[0], x[1])):
    group1 = list(g1)

    if len(group1) > 1:
        for row in group1:
            csv_output.writerow(row + ['null'] * 3)

        p = [list(g2) for k2, g2 in groupby(group1, key=lambda x: x[2])]

        for pairs in product(*p):
            if len(pairs) > 1:
                csv_output.writerow(pairs[0] + pairs[1][2:])

f_input.close()
f_output.close()
"
Python : list of int to a function waiting for int,">>> def f(a,b,c):
        print(a,b,c)


>>> t = ['1','2','3']
>>> f(*map(int,t))
1 2 3
"
Create python map based on bash output,"o = """"""{
   Return Code: 1
   Key        : <None>
   Files      : [
     {
       Return Code: 0
       Data       : 'uname' is not recognized as an internal or external command,
 operable program or batch file.

     }
   ]
 }""""""
a = o.replace('\n', '')
import re
print re.findall('Data\s+:\s+(.+?)\}', a)[0].strip()
"
Row counting with conditional range,"total_active_cells = (cell_counts > 0).sum(0)

print(total_active_cells)
# [0 1 0 2 1 2 2 1 1 2 0 1 0 1 2 0 2 0 1 2 0 1 1]
"
"Is it possible to get all lines with raw_input(), if you don't know the number of lines?","break_word = ""q""
while True:
    text = raw_input()
    if text == break_word:
        break
    #Do some processing here
"
Django Many-to-many query fulfilling a specific condition,"from django.db.models import Q

Track.objects.filter(Q(genre__genre='Rock') | Q(genre__parent__genre='Rock')).distinct()
"
How do I create a dictionary mapping strings to sets given a list and a tuple of tuples?,"mydataset = (
        ('Amy', '1', None, '1'),
        ('Kat', None, '1', '1'),
        ('Leo', None, None, '1')
)

def states(cols, data):
    """"""
    This function receives one of the tuples with data and returns a pair
    where the first element is the name from the tuple, and the second
    element is a set with all matched states. Well, at least *I* think
    it is more readable :)
    """"""
    name = data[0]
    states = set(state for state, value in zip(cols, data) if value == '1')
    return name, states

pairs = (states(state_cols, data) for data in mydataset)
# Since dicts can receive an iterator which yields pairs where the first one
# will become a key and the second one will become the value, I just pass
# a list with all pairs to the dict constructor.
print dict(pairs)
"
Match multiple patterns in a multiline string,"#!/usr/bin/python
import re
reg4 = re.compile(r'''
        ^                     # Start of a line (due to re.MULTILINE, this may match at the start of any line)
        (?:                   # Non capturing group with multiple options, first option:
            PMID-\s           # Literal ""PMID-"" followed by a space
            (?P<pmid>[0-9]+)  # Then a string of one or more digits, group as 'pmid'
        |                     # Next option:
            TI\s{2}-\s        # ""TI"", two spaces, a hyphen and a space
            (?P<title>.*?)    # The title, a non greedy match that will capture everything up to...
            ^PG               # The characters PG at the start of a line
        |                     # Next option
            AB\s{2}-\s        # ""AB  - ""
            (?P<abstract>.*?) # The abstract, a non greedy match that will capture everything up to...
            ^AD               # ""AD"" at the start of a line
        )
        ''', re.MULTILINE | re.DOTALL | re.VERBOSE)
for i in reg4.finditer(data):
    print i.groupdict()
"
Suppressing scientific notation in pandas?,"In [5]: df = read_csv(StringIO(data),sep='\s+')

In [6]: df
Out[6]: 
           id     value
id       1.00 -0.422000
value   -0.42  1.000000
percent -0.72  0.100000
played   0.03 -0.043500
money   -0.22  0.337000
other     NaN       NaN
sy      -0.03  0.000219
sz      -0.33  0.383000
"
Scatter plot and Color mapping in Python,"import numpy as np
import matplotlib.pyplot as plt

x = np.arange(100)
y = x
t = x
plt.scatter(x, y, c=t)
plt.show()
"
remove empty numpy array,"In [47]: np.delete(new_array,[0,3])
Out[47]: 
array([array([[ 1.,  1.,  1.],
       [ 1.,  1.,  1.]]),
       array([[ 0.,  0.,  0.,  0.]])], dtype=object)
"
How to find bin edges of given bin number returned by scipy.stats.binned_statistic_dd()?,"import itertools as IT
import numpy as np
import scipy.stats as stats

sample = np.array(list(IT.product(np.arange(5)-0.5, 
                                  np.arange(5)*10-5, 
                                  np.arange(5)*100-50)))
bins = [np.arange(4),
        np.arange(4)*10,
        np.arange(4)*100]

statistic, bin_edges, binnumber = stats.binned_statistic_dd(
    sample=sample, values=sample, statistic='count', 
    bins=bins, 
    range=[(0,100)]*3)

bin_edges = [np.r_[-np.inf, edge, np.inf] for edge in bin_edges]
edge_index = np.unravel_index(binnumber, [len(edge)-1 for edge in bin_edges])


for samp, idx in zip(sample, zip(*edge_index)):
    vert = [edge[i] for i, edge in zip(idx, bin_edges)]
    print('{} goes in bin with left-most corner: {}'.format(samp, vert))
"
clear and comprehensible way to calculate the string [12:3],"numbers = [int(x) for x in s.strip('[]').split(':')]
print numbers[0] - numbers[1]
"
Python 2.x - creating static instance of class in same class,"class MetaEnum(type):
    def __new__(cls, class_name, parents, attrs):
        def __init__(self, name=None):
            if name is not None: self.name = name
        attrs['__init__'] = __init__
        Klass = type.__new__(cls, class_name, parents, attrs)
        if 'instances' in attrs:
            for name in attrs['instances']:
                setattr(Klass, name.capitalize(), Klass(name))
            del Klass.instances # clean up
        return Klass

class Fruit(object):
    __metaclass__ = MetaEnum
    instances = ('apple', 'banana', 'cranberry')

for attr_name in dir(Fruit):
    if not attr_name.startswith('_'):
        attr = getattr(Fruit, attr_name)
        if type(attr) is Fruit:
            print('Fruit.{}, is a Fruit named {}'.format(attr_name, getattr(attr, 'name')))
        else:
            print('Fruit.{}, is a {}'.format(attr, type(attr)))
"
How to pass object as commandline argument in python?,"# server.py
from taskit.backend import BackEnd

def my_function(a, b):
    return a * b

backend = BackEnd(dict(my_function=my_function))
backend.main()


# client.py
from taskit.frontend import FrontEnd

backend_addr = '127.0.0.1'
frontend = FrontEnd([backend_addr])
print frontend.work('my_function', 4, 5)
"
List of dictionaries - tracking words frequency per file,"from collections import Counter

files = dict() # this may be better as a list, tbh

table = str.maketrans('','',string.punctuation)

for file in glob.glob(""*.txt""):
    with open(file) as f:
        word_count = Counter()
        for line in f:
            word_count += Counter([word.lower() for word in line.translate(table) if
                                  word not in noise_words_set])
    files[file] = word_count # if list: files.append(word_count)
"
"Python One-Shot, level-trigger, edge-trigger","class EdgeTrigger(object):
    def __init__(self, callback):
        self.value = None
        self.callback = callback

    def __call__(self, value):
        if value != self.value:
            self.callback(self.value, value)
        self.value = value
"
python yahoo finance format,"rows = ['Date,Open,High,Low,Close,Volume,Adj Close', '2012-11-30,691.31,699.22,685.69,698.37,3163600,698.37', '2012-11-29,687.78,693.90,682.00,691.89,2776500,691.89','2012-11-28,668.01,684.91,663.89,683.67,3042000,683.67', '2012-11-27,660.17,675.00,658.00,670.71,2508700,670.71']

def format_rows(rows, gap):
    split_rows = [row.split(',') for row in rows]
    # Splits each row up, by comma
    column_lengths = [max(col_len) for col_len in zip(*[map(len, row) for row in split_rows])]
    # Finds the maximum size of each column

    for row in split_rows:
        col_lengths = zip(row, column_lengths)
        print ''.join(col.ljust(col_length + gap, ' ') for (col, col_length) in col_lengths)
        # Prints out the data, making sure there's a minimum of ""gap"" spaces 
        # between each column
"
python argparse - add action to subparser with no arguments?,"def do_quit(args):
    # action
    quit()

parser = ArgumentParser()
subparser = parser.add_subparsers(dest='cmd')
....
subparser.add_parser('quit')
...
args = parser.parse_args()
print args.cmd   # displays 'quit'
if args.cmd == 'quit':
   do_quit(args)
"
When and how often are properties calculated in python?,"@property
def area(self):
    try:
        return self._area
    except AttributeError:
        area = pi*self.radius**2
        self._area = area
        return area

@property
def radius(self):
    return self._radius

@radius.setter
def radius(self, radius):
    try:
        del self._area
    except AttributeError:
        pass
    self._radius = radius
"
Python if or not,"if not(fullpath.lower().endswith("".pdf"")) and not (fullpath.lower().endswith(tuple(settings.imageExtensions))) :
"
save data in wxRichTextCtrl,"import wx
import wx.richtext

app = wx.App(False)
f=wx.Frame(None, title=""Test"")
f.Show()
rt = wx.richtext.RichTextCtrl(f, size=(200,200))
def onEvent(evt):
    import cStringIO
    buf = cStringIO.StringIO()
    handler = wx.richtext.RichTextXMLHandler()
    handler.SetFlags(wx.richtext.RICHTEXT_HANDLER_INCLUDE_STYLESHEET)
    handler.SaveStream(rt.GetBuffer(), buf)
    print buf.getvalue()

f.Bind(wx.EVT_LEFT_DOWN, onEvent)
app.MainLoop()
"
how to get the context of a search in BeautifulSoup?,"import bs4 
import re

thehtml = ''' 
    <p style=""text-align: center;""><img src=""http://example.com/smthg.png"" alt=""thealtttext"" /></p>
    <p style=""text-align: center;""><strong>My keywords : <a href=""http://example.com/hello.html"" target=""_blank""> some text </a> </strong></p>
    <p style=""text-align: center;""><strong>some other words : <a href=""http://example.com/anotherlink.html"" target=""_blank""> some other words</a></strong></p>
    '''
soup = bs4.BeautifulSoup(thehtml)
k = soup.find(text=re.compile(""My keywords"")).next_sibling['href']
print(k)
"
Generating a protocol string,"class  MyStruct:
    def __init__(self, first_byte, second_byte):
        self.first_byte = first_byte
        self.second_byte = second_byte
        self.combined = hex(first_byte) + "" "" + hex(second_byte)


test = MyStruct(36, 128)
print(""MyStruct: test first=%i second=%i comb=%s"" %(test.first_byte, test.second_byte, test.combined))
"
Appending numbers into a list in reverse,"items[0][1].extend(reversed(range(1, num + 1)))
"
"How can I ""divide"" words with regular expressions?","
With regex:
import re
result = re.findall(r""\b(\w*?)/\w*?\b"", my_string)
print(result)
"
Get list item by attribute in Python,items = [item for item in container if item.attribute == value]
Python 3.4 / Notepad++ 6.5 Hex Characters Replacement,"with open('latin.txt', 'rb') as fdin, open('utf.txt', 'wb') as fdout:
    for line in fdin:
        fdout.write(line.decode('latin1').encode('utf8'))
"
Case-insensitive comparison of sets in Python,"def intersection(iterableA, iterableB, key=lambda x: x):
    """"""Return the intersection of two iterables with respect to `key` function.

    """"""
    def unify(iterable):
        d = {}
        for item in iterable:
            d.setdefault(key(item), []).append(item)
        return d

    A, B = unify(iterableA), unify(iterableB)

    return [(A[k], B[k]) for k in A if k in B]
"
How to write a function for barchart in python?,"y = textranges_freq['smstext']
xlabels = textranges_freq['buckets']
def makebar(y, xlabels, xlabel, ylabel, title):
    bar_width = 0.50
    x = np.arange(len(y))
    fig, ax = plt.subplots()
    ax.bar(x, y, width=bar_width)
    ax.set_xticks(x+(bar_width/2.0))
    ax.set_xticklabels(xlabels)
    ax.set_title(title)
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    plt.show()
"
PIG UDF (Python) Charset Encoding,"  ....
  val line:String = input.get(0).asInstanceOf[DataByteArray].get(), ""windows-1250"")
  ....
"
How do I copy only the values and not the references from a Python list?,"test_variable = 1
setEqual(test_variable, [1, 2, 3, 4])
# Passes, because the identifier test_variable
# CAN'T be rebound within this scope from setEqual.
assert test_variable == 1 
"
Force print statement to a single line in python,"print(u""\u00A0"".join(os.listdir(wd)))
"
Python regex get address without zip code,">>> add1 = '802Taiwan,XX Street XX Road,123'
>>> re.findall(r'^\d+(.*,)\d+$', add1)
['Taiwan,XX Street XX Road,']
"
Having some trouble converting a tk PhotoImage back to a PIL image to save,"pic = None
tkPic = None
tkPic2 = None
picToConvert = None
canvas1 = None
"
"Rewrite a python script, injecting a method in each of the script's classes","class Foo(object):
    def __init__(self):
        pass

import new

def some_func(self):
    print ""foobar""

Foo.my_method = new.instancemethod(some_func, None, Foo)
"
Decoding hex string gives me garbage,">>> a2 = ""43616c6562""
>>> bytes2 = [a2[i:i+2] for i in range(0,len(a2),2)]
>>> bytes2
['43', '61', '6c', '65', '62']
>>> ''.join([chr(int(c,16)) for c in bytes2])
'Caleb'
>>> 
"
"creating a list of tuples (x, y) from a string","data = data.replace('POLYGON ((', '').replace('))', '').strip()
res = []
for rec in data.split(', '):
    res.append(tuple(float(val) for val in rec.split()))
"
Trimming a string,' Hello '.strip()
Passing Data from a Java program to a Python program and getting results back,"import StringIO
import re
import select
import socket
import sys
import threading

class IPC(threading.Thread):

    def __init__(self, line_filter = None):
        threading.Thread.__init__(self)
        self.daemon = True
        self.lock = threading.Lock()
        self.event = threading.Event()
        self.event.clear()
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.recv_buffer_size = 8192
        self.buffer = StringIO.StringIO()
        if(line_filter == None):
            self.line_filter = lambda x: x
        else:
            self.line_filter = line_filter


    def run(self):
        self.sock.connect((""localhost"", 32000))
        data = True
        while data:
            try:
                data = self.sock.recv(self.recv_buffer_size)
            except socket.error, e:
                print e
                self.sock.close()
                break

            self.lock.acquire()
            self.buffer.write(data)
            self.lock.release()
            self.event.set()

    def readlines(self):
        self.lock.acquire()

        self.buffer.seek(0)
        raw_lines = self.buffer.readlines()
        self.buffer.truncate(0)

        self.lock.release()

        lines = map(self.line_filter, raw_lines)
        return lines

proc_control = IPC()
while True:
    proc_control.event.wait()
    data = proc_control.readlines()
    if(data):
        # Do Stuff

    proc_control.event.clear()
"
Write the digits of a number into an array,"number = 123456789123456789
from timeit import timeit
print timeit(""map(int, str(number))"", ""from __main__ import number"")
print timeit(""[int(dig) for dig in str(number)]"", ""from __main__ import number"")
"
2 dimensional array insertion in php python equivalent,">>> var = {}
>>> var['a'] = {}
>>> var['b'] = {}
>>> var['b'][len(var['b'] )] = 'text1'
>>> var['b'][len(var['b'] )] = 'text2'
>>> var
{'a': {}, 'b': {0: 'text1', 1: 'text2'}}
"
"Despite many examples online, I cannot get my MATLAB repmat equivalent working in python","np.sum(np.array([sm-np.tile(sm[i,j,:], (N,M,1)) for i in xrange(N) for j in xrange(M)]),axis=0)

z = np.array([np.tile(sm[i,j,:], (N,M,1)) for i in xrange(N) for j in xrange(M)]),axis=0)
np.sum(sm - z, axis=0)  # let numpy broadcast sm
"
How to add a single item to a Pandas Series,"x = p.Series()
N = 4
for i in xrange(N):
   x = x.set_value(i, i**2)
"
Can't put the panel at the specified position on wxpython,"import wx

class MyForm(wx.Frame):
   def __init__(self):
        wx.Frame.__init__(self, None, size=(400,400))
        self.Bind(wx.EVT_SIZE, lambda *args: 0) # <--------
        self.panel2=wx.Panel(parent=self,
                             size=(200,200),
                             pos=(200,0),
                             style=wx.BORDER)


app = wx.App(False)
frame = MyForm().Show()
app.MainLoop()
"
Put python long integers into memory without any space between them,"$ python -m timeit -s ""a=long('A'*93750,16);b=long('7'*93750)"" ""c=a & b""
100000 loops, best of 3: 7.78 usec per loop
$ python -m timeit -s ""import gmpy2;a=gmpy2.mpz('A'*93750,16);b=gmpy2.mpz('7'*93750)"" ""c=a & b""
100000 loops, best of 3: 4.44 usec per loop
"
Add child classes in SQLAlchemy session using parent constructor,"def __new__(cls, *args, **kwargs):
    typ = kwargs.get('type')  # or .pop(...)

    if typ and not kwargs.pop('_my_hack', None):
        # print(""Special handling for {}..."".format(typ))

        if typ == 'parent':
            # here we can *properly* call the next in line
            return super(Parent, cls).__new__(cls, *args, **kwargs)
        elif typ == 'child':
            # @note: need this to avoid endless recursion
            kwargs[""_my_hack""] = True
            # here we need to cheat somewhat
            return Child.__new__(Child, *args, **kwargs)
        else:
            raise Exception(""nono"")
    else:
        x = super(Parent, cls).__new__(cls, *args, **kwargs)

    return x
"
How to use variables in SQL statement in Python?,"cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"
Python:method call itself without method name,"import functools

def decorator(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        save = getattr(self, '_FUNC_', None)
        self._FUNC_ = func
        retval = func(self, *args, **kwargs)
        self._FUNC_ = save
        if save:  self._FUNC_ = save
        else: delattr(self, '_FUNC_')
        return retval
    return wrapper

class C(object):
    @decorator
    def M(self, i):
        if i > 0:
            print i,
            self._FUNC_(self, i-1)  # explicit 'self' argument required
        else:
            print '- Blast Off!'

C().M(3)  # -> 3 2 1 - Blast Off!
"
Advantages to two modules with same interface or two classes with the same interface?,"from abc import ABCMeta, abstractmethod

class YourAbstractFactory(object):
    __metaclass__ = ABCMeta

    @classmethod
    def get_factory(cls, condition):
        cond_map = {
            'impl1': Impl1,
            'impl2': Impl2
        }

        impl = cond_map.get(condition)

        return impl() if impl else None

    @abstractmethod
    def f1(self):
        pass

    @abstractmethod
    def f2(self):
        pass
"
Dealing with a high volume of query params in python,"DEFAULTS = {
    'param1': 1,
    'param2': 'something',
}
meta = Meta()
for name, value in DEFAULTS.items():
    setattr(meta, name, param.get(name, value))
"
Plot single data with two Y axes (two units) in matplotlib,"import numpy as np
import matplotlib.pyplot as plt

mean, amp = 40000, 20000
t = np.arange(50)
s1 = np.sin(t)*amp + mean #synthetic ts, but closer to my data 

fig, ax1 = plt.subplots()
ax1.plot(t, s1, 'b-')

ax1.set_xlabel('time')
mn, mx = ax1.set_ylim(mean-amp, mean+amp)
ax1.set_ylabel('km$^3$/year')

km3yearToSv = 31.6887646e-6

ax2 = ax1.twinx()
ax2.set_ylim(mn*km3yearToSv, mx*km3yearToSv)
ax2.set_ylabel('Sv')
"
aggregate dictionary items into summary results,"from itertools import groupby
from operator import itemgetter

mydict={
        ('a', 1): 0,
        ('a', 2): 0,
        ('a', 3): 0,
        ('a', 4): 1,
        ('a', 5): 2,
        ('a', 6): 2,
        ('a', 7): 0,
        ('a', 8): 0,           
}

data = mydict.items()
data.sort()

def groupkey(item):
    return item[0][0], item[1]

result = {}
for v, group in groupby(data, key=groupkey):
    char, value = v
    nums = [item[0][1] for item in group]
    result[char, min(nums), max(nums)] = value

print result
"
find value of forloop at which event occurred Python,"for xindex, xvalue in enumerate(xarr):
  darr = {}
  for pindex, pvalue in enumerate(parr):
    dvp = math.fabs(xvalue - pvalue)
    darr[dvp] = {'xindex': xindex, 'pindex': pindex}
  mini = min(darr.keys())
  minix = darr[mini]['xindex']
  minip = darr[mini]['pindex']
  minindex = darr.keys().index(mini)


  print ""minimum_index> {0}, is the difference of xarr[{1}] and parr[{2}]"".format(minindex, minix, minip)
  darr.clear()
"
Elegant way to access last two and next two elements in a list?,"inputlist[max(0, index - 2):index + 3]
"
Time - get yesterdays date,"#!/usr/bin/env python
import time

def posix_time(utc_time_tuple):
    """"""seconds since Epoch as defined by POSIX.""""""
    # from https://gist.github.com/zed/ff4e35df3887c1f82002
    tm_year = utc_time_tuple.tm_year - 1900
    tm_yday = utc_time_tuple.tm_yday - 1
    tm_hour = utc_time_tuple.tm_hour
    tm_min = utc_time_tuple.tm_min
    tm_sec = utc_time_tuple.tm_sec
    # http://pubs.opengroup.org/stage7tc1/basedefs/V1_chap04.html#tag_04_15
    return (tm_sec + tm_min*60 + tm_hour*3600 + tm_yday*86400 +
            (tm_year-70)*31536000 + ((tm_year-69)//4)*86400 -
            ((tm_year-1)//100)*86400 + ((tm_year+299)//400)*86400)

now = time.localtime()
yesterday = time.gmtime(posix_time(now) - 86400)
print(yesterday)
# -> time.struct_time(tm_year=2015, tm_mon=4, tm_mday=22, tm_hour=22, tm_min=6, tm_sec=16, tm_wday=2, tm_yday=112, tm_isdst=0)
"
Regex - Print the lines starting with a T,"re.findall('^T', ..., flags=re.M)  # M is an alias for MULTILINE
"
Python Numpy Matplotlib Set Y-Label inline,"import matplotlib.pyplot as plt

fig, axes = plt.subplots(nrows=4, sharex=True)
yranges = [(-1000, 100), (-0.001, 0.002), (0, 5), (0, 20)]
labels = ['$P_{EUC}[mm]$', '$P_z[mm]$', '$P_Y[mm]$', '$P_X[mm]$']

for ax, yrange, label in zip(axes, yranges, labels):
    ax.set(ylim=yrange)
    ax.annotate(label, xy=(0, 0.5), xytext=(5, 0), rotation=90,
                xycoords=('figure fraction', 'axes fraction'),
                textcoords='offset points', va='center', ha='left')

plt.show()
"
How to check what month it is? Python,"from time import strftime
current_month = strftime('%B')
"
Python pandas: Getting the locations of a value in dataframe,"In [12]: [(x, df.columns[y]) for x,y in np.argwhere(df)]
Out[12]: [(1, 'a'), (2, 'b'), (3, 'b')]
"
elegant way of setting multiple methods to equal another method,"from collections import defaultdict

class Foo(object):
    QUIT_WORDS = ['exit', 'quit', 'stop', 'finish', 'complete', 'leave']

    def __init__(self):
        self.method_dict = defaultdict(lambda: self.do_exit)

    def __getattr__(self, attr):
        if any([attr.endswith(""_{}"".format(x)) for x in self.QUIT_WORDS]):
            return self.method_dict[attr]
        else:
            return super(Foo, self).__getattribute__(attr)

    def do_exit(self):
        print ""Exit!""
"
Bubble Sort following an algorithm,"def bubbleSort(l):
  isSorted = False
  while not isSorted:
    isSorted = True
    for i in range(len(l)-1):
      if l[i] > l[i+1]:
        isSorted = False
        l[i], l[i+1] = l[i+1], l[i]
"
How to change marker and color in matplotlib for a specific column value?,"uniqueVals = ['foo', 'bar', 'ter']

# Create your own list of markers here (needs to be the same size as `uniqueVals`)
markers = ['o', '^', 's']
colors = ['r', 'g', 'b']

for color, marker, val in zip(colors, markers, uniqueVals):
    toUse = coordLabels == val
    ax.scatter(coordData[toUse,0], coordData[toUse,1], c=color, marker=marker)
"
Python: list comprehension which references an internally generated list,"(lambda random_list: [
    (x, y, not random_list.index(y)) 
    for x in some_list
    for y in random_list])(
        random_list=random.sample([1, 2, 3, 4, 5], random.choice([1, 2, 3])))
"
curve fitting with integer inputs Python 3.3,"from scipy.optimize import brute
grid = [slice(1, 10, 1)]  # grid search over 1, 2, ..., 9
# it is important to specify finish=None in below
intcoef = brute(errfun, grid, args=(xs, ys,), finish=None)
floatcoef = optfloat(intcoef, xs, ys)['floatcoef'][0]
"
Periodically execute function every n minutes while doing other stuffs,"from threading import Timer
t = Timer(300.0, function_call)
t.start() # after 300 seconds, function_call will be called
"
Check if one value exists in any rows of any columns in pandas?,"df.applymap(lambda x: x == 'mike').any().any()
"
How can I check if an object is an iterator in Python?,"def reallyiterable(x):
  return not isinstance(x, basestring) and isinstance(x, collections.Iterable)
"
Python 3: Why are my while loops exiting?,"for x in range(11):
    for y in range(11):
        for z in range(11):
            print('%.2f' % (x/10.0) + ' %.2f' % (y/10.0) + ' %.2f' % (z/10.0))
"
Running bash script from within python,"subprocess.call('sleep.sh', shell=True)"
Chatango xml parsing in python,"if data.find(""s"") is not None:
    gender = data.find(""s"").text
else:
    gender = ""?""
"
"Selenium Python- If cannot find element, close everything and restart","from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait

try:
    element = WebDriverWait(driver, 10).until(lambda driver: driver.find_element_by_id('user_first_name'))
    # do smth with the found element
except TimeoutException:
    print ""Element Not Found""
    driver.close()
"
dictionary help for python writing a code,"print map(lambda x: x[0], sorted(nd.items(), key=lambda x: x[1]))
"
manipulate column fields for clean representation,"awk -F '[ ,]' '{sub(/:.+$/, """", $3); a[$3]+=$11} END{for (i in a) print i, a[i]}' file
10.20.10.144 2896
"
Merging an undetermined number of rows in a Dataframe,"print df.groupby('grouped').agg({'tid':'first', 'instr_count': sum}).reset_index()

  grouped  tid  instr_count
0    main   22       892806
1   makea   22          138
"
How to get every element in a list of list of lists?,[a for c in Cards for b in c for a in b]
"Python: How to get a value of datetime.today() that is ""timezone aware""?","datetime.now(pytz.utc)
"
How do I multiply each element in a list by a number?,"import pandas as pd

s = pd.Series(my_list)

>>> s * 5
0     5
1    10
2    15
3    20
4    25
dtype: int64
"
Reversing names in pandas,"df['Name'] = df['Name'].str.replace(r'(.+),\s+(.+)', r'\2 \1')
"
Redis as a Queue - Bulk Retrieval,"# ZSCAN: Iterate over all members in the set in batches of about 10.
# This will be unordered list.
# zscan_iter returns tuples (member, score)
batchSize = 10
for memberTuple in r.zscan_iter(key, match = None, count = batchSize):
    member = memberTuple[0]
    score = memberTuple[1]
    print str(member) + ' --> ' + str(score)


# ZRANGE: Get all members in the set, ordered by score.
# Here there maxRank=-1 means ""no max"".
minRank = 0
maxRank = -1
for memberTuple in r.zrange(key, minRank, maxRank, desc = False, withscores = True):
    member = memberTuple[0]
    score = memberTuple[1]
    print str(member) + ' --> ' + str(score)
"
Python: Check second variable if first variable is True?,"if not a or b: 
   print('foo')
"
Python - How can I change bytes in a file,">>> b'A' == b'\x41' == chr(0b1000001).encode()
True
"
Storing the content from for loop in the list python,"count = Counter([x.lower() for x in rdd.split()])
"
How to convert list lookalike into a list?,"with open(selectedCase) as infh:
    dataInput = [ast.literal_eval(line) for line in infh]
"
How to loop n items at a time but not stepping only 1 each time? python,"from itertools import tee, islice, izip_longest

data = [1, 2, 3, 4, 5, 6]
iters = [islice(it, n, None) for n, it in enumerate(tee(data, 3))]
res = list(izip_longest(*iters))
# [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, None), (6, None, None)]
"
Limit sum of entries in numpy array by adjusting negative entries,"# Get a copy of input as the output
out = initial_values.copy()

# Get sorted indices
sorted_index = np.argsort(out)

# Last index in sorted indexed indices for setting elements in input array to 0's
idx = np.where(out.sum() < out[sorted_index].cumsum())[0][-1]

# Set until idx indexed into sorted_index in turn indexed into input array t0 0's
out[sorted_index[:idx+1]] = 0

# There might be one element left to make the sum absolutely zero. 
# Make it less negative to make the absolute sum zero.
out[sorted_index[idx+1]] -= out.sum()
"
How to print all the additions and multiplications of a Galois Field in Sage,"sage: for e0, e1 in CartesianProduct(k,k):
....:     print '(%s) + (%s) = %s' % (e0, e1, e0+e1)
....:     
(0) + (0) = 0
(0) + (x) = x
[etc.] 
"
Make a blinking busy indicator on python shell,"import time

i = '*'
while True:
    print('{}\r'.format(i), end='')
    i = ' ' if i=='*' else '*'
    time.sleep(0.5)
"
Saving Image in a temporary file in django,"from PIL import Image
import tempfile

def image_watermark(request,image_id):
    photo = Photo.objects.get(pk=image_id)
    watermark = Image.open('{0}/{1}'.format(settings.MEDIA_ROOT,'wmark.png'))
    img = Image.open(photo.photo.file)
    img.paste(watermark,(img.size[0]-watermark.size[0],img.size[1]- watermark.size[1]),watermark)

    tmpfile = tempfile.TemporaryFile()
    img.save(tmpfile, img.format, quality=80)

    tmpfile.seek(0)
    wrapper = FileWrapper(tmpfile)
    response = StreamingHttpResponse(wrapper, 'image/jpeg')
    response['Content-Disposition'] = 'attachment; filename=photo.jpg'
    return response
"
How to get s subset sum to print out the integers it used (python),"from itertools import combinations

def com_subset_sum(seq, target):
    if target == 0 or target in seq:
        return True

    for r in range(len(seq),1,-1):
        for subset in combinations(seq, r):
            if sum(subset) == target:
                print subset
                return True
    return False


print com_subset_sum([1,3,5,1,6,8,7],10)
"
How to find strings in pandas,"dataset[dataset['Postcode'].str.startswith(""EC4"")]
"
Print out the output of os.popen() without buffering in python,"import subprocess
import sys

cmd = [""ruby"", ""/Users/smcho/Desktop/testit.rb""]
p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
for line in iter(p.stdout.readline, ''):
    print line, 
    sys.stdout.flush() 
p.wait()
"
How to copy last X bits?,">>> a = int('01101010', 2)
>>> b = int('00110101', 2)
>>> mask = 07  # Mask out the last 3 bits.
>>> (b & ~mask) | (a & mask)
50
>>> int('00110010', 2)
50
"
Assign values to dictionary by order they were added,"with open('customers.txt') as customers:
    sorted_no = {line.split("";"")[0]:ind for ind, line in enumerate(customers,1)}
"
Upper case between a char python,"def trans(s):
    x = """"
    a = False
    for j in range(len(s)):
        if s[j] == ""*"":
            a = not a  # change state; false to true and true to false
            continue  # no need to add the star to the output
        if a:
            x += s[j].upper()
        else:
            x += s[j]
    return x
"
np.array ndmin argument: specify placement of added dimensions,">>> a3d = a3d.reshape(a3d.shape + (1, 1))
>>> a3d.shape
(2, 3, 4, 1, 1)
"
Use decorator to collect instance methods?,"class Foo(object):
    handlers = []
    def collect_handler(handlers):
        def wrapper(func):
            handlers.append(func)
            return func
        return wrapper
    collect_handler = collect_handler(handlers)

    def __init__(self):
        pass

    def run(self):
        pass    

    @collect_handler
    def foo(self):
        pass

    @collect_handler
    def bar(self):
        pass


foo = Foo()
print(foo.handlers)
"
Using dynamic lists in query in Pandas,"pd.eval('df[df[""annual rate""]>0]')
"
Python / read a specific part in a log file,"with open('new.txt' ,'r') as f :
    lines=f.read()
    print ""**** start logging ****""+ lines.split(""**** start logging ****"")[-1]
"
List of repeating integers,"In [29]: [l for l in range(3) for k in range(5)]
Out[29]: [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2]
"
python lxml loop through all tags,"from lxml import etree
tree = etree.parse('xmlfile')
for tag in tree.iter():
    if not len(tag):
        print (tag.tag, tag.text)
"
transform php code to python - append new values to the same key in dict,"my_dict = {}
my_dict['value1'] = ['new value 1']
my_dict['value1'] += ['new value 2', 'new value 3']
"
Whitespace problem with python and lxml,"import urllib2,StringIO
from lxml import etree

seite = urllib2.urlopen(""http://www.samsungapps.com/topApps/topAppsDetail.as?productId=G00000467050&listYN=Y"")
html = seite.read()
seite.close()
parser = etree.HTMLParser()
tree = etree.parse(StringIO.StringIO(html), parser)
xpath = ""//div[contains(@class,'detail-view')]/h4/text()""
name = tree.xpath(xpath)
xpath = ""//div[contains(@class,'detail-view')]/table/tbody/tr[2]/td/text()""
cat = tree.xpath(xpath)
xpath = ""//div[contains(@class,'detail-view')]/table/tbody/tr[3]/td/text()""
typ = tree.xpath(xpath)
xpath = ""//div[contains(@class,'detail-view')]/table/tbody/tr[4]/td/text()""
version = tree.xpath(xpath)

print name[0].strip().encode(""utf-8"")
print cat[0].strip().encode(""utf-8"")
print typ[0].strip().encode(""utf-8"")
print version[0].strip().encode(""utf-8"")
"
comparing two lists and finding most preferred pairs,"from collections import defaultdict, Counter
from itertools import combinations

likes = defaultdict(set)
for person, fruit in zip(persons, fruits):
    likes[person].add(fruit)

counts = Counter()
for person in likes:
    for combo in combinations(likes[person], 2):
        counts[frozenset(combo)] += 1

result = counts.most_common(1)[0][0]
"
"Python ""and if"" equivalent","if 'video' in mylist:
    files.append('/home/dbs/public_html/download/codex/codex.html')
if 'audio' in mylist:
    files.append('/home/dbs/public_html/download/audio/audio_player.html')
if 'visual' in mylist:
    files.append('/home/dbs/public_html/download/visual/visual.html')
"
Meaning of cmap in contourf,"con = plt.contourf(data);
limits = con.get_clim()

   (0.00, 1.05)
"
Getting a specific value from a tuple within a list,"for item in tails:
    ( xposition, yposition ) = item[1:]  # tuple assignment
    pygame.draw.rect(windowSurface, RED, (xposition, yposition, 16, 16))
"
prevent multiple submissions when user clicks submit button multiple times before loading to the new page,"import datetime
import pickle

def form_valid(self,form):

    if not hasattr(self.request.session['last_submitted']):
        last_submitted = pickle.dumps(datetime.datetime.now())
        self.request.session['last_submitted'] = last_submitted
        save_it = True
    else:
        last_submitted = pickle.loads(self.request.session['last_submitted'])
        delta = datetime.datetime.now() - last_submitted
        save_it = (delta.seconds > 60): # assume allow re-submit after 60 seconds

    if save_it:
      self.object = form.save(commit=False)
      # any manual settings go here

      #self.object.category =      Category.objects.filter(category__in=categories).all()

      self.object.moderator = self.request.user
      self.object.image = extract(self.object.url) 
      self.object.thumbnail = extractt(self.object.content)
      self.object.save()
      return HttpResponseRedirect(reverse('post', args=[self.object.slug]))
    else:
       # consider redirect as usual, if the user just clicked twice by mistake
       return self.form_invalid(form) # or Http error code      
"
Better python datetime display?,"#!/usr/bin/env python

import pytz
import babel.dates

tz = pytz.timezone('America/New_York')
print babel.dates.get_timezone_location(tz)
"
Python - Opening successive Files without physically opening every one,"import os
open_files = [open(os.path.join(some_path, f)) for f in os.listdir(some_path) 
              if os.path.isfile(f)]
"
"Python/Numpy - Turn an array with shape (119,80) into (119,1,80)",">> import numpy as np
>> a = your_array[:,None,:] # replace `your_array` with the name of your array
>> print a.shape
>> (119, 1, 80)
"
How to generate random number with the specific length in python,"from random import randint

def random_with_N_digits(n):
    range_start = 10**(n-1)
    range_end = (10**n)-1
    return randint(range_start, range_end)

print random_with_N_digits(2)
print random_with_N_digits(3)
print random_with_N_digits(4)
"
Python: trying to lower a string and remove non-alphanumeric characters aside from space,"re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()"
Get all combinations of list multiple arrays,"values = [[func(val) for func,val in zip(f, X)] for f in itertools.product(funcs, repeat=len(funcs))]
"
python write to EXCEL cell range (NumPy?),"import win32com.client as win32

excel = win32.gencache.EnsureDispatch('Excel.Application')

def openExcel(makeExcelVisible=True):
    excel.Visible = makeExcelVisible

def closeExcel():
    excel.Application.Quit()

class ExcelFile(object):
# opens up a workbook to work on, not selecting a file name creates a new one
    def __init__(self, fileName=None):
        if fileName == None:
            self.wb = excel.Workbooks.Add()
        else:
            self.wb = excel.Workbooks.Open(fileName)
        self.ws = None

    def addWorksheet(self):
    # adds a new worksheet to the workbook and makes it the current worksheet
        self.ws = self.wb.Worksheets.Add()

    def selectWorksheet(self, worksheetName):
    # selects a worksheet to work on
        self.ws = self.wb.Worksheets(worksheetName)

    def renameWorksheet(self, worksheetName):
    # renames current worksheet
        self.ws.Name = worksheetName

    def save(self):
    # saves the workbook
        self.wb.Save()

    def saveAs(self, fileName):
    # saves the workbook with the file name
        self.wb.SaveAs(fileName)

    def close(self):
    # closes the workbook
        self.wb.Close()

    def insertIntoCell(self, cellRow, cellCol, data):
        self.ws.Cells(cellRow,cellCol).Value = data

    def clearCell(self, cellRow, cellCol):
        self.ws.Cells(cellRow,cellCol).Value = None
"
Datetime down to seconds Python,"import datetime as dt

x = [dt.datetime.strptime(d,'%Y-%m-%d %H:%M:%S') for d in dates]
"
Converting a set to a string," >>> def my_join(x):
 ...     return "" "".join(str(element) for element in x))

>>> my_join(['a', 'b' ,'c', 'd'])
'a b c d'
"
Python 3.4: List to Dictionary,">>> from collections import OrderedDict
>>> my_dict=OrderedDict((i,j) for i,*j in [l[i:i+4] for i in range(0,len(l),4)])
>>> my_dict
OrderedDict([('Total Revenue', [31821000, 30871000, 29904000]), ('Cost of Revenue', [16447000, 16106000, 15685000]), ('Gross Profit', [15374000, 14765000, 14219000]), ('Research Development', [1770000, 1715000, 1634000]), ('Selling General and Administrative', [6469000, 6384000, 6102000]), ('Non Recurring', ['-', '-', '-']), ('Others', ['-', '-', '-']), ('Total Operating Expenses', ['-', '-', '-']), ('Operating Income or Loss', [7135000, 6666000, 6483000]), ('Total Other Income/Expenses Net', [33000, 41000, 39000]), ('Earnings Before Interest And Taxes', [7168000, 6707000, 6522000]), ('Interest Expense', [142000, 145000, 171000]), ('Income Before Tax', [7026000, 6562000, 6351000]), ('Income Tax Expense', [2028000, 1841000, 1840000]), ('Minority Interest', [-42000, -62000, -67000]), ('Net Income From Continuing Ops', [4956000, 4659000, 4444000]), ('Discontinued Operations', ['-', '-', '-']), ('Extraordinary Items', ['-', '-', '-']), ('Effect Of Accounting Changes', ['-', '-', '-']), ('Other Items', ['-', '-', '-']), ('Net Income', [4956000, 4659000, 4444000]), ('Preferred Stock And Other Adjustments', ['-', '-', '-']), ('Net Income Applicable To Common Shares', [4956000, 4659000, 4444000])])
"
How to know a position (.txt),"def findword(objf, word):
    lcount = 1
    found = False
    with open(objf, ""r"") as f:
        for line in f:
            if word in line: # If word is in line
                testline = line.split()
                ind = testline.index(word) # This is the index, starting from 0
                found = True
                break
            else:
                lcount += 1
        if found:
            print ""Word %s found at line %d, word %d"" % (word, lcount, ind+1)
        else:
            print ""Not found""
"
How to solve this argparse freeze issue?,"import argparse
def quit():
    import sys
    sys.exit(1)

def perform_stuff(*args):
    print 'stuff', args

def retrive(*args):
    print 'retrieve', args        

if __name__ == '__main__':
    p = argparse.ArgumentParser()
    # single letter `-d` string; use default None
    p.add_argument('-d', '--input_data')
    p.add_argument('-t', '--targets')
    p.add_argument('-i', '--input')
    p.add_argument('-o', '--output')
    opts = p.parse_args()
    print 'opts', opts

    if not any([opts.input, opts.output, opts.targets, opts.input_data]):
        p.print_usage()
        print 'press -h to see the help'
        quit()

    elif any([opts.targets,opts.input_data]):
        perform_stuff(opts.input_data, opts.targets)
        quit()

    elif any([opts.input, opts.output]):
        retrive(opts.input, opts.output)
    else:
        print 'else'
"
python xml minidom get the full content of childnode that contains both child and text,">>> from bs4 import BeautifulSoup
>>> data = """"""
... <parent>
...    <child>
...         text1 
...         <subchild>text2 </subchild> 
...         text3
...    </child>
... </parent>
... """"""
>>> soup = BeautifulSoup(data, ""xml"")
>>> print(soup.child.get_text())

        text1 
        text2  
        text3
"
Selenium webdriver with python to scrape dynamic page cannot find element,"from selenium import webdriver


dr = webdriver.PhantomJS()
dr.get(""http://propertymap.sfplanning.org/"")

dr.switch_to.frame(0)

dr.find_element_by_id(""addressInput"").send_keys(""whatever"")
dr.find_element_by_xpath(""//input[@title='Search button']"").click()
"
collide_widget with negative size,"def collide_widget(self, wid):    
    if max(self.x, self.right) < min(wid.x, wid.right):
        return False
    if min(self.x, self.right) > max(wid.x, wid.right):
        return False
    if max(self.top, self.y) < min(wid.y, wid.top):
        return False
    if min(self.top, self.y) > max(wid.y, wid.top):
        return False
    return True
"
Assignment: Python 3.3: add keys and values from dictionary to class,"cars = [car(driver, sponsor) for driver, sponsor in drivers.items()]
"
Python: Eval with undefined variables (2*x+x = 3*x),"In [126]: import sympy as sy

In [127]: sy.simplify('2*x+x')
Out[127]: 3*x
"
A better way to write python closures?,"def italic(predecessor):
    x = predecessor
    x2 = x
    x3 = x2
    def successor():
        return ""<italic/>"" + x3() + ""</italic>""
    return successor
"
not in as a function in filter-function,"for excluded in excludeList:
    kolaDataList = [l for l in kolaDataList if excluded not in l]
"
Python: Bytes to string with accented characters,">>> git_data = r""\303\271\303\240\303\250\303\262\303\271\303\250\303\262\303\271\303\271\303\250.txt""
>>> git_data.decode('string_escape')
'\xc3\xb9\xc3\xa0\xc3\xa8\xc3\xb2\xc3\xb9\xc3\xa8\xc3\xb2\xc3\xb9\xc3\xb9\xc3\xa8.txt'
>>> print git_data.decode('string_escape')
ùàèòùèòùùè.txt
"
filtering elements from list of lists in Python?,[item for item in a if sum(item) > 10]
Dropping a Pandas Row based on the prefix of value in a column,"print ((df['Account'].str[:2].str.startswith('AA')) |
        (df['Account'].str[:2].str.startswith('BB')))
0     True
1    False
2     True
Name: Account, dtype: bool

print ~((df['Account'].str[:2].str.startswith('AA')) |
        (df['Account'].str[:2].str.startswith('BB')))
0    False
1     True
2    False
Name: Account, dtype: bool

df = df[~((df['Account'].str[:2].str.startswith('AA')) | 
          (df['Account'].str[:2].str.startswith('BB')))]
print df
  Account
1  AB1212
"
Best Way to Convert a Dictionary of Dictionaries into a tab file,"import csv
import sys

# your data
data = {'name1':[{'AA':2,'GG':3,'CF':10}], 'name2':[{'AA':4, 'GG':9,'CF':5,'GT':1}]}
topleft = 'titles' # whatever you want the leftmost column header to be

# identify the column headers, and put them in alphabetical order (or some other order, if you'd prefer that)
headers = sorted(set(key
                     for row in data.values()
                     for key in row[0]))

# open a csv writer - this one writes to sys.stdout for interactive convenience
writer = csv.writer(sys.stdout, delimiter='\t')

# write the headers
writer.writerow([topleft] + headers)

for key in data:
    # construct each row
    row = [key] # row header
    for header in headers:
        row.append(data[key][0].get(header, 0)) # use 0 if a given header is absent in a given row
    writer.writerow(row) # write the row
"
"Python: zip 2 lists into a dictonary, del the duplicated keys but keep the values","list1 = [0.43, -1.2, 50, -60.5, 50]
list2 = ['tree', 'cat', 'cat', 'tree', 'hat']
d = {}
for k, v in zip(list2, list1):
    d.setdefault(k, []).append(v)
"
Compress a very large number (in Python),"#! /usr/bin/python

n = 313105074639950943116 #just an example

#your algorithm
chars = []
buff = ''
s = str (n)
while s:
    if int (buff + s [0] ) < 256:
        buff += s [0]
        s = s [1:]
    else:
        chars.append (int (buff) )
        buff = ''
if buff: chars.append (int (buff) )

print ('You need to write these numbers converted to chars: {}'.format (chars) )
print ('This are {} bytes of data.'.format (len (chars) ) )
print ('But you cannot decompress it, because you lose leading zeros.')

chars = []
while n:
    chars.append (n & 0xff)
    n = n >> 8

print ('Now if you just write the number to a file without your algorithm:')
print ('You need to write these numbers converted to chars: {}'.format (chars) )
print ('This are {} bytes of data.'.format (len (chars) ) )
print ('And you can actually read it again.')
"
Efficiently get indices of histogram bins in Python,"# faster than numpy.histogram, but only works in the range (0,1)
digitized = (nbins*vals).astype(int)
histogram = np.bincount(digitized)

offsets = np.cumsum(histogram[:-1])
grouped = np.partition(vals, offsets)

result = [func(group) for group in np.split(grouped, offsets)]
"
Python LOB to List,"names = ['\\'Mike\\':\\'Mike\\"", ...]

for name in names:
    if ""Mike"" in name:
        print ""Mike is here""
"
python parse bind configuration with nested curly braces,"import re
zone_def = re.split('zone', st, re.DOTALL)
big_dict = {}
for zone in zone_def:
    if len(zone) > 0:
        zone_name = re.search('("".*?"")', zone)
        sub_dicts = re.finditer('([\w]+) ({.*?})', zone, re.DOTALL)
        big_dict[zone_name.group(1)] = {}
        for sub_dict in sub_dicts:
            big_dict[zone_name.group(1)][sub_dict.group(1)] = sub_dict.group(2).replace(' ', '')
        sub_types = re.finditer('([\w]+) (.*?);', zone)
        for sub_type in sub_types:
            big_dict[zone_name.group(1)][sub_type.group(1)] = sub_type.group(2)
"
Transform numpy ndarray from a column list to row list,"poly.T
"
Find the indices of subarrays of single element,"[i for i in a if len(i) == 1]
"
Python string comparisons?,"if title in sites:
    screamandshout()
"
Sums of subarrays,"import numpy as np

def sub_sums(arr, nrows, ncols):
    h, w = arr.shape
    h = (h // nrows)*nrows
    w = (w // ncols)*ncols
    arr = arr[:h,:w]
    return (arr.reshape(h // nrows, nrows, -1, ncols)
               .swapaxes(1, 2)
               .reshape(h // nrows, w // ncols, -1).sum(axis=-1))

arr = np.asarray([range(0, 5),
                  range(4, 9),
                  range(8, 13),
                  range(12, 17)])

print(sub_sums(arr, 2, 2))
"
Match Unknown Number of String Elements in Pandas Column,"df2 = pd.concat([df]*10000, ignore_index=True)

%timeit df2['word_match'] = [all(word in values for word in words) for values in df2.string_col.str.split("" "")]
10 loops, best of 3: 70.9 ms per loop

%timeit df2['word_match'] = df2[df2['string_col'].str.contains('foo') & df2['string_col'].str.contains('bar')]
10 loops, best of 3: 63.7 ms per loop
"
Mysql named placeholders in python used in the IN clause,"select * from test where id in (0, 1, 2)
"
Zip lists of tuples,"from itertools import chain
result = list(zip(*chain(l1, l2, l3)))

# You can also skip list creation if all you need to do is iterate over result:
# for x in zip(chain(l1, l2, l3)):
#     print(x)

print(result)
print(result == unzipped)
"
Using glob twice in a Python script,"def process_file(file_path, file_type):
    # mostly the same stuff
    ...
    if file_type == 'a':
        # something different
"
Finding the minimum of each column of a CSV file using python,"with open(""data.csv"", ""r"") as f_input:
    lmin_col = []
    lmin_row = []

    for row in csv.reader(f_input):
        row = [float(col) for col in row]
        lmin_row.append(min(row))

        if lmin_col:
            lmin_col = [min(x,y) for x,y in zip(lmin_col, row)]
        else:
            lmin_col = row

    print(""Min per row:"", lmin_row)
    print(""Min per col:"", lmin_col)
"
Merging multiple text files into one and related problems,"def merge_file(infile, outfile, separator = """"):
    print(separator.join(line.strip(""\n"") for line in infile), file = outfile)


def merge_files(paths, outpath, separator = """"):
    with open(outpath, 'w') as outfile:
        for path in paths:
            with open(path) as infile:
                merge_file(infile, outfile, separator)
"
Using a RegEx to match IP addresses in Python,"pat = re.compile('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')"
how to match two numpy array of unequal length?,"ar1 = np.array([1,2,3,8,20,23])
ar2 = np.array([1,2,3,5,7,21,35])
def closest(ar1, ar2, iter):
    x = np.abs(ar1[iter] - ar2)
    index = np.where(x==x.min())
    value = ar2[index]
    return value

def find(x):
    return closest(ar1, ar2, x)
c = np.array(map(find, range(ar1.shape[0])))
"
Formatting a date with Mako templates,"${post.date.strftime('%Y/%m/%d %H:%M')
"
Interactive game board with Tkinter Python - label updating,"import tkinter as tk
import random

# --- functions ---

def move(x, y):
    global empty_x, empty_y, game_running   

    if game_running:        
        # check and move tile
        if (empty_x, empty_y) in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]:

            board[empty_y][empty_x].set( board[y][x].get() )
            board[y][x].set(' ')

            empty_x = x
            empty_y = y

            if won():
                # show label ""Hurray""
                label.lift()
                game_running = False

    else:
        # start game again

        shuffle() # shuffle tiles


def won():

    number = 0

    for y, row in enumerate(board):
        for x, string_var in enumerate(row, 1):
            number += 1
            if number == 9 and string_var.get() == ' ':
                #print('A |%s| %d' % (char, number))
                return True
            elif string_var.get() != str(number):
                #print('B |%s| %d' % (char, number))
                return False

    return True


def shuffle():
    global empty_x, empty_y, game_running

    # TODO: shuffle tiles

    # it can't put tiles in random places
    # because it can create game without solution


    # clear all tiles to recognize (in next step) empty tiles 
    for row in board:
        for element in row:
            element.set('')

    # put tiles in random places
    for number in range(1, 10):
        while True: 
            row = random.randint(0, 2)
            col = random.randint(0, 2)
            if board[row][col].get() == '':
                board[row][col].set(str(number))
                print('row/col/number:', row, col, number)
                break

    # last number remove:
    print('empty row/col:', row, col)
    board[row][col].set(' ')
    empty_x = col
    empty_y = row

    # hide label
    label.lower() # or frame.lift()

    # start game
    game_running = True

# --- main ---

root = tk.Tk()

# --- data ---

# StringVar needs `root` - it has to be after tk.Tk()

# empty board
board = [   
#    [tk.StringVar(value='1'), tk.StringVar(value='2'), tk.StringVar(value='3')],
    [tk.StringVar(), tk.StringVar(), tk.StringVar()],
    [tk.StringVar(), tk.StringVar(), tk.StringVar()],
    [tk.StringVar(), tk.StringVar(), tk.StringVar()],
]

# create label hidden behide frame

label = tk.Button(root, text=""Hurray!\n\n(click here to play again)"", command=shuffle)
label.grid(row=0, column=0, ipadx=50, ipady=50)

# create frame with buttons to fast show/hide label

frame = tk.Frame(root)
frame.grid(row=0, column=0) # the same (row,col) to hide label

buttons = []

for y, row in enumerate(board):

    buttons_row = []

    for x, string_var in enumerate(row):

        b = tk.Button(frame, textvariable=string_var, width=10, height=5, command=lambda x=x,y=y:move(x,y))
        b.grid(row=y, column=x)

        buttons_row.append(b)

    buttons.append(buttons_row)

# start game

shuffle() # shuffle tiles

# start ""the engine""

root.mainloop()
"
Efficient way of Element lookup in a Python List?,"import random
import timeit

l = [random.randint(1,10000) for i in range(1000)]
l2 = [random.randint(1,10000) for i in range(1000)]

def f1():
    l3 = []
    for i in l:
        if i in l2:
            l3.append(i)
    return l3

def f2():
    l3 = []
    for i in set(l) & set(l2):
        l3.append(i)
    return l3

t1 = timeit.Timer('f1()', 'from __main__ import f1')
print t1.timeit(100) #2.0850549985

t2 = timeit.Timer('f2()', 'from __main__ import f2')
print t2.timeit(100) #0.0162533142857
"
Use a method from other classes w/o inheritance,"class Gallery(object):
    def save(self, *args, **kwargs):
        return self, args, kwargs

class MyGallery(object):
    def save(self, *args, **kwargs):
        return Gallery.save.__func__(self, *args, **kwargs)
    # or 
    # save = Gallery.save.__func__

mg = MyGallery()
print mg.save('arg', kwarg='kwarg')
# (<__main__.MyGallery object at 0x04DAD070>, ('arg',), {'kwarg': 'kwarg'})
"
Grabbing different elements with BeautifulSoup: avoid duplicating in nested elements,"matches = soup.find_all('dl', attrs={'class': ['class', 'method','function','describe', 'attribute', 'data', 'clasmethod', 'staticmethod']})
for element in matches:
    element.extract()  # remove from tree (and parent `dl` matches)
"
Python: how to extract the content of a column in a table,">>> from BeautifulSoup import BeautifulSoup as bs
>>> text = """"""<div>
...     <table>
...        <tbody>
...           <tr>
...             <td>stuff</td>
...           </tr>
...           <tr>
...             <td>
...               <div>The content I want</div> 
...            </td>
...            </tr>
...         </tbody>
...       </table>
... </div>""""""
>>> a = bs(text)
"
Using Python lxml.html how can I find images within link tags?,"for img in doc.xpath('a//img'):
"
What kind of problems (if any) would there be combining asyncio with multiprocessing?,"import time
import asyncio
import aioprocessing
import multiprocessing

def func(queue, event, lock, items):
    with lock:
        event.set()
        for item in items:
            time.sleep(3)
            queue.put(item+5)
    queue.close()

@asyncio.coroutine
def example(queue, event, lock):
    l = [1,2,3,4,5]
    p = aioprocessing.AioProcess(target=func, args=(queue, event, lock, l)) 
    p.start()
    while True:
        result = yield from queue.coro_get()
        if result is None:
            break
        print(""Got result {}"".format(result))
    yield from p.coro_join()

@asyncio.coroutine
def example2(queue, event, lock):
    yield from event.coro_wait()
    with (yield from lock):
        yield from queue.coro_put(78)
        yield from queue.coro_put(None) # Shut down the worker

if __name__ == ""__main__"":
    loop = asyncio.get_event_loop()
    queue = aioprocessing.AioQueue()
    lock = aioprocessing.AioLock()
    event = aioprocessing.AioEvent()
    tasks = [ 
        asyncio.async(example(queue, event, lock)),
        asyncio.async(example2(queue, event, lock)),
    ]   
    loop.run_until_complete(asyncio.wait(tasks))
    loop.close()
"
a function that modifies its class's data objects,"import types

class TestClass(object):

    def __init__(self, ctrl_func):
        self.a = 4
        self.ctrl_func = types.MethodType(ctrl_func, self)

    def do_stuff(self):
        self.ctrl_func()

def test_controller(self):
    self.a = 20

my_thing = TestClass(test_controller)
print my_thing.a         #this prints 4
my_thing.ctrl_func()
print my_thing.a         #this prints 4 but I want it to print 20
"
After inheriting CRM-Lead unable to hide or add fields to my Custom module in Openerp,"<?xml version=""1.0"" encoding=""utf-8""?>
<openerp>
<data>
 <!-- ========================This is Form layout===============================-->
<record id=""crm_case_form_view_leads_extended"" model=""ir.ui.view"">
<field name=""name"">CRM - Leads Form</field>
<field name=""model"">bala.lead</field>
<field name=""inherit_id"" ref=""crm.crm_case_form_view_leads"" />
<field name=""arch"" type=""xml"">
    <field name=""email_from"" postion=""replace""/>
    <xpath expr=""//label[@for='contact_name']"" position=""before"">
                <field name=""nitesh_lead""/>
    </xpath>
    <field name=""function"" position=""replace""/>
    <field name=""partner_name"" position=""replace""/>
    <field name=""priority"" position=""replace""/>
    <field name=""partner_id"" position=""replace""/>
</field>
</record>
<record id=""new_lead"" model=""ir.actions.act_window"">
  <field name=""name"">Lead</field>
  <field name=""res_model"">bala.lead</field>
  <field name=""view_type"">form</field>
  <field name=""view_mode"">form</field>
  <field name=""view_id"" ref=""crm_case_form_view_leads_extended""/>
</record>
<!-- ===========================Menu Settings=========================== -->
<menuitem name =""Lead"" id = ""menu_lis_lab"" action=""new_lead""/>
</data>
</openerp>
"
Making an Ascii table from a FITS file header,"import pyfits

keys = ['SIMPLE', 'TELESCOP', 'INSTRUME', 'OBJECTS', 'RA_OBJ', 'DEV_OBJ']

hdulist = pyfits.open(""data.fits"")
header = hdulist[0].header
for k in keys:
    print k, ""="", header[k]
"
Python: Optimising a list comprehension which compares two integers,"atoms_1 = [1,2,3,4,5,6] * 5
atoms_2 = [2,4,6,1,2,3] * 5

print(timeit.timeit(""old()"", setup=""from __main__ import old"", number=100000)) # 46.2878425701
print(timeit.timeit(""new()"", setup=""from __main__ import new"", number=100000)) # 21.9272824532
"
Pandas: Convert array column to numpy Matrix,"In [11]: s = pd.Series([""3 4"", ""2 3 4 5""])

In [12]: s.str.get_dummies(sep="" "")
Out[12]:
   2  3  4  5
0  0  1  1  0
1  1  1  1  1
"
How to use a dot in Python format strings?,"from stuf import stuf

'Hello {user.name}'.format( **stuf({'user': { 'name': 'Markus' } }) )
"
Check if items in a list exist in dictionary,">>> dict_a = {'one': {'bird':2, 'tree':6, 'sky':1, 'TOTAL':9},
...           'two': {'apple':3, 'sky':1, 'TOTAL':4},
...           'three': {'tree':6, 'TOTAL':6},
...           'four': {'nada':1, 'TOTAL':1},
...           'five': {'orange':2, 'bird':3, 'TOTAL':5}
...           }
>>> set1 = {'bird','tree'}
>>> [key for key, value in dict_a.iteritems() if value.viewkeys() & set1]
['three', 'five', 'one']
"
Sum third value in tuple for a given pair of the first two values in the tuple using Python,"from collections import Counter

ix = [0,1,2,0,1]
iy = [0,1,1,0,1]
w = [1,2,3,4,5]

counts = Counter()
for (key, count) in zip(zip(ix, iy), w):
    counts[key] += count
print ""Counts:"", counts

counts_as_list = [  # Conversion of the counting result (counts) to a list
    [key[0], key[1], total_count] for (key, total_count) in counts.iteritems()]    
print ""As a list:"", counts_as_list
"
A function that returns a function (in python),">>> def func_you( lambdafunc1, lambdafunc2, lambdafunc3, lambdafunc4):
...     return lambda x: lambdafunc1(x) * lambdafunc2(x) * lambdafunc3(x) * lambdafunc4(x)
...
>>> f = func_you(sum,min,max,sum)
>>> f([1,2])
18
"
How to get the list of lists,"map(lambda *row: list(row), *mult_list)
"
Check if class is equal with one of two strings,">>> from bs4 import BeautifulSoup
>>> text = ''.join('<table class=""class{}""></table>'.format(i) for i in range(10))
>>> soup = BeautifulSoup(text)
>>> 
>>> soup.find_all(""table"", {""class"": [""class1"", ""class7""]})
[<table class=""class1""></table>, <table class=""class7""></table>]
>>> import re
>>> soup.find_all(""table"", {""class"": re.compile(""class[17]"")})
[<table class=""class1""></table>, <table class=""class7""></table>]
>>> 
>>> soup.find_all(""table"", {""class"": lambda x: 3*int(x[-1])**2-24*int(x[-1])+17 == -4})
[<table class=""class1""></table>, <table class=""class7""></table>]
"
Python: convert seconds to hh:mm:ss,">>> import time
>>> time.strftime('%H:%M:%S', time.gmtime(12345))
'03:25:45'
"
Pyparsing problem with operators,"from pyparsing import *

QUOTED = quotedString.setParseAction(removeQuotes)  
OAND = CaselessLiteral(""and"") 
OOR = CaselessLiteral(""or"") 
ONOT = Literal(""-"")
WWORD = ~OAND + ~OOR + ~ONOT + Word(printables.replace(""("", """").replace("")"", """"))
TERM = (QUOTED | WWORD)  
EXPRESSION = operatorPrecedence(TERM,
    [
    (ONOT, 1, opAssoc.RIGHT),
    (Optional(OAND,default=""and""), 2, opAssoc.LEFT),
    (OOR, 2, opAssoc.LEFT)
    ])

STRING = OneOrMore(EXPRESSION) + StringEnd()

tests = """"""\
word and ward or wird
word werd or wurd"""""".splitlines()

for t in tests:
    print STRING.parseString(t)
"
possible to set variable with multiple if statments?,">>> x = 'cat'
>>> 1 if x == 'dog' else 2 if x == 'cat' else 0 if x.isspace() else None
2
"
List of Dictionaries which contain lists,">>> [sorted(c) for e in dict_list for c in zip(*e.values())]
[[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12], [37, 40, 43, 46], [39, 41, 44, 47], [40, 42, 45, 48]]
"
How do I render *parts* of a svg file?,"#!/usr/bin/env python

import gtk
import rsvg

window = gtk.Window()
window.set_title(""Foo"")
window.connect(""destroy"", gtk.main_quit)
window.show()

svg = rsvg.Handle(file='cards.svg')
pixbuf = svg.get_pixbuf(id='#3_diamond')

image = gtk.Image()
image.set_from_pixbuf(pixbuf)
image.show()

window.add(image)

gtk.main()
"
Terminating a Python script,sys.exit()
Configuring a module with conditional imports,"if hw = ""hw1"":
   from hw1_config import * 
elif hw = ""hw2"":
   from hw2_config import * 
"
Python/Numpy: Convert list of bools to unsigned int,"sum(1 << i for i, b in enumerate(x) if b)"
How can I get all filename in different directories?,"for i,j,k in os.walk('.'):
    print i, j, k
"
"How export methods with dbus in a extended class in python, inherited methods?","# interface imports
from gi.repository import Gtk

# dbus imports  
import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop

# Main window class
class Window(dbus.service.Object):
    def __init__(self, gladeFilePath, name):
        # ... inicialization
        self.name = name
        self.busName = dbus.service.BusName('com.example.MyInterface.', bus=dbus.SessionBus())
        dbus.service.Object.__init__(self, self.busName, '/com/example/MyInterface/' + self.name)

    @dbus.service.method('com.example.MyInterface.Window')
    def show(self):
        self.window.show_all()

    @dbus.service.method('com.example.MyInterface.Window')
    def destroy(self):
        Gtk.main_quit()

    @dbus.service.method('com.example.MyInterface.Window')
    def update(self, data):
        # top class 'update' method


# Child window class
class WindowOne(Window):
    def __init__(self, gladeFilePath):
        Window.__init__(self, gladeFilePath, ""WindowOne"")

    @dbus.service.method('com.example.MyInterface.WindowOne')
    def update(self, data):
        # reimplementation of top class 'update' method


if __name__ == ""__main__"":
    DBusGMainLoop(set_as_default=True)

    gladeFilePath = ""/etc/interface.glade""
    windowOne = WindowOne(gladeFilePath)

    Gtk.main()
"
extract repeated elements in a list in python,"listX = [1,7,7,4,5,7,7]
listY = [2,4,4,3,1,4,6]

pairs = {}
for (x, y) in zip(listX, listY):
    pairs[(x,y)] = pairs.get((x,y), 0) + 1
"
Python - Merge lists in a row from a list,"itertools.chain(*x)
"
Python: setting negative values in list to 0," list3 = [ max(li1-li2, 0) for li1, li2 in zip(list1, list2) ]
"
Using Dictionaries to Count First Letter in a String - Python,"d = {}

text = ['time', 'after', 'time']

for w in text:
    if w:                         # If we have the empty string. w[0] Does not Exist (DNE)
        if w[0] in d:             # Check to see if we have first character in dictionary.
            d[w[0]] = d[w[0]] + 1 # Use the first character as key to dictionary.
        else:                     # If character has not been found start counting.
            d[w[0]] = 1           # Use the first character as key to dictionary.
"
How to obtain all subclasses (of a specific class) defined by a module?,"print inspect.getmembers(mymodule,  
                         predicate=lambda o: inspect.isclass(o) and \
                                             issubclass(o, A))
"
Python random number generation,"#!/usr/bin/python
import sys, random

def makelist(number):
  new_list = []
  for i in range(0, number):
    new_rand = random.randint(1, 100)
    new_list.append(new_rand)
  return new_list

def main():
  number = random.randint(6, 12)
  print ""the number is %s"" % str(number)
  populated_list = makelist(number)
  populated_list.sort()
  for i in populated_list:
    print(str(i)),

main()
"
How to use recursion to mix 2 strings and return both as 1 'interlaced' string?,"def mix(a,b):
    if len(a) != len(b):
        return
    elif not a:
        return """"
    else:
        return a[0] + b[0] + mix(a[1:], b[1:])
"
load csv into 2D matrix with numpy for plotting,"numpy.loadtxt(open(""test.csv"",""rb""),delimiter="","",skiprows=1)
"
Iterate over a string 2 (or n) characters at a time in Python,"for (op, code) in zip(s[0::2], s[1::2]):
    print op, code
"
Table tennis simulator,"In [1]: import collections

In [2]: score = collections.Counter()

In [3]: score['A'] += 1

In [4]: score['A'] += 1

In [5]: score['B'] += 1

In [6]: score
Out[6]: Counter({'A': 2, 'B': 1})
"
"Is there a python builtin to extract the 'set' of unhashable objects from a list, using 'is' comparison?","seen = set()
unique = [d for d in dictlist if id(d) not in seen and not seen.add(id(d))]
"
Sort str series by frequency,"In [71]: freq = pd.Series(s.str.split(',').sum()).value_counts()

In [72]: s.str.split(',').apply(lambda x: ','.join(sorted(x, key=freq.get, reverse=True)))
Out[72]:
0    abc,ghi,def
1        ghi,abc
dtype: object
"
Append to a member list when subclassing in Python,"def set_foos(cls):
    foos = []
    for base in cls.__bases__:
        if hasattr(base, 'foos'):
            foos.extend(base.foos)
    cls.foos = foos + getattr(cls, 'foos', [])
    return cls


class FooClass(object):
    foos = ['foo', 'bar']


@set_foo
class SpecialFoo(FooClass):
    foos = ['spec']
"
Casting a string containing comma separated values into an integer,"mystring = ""0,1,2""
mylist = [int(i) for i in mystring.split("","")]
print mylist
"
why does importing a module executes all statements in python?,"def create_my_function(x):
    def local_function():
        print(x)
    global my_function
    my_function = local_function

create_my_function(""Hello"")
"
Removing values from dict in python,"v != '' or v != {} or v is not None
"
convert string to hex in python,hex(ord('a'))
Pandas DataFrame Add column to index without resetting,"df.set_index(['d'], append=True)"
Selecting values simultaneously from different Tkinter Listbox widgets in Python 3.5,"root = Tk()

marco = Frame(root, padx=100, pady=50)
marco.pack()

lf = fase3(marco)
lf.pack()

root.mainloop()
"
Fetching one item sequentially from the list by a generator method,"   for innerList in tempList:
        pointObj.x = innerList[0]
        pointObj.y = innerList[1]
        agentObj = Agent.Agent(pointObj)
        yield agentObj

agent_gen = fetch_all_agents(5)

for agent in agent_gen:  
   print(agent)
"
Finding an index of one of alternative keywords,">>> [i for i, j  in enumerate(input_string.split()) if j in keywords]
[4]
>>>
"
"Python, convert HTML entities to Unicode","# -*- coding: utf-8 -*-
import HTMLParser
from bs4 import BeautifulSoup

astring = u""P&amp;O.""
bstring = u""&amp; ""
cstring = u""&gt;""
dstring = u""&gt; 150ÎC""

pars = HTMLParser.HTMLParser()
a1 = BeautifulSoup('<span>%s</span>' % astring)
a2 = pars.unescape(astring)
print ""a1:"", a1
print ""a2:"", a2
b1 = BeautifulSoup('<span>%s</span>' % bstring)
b2 = pars.unescape(bstring)
print ""b1:"", b1
print ""b2:"", b2
c1 = BeautifulSoup('<span>%s</span>' % cstring)
c2 = pars.unescape(cstring)
print ""c1:"", c1
print ""c2:"", c2
d1 = BeautifulSoup('<span>%s</span>' % dstring)
try: d2 = pars.unescape(dstring)
except: d2 = ""HTML Parse Broke!""
print ""d1:"", d1
print ""d2:"", d2
"
I want to extract text from a PDF to a .text file using PDFminer. I have found the code but I have no idea how to use it,"from cStringIO import StringIO
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfpage import PDFPage

def convert(fname, pages=None):
    if not pages:
        pagenums = set()
    else:
        pagenums = set(pages)

    output = StringIO()
    manager = PDFResourceManager()
    converter = TextConverter(manager, output, laparams=LAParams())
    interpreter = PDFPageInterpreter(manager, converter)

    infile = file(fname, 'rb')
    for page in PDFPage.get_pages(infile, pagenums):
        interpreter.process_page(page)
    infile.close()
    converter.close()
    text = output.getvalue()
    output.close
    return text
"
menu selection with functions,"chapter = ""home""
while  True:
    if chapter == ""home"":
        chapter = menu()
    if chapter == ""1"":
        print ""Welcome to chapter 1""
        print "" 'home' back""
        chapter = C_selection()
"
Avoid using for loop in np.array operations. Python,"def delta(r, dr):
    res = np.zeros_like(r)
    ma = (r >= 0.5*dr) & (r <= 1.5*dr)  # Create first mask
    res[ma] = (5-3*np.abs(r[ma])/dr[ma]-np.sqrt(-3*(1-np.abs(r[ma])/dr[ma])**2+1))/(6*dr[ma])
    ma = (r <= 0.5*dr)    # Create second mask
    res[ma] = (1+np.sqrt(-3*(r[ma]/dr[ma])**2+1))/(3*dr[ma])
    return res
"
Select first result from two coroutines in asyncio,"import asyncio

@asyncio.coroutine
def ok():
    yield from asyncio.sleep(1)
    return 5

@asyncio.coroutine
def select1(*futures, loop=None):
    if loop is None:
        loop = asyncio.get_event_loop()
    return (yield from next(asyncio.as_completed(futures)))

@asyncio.coroutine
def select2(*futures, loop=None):
    if loop is None:
        loop = asyncio.get_event_loop()
    done, running = yield from asyncio.wait(futures,
                                            return_when=asyncio.FIRST_COMPLETED)
    result = done.pop()
    return result.result()

@asyncio.coroutine
def example():
    queue = asyncio.Queue()
    result = yield from select1(ok(), queue.get())
    print('got {}'.format(result))
    result = yield from select2(queue.get(), ok())
    print('got {}'.format(result))

if __name__ == ""__main__"":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(example())
"
csv writing within loop,"import csv
with open('large.csv','w') as f1:
    writer=csv.writer(f1, delimiter='\t',lineterminator='\n',)
    writer.writerow([''] + range(1000000))
    for i in range(1000000):
        row = [i] + [i + j*0.2 for j in range(i+1)]
        writer.writerow(row)
"
Converting a list of lists to a tuple in Python,"tuple(x for sublist in base_lists for x in sublist)
"
how do I clear a stringio object?,">>> from cStringIO import StringIO
>>> s = StringIO()
>>> s.write('foo')
>>> s.getvalue()
'foo'
>>> s.truncate(0)
>>> s.getvalue()
''
>>> s.write('bar')
>>> s.getvalue()
'bar'
"
Print a new line in between a list in python,"print(""\n\n"".join(""\n"".join(map(str,seq)) for seq in stuff if seq))
"
make a time delay,time.sleep(0.1)
Why does Python remove the last character of a string?,"In [38]: '{:b}'.format(66)
Out[38]: '1000010'
"
GDB cv::Mat python object issue when debugging a c++ program,"############################################################
#filename: cvplot.py
import gdb
import cv2.cv as cv
import sys


class PlotterCommand(gdb.Command):
    def __init__(self):
        super(PlotterCommand, self).__init__(""plot"",
                                             gdb.COMMAND_DATA,
                                             gdb.COMPLETE_SYMBOL)
    def invoke(self, arg, from_tty):
        args = gdb.string_to_argv(arg)


        # generally, we type ""plot someimage"" in the GDB commandline
        # where ""someimage"" is an instance of cv::Mat
        v = gdb.parse_and_eval(args[0])

        # the value v is a gdb.Value object of C++
        # code's cv::Mat, we need to translate to
        # a python object under cv2.cv
        image_size =  (v['cols'],v['rows'])
        # print v
        # these two below lines do not work. I don't know why
        # channel = gdb.execute(""call ""+ args[0] + "".channels()"", False, True)
        # channel = v.channels();
        CV_8U =0
        CV_8S =1
        CV_16U=2
        CV_16S=3
        CV_32S=4
        CV_32F=5
        CV_64F=6
        CV_USRTYPE1=7
        CV_CN_MAX = 512
        CV_CN_SHIFT = 3
        CV_MAT_CN_MASK = (CV_CN_MAX - 1) << CV_CN_SHIFT
        flags = v['flags']
        channel = (((flags) & CV_MAT_CN_MASK) >> CV_CN_SHIFT) + 1
        CV_DEPTH_MAX = (1 << CV_CN_SHIFT)
        CV_MAT_DEPTH_MASK = CV_DEPTH_MAX - 1
        depth = (flags) & CV_MAT_DEPTH_MASK
        IPL_DEPTH_SIGN = 0x80000000
        cv_elem_size = (((4<<28)|0x8442211) >> depth*4) & 15
        if (depth == CV_8S or depth == CV_16S or depth == CV_32S):
                mask = IPL_DEPTH_SIGN
        else:
                mask = 0
        ipl_depth = cv_elem_size*8 | mask     
        img = cv.CreateImageHeader(image_size, ipl_depth, channel)

        # conver the v['data'] type to ""char*"" type
        char_type = gdb.lookup_type(""char"")
        char_pointer_type =char_type.pointer()
        buffer = v['data'].cast(char_pointer_type)

        # read bytes from inferior's memory, because
        # we run the opencv-python module in GDB's own process
        # otherwise, we use memory corss processes        
        buf = v['step']['buf']
        bytes = buf[0] * v['rows'] # buf[0] is the step? Not quite sure.
        inferior = gdb.selected_inferior()
        mem = inferior.read_memory(buffer, bytes)

        # set the img's raw data
        cv.SetData(img, mem)

        # create a window, and show the image
        cv.NamedWindow('debugger')
        cv.ShowImage('debugger', img)

        # the below statement is necessory, otherwise, the Window
        # will hang
        cv.WaitKey(0) 

PlotterCommand()
############################################################
"
Python logging: use milliseconds in time format,"import logging
import datetime as dt

class MyFormatter(logging.Formatter):
    converter=dt.datetime.fromtimestamp
    def formatTime(self, record, datefmt=None):
        ct = self.converter(record.created)
        if datefmt:
            s = ct.strftime(datefmt)
        else:
            t = ct.strftime(""%Y-%m-%d %H:%M:%S"")
            s = ""%s,%03d"" % (t, record.msecs)
        return s

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

console = logging.StreamHandler()
logger.addHandler(console)

formatter = MyFormatter(fmt='%(asctime)s %(message)s',datefmt='%Y-%m-%d,%H:%M:%S.%f')
console.setFormatter(formatter)

logger.debug('Jackdaws love my big sphinx of quartz.')
# 2011-06-09,07:12:36.553554 Jackdaws love my big sphinx of quartz.
"
Iterate python dictionary to assign value to table's fields,"# inside the loop instead of iterating over the fields in the
# dict / row at hand, one could easily for instance do:
resp_json = json.loads(JSON_TEXT)
for d in resp_json['transacDet']:
    insert_row(**d)
"
How to use decorator to bind a argument to a staticmethod function?,"import contextlib
import functools

class Prof(object):
    def __init__(self, p='s'):
        self.p = p

    @staticmethod
    def do(x, obj=None):
        if obj is None:
            obj = Prof()
        obj.dprint(x)
        print

    def dprint(self, x):
        print self.p, x
        self.p += x

def wrapper(st):
    @contextlib.contextmanager
    def prof_context(obj):  # could also be defined outside of wrapper function
        # save current staticmethod and replace it with partial below
        saved_method, Prof.do = Prof.do, functools.partial(Prof.do, obj=obj)
        yield
        # undo staticmethod modification
        Prof.do = staticmethod(saved_method)

    def decorator(fn):
        @functools.wraps(fn)
        def wrapped():
            obj = Prof(st)
            print 'current: obj.p is %r' % obj.p
            with prof_context(obj):
                fn()

        return wrapped

    return decorator

def do_p():
    Prof.do('do')

@wrapper('do_p2')
def do_p2():
    Prof.do('do2')

print '#A do_p():'
do_p()
print '#B do_p2():'
do_p2()
print '#C do_p():'
do_p()
print '#D do_p2():'
do_p2()
print '#E do_p():'
do_p()
print '#F do_p():'
do_p()
"
Decrypting strings in Python that were encrypted with MCRYPT_RIJNDAEL_256 in PHP,"key = 'MyKey'
text = 'test'

encoded = encrypt(key, text)
print repr(encoded)
# prints 'I+KlvwIK2e690lPLDQMMUf5kfZmdZRIexYJp1SLWRJY='

decoded = decrypt(key, encoded)
print repr(decoded)
# prints 'test'
"
Most Logical Way (in Python) to Edit JSON file on disk,"import fileinput
for line in fileinput.input('thefile.name', inplace=True):
    line = transform(line)
    print line,
"
How to select a range of numbers to multiply an hourly wage by,"OVERTIMERATE = 1.5 # maybe 2?
first,last,hours,wage = line.split(',')
hours, wage = int(hours), float(wage) # Decimal is better here, but...
OTpay, regPay = 0,0 # initialize
while hours > 40:
    hours -= 1
    OTpay += wage*OVERTIMERATE
while hours > 0:
    hours -= 1
    regPay += wage
"
block repeat of random only for certain step through the random value,"last = ran #previous number
#generate new until it becomes different
while ran == last:
    ran = random.randrange(0,11)
"
Convert a string list to float32 efficiently,"#allocate memory (np.empty would work too and be marginally faster, 
#                 but probably not worth mentioning).
a=np.zeros((3000,300),dtype=np.float32)  
with open(filename) as f:
    for i,line in enumerate(f):
        a[i,:]=map(np.float32,line.split()) 
"
Match data in two files,"def find_files(directory, pattern):
    directory = ""c:\\TEST""
    for root, dirs, files in os.walk(directory):
        for basename in fnmatch.filter(files, pattern):
            yield os.path.join(root, basename)
"
Importing financial data into Python Pandas using read_csv,"import pandas as pd
import re
import decimal
D = decimal.Decimal

def make_parser(cls):
    def parse_commas(text):
        return cls(re.sub(r'[^-+\d.]', '', text))
    return parse_commas

to_int = make_parser(int)
to_decimal = make_parser(D)

data = pd.read_csv('data', parse_dates=[[0,1]], infer_datetime_format=True
                   , converters={4: to_int, 5: to_decimal, 6: to_int})

print(data)
"
RQ - Empty & Delete Queues,">>> from redis import Redis
>>> from rq import Queue
>>> qfail = Queue(""failed"", connection=Redis())
>>> qfail.count
8
>>> qfail.empty()
8L
>>> qfail.count
0
"
PANDAS: Trim multiple data frames,"In [4]: for i in range(len(L)):
            L[i] = L[i] + 1

In [5]: L
Out[5]: [2, 3, 4]
"
define three functions into one in python,"def Density_distribution(H0, Rh, r, z, rho0, Rc, Rd):
      return Density(float(rho0), r, Rc, Rd) * np.exp(-z / Thickness_H(H0, r, Rh))
"
pass an undefined method call to an attribute containing a different object,"class B(object):

    def func(self):
        print 'Inside B'

class A(object):

    def __init__(self):
        self.df = B()
        self.name = 'Charlie'

    def get_name(self):
        return self.name

    def __getattr__(self, attr):
        try:
            return getattr(self.df, attr)
        except AttributeError:
            #If attribute was not found in self.df, then try in self
            return object.__getattr__(self, attr)
"
RNA to PROTEIN program questions,"def validation_check():
    input_rna = raw_input(""Type RNA sequence: "").upper()
    if re.match(r""^[AUGCT]+$"", input_rna):
        print(""Correct! That is a valid sequence."")
        print translate(input_rna)
    else:
        print(""That is not a valid RNA sequence, please try again."")
        validation_check()
"
How to count items in list recursively,"b = ['d']
c = ['e', 'f']
h = []
a = [b,c,h]

def recur(l):
    if not l: # keep going until list is empty
        return 0
    else:
        return recur(l[1:]) + len(l[0]) # add length of list element 0 and move to next element

In [8]: recur(a)
Out[8]: 3
"
Is there a Python dict without values?,{(x ** 2) for x in range(100)}
Python Name Abreviation finding,"print("""".join(x for x in name if x.isalpha()))

print("""".join(x for x in name if x.isdigit())
"
Python .join() with a 2d array,">>> from itertools import izip
>>> foo = [[""a"", ""b""], [""c"", ""d""]]
>>> [''.join(a) for (a) in izip(*foo)]
['ac', 'bd']
"
How to release memory after replacing big data in python?,"with open(""file.txt"") as input:
    data=input.read()
"
How do I get a list of all parent tags in BeautifulSoup?,">>> [p.get('name') for p in bookmarks[0].findParents('folder')]
[u'folder2']

>>> [p.get('name') for p in bookmarks[0].findParents()]
[u'folder2', None]
"
How to add elements from a dictonary of lists in python,">>> map(sum, zip(*vd.values()))
[0, 1, 3]
"
Python Threading stdin/stdout,"class parser(threading.Thread):
    output_lock = threading.Lock()

    def __init__ (self, data_input):
        threading.Thread.__init__(self)
        self.data_input = data_input

    def run(self):
        for elem in self.data_input:
            time.sleep(3)
            with self.output_lock:
                print elem + 'Finished'
"
Multiprocessing with python3 only runs once,"def perform_distributed_processing(dbList, threads, processor_factory):
    with ProcessPoolExecutor(processes=threads) as executor:
        fs = (executor.submit(processor_factory, db) for db in dbList)
        yield from map(Future.result, as_completed(fs))
"
Python regex get text between last forward slash and then before first hyphen,">>> import re
>>> s = ""http://www.example.com/0/100013573/1585710-key-description-goes-here""
>>> m = re.search(r'^.*\/([^-]*)-.*$', s, re.M)
>>> m
<_sre.SRE_Match object at 0x7f8a51f07558>
>>> m.group(1)
'1585710'
>>> m = re.search(r'.*\/([^-]*)-.*', s)
>>> m.group(1)
'1585710'
>>> m = re.search(r'.*\/([^-]*)', s)
>>> m.group(1)
'1585710'
"
Regex - matching numbers between hyphens,"^[^-]*-([^-]*).*
"
Subclassing numpy ndarray problem,"import numpy as np

class Data(np.ndarray):

    def __new__(cls, inputarr):
        obj = np.asarray(inputarr).view(cls)
        return obj

    def remove_some(self, col, val):
        return self[self[col] != val]

z = np.array([(1,2,3), (4,5,6), (7,8,9)],
    dtype=[('a', int), ('b', int), ('c', int)])
d = Data(z)
d = d.remove_some('a', 4)
print(d)
"
"If string equals item from list a, followed by item from list b","import itertools
combinations = (''.join((first, second)) for first, second in itertools.product(a, b))
any('HelloWorld' == combination for combination in combinations)
"
How use mouse control with pygame?,"if pygame.MOUSEBUTTONDOWN in [event.type for event in pygame.event.get()]:
    run_your_animation()
"
Is this code simplified? Should I use more functions?,"for i in range(len(studentList)):
    alist = studentList[i]
    printGender(alist)
"
Create an empty HTML file using Python?,"with open('index.html', 'w') as f:
    f.write('')
"
Dataframe Indexing Issue?,"import pandas as pd
data = [[5, 7, 10], [7, 20, 4,], [8, 1, 6,]]
cities = ['Boston', 'Phoenix', 'New York']
df = pd.DataFrame(data, columns=cities, index=cities)

print df.unstack().idxmax()
"
How to safely divide code into functions without global vars in python,"def g(var1, var2):
    return 'qwe', var2

def h(var1, var2):
    return var1, 'asd'

def f(var1, var2, var3):
    var1, var2 = g(var1, var2)
    var1, var2 = h(var1, var2)  # h here sees ""updated"" values

# use as
f(var1, var2, var3)
"
How to extend this search-and-replace python script to accept variables from command line?,"parser = argparse.ArgumentParser()
parser.add_argument('infile', type=argparse.FileType('r'))
parser.add_argument('outfile', type=argparse.FileType('w'))

required, extra = parser.parse_known_args()
infile, outfile = required.infile, required.outfile

args = re.findall(pattern, infile.read())
infile.seek(0)

parser = argparse.ArgumentParser()
for arg in args:
    parser.add_argument('--' + arg.lower())

replacements = vars(parser.parse_args(extra))
"
Replace all quotes in a string with escaped quotes?,"print(s.encode('unicode-escape').replace('""', '\\""'))"
Graphical test of the correctness of an implementation,"from PIL import Image, ImageDraw
from math import pi

RED, GREEN, YELLOW = (255, 0, 0), (0, 255, 0), (127, 127, 0)
SIZE = (500, 500)

def overlap(ellipse1, ellipse2):
    im1 = Image.new(""RGB"", SIZE)
    ImageDraw.Draw(im1).ellipse(ellipse1, fill=RED)
    im2 = Image.new(""RGB"", SIZE)
    ImageDraw.Draw(im2).ellipse(ellipse2, fill=GREEN)
    im3 = Image.blend(im1, im2, 0.5)
    im3.show()
    im3.save('test.png', ""png"")
    return [count for count, color in im3.getcolors() if color == YELLOW][0]

area1 = overlap((0, 50, 500, 450), (50, 50, 450, 450))
area2 = pi * (200**2)
print ""overlap calc:"" , area1
print ""exact area:  "" , area2
print ""percent diff:"" , ((area1 - area2)/area2)*100
"
python pandas conditional count across columns,"( df > 0 ).sum(axis=1)
"
Mandelbrot-algorithm - Background color,"def palette_pseudocolor(val, minval, maxval, palette):
    max_index = len(palette)-1
    # convert val in range minval...maxval to range 0..max_index
    v = (float(val-minval) / (maxval-minval)) * max_index
    # split result into integer and fractional parts
    i = int(v); f = v-i
    # interpolate between two colors in the palette
    c0, c1 = palette[i], palette[min(i+1, max_index)]
    d = c1[0]-c0[0], c1[1]-c0[1], c1[2]-c0[2]
    return c0[0]+f*d[0], c0[1]+f*d[1], c0[2]+f*d[2]

if __name__ == '__main__':
    numsteps = 10
    palette = [(1,0,0), (0,1,0), (0,0,1)] # [RED, GREEN, BLUE]
    print 'val       R      G      B'
    for val in xrange(0, 100+numsteps, numsteps):
        print ('%3d -> (%.3f, %.3f, %.3f)' %
               ((val,) + palette_pseudocolor(val, 0, 100, palette)))
"
COUNTIF in pandas python over multiple columns with multiple conditions,"Solution
isY = lambda x:int(x=='Y')
countRiskFactors = lambda row: isY(row['Smoker']) + isY(row['Diabetes']) + int(row[""Age""]>45)

df['Risk_Factors'] = df.apply(countRiskFactors,axis=1)
"
"Colormap in Matplotlib without using the ""scatter"" function","import numpy as np
import matplotlib.pyplot as plt

xdata, ydata, zdata = np.random.random((3, 10))

cmap = plt.cm.gist_earth
norm = plt.Normalize(zdata.min(), zdata.max())

fig, ax = plt.subplots()
for x, y, z in zip(xdata, ydata, zdata):
    ax.plot([x], [y], marker='o', ms=20, color=cmap(norm(z)))

sm = plt.cm.ScalarMappable(norm, cmap)
sm.set_array(zdata)
fig.colorbar(sm)

plt.show()
"
"Python sys.argv to preserve ' ' or """"","$ cat test.py 
import sys
print sys.argv
$ python test.py blah='blah'
['test.py', 'blah=blah']
$ python test.py ""blah='blah'""
['test.py', ""blah='blah'""]
$ python test.py blah=""'blah'""
['test.py', ""blah='blah'""]
$ python test.py blah=\'blah\'
['test.py', ""blah='blah'""]
"
Slice numpy matrix using vectors as indices,">>> p = slice(1, 29)
>>> section = s[p, p]
>>> section.shape
(28L, 28L)
"
Regexp beginner: how to remove comma before a keyword?,"remove_commas = re.compile(r',(?=\s*FROM\b)', re.IGNORECASE)
str = remove_commas.sub('', str)
"
How can I display timedelta in hours:min:sec?,"def format_timedelta(td):
    minutes, seconds = divmod(td.seconds + td.days * 86400, 60)
    hours, minutes = divmod(minutes, 60)
    return '{:d}:{:02d}:{:02d}'.format(hours, minutes, seconds)
"
"Python metaclass behavior (not calling __new__), is there an explanation?","class D(type):
    def __new__(cls, name, bases, dct):
        print ""cls is:   "", cls
        print ""name is:  "", name
        print ""bases is: "", bases
        print ""dct is:   "", dct
        return type.__new__(cls, name, bases, dct)

class E(object):
    __metaclass__ = D

class F(E): pass

class A(object):
    pass
"
"Simple ""if"" statements in Python","for x in range(9):
    print ""this works""
print ""this doesn't work""
"
single line if statement - Python,"def val():
    if condition:
        return val_if_true
    else:
        return val_if_false
"
Python argparse: name parameters,"import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--rename', type=str, nargs=2, help='some help',
                    metavar=('OLDFILE', 'NEWFILE'))
args = parser.parse_args()
print(args)
"
Python Image Uploading with AjaxUpload,"request.FILES['file']
"
Python- Use value of pop as object name,"net_dict = {}

# ...

name = name_list.pop(0)
net_dict[name] = Net(userIP, userMask)
print(net_dict[name])
"
Change The Colour Of Python Text,"from termcolor import colored

print colored('hello', 'red'), colored('world', 'green')
"
All strings with list of characters?,"from itertools import product

def multiletters(seq, max_length):
    for n in range(1, max_length+1):
        for s in product(seq, repeat=n):
            yield ''.join(s)
"
Reading raw section with ConfigParser,"import email

cfg = \
""""""Load-Files: a,b,c
Export-Files: x,y,z

# Python code starts here
while 1:
    do_stuff()
""""""

msg = email.message_from_string(cfg)
print msg.items()
print
print msg.get_payload()
"
Split if not within brackets,"math_ops = {'+', '-', '*', '/'}

def parse(inval):
    groups = []
    braces = 0
    part = ''
    for c in f:
        # We add to braces count 
        if c == '(':
            braces += 1
        # We subtract from braces count
        elif c == ')':
            braces -= 1
        # If we are at a math symbol and our brace count is 0, we have a complete part.
        if c in math_ops and braces == 0:
            groups.append(part.strip())
            part = ''
            continue
        part += c
    if part:
        groups.append(part)
    return groups
"
Python - While Loop Locks Application,"from Tkinter import *
import tkMessageBox
import threading
import time
root = Tk()
root.geometry(""450x250+300+300"")
root.title(""Raspberry PI Test"")
print dir(root)
def myloop():
    def run():
        count = 0
        while (count < 500) and root.wm_state():
           print 'The count is:', count
           count = count + 1
           time.sleep(1)

        root.after(1,count_complete)
    thread = threading.Thread(target=run)
    thread.start()
def count_complete():
    print ""DONE COUNTING!! ... I am now back in the main thread""
def mymessage():
    tkMessageBox.showinfo(title=""Alert"", message=""Hello World!"")

buttonLoop = Button(root, text=""Start Loop"", command=myloop)
buttonLoop.place(x=5, y=15)

buttonMessage = Button(root, text=""Start Loop"", command=mymessage)
buttonMessage.place(x=85, y=15)


root.mainloop()
"
Python re.sub - replacing character when context does not match,"data = re.sub(r'\n(?!\d{8})', '', data)
"
What makes something iterable in python,"class MyList(object):
    def __init__(self):
        self.list = [42, 3.1415, ""Hello World!""]
    def __iter__(self):
        return iter(self.list)

m = MyList()
for x in m:
    print x
"
Compacting tuples from a QS,">>> items = (x[1] for x in data)
>>> list(zip(*[items]*2))
[('var1', 'stringA'), ('var2', ''), ('var3', 'stringC')]
"
"Howto sort alphanumerical values (a1,a2,a3,...) in a CSV line after line with Python","with open('file.txt') as f:                        
    for line in f:                                 
        print "","".join(sorted(line.rstrip().split(',')))
"
"Given two numpy arrays of same size, how to apply a function two each pair of elements at identical position?","
import numpy as np
from scipy import stats
np.random.seed(2016)
h, w = 3, 4

x=np.random.random_integers(4,9,(h,w))
y=np.random.random_integers(4,9,(h,w))

result = np.ones((h,w))
for row in range(h):
    result[row,:] = np.array([stats.binom_test(x[row,_], x[row,_]+y[row,_]) 
                              for _ in range(w)])

binom_test = np.vectorize(stats.binom_test)
result2 = binom_test(x, x+y)

assert np.allclose(result, result2)
print(result2)
"
Not sure what the Python documentation says about user-defined method objects here,">>> class Spam(object):
...     bar = Foo().bar  # *bound* method, taken from an instance of Foo
...
>>> Spam.bar
<bound method Foo.bar of <Instance of type <class '__main__.Foo'>>>
>>> Spam().bar
<bound method Foo.bar of <Instance of type <class '__main__.Foo'>>>
>>> Spam().bar()
""Method bound to <Instance of type <class '__main__.Foo'>>, from class Foo""
"
Search & replace a substring in python,"import re
def repl(matchobj):
    global counter
    replacementFor = {'{search-string1}': '{replace-string1}',
                      '{search-string2}': '{replace-string2}',
                      '{search-string3}': '{replace-string3}'}

    counter = counter+1
    if counter == 2: 
        return replacementFor.get(matchobj.group(0), matchobj.group(0))
    else: 
        return matchobj.group(0)

counter = 0
line = ""$lang['MY_KEY'] = '{search-string} wird in Analyse {search-string1} bercksichtigt'"";
print re.sub(r'{.*?}',repl,line)

counter = 0
line = ""$lang['MY_KEY'] = '{search-string} wird in Analyse {search-string3} bercksichtigt'"";
print re.sub(r'{.*?}',repl,line)
"
code objects in python - passing parameters,"class A(object):
    def __init__(self, name):
        self.name = name
    def f(self, param):
        print self.name, param

# just pass an instance as first parameter to a function or to an unbound method
func = types.FunctionType(A.f.__code__, globals={}, name='f')
func(A('a'), 2)
unbound_method = types.MethodType(func, None, A)
unbound_method(A('b'), 3)
# or bound the function to an instance
bound_method = types.MethodType(func, A('c'), A)
bound_method(4)
"
string replace vowels in python?,"''.join(char for char in word if char not in set('aeiouAEIOU'))
"
What type of declaration is `def m_test(x: my_var) -> list:`," -> list:
"
Appending to 2D lists in Python,listy = [[] for i in range(3)]
How could I design none square symbol in ncurses?,"import curses
stdscr = curses.initscr()

for i in range(10):
    stdscr.addch(i, 10-i, '/')
    stdscr.addch(i, 11 + i, '\\')

for i in range(2, 20):
    stdscr.addch(9, i, '_')

stdscr.getch()
"
"Python, remove all occurrences of string in list",">>> set(main_array) - set(second_array)
set(['cake', 'bacon', 'milk'])
"
Print if origin in tuple is [0] (python),"#!/usr/bin/env python

# use ""with"" to avoid having to close the file
with open(""datafile.txt"") as textFile:
    # get array containing all values in the file
    v = textFile.read().replace(',','').split()
    # extract the names into a separate tuple
    names = [tuple(filter(str.isalpha, v))]
    # make tuples out of each pair of values, replacing names with zeroes
    values = [(0,b) if a.isalpha() else (a,b) for a,b in zip(v[::2], v[1::2])]
    # concatenate the two
    values = names + values

print values
"
"How can I remove a substring, given a start and end token, in python?","import re
ref = re.compile(u'<ref.*?ref>', re.DOTALL)

ref.sub(u'', yourtext)
"
Pandas: Dealing with Boolean in Pivot Table,"In [13]:
df.ix[:,:'q3'].apply(pd.Series.value_counts)

Out[13]:
       q1  q2  q3
True    4   3   4
False   2   3   2
"
Django : get the last item of manytomanyfield,"def .. :
    u = request.user
    conversation_list = Conversation.objects.filter(Q(creatorr=u)|Q(destinataire=u)).preftech_related('messages')
    messages_dict =dict()
    for conversation in conversation_list:
        messages_dict.update({
            converstaion.id: conversation.messages.all()
        })
    last_message_list = list()
    for conversation_id, message_list in messages_dict.items():
        if message_list:
          last_message = messages_dict.get(conversation_id)[len(message_list) -1:]
          last_message_list.append(last_message)
          print(last_message.text)
"
lxml etree xmlparser namespace problem,"body=dom.xpath('//ns:Body',namespaces={'ns':'http://www.xxx.com/zzz/yyy'})
print(body)
# [<Element {http://www.xxx.com/zzz/yyy}Body at 90b2d4c>]
"
"How to keep ""spaces"" although dict contains it?","message = f.read().lower()
crypt = ''.join(i for i in message if i in monocrypt)
encrypted_message = [monocrypt[letter] for letter in crypt]
"
Dynamically Generating Pandas Views,"@property
def ix(self):
    return self.data.ix

def __getitem__(self, key):
    return self.data.__getitem__(key)
"
"Filtering results in python, I need one variable but only if based on another","for sender in snaps:
    if sender['media_type'] == 3:
        s.add_friend(sender)
"
"Compare strings, allowing one character difference","timeit.timeit('match(""0-0016ub5j2oi06u30tj30g6790v3nug[hoyj39867i6gy9thvb05y4b896y3n098vty98thn98qg5y4n8ygnqp"", ""0-0016ub5j2oi06u30tj30g6790v3gug[hoyj39867i6gy9thvb05y4b896y3n098vty98thn98qg5y4n8ygnqp"")', setup=""""""
def match(s1, s2):
    ok = False

    for c1, c2 in zip(s1, s2):
        if c1 != c2:
            if ok:
                return False
            else:
                ok = True

    return ok
"""""")
"
Asterisk triangle in python,"def asterix_triangle(i, t=0):
    if i == 0:
        return 0
    else:
        print ' ' * ( i + 1 ) + '*' * ( t * 2 + 1 )
        return asterix_triangle( i - 1, t + 1 )

asterix_triangle(5)
"
Python 3 - Associating two lists,"L1 = ['a', 'b', 'c']
L2 = [22, 21, 23]
x = zip(L2, L1)
x.sort()
L1 = zip(*x)[1]
print L1
"
How do I write a function that returns another function?,"import math
def make_cylinder_volume_func(r):
    def volume(h):
        return math.pi * r * r * h
    return volume
"
turn string to array python,"from ast import literal_eval
data = ""((145541L, u'/.stats/'), (175706L, u'///'))""
result = dict(literal_eval(data))
"
Create new numpy array-scalar of flexible dtype,"eval(str(values[0])) == eval(str(0,0,0))
"
Easier way of getting keyboard input in Pygame?,"if event.key in range(pygame.K_a, pygame.K_z + 1):
    command += event.unicode
"
Correlate a single time series with a large number of time series,"import numpy as np

# Rowwise mean of input arrays & subtract from input arrays themeselves
A_mA = A - A.mean(1)[:,None]
B_mB = B - B.mean()

# Sum of squares across rows
ssA = (A_mA**2).sum(1)
ssB = (B_mB**2).sum()

# Finally get corr coeff
out = np.dot(A_mA,B_mB.T).ravel()/np.sqrt(ssA*ssB)
# OR out = np.einsum('ij,j->i',A_mA,B_mB)/np.sqrt(ssA*ssB)
"
Setting the position of the insert character in the tkinter text widget,"t.mark_set('insert', '2.3')
"
Formatting data from Text (.prn) file,"interesting_rows = ['Bills', 'Notes', 'Total Public Debt Outstanding']  # add the initial part of any row you are interested at (without leading spaces)

mytext = get_data_text(2, 2013)  # gets the text for feb, 2013 as rows
data = keep_only_interesting_rows(mytext, interesting_rows)  # filter rows
final_data = convert_data_to_dict(data)  # convert remaining rows into a dict

print final_data
print final_data['Bills'][2]  # this gives you the third column


# >>> {'Notes': (7416574, 5888, 7422462), 'Bills': (1738404, 3546, 1741950), 'Total Public Debt Outstanding': (11822436, 4864853, 16687289)}
# >>> 1741950
"
Parsing strings and integers(w/sets) from a string to a list using python,"def custom_split(s):
    def int_range_expand(s):
        try:
            return [int(s)]
        except ValueError:
            try:
                start, end = map(int, s.split('-'))
                return range(start, end+1)
            except Exception:
                pass
        return [s]
    return sum(map(int_range_expand, s.split('.')), [])

>>> custom_split('Oreo.12.37-40.Apple.78')
['Oreo', 12, 37, 38, 39, 40, 'Apple', 78]
"
Spreadsheet Manipulation Tricks w/ Python's Pandas,"df['data_prime'] = df['data'] * 3
"
How to remove duplicate from string/mixed list,"x = set()
while True:
    data = input()
    if data.lower() == ""done"":
        break
    x.add(data)
x = list(x)
"
How to get frequency of specific character in a list?,">>> from collections import Counter
>>> lis = ['Name', 'Allen Doe', 'Jane Doe', 'Larry Hackman']
>>> Counter(y[-1][1] for y in (x.rsplit(None, 1) for x in lis) if len(y)>1)
Counter({'o': 2, 'a': 1})
"
Merge sliced lists,">>> from itertools import chain
>>> list(chain(*zip(l0, l1, l2)))
[1, 4, 9, 4, 10, 18]
"
Python: Enumerate a list of string 'keys' into ints,">>> label_to_number = {label: i for i, label in enumerate(set(labels), 1)}
>>> [(label_to_number[label], label) for label in labels]
[(2, 'brown'), (3, 'black'), (1, 'blue'), (2, 'brown'), (2, 'brown'), (3, 'black')]
"
How to join certain items in list,"lst = ['GATTACA', 'etc']
[x for x in ''.join(',' if not e else e for e in lst).split(',') if x]
"
How do I copy the formatting of a number to another number?,"strA = '0.8243'
strB = '12.3'
C = float(strA) + float(strB)
print '{:.{}f}'.format(C, len(strB.partition('.')[2]))
"
Truncate Python DateTime,">>> dt = datetime.datetime.now()
>>> dt = dt.replace(hour=0, minute=0, second=0, microsecond=0) # Returns a copy
>>> dt
datetime.datetime(2011, 3, 29, 0, 0)
"
Critique my prime_factors() function,"def factor(n, _memo={1: []}):
    """"""returns a list of the prime factors of integer n

       n must be > 0 (otherwise, raises ValueError).

       uses a stream of primes in increasing order generated
       by `primes.generator()` (q.v.).

       do **not** pass argument _memo, it's used for memoization
       (holding the list of factors for all ints that have already
        been factorized by this function in this process's past).
    """"""
    # get error cases out of the way first
    if n <= 0: raise ValueError(""Can't factor %r"" % n)
    # localmemo records all numbers which are being factorized
    # for the first time in this specific call to `factor`, each
    # with a list of corresponding factors found so far
    localmemo = {}
    # keep a copy of the original n since in the loop below n
    # gets decreased
    orgn = n
    p = primes.generator()  # yields an infinite iterable
    # look at each prime (the .send call below may cause a prime
    # to be looked at more than once since it's assumed to work
    # as a ""push back"" for this specific generator)
    for x in p:
        if n in _memo:  # we've factorized n already in the past
            # (or n is 1, which is always a key in _memo!)
            # so we're all done, mop up
            # every list of factors in localmemo gets all n's factors
            for k in localmemo:
                localmemo[k].extend(_memo[n])
            # add every localmemo list to _memo for future calls
            _memo.update(localmemo)
            # now orgn is in _memo (as it was in localmemo if it had
            # not already been in _memo it's been added) so we can just
            # index to get the corresponding list of factors
            return _memo[orgn]
        # start with an empty list since we don't know n's factors yet
        localmemo[n] = []
        if n % x == 0:  # x is a factor of n, so of everything we're factoring
            n = n/x
            for k in localmemo:
                localmemo[k].append(x)  # ...so add it to every entry in localmemo
            p.send(x)  # get `x` again next time (it might be a multiple factor!)
"
why doesnt this double loop work?,"def check_sudoku(n):
    for i in range(len(n)):
        for s in range(1, len(n)):
            if n[0][i]==n[s][i]:
                return False
    return True
"
python list.pop() modifies original list (not just copy),"from copy import deepcopy

copy = deepcopy(some_list)
"
Create variable key/value pairs with argparse (python),"parser.add_argument('--conf', nargs=2, action='append')"
Find items not in common between lists in Python,"set_b = set(b)
c = [i for i in a if i not in set_b] 
"
Grep a range of words from a text file python,"with open('infile') as f1, open('outfile', 'w') as f2:
    data = f1.read()
    match = re.search(r'my.*Alex', data, re.DOTALL)
    if match:
        f2.write(match.group())
"
Calculate the duration of overlapping time ranges using pandas,"# create dummy start/end dataframe
df = pd.DataFrame({'end':pd.Series([50, 100, 120, 150]), 'start':pd.Series([30, 0, 40, 130])})
df = df[['start', 'end']]
df = df.sort('start')

df['roll_end'] = df.end.cummax()
df.roll_end = df.roll_end.shift()

df['new_start'] = df.start
overlap = df.start - df.roll_end < 0
# if start is before rolling max end time then reset start to rolling max end time
df.new_start[overlap] = df.roll_end[overlap]

# if the new start is after end, then completely overlapping
print np.sum([x for x in df.end - df.new_start if x > 0])
"
Correct Style for Python Line breaks,"class Rectangle(Blob):

    def __init__(self, width, height,
                 color='black', emphasis=None, highlight=0):
        if (width == 0 and height == 0 and
            color == 'red' and emphasis == 'strong' or
            highlight > 100):
            raise ValueError(""sorry, you lose"")
        if width == 0 and height == 0 and (color == 'red' or
                                           emphasis is None):
            raise ValueError(""I don't think so -- values are %s, %s"" %
                             (width, height))
        Blob.__init__(self, width, height,
                      color, emphasis, highlight)
"
How to Plot ROC curve in pyhton,"import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm, datasets
from sklearn.metrics import roc_curve, auc
from sklearn.cross_validation import train_test_split
from sklearn.preprocessing import label_binarize
from sklearn.multiclass import OneVsRestClassifier
from scipy import interp

# Import some data to play with
iris = datasets.load_iris()
X = iris.data
y = iris.target

# Binarize the output
y = label_binarize(y, classes=[0, 1, 2])
n_classes = y.shape[1]

# Add noisy features to make the problem harder
random_state = np.random.RandomState(0)
n_samples, n_features = X.shape
X = np.c_[X, random_state.randn(n_samples, 200 * n_features)]

# shuffle and split training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.5,
                                                    random_state=0)

# Learn to predict each class against the other
classifier = OneVsRestClassifier(svm.SVC(kernel='linear', probability=True,
                                 random_state=random_state))
y_score = classifier.fit(X_train, y_train).decision_function(X_test)

# Compute ROC curve and ROC area for each class
fpr = dict()
tpr = dict()
roc_auc = dict()
for i in range(n_classes):
    fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i])
    roc_auc[i] = auc(fpr[i], tpr[i])

# Compute micro-average ROC curve and ROC area
fpr[""micro""], tpr[""micro""], _ = roc_curve(y_test.ravel(), y_score.ravel())
roc_auc[""micro""] = auc(fpr[""micro""], tpr[""micro""])


##############################################################################
# Plot of a ROC curve for a specific class
plt.figure()
plt.plot(fpr[2], tpr[2], label='ROC curve (area = %0.2f)' % roc_auc[2])
plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver operating characteristic example')
plt.legend(loc=""lower right"")
plt.show()


##############################################################################
# Plot ROC curves for the multiclass problem

# Compute macro-average ROC curve and ROC area

# First aggregate all false positive rates
all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))

# Then interpolate all ROC curves at this points
mean_tpr = np.zeros_like(all_fpr)
for i in range(n_classes):
    mean_tpr += interp(all_fpr, fpr[i], tpr[i])

# Finally average it and compute AUC
mean_tpr /= n_classes

fpr[""macro""] = all_fpr
tpr[""macro""] = mean_tpr
roc_auc[""macro""] = auc(fpr[""macro""], tpr[""macro""])

# Plot all ROC curves
plt.figure()
plt.plot(fpr[""micro""], tpr[""micro""],
         label='micro-average ROC curve (area = {0:0.2f})'
               ''.format(roc_auc[""micro""]),
         linewidth=2)

plt.plot(fpr[""macro""], tpr[""macro""],
         label='macro-average ROC curve (area = {0:0.2f})'
               ''.format(roc_auc[""macro""]),
         linewidth=2)

for i in range(n_classes):
    plt.plot(fpr[i], tpr[i], label='ROC curve of class {0} (area = {1:0.2f})'
                                   ''.format(i, roc_auc[i]))

plt.plot([0, 1], [0, 1], 'k--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Some extension of Receiver operating characteristic to multi-class')
plt.legend(loc=""lower right"")
plt.show()
"
bounding box of numpy array,"def bbox_rotate(bbox_in, angle, centre):

    rmin, rmax, cmin, cmax = bbox_in

    # bounding box corners in homogeneous coordinates
    xyz_in = np.array(([[cmin, cmin, cmax, cmax],
                        [rmin, rmax, rmin, rmax],
                        [   1,    1,    1,    1]]))

    # translate centre to origin
    cr, cc = centre
    cent2ori = np.eye(3)
    cent2ori[:2, 2] = -cr, -cc

    # rotate about the origin
    theta = np.deg2rad(angle)
    rmat = np.eye(3)
    rmat[:2, :2] = np.array([[ np.cos(theta),-np.sin(theta)],
                             [ np.sin(theta), np.cos(theta)]])

    # translate from origin back to centre
    ori2cent = np.eye(3)
    ori2cent[:2, 2] = cr, cc

    # combine transformations (rightmost matrix is applied first)
    xyz_out = ori2cent.dot(rmat).dot(cent2ori).dot(xyz_in)

    r, c = xyz_out[:2]

    rmin = int(r.min())
    rmax = int(r.max())
    cmin = int(c.min())
    cmax = int(c.max())

    return rmin, rmax, cmin, cmax
"
How to use the python make the Escape Sequence to Character Entities,">>> parser.unescape('&nbsp;')
u'\xa0'
"
"Return original value, python","import random

def obsfucate_function(default):
    if random.random() < 0.1:
        # 10% chance the default is picked
        return default
    return random.choice('!%&*#@')
"
How to check if a date time is before midday,"if dt.time() < datetime.time(12):
"
prepend a header to .csv file with python,"import datetime
import pandas.io.data as web

stocklist=['CCK','MSFT','AA','AAPL']
start = datetime.datetime(2015, 12, 21)
end = datetime.datetime(2015, 12, 31)
for stock in stocklist:
    data = web.DataReader(stock, 'google', start, end)
    data.to_csv('{}.csv'.format(stock))
"
How can I make a for-loop pyramid more concise in Python?,"def product(*args, **kwds):
    # product('ABCD', 'xy') --> Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --> 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
"
Script to assign varying numbers to ascii characters,"h_desired_index = 1200

ascii_table = list(map(chr, range(128)))
h_index = ascii_table.index('h')
delta_index = h_desired_index - h_index
new_table = {}

for index, character in enumerate(ascii_table):
    new_table[character] = index + delta_index
"
take next n lines from a file until EOF reached,"from itertools import islice, izip_longest

def grouper(iterable, n, fillvalue=None):
    args = [iter(iterable)] * n
    return izip_longest(fillvalue='', *args)

for dataset in grouper(read_csv('some.csv'), LIMIT):
    # call a func to create xml file with dataset
"
How to create mask with multiple alternative values (Pandas DataFrame)," print(f[(f[""xx""].isin((""a"",""b"")))])
"
What is the easiest way to get a list of whole factor pairs of a given integer?,"def f(val):
    return [(i, val / i) for i in range(1, int(val**0.5)+1) if val % i == 0]
"
How can I add columns in a data frame?,"cur_cab = pd.read_csv(
            path,
            sep="";"",
            header=None,
            parse_dates=[1],
            names=['cab_id', 'datetime', 'point'],
            skiprows=1)
"
Initialize parameter in recursive function in Python,"def is_prime_mers(step, result = None, modulo = None):
    result = 4 if result is None else result
    modulo = cunt_mersenne(step) if modulo is None else modulo
"
puzzled on how to slice a numpy array,"In [10]: a = np.arange(9).reshape(3,3)

In [11]: a
Out[11]: 
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])

In [12]: index = np.array([0,1,2])

In [13]: b = a[index, index]

In [14]: b
Out[14]: array([0, 4, 8])
"
How to save pictures with lower resolution in python?,"pylab.gca().set_rasterized(True)
"
beautifulsoup to retrieve the date,"import urllib2
from bs4 import BeautifulSoup

url = 'http://www.homedepot.com/p/Husky-41-in-16-Drawer-Tool-Chest-and-Cabinet-Set-HOTC4016B1QES/205080371'
soup = BeautifulSoup(urllib2.urlopen(url=url))

print [meta.get('content') for meta in soup.find_all('meta', itemprop='datePublished')]
"
Building class names from a list of strings,"def class_factory(classname):
    base_class = getattr(tk, classname)

    def __init__(self, parent, **kwargs):
        objparams, packparams = dispatch_parameters(self, **kwargs)
        base_class.__init__(self, parent, objparams)
        self.pack(packparams)

    return type(classname, (base_class, object), {'__init__': __init__})

for classname in [""Frame"", ""Label""]:
    globals()[classname] = class_factory(classname)
"
More efficient way to find top values in pandas dataframe column,"In [51]:
df1 = df.loc[df.groupby(['x'])['y'].apply(lambda x: x.iloc[-2:]).index.get_level_values(1)]
df1['y'] = df1.groupby('x')['y'].transform(lambda x: x.rank(method='first'))
df1
​
Out[51]:
     x  y
2  101  1
3  101  2
5  201  1
6  201  2
7  405  1
8  405  2
"
Get component from Array sqlite,"id = []
data = []
[(id.append(x[0]), data.append(x[2])) for x in fetched]
"
Django how to get haystack working with django-hvad,"class PostSearchForm(SearchForm):
    lan = forms.CharField(required=False)

    def search(self):
        sqs = super(PostSearchForm, self).search()
        if not self.is_valid():
            return self.no_query_found()
        if self.cleaned_data.get('lan'):
            sqs = sqs.filter(lan=self.cleaned_data['lan'])
        return sqs
"
How to find the most frequent words before and after a given word in a given text in python?,"text = """"""
A lake is a body of relatively still water of considerable size, localized in a basin, that is surrounded by land apart from a river, stream, or other form of moving water that serves to feed or drain the lake. Lakes are inland and not part of the ocean and therefore are distinct from lagoons, and are larger and deeper than ponds.[1][2] Lakes can be contrasted with rivers or streams, which are usually flowing. However most lakes are fed and drained by rivers and streams.
Natural lakes are generally found in mountainous areas, rift zones, and areas with ongoing glaciation. Other lakes are found in endorheic basins or along the courses of mature rivers. In some parts of the world there are many lakes because of chaotic drainage patterns left over from the last Ice Age. All lakes are temporary over geologic time scales, as they will slowly fill in with sediments or spill out of the basin containing them.
Many lakes are artificial and are constructed for industrial or agricultural use, for hydro-electric power generation or domestic water supply, or for aesthetic or recreational purposes.
Etymology, meaning, and usage of ""lake""[edit]
Oeschinen Lake in the Swiss Alps
Lake Tahoe on the border of California and Nevada
The Caspian Sea is either the world's largest lake or a full-fledged sea.[3]
The word lake comes from Middle English lake (""lake, pond, waterway""), from Old English lacu (""pond, pool, stream""), from Proto-Germanic *lakō (""pond, ditch, slow moving stream""), from the Proto-Indo-European root *leǵ- (""to leak, drain""). Cognates include Dutch laak (""lake, pond, ditch""), Middle Low German lāke (""water pooled in a riverbed, puddle""), German Lache (""pool, puddle""), and Icelandic lækur (""slow flowing stream""). Also related are the English words leak and leach.
There is considerable uncertainty about defining the difference between lakes and ponds, and no current internationally accepted definition of either term across scientific disciplines or political boundaries exists.[4] For example, limnologists have defined lakes as water bodies which are simply a larger version of a pond, which can have wave action on the shoreline or where wind-induced turbulence plays a major role in mixing the water column. None of these definitions completely excludes ponds and all are difficult to measure. For this reason there has been increasing use made of simple size-based definitions to separate ponds and lakes. One definition of lake is a body of water of 2 hectares (5 acres) or more in area;[5]:331[6] however, others[who?] have defined lakes as waterbodies of 5 hectares (12 acres) and above,[citation needed] or 8 hectares (20 acres) and above[citation needed] (see also the definition of ""pond""). Charles Elton, one of the founders of ecology, regarded lakes as waterbodies of 40 hectares (99 acres) or more.[7] The term lake is also used to describe a feature such as Lake Eyre, which is a dry basin most of the time but may become filled under seasonal conditions of heavy rainfall. In common usage many lakes bear names ending with the word pond, and a lesser number of names ending with lake are in quasi-technical fact, ponds. One textbook illustrates this point with the following: ""In Newfoundland, for example, almost every lake is called a pond, whereas in Wisconsin, almost every pond is called a lake.""[8]
One hydrology book proposes to define it as a body of water with the following five chacteristics:[4]
it partially or totally fills one or several basins connected by straits[4]
has essentially the same water level in all parts (except for relatively short-lived variations caused by wind, varying ice cover, large inflows, etc.)[4]
it does not have regular intrusion of sea water[4]
a considerable portion of the sediment suspended in the water is captured by the basins (for this to happen they need to have a sufficiently small inflow-to-volume ratio)[4]
the area measured at the mean water level exceeds an arbitrarily chosen threshold (for instance, one hectare)[4]
With the exception of the sea water intrusion criterion, the other ones have been accepted or elaborated upon by other hydrology publications.[9][10]
"""""".split()

from nltk import bigrams

bgs = bigrams(text)
lake_bgs = filter(lambda item: item[0] == 'lake', bgs)

from collections import Counter
c = Counter(map(lambda item: item[1], lake_bgs))
print c.most_common()
"
How to remove content of <li>tags from HTML,"soup = BeautifulSoup(input_document)
for li in soup.find_all('li'):
    li.decompose()
"
Django Multiple Filter with list,"import operator
from django.db import Q
r.objects.filter(reduce(operator.or_, (Q(fruit_name__contains=i) for i in fruits)))
"
Python-Sqlalchemy Binary Column Type HEX() and UNHEX(),">>> session.query(Model).filter(Model.col == ""Iuri Diniz"").first()
Model(col='Iuri Diniz')
"
Supressing output with os.system(),"from os import devnull
from subprocess import call

if __name__ == ""__main__"":
    with open(devnull, 'w') as dn:
        call(['echo', 'hello'], stdout=dn, stderr=dn)
"
How to filter and take only one download link?,"import urllib
from bs4 import BeautifulSoup

url = ""http://www.microsoft.com/en-us/download/confirmation.aspx?id=17851""
pageurl = urllib.urlopen(url)
soup = BeautifulSoup(pageurl)

urls = []
for d in soup.select(""p.start-download [href]""):
    urls.append(d.attrs['href'])

print urls[0]
"
Importing same variable from multiple libraries,"variables = {mod_name: getattr(import_module(mod_name), 'var') for mod_name in module_list}
"
hints and stepping stone on how to tackle this,"def big_keys(dictionary, value):
  return [k for k, v in dictionary.iteritems() if v > value]
"
Why sorted list detection does not work in this situation?,"all([l[i] <= l[i+1] for i in xrange(len(l)-1)])
# False
"
"Transform an array of shape (n,) to a numpy array of shape (n,1)","array.reshape((-1,1))
"
Python slicing from last to first element?,"some_list[-1:-len(some_list)-1:-(len(some_list) - 1)]
"
Python: Getting baseclass values from derived class,"class myParent( object ):
    def customInit( self, customParam ):
        self.parentNumber = 5
        self.customParam = customParam

class Child( myParent ):
    def __init__( self, customParam ):
        self.childNumber = 4

p = Child()
p.customInit(10)
p.multiplyNumbers()
"
How to get all the meanings of a word using python NLTK?,">>> from nltk.tag import pos_tag
>>> sent = ""dog is barking at tree""
>>> [i for i in pos_tag(sent.split()) if i[1] == ""NN""]
[('dog', 'NN'), ('tree', 'NN')]
"
Transposing a 3d list (Python),">>> [zip(m4c[0][i], m4c[1][i]) for i in range(len(m4c[0]))]
[[('A ', 'E '), ('  ', 'F#'), ('  ', 'E '), ('  ', 'E '), ('  ', 'F#'), ('  ', 'E '), ('  ', '  '), ('  ', 'E ')],\
 [('B ', 'E '), ('  ', 'F#'), ('  ', 'E '), ('  ', 'E ')], \
 [('C ', 'E '), ('  ', 'F#'), ('  ', 'E '), ('  ', 'E '), ('  ', 'F#'), ('  ', '  '), ('  ', 'E '), ('  \n', 'F#')]]
"
How to let user pick colormap?,"color_func = matplotlib.cm.get_cmap(color_map_name)
"
Prefixing the results of string.split with the substring indices of each result,"list_of_strings = map(lambda l: '{}{}'.format(*l), result)
print('\n'.join(list_of_strings))
"
I'm trying to implement a valid Regex pattern,"args = (re.escape(userstring), re.escape(userStrHEX), re.escape(userStrASCII))
x = re.compile(""(%s|%s|%s)"" % args, re.IGNORECASE)
"
How to check user input in a list/tuple?,"Ch1 = ""Ch1 - Fox News""
Ch2 = ""Ch2 - PBS""
channels = {""CH1"":Ch1,""CH2"": Ch2}
new_ch = input(""What channel would you like to switch to?"")
What channel would you like to switch to?""ch1""
if new_ch.upper() in channels:
    print(""You're now on channel,"", channels[new_ch.upper()],""."")
else:
    print(""That's not a valid channel."")


 (""You're now on channel,"", 'Ch1 - Fox News', '.')
"
Replacing multiple occurences of a character in a string with python,"import re

s = ""goooooooooooooood""
print re.sub(r'(.)\1{2,}', r'\1', s)
"
Access parents variables in Python,"class SomeObject:
    def __init__(self):
         self.reference_=None

    def connect(self, reference):
        self.reference_=reference
    #code to access parents MyVar
    def call(self):
        self.reference_.MyVar=5

class MyClass:
    MyVar = 3
    MyObject = SomeObject()
    def connect(self):
        self.MyObject.connect(self)

if __name__ == '__main__':
    myclass = MyClass()
    myclass.connect()
    myclass.MyObject.call()
    print(myclass.MyVar)
"
Merging 2d arrays,"combined = dict()
for name in set(dictOne.keys() + dictTwo.keys() + dictThree.keys()):
  combined[name] = [ dictOne.get(name, 0), dictTwo.get(name, 0), dictThree.get(name, 0) ]
"
Eggs in path before PYTHONPATH environment variable,"import sys; sys.__plen = len(sys.path)
./gdata-2.0.14-py2.6.egg
import sys; new=sys.path[sys.__plen:]; del sys.path[sys.__plen:]; p=getattr(sys,'__egginsert',0); sys.path[p:p]=new; sys.__egginsert = p+len(new)
"
How to sort and subset a python dictionary with compound key?,"from itertools import groupby
from operator import itemgetter
sorted_keys = sorted(original_dict, key=lambda key: (key[0], -original_dict[key]))
for primary_key, key_group in groupby(sorted_keys, key=itemgetter(0)):
    print(primary_key, [key[1] for key in key_group])
"
Python ctypes align data structure,"def aligned_array(alignment, dtype, n):
    mask = alignment - 1
    if alignment == 0 or alignment & mask != 0:
        raise ValueError('alignment is not a power of 2')
    size = n * ctypes.sizeof(dtype) + mask
    buf = (ctypes.c_char * size)()
    misalignment = ctypes.addressof(buf) & mask
    if misalignment:
        offset = alignment - misalignment        
    else:
        offset = 0
    return (dtype * n).from_buffer(buf, offset)
"
Implementation of a function that finds the minimum of two values,"inNum = int(input(""Please enter a number.  0 to quit.""))
minNum = inNum
maxNum = inNum
theSum = inNum
while inNum != 0:
    inNum = int(input(""Please enter a number.  0 to quit.""))
    if inNum == 0:
        break
    minNum = minimum(minNum, inNum)
    maxNum = maximum(maxNum, inNum)
    theSum += inNum
print minNum, maxNum, theSum
"
How to attach debugger to a python subproccess?,ForkedPdb().set_trace()
"how to delete the ""u and ' ' "" before the of database table display by python",">>> rows = [
... (u'31/05/2013', u'11:10', u'$487'),
... (u'31/05/2013', u'11:11', u'$487'),
... (u'31/05/2013', u'11:13', u'$487'),
... (u'31/05/2013', u'11:19', u'$487'),
... ]
>>> for row in rows:
...     print u' {:<15} {:<8} {:<6}'.format(*row)
... 
 31/05/2013      11:10    $487  
 31/05/2013      11:11    $487  
 31/05/2013      11:13    $487  
 31/05/2013      11:19    $487  
"
Python: trying to lower a string and remove non-alphanumeric characters aside from space,"re.sub(r'[^\sa-zA-Z0-9]', '', text).lower().strip()
"
Unwanted whitespace left after having removed element from pretty-printed XML,"from lxml import etree

# Create a root element with 3 children 
root = etree.Element( ""root"" )
root.append( etree.Element( ""child1"" ) )
child2 = etree.SubElement( root, ""child2"" )
child2.text = 'CHILD2'
child3 = etree.SubElement( root, ""child3"" )
child3.text = 'CHILD3'

# Print the ""ugly"" XML (no whitespace)
print ""\n--- UGLY ---""
print etree.tostring(root)

# Print the ""pretty"" XML
print ""\n--- PRETTY ---""
pp = etree.tostring(root, pretty_print=True)
print pp

# Parse the pretty XML
tree = etree.fromstring(pp) 

# remove last child
tree.remove(tree[2])

print ""--- WITHOUT LAST CHILD PART 1 ---""
print etree.tostring(tree, pretty_print=True)

# Parse the pretty XML once again with parser option 'remove_blank_text=True'
tree = etree.fromstring(pp, etree.XMLParser(remove_blank_text=True)) 

# remove last child
tree.remove(tree[2])

print ""--- WITHOUT LAST CHILD PART 2 ---""
print etree.tostring(tree, pretty_print=True)
"
Python - How to join elements in a list that are separated by a certain value,"def join_by(it, sep):
    it = iter(it)
    prev = next(it)
    for elem in it:
        if elem == sep:
            prev += next(it)
        else:
            yield prev
            prev = elem
    yield prev
"
Python: Sorted merge using list comprehension,"upper_bound = float(""inf"") # any value that compares larger than all the values in both of your lists
peek_a = PeekIterator(a, upper_bound)
peek_b = PeekIterator(b, upper_bound)
merged = [next(peek_a) if peek_a.peek() <= peek_b.peek() else next(peek_b)
          for _ in range(len(a)+len(b))]
"
Printing list of list formating,"NONE = ''

Columns = 7
Rows = 6

def new_game_board() -> [[str]]:
   board = []
   for row in range(Rows):
       board.append([])
       for col in range(Columns):
           board[-1].append(NONE)
   return board

def print_board(board):
   print(''.join('%3i' % i for i in range(1, 1 + len(board[0]))))
   for item in board:
       print(''.join('%3s' % (v if v else '*') for v in item))

gb = new_game_board()
print_board(gb)
"
Python regex findall numbers and dots,"re.findall('Test([\\d.]*\\d+)', text)"
preserving order of function implementation,"import math

func_dict = {'square': lambda x: x**2,
             'cube': lambda x: x**3,
             'log': math.log}

def transform(value, transformation_list):
    for func_name in transformation_list:
        value = func_dict[func_name](value)
    return value
"
What's the short way to add same symbol at the specified place in ncurses?,"for c, r in zip(range(23,42), range(5,24)) :
  stdscr.addstr(c, r, '#')      
"
How to easily transition from Haskell to Python 3,"import re

def splitOn(*seps): return partial(re.split, '|'.join(re.escape(sep) for sep in seps))

transitions = imap(splitOn(',', '->'), drop(5, input))
"
How to store and retrieve meta-information in generator function object instance?,"class GenCl(object):
    def __init__(self, a, b, c):
        self.startPt = fn(a, b, c)

    def gen(self):
        startPt = self.startPt  # get the startPt calculated in __init__
        data = (yield None)
        while True:
            # perform some computation
            data = (yield result)

o = genCl(5, 6, 7)
startPt = o.startPt
f = o.gen()  # create the generator object
f.send(None)
for data in dataseries[startPt:]:
    k = f.send(data)
"
Animating a network graph to show the progress of an algorithm,"import networkx as nx
import matplotlib.pyplot as plt

def single_source_shortest_path(G,source):
    ax = plt.gca()
    canvas = ax.figure.canvas
    background = canvas.copy_from_bbox(ax.bbox)
    level=0                  # the current level
    nextlevel={source:1}       # list of nodes to check at next level
    paths={source:[source]}  # paths dictionary  (paths to key from source)
    G.node[source]['draw'].set_color('r')
    G.node[source]['draw'].set_alpha('1.0')
    while nextlevel:
        thislevel=nextlevel
        nextlevel={}
        for v in thislevel:
#            canvas.restore_region(background)
            s = G.node[v]['draw']
            s.set_color('r')
            s.set_alpha('1.0')
            for w in G[v]:
                if w not in paths:
                    n = G.node[w]['draw']
                    n.set_color('r')
                    n.set_alpha('1.0')
                    e = G[v][w]['draw']
                    e.set_alpha(1.0)
                    e.set_color('k')
                    ax.draw_artist(e)
                    ax.draw_artist(n)
                    ax.draw_artist(s)
                    paths[w]=paths[v]+[w]
                    nextlevel[w]=1
                    canvas.blit(ax.bbox)
        level=level+1
    return paths



if __name__=='__main__':

    G = nx.grid_2d_graph(10,10)
    pos = nx.graphviz_layout(G)
    cf = plt.figure(1, figsize=(8,8))
    ax = cf.add_axes((0,0,1,1))

    for n in G:
        G.node[n]['draw'] = nx.draw_networkx_nodes(G,pos,nodelist=[n], with_labels=False,node_size=200,alpha=0.2,node_color='k')
    for u,v in G.edges():
        G[u][v]['draw']=nx.draw_networkx_edges(G,pos,edgelist=[(u,v)],alpha=0.5,arrows=False,width=5)
    plt.ion()
    plt.show()

    path = single_source_shortest_path(G,source=(0,0))
"
Python list of booleans comparison gives strange results,">>> from operator import and_
>>> map(and_, a, b)
[True, True, False]
"
Merging 2 dicts with common elements in python,">>> states = {}
>>> for disease in seconddict['all_diseases']:
...     state = disease.pop('status')
...     states.setdefault(state, []).append(disease)
... 
>>> states
{'BV': [{'disease_name': 'Lupus', 'median': 240.0}, {'disease_name': 'Pulmonary Arterial Hypertension', 'median': 270.0}], 'CORR': [{'disease_name': 'Lupus', 'median': 480.0}, {'disease_name': 'Pulmonary Arterial Hypertension', 'median': 600.0}]}
>>> from pprint import pprint
>>> output = {'output': [
...     {'status': status, 'data': diseases}
...     for status, diseases in states.iteritems()]}
>>> pprint(output)
{'output': [{'data': [{'disease_name': 'Lupus', 'median': 240.0},
                      {'disease_name': 'Pulmonary Arterial Hypertension',
                       'median': 270.0}],
             'status': 'BV'},
            {'data': [{'disease_name': 'Lupus', 'median': 480.0},
                      {'disease_name': 'Pulmonary Arterial Hypertension',
                       'median': 600.0}],
             'status': 'CORR'}]}
"
"In Python, how do I know when a process is finished?","class AutoJoiningThread(threading.Thread):
    def run(self):
        threading.Thread.run(self)
        gobject.idle_add(self.join)
"
numpy and pandas timedelta error,"def year(dates):
    ""Return an array of the years given an array of datetime64s""
    return dates.astype('M8[Y]').astype('i8') + 1970

def month(dates):
    ""Return an array of the months given an array of datetime64s""
    return dates.astype('M8[M]').astype('i8') % 12 + 1

def day(dates):
    ""Return an array of the days of the month given an array of datetime64s""
    return (dates - dates.astype('M8[M]')) / np.timedelta64(1, 'D') + 1

def combine64(years, months=1, days=1, weeks=None, hours=None, minutes=None,
              seconds=None, milliseconds=None, microseconds=None, nanoseconds=None):
    years = np.asarray(years) - 1970
    months = np.asarray(months) - 1
    days = np.asarray(days) - 1
    types = ('<M8[Y]', '<m8[M]', '<m8[D]', '<m8[W]', '<m8[h]',
             '<m8[m]', '<m8[s]', '<m8[ms]', '<m8[us]', '<m8[ns]')
    vals = (years, months, days, weeks, hours, minutes, seconds,
            milliseconds, microseconds, nanoseconds)
    return sum(np.asarray(v, dtype=t) for t, v in zip(types, vals)
               if v is not None)

# break the datetime64 array into constituent parts
years, months, days = [f(dates_np) for f in (year, month, day)]
# recompose the datetime64 array after adding 1 to the years
dates3 = combine64(years+1, months, days)
"
django pass extra arguments to filterset_class,"class ProductFilter(django_filters.FilterSet):
    def __init__(self, attribute=None, **kwargs):
        super(ProductFilter, self).__init__(**kwargs)
"
python string to date ISO 8601,">>> import datetime as dt
>>> ds = '0104160F'
>>> parsed = dt.datetime.strptime(ds, ""%y%m%d0F"")
>>> parsed
datetime.datetime(2001, 4, 16, 0, 0)    
>>> reformatted = dt.datetime.strftime(parsed, ""%Y-%m-%d"")
>>> reformatted
'20010416'
"
Increase each list element in all possible ways,"def recurseadd(test):
    if test:
        return [test[False] + True] + recurseadd(test[True:])
    else:
        return test
"
Entry box text clear when pressed Tkinter,"import tkinter as tk

root = tk.Tk()
e = tk.Entry(root)
e.insert(0, ""some text"")

def some_callback(event): # note that you must include the event as an arg, even if you don't use it.
    e.delete(0, ""end"")
    return None

e.bind(""<Button-1>"", some_callback)

e.pack()
"
python file overwriting with os module,"from subprocess import check_call

check_call([""xcopy"",""/y"",sourceuserdata, destinationuserdata])
"
How to retrieve python list of SQLAlchemy result set?,"result = [r[0] for r in result]
"
Python: finding files with matching extensions or extensions with matching names in a list,"from itertools import groupby

def group_by_name(filenames):
    '''Puts the filenames in the given iterable into a dictionary where
    the key is the first component of the filename and the value is
    a list of the filenames with that component.'''
    keyfunc = lambda f: f.split('.', 1)[0]
    return dict( (k, list(g)) for k,g in groupby(
               sorted(filenames, key=keyfunc), key=keyfunc
           ) )
"
Regex Python findall. Making things nonredundant,"r'(?x) ATG (?: (?<=[AG].. ATG) | (?=G) ) (?:...){8,}? (?:TAA|TAG|TGA)'
"
split database record into variables,"row_type = namedtuple('row', [col.name for col in cursor.description])
for row in map(row_type._make, a):
    print(row.ID)
"
Iterating over list and appending value to new list,"for tweet in tweets: #contains list of dictionaries 
    text = tweet.get('text')
    if text is not None:
        matches = re.findall(r""#(\w+)"", text)
        # Test whether any matches were found
        if matches:
            tweet_text.append(matches)
"
Python Search within Lists within Lists,"for sublist in data:
    if search in sublist:
        print(""there"", sublist)
        break
else:
    print(""not there"")
"
Generating 3 billion-th element of a sequence in python,"class Singleton:
    def __init__(self, x):
        self.x = x

    def __getitem__(self, i):
        if not isinstance(i, int): raise TypeError(i)
        elif not (0 <= i < len(self)): raise IndexError(i)
        else: return self.x

    def __len__(self): return 1
"
Scrapy JSON export issues,"import urlparse

from scrapy.spider import BaseSpider
from scrapy.http.request import Request

from scrapy_demo.items import ScrapyDemoItem


class ScrapyDemoSpider(BaseSpider): 
    name = ""scrapy_demo""
    allowed_domains = [""buffalo.craigslist.org""]
    start_urls = ['http://buffalo.craigslist.org/search/cps/']

    def parse(self, response):
        # processing listings
        for listing in response.css('p.row > a[data-id]'):
            link = listing.xpath('@href').extract()[0]
            yield Request(urlparse.urljoin(response.url, link), callback=self.parse_listing_page)

        # following next page
        next_page = response.xpath('//a[contains(@class, ""next"")]/@href').extract()
        print next_page
        if next_page:
            yield Request(urlparse.urljoin(response.url, next_page[0]), callback=self.parse)

    def parse_listing_page(self, response):
        item = ScrapyDemoItem()
        item['link'] = response.url
        item['title'] = response.xpath('//title/text()').extract()[0].strip()
        item['content'] = response.xpath('//section[@id=""postingbody""]/text()').extract()[0].strip()
        yield item
"
Python: search and replace - string delineation issue,">>> content = ['aba', 'abanga', 'abaptiston', 'abarelix']
>>> unwanted_words = ['aba', 'aca', 'ada']
>>> [word for word in content if word not in unwanted_words]
['abanga', 'abaptiston', 'abarelix']
"
How to create a function that loops through both the key and item of a dictionary using variables in Python?,"for i, k in enumerate(sorted(d1.keys()), 1):
    print('table', i,  *d1[k])
"
Python read from file and remove non-ascii characters,"#!/usr/bin/env python
nonascii = bytearray(range(0x80, 0x100))
with open('d.txt','rb') as infile, open('d_parsed.txt','wb') as outfile:
    for line in infile: # b'\n'-separated lines (Linux, OSX, Windows)
        outfile.write(line.translate(None, nonascii))
"
How to check whether two lists are circularly identical in Python,"list1 = [1, 1, 1, 0, 0]
list2 = [1, 1, 0, 0, 1]
print ' '.join(map(str, list2)) in ' '.join(map(str, list1 * 2))
"
Are there function calls that can replace the for loops in this code?,"from numba import autojit

numba_D = autojit(oldcalc_D)

%timeit numba_D(I,nOcc,nVir,Ew)
10 loops, best of 3: 55.1 ms per loop
"
Remove specific characters from a string,"line = line.translate(string.maketrans('', ''), '!@#$')"
"Verifying If key or value exists in dictionary, works for char and fails for number","d = {'a':1, 'b':3, 8:'c'}

x = input()
from string import digits
if x in digits:
    x = int(x)
if x in d.values():
    print('In a dictionary', x)

if x in d:
    print (""In keys!"")
"
Distance of different points on a list,"valid_doors = {""door 1"" : 1.0, ""door 2"" : 2.0, ""door 3"" : 3.0, ""door 4"": 4.0}

x = raw_input(""Enter first door: "")
y = raw_input(""Enter second door: "")

if x in valid_doors and y in valid_doors:
    print abs(valid_doors[x] - valid_doors[y]) * 2.5
else:
    print 'not a door'
"
Python identify file with largest number as part of filename,">>> max(glob.glob('/tmp/file_??'))
'/tmp/file_03'
"
Order list of multiple items in Python by value,"highScoreList.sort(key=lambda x: (-x[1], x[2]))
"
Adding authentication header in python 3,"import urllib.request
req = urllib.request.Request('http://www.example.com/')
req.add_header('Referer', 'http://www.python.org/')
r = urllib.request.urlopen(req)
"
Python v3.3.5 maths questions program,"if (sign) == 2:
    if (answer) == number1+number2:
        score += 1
    else:
        pass
"
Getting the minimum from elements of a Numpy array and a float,"setup = 'from __main__ import np, input_a, input_b'
print(timeit.timeit('input_b[input_b > input_a] = input_a', setup=setup)) 
# 2.2448947575996456
print(timeit.timeit('np.where(input_b < input_a, input_b, input_a)', setup=setup)) 
# 5.35540746395358
"
"What is the proper way of deleting item from a dictionary  in ""for"" loop (Python)?","k = {x:v for x,v in k.iteritems() if x != 1}
"
or operator not working in python while loop,"s = False
i = 0
while (s == False) and (i < 100):
    i = i + 10
    s = False
    print 'Hello' , i
"
Can someone explain Python struct unpacking?,"with open('myfile.bin', 'rb') as f:
    with mmap.mmap(f, 0, access=mmap.ACCESS_READ) as m:
        for offset in range(0, m.size(), record.size):
            yield record.unpack_from(m, offset)
"
Is there a way to check a function's signature in Python?,"import inspect
len(inspect.getargspec(foo_func)[0])
"
"Retrieving data from a csv, and assigning the value at row x and column y to a variable. Py3.2, *homework*","import csv
with open (""lol.txt"",'rb') as f:
    csv_r = csv.reader (f)
    entries = [ (name, float(p1), float(p2)) for name, p1, p2 in csv_r]

for index, entry in enumerate(entries):
    print (""%2i. %-10s %5.2f %5.2f"" % (index, entry[0], entry[1], entry[2]))

choice = int(raw_input(""Choose a number: ""))

print (entries[choice])
"
Build diagonal matrix without using for loop,"%timeit np.eye(3000)
# 100 loops, best of 3: 3.12 ms per loop

%timeit sparse.eye(3000)
# 10000 loops, best of 3: 79.5 µs per loop
"
Why does this code not work? Python RE (regular expression),">>> response=urllib2.urlopen('http://www.tigerdirect.com/applications/Category/guidedSearch.asp?CatId=17&cm_sp=Masthead-_-Computers-_-Spot%2002')
>>> stuff=response.read()
>>> laptops= re.findall(r'<div class=""product"">.*?</div>',stuff)
>>> len(laptops)
16
"
using non-greedy qualifiers in regular expression '*?',">>> import re
>>> test = ""blade, coffeen,    , cardiac""
>>> re.split('[, ]*?', test)
['blade, coffeen,    , cardiac']
"
What are the empty strings of my readline() after split,">>> re.findall(r'([^\s]+)', 'hello world\n')
['hello', 'world']
"
How to skip text being used as column heading using python,"# reads the forth line into 1x1 df being a string, 
# then splits it and skips the first field:
col_names = pd.read_table('path', skiprows=3, nrows=1, header=None).iloc[0,0].split()[1:]
# reads the actual data:
df = pd.read_table('path', sep=' ', skiprows=4, names=col_names)
"
The pythonic way of printing a value,"def pairs(it):
    it = iter(it)
    for element in it:
        yield element, next(it)

for word1, word2 in pairs(tmpstr):
    print word1, word2
"
count each element in list without .count,"from collections import defaultdict
d = defaultdict(int)
for x in lVals:
    d[x] += 1
"
Passing arguments in function dynamically in Python 3,"for n in itertools.product(*([l] * (i+1))):
    ...
"
Use placeholder to delete rows code in mysql with python mysqldb,"print ""key:%(key)s value:%(value)s"" % {""key"":""key1"",""value"":""value1""}
print ""{{keep me}} key:{key} value:{value}"".format(**{""key"":""key1"",""value"":""value1""})
"
python split string every 3rd value but into a nested format,"def flatten(sequence):
    return [item for sublist in sequence for item in sublist]

>>> a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> flatten(a)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
"
Locating index of item via REGEX in Python,">>> bool(re.search(r'^[a-z]$', 'a',re.I))
True
>>> bool(re.search(r'^[a-z]$', 'B',re.I))
True
"
Select values from a set of arrays according to an array of permutations,"idx = permutations + 3*np.arange(N)[:,None]    
bb = aa.reshape(2,-1)[:,idx].reshape(2,N,3)
"
Python Remove Item from list,"new_dc_files = list()
for dc in dc_files:
    if 'NoCover' in dc:
         continue
    new_dc_files.append(dc)
"
Debugger attribute view for python,"class Token(object):
    def __init__(self, id):
        self.id = id
    def __repr__(self):
        return ""<Token %s>"" % self.id
"
"In a for loop, if my iterator satisfies a condition, how can I pass to the next iterator?","for item in list:
    if item != 10:
        do_something
"
How to repeat a function with change some variables inside of the function? PYTHON 3.4,"def example(box):
    box.delete(0, END)
    get = box.get()
    ...

for box in box1, box2, box3, box4:
    example(box)
"
"How can I create a matrix, or convert a 2D array into matrix in Python?",">>> a = np.zeros(shape=(6,6)) 
>>> ma = np.matrix(a)
>>> ma
matrix([[ 0.,  0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.,  0.],
        [ 0.,  0.,  0.,  0.,  0.,  0.]])
>>> ma[0,:]
matrix([[ 0.,  0.,  0.,  0.,  0.,  0.]])
"
How to quicky create array from  big file?,"inetnums=[(int(x) for x in line.rstrip('\n').split('\t')) for line in fin]
"
"Python 3: sort rows in 2D matrix, where columns are lists","import operator
sorted_list_of_rows = sorted(zip(*my_list_of_columns), key = operator.itemgetter(2,3))
list_of_columns = list(zip(*sorted_list_of_rows))
"
Python - order columns and compare rows in csv,">>> import csv
>>> from collections import defaultdict
>>> sample = '''\
... Sender A,Receiver G,43,Info...
... Sender H,Receiver R,43,Info...
... Sender A,Receiver G,27,Info...
... Sender N,Receiver Z,43,Info...
... Sender A,Receiver G,1367,Info...
... Sender R,Receiver P,43,Info...
... Sender A,Receiver G,43,Info...
... Sender H,Receiver R,111,Info...
... '''.splitlines(True)
>>> seen = defaultdict(list)
>>> reader = csv.reader(sample)
>>> for row in reader:
...     key = (row[0], row[1], row[2])  # sender, receiver, id
...     seen[key].append(row)
... 
>>> import sys
>>> writer = csv.writer(sys.stdout)
>>> for collected in seen.values():
...     if len(collected) > 1:
...         writer.writerows(collected)
... 
Sender A,Receiver G,43,Info...
Sender A,Receiver G,43,Info...
"
Concatenate or print list elements with a trailing comma in Python,"l = ['1', '2', '3', '4']  # original list
s = ' '.join(map(lambda x: '%s,' % x, l))
"
Algorithm - Grouping List in unique pairs,"def answer(L):
    return list(zip(L[:len(L)//2], L[len(L)//2:][::-1]))
"
Fill values in rows of a column based on a condition applied to another column in a data frame,"In [137]:
def func(x):
    return 'mapped' + str(x.first_valid_index())[-1]
df['status'] = df.ix[:, 1:].apply(func, axis=1)
df

Out[137]:
   ID  col1 col2 col3   status
0   1     1    A  NaN  mapped1
1   2     2  NaN    X  mapped1
2   3   NaN    C    Q  mapped2
3   4   NaN  NaN    S  mapped3
4   5     4    E  NaN  mapped1
"
fft and array-to-image / image-to-array-conversion,"import Image, numpy
i = Image.open('img.png')
i = i.convert('L')    #convert to grayscale
a = numpy.asarray(i)

b = numpy.fft.rfft2(a)
c = numpy.fft.irfft2(b)

j = Image.fromarray(c.astype(numpy.uint8))
j.save('img2.png')
"
Reading a file without newlines,"[line.rstrip('\n') for line in file]
"
Finding the rating of words using python,"file=open(""sir_try.txt"",""r"")
list_line=file.readlines()
file.close()
all_text=""""

dic={}
sent=""ensg""
temp_list=[]
for line in list_line:
    all_text=all_text+line
    name= line.rsplit()[0].strip()
    score=line.rsplit()[1].strip()
    dic[name]=score
for i in dic.keys():
    if sent in i:
        temp_list.append(dic[i])
hiegh_score=max(temp_list)

def check(index):
    reverse_text=all_text[index+1::-1]
    index2=reverse_text.find(""\n"")
    if sent==reverse_text[:index2+1][::-1][1:len(sent)+1]:
        return False
    else:
        return True

list_to_min=dic.values()
for i in temp_list:
    if i!=hiegh_score:
        index=all_text.find(str(i))
        while check(index):
            index=all_text.find(str(i),index+len(str(i)))
        all_text=all_text[0:index]+all_text[index+len(str(i)):]
        list_to_min.remove(str(i))
#write all text to ""sir_try.txt""
file2=open(""sir_try.txt"",""w"")
file2.write(all_text)
file2.close()
min_score= min(list_to_min)
for j in dic.keys():
    if min_score==dic[j]:
        print ""min score is :""+str(min_score)+"" for person ""+j
"
Django queryset that returns all unassigned fks,"self.fields['nut'].queryset = Nut.objects.exclude(
    pk__in=Bolt.objects.values('nut').query)
"
How to compare a return value of a recursive function with an integer (actual parameter of function),"def function(l, n=0, test=0, calls=0):
    if not l:
        return n == test if calls > 0 else False
    else:
        n += l[0]
        calls += 1
        return function(l[1:], n, test,calls)
"
Python 2.7: Faster/better way to extract all integer values from a string?,"import re

integers = re.compile(r'(?<!\S)\d+(?!\S)')
integers.findall(stringy)
"
BeautifulSoup: Get generic tags from a specific class only,"category = soup.find(""ol"", {""class"":""breadcrumb""}).findAll('li')[1:]
catname = BeautifulSoup(str(category).strip()).get_text().encode(""utf-8"")
"
Convert List to Int with Python,"phone_number = int(phone_number)
"
Basics of SymPy," >>> bool(a*(1+b) - (a+a*b) == 0) False  
"
Unable to store or print json data in exact same format,"#!/usr/bin/python
import json

ES = {
    ""settings"": {
        ""number_of_shards"" : ""1""
    },
    ""mappings"": {
        ""_default_"": {
            ""_timestamp_"": {
                ""enabled"" : ""true"",
                ""store"" : ""true""
            }
        }
    }
}

print json.dumps(ES,indent=2, separators=(',', ': '))
"
Python program to perform keyword matches for contents present in two files,"# these are the tokens:
tokens = set(['Natural', 'Language', 'Processing', 'with', 'PythonNatural', 'Language', 'Processingwith', 'PythonNatural', 'Language', 'Processing', 'with', 'Python', 'Editor', ':', 'Production', 'Editor', ':', 'Copyeditor'])

# create a set containing the keywords
with open('keywords.txt', 'r') as keywords:
    keyset = set(keywords.read().split())

# write outputfile
with open('matches.txt', 'w') as matches:
    for word in keyset:
        if word in tokens:
            matches.write(word + '\n')
"
How do I sort a zipped list in Python?,zipped.sort(key=lambda t: t[1])
"In Python, how can I naturally sort a list of alphanumeric strings such that alpha characters sort ahead of numeric characters?","re_natural = re.compile('[0-9]+|[^0-9]+')

def natural_key(s):
    return [(1, int(c)) if c.isdigit() else (0, c.lower()) for c in re_natural.findall(s)] + [s]

for case in test_cases:
    print case[1]
    print sorted(case[0], key=natural_key)

['a', 'b', 'c']
['a', 'b', 'c']
['A', 'b', 'C']
['A', 'b', 'C']
['a', 'B', 'r', '0', '9']
['a', 'B', 'r', '0', '9']
['a1', 'a2', 'a100', '1a', '10a']
['a1', 'a2', 'a100', '1a', '10a']
['alp1', 'alp2', 'alp10', 'ALP11', 'alp100', 'GAM', '1', '2', '100']
['alp1', 'alp2', 'alp10', 'ALP11', 'alp100', 'GAM', '1', '2', '100']
['A', 'a', 'b', 'r', '0', '9']
['A', 'a', 'b', 'r', '0', '9']
['ABc', 'Abc', 'abc']
['ABc', 'Abc', 'abc']
"
Can Python's shelve.open be called in a nested fashion?,"from weakref import WeakValueDictionary

_handle_dict = WeakValueDictionary()
def cache(filename):
    def decorating_function(user_function):
        def wrapper(*args, **kwds):
            args_key = str(hash(functools._make_key(args, kwds, typed=False)))
            func_key = '.'.join([user_function.__module__, user_function.__name__])
            key = func_key + args_key
            handle_name = ""{}_handle"".format(filename)
            if handle_name in _handle_dict:
                print(""Using open handle"")
                return _check_cache(_handle_dict[handle_name], key, 
                                    user_function, args, kwds)
            else:
                print(""Opening handle"")
                with shelve.open(filename, writeback=True) as c:
                    _handle_dict[handle_name] = c
                    return _check_cache(c, key, user_function, args, kwds)

        return functools.update_wrapper(wrapper, user_function)
    return decorating_function
"
Dump a Python dictionary with array value inside to CSV,"import csv
from collections import OrderedDict
d = OrderedDict()
d[""p1""] = [.1,.2,.3,.4]
d[""p2""] = [.4,.3,.2,.1]
d[""p3""] = [.5,.6,.7,.8]

with open(""out.csv"",""w"") as f:
    wr = csv.writer(f)
    wr.writerow(list(d))
    wr.writerows(zip(*d.values()))
"
Extracting Data From Multiple Dictionaries,"    for ip2 in phase2_hits:
        subdict2 = phase2_hits[ip2]
        phase2_ips = subdict2['ip.dst'] + subdict2['ip.src']
        overlap = [i for i in internal_ips if i in phase2_ips]
"
How to iterate over the elements of a map in python,">>> mapping = {'some': 2, 'example': 3, 'words': 5}
>>> mapping
{'some': 2, 'example': 3, 'words': 5}
>>> for key in sorted(mapping.keys()):
...   print key, mapping[key]
...
example 3
some 2
words 5
"
Transportation Algorithm in Python,"# Import PuLP modeler functions
from pulp import *

# INSTANCE
EDGES = [ (0,10), (0,20), (0,50), (0,30), (0,10), (0,40) ] # lower/upper flow
COSTS = [0.3, 0.7, 0.2, 0.6, 0.2, 0.5]
D1, D2 = [24, 10]

# MODEL
prob = LpProblem(""Problem"",LpMaximize)
# VARS
x11, x12, x13 = LpVariable(""x11"", *EDGES[0]), LpVariable(""x12"", *EDGES[1]), LpVariable(""x13"", *EDGES[2])
x21, x22, x23 = LpVariable(""x21"", *EDGES[3]), LpVariable(""x22"", *EDGES[4]), LpVariable(""x23"", *EDGES[5])
# OBJECTIVE FUNCTION -> added before constraints => important ,
prob += lpDot(COSTS, [x11,x12,x13,x21,x22,x23]), ""Costs""
# CONSTRAINTS
prob += x11 + x12 + x13 == D1
prob += x21 + x22 + x23 == D2

# SOLVE
status = prob.solve()

# PRINT SOLUTION
print LpStatus[status]
for var in [x11,x12,x13]:
    print value(var)
print
for var in [x21,x22,x23]:
    print value(var)
print(""Total Costs = "", value(prob.objective))
"
How to remove blank element in between non-blank elements in list?,"def consec(l):
    for k, v in groupby(l):
        lst = list(v)
        if len(lst) > 1 or lst[0]:
            for ele in lst:
                yield ele

myList[:] = (consec(myList))
print(myList)
"
Summing column values in panda and attaching or merging total to dataframe?,"print df1.sum()
33

df1.loc['Total'] = df1.sum()
print df1
A
bar      22
foo       6
zoo       5
Total    33
Name: D, dtype: int64
"
python iterate through list by string matching,"lis = ['fi', 'do', 'ca']

for item in lis:
   for name in glob.glob('*.html'):
      if item in name:
         with open(name) as k:
"
Removing points inside several polygons,"def inAnyPolygon(x,y,polygons):
  for p in polygons:
    if point_in_poly(x,y,p):
      return True
  return False
"
Changing all the values of a dictionary,"dictionary = {'one': 1, 'two': 2, 'three': 3}
number = 2
dictionary2 = {}

for i in dictionary:
    dictionary2[i] = dictionary[i]*number

print(dictionary2)
"
Escaping JavaScript Strings in Python,"def logIt(self, str):
    cmd = ""console.log({0});"".format(json.dumps(str))
    json.dumps({ ""script"": cmd })
"
If string does not contain any of list of strings in python,"exclude = ['lulz', 'lmfao', '.png']
filter_func = lambda s: 'http://' in s and not any(x in s for x in exclude)

matching_lines = filter(filter_func, string_list)
"
Add a click on QLineEdit,"class MyLineEdit(QtGui.QLineEdit):

    def __init__(self, parent):

        super(MyLineEdit, self).__init__(parent)
        self.parentWindow = parent

    def mousePressEvent(self, event):
        print 'forwarding to the main window'
        self.parentWindow.mousePressEvent(event)
"
Removing control characters from a string in python,return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')
How to select multiple non-contigous columns from a list into another dataframe in python,"df = rdd.map(lambda row: [row[i] for i in columns_num]).toDF()
df.show()

##  +---+---+
##  | _1| _4|
##  +---+---+
##  |  a|4.0|
##  |  b|5.0|
##  +---+---+
"
python string formatting fixed width,"num1 = 0.04154721841
num2 = 10.04154721841
num3 = 1002.04154721841

print ""{0:<12.11g}"".format(num1)[:12]
print ""{0:<12.11g}"".format(num2)[:12]
print ""{0:<12.11g}"".format(num3)[:12]
"
pandas: how to run a pivot with a multi-index?,"df.set_index(['year', 'month', 'item']).unstack(level=-1)"
Python regex remove string,">>> string = ""PHOTOThe text which should be present\n""
>>> string[5:-1]
'The text which should be present'
"
index by comparision of two numpy arrays in python,"In [173]:

a=[1,'aaa', 'bbb', 'vvv', 'www']
a *=100
b=[2,'qqq', 'bbb', 'ppp', 'www']
b *=100
A = np.array(a)
B = np.array(b)
%timeit (A==B).sum()
%timeit sum(A==B)
The slowest run took 2784.03 times longer than the fastest. This could mean that an intermediate result is being cached 
100000 loops, best of 3: 11.4 µs per loop
1000 loops, best of 3: 1.34 ms per loop
"
"Python Linux dmidecode, how to obtain HW info by Parsing?","import dmidecode
from pprint import pprint

def getBIOS():
    for v in dmidecode.bios().values():
        if type(v) == dict and v['dmi_type'] == 0:
            BIOSdict[""Name""] = str((v['data']['Vendor']))
            BIOSdict[""BuildNumber""] = str((v['data']['Version']))
            BIOSdict[""SoftwareElementID""] = str((v['data']['BIOS Revision'])
"
pandas dataframe count row values,">>> def create_dict(x):
...     d = defaultdict(int)
...     for c in x:
...         d[c] += 1
...     return d
>>> c = df[""path""].str.split("","").apply(create_dict)
>>> pd.DataFrame({n: c.apply(lambda x: x[n]) for n in wordlist})
   p1  p2  p3  p4  p5  p6  p7
0   1   1   1   1   0   0   0
1   2   1   0   0   0   0   0
2   1   0   0   0   2   0   1
3   1   1   2   0   0   0   0
"
Form a variable from a string without dictionary,"import MyTables
my_string = 'item'
table = getattr(MyTables, my_string.capitalize() + 'Table')
"
"How to extract text, with link and text after the link and another text after br with python","from itertools import takewhile
from bs4 import NavigableString

not_link = lambda t: getattr(t, 'name') not in ('a', 'strong')

for link in soup.find_all(""a""):
    print 'Link contents:'
    text = link.text.strip()
    for sibling in takewhile(not_link, link.next_siblings):
        if isinstance(sibling, NavigableString):
            text += unicode(sibling).strip()
        else:
            text += sibling.text.strip()
    print text
"
How to pass object as commandline argument in python?,"# app.py (adapted from examples in the Celery Getting Started tutorial
from celery import Celery

app = Celery('tasks', broker='amqp://guest@localhost//')

@app.task
def my_function(a, b):
    return a * b


# main.py
import app

result = app.my_function.delay(4, 5)
print result.get()
"
How do I specify different date ranges for CustomBusinessDays holidays in Pandas?,"nolectures=[pd.date_range(start='2015-03-28',end='2015-04-12'),  '2015-05-01', pd.date_range(start='2015-11-09',end='2015-12-31'),]
"
different encrypted versions on encrypting the same string using the same key,"e1 = ACR4.new('0123456789123456').encrypt
e2 = ACR4.new('0123456789123456').encrypt

assert e1(""abcd"") == e2(""abcd"")
"
Get pip/setuptools version of package from within the package?,"import os.path

here = os.path.abspath(os.path.dirname(__file__))

# Read the version number from a source file.
# Why read it, and not import?
# see https://groups.google.com/d/topic/pypa-dev/0PkjVpcxTzQ/discussion
def find_version(*file_paths):
    # Open in Latin-1 so that we avoid encoding errors.
    # Use codecs.open for Python 2 compatibility
    with codecs.open(os.path.join(here, *file_paths), 'r', 'latin1') as f:
        version_file = f.read()

    # The version line must have the form
    # __version__ = 'ver'
    version_match = re.search(r""^__version__ = ['\""]([^'\""]*)['\""]"",
                              version_file, re.M)
    if version_match:
        return version_match.group(1)
    raise RuntimeError(""Unable to find version string."")

setup(
    name=""sample"",
    version=find_version('sample', '__init__.py'),
    # ... etc
"
efficiently do weighted count the elements in the list,"from collections import Counter

dict1 = {1:[ ""red"",""blue"",""green""], 2: [""blue"",""blue"",""red""]}

weight = {1: 2, 2: 20}

score = 0

for k,v in dict1.iteritems():
    score += weight[k] * Counter(v)[""red""] * Counter(v)[""blue""]
"
"In Python, how can I read a yet-unknown number of lines from a txt file?","with open('<filename>','r') as f:
    numlines = int(f.readline())
    file_list = [f.readline().strip() for _ in range(numlines)]
"
How do you use Beautiful Soup to pull out list items that have certain class attributes?,"for h3 in soup.find_all('h3'):
    ul = h3.find_next_sibling('ul')
    lis = ul.findChildren('li')
    for i in range(3):
        print [h3.text, 
               lis[0].text, 
               lis[i].text]
"
creating list from separated lines,"with open(inputfile) as infile, open(outputfile, 'wb') as outfile:
    csvwriter = csv.writer(outfile)
    csvwriter.writerows(per_section(infile))
"
Optimize add row in xls file with xlwt,"from openpyxl import load_workbook
from time import time

#Load workbook
start_time = time()
wb = load_workbook('output.xlsx')
print('Elapsed time for loading workbook: %.2f' % (time.time()-start_time))    

#Read all data
start_time = time()
ws = wb.active
cell_range1 = ws['A1':'P20001']
cell_range2 = ws['Q1':'AF20001']
print('Elapsed time for reading workbook: %.2f' % (time.time()-start_time))    

#Save to a new workbook
start_time = time()
wb.save(""output_tmp.xlsx"")
print('Elapsed time for saving workbook:  %.2f' % (time.time()-start_time))    
"
Confused about an if statement in Learn Python the Hard Way ex41?,"sys.argv[1]
"
Python tuple list,"lst = [(1, 'a'), (2, 'b'), (2, 'c'), (3, 'd'), (3, 'e')]
lst.sort(key=lambda x: x[0])  #Only necessary if your list isn't sorted already.
new_lst = [list(v) for k,v in itertools.groupby(lst,key=lambda x:x[0])]
"
numpy arbitrary precision linear algebra,"from sympy import exp, N, S
from sympy.matrices import Matrix

data = [[S(""-800.21""),S(""-600.00"")],[S(""-600.00""),S(""-1000.48"")]]
m = Matrix(data)
ex = m.applyfunc(exp).applyfunc(lambda x:N(x, 100))
vecs = ex.eigenvects()
print vecs[0][0] # eigen value
print vecs[1][0] # eigen value
print vecs[0][2] # eigen vect
print vecs[1][2] # eigen vect
"
"I need help to structure the python csv to json in the following format, pease","import json

json_dict = {}
for arrival_date, data in df.groupby('ArrivalDate'):
    matching_dates = data[data.DepatureDate==arrival_date]
    not_matching_dates = data[data.DepatureDate!=arrival_date]
    json_dict[arrival_date.strftime('%Y-%m-%d')] = {}
    if not matching_dates.empty:
        for city, flights in matching_dates.groupby('Arrival'):
            json_dict[arrival_date.strftime('%Y-%m-%d')][city] = [str(v) for v in flights.ID.to_dict().values()]
    if not not_matching_dates.empty:
        for city, flights in not_matching_dates.groupby('Departure'):
            json_dict[arrival_date.strftime('%Y-%m-%d')][city] = [str(v) for v in flights.ID.to_dict().values()]
"
python 3.3 user input,"import sys

with open(sys.argv[1]) as fh:
    for line in fh:
        if ""admin_"" in line:
            print(line)
"
How to retrieve data using Python and MySQL connector,"passwords = dict([(row[""service""], row[""password""]) for row in cursor])
"
Python regex sub with 1 following paramter,">>> import re
>>> s = ""Take dog1 and dog5 to the dog kennel""
>>> m = re.sub(r'dog(\d)', r'animal_\1', s)
>>> m
'Take animal_1 and animal_5 to the dog kennel'
"
Parsing html for domain links,"url = 'domain.com/'
for domain in list:
    if url.startswith(domain):
        ... do something ...
"
Efficient way of counting True and False,">>> vals0 = [0, 0, 0, 0, 0]
>>> vals1 = [1, 1, 1, 1, 1]
>>> vals2 = [0, 1, 0, 1, 0]
>>> def category(vals):
...     if all(vals):
...         return 1
...     elif any(vals):
...         return 2
...     else:
...         return 0
... 
>>> category(vals0)
0
>>> category(vals1)
1
>>> category(vals2)
2
"
MATLAB to Python Conversion Arrays,"In [32]: np.arange(3,10+1)
Out[32]: array([ 3,  4,  5,  6,  7,  8,  9, 10])
"
How to call an element in an numpy array?,"print(arr[1, 1])"
list comprehension that converts the numbers to integers and turns the non-numeric values into 0,">>> [float(x) if re.match(r'[-+]?(\d*\.?\d+|\d+\.)$', x) else 0 for x in values]
"
"delete characters that are not letters, numbers, whitespace?","clean_string = ''.join(c for c in s if c.isalnum() or c.isspace())
"
Check if items in list a are found in list b and return list c with matching indexes of list b in Python,">>> [b.index(i) for i in a if i in b]
[1, 3]
"
Concatenate sequence from a predefined datastructure,">>> fsSchema = {'published': {'renders': {'SIM': ('fold1', 'fold2'), 'REN': ('fold1', 'fold2')}}}
>>> list(flatten(fsSchema))
['published\\renders\\REN\\fold1', 'published\\renders\\REN\\fold2', 'published\\renders\\SIM\\fold1', 'published\\renders\\SIM\\fold2']
"
Python/Numpy/Scipy: Draw Poisson random values with different lambda,">>> import matplotlib.pyplot
>>> count, bins, ignored = matplotlib.pyplot.hist(
            numpy.random.poisson(
                    lam=numpy.random.rand(1e6) + 10), 
                    14, normed=True)
>>> matplotlib.pyplot.show()
"
Python Simple Encryption program: How to loop Z back to A,"def encrypt(data, shift):
    result = ''
    for c in data:
        c_num = ord(c)

        #  is the letter lower case a - z?
        if (c_num >= ord('a')) and (c_num <= ord('z')):
            #  get the letter number from 0 - 26
            c_num = c_num - ord('a')
            # shift the number
            c_num += shift
            # wrap the number every 26 numbers
            c_num = c_num % 26
            # now increase a by the new amount
            c_num += ord('a')
            result += chr(c_num)

        #  is the letter upper case A - Z?
        elif (c_num >= ord('A')) and (c_num <= ord('Z')):
            #  get the letter number from 0 - 26
            c_num = c_num - ord('A')
            # shift the number
            c_num += shift
            # wrap the number every 26 numbers
            c_num = c_num % 26
            # now increase a by the new amount
            c_num += ord('A')
            result += chr(c_num)

    return result

encrypt('aAbB', 2)
'cCdD'

encrypt('afZz', 2)
'chBb'
"
"Spark DataFrame TimestampType - how to get Year, Month, Day values from field?","elevDF = sqlContext.createDataFrame(sc.parallelize([
        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=1, value=638.55),
        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=2, value=638.55),
        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=3, value=638.55),
        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=4, value=638.55),
        Row(date=datetime.datetime(1984, 1, 1, 0, 0), hour=5, value=638.55)]))

(elevDF
 .map(lambda (date, hour, value): (date.year, date.month, date.day))
 .collect())
"
Ramping Joystick values over time,"def simple(value, target):
    if value < target:
        value = min(value + 1, target)
    else:
        value = max(value - 1, target)
    return value
"
Using descriptors in unhashable classes - python,"class MyDescriptor(object):

    def __get__(self, inst, cls):
        if inst is None: return self, cls
        try:
            ca = inst.__the_ca
        except AttributeError:
            ca = inst.__the_ca = CountingAttribute()
        ca.count += 1
        return ca
"
For every x number of files; create new directory and move files -- using Python,"import itertools
def grouper(S, n):
    iterator = iter(S)
    while True:
        items = list(itertools.islice(iterator, n))
        if len(items) == 0:
            break
        yield items
"
Scraperwiki Python Loop Issue,"for entry in dom.cssselect('.downloads a'):
    document = {
        'title': entry.text_content(),
        'url': entry.get('href')
    }
    print document
"
Delete subgroup from HDF5 file in Python,"import numpy as np
import h5py
import os

path = 'file1.hdf5'
with h5py.File(path, ""w"") as myfile:
    data = np.random.rand(int(1e6))
    myfile.create_dataset(""MyDataSet"", data=data)
    print(os.path.getsize(path))

with h5py.File(path, ""a"") as myfile:
    del myfile[""MyDataSet""]
    try:
        myfile[""MyDataSet""].value
    except KeyError as err:
        # print(err)
        pass

print(os.path.getsize(path))
"
Cannot execute auto-generated Python script encoded in UTF8-sig,"#!/usr/bin/python2
import codecs
with codecs.open('y.py', 'w', 'utf-8-sig') as outputFile:
    outputFile.write(u'#!/usr/bin/python2\n')
    outputFile.write(u'\n')
    outputFile.write(u'# ' + u'Syst\xe9m' + u'\n')
    outputFile.write(u'print \'Hello, World!\'\n')
"
custom sort a list of list of numbers in ascending order,"import operator
sorted(rows, key=operator.itemgetter(0))
"
How come when I move a python file into scipy.stats folder in ubuntu it disappears?,">>> import sys
>>> for i in sys.path:
...     print i
...
"
Converting string to float,"def sum_col(filename, colnum):
    with open(filename) as inf:
        columns = zip(*[line.strip() for line in inf])
        return sum([int(num) for num in list(columns)[colnum]])
"
Python - Result returns generator instead of list (comprehension),"from itertools import product
[x_o_r(zip(list(a), list(b))) for a, b in product(x, repeat=2)]
"
"Python generate all possible configurations of numbers on a ""board""",">>> from itertools import product, combinations
>>> n = 3 # 3x3
>>> m = 2 # 2 tents
>>> for i in combinations(range(n*n), m):
...    print [[0 if x*n+y in i else 1 for x in range(n)] for y in range(n)]
... 
[[0, 1, 1], [0, 1, 1], [1, 1, 1]]
[[0, 1, 1], [1, 1, 1], [0, 1, 1]]
[[0, 0, 1], [1, 1, 1], [1, 1, 1]]
[[0, 1, 1], [1, 0, 1], [1, 1, 1]]
[[0, 1, 1], [1, 1, 1], [1, 0, 1]]
[[0, 1, 0], [1, 1, 1], [1, 1, 1]]
[[0, 1, 1], [1, 1, 0], [1, 1, 1]]
[[0, 1, 1], [1, 1, 1], [1, 1, 0]]
[[1, 1, 1], [0, 1, 1], [0, 1, 1]]
[[1, 0, 1], [0, 1, 1], [1, 1, 1]]
[[1, 1, 1], [0, 0, 1], [1, 1, 1]]
[[1, 1, 1], [0, 1, 1], [1, 0, 1]]
[[1, 1, 0], [0, 1, 1], [1, 1, 1]]
[[1, 1, 1], [0, 1, 0], [1, 1, 1]]
[[1, 1, 1], [0, 1, 1], [1, 1, 0]]
[[1, 0, 1], [1, 1, 1], [0, 1, 1]]
[[1, 1, 1], [1, 0, 1], [0, 1, 1]]
[[1, 1, 1], [1, 1, 1], [0, 0, 1]]
[[1, 1, 0], [1, 1, 1], [0, 1, 1]]
[[1, 1, 1], [1, 1, 0], [0, 1, 1]]
[[1, 1, 1], [1, 1, 1], [0, 1, 0]]
[[1, 0, 1], [1, 0, 1], [1, 1, 1]]
[[1, 0, 1], [1, 1, 1], [1, 0, 1]]
[[1, 0, 0], [1, 1, 1], [1, 1, 1]]
[[1, 0, 1], [1, 1, 0], [1, 1, 1]]
[[1, 0, 1], [1, 1, 1], [1, 1, 0]]
[[1, 1, 1], [1, 0, 1], [1, 0, 1]]
[[1, 1, 0], [1, 0, 1], [1, 1, 1]]
[[1, 1, 1], [1, 0, 0], [1, 1, 1]]
[[1, 1, 1], [1, 0, 1], [1, 1, 0]]
[[1, 1, 0], [1, 1, 1], [1, 0, 1]]
[[1, 1, 1], [1, 1, 0], [1, 0, 1]]
[[1, 1, 1], [1, 1, 1], [1, 0, 0]]
[[1, 1, 0], [1, 1, 0], [1, 1, 1]]
[[1, 1, 0], [1, 1, 1], [1, 1, 0]]
[[1, 1, 1], [1, 1, 0], [1, 1, 0]]
"
Python: Opening a file within a print() function,"with open('file.txt', 'r') as f:
    for line in f:
        print(line, end='')
"
generic code to reverse alternate words in a sentence using python,"s = 'aspire systems is in america'
li = s.split(' ') #[""aspire"", ""systems"", ""is"", ""in"", ""america""]
#Reverse alternate words
for index in range (0,len(li),2): #0, 2, 4
    li[index] = reversed(li[index])
print ' '.join(reversed(li)) #Should print expected result
"
