intent,snippet
converting bash/shell line into python 2.6,"from subprocess import Popen, PIPE
p1 = Popen([""cat"",""/proc/meminfo""], stdout=PIPE)
p2 = Popen([""egrep"", 'MemTotal|MemFree|Cached|SwapTotal|SwapFree|AnonPages|Dirty|Writeback|PageTables|HugePages_' ], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()  
p3 = Popen([""awk"",""{ print $2}""],stdin=p2.stdout,stdout=PIPE)
p2.stdout.close()
p4 = Popen([""pr"", ""-t"", ""-T"", ""--columns=15"", ""--width=240""],stdin=p3.stdout,stdout=PIPE)
p3.stdout.close()

output = p4.communicate()
print(output[0])
"
"In Python, how to list all characters matched by POSIX extended regex `[:space:]`?",">>> s = u''.join(unichr(c) for c in xrange(sys.maxunicode+1))
>>> import re
>>> re.findall(r'\s', s)
[u'\t', u'\n', u'\x0b', u'\x0c', u'\r', u' ']
"
Tell consumers to stop waiting for queue elements,"import uuid

class Sentinel:
    def __init__(self):
        self.id = uuid.uuid4()

    def __eq__(self, other):
        if isinstance(other, Sentinel):
            return self.id == other.id

        return NotImplemented
"
Working with python dictionaries,"def func(mystr):
  b = {'a':'b','c':'d','e':'f'}
  return [b[k] for k in mystr if k in b]
"
Python MySQLdb: How to get the result of a sql select having a group by into a dict?,"query = ""select date, sum(a) from table group by date""
cursor.execute (query, queryParameters)
result = dict(cursor.fetchall())
"
Django query with contains and keywords,"result = []
for keyword in keywords.split(' '):
    result += list(Table.objects.filter(name__icontains=keyword))
"
Merge many tsv files by common key using Python pandas,"df1 = pandas.read_csv(""path/to/test1.vmat"", sep='\t', parse_dates=False,
                                            index_col='CHROM:POS:REF:ALT')


In [11]: df1.join([df2], how='outer')
Out[11]: 
             144-93-02  144-93-01
1:14522:G:A        NaN          1
1:14653:C:T          1          1
1:14677:G:A          1        NaN
1:14907:A:G          1          1
"
List cross-identification,"l1 = [ [1,2,'ID123'], [3,4,'ID888'], [2,7, 'ID673'] ]
l2 = [ [3,5,'ID123'], [5,7, 'ID673'],[13,4,'ID456'] ]
tab = [l1, l2]
count = len(tab)
dic = {}
for i in range(0, count):
    for e in range(0, len(tab[i])):
        if not (tab[i][e][2] in dic):
            dic[tab[i][e][2]] = []    
        dic[tab[i][e][2]].append((i, e))

print dic
"
How to use git blame in GitPython?,"for commit, lines in repo.blame('HEAD', filepath):
    print(""%s changed these lines: %s"" % (commit, lines))
"
Pandas: Delete rows based on multiple columns values,"df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()"
Why won't pygame draw a circle?,"mouse_clicks = set()

while True:

    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit

        if event.type == MOUSEBUTTONDOWN:
            mouse_clicks.add(pygame.mouse.get_pos())

        elif event.type == KEYDOWN and event.unicode == 'c':
            # clear the circle when pressing the 'c' key
            mouse_clicks.clear()

    screen.blit(background,(0,0))
    x,y = pygame.mouse.get_pos()
    x -= mousec.get_width()/2
    y -= mousec.get_height()/2

    screen.blit(mousec, (x,y))

    for pos in mouse_clicks:
        color = (100,100,100)
        posx,posy = pos
        pygame.draw.circle(screen, color, (posx,posy), 50)

    pygame.display.update()
"
python matplotlib dash-dot-dot - how to?,"import matplotlib.pyplot as plt

line, = plt.plot([1,5,2,4], '-')
line.set_dashes([8, 4, 2, 4, 2, 4]) 
plt.show()
"
filter words from one text file in another text file?,"from string import punctuation
with open('ttext.txt') as text,  open('filterlist.txt') as filter_words:
    st = set(word.lower().rstrip(punctuation+""\n"") for word in  filter_words)
    txt = next(text).lower().split()
    out = [word  for word in txt if word not in st]
"
Efficiently determine if a number out of a range of subsequent numbers is in an ordered list. (in Python),"import bisect
def intersect_range(lst, start, stop):
     start_i = bisect.bisect_left(lst, start)
     stop_i = bisect.bisect_left(lst, stop)
     if start_i == stop_i:
         return None
     else:
         return lst[start_i]

intersect_range([1,2,3,7,8,10,15], 5, 10)
=> 7
intersect_range([1,2,3,7,8,10,15], 5, 6)
=> None
intersect_range([1,2,3,7,8,10,15], 15,30)
=> 15
intersect_range([1,2,3,7,8,10,15], 0,1) # ""stop"" is excluded from range
=> None
"
Python: How to warn user of duplicate value in list,"## Creating the results list
results = list()

## Casting the string input to int()
amount_of_numbers = int(input(""Please enter the amount of numbers: ""))

## While lenght of results is lower than the provided amount of numbers
while len(results) < amount_of_numbers:

    ## Casting the string input to int() since we want to store it as an integer and not as a string
    userNumber = int(input(""Please input a number: ""))

    ## If the input number is not already in results list
    if userNumber not in results:
        ## Appending the input number to results list
        results.append(userNumber)
    else:
        ## Printing a message saying that the number already exists in results list
        print ""{} has already been entered"".format(userNumber)
## Printing results list
print (results)
"
Memoization Usage/Cache Storing,"call_cacheK = {}

def callTest(n, k):
    if (n, k) in call_cacheK:
        return call_cacheK[(n, k)]  
    if k == 0:
        return 1
    elif k == n:
        return 1 
    elif (1 <= k) and (k <= (n-1)):
        result = ((callTest(n-1, k) + callTest(n-1, k-1)))
        call_cacheK[(n, k)] = result
    print(result)
    return result
"
Save 2d numpy array to R file format using rpy2,"import numpy as np
from rpy2.robjects import r
import pandas.rpy.common as com
from pandas import DataFrame
a = np.array([range(5), range(5)])
df = DataFrame(a)
df = com.convert_to_r_dataframe(df)
r.assign(""foo"", df)
r(""save(foo, file='here.gzip', compress=TRUE)"")
"
How to use symbolic group name using re.findall(),"print [m.groupdict() for m in re.finditer('toto=(?P<toto>\d+)\,\sbip=(?P<bip>\w+)', my_str)]
"
Search patern to include square brackets,">>> ss = 'hello string [processing] in python.'  
>>>re.compile(r'\b({0})\b'.format(re.escape('[processing]')),flags=re.IGNORECASE).search(ss)
>>> 
>>>re.compile(r'({})'.format(re.escape('[processing]')),flags=re.IGNORECASE).search(ss).group(0)
'[processing]'
"
How to make a dictionary from list,"d = {k: [] for k in l}
d = {k: 1 for k in l}
"
Criteria for combining two list items,">>> text=[""open"",""funny."",""reddit.com""]
>>> print """".join([e for e in text if e.endswith((""."","".com"","".net"","".org"","".edu"","".gov""))])
funny.reddit.com
"
Efficient iteration over slice in Python,">>> from itertools import islice
>>> lis = range(20)
>>> for x in islice(lis, 10, None, 1):
...     print x
...     
10
11
12
13
14
15
16
17
18
19
"
Best way to regroup a string into a list of 2-character string,"data = ""0xb1ca2a3e4fac""[2:]
"
How can I update a variable to keep track of the current value minus the previous value in Python?,"previous_val = 0
file = open(""text.txt"",""r"")
for line in file:
    current = float(line.strip())
    print current - previous_val
    previous_val = current  
"
"what is the regular expression that matches from one substring to a second one, without another one in between?",">>> import re
>>> s = """"""fooblahblahbar
... fooblahbazbar""""""
>>> m = re.findall(r'foo(?:(?!baz).)*bar', s, re.M)
>>> m
['fooblahblahbar']
"
Reading words from a file and putting into list,"huge_list = []

with open(huge_file, ""r"") as f:
    for line in f:
        huge_list.extend(line.split())
"
"Python re.compile, split string into two while preserving delimiter",">>> foo = re.compile(r'(?<=^\(NTUSER\.DAT\)) |(?<=^\(All\)) |(?<=^\(NTUSER\.DAT;Software\)) |(?<=^\( \)) ')
"
Remove empty spaces inside <p> tags using BeautifulSoup,">>> soup = BeautifulSoup('''\
... <p>
...     Text with whitespace
... </p>
... <p>No whitespace</p>
... <p>
...     A nested 
...     <span>tag</span>
...     is not a problem
... </p>
... ''')
>>> whitespace = u' \t\n\r\x0a'  # extend as needed
>>> for p in soup.find_all('p'):
...     for string in list(p.strings):  # copy so we can replace some
...         left = string[:1] in whitespace
...         right = string[-1:] in whitespace
...         if not left and not right:
...             continue  # leave be
...         new = string
...         if left:
...             new = ' ' + new.lstrip()
...         if right:
...             new = new.rstrip() + ' '
...         string.replace_with(new)
... 
u'\n    Text with whitespace\n'
u'\n    A nested \n    '
u'\n    is not a problem\n'
>>> print str(soup)
<html><head></head><body><p> Text with whitespace </p>
<p>No whitespace</p>
<p> A nested <span>tag</span> is not a problem </p>
</body></html>
"
Extending a class in Python 3 and construct it with __init__,"class Fecha(datetime.date):
    def __new__(cls, year, month, day, status):
        instance = super(Fecha, cls).__new__(cls, year, month, day)
        instance.status = status
        return instance
"
Sort list of mixed strings based on digits,"sorted(l, key=lambda x: int(re.search('\\d+', x).group(0)))"
Iterate over model instance field names and values in template,"def GetModelData(form, fields):
    """"""
    Extract data from the bound form model instance and return a
    dictionary that is easily usable in templates with the actual
    field verbose name as the label, e.g.

    model_data{""Address line 1"": ""32 Memory lane"",
               ""Address line 2"": ""Brainville"",
               ""Phone"": ""0212378492""}

    This way, the template has an ordered list that can be easily
    presented in tabular form.
    """"""
    model_data = {}
    for field in fields:
        model_data[form[field].label] = eval(""form.data.%s"" % form[field].name)
    return model_data

@login_required
def clients_view(request, client_id):
    client = Client.objects.get(id=client_id)
    form = AddClientForm(client)

    fields = (""address1"", ""address2"", ""address3"", ""address4"",
              ""phone"", ""fax"", ""mobile"", ""email"")
    model_data = GetModelData(form, fields)

    template_vars = RequestContext(request,
        {
            ""client"": client,
            ""model_data"": model_data
        }
    )
    return render_to_response(""clients-view.html"", template_vars)
"
Nested try statements to open an XL sheet,"sheet = book.sheet_by_name(list(set(['map', 'Map', 'MAP']) & set(book.sheet_names())[0])
"
How can 2 Python dictionaries become 1?,"x = mungesomedict(dict(adict, **anotherdict))
"
Python metaclasses: Why isn't __setattr__ called for attributes set during class definition?,"class Foo(object):
    __metaclass__ = FooMeta
    FOO = 123
    def a(self):
        pass
"
Adding parts of a line to make a sequence line (python),"range_str = "","".join([""%s-%s"" % item for item in zipped])
"
how to sort by a computed value in django,"sorted(Profile.objects.all(), key=lambda p: p.reputation)"
Replacing variable text in between two known elements,"import re
pattern = re.compile(r""^Name=(.*)$"", flags=re.MULTILINE)
re.sub(pattern, ""Name=%s"" % replace_name, s)
"
Convert ast.Num to decimal.Decimal for precision in python,">>> expr = '100.50*num*discount'
>>> decistmt(expr)
""Decimal ('100.50')*num *discount ""
"
multiple iteration through python dictionary,"results = [item['green'] for item in D['b']]
# ['second', 'fourth']
"
Redirecting the print output to a .txt file in Python,"...
with open('output.txt', 'w') as f:
    print >>f, result
    for item, count in sorted(result.iteritems()):
        if count >= 2:
            print >>f, "" "".join(item).encode('utf8'), count
"
Pythonic way of calculating A x A' (without numpy),"def dot1d(a,b):
    return sum(x*y for x,y in zip(a,b))

def dot_2cmp(a):
    return [[dot1d(r,c) for c in a] for r in a]
"
Pandas take value from columns if not NaN,"df['C'] = np.where(df.A.notnull(), df.A,np.where(df.B.notnull(), df.B, 1))
print df                   
     A      B      C
0  One    NaN    One
1  Two    NaN    Two
2  NaN  Three  Three
"
How to display a pdf that has been downloaded in python,webbrowser.open('file:///my_pdf.pdf')
In python how can I set multiple values of a list to zero simultaneously?,"arr[20:] = [0] * (len(arr) - 20)
"
"Python : How to ""merge"" two class","class A(object) :
    def __init__(self, args):
        self.a = 'a'
        self.args = args

    def getattA(self):
        return self.a, self.args

class B(object) :
    b = 'b' 
    def __init__(self, args) :
        self.b_init = args

    def getattB(self):
        return self.b

C = type('C', (A,B), dict(c='c'))

instc = C('args')

print 'attributes :', instc.a,  instc.args, instc.b, instc.c
print 'methodes :', instc.getattA(), instc.getattB()

print instc.b_init
"
List Comprehension to For Loop,"mylist = [[1, 2, 3], [3, 4, 5]]
rows = []
for row in mylist:
   s=""""
   for v in row:
       s+=str(v)+""\t""
   rows.append(s.rstrip())
rows
['1\t2\t3', '3\t4\t5']
"
Pandas - replacing column values,"In [15]: data = pd.DataFrame([[1,0],[0,1],[1,0],[0,1]], columns=[""sex"", ""split""])

In [16]: data['sex'].replace({0:'Female',1:'Male'},inplace=True)

In [17]: data
Out[17]:
      sex  split
0    Male      0
1  Female      1
2    Male      0
3  Female      1
"
Finding round figure,">>> [n.is_integer() for n in x]
[False, True, True, False]
"
Defining multiple variables at once in one line with one value?,"a = b = c = d = 4
"
Associative array in python with keys as a fragment of array,"class DictRange(dict):
    def __getitem__(self, val):
        for key in self.keys():
            if val in key:
                return super(DictRange,self).__getitem__(key)
"
Python: Parsing INI-style configuration files?,"config_dict = {}

for section in config.sections():
    config_dict[section] = dict(config.items(section))

print config_dict
# {'section2': {'s': 'foo'}, 'section1': {'n': '1'}}
"
Access environment variables,print(os.environ)
Grep a range of words from a text file python,">>> import re
>>> s = ""askdfghj... Hello world my name is Alex and I am 18 years all ...askdfgj.""
>>> re.search(r'my.*Alex', s).group()
'my name is Alex'
"
Update dictionary from two yield functions,"def one_two_three():
    myList1 = range(0, 4)
    for i in myList1:
        yield 'number',i

def four_five_six():
    myList2 = range(3, 6)
    for i in myList2:
        yield 'other_number',i


print [{i:j,k:z} for (i,j),(k,z) in zip(one_two_three(),four_five_six())]
"
insert new non-existing column in how= of resample,"grouped = df.groupby(['name1',pd.TimeGrouper('M')])
return pd.DataFrame(
    {'new_col1': grouped['col1'][grouped['col1'] > 0].agg('sum')
     ...
# ImplementationError since `grouped['col1']` does not implement __getitem__
"
counting occurrence of consecutive elements in a list (python),">>> a=[1,13,4,2,1,13,4]
>>> ''.join(map(str,a)).count('1134')
2
"
isolate data from a string,"inp = ""((Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (0, 0, 0)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-38.805, 0, 1333.283)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-77.609, 0, 2666.566)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-116.414, 0, 3999.849)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-155.218, 0, 5333.133)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-194.023, 0, 6666.416)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0) ; v3: (0, 0, 1); off: (-232.827, 0, 7999.699)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-271.632, 0, 9332.982)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-310.436, 0, 10666.265)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-349.241, 0, 11999.548)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-388.045, 0, 13332.832)),Matrix(v1: (1, 0, 0); v2: (0, 1, 0); v3: (0, 0, 1); off: (-426.85, 0, 14666.115))""

lst = inp.split("";"")
for s in lst:
    s.strip()
    if s.find(""off:"") > -1:
        data = s.split("")"")
        print(data[0][7:])
"
How to get content-type (or variable type) for a particular set of data in python?,"from ast import literal_eval
from dateutil import parser

def guess_type(v):
    if v == '...':
        return 'Ellipsis'
    try:
        return type(literal_eval(v)).__name__
    except (SyntaxError, ValueError):
        try:
            return type(parser.parse(v)).__name__
        except ValueError:
            pass
        return 'string'

data = [
    'the book is on the table',
    '2014-03-14 22:10:00',
    'https://foo.com/bar.jpg',
    '23449',
    'True',
    'None',
    '{""foo"": 1}',
    '{""foo""}',
    '...',
]

for i, item in enumerate(data):
    print('- Item{} -> {}'.format(i+1, guess_type(item)))
"
Most Common letter in a string,"from string import punctuation
from collections import Counter
def mwl(text):
    text = text.lower().translate(str.maketrans("" ""*len(punctuation),punctuation))
    return Counter(text).most_common()[0][0]
"
Get selected node names into a list or tuple in Nuke with Python,"names = []
for s in nuke.selectedNodes():
    n = s['name'].value()
    names.append(n)
print names
"
inheritance from str or int,">>> class C(str):
...     def __new__(cls, value, meta):
...         obj = str.__new__(cls, value)
...         obj.meta = meta
...         return obj
... 
>>> c = C(""hello world"", ""meta"")
>>> c
'hello world'
>>> c.meta
'meta'
"
How can I accelerate the array assignment in python?,"In [169]: np.eye(2)
Out[169]: 
array([[ 1.,  0.],
       [ 0.,  1.]])

In [170]: np.tril_indices(2,-1)
Out[170]: (array([1]), array([0]))
"
Split string into two parts at double consonants in Python,"double_consonants = [2*c for c in 'bcdfghjklmnpqrstvwxz']

for word in raw:
    for d_c in double_consonants:
        if d_c in word:
            # You should be able to finish this bit yourself
"
Students at Table Permutation,"def shift(l, n):
  return l[n:] + l[:n]
"
Using a Scanner Loop,"content = [];
with open(""input.txt"") as f:
  content = f.readline().split()

ismallest = int(content[0])

for i in range(0,len(content),1):
  if (int(content[i]) < ismallest):
    ismallest = int(content[i])

print (""the smallest number is"", ismallest)
"
Slightly different execution times between python2 and python3,"from __future__ import print_function
from timeit import Timer
from math import factorial

try:
    range = xrange
except:
    pass

def perms(s):
    s = tuple(s)
    N = len(s)
    if N <= 1:
        yield s[:]
        raise StopIteration()
    for x in perms(s[1:]):
        for i in range(0,N):
            yield x[:i] + (s[0],) + x[i:]

def testcase(s):
    for x in perms(s):
        pass

def test():
    for i in range(1,11):
        s = """".join([""%d"" % x for x in range(i)])
        s = ""testcase(\""%s\"")"" % s
        t = Timer(s,""from __main__ import testcase"")
        factor = 100000
        factor = int(factor/factorial(i))
        factor = (factor>0) and factor or 1
        yield (i,(1000*min(t.repeat(5,factor))/factor))

if __name__==""__main__"":
    print(""args\ttime[ms]"")
    for x in test():
        print(""%i\t%f"" % x)
"
remove an element from a list by index,del a[index]
Do functions in ordered by values,"fighters = [player, enemy]
fighters.sort(key=lambda f: f.speed)
for fighter in fighters:
    fighter.attack(fighters)
"
Specific Python pattern for the string that can help to slice,"parts = re.findall(r""\d\. (?:\D+|\d(?!\.))*"", text)
"
Python - Return some characters after phrase in string,"import re
p = re.compile(ur'(?<=time=)\S+')
test_str = u""\n\n Pinging 10.1.1.1 with 32 bytes of data:\n\n Reply from 10.1.1.1: bytes=32 time=39ms TTL=253\n\n Reply from 10.1.1.1: bytes=32 time=17ms TTL=253\n\n Reply from 10.1.1.1: bytes=32 time=17ms TTL=253\n\n Reply from 10.1.1.1: bytes=32 time=17ms TTL=253\n\n Ping statistics for 10.1.1.1: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 17ms, Maximum = 39ms, Average = 22ms\n""     
re.findall(p, test_str)
"
Python's argparse to show program's version with prog and version string formatting,"parser.add_argument('--version', action='version', version='%(prog)s 2.0')"
Assign to selection in pandas,"In [11]: df.apply(lambda row: (row['bar']*2 if row['foo'] == 'a' else row['xyz']), axis=1)
Out[11]:
0    0
1    2
2    4
3    0
4    0
dtype: int64

In [12]: df['xyz'] = df.apply(lambda row: (row['bar']*2 if row['foo'] == 'a' else row['xyz']), axis=1)

In [13]: df
Out[13]:
   bar foo  xyz
0    0   a    0
1    1   a    2
2    2   a    4
3    3   d    0
4    4   e    0
"
How to populate shelf with existing dictionary,"import shelve
myDict = {""a"" : 1, ""b"" : 2}
myShelvedDict = shelve.open(""my_shelved_dictionary.db"")
myShelvedDict[""myDict""] = myDict
"
Merge Items in List from different areas Python,"def custom_join(row, *joins):
    return [''.join(row[i] for i in indices) for indices in joins]
"
How to convert Numpy Array to Python Dictionary with Sequential Keys?,"myarray = np.array([[0,400,405,411,415,417,418,0],
                   [0,404,412,419,423,422,422,0],
                   [0,409,416,421,424,425,425,0],
                   [0,411,414,417,420,423,426,0],
                   [0,409,410,410,413,419,424,0],
                   [0,405,404,404,409,414,419,0]])

d = dict(enumerate(myarray.flatten(), 1))
"
Find Average of Every Three Columns in Pandas dataframe,"df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"
Python web scraping involving HTML tags with attributes,"thetds = soup.findAll('td', attrs={'class': 'author'})
for thetd in thetds:
    print thetd.string
"
python date on file want to strip off microseconds,">>> prev_day = ""2016-01-11 01:00:01.504424""
>>> prev_day_date = datetime.strptime(prev_day, ""%Y-%m-%d %H:%M:%S.%f"")
>>> prev_day_date.date()
datetime.date(2016, 1, 11)
>>> prev_day_date.strftime(""%Y-%m-%d"")
'2016-01-11'
"
"Redis in python, how do you close the connection?","def execute_low_level(command, *args, **kwargs):
    connection = redis.Connection(**kwargs)
    try:
        connection.connect()
        connection.send_command(command, *args)

        response = connection.read_response()
        if command in redis.Redis.RESPONSE_CALLBACKS:
            return redis.Redis.RESPONSE_CALLBACKS[command](response)
        return response

    finally:
        del connection
"
"Create function in python to find the highest of all function arguments, and return the ""tag"" of the value",">>> def argmax(**kw):
...   return max(kw, key=kw.get)
... 
>>> argmax(foo=3, bar=5, frotz=1, kaka=-3)
'bar'
"
Get Last Day of the Month,"calendar.monthrange(2002, 1)"
How to decode a QR-code image in (preferably pure) Python?,">>> import pyqrcode
>>> qr = pyqrcode.create(""HORN O.K. PLEASE."")
>>> qr.png(""horn.png"", scale=6)
"
CARP hash in Python,"def rotate_left(x, n, maxbit=32):
    # assumes 32 bit
    x = x & (2 ** maxbit - 1)
    return ((x << n) | (x >> (maxbit - n)))

def key_hash(data):
    # hash should be a 32-bit unsigned integer
    hashed = 0
    for char in data:
        hashed = (hashed + rotate_left(hashed, 19) + ord(char))
    return hashed

def khash(data):
    h = 0
    for c in data:
        assert 0 <= h <= 0xFFFFFFFF
        h = (h + (h << 19) + (h >> 13) + ord(c)) & 0xFFFFFFFF
    assert 0 <= h <= 0xFFFFFFFF
    return h

guff = ""twas brillig and the slithy toves did whatever""
print ""yours: %08X"" % key_hash(guff)
print ""mine : %08X"" % khash(guff)
"
"How do I split without removing delimeter, if it's whitespace",">>> re.split(r""\s*([^\w\s]+)\s*"",'number1 * number2')
['number1', '*', 'number2']
"
Adding properties dynamically using functions created dynamically,"class Note2(object):
    def __init__(self, name, value): self.name, self._size = name, value
    def _set_size(self, value): self._size = value
    size = property(lambda x: x._size+1, _set_size)
    def __repr__(self): return str(self.size) #simple trick to gain visual access to .size

class Notebook2(object):
    def __new__(cls, *notes):
        notebook = object.__new__(cls)
        notebook._notes = {note.name: note.size for note in notes}
        for note in notes: setattr(notebook, note.name, note)
        return notebook

memo1, report1 = Note2(""memo"", 5), Note2(""report"", 20)
notebook1 = Notebook2(memo1, report1)
print(notebook1.memo, notebook1.report) # 6 21
memo2, report2 = Note2(""memo"", 35), Note2(""report"", 40)
notebook2 = Notebook2(memo2, report2)
print( notebook2.memo, notebook2.report) # 36 41
print(notebook1.memo, notebook1.report) # 6 21
notebook1.memo.size += 16
print(notebook1.memo) # 23
print(memo1) # 23, Notice this will also set the original objects value to the new value as well
notebook1.memo += 15 # TypeError: unsupported operand type(s) for +=: 'Note2' and 'int' - It is true without making it as a property does make it less effective to work with
"
Python Not Web Linking Entire variable in str.ljust,"values = [item.slug]
values += str(item.title).ljust(25).split("" "", 1)
values.append(item.date.ljust(10))
content += '<a href=""/%s/"">%s</a> %s  %s' % values
"
Python pandas: exclude rows below a certain frequency count,"In [125]:
df.groupby('positions')['r vals'].filter(lambda x: len(x) >= 3)

Out[125]:
0    1.2
2    2.3
3    1.8
6    1.9
Name: r vals, dtype: float64
"
Python: Zero Copy while truncating a byte buffer,"import numpy as np

inbuffer = np.array(someincomingdata, dtype=np.uint8)  # load data into an array of bytes
x = inbuffer[:10]  # grab a view of the first ten bytes, which does not require a copy
inbuffer = inbuffer[10:]  # change inbuffer to reference a slice; no copying here either
"
Abstract methods like in Java,"class AbstractExample():

    def __init__(self, arg1, arg2):
        self.arg1 = arg1
        self.arg2 = arg2

    def call_now_with_my_parameters(self, callable):
        callable(self.arg2, self.arg2)

def example_function(arg1,arg2):
    print(""{},{}"".format(arg1, arg2))

ae = AbstractExample(5, 7)
ae.call_now_with_my_parameters(example_function)
"
How do you map a fully qualified class name to its class object in Python?,"from importlib import import_module

name = 'xml.etree.ElementTree.ElementTree'
parts = name.rsplit('.', 1)
ElementTree = getattr(import_module(parts[0]), parts[1])
tree = ElementTree()
"
How to remove specific directory names from path list,"'http://my-cdn-path.com/' + '/'.join(os.path.abspath(i).split(os.sep)[-4:])
"
How to plot on Pandas Python,"import matplotlib.pyplot as plt

plt.ion()

# plt.plot something
"
break two for loops,"import itertools
for i,j in itertools.product(range(1, 100), repeat=2):
  break
"
Last Key in Python Dictionary,list(dict.keys())[-1]
Python failure to find all duplicates,"while i<100:
    i+=1
    set1 = random.sample(numbers1,5)
    while len(set1) != len(set(set1)):
        print('duplicate(s) found, random selection repeated')
        set1 = random.sample(numbers1,5)
"
How can I print [] without string in Python in YAML file,">>> import yaml
>>> yaml.safe_dump({'items': ['test', 'test2']}, default_flow_style=False)
'items:\n- test\n- test2\n'
>>> yaml.safe_dump({'items': ['test', 'test2']})
'items: [test, test2]\n'
"
Pythonic way to shuffle stacks,"import itertools
import copy
stacks = [[""A"", ""C""], [""B"" , ""D"" ], [""E""]]
children = []
for i in range(len(stacks)):
    for j in range(len(stacks)):
        if i == j:
            continue
        cur_stack = copy.deepcopy(stacks)
        cur_stack[j].append(cur_stack[i].pop())
        print cur_stack
        children.append(cur_stack)
"
Append or create and new Dictionary,"with open('input1', 'r') as classified_data:
    for row in classified_data:
        a, b = row.strip().split()
        print a, b, edges.get((a, b), edges.get((b, a)))
"
How to preserve Labels when SPSS file (.sav) imported into pandas via rpy?,"import pandas.rpy.common as com

def get_labels(filename):
    w = com.robj.r('attr(foreign::read.spss(""%s""), ""variable.labels"")' % filename)
    w = com.convert_robj(w)
    return w
"
Randomly replace items in a list,">>> mutate('ABC', 2, 'M')
'MMC'
>>> mutate('ABC', 2, 'M')
'AMM'
>>> mutate('ABC', 2, 'M')
'MMC'
>>> mutate('ABC', 2, 'M')
'MBM'
"
PyQt QColor setAlpha not working?,"from PyQt4 import QtGui

clr = QtGui.QColor('yellow')
qtwi = QtGui.QTableWidgetItem()
qtwi.setBackgroundColor(clr)

print 'Colors are the same object: %s' % (clr == qtwi.backgroundColor())

print 'Alpha before is: %s' % clr.alpha()
clr.setAlpha(67)
print 'Alpha after is: %s' % clr.alpha()

qtwibg = qtwi.backgroundColor()
print 'Alpha before is: %s' % qtwibg.alpha()
qtwibg.setAlpha(171)
print 'Alpha after is: %s' % qtwibg.alpha()

print 'Colors are the same object: %s' % (clr == qtwibg)
"
How to use QComboBox selection in function,"class TACRG(QtGui.QMainWindow, design.Ui_MainWindow):
    def __init__(self, parent=None):
        # Your init code
        self.report_start, self.report_end, self.accs = [None] * 3

    def r_chosen(self, text):
        self.report_start, self.report_end = report_period(text)
        self.other_method()

    def c_chosen(self, text):
        self.accs = get_ucs(text)
        self.other_method()

    def other_method(self):
        #validate if your fields have valid values
        if self.report_start and self.report_end and self.accs:
            print self.report_start, self.report_end, self.accs
"
Getting the class name of an instance in Python,">>> import itertools
>>> x = itertools.count(0)
>>> type(x).__name__
'count'
"
Insert data from one sorted array into another sorted array,"a[a[:,0].searchsorted(b[:,0]),1] = b[:,1]
"
How to append a item from a list to another list?,"inventoryList = [['Steak', 10], ['Milk', 2], ['Fruits', 10], ['Canned Corn', 0.50]]
highestPriceItem = 10.0
highestPriceList = []

for item in inventoryList:
    if item[1] == highestPriceItem:
        highestPriceList.append(item[0])
print (""Item with highest wholsesale price: "",highestPriceList)
"
Fast 1D convolution with finite filter and sum of dirac deltas in python,"import numpy as np

a = np.random.rand(10)
print a
"
One Way to Grab both text and percentages regex python distinguish numbers from letters within parantheses,">>> import re
>>> import numpy as np
>>> inputtext = 'Bbc World News (57%); DANONE SA (FRANCE) (52%), Mn-Public-Radio-Intl; SIC123 Industry (52%)'
>>> [(name, int(perc) if perc else np.nan)
...  for name, perc in re.findall(r'(\b[\w() -]+)(?:\s+\((\d+)%\))?(?=[,;]|$)', inputtext)]
[('Bbc World News', 57), ('DANONE SA (FRANCE)', 52), ('Mn-Public-Radio-Intl', nan), ('SIC123 Industry', 52)]
"
Finding the top 10 and converting it from centimeters to inches - Python,"from collections import OrderedDict
from operator import itemgetter
import pprint

def to_inch(cm):
    return float(cm) / 2.54

names = OrderedDict([('person_number', int),
                     ('name', str),
                     ('first', to_inch),
                     ('second', float),
                     ('third', float)])
data = []
with open('veggies_2016.txt') as fobj:
    while True:
        item = {}
        try:
            for name, func in names.items():
                item[name] = func(next(fobj).strip())
            data.append(item)
        except StopIteration:
            break

pprint.pprint(sorted(data, key=itemgetter('first'))[:10])
"
"Invert the order of a string, while preserving the original contents of the string",">>> print '/'.join(s.split('/')[::-1])
"
"Python sorted list [a1, a2 ... b1, b2]",">>> lst1 = ['tmp-0.gif', 'tmp-1.gif', 'tmp-10.gif', 'tmp-11.gif', 'tmp-12.gif', 'tmp-13.gif', 'tmp-14.gif', 'tmp-15.gif', 'tmp-16.gif', 'tmp-17.gif', 'tmp-18.gif', 'tmp-19.gif', 'tmp-2.gif', 'tmp-20.gif', 'tmp-21.gif', 'tmp-22.gif', 'tmp-23.gif', 'tmp-24.gif', 'tmp-25.gif', 'tmp-26.gif', 'tmp-27.gif', 'tmp-28.gif', 'tmp-29.gif', 'tmp-3.gif', 'tmp-30.gif', 'tmp-31.gif', 'tmp-4.gif', 'tmp-5.gif', 'tmp-6.gif', 'tmp-7.gif', 'tmp-8.gif', 'tmp-9.gif']
>>> lst1.sort(key= lambda x: int(x.split('.')[0].split('-')[1]))
>>> lst1
['tmp-0.gif', 'tmp-1.gif', 'tmp-2.gif', 'tmp-3.gif', 'tmp-4.gif', 'tmp-5.gif', 'tmp-6.gif', 'tmp-7.gif', 'tmp-8.gif', 'tmp-9.gif', 'tmp-10.gif', 'tmp-11.gif', 'tmp-12.gif', 'tmp-13.gif', 'tmp-14.gif', 'tmp-15.gif', 'tmp-16.gif', 'tmp-17.gif', 'tmp-18.gif', 'tmp-19.gif', 'tmp-20.gif', 'tmp-21.gif', 'tmp-22.gif', 'tmp-23.gif', 'tmp-24.gif', 'tmp-25.gif', 'tmp-26.gif', 'tmp-27.gif', 'tmp-28.gif', 'tmp-29.gif', 'tmp-30.gif', 'tmp-31.gif']
"
Count lines in a file,"import collections
with open('path/to/file') as f:
    counts = collections.Counter(f)
    outfile = open('path/to/outfile', 'w')
    for line,occ in counts.iteritems():
        outfile.write(""%s repeat %d\n"" %(line.strip(), occ))
    outfile.close()
"
Randomizing a list of tuples without random.shuffle() python,">>> import random
>>> l = [1, 2, 3, 4, 5]
>>> random.shuffle(l)
>>> l
[2, 1, 5, 3, 4]
"
Replacing RGB values in numpy array by integer is extremely slow,"color_map = numpy.ndarray(shape=(256*256*256), dtype='int32')
color_map[:] = -1
for rgb, idx in color_codes.items():
    rgb = rgb[0] * 65536 + rgb[1] * 256 + rgb[2]
    color_map[rgb] = idx

def img_array_to_single_val(image, color_map):
    image = image.dot(numpy.array([65536, 256, 1], dtype='int32'))
    return color_map[image]
"
Parsing text file in python using pyparsing,"# section defined with nesting
section = ident + nestedExpr()
"
Accessing Facebook from Python,"import urllib2
req = urllib2.Request('http://www.facebook.com/')
req.add_header('Referer', 'http://www.lastpage.com/')
r = urllib2.urlopen(req)
"
Removing brackets and quotes from matrix in python,"for row in matrix:
    print(' '.join(row))
"
Python Logic Help:,"def isOK( word ):
    condition_one = len( word ) > 3 and word in words
    condition_two = not any( w.startswith( word ) for word in words )

    return not( condition_one or condition_two )
"
Trying to extract strings using regex - Python,"In [73]: p = re.compile(r'{(PakBusPort_.*?)}')

In [74]: p.findall(res)
Out[74]: ['PakBusPort_somename']
"
EMAIL id matcher-python regular expression cant figure out,"import re

text = '123.com 456.edu 999.com'

a = r'\d+\.(com|edu)'    # A capturing group.
b = r'\d+\.(?:com|edu)'  # A non-capturing group.

print re.findall(a, text)  # Only the captures: ['com', 'edu', 'com']
print re.findall(b, text)  # The full matches: ['123.com', '456.edu', '999.com']
"
Python Pandas. Creating DataFrame with Series does not preserve dtype,"df2 = pd.concat([df[""id""], df[""value""]*2], axis=1)
"
"How do I cycle through a csv in python, writing lines to a new file that meet new criteria","if row[0][0:].find('OPSURVEYLEVEL') == 0:
    break
"
How to set pdb break condition from within source code?,"_breakpoints = {}

def reset_breakpoints(disabled=[]):
    global _breakpoints
    _breakpoints = dict((x, False) for x in disabled)

def set_breakpoint(tag, condition=True):
    if tag not in _breakpoints:
        _breakpoints[tag] = True
        if condition:
            pdb.set_trace()
    else:
        if _breakpoints[tag] and condition:
            pdb.set_trace()

def mycode():
    some_command()
    set_breakpoint('mycode0')
    another_command()
    set_breakpoint('mycode1', x == 4)
"
Selecting dictionary items by key efficiently in Python,"dict((k, mydict[k]) for k in keys_to_select if k in mydict)
"
Creating a X input matrix and y output vector via Python,"import pandas as pd

df = pd.read_csv('file_name.csv')
y  =  df[['gini']] 
X  =  df[df.columns.difference(['gini'])]
"
Non greedy parsing with pyparsing,"gr = P.Group(key_equal+val)
"
subset recursively a data.frame,"library(data.table) # v1.9.7 (devel version)


df <- fread(""C:/folderpath/data.csv"") # load your data
setDT(df) # convert your dataset into data.table
"
Include python module (dependencies) installation in your python script,"# module/script.py

import argparse

def foobar(args):
    # ...

def main():
    parser = argparse.ArgumentParser()
    # parser.add_argument(...)
    args = parser.parse_args()
    foobar(args)
"
How to compare list of arrays in python?,"a = [np.array([1, 2, 3]), np.array([1, 2, 3])]
b = [np.array([1, 2, 3]), np.array([1, 2, 3])]
all(np.allclose(x, y) for x, y in zip(a, b))#True
b = [np.array([1, 2, 3]), np.array([1, 2, 4])]
all(np.allclose(x, y) for x, y in zip(a, b))#False
"
Sum of product of combinations in a list,"sum([(i * j) for i, j in list(itertools.combinations(l, 2))])"
Previous weekday in Python,"_offsets = (3, 1, 1, 1, 1, 1, 2)
def prev_weekday(adate):
    return adate - timedelta(days=_offsets[adate.weekday()])
"
Image Saving I/O Using Python Efficiency & Speed,"def CheckIfFilesMatch(self):
    if(len(self.subdirArray1) != len(self.subdirArray2)):
        self.__FileMatchError(""please enter same amount of files"")
        return False

    tmp = set(self.subdirArray2)
    for f in self.subdirArray1:
        frev = f.replace(self.rootDir1,self.rootDir2);
        if frev not in tmp:
            self.__FileMatchError(""This file: "" + f + "" does not correspond to any file in parallel."")
            return False
        tmp.discard(frev)
    if tmp:
        self.__FileMatchError(""This file: "" + tmp.pop() + "" does not correspond to any file in parallel."")
        return False
    return True

def __FileMatchError(self, txt):
    self.statusText.SetValue(txt)
    self.blocker = True
    self.statusText.SetForegroundColour(wx.RED)
"
Context manager inside a class instance,"from contextlib import contextmanager

class MyClass(object):
    def __init__(self):
        self.level = 0
    def inclev(self):
        self.level += 1
    def declev(self):
        self.level -= 1

    @contextmanager
    def Nest(self):
        self.inclev()
        try:
            yield
        finally:
            self.declev()
"
Custom Python Encryption algorithm,"def encrypt(key, msg):
    encryped = []
    for i, c in enumerate(msg):
        key_c = ord(key[i % len(key)])
        msg_c = ord(c)
        encryped.append(chr((msg_c + key_c) % 127))
    return ''.join(encryped)

def decrypt(key, encryped):
    msg = []
    for i, c in enumerate(encryped):
        key_c = ord(key[i % len(key)])
        enc_c = ord(c)
        msg.append(chr((enc_c - key_c) % 127))
    return ''.join(msg)

if __name__ == '__main__':
    key = 'This_is_my_awsome_secret_key'
    msg = 'Hello world'
    encrypted = encrypt(key, msg)
    decrypted = decrypt(key, encrypted)

    print 'Message:', repr(msg)
    print 'Key:', repr(key)
    print 'Encrypted:', repr(encrypted)
    print 'Decrypted:', repr(decrypted)
"
Size of numpy strided array/broadcast array in memory?,"b = np.lib.stride_tricks.as_strided(x, [1000,100,100], strides=x.strides + (0, 0))

print(b.flags.owndata)
# False
print(b.base)   
# <numpy.lib.stride_tricks.DummyArray object at 0x7fb40c02b0f0>
"
The Ignore callback for python shutil.copytree() does not accept full path,"def my_ignore(dir, files):
    if dir == '/full_path_to':
        return {""exclude.file""}
"
"Python, optimizing a list comprehension for string concatenation",">>> timeit.timeit(""map(template.__mod__, signals)"", 'from __main__ import template, signals')
0.9939713030159822
"
Arbitrary number of nested loops dependent on the previous loop in Python,"import functools

def f(n, z, max_depth, factors=(), depth=0):
    res = []
    if depth == max_depth:
        product = functools.reduce(lambda x, y: x*y, factors, 1)
        if product > z:
            res.append(factors)
    else:
        for i in range(1, n):
            new_factors = factors + (i,)
            res.extend(f(i, z, factors=new_factors, depth=depth+1, max_depth=max_depth))
    return res

z = np.e ** 10
n = int(np.log(z))

print(f(n, z, max_depth=8))
"
What is the difference between 'log' and 'symlog'?,"import numpy
from matplotlib import pyplot

# Enable interactive mode
pyplot.ion()

# Draw the grid lines
pyplot.grid(True)

# Numbers from -50 to 50, with 0.1 as step
xdomain = numpy.arange(-50,50, 0.1)

# Plots a simple linear function 'f(x) = x'
pyplot.plot(xdomain, xdomain)
# Plots 'sin(x)'
pyplot.plot(xdomain, numpy.sin(xdomain))

# 'linear' is the default mode, so this next line is redundant:
pyplot.xscale('linear')
"
Splitting with different delimiters,"import re
splitter = re.compile(r"":|,,?"")
for line in (""literature,general education,,note: see approved list"",
             ""social-cultural elective,general education,,note: see approved""):
    print splitter.split(line)
"
Writing wav file in Python with wavfile.write from SciPy,"data2 = np.asarray(data2)
"
"Given a list of dictionaries, how can I eliminate duplicates of one key, and sort by another","data = collections.defaultdict(list)
for i in my_list:
    data[i['name']].append(i['score'])
output = [{'name': i, 'score': max(j)} for i,j in data.items()]
"
Splitting string and removing whitespace Python,"[item.strip() for item in my_string.split(',')]"
Extracting just a string element from a pandas dataframe,"my_value_as_series = x.loc[bar==foo]['variable_im_interested_in']

# Assumes the index to get is number 0, but from your example, it might
# be 24 instead.
plain_value = my_value_as_series[0]

# Likewise, this needs the actual index value, not necessarily 0.
also_plain_value = my_value_as_series.ix[0]

# This one works with zero, since `values` is a new ndarray.
plain_value_too = my_value_as_series.values[0]
"
How to filter a list of sublists,"lst = filter(lambda x: sum(x) in spectrum, lst)
"
Search for IDs from pool of txt files,"while IFS= read -r i; do
  for f in file*.table; do
    grep ""^$i "" ""$f"" >> ""${i}.txt""
  done
done < query.txt
"
Placing ticks on specific values,"import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FixedLocator, LinearLocator, FormatStrFormatter

t = np.arange(0.0, 100.0, 0.1)
s = np.sin(0.1*np.pi*t)*np.exp(-t*0.01)

fig, ax = plt.subplots()
plt.plot(t, s)

# Retrieve the limits of the x and y axis.
xlims = ax.get_xlim()
ylims = ax.get_ylim()

# Create two FixedLocator objects. FixedLocator objects take a sequence
# which then is translated into the tick-positions. In this case I have
# simply given the x/y limits as the sequence.
xmajorlocator = FixedLocator(xlims)
ymajorlocator = FixedLocator(ylims)

ax.xaxis.set_major_locator(xmajorlocator)
ax.yaxis.set_major_locator(ymajorlocator)

# Create two LinearLocator objects for use in the minor ticks.
# LinearLocator objects take the number of ticks as an argument
# and automagically calculate the appropriate tick positions.
xminorlocator = LinearLocator(10)
yminorlocator = LinearLocator(10)

ax.xaxis.set_minor_locator(xminorlocator)
ax.yaxis.set_minor_locator(yminorlocator)

# Create two FormatStrFormatters to format the major ticks.
# I've added this simply to complete the example, you can set
# a fmt string using Python syntax to control how your ticks
# look. In this example I've formatted them as floats with
# 3 and 2 decimal places respectively.
xmajorformatter = FormatStrFormatter('%.3f')
ymajorformatter = FormatStrFormatter('%.2f')

ax.xaxis.set_major_formatter(xmajorformatter)
ax.yaxis.set_major_formatter(ymajorformatter)

plt.show()
"
How to get the child class that called the __init__ method,"import traceback, sys

class C:
    def __init__(self):
        try:
            raise StopIteration
        except StopIteration:
            tb = sys.exc_info()[2]
            stack = traceback.extract_stack(tb.tb_frame)
            f = stack[-2]
            print ""I was called from %s %s (%s:%s)"" % (f[2], f[3], f[0], f[1])

class A:
    def __init__(self):
        self.c = C()

def foo():
    A()
    return C()

def main():
    C()
    foo()

if __name__ == '__main__':
    main()
"
Python While loops with tuples,"def count_vowels(string):
    return sum(1 for c in string if c.lower() in ""aeiou"")
"
Easy way to keep counting up infinitely,"
def count(start=0, step=1):
    # count(10) --> 10 11 12 13 14 ...
    # count(2.5, 0.5) -> 2.5 3.0 3.5 ...
    n = start
    while True:
        yield n
        n += step
"
Add a word at the end of elements of a list,">>> mylist = [""8 - 9 -"", ""7 - 6 -"", ""5 - 4 -""]
>>> mylist = [x[:-1] for x in mylist]
>>> mylist
['8 - 9 ', '7 - 6 ', '5 - 4 ']
"
python replace word in text file without going line by line,"with open(""Output.txt"", ""w"") as output_file, open(""Input.txt"") as input_file:
    output_file.write("""".join(transform_line(line) for line in input_file))
"
"What are ""named tuples"" in Python?","from collections import namedtuple
Point = namedtuple('Point', 'x y')
pt1 = Point(1.0, 5.0)
pt2 = Point(2.5, 1.5)

from math import sqrt
line_length = sqrt((pt1.x-pt2.x)**2 + (pt1.y-pt2.y)**2)
"
split url by python,">>> import urlparse
>>> parsed_url = urlparse.urlparse(url) 
>>> number1 = parsed_url.path.split(""/"")[-1]
>>> number2, number3 = urlparse.parse_qs(parsed_url.query)[""t:ac""][0].split(""/"")
>>> number1, number2, number3
('3700620', '3686967', '3700610')
"
What is islambda function in python,"from types import FunctionType

def isalambda(v):
    return isinstance(v, FunctionType) and v.__name__ == '<lambda>'
"
Python: how to work with list to have unique values,"triplets = dict.setdefault(key1, [])
if not any(triplet[0] == t for triplet in triplets):
    # no such t value found
    triplets.append((t, a, c))
"
how to find a word in ASCII file using python,"import re
for match in re.finditer(""STUDENT1"", data):
    print match.start()
"
Use a different row as labels in pandas after read,"In [71]:

df1 = df.loc[3:]
df1.columns = df.loc[2].values
df1
Out[71]:
   a  b  c  d
3  6  4  2  1
"
Is a specific timezone using DST right now?,"from pytz import timezone
from datetime import datetime

zonename = ""Pacific/Wallis""
now = datetime.now(tz=timezone(zonename))
dst_timedelta = now.dst()
### dst_timedelta is offset to the winter time, 
### thus timedelta(0) for winter time and timedelta(0, 3600) for DST; 
### it returns None if timezone is not set

print ""DST"" if dst_timedelta else ""no DST""
"
Randomly sample rows (first dimension) of an array with unknown dimension,"a[np.random.randint(0,a.shape[0],10)]
"
Prepend line to beginning of a file,"def line_prepender(filename, line):
    with open(filename, 'r+') as f:
        content = f.read()
        f.seek(0, 0)
        f.write(line.rstrip('\r\n') + '\n' + content)
"
Python-requests: Check if URL is not HTML webpage,"r = requests.head(url)
if ""text/html"" in r.headers[""content-type""]:
    html = requests.get(url).text
else:
    print ""non html page""
"
How to write a calendar to excel?,"import calendar
import pprint

year = 2011
days_in_week = 8

c = calendar.Calendar()

# First month with zeroes to create full week
l = list(c.itermonthdays(year, 1))

# Slice by days_in_week
l2 = [[l[a*days_in_week:a*days_in_week+days_in_week] for a in range(len(l) / days_in_week + 1)]]
# Add zeroes if needed and slice rest
l2[-1][-1] += [0] * (days_in_week - (len(l2[-1][-1])))
if l2[-1][-1].count(0) == days_in_week:
    l2[-1] = l2[-1][:-1]

for month in range(2, 13):
    # Days in month
    l = range(1, calendar.monthrange(year, month)[1]+1)

    # Add needed zeroes to the beginning
    zeroes_at_end = l2[-1][-1].count(0)
    l = [0] * ((days_in_week - zeroes_at_end) % days_in_week) + l 

    # Slice by days_in_week
    l2 += [[l[a*days_in_week:a*days_in_week+days_in_week] for a in range(len(l) / days_in_week + 1)]]
    # Add zeroes if needed and slice rest
    l2[-1][-1] += [0] * (days_in_week - (len(l2[-1][-1])))
    if l2[-1][-1].count(0) == days_in_week:
        l2[-1] = l2[-1][:-1]

pprint.pprint(l2)
"
Leibniz formula for π - Is this any good? (Python),"def estimate_pi(terms):
    result = 0.0
    for n in range(terms):
        result += (-1.0)**n/(2.0*n+1.0)
    return 4*result
"
Not able to concatenate two dataframes,"df3 = df1.combine_first(df2)

print(df3)
"
Python csv processing,"In [6]: import re

In [7]: {fn: int(re.search('(\d{4})', fn).group()) for fn in filenames}
Out[7]: 
{'QLD2010.csv': 2010,
 'QLD2011.csv': 2011,
 'QLD2012.csv': 2012,
 'QLD2013.csv': 2013,
 'QLD2014.csv': 2014}
"
Most Pythonic way to iteratively build up a list?,"def growing_sequence():
    M = []
    counter = 0
    while True:
        M.append(counter)
        counter += 1
        yield M[:]
"
Smart pythonic way of removing if elif on regular expressions,"value = {}
for (pattern, slice, key) in zip([patternA, patternB, patternC],
                                 [slice(45,67), slice(5,7), slice(4,5)],
                                 ['abc', 'xyx', 'txt']):
    m = re.search(pattern, string)
    if m:
        value[key] = m.group(0)[slice]
        break
"
writing to a file with python,"# Read the input data once.
with open('C:/TestReq_100 Records.txt', 'r') as ipf:
    ipdata = ipf.read()
# Add a newline to the end of the file if there isn't already one present.
# Without this, the last and first lines of the input might become single lines.
if ipdata[-1] != '\n':
    ipdata += '\n'
# Write to the output file multiple times.
with open('processed.txt', 'w') as opf:
    for i in xrange(10):
        opf.write(ipdata)
"
Metaclass Arguments for Python 3.x,"namespace = metaclass.__prepare__(name, bases, **kargs)
#...""cls"" object gets created somewhere in here...
MyClass = metaclass.__new__(cls, name, bases, namespace, **kargs)
metaclass.__init__(MyClass, name, bases, namespace, **kargs)
"
effectively preprocessing record array from genfromtxt,"In [405]: a #""a"" is a 2D ndarray
Out[405]: 
array([[1, 2],
       [2, 3],
       [4, 2]])

In [406]: a[:,1]==2
Out[406]: array([ True, False,  True], dtype=bool)

In [407]: a[a[:,1]==2]
Out[407]: 
array([[1, 2],
       [4, 2]])
"
"Return Match with respect to Occurrence ,Regex","str1 = ""room no 135 chancery hotel,block k aecs layout""
for match in ['hsr layout','aecs layout','garden layout','k aecs layout']:
    if match in str1:
        print match
        break
"
Get the string within brackets in Python,"m = re.search('\\[(\\w+)\\]', s)"
How to check a string for specific characters?,"chars = set('0123456789$,')
if any((c in chars) for c in s):
    print('Found')
else:
    print('Not Found')
"
How to compare two unequal lists and append matching elements value back to the first List,"from copy import deepcopy
from collections import defaultdict

nodes = defaultdict(list)
for node in object_list:
    nodes[node.pred].append(node)

for ind, st_nodes in enumerate(starting_nodes):
    starting_nodes[ind].extend(deepcopy(nodes.get(st_nodes[0].id,[])))
"
Pandas append list to list of column names,"df = pd.concat([df,pd.DataFrame(columns = col_add)])
"
Python Pandas: Join on unique column values and concatenate,"In [48]: pd.merge(df1, df2, how='outer', on='id').merge(df3, how='outer', on='id')
Out[48]: 
      id  score_x  score_y  score
0    one       56       35    NaN
1    two       45      NaN     66
2  three       78      NaN    NaN
3   five      NaN       81     23
4   four      NaN       90    NaN
5    six      NaN      NaN     42

[6 rows x 4 columns]
"
How to extract data from a text file with python script?,"if grab_lines: #in python 'is True' is implicit for many types.
    line = [line.split()[0]]+[str(float(element)*.529) for element in line.split()[1:]]+['\n']
    molecule_data.append('\t'.join(line))
"
How to count number of categories in DataFrame object?,"from collections import Counter
df = pd.DataFrame({'a':['apple','apple','banana','peach', 'banana', 'apple']})

print Counter(df['a'])
>> Counter({'apple': 3, 'banana': 2, 'peach': 1})
"
How to set bin content in a hist2d (matplotlib),"ax.imshow(zvalues.T,extent=np.array(range).flatten(),origin='lower',interpolation = 'nearest')
"
Why does this Python RegEx pipe not pick out both unicode ranges?,"myPattern = u""[\u3041-\u309f\u30a0-\u30ff]*""
"
How do I get a row of a 2d numpy array as 2d array,"a = np.array([[1,2], [3,4], [5,6]])

a[0:1]
#array([[1, 2]])

a[0:1].shape
#(1,2)
"
Python: How to read stdout of subprocess in a nonblocking way,"import subprocess
import select
import time

x=subprocess.Popen(['/bin/bash','-c',""while true; do sleep 5; echo yes; done""],stdout=subprocess.PIPE)

y=select.poll()
y.register(x.stdout,select.POLLIN)

while True:
  if y.poll(1):
     print x.stdout.readline()
  else:
     print ""nothing here""
     time.sleep(1)
"
Finding all possible combination on python,"matching = []
for c in combinations:
  if reduce(lambda x, y: x * y, c, 1) == 60:
    matching.append(c)
"
How to execute python file in linux,"#!/usr/bin/python
"
Remove part of an element in python,"d={u'identifier': {u'identifier': u'the_real_identifier'},
   u'identifier1': {u'identifier1': u'the_real_identifier1'}}
res = [value[key] for key,value in d.items()]
print(res)
# ['the_real_identifier', 'the_real_identifier1']
"
How to Find the Neighbors of a Cell in an ndarray?,"idx = tuple(slice(pp - 1, pp + 2) for pp in p)
print(x[idx])
# [[1 1]
#  [1 2]
#  [1 1]]
"
Subscripting text in matplotlib labels,"plt.plot(x, y, label='H\u2082O')"
NaNs comparing equal in Numpy,"FutureWarning: numpy equal will not check object identity in the future. The comparison did not return the same result as suggested by the identity (`is`)) and will change.
"
Python RegEx nested search and replace,"import csv
import StringIO

s = '''""thing1,blah"",""thing2,blah"",""thing3,blah""
""thing4,blah"",""thing5,blah"",""thing6,blah""'''
source = StringIO.StringIO(s)
dest = StringIO.StringIO()
rdr = csv.reader(source)
wtr = csv.writer(dest)
for row in rdr:
    wtr.writerow([item.replace('\\,',',').replace(',','\\,') for item in row])
print dest.getvalue()
"
"reading and parsing a TSV file, then manipulating it for saving as CSV (*efficiently*)","import csv

with open('sample.txt','rb') as tsvin, open('new.csv', 'wb') as csvout:
    tsvin = csv.reader(tsvin, delimiter='\t')
    csvout = csv.writer(csvout)

    for row in tsvin:
        count = int(row[4])
        if count > 0:
            csvout.writerows([row[2:4] for _ in xrange(count)])
"
"What is a Ruby equivalent for Python's ""zip"" builtin?","a.zip(b).all? {|pair| pair[0] === pair[1]}
"
Using recursion to reverse a list in python?,"In [22]: l = [1, 2, 3, 4,5]  
In [23]: reverseList(l)    
In [24]: l
Out[24]: [5, 4, 3, 2, 1]    
In [25]: l = [1, 2, 3, 4]    
In [26]: reverseList(l)    
In [27]: l
Out[27]: [4, 3, 2, 1]
"
save simulation data in python,"import numpy as np

data = numpy.load('myMD.dat')
xpos1 = data['xpos1']
# et cetera
"
Python - How can I change bytes in a file,">>> import re
>>> bool(re.match(br'\d+$', b'123'))
True
"
Trying to find the T(n) function and complexity in this bit of Python,"a = 7
b = 5
n = len(aList)
for i in range(n):
    a *= i ** n # `a` is multiplicated `n` times by (constant) `i`
    b = (n - 1) ** 2 # at the end of the loop, `j` is `(n - 1)`
    v = i + (i * b) # at the end of the loop, `w` is `i * b`
    x = v * v
    w = a * (n - 1) + 23 # at the end of the loop, `k` is `(n - 1)`
    v = b ** 2 # `b` (and as such `v`) is never changed in the loop
    a = w + v
"
Why is python zip function builtin?,"In [157]: %timeit zipped(range(10**5), range(10**5))
10 loops, best of 3: 77.3 ms per loop

In [158]: %timeit zip(range(10**5), range(10**5))
10 loops, best of 3: 31.5 ms per loop

In [159]: %timeit list(izip(range(10**5), range(10**5)))
10 loops, best of 3: 37.4 ms per loop
"
Add value to tag XML Python,"from xml.etree import ElementTree as et

raw = '''<e3r>
<moreData>false</moreData>
<data>
<CashDividend Isin=""IE00BYM8JD58"" AdjustmentFactor="""" Adjustment_Date="""" Adjustment_Factor=""""/>
<CashDividend Isin=""IE00BZ163G84"" AdjustmentFactor="""" Adjustment_Date="""" Adjustment_Factor="""" Amount_Status=""""/>
<CashDividend Isin=""IE00BZ163H91"" AdjustmentFactor="""" Adjustment_Date="""" Adjustment_Factor=""""/>
<CashDividend Isin=""IE00BZ163M45 "" AdjustmentFactor="""" Adjustment_Date="""" Adjustment_Factor="""" />
</data>
</e3r>'''

root = et.fromstring(raw)
isin = ""IE00BYM8JD58""
adjustment_factor = ""FOO""
element = root.find("".//CashDividend[@Isin='%s']"" % isin)
element.set(""AdjustmentFactor"", adjustment_factor)

print et.tostring(root)
"
How to access external object within event handler?,"from Tkinter import *

class MyFrame(Frame):
    def __init__(self, root):
        Frame.__init__(self, root)
        self.parent = root
        self.configure(width=300,height=300)
        self.pack()
        self.bind(""<Motion>"", self.onmotion)

    def onmotion(self, event):
        self.parent.title(""Mouse at %s,%s""%(event.x, event.y))

root = Tk()
frame = MyFrame(root)
root.title(""Event test"")
root.mainloop()
"
How do I define a different logger for an imported module in Python?,"aplogger = logging.getLogger('apscheduler')
aplogger.propagate = False
aplogger.setLevel(logging.WARNING)    # or whatever
aphandler = logging.FileHandler(...)  # as per what you want
aplogger.addHandler(aphandler)
"
OrderedDict won't sort within a class,"self._registry = OrderedDict(sorted(self._registry.items()))
"
Using Ipython ipywidget to create a variable?,"from ipywidgets import widgets, interact

# Create text widget for output
output_slider_variable = widgets.Text()

# Define function to bind value of the input to the output variable 
def f(x):
    output_slider_variable.value = str(x)

# Create input slider with default value = 10    
interact(f, x=10)

# Display output variable in text box
output_slider_variable

# Create and output new int variable with value of slider
new_variable = int(output_slider_variable.value)
print new_variable

# Do something with new variable, e.g. cube
new_variable_cubed = pow(new_variable, 3)
print new_variable_cubed
"
pandas dataframe count uniques with respect to another column,"
import io
import pandas as pd

df = '''\
category | subcategory | contract | week1 | week2 | week3
cat1     | sub1         | 11001 |      20 |    20 |    10
cat1     | sub1         | 11001 |      0  |    0  |    30   
cat1     | sub2         | 11002 |      10 |    20 |    0    
cat1     | sub2         | 11003 |      10 |    20 |    0    
cat2     | sub3         | 11004 |      10 |    0  |    50   
cat2     | sub3         | 11005 |      10 |    20 |    0 '''

df = pd.read_table(io.BytesIO(df), sep=r'\s*[|]\s*')
result = df.groupby(['category', 'subcategory', 'contract']).sum() > 0
result = result.groupby(level=['category','subcategory']).sum().dropna(axis=0)
print(result)
"
Python: How can I use lxml objectify's iterchildren to get details of siblings which are in a different namespace,"from lxml import objectify    

obj2 =  lxml.objectify.parse('get_subscribers_result.xml')
root = obj2.getroot()

tag = '{http://example.com/123/ss/base/v1_0}subscriberDetail'

for subscriberDetail in (root.xpath('//ns2:subscriberDetail', namespaces={'ns2': 'http://example.com/123/ss/base/v1_0'})):
               print subscriberDetail.key
               print subscriberDetail.value               
               print ""*********************************""
"
Convert pandas datetime objects,"In [8]:
df['Time'] = df['Date'].dt.time
df

Out[8]:
            Timestamp                    Date             Time
0  20160208_095900.51 2016-02-08 09:59:00.510  09:59:00.510000
1  20160208_095901.51 2016-02-08 09:59:01.510  09:59:01.510000
2  20160208_095902.51 2016-02-08 09:59:02.510  09:59:02.510000
3  20160208_095903.51 2016-02-08 09:59:03.510  09:59:03.510000
4  20160208_095904.51 2016-02-08 09:59:04.510  09:59:04.510000
5  20160208_095905.51 2016-02-08 09:59:05.510  09:59:05.510000
6  20160208_095906.51 2016-02-08 09:59:06.510  09:59:06.510000
7  20160208_095907.51 2016-02-08 09:59:07.510  09:59:07.510000
8  20160208_095908.51 2016-02-08 09:59:08.510  09:59:08.510000
9  20160208_095909.51 2016-02-08 09:59:09.510  09:59:09.510000
"
Python CURL speficied ip address,"class AbstractHTTPHandler(BaseHandler):
    # ...
    def do_open(self, http_class, req):
        # ...
        h = http_class(host, timeout=req.timeout) # will parse host:port
"
Pandas take value from columns if not NaN,"df['C']= df.A.fillna(df.B)
print df                   
     A      B      C
0  One    NaN    One
1  Two    NaN    Two
2  NaN  Three  Three
"
check if a directory exists and create it if necessary,"if (not os.path.exists(directory)):
    os.makedirs(directory)"
In Python how do I create variable length combinations or permutations?,"res = []
for l in range(2, len(arr)):
    for x in itertools.combinations(arr, l):
        res.append(x)
return res
"
"How to retrieve original @classmethod, @staticmethod or @property","import decorator
def mydecorator(f, *d_args, **d_kwargs):
    if (isinstance(f, classmethod)):
        return classmethod(mydecorator(f.__get__(True).im_func))
    elif (isinstance(f, staticmethod)):
        return staticmethod(mydecorator(f.__get__(True)))
    elif (isinstance(f, property)):
        return property(mydecorator(f.fget))
    else:
        return decorator.decorator(f)
"
How to group strings with similar beginnings in a sorted list?,"print '\n'.join('\\'.join([ s if i >= p else ' '*len(s) for i, s in enumerate(x) ]) for p, x in eachWithPrefix(x.split('\\') for x in v))
"
How to implement associative array (not dictionary) in Python?,"od=collections.OrderedDict(Arr)
for k in od: print k,od[k]
"
Python: Writing an empty dictionary with strings thats ordered,"my_ordered_dict = OrderedDict({key1:value1, key2:value2,})
"
How to check a given MySQL server connects through Python?,"

import pymysql

def MySQLCheck(*args, **kwargs):
    try:
        conn = pymysql.connect(*args, **kwargs)
        cursor = conn.cursor()
        cursor.execute(""show databases;"")
        r = cursor.fetchall()
        conn.close()
        return r
    except Exception as e: return e

"
How can I split this comma-delimited string in Python?,"print(s.split(','))"
Python list help,"from copy import copy
copy_of_A = copy(A)
"
matplotlib: Plot numpy arrays with None as values,"import matplotlib.pyplot as pyplot
import numpy

x = range(5)
k = numpy.array([(1.,0.001), (1.1, 0.002), (numpy.nan, numpy.nan), 
                 (1.2, 0.003), (0.99, 0.004)])

Fig, ax = pyplot.subplots()

# This plots a gap---as desired
ax.plot(x, k[:,0], 'k-')

ax.plot(range(len(y)), y[:,0]+y[:,1], 'k--')
"
Search a string for values present in a dict,"leave_out = ['dog', 'cat', 'wolf']

...

if all(word not in movieTitle for word in leave_out):
     # None of the words were in the title
"
Is there a version of list.sort() that returns the sorted list?,">>> sorted('hello')
['e', 'h', 'l', 'l', 'o']
"
I need to add up the even numbers between two other numbers in Python,"start = 0
end = 0

while start < 2 or end <= start:
    start = int(raw_input(""Enter start -> ""))
    end = int(raw_input(""Enter end -> ""))

print sum([x for x in range(start, end+1) if x % 2 == 0])
"
Easy way to convert a unicode list to a list containing python strings?,[x.encode('UTF8') for x in EmployeeList]
Average of key values in a list of dictionaries,"In [8]: import numpy as np

In [9]:  [dict(zip(d.keys(), [int(np.round(np.mean(d.values())))])) for d in L]

#Out[9]: [{'Eva': 5}, {'Ana': 53}, {'Ada': 12}]
"
"Python 2,7 Dictionary Advice",">>> dic = {'PhysicalDrive0': ['0', '1', '2'], 'PhysicalDrive1': ['0', '1']}
>>> dic['PhysicalDrive0'].append('3')
>>> dic['PhysicalDrive1'].append('2')
>>> dic
{'PhysicalDrive1': ['0', '1', '2'], 'PhysicalDrive0': ['0', '1', '2', '3']}
"
String Formatting in Python 3,"""({goals} goals, ${penalties})"".format(goals=2, penalties=4)
""({goals} goals, ${penalties})"".format(**self.__dict__)

""first goal: {0.goal_list[0]}"".format(self)
""second goal: {.goal_list[1]}"".format(self)

""conversion rate: {:.2f}"".format(self.goals / self.shots) # '0.20'
""conversion rate: {:.2%}"".format(self.goals / self.shots) # '20.45%'
""conversion rate: {:.0%}"".format(self.goals / self.shots) # '20%'

""self: {!s}"".format(self) # 'Player: Bob'
""self: {!r}"".format(self) # '<__main__.Player instance at 0x00BF7260>'

""games: {:>3}"".format(player1.games)  # 'games: 123'
""games: {:>3}"".format(player2.games)  # 'games:   4'
""games: {:0>3}"".format(player2.games) # 'games: 004'
"
"Python argparse, run one or more sub-commands","import argparse
parser = argparse.ArgumentParser(prog='My Prog')
sub_parsers = parser.add_subparsers(dest='cmd')

subcommand_a = sub_parsers.add_parser('subcommand_a', help='a help')
subcommand_a.add_argument('req1', help='required argument 1 help')
subcommand_a.add_argument('--opt1', help='option 1 help')
subcommand_a.add_argument('--opt2', nargs=3, help='option 2 help')

subcommand_b = sub_parsers.add_parser('subcommand_b', help='b help')
subcommand_b.add_argument('req1', help='required argument 1 help')
subcommand_b.add_argument('--opt1', help='option 1 help')
subcommand_b.add_argument('--opt2', help='option 2 help')
subcommand_b.add_argument('--opt3', nargs=3, help='option 3 help')

argv = ""subcommand_a FOO --opt1=bar --opt2 1 2 3 subcommand_b BAR --opt1=foo --opt3 a b c""
rest = argv.split()
while rest:
    [args, rest] = parser.parse_known_args(rest)
    print args
    print rest
"
Is it possible to query a Python mock object for the return values of its calls?,"class GenericSideEffect():
    def __init__(self, f, *args, **kwargs):
        self.v_function = f
        self.args = args
        self.kwargs = kwargs
        self._return_value = Exception(""Never Called"")

    def __call__(self):
        try:
            self._return_value = self.v_function(*self.args, **self.kwargs)
            return self._return_value
        except Exception as e:
            self.return_value = e
            raise e

    @property
    def return_value(self):
        if isinstance(self._return_value, Exception):
            raise self._return_value
        return self._return_value
"
How do I create a tree out of this?,"def add_path(root, path):
    if path:
        child = root.setdefault(path[0], {})
        add_path(child, path[1:])

root = {}
with open('tree.txt') as f:
    for p in f:
        add_path(root, p.strip().split('.'))

import json
print json.dumps(root,  indent=4)
"
Sorting list of lists by a third list of specified non-sorted order,">>> a = [[1,2],[2,10,10],[3,4,'fred']]
>>> b = [2,1,3]
>>> sorted(a,key=lambda x: b.index(x[0]))
[[2, 10, 10], [1, 2], [3, 4, 'fred']]
"
How to use square brackets as a quote character in Pandas.read_csv,"import pandas as pd
import io

with open('file2.csv', 'r') as f:
    lines = f.readlines()
    fo = io.StringIO()
    fo.writelines(u"""" + line.replace(',',';', 3) for line in lines)
    fo.seek(0)    

df = pd.read_csv(fo, sep=';')
print df
   Item        Date   Time                            Location
0     1  01/01/2016  13:41                 [45.2344:-78.25453]
1     2  01/03/2016  19:11  [43.3423:-79.23423,41.2342:-81242]
2     3  01/10/2016  01:27                 [51.2344:-86.24432]
"
alternate for multiple constructors,"class MyClass:
    def __init__(self, options):
        self.options = options

    @classmethod
    def create_default_parser(cls):
        parser = argparse.ArgumentParser(description='something')
        parser.add_argument('-v', '--victor', dest='vic', default=""winning"")
        options = parser.parse_args()
        return cls(options)
"
Simple Prime Generator in Python,"# Sieve of Eratosthenes
# Code by David Eppstein, UC Irvine, 28 Feb 2002
# http://code.activestate.com/recipes/117119/

def gen_primes():
    """""" Generate an infinite sequence of prime numbers.
    """"""
    # Maps composites to primes witnessing their compositeness.
    # This is memory efficient, as the sieve is not ""run forward""
    # indefinitely, but only as long as required by the current
    # number being tested.
    #
    D = {}
    
    # The running integer that's checked for primeness
    q = 2
    
    while True:
        if q not in D:
            # q is a new prime.
            # Yield it and mark its first multiple that isn't
            # already marked in previous iterations
            # 
            yield q
            D[q * q] = [q]
        else:
            # q is composite. D[q] is the list of primes that
            # divide it. Since we've reached q, we no longer
            # need it in the map, but we'll mark the next 
            # multiples of its witnesses to prepare for larger
            # numbers
            # 
            for p in D[q]:
                D.setdefault(p + q, []).append(p)
            del D[q]
        
        q += 1
"
Structure accessible by attribute name or index options,"import collections  
# Create a new sub-tuple named Credential  
Credential = collections.namedtuple('Credential', 'username, password')  

credential = Credential(username='joeuser', password='secret123')  

print 'Username:', credential.username  
print 'Password:', credential.password  
"
"Lambda instead of ""if"" statement","lambda x: x and x.isdigit() and int(x) or None
"
How to remove the row that has special characters in it,"$ grep -v '[^a-zA-Z]' foo
"
merging columns from other files into one file,"import pandas as pd
import glob

idx = ['Number', 'Average', 'niquely number', '%']
df = pd.DataFrame()
i = 0

for files in glob.glob('dir/*.txt'):

    i = i + 1
    column = ['sample_' + str(i)]

    df1 = pd.read_csv(files, names=column, sep='|', header=None, usecols=[1])
    #print df1   
    #remove NaN value from df1
    df1 = df1.dropna()
    #concat df1 to df
    df = pd.concat([df, df1], axis=1)

#add column idx do df
df['idx'] = pd.Series(idx, index=df.index)
#set index from column idx
df = df.set_index('idx')
#remove index name
del df.index.name

print df
"
words as y-values in pyplot/matplotlib,"import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-np.pi, np.pi, 100)
y = np.sin(x) + 1
plt.plot(x, y)
plt.yticks([0, 0.5, 1, 1.5, 2], ['foo', 'bar', 'baz', 'boo', 'bam'])
"
extracting dictionary pairs based on value,"smaller_things = [k for k, v in things.items() if v == 3]

>>> things = { 'a': 3, 'b': 2, 'c': 3 }
>>> [k for k, v in things.items() if v == 3]
['a', 'c']
"
Python Decimals format,"tests=[(1.00,'1'),
       (1.2,'1.2'),
       (1.23,'1.23'),
       (1.234,'1.23'),
       (1.2345,'1.23')]

for num,answer in tests:
    result='{0:.3g}'.format(num)
    if result != answer:
        print('Error: {0} --> {1} != {2}'.format(num,result,answer))
        exit()
    else:
        print('{0} --> {1}'.format(num,result))
"
Mercurial scripting with python,"from mercurial import ui, hg
from mercurial.node import hex

repo = hg.repository('/path/to/repo/root', ui.ui())
fctx = repo.filectx('/path/to/file', 'tip')
hexnode = hex(fctx.node())
"
I need some code to allow me to find the highest score in my .txt doc,"import sys

class Student:
    def __init__(self, name, marks):
        self.name = name
       self.marks = marks
    def avg_mark(self):
        return sum(self.marks)/len(self.marks)
    def __str__(self):
        return '{0}: {1}, {2}'.format(self.name, self.marks, self.avg_mark())

def load_grades(filename):
    fd = open(filename, 'r')
    f = {}
    for line in fd:
        split = line.split(',')
        key = split[0]
        marks = [int(n) for n in split[1:]]
        try:
           f[key] += marks
        except KeyError:
            f[key] = marks
    students = []
    for key, values in f.items():
        students.append(Student(key, values[-3:]))
    return students

def sort_by_name(students):
    def get_name(student):
    return student.name
    students = sorted(students, key=get_name)
    return students

def sort_by_avg(students):
    def get_avg(student):
        return student.avg_mark()
    students = sorted(students, key=get_avg)
    return students


again = True

while again:
    class_num =  input ('Which class do you want to view 1,2 or 3?')
    print('please input a, b or c')
    print('a)Alphabeically')
    print('b)average')
    print('c)highest to lowest')
    sort = input ('how would you like to view it:')

    if class_num ==""1"" and sort ==""a"":
        students = load_grades('class1.txt')
        students = sort_by_name(students)
    elif class_num ==""1"" and sort ==""b"":
        students = load_grades('class1.txt')
        students = sort_by_avg(students)

    for student in students:
        print(student)


    Again=input('Do you want to view another class yes or no?')
    again = (Again=='yes')

print('bye')
"
Trimming a string,myString.strip('\n')
Dispatch a class method,"def dispatch(self, arg):
    bound = self.dispatch_map[arg].__get__(self, type(self))
    bound()
"
Efficient combinations of N colored elements with restriction in the number of colors,"def combs3(iterable, elt2ec, k, maxec):
    # Generate all k-combinations from `iterable` spanning no
    # more than `maxec` equivalence classes.
    elts = tuple(iterable)
    n = len(elts)
    ec = [None] * n  # ec[i] is equiv class ordinal of elts[i]
    ec2j = {} # map equiv class to its ordinal
    for i, elt in enumerate(elts):
        thisec = elt2ec[elt]
        j = ec2j.get(thisec)
        if j is None:
            j = len(ec2j)
            ec2j[thisec] = j
        ec[i] = j
    countec = [0] * len(ec2j)
    del ec2j

    def inner(i, j, totalec):
        if i == k:
            yield result
            return
        for j in range(j, jbound[i]):
            thisec = ec[j]
            thiscount = countec[thisec]
            newtotalec = totalec + (thiscount == 0)
            if newtotalec <= maxec:
                countec[thisec] = thiscount + 1
                result[i] = j
                yield from inner(i+1, j+1, newtotalec)
                countec[thisec] = thiscount

    jbound = list(range(n-k+1, n+1))
    result = [None] * k
    for _ in inner(0, 0, 0):
         yield (elts[i] for i in result)
"
.csv data into a dictionary in Python: Duplicate values,"import csv

def data_pull():
    results = {} 

    with open(""C:\sample.csv"", 'rb') as datafile:
        reader = csv.reader(datafile)
        for row in reader:
            results[row[0]] = row[1:]

    return results
"
Is it possible to nest the all function?,"def is_happy(items):
   return all(item.state in ['happy', 'cheerful'] and is_happy(item.childs) for item in items)
"
How to get list of the range consisting of floats?,"from math import ceil
def solve(start, end, step):
    #http://stackoverflow.com/a/10986098/846892
    for i in xrange(int(ceil((end-start)/step))):
        yield start + step*i
print list(solve(80.0, 90.0, 0.5))
#[80.0, 80.5, 81.0, 81.5, 82.0, 82.5, 83.0, 83.5, 84.0, 84.5, 85.0, 85.5, 86.0, 86.5, 87.0, 87.5, 88.0, 88.5, 89.0, 89.5]
"
How to remove a column from a structured numpy array *without copying it*?,"import numpy as np


def view_fields(a, names):
    """"""
    `a` must be a numpy structured array.
    `names` is the collection of field names to keep.

    Returns a view of the array `a` (not a copy).
    """"""
    dt = a.dtype
    formats = [dt.fields[name][0] for name in names]
    offsets = [dt.fields[name][1] for name in names]
    itemsize = a.dtype.itemsize
    newdt = np.dtype(dict(names=names,
                          formats=formats,
                          offsets=offsets,
                          itemsize=itemsize))
    b = a.view(newdt)
    return b


def remove_fields(a, names):
    """"""
    `a` must be a numpy structured array.
    `names` is the collection of field names to remove.

    Returns a view of the array `a` (not a copy).
    """"""
    dt = a.dtype
    keep_names = [name for name in dt.names if name not in names]
    return view_fields(a, keep_names)
"
lxml.cssselect CSSSelector doesn't support attributes,"from lxml import html
import requests

url = 'http://abcnews.go.com/US/wireStory/man-jail-writing-racist-graffiti-refugees-homes-33488053'
page = requests.get(url)

tree = html.fromstring(page.text)
p_elements = tree.cssselect('p[itemprop=""articleBody""]')
print(p_elements)
"
Weird variable setting in python,"linenos = 'table' if self.linenos else False
"
Changing colours of pixels of plt.imshow() image,"import numpy as np
import matplotlib.pyplot as plt

data = np.arange(100).reshape(10, 10).astype(float)

cmap = plt.cm.gray
cmap.set_bad((1, 0, 0, 1))

# Set the diagonal to NaN
data[range(10), range(10)] = np.nan

plt.imshow(data, cmap=cmap, interpolation='nearest')
plt.colorbar()
plt.show()
"
Writing to text file with python running on GAE,"import cloudstorage
from google.appengine.api import app_identity

bucketName = app_identity.get_default_gcs_bucket_name()
fileName = ""/"" + bucketName + ""/somedir/somefile.txt""

with cloudstorage.open(fileName, ""w"") as gcsFile:
            gcsFile.write(""text"")
"
Flask use URL variable in function,"from flask import Flask, request
app = Flask(__name__)

@app.route('/<pathVariable>/')
def test(pathVariable):

    test = pathVariable
    path = request.path
    script_root = request.script_root
    base_url = request.base_url
    url = request.url
    url_root = request.url_root
    url_rule = request.url_rule

    print (""test is: %s"" %path)
    print (""path is: %s"" %path)
    print (""script_root is: %s"" %script_root)
    print (""base_url is: %s"" %base_url)
    print (""url is: %s"" %url)
    print (""url_root is: %s"" %url_root)
    print (""url_rule is: %s"" %url_rule)

    return render_template('/example.html', pathVariable=pathVariable)

if __name__ == '__main__':
    app.run()
"
Generating subsets of a permuted wordlist in Python,"from itertools import permutations

xlist = [""word1"", ""word2"", ""word3""]

for n in range(1, len(xlist)+1):
    for perm in permutations(xlist, n):
        print """".join(perm)
"
Is there a way to get a dict object with nonlocal variables?,"def nonlocals():
    import inspect
    stack = inspect.stack()
    if len(stack) < 3: return {}
    f = stack[2][0]
    res = {}
    while f.f_back:
        res.update({k:v for k,v in f.f_locals.items() if k not in res})
        f = f.f_back
    return res
"
Stripping an dynamic url content,"string.split('cbll=')[1].split('&')[0]
"
"Setting the x axis as time (years, months) for a set of values","import numpy as np
import matplotlib.pyplot as plt
import datetime as dt

dates = []
for year in range(2012, 2014):
    for month in range(1, 12):
        dates.append(dt.datetime(year=year, month=month, day=1))

y = [10, 180, 153, 80, 11, 92, 201, 74, 24]
plt.plot(dates[:9], y)
plt.show()
"
Python: Replacing NaN or MEAN instead of a -999 value in an array,"A = np.array([1,3,5,-999,3,1,6,8,-999,-999,-999,3,5,7.])
A[A==-999] = np.nan
mask = np.isnan(A)
A[mask] = np.interp(np.flatnonzero(mask), np.flatnonzero(~mask), A[~mask])
"
How to add two lists into dictionary?,">>> dict(zip(i,zip(*j)))
{'Type': ('input', 'output', 'input'), 'value': ('1234', '2345', '567'), 'Pin': ('abc', 'xyz', 'pqr')}
"
Filtering text in python for numeric values,"def numbers(s):
    return (int(match) for match in re.finditer(r""\d+"", s))
"
Extracting xyz coordinate values from a string into lists,"# Example of just one line of the data
line = """"""x1=45 y1=74 z1=55 col1=[255, 255, 255] x2=46 y2=74 z2=55 col2=[255, 255, 255] """"""

# Extract the relevant x1, y1, z1 values, stored as a list of strings
p1 = re.findall(r""[x-z][1]=([\d]*)"", line)

# Extract the relevant x2, y2, z2 values, stored as a list of strings
p2 = re.findall(r""[x-z][2]=([\d]*)"", line)

# Convert the elements in each list from strings to integers
p1 = [int(x) for x in p1]
p2 = [int(x) for x in p2]

# Calculate difference vector (Im assuming this is what you're trying to do)
diff = [p2[i] - p1[i] for i in range(len(p2))]
"
"Crop nan rows and columns of a matrix, but keep it square","def pad_to_square(a, pad_value=np.nan):
    m = a.reshape((a.shape[0], -1))
    padded = pad_value * np.ones(2 * [max(m.shape)], dtype=m.dtype)
    padded[0:m.shape[0], 0:m.shape[1]] = m
    return padded

g = np.isnan(grid) 
grid = pad_to_square(grid[:, ~np.all(g, axis=0)][~np.all(g, axis=1)])
"
using ConfigParser and dictionary in Python,"config_dict = {sect: dict(parser.items(sect)) for sect in parser.sections()} # ozgur's one-liner
del config_dict['root']
"
Use upper and lower cases on a same word,"def mom(c):
    c1=c[1::2].lower()
    c2=c[::2].upper()
    return """".join(i for j in zip(c2, c1) for i in j)
print(mom(""Hello dear""))
"
Convert RGB to black OR white,"from PIL import Image
import numpy as np

col = Image.open(""cat-tied-icon.png"")
gray = col.convert('L')

# Let numpy do the heavy lifting for converting pixels to pure black or white
bw = np.asarray(gray).copy()

# Pixel range is 0...255, 256/2 = 128
bw[bw < 128] = 0    # Black
bw[bw >= 128] = 255 # White

# Now we put it back in Pillow/PIL land
imfile = Image.fromarray(bw)
imfile.save(""result_bw.png"")
"
Python ElementTree default namespace?,"ns = {""mvn"":""http://maven.apache.org/POM/4.0.0""}
pom = xml.etree.ElementTree.parse(""pom.xml"")
print(pom.findall(""mvn:version"", ns))
"
Find Average of timestamp,"from collections import defaultdict
paircount = defaultdict(int)
pairtime = defaultdict(float)
pairper = defaultdict(float)
timeavg = defaultdict(float)


#get number of pair occurrences and total time
with open('input.txt', 'r') as f, open('output.txt', 'w') as o:
    for numline, line in enumerate((line.split() for line in f), start=1):
        pair = line[0], line[1]
        paircount[pair] += 1
        pairtime[pair] += float(line[2])

    for pair, freq in paircount.iteritems():
        timeavg = pairtime[pair] / freq
        o.write(""%s %s %s %s %s \n"" % (pair[0], pair[1], freq, pairtime[pair], timeavg))

print 'done'
"
Categorize csv files based on $18 info and find the csv file in each category which has the largest unique number in $4,"egrep -Hi ""enzyme|biochemical"" *.csv | awk -F, '$12<=10{split($1,a,"":"");filename=a[1];print filename,$12}' | sort -n | tail -3

grep -Hi ""cell"" *.csv | awk -F, '$12<=10{split($1,a,"":"");filename=a[1];print filename,$12}' | sort -n | tail -3
"
Numpy: Reshaping this array in the least number of operations,"data.reshape(2, 56, 40).swapaxes(0,2)
"
Python: How to sort a list of lists by the most common first element?,"c = {}
for item in l:
    c[item[0]] = c.get(item[0], 0) + 1
print sorted(l, key = lambda x: -c[x[0]])
"
Removing one or multiple keys from a dictionary,"s = set(lst)
new_dict = {k: v for k, v in d.items() if k not in s}
"
link QInputDialog text to a variable,"import sys
from PyQt4 import QtCore, QtGui

class MyWidget(QtGui.QWidget): 
    def __init__(self): 
        QtGui.QWidget.__init__(self) 
        self.setGeometry(200,100,300,300)

        self.selectionList = ['Jim', 'John', 'Harry', 'Charles']

        self.pushbutton = QtGui.QPushButton('Input', self)
        self.pushbutton.setGeometry(50,75, 100, 25)
        self.pushbutton1 = QtGui.QPushButton('Select', self)
        self.pushbutton1.setGeometry(50,150, 100, 25)

        self.pushbutton.clicked.connect(self.getInput)
        self.pushbutton1.clicked.connect(self.getSelection)

    def getInput(self):
        text = QtGui.QInputDialog.getText(self, 'Text Input Dialog', 'Enter your name:')    
        if text[1]:
            username = text[0]
            print(username)

    def getSelection(self):
        sel = QtGui.QInputDialog.getItem(self, 'Text Selection Dialog', 'Select your name:', self.selectionList, current=0, editable=False)
        if sel[1]:
            username = sel[0]
            print(username)

app = QtGui.QApplication(sys.argv) 
widget = MyWidget()
widget.show()
sys.exit(app.exec_())
"
Single line statement to print range of numbers on a single line,"print(*range(1,int(raw_input())+1),sep='')
"
Condensing Multiple List Comprehensions,"open_info = ['Cube 1, 9:30am to 10:00am, Thursday, March 3, 2016', 'Cube 2, 5:00pm to 5:30pm, Thursday, March 3, 2016']

answer = [[int(s.split(':',1)[0][-2:]), int(s.split(':')[1][:2]), 
           s.split(':')[1][2:4]] for s in open_info]
print(answer)
"
deleting entries in a dictionary based on a condition,"for k, v in data.items():
    if v[0] > 30:
        del data[k]
"
"Using Python and Regex,How do you remove <sup> tags from html?","
from bs4 import BeautifulSoup

data = """"""
<div>
    <sup style=""vertical-align:top;line-height:120%;font-size:7pt"">(1)</sup>
</div>
""""""

soup = BeautifulSoup(data)
for sup in soup.find_all('sup'):
    sup.unwrap()

print soup.prettify()
"
Python Use data/time as x-axis?,"i, time, temp, hum, light_lv, light_v = np.loadtxt(
    'DHT11.csv', delimiter = ',', skiprows = 1,
    usecols = (0,2,3,4,5,6), unpack = 1)

time = [DT.datetime.fromtimestamp(t/1000) for t in time]
light_lv = 1.0/light_lv*1000
"
Reference Parent attributes from child - python3,"class User(object):
   def __init__(self, b):
    self.b = b
    self.child.append(Child(c=4,parent=self))

class Child(object)
   def __init__(self, c, parent):
    self.parent=parent
    self.c = c + self.parent.b
    print(self.c)
"
What is the name of this dictionary?,"def qwer(num):
    return dict([(str(i), i) for i in xrange(num+1)])
"
How to iterate and sum each element in a list with another to find a number?,">>> [(i,j) for i,j in combinations(my_list,2) if i+j==30]
[(10, 20), (15, 15)]
"
Pandas groupby and selector order,"print pd.pivot_table(df, 
                     index='Group', 
                     columns='Criteria', 
                     values='Value', 
                     aggfunc=sum, 
                     fill_value='0').rename_axis(None, axis=1).A

Group
0    0.1
1      0
2    0.5
Name: A, dtype: object
"
Logic of triangle inequality as python conditionals?,"def isTriangle(sides):
    smallest,medium,biggest = sorted(sides)
    return smallest+medium>=biggest and all(s>0 for s in sides)
"
Pythonic way to compare two lists and print out the differences,"list1=[1,2,3,4]
list2=[1,5,3,4]
print [(i,j) for i,j in zip(list1,list2) if i!=j]
"
Python split string based on regex,"re.split('[ ](?=[A-Z])', input)"
How to remove a string with varying numbers at the end,"re.compile('SRR.*?length=(?:[1-9]|[1-9]\d|1\d{2}|200)', re.DOTALL)
"
FTP_ASCII in Python,"def upload_file(self, file_from, file_to):
    if file_from.lower().endswith(('.txt', '.csv')):
        with open(file_from, 'r') as f:
            self.connection_id.storelines('STOR {}'.format(file_to), f)
    else:
        with open(file_from, 'rb') as f:
            self.connection_id.storebinary('STOR {}'.format(file_to), f)
"
Python optparse metavar,"usage = ""usage: %prog [options] arg1 arg2""
parser = OptionParser(usage=usage)
parser.add_option(""-f"", ""--filename"",
                  metavar=""FILE"", help=""write output to FILE""),
"
Jumbled out put of RFID Tags,"import threading,time,serial

#subclass threading.Thread
class RFIDSerialThread(threading.Thread):
    SLEEP_TIME = 0.001 #setup sleep time (update speed)
    #constructor with 3 parameters: serial port, baud and a label for this reader so it's easy to spot
    def __init__(self,port,baud,name): 
        threading.Thread.__init__(self) #initialize this instance as a thread
        self.isAlive = False #keep track if the thread needs to run(is setup and able to go) or not
        self.name = name     #potentially handy for debugging
        self.data = """"       #a placeholder for the data read via serial
        self.station = None  #the serial object property/variable
        try:
            self.station = serial.Serial(port,baud,timeout=0) #attempt to initialize serial
            self.isAlive = True #and flag the thread as running
        except Exception,e: 
            print name + "" is Down"",e #in case of errors print the message, including the station/serial port

    def run(self): #this gets executed when the thread is started
        while self.isAlive:
            if self.station != None:    self.data = self.station.read(12) #read serial data
            time.sleep(RFIDSerialThread.SLEEP_TIME)

if __name__ == '__main__':
    #initialize the two readers
    station1 = RFIDSerialThread('/dev/ttyUSB0',9600,""station #1"")
    station2 = RFIDSerialThread('/dev/ttyUSB1',9600,""station #2"")
    #start the threads
    station1.start()
    station2.start()

    while True:#continously print the data (if any)
        if len(station1.data) > 0:  print station1.name,station1.data
        if len(station2.data) > 0:  print station2.name,station2.data
"
I want to create a program that can analyze downloaded text file in python,"words = re.findall('\w+', dataString.lower())
print len([word for word in words if word == 'hello'])
"
Pandas: Return Hour from Datetime Column Directly,"    import pandas as pd
    pd.concat([sales, pd.DataFrame(hours, index=sales.index)], axis = 1)
"
Python - Tuple generation from list,"a = [2, 6, 12, 13, 1, 4, 5]
b = [12, 1]

sum([ [ (bb,aa) for aa in a[0:a.index(bb)]] for bb in b], [])
"
How to get a function name as a string in Python?,my_function.__name__
How can I see the bytecode of a decorated function?,">>> def memoized(func):
...    cache = {}
...    def wrapper(*args):
...       if not isinstance(args, collections.Hashable):
...          # uncacheable. a list, for instance.
...          # better to not cache than blow up.
...          return func(*args)
...       if args in cache:
...          print 'get cached version{}'.format(args)
...          return cache[args]
...       else:
...          print 'compute {}'.format(args)
...          value = func(*args)
...          cache[args] = value
...          return value
...    return wrapper
...
>>> @memoized
... def fibonacci(n):
...    ""Return the nth fibonacci number.""
...    if n in (0, 1):
...       return n
...    return fibonacci(n-1) + fibonacci(n-2)
...
>>> fibonacci.__closure__
(<cell at 0x1035ed590: dict object at 0x103606d70>, <cell at 0x1036002f0: function object at 0x1035fe9b0>)
>>> fibonacci.__closure__[1].cell_contents
<function fibonacci at 0x1035fe9b0>
"
Finding in elements in a tuple and filtering them,">>> filter(lambda x: x[0].startswith('img'), l)
[('img-1', 'iii'), ('img-2', 'jjj')]
"
Running R script from python,"subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])"
make a dictionary out of first elements in a list of list,"import random
data = [ [random.randint(1, 9) for _ in range(3)] for _ in range(1000000)]
"
How to remove duplicates in card game- python,"hand = set()
while len(hand) < NUM_CARDS:
    hand.add((random.randint(2,14), random.randint(0, 3))
"
Selecting minimum value and remove maximum,">>> from collections import defaultdict
>>> m = defaultdict(list)
>>> with open('testFile.txt' ,'r') as f:
        for line in f:
            name, val = line.split()
            m[name].append(val)
>>> m
defaultdict(<type 'list'>, {'EOG66.txt': ['354'], 'EASSDS.txt': ['2738', '292'], 'EQQSDS7M.txt': ['394', '301']})
>>> with open('output.txt', 'w') as f:
        for elem in m:
            f.write(""{} {}\n"".format(elem, min(map(int, m[elem]))))
"
How do I compare two variables against one string in python?,"if a == '' or b == '':
    print('Either a or b is empty')
"
Learning python... stumped. Where is the loop in this function?,"range(3, 6)
"
Template system or language for Python (primarily HTML),"{% with total=business.employees.count %}
    {{ total }} 
{% endwith %}
"
"In Tkinter, How I disable Entry?","from tkinter import *

root = Tk()
entry = Entry(root, state='disabled')
entry.pack()
root.mainloop()
"
Cannot execute auto-generated Python script encoded in UTF8-sig,"#!/usr/bin/python2
import codecs
with codecs.open('y.py', 'w', 'utf8') as outputFile:
    outputFile.write(u'#!/usr/bin/python2\n')
    outputFile.write(u'#coding:utf8\n')
    outputFile.write(u'\n')
    outputFile.write(u'# ' + u'Syst\xe9m' + u'\n')
    outputFile.write(u'print \'Hello, World!\'\n')
"
how to access the class variable by string in Python?,"getattr(test, a_string)"
Chopping A Line From A Text Document Into Different Strings,"with open('somefile') as fp:
    for i, line in enumerate(fp):
        if i == some_number:
            a, *b, c, d, e, f = line.strip().split('|')
            b = '|'.join(b)
"
"BeautufulSoup 4, findNext() function","import bs4 as bs
content = '''\
<tr>
<td id=""freistoesse"">Giraffe</td>
<td>14</td>
<td>7</td>
</tr>'''
soup = bs.BeautifulSoup(content)

for td in soup.find('td', text='Giraffe').parent.find_all('td'):
    print(td.text)
"
Implementation of Luhn Formula,"def luhn_checksum(card_number):
    def digits_of(n):
        return [int(d) for d in str(n)]
    digits = digits_of(card_number)
    odd_digits = digits[-1::-2]
    even_digits = digits[-2::-2]
    checksum = 0
    checksum += sum(odd_digits)
    for d in even_digits:
        checksum += sum(digits_of(d*2))
    return checksum % 10

def is_luhn_valid(card_number):
    return luhn_checksum(card_number) == 0


result = is_luhn_valid(4532015112830366)
print 'Correct:' + str(result)
result = is_luhn_valid(6011514433546201)
print 'Correct:' + str(result)
result = is_luhn_valid(6771549495586802)
print 'Correct:' + str(result)
"
Counting runs in a string,">>> from itertools import groupby
>>> from collections import Counter
>>> strs = 'TTHHTHHTHHHHTTHHHTTT'
>>> Counter(k for k, g in groupby(strs))
Counter({'T': 5, 'H': 4})
"
Persistent python subprocess,">>> p = subprocess.Popen(['cat'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
>>> import fcntl, os
>>> fcntl.fcntl(p.stdout.fileno(), fcntl.F_SETFL, os.O_NONBLOCK)
0
>>> p.stdout.read()         # raises an exception instead of blocking
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
IOError: [Errno 11] Resource temporarily unavailable
"
Python setting Decimal Place range without rounding?,"def truncate(f, n):
    return math.floor(f * 10 ** n) / 10 ** n
"
How to get a method called (decorator?) after every object method,"import functools

def wrapit(func):
    @functools.wraps(func)
    def _(self, *args, **kwargs):
        func(self, *args, **kwargs)
        self.save_to_db()

    return _
"
Finding index of the same elements in a list,"[index for index, letter in enumerate(word) if letter == 'e']"
Load web page in python AFTER JavaScripts executes,"from selenium import webdriver

driver = webdriver.PhantomJS()
driver.get('http://lema.rae.es/drae/srv/search?val=azul')
print driver.find_element_by_css_selector(""body>div"").text
"
Populating dictionary from text file PYTHON,"import csv

with open('file.txt', 'r') as f:
    next(f) # skip header
    r = csv.reader(f, delimiter="" "")
    d = dict((int(row[0]), map(int,row[1:])) for row in r)
    print(d)

{1: [5, 6, 7], 2: [8, 9, 10]}
"
Counting/random int in while loop,"import random

sides = 4
count = 1 
die1 = random.randint(1,4)
die2 = random.randint(1,4)

while sides == 4 and die1 != die2:
    print (count, "". die number 1 is"", die1, ""and die number 2 is"", die2,""."")
    count += 1
    die1 = random.randint(1,4)
    die2 = random.randint(1,4)

print (""You got snake eyes! Finally! On try number"", count,""."")
"
Getting 2nd Next Value in For Loop Python,"data = ['08.10.17','D','520','08.11.01','W','20']
for date, type, amount in zip(data[0::3], data[1::3], data[2::3]):
    print date, type, amount
"
Insert values in lists following a pattern,"n = len(list_a)
newList = []
for i in range(0,n, 6):
    newList.append(list_a[i:i+6] ) 

    newTuple1 = (newList[-1][1], newList[i][0])
    newList.append(newTuple1)
    try:
        newTuple2 = (newTuple1[0] + 1, list_a[i+6][0])
        newList.append(newTuple2)
    except IndexError:
        print ""There was no next tuple""

print newList
"
Python: applying function to each column of an array,"[ np.sum(row) for row in C.T ]
"
Bash style process substitution with Python's Popen,"import os
import shutil
import tempfile
from contextlib import contextmanager
from subprocess import Popen, PIPE

@contextmanager
def named_pipe():
    dirname = tempfile.mkdtemp()
    try:
        path = os.path.join(dirname, 'named_pipe')
        os.mkfifo(path)
        yield path
    finally:
        shutil.rmtree(dirname)

with named_pipe() as path:
    p = Popen([""pram_axdnull"", str(kmer), input_filename, path],
              stdout=PIPE) # read from path
    with open(path, 'wb') as wpipe:
        kmer_proc = Popen([""generate_kmers"", str(kmer)],
                          stdout=wpipe) # write to path
    output = p.communicate()[0]
    kmer_proc.wait()
"
Python: select most frequent using group by,">>> mode = lambda x: x.mode() if len(x) > 2 else np.array(x)
>>> df.groupby('tag')['category'].agg(mode)

tag
automotive     8
ba             8
bamboo         8
banana tree    8
bath           9
"
Remove duplicate JSON objects from list in python,"te = [
      {
        ""Name"": ""Bala"",
        ""phone"": ""None""
      },
      {
        ""Name"": ""Bala"",
        ""phone"": ""None""
      },
      {
        ""Name"": ""Bala"",
        ""phone"": ""None""
      },
      {
        ""Name"": ""Bala"",
        ""phone"": ""None""
      },
      {
          ""Name"": ""Bala1"",
          ""phone"": ""None""
      }      
    ]

unique = { each['Name'] : each for each in te }.values()

print unique
"
How can I get index of elements which are not integer,"np.where(data != data.round())
(array([2, 3]),)
"
sorting list of tuples by arbitrary key,"sorted(mylist, key=lambda x: order.index(x[1]))"
how to change 39.54484700000000 to 39.54 and using python,">>> print ""%.2f"" % (39.54484700000000)
39.54
"
What is the most pythonic way to pop a random element from a list?,"while lst:
  x = lst.pop()
  # do something with the element      
"
Transcendental Equation,"b = -(1/tau)*log((1+L2*b)/kinf) # the old value of b gets lost here
"
How to fix the false positives rate of a linear SVM?,"from collections import Counter
import numpy as np
from sklearn.datasets import load_iris
from sklearn.svm import LinearSVC

data = load_iris()

# remove a feature to make the problem harder
# remove the third class for simplicity
X = data.data[:100, 0:1] 
y = data.target[:100] 
# shuffle data
indices = np.arange(y.shape[0])
np.random.shuffle(indices)
X = X[indices, :]
y = y[indices]

decision_boundary = 0
print Counter((clf.decision_function(X[50:]) > decision_boundary).astype(np.int8))
Counter({1: 27, 0: 23})

decision_boundary = 0.5
print Counter((clf.decision_function(X[50:]) > decision_boundary).astype(np.int8))
Counter({0: 39, 1: 11})
"
Python: Linking Lists Together,"def is_name(x):
  return # if x is a name or not
"
Performing a getattr() style lookup in a django template,"# app/templatetags/getattribute.py

import re
from django import template
from django.conf import settings

numeric_test = re.compile(""^\d+$"")
register = template.Library()

def getattribute(value, arg):
	""""""Gets an attribute of an object dynamically from a string name""""""

	if hasattr(value, str(arg)):
		return getattr(value, arg)
	elif hasattr(value, 'has_key') and value.has_key(arg):
		return value[arg]
	elif numeric_test.match(str(arg)) and len(value) > int(arg):
		return value[int(arg)]
	else:
		return settings.TEMPLATE_STRING_IF_INVALID

register.filter('getattribute', getattribute)
"
Many particles in box - physics simulation,"for i in range(len(position)):
    if position[i][0] > limit_x or position[i][0] < 0:
        velocity[i][0] = -velocity[i][0]
    if position[i][1] > limit_y or position[i][1] < 0:
        velocity[i][1] = -velocity[i][1]
"
how to check if a value exists in any array in python dictionary values?,">>> A = {
...     (0,0): [(0, 0), (1, 2), (3, 2)],
...     (1,1): [(2, 0)],
...     (10,1): [(0, 0), (2, 1)]
... }
>>> x0, y0 = 2, 0
>>> any((x0, y0) in v for v in A.itervalues())
True
>>> x0, y0 = 2, 42
>>> any((x0, y0) in v for v in A.itervalues())
False
"
Should I extract values from Python dictionaries into object attributes?,"class Foobar(object):
    def __init__(self, init_dict):
        self.__dict__.update(init_dict)
"
Pyspark changing type of column from date to string,"df.registerTempTable(""df"")
sqlContext.sql(
    ""SELECT date_format(vacationdate, 'dd-MM-YYYY') AS date_string FROM df"")
"
Conditioning on Regex,"regex = re.compile(r'''
           (?:\d{1,2}\s)(block\s\w*) # rule 1
             |   # or
           (?:(phase|apartment|building).*?)(block\s\w+) # rule 2
             ''', re.X)

found = regex.finditer(strings)

for i in found:
    print(i.groups())
"
Placing of modulo operation in code,"def mod_inv (a, b):
    return pow(a, b - 2, b)

mod_val=10**9+7
current=[int(x) for x in raw_input().strip().split()]
m=current[0]-1
n=current[1]-1

hi,lo=max(m,n),min(m,n)
num_prod=1
den_prod=1
for each in xrange(1,lo+1):
    den_prod = (den_prod*each) % mod_val
    num_prod = (num_prod*(hi+each)) % mod_val

print (num_prod * mod_inv(den_prod, mod_val)) % mod_val
"
Python: Want to use a string as a slice specifier,slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])
How does it make query ndb.AND condition more smart,"cards_count = Card.query()
for value in q:
  q = q.filter(tags_value==value)
cards_count = q.count()
"
How to os.walk deep defaultdict for values?,"data['w:x:y:z'] = {'a':5, 'b':10}

for path, d in data.items():
    print '%s:%s' % (path, ':'.join(""%s=%r"" % pair for pair in d.items()))
"
Store more than 1 value in python array?,">>> l = [(n,n+1) for n in xrange(0,4)]
>>> l
[(0, 1), (1, 2), (2, 3), (3, 4)]
"
saving inline image from splinter,"image_data = browser.driver.find_element_by_tag_name(""img"").get_attribute(""src"")
image_data = image_data[22:]  # getting rid of data:image/png;base64,

fh = open(str(step+1) + '.png', ""wb"")
fh.write(image_data.decode('base64'))
fh.close()
"
Gensim topic printing errors/issues,"import gensim as gs

documents = [""Human machine interface for lab abc computer applications"",
             ""A survey of user opinion of computer system response time"",
             ""The EPS user interface management system"",
             ""System and human system engineering testing of EPS"",
             ""Relation of user perceived response time to error measurement"",
             ""The generation of random binary unordered trees"",
             ""The intersection graph of paths in trees"",
             ""Graph minors IV Widths of trees and well quasi ordering"",
             ""Graph minors A survey""]

texts = [[word for word in document.lower().split()] for document in documents]
dictionary = gs.corpora.Dictionary(texts)
corpus = [dictionary.doc2bow(text) for text in texts]

tfidf = gs.models.TfidfModel(corpus)
corpus_tfidf = tfidf[corpus]

lsi = gs.models.LsiModel(corpus_tfidf, id2word=dictionary, num_topics=5)
lsi.print_topics()

for i in lsi.print_topics():
    print i
"
"In Python, loop through a dict and set all values of list or dict to string","dict((k, v if isinstance(v, (unicode, int, long)) else unicode(v))
     for k,v in dct.iteritems())
"
Python: intersection of 2 lists keeping duplicates from both lists,"import collections
for A,B,expected_output in (
    ([1,1,2,3], [1,1,2,4], [1,1,1,1,2]),
    ([1,1,2,3], [1,2,4], [1,1,2])):
    cntA = collections.Counter(A)
    cntB = collections.Counter(B)
    output = [
        x for x in sorted(set(A)) for i in range(cntA[x]*cntB[x])]
    assert output == expected_output
"
Finding Combinations to the provided Sum value,"def subsets_with_sum(lst, target, subset_lengths=range(1, 20), method='combinations'):   
    import itertools
    return [comb for i in subset_lengths for comb in
            getattr(itertools, method)(lst, i) if sum(comb) == target]

>>> subsets_with_sum(vals , 270)
[(114, 156), (57, 99, 114)]
"
Python Pandas replace values by their opposite sign,"df.loc[df[df<0].dropna().index] = -df
"
What would be a better implementation of all combinations in lexicographic order of a jagged list?,"def combinations(*seqs):
  if not seqs: return (item for item in ())
  first, rest = seqs[0], seqs[1:]
  if not rest: return ((item,) for item in first)
  return ((item,) + items for item in first for items in combinations(*rest))
"
How to make if-elif-else statement in python more space-saving?,"if message in ""0357"":
    ....
"
Adding index level to a dataframe,"import pandas as pd
df = pd.DataFrame(range(10), index=pd.date_range('2015-2-27', freq='B', periods=10))
#             0
# 2015-02-27  0
# 2015-03-02  1
# 2015-03-03  2
# 2015-03-04  3
# 2015-03-05  4
# 2015-03-06  5
# 2015-03-09  6
# 2015-03-10  7
# 2015-03-11  8
# 2015-03-12  9
first_col = ['s{:04d}'.format(i) for i in range(1,5)]
# ['s0001d', 's0002d', 's0003d', 's0004d']

newdf = pd.concat([df]*len(first_col), keys=first_col)
print(newdf)
"
python addition 2 digit number,"(num // 10) + (num % 10)
"
Find and list duplicates in Python list,"seen = set()
uniq = [x for x in a if x not in seen and not seen.add(x)]    
"
Group dictionary key values in python,">>> for key, group in itertools.groupby(mylist, lambda item: item[""mc_no""]):
...     print key, sum([item[""tmst""] for item in group])
... 
KA20 90.0
KA23 110.0
"
How to insert None into a list?,"def insert_none_for(iterable):
    it = iter(iterable)
    for x in it:
        yield x
        yield next(it)
        yield None
"
Is it possible to append two things at once as a list within a list? (Python),"x = 1.23
y = 4.56
list = [[4,5]]
sublist = [x,y]
list.append(sublist)
print list
"
"File, strip each line and add to key in dictionary","new_dict = {}
names = [] # used map 0, 1, 2 to `name`, `last`, `middle`
with open('/path/to/test.txt') as f:

    # Handle header (the first) line: `name, last, middle`
    for name in next(f).split(','): # split fields by `,`
        name = name.strip()  # remove surrounding spaces
        names.append(name)
        new_dict[name] = []  # initialize dictionary with empty list.

    # Handle body.
    for line in f:
        # enumerate(['bob', 'jones', 'm']) return an interator
        #    that generates (0, 'bob'), (1, 'jones'), (2, 'm')
        for i, value in enumerate(line.split(',')):
            new_dict[names[i]].append(value.strip())

print(new_dict)
"
Python: how to split a list into an unknown number of smaller lists based on a delimeter,"from itertools import groupby

class splitter(object):

    def __init__(self, breaker):
        self.breaker = breaker
        self.current_group = 0

    def __call__(self, item):
        if item == self.breaker:
            self.current_group+=1
        return self.current_group

    def group(self, items):
        return (list(v) for k,v in groupby(items,self))

print list(splitter('00:00').group(items))
"
Adding elements in arrays that fall within a criteria in Python,">>> view = a[:, :, 2]
>>> view[view < 0.1] += 1.0
"
Optimize runtime of calling 'in' many times on same string,"my_cleaned_string = re.sub(""[^a-zA-Z]"","""",my_str)
"
Using BeautifulSoup to select div blocks within HTML,"soup.find_all('div', class_='crBlock ')"
Python adding values in Tuples,"In [17]: a=[(1,2),(4,5),(1,0)]

In [18]: a.remove(max(a, key=sum))

In [19]: a
Out[19]: [(1, 2), (1, 0)]

In [20]: b = [(3,2),(9,4),(2,2)]

In [21]: b.remove(max(b,key=sum))

In [22]: b
Out[22]: [(3, 2), (2, 2)]
"
How to replace characters in string by the next one?,">>> from string import maketrans
>>> from string import ascii_lowercase
>>> cipher_map = maketrans(ascii_lowercase, ascii_lowercase[1:] + ascii_lowercase[:1])
>>> text = 'the quick brown fox jumped over the lazy dog'
>>> text.translate(cipher_map)
'uif rvjdl cspxo gpy kvnqfe pwfs uif mbaz eph'
"
Numpy matrix combination,"In [25]: M = np.empty((4, 4))

In [26]: M[:3, :3] = R

In [27]: M[:3, 3] = t

In [28]: M[3, :] = [0, 0, 0, 1]

In [29]: M
Out[29]: 
array([[ 0.51456517, -0.25333656,  0.81917231,  1.        ],
       [ 0.16196059,  0.96687621,  0.19727939,  2.        ],
       [-0.8420163 ,  0.03116053,  0.53855136,  0.5       ],
       [ 0.        ,  0.        ,  0.        ,  1.        ]])
"
How to reduce/aggregate a list of dicts per multiple keys in Python?,">>> from collections import defaultdict, Counter
>>> sales_per_store_per_day = [
...    {'date':'2014-06-01', 'store':'a', 'product1':10, 'product2':3, 'product3':15},
...    {'date':'2014-06-01', 'store':'b', 'product1':20, 'product2':4, 'product3':16},
...    {'date':'2014-06-02', 'store':'a', 'product1':30, 'product2':5, 'product3':17},
...    {'date':'2014-06-02', 'store':'b', 'product1':40, 'product2':6, 'product3':18},
... ]
>>> by_store = defaultdict(Counter)
>>> for info in sales_per_store_per_day:
...     counts = Counter({k: v for k, v in info.items() if k not in ('store', 'date')})
...     by_store[info['store']] += counts
... 
>>> [dict(v, store=k) for k, v in by_store.items()]
[{'store': 'a', 'product3': 32, 'product2': 8, 'product1': 40}, {'store': 'b', 'product3': 34, 'product2': 10, 'product1': 60}]
"
Summing integers across records in Spark,">>> from operator import add
>>> rdd = sc.parallelize([(1038, u'XYZ'), ...])
>>> (rdd.filter(lambda x: ""XYZ"" == x[1])
...  .map(lambda x: (x[1], x[0]))
...  .reduceByKey(add).collect())
[('XYZ', 5809)]
"
Distance matrix for rows in pandas dataframe,"data.apply(lambda col1: data.apply(lambda col2: method(col1, col2)))
"
Python: split a string using ONLY multiple spaces or single newline,">>> import re
>>> s = """"""TABLE: 
1 the quick                                     brown fox
3 jumped over                                 4 lazy dog""""""
>>> input1 = input('Please provide the string you want to search:\n')
Please provide the string:
over
>>> re.search(r'(\d+)\D*' + input1, s).group(1)
'3'
>>> input1 = input('Please provide the string:\n')
Please provide the string:
jumped over
>>> re.search(r'(\d+)\D*' + input1, s).group(1)
'3'
"
Python: Calling Functions Inside of a ForLoop,"def numEven(num):
    return num%2==0

def moreThan100(num):
    return num>100

def adding30(num):
    return num+30

evens, bigs, plus30s = [], [], []
for num in numbers:
    if numEven(num):
        evens.append(""%d is even."" % num)
    if moreThan100(num):
        bigs.append(""%d is greater than 100."" % num)
    plus30 = adding30(num)
    plus30s.append(""If you add 30 to %d, you get: %d"" % (num,plus30))

print_list(*events)
print_list(*bigs)
print_list(*plus30s)
"
Nonnegative matrix factorization in Sklearn,"nmf_model.fit(A);
H = nmf_model.components_.T;
"
Unicode extraction,"
import requests
from bs4 import BeautifulSoup
try:
    # Python2
    from urllib import unquote
except ImportError:
    # Python3
    from urllib.parse import unquote

for i in range(0,500):
    o=36*i
    r=requests.get('http://www.barneys.com/barneys-new-york/men?start='+str(o)+'&format=page-element&sz=36')
    soup=BeautifulSoup(r.text)
    links=soup.find_all(""a"",{""class"":""thumb-link""})
    for link in links:
        print(unquote(link.get('href')))
"
Integer Spacing (python),"if list_a[2] - list_a[1] == list_a[1] - list_a[0]:
  print True 
else:
  print False
"
how to get the neighboring elements in a numpy array with taking boundaries into account?,"import numpy as np
a = np.array([0,1,2,3,4,5,6,7,8,9])
num_neighbor=3    

for index in range(len(a)):
    left = a[:index][-num_neighbor:]
    right= a[index+1:num_neighbor+index+1]
    print(index,left,right)
"
How to create range of numbers in Python like in MATLAB,"print(np.linspace(1, 3, num=4, endpoint=False))"
How to change dataframe column names in pyspark?,"oldColumns = data.schema.names
newColumns = [""name"", ""age""]

df = reduce(lambda data, idx: data.withColumnRenamed(oldColumns[idx], newColumns[idx]), xrange(len(oldColumns)), data)
df.printSchema()
df.show()
"
Suppose I have a dictionary. How do I strip out all the keys? Edit: This is a nested dictionary,">>> d = { 1 : 2, 3: 4 }
>>> ' '.join(str(v) for v in d.values())
'2 4'
"
Dynamic module loading in python,"references = dict(zip(modules, map(__import__, modules)))
"
Split value into bins based on time,"from datetime import timedelta
from collections import defaultdict

def add_datum( dd, v ):
    end_dt = get_datetime(v['endTime'])
    start_dt = get_datetime(v['startTime'])
    total_duration = end_dt - start_dt 

    hour_start = datetime( year = start_dt.year, 
                           month = start_dt.month, 
                           day = start_dt.day, 
                           hour = start_dt.hour )
    hour_end = hour_start + timedelta( hours = 1 )

    while hour_start < end_dt:
        dt = min([hour_end, end_dt]) - max([ hour_start, start_dt ])
        fraction = 1.0 * dt.total_seconds() / total_duration.total_seconds()
        dd[ hour_start ]['hour'] = hour_start
        dd[ hour_start ]['entries'] += v['entriesDuringPeriod'] * fraction
        dd[ hour_start ]['exits'] += v['exitsDuringPeriod'] * fraction # exits

        hour_start = hour_end
        hour_end = hour_end + timedelta( hours = 1 )
    return dd


dd = defaultdict(lambda: {'entries':0,'exits':0})
all_data = [{ 'endTime': '03-25-14T21:40:30',
              'entriesDuringPeriod': 158,
              'exitsDuringPeriod': 597,
              'startTime': '03-25-14T17:03:23' },
            { 'endTime': '03-26-14T01:00:00',
              'entriesDuringPeriod': 29,
              'exitsDuringPeriod': 235,
              'startTime': '03-25-14T21:00:00' }]

[ add_datum( dd, i ) for i in all_data ]
res = dd.values()
res.sort( key = lambda i: i['hour'] )

print res
# [{'entries': 32.28038732182594,
#   'exits': 121.97083057677271,
#   'hour': datetime.datetime(2014, 3, 25, 17, 0)},
#  {'entries': 34.209418415829674,
#   'exits': 129.25963793829314,
#   'hour': datetime.datetime(2014, 3, 25, 18, 0)},
#  {'entries': 34.209418415829674,
#   'exits': 129.25963793829314,
#   'hour': datetime.datetime(2014, 3, 25, 19, 0)},
#  {'entries': 34.209418415829674,
#   'exits': 129.25963793829314,
#   'hour': datetime.datetime(2014, 3, 25, 20, 0)},
#  {'entries': 30.34135743068503,
#   'exits': 146.00025560834786,
#   'hour': datetime.datetime(2014, 3, 25, 21, 0)},
#  {'entries': 7.25,
#   'exits': 58.75,
#   'hour': datetime.datetime(2014, 3, 25, 22, 0)},
#  {'entries': 7.25,
#   'exits': 58.75,
#   'hour': datetime.datetime(2014, 3, 25, 23, 0)},
#  {'entries': 7.25,
#   'exits': 58.75,
#   'hour': datetime.datetime(2014, 3, 26, 0, 0)}]
"
"Guessing a number, true or false? Python","guessfoo = int(input('Guess my number: '))
"
How to flexibly change PYTHONPATH,"$ PYTHONPATH=/put/path/here python myscript.py
"
How can I wrap an empty function to be implemented by a child class in a try-except block?,"class Base (object):
    class Protected (object):
        def __init__ (self, target):
            self.target = target

        def get_message (self):
            try:
                return self.target.get_message ()
            except Exception as detail:
                print (""error:"", detail)
            return None

    def __init__ (self):
        self.protected = self.Protected (self)

    def get_message (self):
        raise Exception (""Not Implemented"")
"
Sorting a list of lists in Python,"c2.sort(key = lambda row: (row[2],row[1]))
"
How to display text on the screen without a window using Python,"import win32api, win32con, win32gui, win32ui

def main():
    hInstance = win32api.GetModuleHandle()
    className = 'MyWindowClassName'

    # http://msdn.microsoft.com/en-us/library/windows/desktop/ms633576(v=vs.85).aspx
    # win32gui does not support WNDCLASSEX.
    wndClass                = win32gui.WNDCLASS()
    # http://msdn.microsoft.com/en-us/library/windows/desktop/ff729176(v=vs.85).aspx
    wndClass.style          = win32con.CS_HREDRAW | win32con.CS_VREDRAW
    wndClass.lpfnWndProc    = wndProc
    wndClass.hInstance      = hInstance
    wndClass.hCursor        = win32gui.LoadCursor(None, win32con.IDC_ARROW)
    wndClass.hbrBackground  = win32gui.GetStockObject(win32con.WHITE_BRUSH)
    wndClass.lpszClassName  = className
    # win32gui does not support RegisterClassEx
    wndClassAtom = win32gui.RegisterClass(wndClass)

    # http://msdn.microsoft.com/en-us/library/windows/desktop/ff700543(v=vs.85).aspx
    # Consider using: WS_EX_COMPOSITED, WS_EX_LAYERED, WS_EX_NOACTIVATE, WS_EX_TOOLWINDOW, WS_EX_TOPMOST, WS_EX_TRANSPARENT
    # The WS_EX_TRANSPARENT flag makes events (like mouse clicks) fall through the window.
    exStyle = win32con.WS_EX_COMPOSITED | win32con.WS_EX_LAYERED | win32con.WS_EX_NOACTIVATE | win32con.WS_EX_TOPMOST | win32con.WS_EX_TRANSPARENT

    # http://msdn.microsoft.com/en-us/library/windows/desktop/ms632600(v=vs.85).aspx
    # Consider using: WS_DISABLED, WS_POPUP, WS_VISIBLE
    style = win32con.WS_DISABLED | win32con.WS_POPUP | win32con.WS_VISIBLE

    # http://msdn.microsoft.com/en-us/library/windows/desktop/ms632680(v=vs.85).aspx
    hWindow = win32gui.CreateWindowEx(
        exStyle,
        wndClassAtom,
        None, # WindowName
        style,
        0, # x
        0, # y
        win32api.GetSystemMetrics(win32con.SM_CXSCREEN), # width
        win32api.GetSystemMetrics(win32con.SM_CYSCREEN), # height
        None, # hWndParent
        None, # hMenu
        hInstance,
        None # lpParam
    )

    # http://msdn.microsoft.com/en-us/library/windows/desktop/ms633540(v=vs.85).aspx
    win32gui.SetLayeredWindowAttributes(hWindow, 0x00ffffff, 255, win32con.LWA_COLORKEY | win32con.LWA_ALPHA)

    # http://msdn.microsoft.com/en-us/library/windows/desktop/dd145167(v=vs.85).aspx
    #win32gui.UpdateWindow(hWindow)

    # http://msdn.microsoft.com/en-us/library/windows/desktop/ms633545(v=vs.85).aspx
    win32gui.SetWindowPos(hWindow, win32con.HWND_TOPMOST, 0, 0, 0, 0,
        win32con.SWP_NOACTIVATE | win32con.SWP_NOMOVE | win32con.SWP_NOSIZE | win32con.SWP_SHOWWINDOW)

    # http://msdn.microsoft.com/en-us/library/windows/desktop/ms633548(v=vs.85).aspx
    #win32gui.ShowWindow(hWindow, win32con.SW_SHOW)

    win32gui.PumpMessages()

def wndProc(hWnd, message, wParam, lParam):
    if message == win32con.WM_PAINT:
        hdc, paintStruct = win32gui.BeginPaint(hWnd)

        dpiScale = win32ui.GetDeviceCaps(hdc, win32con.LOGPIXELSX) / 60.0
        fontSize = 80

        # http://msdn.microsoft.com/en-us/library/windows/desktop/dd145037(v=vs.85).aspx
        lf = win32gui.LOGFONT()
        lf.lfFaceName = ""Times New Roman""
        lf.lfHeight = int(round(dpiScale * fontSize))
        #lf.lfWeight = 150
        # Use nonantialiased to remove the white edges around the text.
        # lf.lfQuality = win32con.NONANTIALIASED_QUALITY
        hf = win32gui.CreateFontIndirect(lf)
        win32gui.SelectObject(hdc, hf)

        rect = win32gui.GetClientRect(hWnd)
        # http://msdn.microsoft.com/en-us/library/windows/desktop/dd162498(v=vs.85).aspx
        win32gui.DrawText(
            hdc,
            'Text on the screen',
            -1,
            rect,
            win32con.DT_CENTER | win32con.DT_NOCLIP | win32con.DT_SINGLELINE | win32con.DT_VCENTER
        )
        win32gui.EndPaint(hWnd, paintStruct)
        return 0

    elif message == win32con.WM_DESTROY:
        print 'Closing the window.'
        win32gui.PostQuitMessage(0)
        return 0

    else:
        return win32gui.DefWindowProc(hWnd, message, wParam, lParam)


if __name__ == '__main__':
    main()
"
Extracting strings starting with symbols and combining with others from a text using python,">>> import re
>>> text1 = '\bhttp://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf#Reference http://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf#Informal ACADEMIC type http://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf#school ACADEMIC type'
>>> re.sub(r'https?://[^# ]+#?', '', text1)
'Reference Informal ACADEMIC type school ACADEMIC type'
"
how to do a complex replace in python using regex?,">>> d = {'t1': 'm1', 'year': '2003'}
>>> fmt = ""select * from records where year = #{year} and t1 = #{t1}""
>>> import re
>>> re.sub(r'#\{(.*?)\}', lambda m: d[m.group(1)], fmt) # m -> match object
'select * from records where year = 2003 and t1 = m1'
"
Splitting a Python datetime into hour-aligned chunks,"import dateutil.rrule as rrule
import datetime

def hours_aligned(start, end, inc = True):
    if inc: yield start
    rule = rrule.rrule(rrule.HOURLY, byminute = 0, bysecond = 0, dtstart=start)
    for x in rule.between(start, end, inc = False):
        yield x
    if inc: yield end

d = datetime.datetime(2012, 9, 8, 18, 53, 34)
td = datetime.timedelta(hours=2, minutes=34, seconds=5)

for x in hours_aligned(d,d+td):
    print(x)
"
How to unpack multiple tuples in function call,">>> tup1 = 1, 2
>>> tup2 = 2, 3
>>> def f(a, b, c, d):
        print(a, b, c, d)

>>> f(*tup1+tup2)
1 2 2 3
"
How to parse complex string,"Parse HandBrakeCLI output
def getHandBrakeInformation(l):
    currentTitle = None
    titleDict = {}
    returnDict = {}
    for line in l:
        if line.startswith('+ title'):
            titleNum = line.rstrip(':').split(' ')
            currentTitle = ""%s_%s"" % (titleNum[1], titleNum[2])
            titleDict[currentTitle] = []
            returnDict[currentTitle] = {}
        else:
            titleDict[currentTitle].append(line[2:])

    currentTrack = None
    for title in titleDict:
        for key in titleDict[title]:
            if key.startswith('+ duration:'):
                duration = key.split(' ')
                duration = duration[2]
                returnDict[title]['duration'] = duration
                titleDict[title].remove(key)
            elif key.startswith('+ audio') or key.startswith('+ subtitle'):
                currentTrack = key[2:-1].replace(' ', '_')
                returnDict[title][currentTrack] = {}
            elif currentTrack is not None and not key.startswith('+'):
                currentTrackValueSplit = key[4:].split(',', 1)
                returnDict[title][currentTrack][currentTrackValueSplit[0].strip()] = currentTrackValueSplit[1].strip()
            else:
                currentTrack = None
    return returnDict
"
"Creating a dynamic ""variable layout"" for split() in Python","import re


ref_fields = ['s-port',
              'time','date', 
              's-sitename', 's-ip',
              'cs(User-Agent)', 'sc-status', 
              'sc-substatus', 'sc-win32-status',
              'c-ip',
              'cs-username',
              'cs-method', 'cs-uri-stem', 'cs-uri-query']

print 'REF_FIELDS :\n------------\n%s\n' % '\n'.join(ref_fields)


############################################
file_path = 'I:\\sample[1].log'                  # Path to put here
############################################


with open(file_path, 'r') as log_lines:
    line = ''
    while line[0:8]!='#Fields:':
        line = next(log_lines)
    # At this point, line is the line containing the fields keywords
    print 'line of the fields keywords:\n----------------------------\n%r\n' % line

    found_fields = line.split()[1:]
    len_found_fields = len(found_fields)
    regex_extractor = re.compile('[ \t]+'.join(len_found_fields*['([^ \t]+)']))
    print 'list found_fields of keywords in the file:\n------------------------------------------\n%s\n' % found_fields

    print '\nfound_fields == ref_fields  is ',found_fields == ref_fields




    if found_fields == ref_fields:
        print '\nNORMAL ORDER\n------------'
        def line_spliter(line):
            return line.split()

    else:
        the_order = [ found_fields.index(fild) + 1 for fild in ref_fields]
        # the_order is the list of indexes localizing the elements of ref_fields 
        # in the order in which they succeed in the actual line of found fields keywords
        print '\nSPECIAL ORDER\n-------------\nthe_order == %s\n\n\n======================' % the_order
        def line_spliter(line):
            return regex_extractor.match(line).group(*the_order)



    for i in xrange(1):
        line = next(log_lines)
        (s_port,
        time, date,
        s_sitename, s_ip,
        cs_user_agent, sc_status, sc_substatus, sc_win32_status,
        c_ip,
        cs_username,
        cs_method, cs_uri_stem, cs_uri_query) = line_spliter(line)
        print ('LINE :\n------\n'
               '%s\n'
               'SPLIT LINE :\n--------------\n'
               '%s\n\n'
               'REORDERED SPLIT LINE :\n-------------------------\n'
               '%s\n\n'
               'EXAMPLE OF SOME CORRECT BINDINGS OBTAINED :\n-------------------------------------------\n'
               'date == %s\n'
               'time == %s\n'
               's_port == %s\n'
               'c_ip == %s\n\n'
               '======================') % (line,'\n'.join(line.split()),line_spliter(line),date,time,s_port,c_ip)




# ---- split each logline into multiple variables, populate dictionaries and db ---- #      
def splitLogline(log_line):
        # needs to be dynamic (for different logging setups)
        s_port,
        time, date,
        s_sitename, s_ip,
        cs_user_agent, sc_status, sc_substatus, sc_win32_status,
        c_ip,
        cs_username,
        cs_method, cs_uri_stem, cs_uri_query = line_spliter(line)
"
Combining lists in python,"import itertools

a = ['ibm', 'dell']
b = ['strength', 'weakness']

[' '.join(x) for x in itertools.product(a, b)]
=> ['ibm strength', 'ibm weakness', 'dell strength', 'dell weakness']
"
How to use lxml to find an element by text?,"e = root.xpath('.//a[starts-with(text(),""TEXT A"")]')
"
Comparing two CSV files in Python when rows have multiple values,"from itertools import islice, imap
import csv
with open(""in.txt"") as f,open(""numbers.txt"") as nums:
    # make a set of all winning nums
    nums = set(imap(str.rstrip, nums))
    r = csv.reader(f)
    # iterate over each row and sum how many matches we get
    for row in r:
        print(""{} matched {}"".format(row[0], sum(n in nums
                                                 for n in islice(row, 1, None))))
"
Build string by selecting column in csv,"with open('InputList.csv') as l:
    inputList = csv.reader(l)
    for item in inputList:
        print('At {} {} the ID is {}'.format(*item.split()))
"
if statement in django,"for name in tree.iter('name'):
    if name.text.lower() == nome.lower():
        c = Context({'id' : name.text})
        r1 = HttpResponse(t.render(c), mimetype='application/xml')
        return r1
 # move return indentation to match here, i.e after the for loop completes
"
Updating a saved csv,"import csv


def toevoegenIn():
    bron = str(raw_input(""Welke bron wilt U toevoegen? ""))
    bedrag = int(input(""Welk bedrag hoort daarbij? ""))
    return {bron: bedrag}

if __name__ == '__main__':
    # Step 1: Load all the data in a dictionary. The cells might come with
    #         undesired extra spaces in them. Use strip to remove those.
    loaded_data = {}
    with open('test.csv', 'r') as csv_file_r:
        reader = csv.reader(csv_file_r, delimiter=':')
        loaded_data = {}
        for row in reader:
            loaded_data[row[0].strip()] = int(row[1].strip())

    print ""Initial data: %s"" % loaded_data
    # Step 2: Ask the user what data to change.
    #         The toevoegenIn function will return a 
    #         one-key dictionary.
    change_data = toevoegenIn()
    # Step 3: Use dict.update to update your initial data with the
    #         dict retrieved above.
    #         If the modified key already existed in the original dict,
    #         it will be modified to the value entered by the user.
    #         If the key wasn't in the original dict, it'll be added.
    loaded_data.update(change_data)
    print ""Updated data: %s"" % loaded_data

    # Step 4: Write the new data. I put it into a new file, just 
    #         in case you don't wanna overwrite the original one. If
    #         you do want to overwrite, just change the file's name to
    #         the original file.
    with open('test.csv.new', 'w') as csv_file_w:
        writer = csv.writer(csv_file_w, delimiter=':')
        for key, val in loaded_data.items():
            writer.writerow([key, val])

    # Make a quick confirmation read:
    with open('test.csv.new', 'r') as f:
        print ""new_contents:\n%s"" % f.read()
"
shuffle a python array WITH replacement,"[random.choice(lst) for _ in range(len(lst))]
"
Python List of tuples positionally,">>> a=[('id',     'name', 'value_1', 'value_2'),('id',    'name', 'value_3', 'value_4')]
>>> b=[('id_key', 'name', 'value_5', 'value_6'),('id_key','name', 'value_7', 'value_8')]
>>> [(t[0], '') + t[1:] for t in a] + [('',) + t for t in b]
[('id', '', 'name', 'value_1', 'value_2'), ('id', '', 'name', 'value_3', 'value_4'), ('', 'id_key', 'name', 'value_5', 'value_6'), ('', 'id_key', 'name', 'value_7', 'value_8')]
"
split url by python,">>> re.search(r""/(?P<number1>\d+)\?t:ac=(?P<number2>\d+)/(?P<number3>\d+)"", url).groupdict()
{'number2': '3686967', 'number3': '3700610', 'number1': '3700620'}
"
Neighbourhood of Scipy Labels,"import numpy as np
from scipy.ndimage import distance_transform_edt

labels = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                  [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                  [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                  [0, 1, 1, 1, 1, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
                  [0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
                  [0, 0, 0, 0, 0, 0, 2, 2, 2, 0],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] )
i, j = distance_transform_edt(labels == 0, return_distances=False, 
                              return_indices=True) 
neighborhoods = labels[i,j]
print neighborhoods
"
How to map a function to every item in every sublist of a list,">>> [[y * 2 for y in x] for x in [[1, 2, 3], [4, 5, 6]]]
[[2, 4, 6], [8, 10, 12]]
"
Optimizing the search of a string in a phrases. Don't know which Python structures I need to use,"weight = sum(weights[word] for word in sentence.split())
"
merge lists into a list of tuples,"zip(list_a, list_b)"
"In Python BeautifulSoup4, How to extract the special text like this","for tag in soup.find_all('li'):
    print(tag.get_text())
"
Python: how to compute date ranges from a list of dates?,"import datetime
import pprint

def parse(date):
    return datetime.date(*[int(i) for i in d.split('-')])

def get_ranges(dates):
    while dates:
        end = 1
        try:
            while dates[end] - dates[end - 1] == datetime.timedelta(days=1):
                end += 1
        except IndexError:
            pass

        yield {
            'start-date': dates[0],
            'end-date': dates[end-1]
        }
        dates = dates[end:]

dates = [
    '2011-02-27', '2011-02-28', '2011-03-01',
    '2011-04-12', '2011-04-13',
    '2011-06-08'
]

# Parse each date and convert it to a date object. Also ensure the dates
# are sorted, you can remove 'sorted' if you don't need it
dates = sorted([parse(d) for d in dates]) 

pprint.pprint(list(get_ranges(dates)))
"
Nested maps in Python 3,"f1_b = list(map(lambda x: list(map(lambda t: t.strip(), x.split(',', 1))), lst))
"
Detect repetitions in string,"import re
def repetitions(s):
   r = re.compile(r""(.+?)\1+"")
   for match in r.finditer(s):
       yield (match.group(1), len(match.group(0))/len(match.group(1)))
"
Scraping with BeautifulSoup and multiple paragraphs,"paras = ["""".join(x.findAll(text=True)) for x in span.findAllNext(""p"")]
"
"String formatting : Replace ""%0 %1 %2"" with tuple with 0,1,2 indexes","print("" "".join([""{""+w[1:]+""}"" if w[0] == ""%"" else w for w in s.split("" "")]).format(*args))

three and two and one 
"
Splitting a string and adding the digits inside of the string,">>> import re
>>> s = 'a12b34'
>>> total = sum(map(int,re.findall(r'-?\d+', s))) # -? is to cover negative values
46
"
Python - How to read lines of lists in a text file directly into lists in python,"import ast

with open(filename, 'r') as fh:
    for line in fh:
        listobj = ast.literal_eval(line)
"
how to change a tuple into dictionary tree in python,">>> from pprint import pprint
>>> t = (
...   (1, -1, 'python'),
...   (2, -1, 'ruby'),
...   (3, -1, 'php'),
...   (4, -1, 'lisp'),
...   (5,  1, 'flask'),
...   (6,  1, 'django'),
...   (7,  1, 'webpy'),
...   (8,  2, 'rails'),
...   (9,  3, 'zend'),
...   (10, 6, 'dblog')
... )
>>> l = []
>>> entries = {}
>>> for id, fid, title in t:
...     entries[id] = entry = {'id': id, 'fid': fid, 'title': title}
...     if fid == -1:
...         l.append(entry)
...     else:
...         parent = entries[fid]
...         parent.setdefault('son', []).append(entry)
... 
>>> pprint(l)
[{'fid': -1,
  'id': 1,
  'son': [{'fid': 1, 'id': 5, 'title': 'flask'},
          {'fid': 1,
           'id': 6,
           'son': [{'fid': 6, 'id': 10, 'title': 'dblog'}],
           'title': 'django'},
          {'fid': 1, 'id': 7, 'title': 'webpy'}],
  'title': 'python'},
 {'fid': -1,
  'id': 2,
  'son': [{'fid': 2, 'id': 8, 'title': 'rails'}],
  'title': 'ruby'},
 {'fid': -1,
  'id': 3,
  'son': [{'fid': 3, 'id': 9, 'title': 'zend'}],
  'title': 'php'},
 {'fid': -1, 'id': 4, 'title': 'lisp'}]
"
PySpark IPython - reduce RDD into a new RDD with different key,"input_RDD.map(lambda x: x[1]).reduceByKey(lambda x,y: x+y)
"
Grabbing selection between specific dates in a DataFrame,"df = DataFrame('a': np.random.randn(100), 'b':np.random.randn(100)})
mask = (df.b > -.5) & (df.b < .5)
df_masked = df[mask]
"
python encode hex pad every character with 00,">>> hextext = ""H:\myfilepath.myfileending""
>>> encodedhex = """".join(c.encode(""hex"")+""00"" for c in hextext)
>>> encodedhex
'48003a005c006d007900660069006c00650070006100740068002e006d007900660069006c00650065006e00640069006e006700'
>>> encodedhex.upper()
'48003A005C006D007900660069006C00650070006100740068002E006D007900660069006C00650065006E00640069006E006700'
"
"split by elements of a string, and create a dictionary with {element used to split: that chunk of text}","import re

text = ""Mr. McCONNELL. yadda yadda jon stewart is mean to me. The PRESIDING OFFICER. Suck it up. Mr. McCONNELL. but noooo. Mr. REID. Really dude?""

speakers = [""McCONNELL"", ""PRESIDING OFFICER"", ""REID""]

speakers_re = re.compile('(' + '|'.join([re.escape(s) for s in speakers]) + ')')

print speakers_re.split(text)
"
Python: How to generate a 12-digit random number?,"int(''.join(str(random.randint(0, 9)) for _ in range(12)))"
Sensing new line?,"print var.replace('\n', '\\n')
"
SearchCtrl in wxPython looks different,"#!/usr/bin/env python
import wx

app = wx.App(False)
frame = wx.Frame(None, wx.ID_ANY, ""Hello World"")
sizer = wx.BoxSizer(wx.HORIZONTAL)

menu = wx.Menu()
menu.Append(wx.ID_ABOUT, 'About')

search = wx.SearchCtrl(frame)
search.ShowCancelButton(True)
search.SetMenu(menu)

sizer.Add(search, 0)
frame.SetSizer(sizer)
frame.SetAutoLayout(1)
sizer.Fit(frame)
frame.Show()
app.MainLoop()
"
find the most common length of text line in a file with various line sizes present using python,"from collections import Counter

def most_common_line_len(filename):
    with open('somefile.txt') as f:
        return Counter(map(len, f.read().splitlines())).most_common(1)[0][0]

print(most_common_line_len('somefile.txt'))  # --> 3 for your sample data
"
Python how to find a list of string that's inbetween 2 substring?,"RegEx Explained:
r'\$\/(.+?):'
"
Splitting a string where it switches between numeric and alphabetic characters,">>> ["""".join(x) for _, x in itertools.groupby(""dfsd98sd8f68as7df56"", key=str.isdigit)]
['dfsd', '98', 'sd', '8', 'f', '68', 'as', '7', 'df', '56']
"
Replacing entries of an array with those of different array,"array3 = array1.astype(float) # this copies the array by default.
array3[array1 != 0] = array2[array1[array1 != 0]-1, 2]
"
Python speed up the code for reconstructing lists,"from itertools import chain,count,cycle
with open(""out.txt"",""wb"") as f:
    for eachlist in alllists:
        merged = zip(cycle([eachlist[0],]),count(1),eachlist[1:])
        f.write( ""\t"".join( map(str,chain.from_iterable(merged)) ) )
        f.write(""\n"")
"
How to get lists of indices to unique values efficiently?,">>> unq, unq_inv = np.unique(a, return_inverse=True)
>>> f_unq = unq**2
>>> f_a = f_unq[unq_inv]
>>> a
array([0, 2, 4, 4, 2, 4, 4, 3, 2, 1])
>>> f_a
array([ 0,  4, 16, 16,  4, 16, 16,  9,  4,  1])
"
Python sort in a dictionary and a set,"for key in sorted(index):
    print('{:<20}{}'.format(key, ', '.join(str(i) for i in sorted(index[key]))))
"
Python mapping between lists for duplicates,"from collections import defaultdict

mapping = defaultdict(set)
for v1, v2 in zip(List1, List2):
    mapping[v2].add(v1)
"
Pass SQLAlchemy Query to Base Jinja Template,"def get_pending_users(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        pending_users = user.company.users.filter(User.account_approved == False).all()
        if g.pending_users is None:
           g.pending_users = pending_users
        return f(*args, **kwargs)
    return decorated_function
"
Multi threading in python using parallel threads,"import threading
import time
import datetime

class Worker1( threading.Thread ):
    def __init__(self, state):
        super(Worker1, self).__init__()
        self.state = state    

        def run(self):
            print_time_helper(""Worker1 Start"")
        time.sleep(4)
        print_time_helper(""Worker1 End"")
        self.state.keepOnRunning = False

class Worker2( threading.Thread ):
    def __init__(self, state):
        super(Worker2, self).__init__()
        self.state = state 

    def run(self):
        while self.state.keepOnRunning:
            print_time_helper(""Worker2"")
            time.sleep(1)

class State( object ):
    def __init__(self):
        self.keepOnRunning = True        

def main():
    state = State()

    thread1 = Worker1(state)
    thread2 = Worker2(state)

    thread1.start()
    thread2.start()

    thread1.join()
    thread2.join()

def print_time_helper(name):
    print ""{0}: {1}"".format(name, datetime.datetime.now().time().strftime(""%S""))
"
merging xml files using python's ElementTree,"import os, os.path, sys
import glob
from xml.etree import ElementTree

def run(files):
    xml_files = glob.glob(files +""/*.xml"")
    xml_element_tree = None
    for xml_file in xml_files:
        data = ElementTree.parse(xml_file).getroot()
        # print ElementTree.tostring(data)
        for result in data.iter('results'):
            if xml_element_tree is None:
                xml_element_tree = data 
                insertion_point = xml_element_tree.findall(""./results"")[0]
            else:
                insertion_point.extend(result) 
    if xml_element_tree is not None:
        print ElementTree.tostring(xml_element_tree)
"
How to split a string by using [] in Python,"import re
s = ""name[id]""

# split by either a '[' or a ']'
re.split('\[|\]', s) # = ['name', 'id', '']
"
Call python script with input with in a python script using subprocess,"#!/usr/bin/env python
from multiprocessing import freeze_support, Pool
import a

if __name__ == ""__main__"":
   freeze_support()
   pool = Pool() # use all available CPUs
   result = pool.map(a.search, ['query 1', 'query 2'])
"
How to write a REAL32 value to a file in Python?,"values = (300.0, 200.0, 100.0)
fout.write(struct.pack('<3f',*values))
"
How to remove frame from matplotlib (pyplot.figure vs matplotlib.figure ) (frameon=False Problematic in matplotlib),"import matplotlib.pyplot as plt

fig = plt.figure(frameon=False)
ax = fig.add_axes([0, 0, 1, 1])
ax.axis('off')

ax.plot(range(10))

with open('test.png', 'w') as outfile:
    fig.canvas.print_png(outfile)
"
Compare and replace items in a string,">>> import re
>>> line = '{2}*{3}^2'
>>> factorseq_dict = [('2', 'NAME1'), ('3', 'NAME2')]
>>> dict_ = dict(factorseq_dict)
>>> re.sub(r'\{(\d+)\}', lambda m: '{' + dict_[m.group(1)] + '}', line)
'{NAME1}*{NAME2}^2'
"
zipping a python dict of lists,">>> a = {1:[1,2,3,4],2:[5,6,7,8], 3:[9, 10, 11, 12]}
>>> 
>>> zip(*(a[k] for k in sorted(a)))
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]
"
Storing each column in a separate dictionary using python,"with open('somefile.txt', 'r') as f:
   reader = csv.DictReader(f, delimiter='\t')
   rows = list(reader) # If your file is not large, you can
                       # consume it entirely

   # If your file is large, you might want to 
   # step over each row:
   #for row in reader:
   #    print(row['A'])

for row in rows:
   print(row['A'])
"
Avoiding unnecessary memory consumption in Python and wxPython,"import wx
from wx.lib.pubsub import setupkwargs
from wx.lib.pubsub import pub
from threading import Thread
import threading
import time

class gui(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, None, id, title, size=(500,400))
        myPanel = wx.Panel(self, -1, size=(300,200))
        image1 = wx.Image('green.bmp', wx.BITMAP_TYPE_ANY).ConvertToBitmap()
        self.bitmap2 = wx.StaticBitmap(myPanel, -1, image1, (0, 0))
        pub.subscribe(self.addImage, 'Update')
        self.myButton = None

    def addImage(self):
        # Don't keep adding children to bitmap2
        if self.myButton:
            self.myButton.Destroy()
        self.myButton = wx.Button(self.bitmap2, -1, size =(30,30), pos=(20,20))
        image2 = wx.Image('blue.bmp', wx.BITMAP_TYPE_ANY).ConvertToBitmap()
        self.bitmap1 = wx.StaticBitmap(self.myButton, -1, image2, (0, 0))


class myThread(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.start()
    def run(self):
        while True:
            time.sleep(2)
            wx.CallAfter(pub.sendMessage, 'Update')

if __name__=='__main__':
    app = wx.App()
    frame = gui(parent=None, id=-1, title=""Test"")
    frame.Show()
    myThread()
    app.MainLoop()
"
"python, rebuilding lists",">>> sel = [(x, 1-y) for x,y in sel]
>>> sel
[(0, 1), (0, 0), (1, 0), (1, 1)]
"
Python logging typeerror,logging.info('test')
Replacing characters in a string and returning in python,"replacewith = {'<':'lt;', '>':'gt;'}
for w in replacewith:
        word = word.replace(w,replacewith[w])

In [407]: word
Out[407]: 'lt;pgt;Santa is fatlt;/pgt;'
"
Finding a repeating set of strings among a larger set,"def repeater(strings, k):
    seen = set()
    rep, ctr = None, None
    for i in range(len(strings) - k + 1):
        seq = tuple(strings[i:i+k])
        if rep:
            ctr += seq == rep
        elif seq in seen:
            rep, ctr = seq, 2
        else:
            seen.add(seq)
    return rep, ctr
"
Python - Convert a matrix to edge list/long form,"csv = open(""mat.csv"")

columns = csv.readline().strip().split(',')[1:]
for line in csv:
    tokens = line.strip().split(',')
    row = tokens[0]
    for column, cell in zip(columns,tokens[1:]):
        print '{},{},{}'.format(row,column,cell)
"
Edit a csv to show 5 columns in a specific order while applying a format to the datetime field,"def change_file(in_file,cols):
    with open(in_file) as f, NamedTemporaryFile(""w"", dir=""."", delete=False) as tmp:
        r = csv.reader(f)
        wr =  csv.writer(tmp)
        for row in r:
            new = [datetime.strptime(dt, ""%m/%d/%Y %H:%M:%S %p"").isoformat() for dt in itemgetter(*cols)(row)]
            wr.writerow(new)
        move(tmp.name, in_file)
"
How to calculate p-value for two lists of floats?,">>> from itertools import combinations
>>> from scipy.stats import ttest_ind
>>> for list1, list2 in combinations(data.keys(), 2):
...     t, p = ttest_ind(data[list1], data[list2])
...     print list1, list2, p
...
a c 9.45895002589e-09
a b 0.315333596201
c b 8.15963804843e-09
"
Beautifulsoup: get class name for each word,"from bs4 import BeautifulSoup

data = """"""
<p>
<span class=""A"">I am </span>
<span class=""B""><span class=""C""> not </span> doing a great job </span>
</p>""""""

soup = BeautifulSoup(data, ""html.parser"")

result = []
for text in soup.p.find_all(text=True):
    parent = text.parent
    parent_class = parent[""class""][0] if ""class"" in parent.attrs else """"
    for word in text.split():
        result.append([word, parent_class])

print(result)
"
2D Array - Select range of columns,"C = A[:,m:n]
"
How to load start URLs with parameters?,"class MySpider(Spider):
    def __init__(self, *args, **kwargs):
        super(MySpider, self).__init__(*args, **kwargs)

        self.mapping = get_url_id_mapping_from_db()

        self.start_urls = mapping.keys()

    def parse(self, response):
        id = self.mapping[response.url]
        ...
"
python - possible to apply percentile cuts to each column in a dataframe?,"In [46]: df.apply(lambda x: pd.qcut(x, 5, labels=list(range(5))), axis=0)
Out[46]: 
   0  1  2  3  4
0  4  0  3  0  3
1  0  0  2  3  0
2  3  4  1  2  3
3  4  1  1  1  4
4  3  2  2  4  1
5  2  4  3  0  1
6  2  3  0  4  4
7  1  3  4  2  2
8  0  1  4  3  0
9  1  2  0  1  2
"
Is it possible in python to define functions outside of a programs main namespace and add them for easy access like a .h file in c?,"from coke import *
make(data)
"
Randomly Keep X Percent of Dictionary,"dict(random.sample(votes_selected.iteritems(), int(len(votes_selected) * DATA_PERCENTAGE / 100)))
"
Taking a hex file and extracting data,"import os
import binascii
import mmap

header = binascii.unhexlify(""000100a0"")
footer = binascii.unhexlify(""0000000000"")
sample = binascii.unhexlify(""ABCD""
                ""000100a0AAAAAA000000000000""
                ""ABCDABCD""
                ""000100a0BBBBBB000000000000""
                ""ABCD"")

# Create the sample file:
with open(""sample.data"", ""wb"") as f:
    f.write(sample)

# sample done. Now we have a REAL binary data in sample.data

with open('sample.data', 'rb') as f:
    print ""Data: %s"" % binascii.hexlify(f.read())
    mm = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ)
    current_offset = 0
    header_index = mm.find(header, current_offset)
    footer_index = mm.find(footer, current_offset + len(header))
    if header_index >= 0 and footer_index > header_index:
        print ""Found header at %s and footer at %s""\
              % (header_index, footer_index)
        mm.seek(header_index + len(header))
        body = mm.read(footer_index - mm.tell())
        while body is not None:
            print ""body: %s"" % binascii.hexlify(body)
            current_offset = mm.tell()
            header_index = mm.find(header, current_offset + len(footer))
            footer_index = mm.find(footer, current_offset + len(footer) + len(header))
            if header_index >= 0 and footer_index > header_index:
                print ""Found header at %s and footer at %s""\
                    % (header_index, footer_index)
                mm.seek(header_index + len(header))
                body = mm.read(footer_index - mm.tell())
            else:
                body = None
"
Subtracting seconds from int with no formatting,"import datetime

a = 20120628061533.0

dt = datetime.datetime.strptime(str(int(a)), '%Y%m%d%H%M%S')
dt -= datetime.timedelta(minutes=1)

print dt.strftime('%Y%m%d%H%M%S')
"
Calling load functions in correct order from constructors,"sub = Sub()
sub.load()
sup = Super()
sup.load()
"
how to convert a set in python into a dictionary,"output = list(input_set)
"
stripping the zeros in csv with python,"with open('infilename', 'r') as infile:
    reader = csv.reader(infile)
    for row in reader:
        stripped_value = re.sub(r'^0{3}', '', row[5])
"
"Python class: Why can't I use the method len() inside __eq__(self, other)?","class FrozenSortedTuple:
  """"""A frozenset that cares about order of tuples. And is not actually frozen.""""""
  def __init__(self, vals):
    if type(vals) not in [list, set, tuple]:
      raise Exception('Value not a list or set')
    self.vals = vals

  def __len__(self):
    return len(self.vals)

  def __iter__(self):
    return iter(self.vals)

  def __getitem__(self, key):
    return list(self.vals)[key]

  def __eq__(self, other):
    if len(self) != len(other):
      print ""len(self)""
      return False

    for i,item in enumerate(self.vals):
      if item != other[i]:
        return False
    return True

  def __str__(self):
    str_val = str()
    for val in self:
      str_val += str(val)
    return str_val

  def __hash__(self):
    return hash(str(self))
"
Python Pandas drop columns based on max value of column,df.columns[df.max() > 0]
accessing lists values of dictionary,"for k,v in names.items():
    for kk,vv in v.items():
        print k,kk,len(vv),max(vv)-min(vv)
"
"""Iterate"" a function's return values","from itertools import takewhile, imap, repeat
for x in takewhile(bool, imap(lambda f: f(), repeat(foo))):
    print x
"
Making a tree shape.,"def tree(head, stem):
    for i in xrange(1, head+1, 2):
        print ('*'*i).center(head)
    x = (head/2) if (head/2)%2 else (head/2)-1
    for _ in xrange(stem):
        print ('*'*x).center(head)

>>> tree(12, 2)
     *      
    ***     
   *****    
  *******   
 *********  
*********** 
   *****    
   *****    
>>> tree(14, 4)
      *       
     ***      
    *****     
   *******    
  *********   
 ***********  
************* 
   *******    
   *******    
   *******    
   *******    
"
Python: Import Tweet unicode data to pandas data frame object,"import json
with open('<MyFilePath>\usTweets0.json', 'r') as f:
    tweet_sample = json.load(f)
"
"Python - Get ""subarrays"" of 3d array","def blockshaped(arr, nrows, ncols):
    need_reshape = False
    if arr.ndim > 2:
        need_reshape = True
    if need_reshape:
        orig_shape = arr.shape
        arr = arr.reshape(-1, arr.shape[-1])
    h, w = arr.shape
    out = (arr.reshape(h//nrows, nrows, -1, ncols)
               .swapaxes(1, 2)
               .reshape(-1, nrows, ncols))
    if need_reshape:
        new_shape = list(out.shape)
        new_shape[0] //= orig_shape[0]
        out = out.reshape([-1,] + new_shape)
    return out
"
pythonic solution for finding the other element in a list of length two,"return pair[0] if pair[0] != core else pair[1]
"
Concatenate list items,"def test(phrase):
    anas = [anagrammes2(word) for word in phrase.split(' ')]
    return [' '.join(x) for x in product(*anas)]

test('Mange ton orange')
"
Unix time stamp conversion using pandas issue,"df1 = df.copy()

def date_convert(time):
    return time.date()

def hour_convert(time):
    return time.hour


def lamb(df):    
    df['date'] = df.apply(lambda row: date_convert(pd.to_datetime(row['_sent_time_stamp'], unit='s')), axis=1)
    df['hour'] = df.apply(lambda row: hour_convert(pd.to_datetime(row['_sent_time_stamp'], unit='s')), axis=1)    
    return df

def new(df): 
    dat = pd.to_datetime(df['_sent_time_stamp'], unit='s')
    df['date'] = dat.dt.date
    df['hour'] = dat.dt.hour
    return df

print lamb(df)    
print new(df1)  
"
How to handle dictionary attributes at arbitrarily nested depths?,">>> data = {""foo"": {""bar"": {""baz"": 1}}}
>>> lookup = {
...   'customfield': (""foo"", ""bar"", ""baz"" )
... }

>>> def nest(data, name):
...   path = lookup[name]
...   d = data
...   for p in path:
...     d = d[p]
...   return d
...
>>> nest(data, 'customfield')
1
"
Create tuples in Python from an XML String/File,"my_cool_dict = {}
for element in some_parent_element:
    my_cool_dict[element.tag] = element.text
"
Hashing or dictionaries for Venn diagram of dictionaries?,">>> # use iteritems for Python2
>>> # list comprehension
>>> shared1 = [k for k, v in A.items() if B.get(k) == v]
>>> # set comprehension
>>> shared1 = {k for k, v in A.items() if B.get(k) == v}
"
How would one add two lists in this way in Python?,">>> list1 = ['apple', 'orange', 'grape'] 
>>> list2 = ['pineapple', 'banana', 'pear']
>>> [ list1[x]+ "" "" +list2[x] for x in range(len(list1))]   # both should must have same length
['apple pineapple', 'orange banana', 'grape pear']
"
Sorting nested python dictionary by label,">>> lst = [(key, value['std']) for key, value in sd_dict.items()]
>>> lst.sort(key=lambda x: x[1])
>>> lst
[('5667', 5656), ('4555', 5656)]
"
Python check string indentation,"with open(""myfile.txt"") as afile:
    line_lengths = [len(line) - len(line.lstrip()) for line in afile]
"
subtuples for a tuple,"def sub_combinations(segment, size=0):
    if segment == ():
        yield ()
        return
    stop = min(size or len(segment), len(segment))
    for i in range(1, stop + 1):
        for j in sub_combinations(segment[i:], size):
            yield (segment[:i],) + j
"
All combinations of a mapped list of lists in python,"strings = [''.join(combo) for combo in product(*(mapping[d] for d in data))]
"
How to pass proxy-authentication (requires digest auth) by using python requests module,"import requests
import requests.auth

class HTTPProxyDigestAuth(requests.auth.HTTPDigestAuth):
    def handle_407(self, r):
        """"""Takes the given response and tries digest-auth, if needed.""""""

        num_407_calls = r.request.hooks['response'].count(self.handle_407)

        s_auth = r.headers.get('Proxy-authenticate', '')

        if 'digest' in s_auth.lower() and num_407_calls < 2:

            self.chal = requests.auth.parse_dict_header(s_auth.replace('Digest ', ''))

            # Consume content and release the original connection
            # to allow our new request to reuse the same one.
            r.content
            r.raw.release_conn()

            r.request.headers['Authorization'] = self.build_digest_header(r.request.method, r.request.url)
            r.request.send(anyway=True)
            _r = r.request.response
            _r.history.append(r)

            return _r

        return r

    def __call__(self, r):
        if self.last_nonce:
            r.headers['Proxy-Authorization'] = self.build_digest_header(r.method, r.url)
        r.register_hook('response', self.handle_407)
        return r
"
"Django ManytoMany field duplicates, attribute error: 'ManyRelatedManager'","from django.core.exceptions import ValidationError, NON_FIELD_ERRORS

class Order_options(models.Model):
    ...
    def validate_unique(self, exclude = None):
        super(Order_options, self).validate_unique(exclude)

        options = { 'order__id' : self.order.id, 'option__type' : 'self.option.type' }
        objs = Order_options.objects.exclude(id=self.id) if self.id else Order_options.objects
        if objs.filter(**options).exists():
            raise ValidationError({NON_FIELD_ERRORS: ['Error: {0} option type already exists'.format(self.option.type)]})
    ...
"
What is the equivalent to R's match() for python Pandas/numpy?,"import pandas as pd
left = pd.DataFrame({'url': ['foo.com', 'foo.com', 'bar.com'], 'action': [0, 1, 0]})
left[""class""] = NaN
right1 = pd.DataFrame({'url': ['foo.com'], 'class': [0]})
right2 = pd.DataFrame({'url': ['bar.com'], 'class': [ 1]})

pd.merge(left.drop(""class"", axis=1), pd.concat([right1, right2]), on=""url"")
"
Creating print job in gtk3/python,"def on_button_clicked(self, widget):
    ps = Gtk.PaperSize.new_custom(""cc"", ""cc"", 210, 297, Gtk.Unit.MM)
    st = Gtk.PrintSettings()
    s = Gtk.PageSetup()
    s.set_paper_size(ps)
    s.set_bottom_margin(4.3, Gtk.Unit.MM)
    s.set_left_margin(4.3, Gtk.Unit.MM)
    s.set_right_margin(4.3, Gtk.Unit.MM)
    s.set_top_margin(4.3, Gtk.Unit.MM)
    s.set_orientation(Gtk.PageOrientation.LANDSCAPE)
    # ret =  Gtk.print_run_page_setup_dialog(self, s, st)
    pd = Gtk.PrintOperation()
    pd.set_n_pages(1)
    pd.set_default_page_setup(s)
    pd.connect(""begin_print"", self.bg)
    pd.connect(""draw_page"", self.draw_page)
    # print(ret, s, st)
    pd.set_export_filename(""test.pdf"")
    result = pd.run(Gtk.PrintOperationAction.EXPORT, None) #play with action, but for test export first; if it's ok, then action.PRINT
    print (result)  # handle errors etc.
    # Gtk.PaperSize.free(ps) - not needed in py
"
python comprehension from two list or zip,"from collections import namedtuple

labels = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']
StockDay = namedtuple('StockDay', [s.lower() for s in labels])

day0 = ['Feb 7, 2014', '15,630.64', '15,798.51', '15,625.53', '15,794.08', '105,782,495']
item = StockDay(*day0)

print(item)
"
Have extra while loop conditions ... based on a condition?,"conds = {
    0: lambda: condition_1,
    1: lambda: condition_1 or condition_2,
    2: lambda: condition_1 or condition_2 or condition_3
}
"
Advanced string parsing in python,"import re
p = re.compile(ur'\[span\b[^]]*][^[]*\[/span\]\s*([^[]*)\[div\b')
test_str = u""[span class=\""review-title\""]Wont open[/span] I have the GS5 and the game wont open. I got this game when i got the first droid. The fact that people havent been able to play since almost 2013 is bull. Please fix this or there isnt a point in even having the game on the server. [div class=\""review-link\"" ""
print re.search(p, test_str).group(1)
"
Extracting zip file contents to specific directory in Python 2.7,"import zipfile

fh = open('test.zip', 'rb')
z = zipfile.ZipFile(fh)
for name in z.namelist():
    outpath = ""C:\\""
    z.extract(name, outpath)
fh.close()
"
python class factory inherit random parent,"class Person(object):
    __metaclass__ = abc.ABCMeta
    def drive(self, f, t):
        raise NotImplementedError
    @classmethod
    def __subclasshook__(cls, C):
        if C.identity is cls:
            return True
        return NotImplemented

class John(Person):
    def drive(self, f, t):
        print ""John drove from %s to %s"" % (f,t)

class Kyle(Person):
    def drive(self, f, t):
        print ""Kyle drove from %s to %s"" % (f,t)

class RandomPerson(Person): 
    identity = None
    def __new__(cls):
        cls.identity = random.choice((John,Kyle))
        new = super().__new__(cls)
        new.__dict__.update(cls.identity.__dict__)
        return new

>>> type(RandomPerson())
class RandomPerson
>>> rperson = RandomPerson()
>>> isinstance(rperson,John) or isinstance(rperson,Kyle)
True
"
Iterating over multiple lists simultaneously in Python,"def add(x, y):
    return x + y

# Flatten the second list
second_flattened = list(chain(*(chain(*second))))

# There is probably a better way to achieve this
foo = [add(x, y) for x, y in zip(first, second_flattened)]

# If second is longer we should append unprocessed values
if len(second_flattened) > len(first):
    foo += second_flattened[len(foo): ]

bar = [foo[i:i+3] for i in range(0, len(foo), 3)]
second = [bar[i:i+2]  for i in range(0, len(foo) / 3, 2)]
"
Modifying Python DataFrame rows with duplicates,"import pandas as pd

ids = [1,2,3,3,4,4,5,6]
cols = ['a', 'a', 'p', 'sp', 'n', 'sn', 'b', 'c']

df = pd.DataFrame({'Id':ids, 'Col':cols})

counts = df['Id'].value_counts()
values = [x for x in counts.index if counts[x]>1]
result = []
for e in values:
    vals = df[df['Id'] == e].Col.value_counts().index.values
    result.append((e, vals))
"
Splitting longer patterns using regex without losing characters Python 3+,"from itertools import chain, izip
import re

def nonconsumesplit(regex,content):
    outer = re.split(regex,content)
    inner = re.findall(regex,content)+['']
    return [val for pair in zip(outer,inner) for val in pair]
"
How to list specific node/edge in networkx?,">>> [k for k,v in G.out_degree().iteritems() if v > 2]
['n', 'n1']
"
How to strip characters interfering with Beautiful Soup returning links with specified text?,">>> from bs4 import BeautifulSoup
>>> content = ""<div class=\""class1 class2\"">some text</div> \
...         <a href='#' title='wooh!' onclick='blahblahblah'>Text blah5454</a>""
>>> soup = BeautifulSoup(content)
>>> soup(""a"", text='Text')
[]
>>> soup(""a"", text=re.compile(r""\bText\b""))
[<a href=""#"" onclick=""blahblahblah"" title=""wooh!"">Text blah5454</a>]
"
Python package that supports weighted covariance computation,"# -*- coding: utf-8 -*-
""""""descriptive statistic with case weights

Author: Josef Perktold
""""""

import numpy as np
from statsmodels.stats.weightstats import DescrStatsW


np.random.seed(987467)
x = np.random.multivariate_normal([0, 1.], [[1., 0.5], [0.5, 1]], size=20)
weights = np.random.randint(1, 4, size=20)

xlong = np.repeat(x, weights, axis=0)

ds = DescrStatsW(x, weights=weights)

print 'cov bug'
print ds.cov  #BUG

self = ds  #alias to use copied expression
ds_cov = np.dot(self.weights * self.demeaned.T, self.demeaned) / self.sum_weights

print '\nddof=0'
print ds_cov
print np.cov(xlong.T, bias=1)

ds_cov0 = np.dot(self.weights * self.demeaned.T, self.demeaned) / \
              (self.sum_weights - 1)
print '\nddof=1'
print ds_cov0
print np.cov(xlong.T, bias=0)
"
inverse of zip,"zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"
Python Slenium get two elements from same part of HTML Code,"//a[contains(@class, 'PointsTabL PointsSel')]//*[contains(@class,'VaR')]
"
why cx_Oracle and sqlplus give different results for the same select query,"con.autocommit = true #before inserts
"
How to merge two dictionary list of dictionary,"def merge_dict(dict1,dict2):
    resdict = {}
    for k,v in dict2.items():
        resdict[k] = dict(v)
        resdict[k].update(dict1.get(k,{})))
    return resdict
"
Find all nodes by attribute in xml using Python,"import xml.etree.ElementTree as ET

data = """"""
<parent>
    <child attr=""test"">1</child>
    <child attr=""something else"">2</child>
    <child other_attr=""other"">3</child>
    <child>4</child>
    <child attr=""test"">5</child>
</parent>
""""""

parent = ET.fromstring(data)
print [child.text for child in parent.findall('.//child[@attr]')]
print [child.text for child in parent.findall('.//child[@attr=""test""]')]
"
How to read formatted input in python?,"[s.strip() for s in input().split(',')]"
How to center labels in histogram plot,"his = np.histogram(a,bins=range(5))
fig, ax = plt.subplots()
offset = .4
plt.bar(his[1][1:],his[0])
ax.set_xticks(his[1][1:] + offset)
ax.set_xticklabels( ('1', '2', '3', '4') )
"
how to make regex go line by line to match two strings at the same time?,"l = re.split('Overview of (\w+) study', text)[1:]
l = [l[i:i+2] for i in range(0, len(l), 2)]

# or just `final_list = l` if it doesn't matter
final_list = []

for i in [[(i, k) for k in re.findall('\(.+?\)', j)] for i, j in l]:
    final_list.extend(i)
"
How to check if key is primary psycopg2,"SELECT column_name
FROM information_schema.table_constraints
     JOIN information_schema.key_column_usage
         USING (constraint_catalog, constraint_schema, constraint_name,
                table_catalog, table_schema, table_name)
WHERE constraint_type = 'PRIMARY KEY'
  AND (table_schema, table_name) = ('yourschema', 'yourtable')
ORDER BY ordinal_position;
"
Python count Null and not Null values in Dataframe,"In [60]: df.groupby('Date').agg({'Name': lambda x: x.isnull().sum().astype(str) + '/' + str(x.size)})
Out[60]:
     Name
Date
1995  1/3
1997  1/2
1998  1/2
"
How to collect list of tuples into one tuple in Python?,"print list(itertools.chain.from_iterable(l))



#output =[1, 2, 3, 4, 5, 6]
"
Python - Avarage values of numpy multidimensionnal array every specific time,"from scipy.ndimage import uniform_filter1d
test_mean2 = uniform_filter1d(test, 4, axis=0)
"
full file path for zipped folder in python,"import zipfile
import os
import sys

zipped_files_dir = 'Z:\Dev\some_files'

def get_folder_names():
    path_list = []
    for folder_name in os.listdir(zipped_files_dir):
        path_list.append(os.path.join(zipped_files_dir, folder_name))
    return path_list

def get_folder_directories(folder_list):
    for folder in folder_list:
        pathname = os.path.abspath(folder)
        print(pathname)

def main():
    get_folder_directories(get_folder_names())
"
mayavi points3d plot animation won't update the next frame,"from mayavi import mlab
from numpy import array, cos, sin, cos

x_coord = array([0.0, 1.0, 0.0, -1.0])
y_coord = array([1.0, 0.0, -1.0, 0.0])
z_coord = array([0.2, -0.2, 0.2, -0.2])

plt = mlab.points3d(x_coord, y_coord, z_coord)

msplt = plt.mlab_source
@mlab.animate(delay=100)
def anim():
    angle = 0.0
    while True:
        x_coord = array([sin(angle), cos(angle), -sin(angle), -cos(angle)])
        y_coord = array([cos(angle), -sin(angle), -cos(angle), sin(angle)])
        msplt.set(x=x_coord, y=y_coord)
        yield
        angle += 0.1

anim()
mlab.show()
"
Python - Neaten this append/extend conditional,"def append(self, item):
    self.list.append(item)
def extend(self, item):
    self.list.extend(item)
"
Detect int32 overflow using 0xFFFFFFFF masking in Python?,">>> def isOverflow(num, width=32):
    if num > 0 and num > 2**(width-1) -1 :
        return True
    elif num < 0 and abs(num) > 2**(width-1):
        return True
    return False
"
shell command in python for sha,"import os
import hashlib

def sha1OfFile(filepath):
    sha = hashlib.sha1()
    with open(filepath, 'rb') as f:
        while True:
            block = f.read(2**10) # Magic number: one-megabyte blocks.
            if not block: break
            sha.update(block)
        return sha.hexdigest()

for (path, dirs, files) in os.walk('.'):
  for file in files:
    print('{}: {}'.format(os.path.join(path, file),  sha1OfFile(os.path.join(path, file))))
"
Python CSV transpose data in one column to rows,"data = range(20)
print data
# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
print[data[i:i + 4] for i in xrange(0, len(data), 4)]
# [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18,19]]
"
Using a dictionary to index parallel arrays?,"d = {}
for (st,sh,le,en) in zip(start,shape,length,end):
    d[st] = (sh,le,en)
"
Python: Parse text table and convert into nested data structure,"for itertools import tee, izip
def pairwise(iterable):
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)

def create_table_dict(pos_list, name_list):
    intervals = []
    for sub_list in pos_list:
        intervals.append(list(pairwise(sub_list)))

    items = []
    for interval, name in zip(intervals, name_list):
        items.append([ (i, n) for i, n in zip(interval, name) ])

    names = []
    for int1, name1 in items[0]:
        past_names = []
            for int2, name2 in items[1]:
        if int1[0] == int2[0]:
            if int1[1] == int2[1]:
                names.append(' '.join((name1, name2)).strip())
        elif int2[1] < int1[1]:
                past_names.append(name2)
        elif int1[0] < int2[0]:
            if int2[1] < int1[1]:
            past_names.append(name2)
            elif int1[1] == int2[1]:
            names.append('{0}:{1}'.format(name1, 
                                          ','.join(past_names + [name2])))

    table = {}
    for name in names:
        if ':' not in name:
            table[name] = []
        else:
            upper, nested = name.split(':')
            nested = nested.split(',')
            table[upper] = {}
            for n in nested:
                table[upper][n] = []

    print table
"
Python: how to turn string into a list?,"inputString = ""my_item = ['maria','jose']""

# value is a list type 
value = eval(inputString.split(""="")[1])
# key is a string type
key = inputString.split(""="")[0].strip()

# I don't think you can define a variable name while the script is running. 
# but you can use dictionary type to call it.
mydict = {}
mydict[key] = value
"
Facebook Canvas App - Circular Login Redirect,"class BaseHandler(tornado.web.RequestHandler):
    @property
    def prepare(self):
        self.set_header('P3P', 'CP=""HONK""')

    def initialize(self):
        if self.request.full_url() == ""http://mydomain/a/facebook/"":
            self.request.protocol = ""https""
        self.init_facebook()

    def init_facebook(self):
        """"""Sets up the request specific Facebook and User instance""""""

        # initial facebook request comes in as a POST with a signed_request
        signed_request = self.get_argument('signed_request', None)
        if signed_request and self.request.method == u'POST':
            app_secret = options.facebook_app_secret
            data = load_signed_request(signed_request, app_secret)
            user_id = data.get(u""user_id"")
            if user_id:
                self.set_secure_cookie(""uid"", user_id)
            self.request.method = u'GET'

class FacebookCanvasHandler(HomeHandler):
    def get(self, *args, **kwds):
        logging.info(""Facebook Canvas called."")
        if not self.current_user:
            logging.info(""Need user grant permission, redirect to oauth dialog."")
            logging.info(self.settings.get(""facebook_canvas_id""))
            oauth_url = self.get_login_url(self.settings.get(""facebook_canvas_id""))
            logging.info(oauth_url)
            self.render(""canvas_oauth.html"", oauth_url=oauth_url)
        else:
            super(FacebookCanvasHandler, self).get(*args, **kwds)

def load_signed_request(signed_request, app_secret):
    try:
        sig, payload = signed_request.split(u'.', 1)
        sig = base64_url_decode(sig)
        data = json.loads(base64_url_decode(payload))

        expected_sig = hmac.new(app_secret, msg=payload, digestmod=hashlib.sha256).digest()

        if sig == expected_sig and data[u'issued_at'] > (time.time() - 86400):
            return data
        else:
            return None
    except ValueError, ex:
        return None

def base64_url_decode(data):
    data = data.encode(u'ascii')
    data += '=' * (4 - (len(data) % 4))
    return base64.urlsafe_b64decode(data)
"
Removing nan elements from matrix,">>> eq = eq[:,~np.isnan(eq).all(0)]
>>> eq = eq[~np.isnan(eq).all(1)]
>>> eq
array([[  1.,  nan],
       [  3.,   4.]])
"
"Check if string is upper, lower, or mixed case in Python",">>> 'hello'.islower()
True

>>> [m for m in dir(str) if m.startswith('is')]
['isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper']
"
Formatting a NumPy array,"fmt = "","".join([""%i""] + [""%10.6e""] * my_array.shape[1])
np.savetxt(f, temp, fmt=fmt, delimiter="","")
"
numpy random usage validity,"size = (3, 5)

def method1():
    np.random.seed(123)
    return np.random.normal(0, 1, size)

def method2():
    np.random.seed(123)
    x = np.zeros(size, dtype=float)
    for i  in range(size[1]):
        x[:,i] = np.random.normal(0, 1, size[0])
    return x
"
formatting python timedelta objects,"from string import Template

class DeltaTemplate(Template):
    delimiter = ""%""

def strfdelta(tdelta, fmt):
    d = {""D"": tdelta.days}
    d[""H""], rem = divmod(tdelta.seconds, 3600)
    d[""M""], d[""S""] = divmod(rem, 60)
    t = DeltaTemplate(fmt)
    return t.substitute(**d)
"
msiexec scripting in python,"from _winreg import *

def get_guid_by_name(name):
    # Open the uninstaller key
    with OpenKey(HKEY_LOCAL_MACHINE, r'Software\Microsoft\Windows\CurrentVersion\Uninstall') as key:
        # We only care about subkeys of the installer key
        subkeys, _, _ = QueryInfoKey(key)
        for i in range(subkeys):
            subkey = EnumKey(key, i)
            # Since we're looking for uninstallers for MSI products,
            # the key name will always be the GUID. We assume that any
            # key starting with '{' and ending with '}' is a GUID, but
            # if not the name won't match.
            if subkey[0] != '{' or subkey[-1] != '}':
                 continue
            # Query the display name or other property of the key to
            # see if it's the one we want
            with OpenKey(key, subkey) as _subkey:
                if QueryValueEx(_subkey, 'DisplayName')[0] == name:
                    return subkey
     return None
"
How to extract valid string from beginning to the first no base64 valid character?,"import re

invalid_tail = re.compile(r'[^a-zA-Z0-9+/=\n\r].*$')

def remove_tail(base64_value):
    return invalid_tail.sub('', base64_value)
"
Delete digits in Python (Regex),"re.sub('$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$', '', s)"
How can I stretch my pyplot to make markers more discernible?,"ymin, ymax = ylim()   # return the current ylim
ylim( (ymin, ymax) )  # set the ylim to ymin, ymax
ylim( ymin, ymax )    # set the ylim to ymin, ymax
"
Unescape/unquote binary strings in (extended) url encoding in python,"def decode(file):
    while True:
        c = file.read(1)
        if c == """":
            # End of file
            break
        if c != ""%"":
            # Not an escape sequence
            yield c
            continue
        c = file.read(1)
        if c != ""u"":
            # One hex-byte
            yield chr(int(c + file.read(1), 16))
            continue
        # Two hex-bytes
        yield chr(int(file.read(2), 16))
        yield chr(int(file.read(2), 16))
"
How to find elements that are common to all lists in a nested list?,">>> reduce(set.intersection, map(set, nested_list))
set([2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])
"
Counting the number of times a letter occurs at a certain position using python,"max_len = max(map(len, sequences))
d = defaultdict(lambda: [0]*max_len)  # d[char] = [pos0, pos12, ...]
for seq in sequences:
    for i, char in enumerate(seq): 
        d[char][i] += 1

d['G']  # [2, 0, 0, 0, 1, 1]
"
Can I open a named pipe on Linux for non-blocked writing in Python?,"import errno
import posix

try:
    posix.open('fifo', posix.O_WRONLY | posix.O_NONBLOCK)
except OSError as ex:
    if ex.errno == errno.ENXIO:
        pass # try later
"
pandas: how to read file with divided rows,"import pandas as pd
import io

temp=u""""""var1 var2 var3
var4 var5 var6
1    2    3
4    5    6
1    2    3
4    5    6
1    2    3
4    5    6""""""

df = pd.read_csv(io.StringIO(temp), 
                  sep='\s+', 
                  header=[0,1])
print df      
  var1 var2 var3
  var4 var5 var6
0    1    2    3
1    4    5    6
2    1    2    3
3    4    5    6
4    1    2    3
5    4    5    6 
"
why 1D scipy.interpolate.griddata using method=nearest produces nans?,"if ndim == 1 and method in ('nearest', 'linear', 'cubic'):
    from .interpolate import interp1d
    points = points.ravel()
    ...
    ip = interp1d(points, values, kind=method, axis=0, bounds_error=False,
                  fill_value=fill_value)
    return ip(xi)
"
Python: Finding symmetries in list of lists,">>> ls = [[1,2,3,4,5,6], [2,4,6,8,10,12], [1,4,5,2,3,6], [1,2,3,4,9,3]]
>>> switch(ls[0]) == ls[2]  # seems harmless
True
>>> switch(ls[0]) == ls[2]  # but ls[0] has been modified, so the next test fails
False
"
How to write this snippet in Python?,">>> d
{1: 2}
>>> d.setdefault(1, 3)
2
>>> d
{1: 2}
>>> d.setdefault(3, 3)
3
>>> d
{1: 2, 3: 3}
"
How do I find the top level KEY of the lowest positive VALUE from a particular SUBKEY?,"def only_positive(x):
    return x[1]['start_diff'] > 0

def min_start(x):
    return x[1]['start_diff']

only_positive_start_diff = filter(only_positive, a.items())
min_start_diff = min(only_positive_start_diff, key=min_start)

print min_start_diff[0]
"
Writing a custom sum function that sums a list of numbers,"raw_in = input(""Enter a list of numbers, comma-separated\n>> "").split(',')
try:
    processed_in = map(float, raw_in)
    # if you specifically need this as a list, you'll have to do `list(map(...))`
    # but map objects are iterable so...
except ValueError:
    # not all values were numbers, so handle it
"
How to use Python's Str.Replace() Method on all columns in a Pandas DataFrame?,"letter_freq_all.apply(lambda x: x.str.replace('[%*]', '').astype(float)/100, axis=1)
"
for loop after specific index with python not working,"for rows in data.itertuples():
    r = int(rows[0]) + 1
    for c, i in enumerate(rows[1:], 1): #skip the first item implicitly
        #do whatever here
"
Adding time/duration from CSV file,"from collections import defaultdict
from datetime import timedelta
import csv

durations = defaultdict(lambda: {'In': timedelta(), 'Out': timedelta()})

with open(""./Test.csv"", ""rb"") as inf:
    reader = csv.reader(inf, delimiter=delim)
    for name, direction, duration in reader:
        hours, minutes, seconds = map(int, duration.split(':'))
        duration = timedelta(hours=hours, minutes=minutes, seconds=seconds)
        durations[name][direction] += duration

for name, directions in durations.items():
    print '{:10} In    {}'.format(name, directions['In'])
    print '           Out   {}'.format(directions['Out'])
    print '           Total {}'.format(
        directions['In'] + directions['Out'])
"
Create a Python Dictonary by taking joins of two dictionary,"In [31]: t1 = {0: 'Initialised', 1: 'Processed', 3:'Finished'}
In [33]: t2 = {0: 81, 1: 100, 3: 906}

In [34]: {t1[key]: t2[key] for key in t1}
Out[34]: {'Finished': 906, 'Initialised': 81, 'Processed': 100}
"
Is there a recursive version of Python's dict.get() built-in?,"def recursive_get(d, *keys):
    return reduce(lambda c, k: c.get(k, {}), keys, d)
"
Python FTP Upload Multiple Files at Once,"import os, sys, subprocess, shutil, re, string, glob, tvdb_api, itertools, multiprocessing, ftplib

#No longer an instance method -- just a regular function.
#accepts an iterable and then splits it as [host,filename]
def upload_files(inpt):
    host=inpt[0]
    f=inpt[1]
    #host,f=inpt  #This might be a little cleaner, depending on your programming style.
    host.storbinary(('STOR /'+f.split('/')[-1]), open(f, 'rb'))

files = [os.path.join(r, f) for r, d, fs in os.walk(os.getcwd()) for f in fs if not f[0]=='.']
class FTP_Upload:
    def __init__(self, p=os.getcwd()):
        self.files_to_upload = sorted([f for f in files if os.path.split(f)[0] == p])
        self.target = raw_input(""Enter the host you want to upload to: "")
        self.host = FTP('ftp.host1.com', 'user_name1', 'super_secret_password1') if self.target == 'host' else FTP('ftp.host2.com', 'user_name2', 'secret_password2') if self.target == 'host2' else None
    def multiupload(self):
        p = multiprocessing.Pool(processes=5)
        upload_this=[(self.host,f) for f in self.files_to_upload]
        p.map(upload_files,upload_this)
FTP_Upload().multiupload()
"
ctypes: passing and reading an enum pointer,"from ctypes import *
from ctypes.wintypes import BOOL, HMONITOR, HDC, RECT, LPARAM, DWORD, BYTE, WCHAR, HANDLE

import win32api  # http://sourceforge.net/projects/pywin32/files/pywin32/

_MONITORENUMPROC = WINFUNCTYPE(BOOL, HMONITOR, HDC, POINTER(RECT), LPARAM)

class _PHYSICAL_MONITOR(Structure):
    _fields_ = [('handle', HANDLE),
                ('description', WCHAR * 128)]


def _iter_physical_monitors(close_handles=True):
    """"""Iterates physical monitors.

    The handles are closed automatically whenever the iterator is advanced.
    This means that the iterator should always be fully exhausted!

    If you want to keep handles e.g. because you need to store all of them and
    use them later, set `close_handles` to False and close them manually.""""""

    def callback(hmonitor, hdc, lprect, lparam):
        monitors.append(hmonitor)
        return True

    monitors = []
    if not windll.user32.EnumDisplayMonitors(None, None, _MONITORENUMPROC(callback), None):
        raise WinError('EnumDisplayMonitors failed')

    for monitor in monitors:
        # Get physical monitor count
        count = DWORD()
        if not windll.dxva2.GetNumberOfPhysicalMonitorsFromHMONITOR(monitor, byref(count)):
            raise WinError()
        # Get physical monitor handles
        physical_array = (_PHYSICAL_MONITOR * count.value)()
        if not windll.dxva2.GetPhysicalMonitorsFromHMONITOR(monitor, count.value, physical_array):
            raise WinError()
        for physical in physical_array:
            yield physical.handle
            if close_handles:
                if not windll.dxva2.DestroyPhysicalMonitor(physical.handle):
                    raise WinError()

mons = [m for m in _iter_physical_monitors(False)]

#for idx, (hMon, hDC, (left, top, right, bottom)) in enumerate(win32api.EnumDisplayMonitors(None, None)):
#   print(hMon.handle)  # or int(hMon)

temps = (
    'UNKNOWN',
    '4000K',
    '5000K',
    '6500K',
    '7500K',
    '8200K',
    '9300K',
    '10000K',
    '11500K'
)
class MyEnum(c_int):
    MC_COLOR_TEMPERATURE_UNKNOWN = 0
    MC_COLOR_TEMPERATURE_4000K = 1
    MC_COLOR_TEMPERATURE_5000K = 2
    MC_COLOR_TEMPERATURE_6500K = 3
    MC_COLOR_TEMPERATURE_7500K = 4
    MC_COLOR_TEMPERATURE_8200K = 5
    MC_COLOR_TEMPERATURE_9300K = 6
    MC_COLOR_TEMPERATURE_10000K = 7
    MC_COLOR_TEMPERATURE_11500K = 8

o = MyEnum()
print(o)
po = pointer(o)

pm = mons[0]
print(""physical %r"" % pm)
t = windll.dxva2.GetMonitorColorTemperature(pm, po)  #byref(o))
if t:
    #print(o)
    #print(dir(po.contents))
    print(temps[po.contents.value])

else:
    print(""Err: %s"" % windll.kernel32.GetLastError())  # ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = -1071241844 # Variable c_long '-0x03fd9da74'
"
Delete a key and value from an OrderedDict,">>> from collections import OrderedDict
>>> dct = OrderedDict()
>>> dct['a'] = 1
>>> dct['b'] = 2
>>> dct['c'] = 3
>>> dct
OrderedDict([('a', 1), ('b', 2), ('c', 3)])
>>> del dct['b']
>>> dct
OrderedDict([('a', 1), ('c', 3)])
>>>
"
How to count how many positions away an element is in a list?,">>> list1=[34,5,1,7,5,3,8,512,8,43]
>>> max_ele = max(list1)
>>> print(list1.index(max_ele))
7
"
running imagemagick convert (console application) from python,"try:
    cmd= ['C:\Program Files\ImageMagick-6.8.3-Q16\convert','-size','30x40','xc:white','-fill','white','-fill','black','-font','fonts\Helvetica Regular.ttf','-pointsize','40','-gravity','South','-draw',""text 0,0 'P'"",'draw_text.gif']
    print(str.join(' ', cmd))
    print('stdout: {}'.format(subprocess.check_output(cmd,shell=True,stderr=subprocess.STDOUT)))
except CalledProcessError as e:
    print(e)
    print(e.output)
"
How to select n-1 column in a dataframe,"df.ix[:,'Col2':] # to select Col2, Col3, ...
"
Extending a list of lists in Python?,y = [[] for n in range(2)]
Look ahead without itertools,"from itertools import permutations

patterns = set(''.join(per) for per in permutations('AGUCN'))
unilist = []

for line in f2:
    if line.strip() in patterns:
        unilist.append(next(f2).strip())
"
Python list manipulation: Add an item to a string element to make it a 2 item list,">>> a = ['spam', 'eggs', 100, 1234]
>>> [item if item != 'spam' else [item, 'devon'] for item in a]
[['spam', 'devon'], 'eggs', 100, 1234]
"
Python sort list by regular expression,"In [1]: a = ['jhfewrgjhdfjhgsufgssdfjgh;NR;3243;fgjdsgfjsdfkjgdf', 'dsafjhsafjkhefhajwejh;NR;123;dfgdsrhgjhdfgjhdsfjhg']

In [2]: a.sort(key=lambda x: x.split(';')[2])

In [3]: a
Out[3]:
['dsafjhsafjkhefhajwejh;NR;123;dfgdsrhgjhdfgjhdsfjhg',
 'jhfewrgjhdfjhgsufgssdfjgh;NR;3243;fgjdsgfjsdfkjgdf']
"
Nested list sort python 3,"import operator

l = [[1,4,3], [2,2,4], [3,1,5]]
print(sorted(l, key=operator.itemgetter(1)))
"
Get Matplotlib legend location?,"import matplotlib.pyplot as plt

x = y = [1,2,3,4,5]

fig, ax = plt.subplots()

ax.plot(x,y)
leg = ax.legend(['line 1'], loc=6, frameon=False)

plt.draw()

p = leg.get_window_extent()

ax.annotate('Annotation Text', (p.p0[0], p.p1[1]), (p.p0[0], p.p1[1]), 
            xycoords='figure pixels', zorder=9)

plt.show()
"
From txt file to Python dictionary,"dictionary = {}
with open('path/to/file') as infile:
    for line in infile:
        key,value = line.split("" "")
        dictionary[key] = int(value)
"
Sort List in Python by two other lists,"paired = zip(List2,List3,List1)
rev_sorted = sorted(paired,reverse=True,key=lambda x: x[1])  #""minor"" sort first
paired_sorted = sorted(rev_sorted,key=lambda x:x[0])         #""major"" sort last
l2,l3,l1 = zip(*paired_sorted)
"
Finding a string in a string in a list python,"def findIndices(board, x):
    l = []
    for row in range(len(board)):
        for col, value in enumerate(board[row]):
        if value == x:
            l.append([row,col])
    return l

>>> findIndices(board, 'd')
[[0, 2], [1, 2], [2, 1], [3, 3], [4, 1], [4, 3]]
"
Running Scrapy from a script - Hangs,"for spiderConfig in spiderConfigs:
    spiderConfig = spiderConfig.copy() # a dictionary similar to the one with global settings above
    spiderName = spiderConfig.pop('name') # name of the spider is in the configs - i can use the same spider in several instances - giving them different names
    spiderModuleName = spiderConfig.pop('spiderClass') # module with the spider is in the settings
    spiderModule = __import__(spiderModuleName, {}, {}, ['']) # import that module
    SpiderClass = spiderModule.Spider # spider class is named 'Spider'
    spider = SpiderClass(name = spiderName, **spiderConfig) # create the spider with given particular settings
    crawlerProcess.queue.append_spider(spider) # add the spider to spider pool
"
xpath for capturing hover css property from selenium webelement in python,"from selenium.webdriver.common.action_chains import ActionChains

def get_properties(element):
    return {
        prop: element.value_of_css_property(prop)
        for prop in ['background-color', 'color', 'text-decoration']
    }

def is_hovered(driver, element):
    properties_before = get_properties(element)

    ActionChains(driver).move_to_element(element).perform()

    properties_after = get_properties(element)
    return properties_before != properties_after
"
Python/PyGame Select a Random Boolean From List,"import pygame, sys
from pygame.locals import *

pygame.init()
width, height = 40, 40
clock = pygame.time.Clock()
DRAWSURF = pygame.display.set_mode((width, height))
pygame.display.set_caption(""Matt's Minesweeper"")
background = pygame.Surface(DRAWSURF.get_size())
DRAWSURF.blit(background, (0, 0))
pygame.display.flip()
size = [255, 255]
screen = pygame.display.set_mode(size)

margin = 5

from collections import OrderedDict
from random import sample


class DrawBoard():
    def __init__(self, grid, mines):
        self.grid_size = grid
        self.board = OrderedDict(((i, j), False) for i in range(grid) for j in range(grid))
        self.mines = mines
        samp = sample(list(self.board), self.mines)
        for k in samp:
            self.board[k] = True

    def draw(self):
        for i, j in self.board:
            x = 100 + i * 60
            y = 0 + 60 * j
            pygame.draw.rect(DRAWSURF,(0,0,0), (x, y, 60, 60), margin)


game = DrawBoard(5, 5)
game.draw()


def game_over():
    font = pygame.font.SysFont(None, 50)
    text = font.render('Game over!', True, (255, 0, 0), (255, 255, 255))
    text_rect = text.get_rect()
    text_rect.centerx = screen.get_rect().centerx
    text_rect.centery = screen.get_rect().centery
    screen.blit(text, text_rect)
    pygame.display.update()
    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()


user_won = False
user_lost = False

while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.MOUSEBUTTONDOWN:
            # get mouse pos 
            pos = pygame.mouse.get_pos()
            # change to grid coordinates
            column = pos[0] // (width + margin)
            row = pos[1] // (height + margin)
            print(game.board[row, column])
            if game.board[row, column]:
                user_lost = True
            else:
                game.board[row, column] = ""picked""

    if user_lost:
        game_over()

    screen.fill((0, 0, 0))
    for row, column in game.board:
        color = (255, 255, 255)
        if game.board[row, column] == ""picked"":
            color = (0, 255, 0)
        pygame.draw.rect(screen,
                         color,
                         [(margin + width) * column + margin,
                          (margin + height) * row + margin,
                          width,
                          height])

    pygame.display.flip()
    clock.tick(30)

    pygame.display.update()
"
Renaming Column Names in Pandas Groupby function,"<your DataFrame>.rename(columns={'count':'Total_Numbers'})
"
Return only the final result in python re.findall command,"import re

s1 = """"""abc 5895 kilimandjaro 81 little""""""

s2 = """"""abc 145 abcdefghuj 87 short
kim 1498 witgenstein 893 sun
oh 142 stackoverflow 89 kol  871 kutr""""""

print '========= 1 ============'
for s in (s1,s2,'75 moon 56 mars 10 pluto'):
    print s
    m = re.findall(r'(\d+)\s([a-z]{7,})',s)
    print m
    for i,j in m:     ##separate the two elemnts
        if m == [(i,j)]:   ## if the total match result was equivalent to the i,j result    
                      ## then that is fine
          print  '===> ',(i,j)
        else:         ## if the total match result is not the same as i,j then I only want the 
                      ##final result to be returned
          print '===> ',m[-1]    ## Not sure what to put here to only return the final result
          break
    else:
        print '===>  No match'
    print

print '========= 2 ============'
for s in (s1,s2,'75 moon 56 mars 10 pluto'):
    print s
    m = re.findall(r'(\d+)\s([a-z]{7,})',s)
    print m
    if m:
        print '===> ',m[-1]
    else:
        print '===>  No match'
    print

print '========= 3 ============'
for s in (s1,s2,'75 moon 56 mars 10 pluto'):
    print s
    for m in re.finditer(r'(\d+)\s([a-z]{7,})|^',s):
        pass
    print m.groups()   
    print

print '========= 4 ============'
for s in (s1,s2,'75 moon 56 mars 10 pluto'):
    print s
    print re.search(r'(\d+)\s([a-z]{7,})(?!.*?\d+\s[a-z]{7,})|$',s).groups()
    print
"
Average of a vector of numbers or a list of numbers in Python,"import collections

def my_mean(*args):
    if not args:
        return None
    if len(args) == 1 and isinstance(args[0], collections.Container):
        args = args[0]
    total = sum(args)
    ave = 1.0 * total / len(args)
    return ave
"
remove (chomp) a newline,s.lstrip()
Regular Expressions working differently in Python and Ruby,">>> import re
>>> inputstring = ""hello hello hello 123""
>>> re.sub(""\bhello\b"", '<>', inputstring)
'hello hello hello 123'
>>> re.sub(r""\bhello\b"", '<>', inputstring)
'<> <> <> 123'
"
Check for certain arguments and assign values to an arbitrary variable,"In [247]: parser.add_argument('-c', dest='action', action='store_const', const='exit')

In [248]: args=parser.parse_args('-c --foo 123'.split())
In [249]: if args.action=='exit':parser.print_usage()
usage: ipython3 [-h] [-a] [-b] [--foo FOO] [-c]
"
fast ordered sort (and extract from) tuple based on list,"import collections
from os.path import basename, splitext

x = collections.OrderedDict((e, i) for i, e in enumerate(x))

id_list = [j[0] for j in sorted(y, key=lambda e: x[splitext(basename(e[1]))[0]])]
"
printing lines between start and end point,"with open(""test.txt"") as f:
    for line in f:
        if line.rstrip() == ""***a"":
            print("""")
            for line in f:
                if line.rstrip() == ""---a"":
                    break
                print(line.rstrip())
"
Get parent of current directory from Python script,"In [4]: from os.path import dirname

In [5]: dirname('/home/kristina/desire-directory/scripts/script.py')
Out[5]: '/home/kristina/desire-directory/scripts'

In [6]: dirname(dirname('/home/kristina/desire-directory/scripts/script.py'))
Out[6]: '/home/kristina/desire-directory'
"
Fastest way to compute upper-triangular matrix of geometric series (Python),"In [55]: from numpy.lib.stride_tricks import as_strided

In [56]: def make_array(b, n):
   ....:     vals = np.zeros(2*n - 1)
   ....:     vals[n-1:] = b**np.arange(n)
   ....:     a = as_strided(vals[n-1:], shape=(n, n), strides=(-vals.strides[0], vals.strides[0]))
   ....:     return a
   ....: 

In [57]: make_array(0.5, 4)
Out[57]: 
array([[ 1.   ,  0.5  ,  0.25 ,  0.125],
       [ 0.   ,  1.   ,  0.5  ,  0.25 ],
       [ 0.   ,  0.   ,  1.   ,  0.5  ],
       [ 0.   ,  0.   ,  0.   ,  1.   ]])
"
Python BaseHTTPServer and Tornado,"#!/usr/bin/python
# -*- coding: utf-8 -*-

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from SocketServer import ThreadingMixIn
import threading

import tornado.httpserver
import tornado.ioloop
import tornado.options
import tornado.web

from tornado.options import define, options
define(""port"", default=8000, help=""run on the given port"", type=int)

class Handler(BaseHTTPRequestHandler):  
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        message =  threading.currentThread().getName()
        self.wfile.write(message)
        self.wfile.write('\n')
        return

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """"""Handle requests in a separate thread.""""""

class IndexHandler(tornado.web.RequestHandler):
    def get(self):
        greeting = self.get_argument('greeting', 'Hello')
        self.write(greeting + ', friendly user!\n')

def run_tornado():
    tornado.options.parse_command_line()
    app = tornado.web.Application(handlers=[(r""/"", IndexHandler)])
    http_server = tornado.httpserver.HTTPServer(app)
    http_server.listen(options.port)
    tornado.ioloop.IOLoop.instance().start()

def run_base_http_server():
    server = ThreadedHTTPServer(('localhost', 8080), Handler)
    server.serve_forever()

if __name__ == '__main__':
    threading.Thread(target=run_tornado).start()
    threading.Thread(target=run_base_http_server).start()
"
numpy.sum behaves differently on numpy.array vs pandas.DataFrame,"In [7]:

np.sum(np.sum(a2))
Out[7]:
3.9180334059883006
"
Bash run command with cd to each directory,"with open(os.path.join(os.path.dirname(sys.argv[1]), 'name_of_output_file.txt') as fb:
    pass # your code here
"
How can I find the first occurrence of a substring occurring after another substring in python?,"def findStrAfterStr(myString, searchText, afterText):
    after_index = myString.index(afterText)
    return myString.find(searchText, after_index)
"
Django subclassing multiwidget - reconstructing date on post using custom multiwidget,"def value_from_datadict(self, data, files, name):
    datelist = [widget.value_from_datadict(data, files, name + '_%s' % i) \ 
                                      for i, widget in enumerate(self.widgets)]
    try:
        D = date(day=int(datelist[0]), month=int(datelist[1]), \
             year=int(datelist[2]))
        return str(D)
    except ValueError:
        return """"
"
Matplotlib colorbar moves second x axis,"import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.gridspec as gridspec

X = np.array([0., 0.5, 1., 1.5, 2., 2.5, 3., 3.5, 4.])
X2 = np.array([122, 85, 63, 50, 23, 12, 7, 5, 2])
Y = np.cos(X*20)
Z = np.sin(X*20)

fig = plt.figure()
gs = gridspec.GridSpec(1, 2)
ax1 = plt.subplot(gs[1])
ax2 = ax1.twiny()

ax1.set_xlim(-0.2, max(X)+0.2)
plt.tick_params(axis='both', which='major', labelsize=10)
ax1.minorticks_on()
ax1.grid(b=True, which='major', color='gray', linestyle='--', lw=0.3)

SC = ax1.scatter(X, Y, c=Z, cmap='viridis')
ax1.set_xlabel(""Original x-axis"")

ax2.set_xlim(ax1.get_xlim())
ax2.set_xticks(X)
ax2.set_xticklabels(X2)
ax2.set_xlabel(""Second x-axis"")

# Colorbar.
cbar = plt.colorbar(SC, ax=[ax1, ax2])
cbar.set_label('B', fontsize=10, labelpad=4, y=0.5)
cbar.ax.tick_params(labelsize=10)

plt.show()
"
How to sort files starting with _ in python,"from glob import glob
toolpath = os.path.dirname(os.path.abspath(__file__))
directory = os.listdir(os.path.join(toolpath,""*.html""))
directory.sort( key=lambda x: x.lstrip(""_"")))
"
Python regex alternative for join,"re.sub('(.)(?=.)', '\\1-', s)"
Breaking the python code when particular file is being opened,"import ipdb
import __builtin__

def open(name, mode='', buffer=0):
    if name == 'myfile.txt':
        ipdb.set_trace()  ######### Break Point ###########
    return __builtin__.open(name, mode, buffer)

f = open('myfile.txt', 'r')
"
How to round a datetime to ten minute datetime in a dataframe in Python,"import pandas as pd

def rounded_ten(t):
    ''' add 5 minutes to the date first and then apply mathematical floor to the minute part.
    It's easier to apply mathematical floor operation on date parts instead of rounding because for example you cannot round up 58 seconds to 60 seconds but you can always apply floor and stay within the range.
    '''
    t=t+pd.Timedelta('5 minutes') 
    return t.replace(minute=t.minute//10*10).replace(second=0)
"
Finding the max value of list in dictionary,"from operator import itemgetter

{k: max(v, key=itemgetter(-1)) for k, v in somedic.iteritems()}
"
Selecting specific <tr> tags with BeautifulSoup,"from BeautifulSoup import BeautifulSoup

page = """"""
<tr class=""class1 class2 class3"">1</tr>
<tr class=""class1 class2 class3"">2</tr>
<tr class=""class1 class5"">3</tr>
<tr class=""class1_a class5_a"">4</tr>
<tr class=""class1 class5"">5</tr>
<tr class=""class1_a class5_a"">6</tr>
<tr>7</tr>""""""

def cond(x):
    if x:
        return x.startswith(""class1"") and not ""class2 class3"" in x
    else:
        return False

soup = BeautifulSoup(page)
rows = soup.findAll('tr', {'class': cond})

for row in rows:
    print row
"
Combine multiple heatmaps in matplotlib,"contour(D1,cmap='Blues')
contour(D2,cmap='Reds')
contour(D2,cmap='Reds')
"
Replace a character with multiple characters using Python,"def comb(S):
    if not '?' in S:
        yield S
    else:
        for i in comb(S.replace('?','0',1)):
            yield i
        for i in comb(S.replace('?','1',1)):  
            yield i
"
How to reorganize sublists and exclude specific indexes in those sublists?,"def sublist_indices(lst, *args):
    return [[l[i] for i in args] for l in lst]

>>> sublist_indices([[1, 2, 3], [4, 5, 6]], 2, 0)
[[3, 1], [6, 4]]
"
How can I fix the following Django code? Using variables within function command,"def condition(objs, radio, **kwargs):
    if radio == 'equal to':
        filters = {'%s__icontains' % key: value for key, value in kwargs.iteritems()}
        objs = objs.filter(**filters)
    if radio == 'not equal to':
        filters = {'%s__icontains' % key: value for key, value in kwargs.iteritems()}
        objs = objs.exclude(**filters)
    return objs
"
iterating over function and storing all of the results in a variable?,"b = {}

for a in hometimeline['ids']:
   b[a] = oauth_req(
      'https://api.twitter.com/1.1/statuses/user_timeline.json?count=1&user_id=%s'%a,
      '###########################################',  (these are just tokens)
      '###########################################')
"
Fastest way to sort tiny lists in python,"def sort_few(lst):
    if len(lst)==2:
        if lst[0] > lst[1]:
            return (lst[1], lst[0])
        else:
            return lst
    else:
        if lst[0] > lst[1]:
            if lst[1] > lst[2]:
                return (lst[2], lst[1], lst[0])
            else:
                return (lst[1], lst[2], lst[0])
        elif lst[1] > lst[2]:
            if lst[2] > lst[0]:
                return (lst[0], lst[2], lst[1])
            else:
                return (lst[2], lst[0], lst[1])
        elif lst[2] > lst[0]:
            if lst[0] > lst[1]:
                return (lst[1], lst[0], lst[2])
            else:
                return lst
"
Grabbing specific indices of a list in Python,">>> class MyList(list):
...     def __getitem__(self, *args):
...             return [list.__getitem__(self, i) for i in args[0]]
... 
>>> mine = MyList(['a','b','c','d','e','f'])
>>> print mine[0, 3, 5]
['a', 'd', 'f']
"
Convert Date String to Day of Week,">>> import datetime
>>> datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')
'Monday'
"
Efficiently find matching rows (based on content) in a pandas DataFrame,"def finder(df, row):
    for col in df:
        df = df.loc[(df[col] == row[col]) | (df[col].isnull() & pd.isnull(row[col]))]
    return df
"
How to compare two columns and create new dataframe,"In [5]: df['B&C'] = np.where(df.B.isnull() & df.C.isnull(), 'Not There', 'Present')

In [6]: df['B&C']
Out[6]: 
0      Present
1    Not There
2      Present
3      Present
Name: B&C, dtype: object
"
Separating strings (list elements) with many spliters without loosing spliter from list,"from itertools import groupby

operators = {'+', '-', '*', '(', ')'}
fragments = ['a', '=', 'x+y*z', '//', 'moo', '-', 'spam*(eggs-ham)']
separated = []
for fragment in fragments:
    for is_operator, group in groupby(fragment, lambda c: c in operators):
        if is_operator:
            separated.extend(group)
        else:
            separated.append(''.join(group))
"
Python sort list by regular expression,"a.sort(key=lambda x: int(x.split(""NR;"")[-1].split("";"")[0]))
"
Binary representation of float in Python (bits not hex),"import struct
def binary(num):
    return ''.join(bin(ord(c)).replace('0b', '').rjust(8, '0') for c in struct.pack('!f', num))
"
convert to lxml sax interface from default python xml.sax,"def characters(self, content):
    # assert content is not None and len(content) > 0
    assert content
    # if len(self.stack) == 0:
    if not self.stack:
        return
    if self.stack[-1] == ""title"":
        self.title += content
    elif self.stack[-1] == ""text"":
        # assert self.title is not None
        assert self.title # This assertion is gross overkill IMHO
        self.text += content
"
Python Alternative to Old String Formatting,">>> my_string = ""Here come the braces : {a{b}c}d{e}f""
>>> additional_content = "" : {}""
>>> additional_content = additional_content.format(42)
>>> my_string += additional_content
>>> my_string
'Here come the braces : {a{b}c}d{e}f : 42'
"
python list reverse and merge,"ab = [a[:0:-1] + sub if a[0] in sub else sub for sub in b]
"
Newbie Python Regex question: Pulling dates from webpage,"import re

text = ""<br /><strong>Date: 06/12/2010</strong> <br />""
m = re.search(""<strong>(Date:.*?)</strong>"", text)
print m.group(1)
"
Python - Run a bash script for all files in a directory,"from glob import glob
import subprocess

elif RetouchOption == ""04"":
    ColorMethod = input(""What method will you use (options are gamma, recolor, none)?: "")
    ClipMode = input(""What clipping mode will you use (options are together or separate)?: "")
    script = [""sh"", ""~/autocolor.sh""]
    method = ""-m %s"" % ColorMethod
    clipmode = ""-c %s"" % ClipMode
    for filename in glob(""*.jpg""):
        subprocess.call(script + [method, clipmode, filename, filename])
"
Python Regex don't match if word in line,"regex = re.compile(ur'\bTCP_IN\s+=\s+""(?![\d,:]*?\b3000:5000\b)[\d,:]+""')
"
"Python, best way to write a sum of two for loops","if isinstance(e, Iterable) and not isinstance(el, str):
   # an iterable that is not a string...
"
Using graph generator with a custom class as node,"source
import networkx as nx

class Agent(object):
    def __init__(self, id):
        self.id = id
    def __repr__(self):
        return '<Agent #{}>'.format(self.id)


g = nx.complete_graph(5)
print g.nodes()

nx.relabel_nodes(g, mapping=Agent, copy=False)
print g.nodes()
"
Inconsistency in modified/created/accessed time on mac,"import sys, os, stat, time

def get_times(p):
    s = os.stat(p)
    return ( 
        os.path.getatime(p),
        os.path.getmtime(p),
        os.path.getctime(p),
        s[stat.ST_ATIME],
        s[stat.ST_MTIME],
        s[stat.ST_CTIME],
    )

def main(p, delay=1):
    delay = float(delay)
    (a,b) = (1000000000, 1500000000)

    open(p,'w').close()

    print 'initial:'
    print get_times(p)

    for t in [ (a,a), (a,b), (b,a), (b,b) ]:
        print
        print 'test:', t
        os.utime(p,t)
        print get_times(p)
        time.sleep(delay)
        print get_times(p)

main(*sys.argv[1:])
"
Lambda or functools.partial for deferred function evaluation?,"from functools import partial

def partials(*args):
    for arg in args:
        yield partial(str, arg)

one, two, three, four = partials(1, 2, 3, 4)
print one(), two(), three(), four()
"
Should I do anything to make my code more pythonic?,"current_salary += current_salary * amount_of_raise
"
"Python - how to convert a ""raw"" string into a normal string",raw_byte_string.decode('unicode_escape')
"Shallow copy, why does the list not change",">>> a = [4, 5]
>>> b = a
>>> b.append(3)
>>> b
[4, 5, 3]
>>> a
[4, 5, 3]
>>> b = [6, 7]
>>> b
[6, 7]
>>> a
[4, 5, 3]
"
"Python, BeautifulSoup - <div> text and <img> attributes in correct order",">>> from bs4 import BeautifulSoup, Tag
>>> sample = '''\
... <div class=""textbox"">
...     Buying this item will cost you 
...     <img align=""adsbottom"" alt=""1"" src=""/1.jpg;type=symbol""/>
...     silver credits and
...     <img align=""adsbottom"" alt=""1"" src=""/1.jpg;type=symbol""/>
...     golden credits
... </div>
... '''
>>> html = BeautifulSoup(sample)
>>> result = []
>>> for child in html.find('div', class_='textbox').children:
...     if isinstance(child, Tag):
...         result.append(child.get('alt', ''))
...     else:
...         result.append(child.strip())
... 
>>> print ' '.join(result)
Buying this item will cost you 1 silver credits and 1 golden credits
"
How to sum some of the values for dicts in a list?,"def sumFirstSix(self):
    """"""
    sums the first six moments and returns the sum of the values
    """"""
    l=('Ettor','Tvåor','Treor','Fyror','Femmor','Sexor')
    sum=0
    for item in l:
        sum+=self.moment[item]
    return sum
"
Python - Removing an element in list,"for x in xrange(0, len(your_list)-1):
    your_list[x]= # use one of the methods mentioned above
"
Python create nested dictionary from list with nested tuples,"d = {}
for k1,k2,v in List:
     d[(k1,k2)] = v
"
Python. BigData. Need to extract Web-Browser and OS users' preferences from cells. Best-performance method?,"In [83]: df.head().user_agent.apply(parse_ua_series).rename(columns={0:'browser', 1:'os'})
Out[83]:
  browser         os
0  Chrome  Windows 7
0  Chrome  Windows 7
0  Chrome  Windows 7
0  Chrome  Windows 7
"
Count NaNs when unicode values present,"In [24]: test = pd.Series(data = [NaN, 2, u'string'])

In [25]: pd.isnull(test)
Out[25]: 
0     True
1    False
2    False
dtype: bool
"
Parsing web page in python using Beautiful Soup,"for ul in soup.findAll('p') :
    print(ul)
"
Python: Saving parts of str to an array,"import re
disks=[]

OUTPUT = '''
FRU 0_2_3 enclosure 1
FRU 0_2_4 enclosure 1
FRU 0_2_5 enclosure 1
FRU 0_2_6 enclosure 1
'''
#OUTPUT=fbeclicommand(""li -all"") #This is the command on some exe that will gather the output and save it to this variable.
OUTPUTSplit= OUTPUT.split('\n')
for line in OUTPUTSplit:
    if re.search(""\d{1,3}_\d{1,3}_\d{1,3}"", line):
        disks.append(line.split(' ')[1])

print disks
"
Python: how can I override a complicated function during unittest?,"// my_script.py

def my_loopy_function():
    aggregate_value = 0
    for x in range(10):
        aggregate_value = aggregate_value + complicated_function(x)
    return aggregate_value

def complicated_function(x):
    a = do()
    b = something()
    c = complicated()
    return a + b + c
"
how to retrieve value from text file using python?,"s = ""able#1""

for line in open(""pro.txt"").readlines():
    if s == line.split()[3].strip():
        print line.rsplit(' ',1)[0].strip()
"
Fastest algorithm possible to pick number pairs,"H=set(A)
ans = sum(1 for a in A if a-k in H)
print ans
"
Parsing Dictionary Into Spreadsheet in Python,">>> w={'James': [['Jeans', 6],
...      ['Shirts', 10],
...      ['Shoes', 5],
...      ['Ties', 6]],
...  'Nick': [['Jeans', 8],
...     ['Shirts', 4],
...     ['Shoes', 3],
...     ['Ties', 4]],
...  'Adam': [['Jeans', 2],
...     ['Shirts', 3],
...     ['Shoes', 5],
...     ['Ties', 1]],
...  'John': [['Jeans', 6],
...     ['Shirts', 5],
...     ['Shoes', 10],
...     ['Ties', 3],
...     ['Belts', 1]]}
>>> {k:dict(LoL) for k, LoL in w.items()}
{'James': {'Ties': 6, 'Jeans': 6, 'Shirts': 10, 'Shoes': 5}, 'John': {'Ties': 3, 'Belts': 1, 'Jeans': 6, 'Shirts': 5, 'Shoes': 10}, 'Adam': {'Ties': 1, 'Jeans': 2, 'Shirts': 3, 'Shoes': 5}, 'Nick': {'Ties': 4, 'Jeans': 8, 'Shirts': 4, 'Shoes': 3}}
"
Comparing Strings,"[x == y for (x, y) in zip(""TICK"", ""TOCK"")].count(True)
"
How do I write a comma as a normal text in a CSV file?(the double quote method doesn't work),">>> from cStringIO import StringIO
>>> import csv
>>> out = StringIO()
>>> writer = csv.writer(out)
>>> writer.writerow(['Data with , commas and nested "" quotes', 'works just fine'])
>>> out.getvalue()
'""Data with , commas and nested """" quotes"",works just fine\r\n'
"
Python :Replace repetitive line in a file with empty space but not on first / last occurrence,"reps = rest.count(""\n""+rep_line)

new_text = beginning + rest.replace(""\n""+rep_line,""\n"",reps - 1)
                                                  # ^ replace with a single newline
"
Python bit list to byte list,"from itertools import zip_longest # izip_longest python2

bits = [1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,1,0]
it = iter(map(str, bits))

print( [int("""".join(sli), 2) for sli in izip_longest(*iter([it] * 8),fillvalue="""")])
[149, 107, 231, 2] # using just zip would be  [149, 107, 231] 
"
Merging all csvs in a folder and adding a new column with filename of original file in Python,"import os
import glob

want_header = True
out_filename = ""combined.files.csv""

if os.path.exists(out_filename):
    os.remove(out_filename)

read_files = glob.glob(""*.csv"")

with open(out_filename, ""w"") as outfile:
    for filename in read_files:
        with open(filename) as infile:
            if want_header:
                outfile.write('{},Filename\n'.format(next(infile).strip()))
                want_header = False
            else:
                next(infile)
            for line in infile:
                outfile.write('{},{}\n'.format(line.strip(), filename))
"
Python Open Every File in a Folder,"import os
for filename in os.listdir(os.getcwd()):
   # do your stuff
"
Matplotlib so log axis only has minor tick mark labels at specified points. Also change size of tick labels in colorbar,"import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(111)
x = np.arange(10,3000,100)
y = np.arange(10,3000,100)
X,Y = np.meshgrid(x,y)
Z = np.random.random(X.shape)*8000000
surf = ax.contourf(X,Y,Z, 8, cmap=plt.cm.jet)
ax.set_ylabel('Log Frequency (Hz)')
ax.set_xlabel('Log Frequency (Hz)')
ax.set_xscale('log')
ax.set_yscale('log')
ax.xaxis.set_minor_formatter(plt.FormatStrFormatter('%d'))
# defining custom minor tick locations:
ax.xaxis.set_minor_locator(plt.FixedLocator([50,500,2000]))
ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks_position('bottom')
ax.tick_params(axis='both',reset=False,which='both',length=8,width=2)
cbar = fig.colorbar(surf, shrink=0.5, aspect=20, fraction=.12,pad=.02)
cbar.set_label('Activation',size=18)
# access to cbar tick labels:
cbar.ax.tick_params(labelsize=5) 
plt.show()
"
"In python, how would I go about linking user input to a index in a list?","column = ord(letter) - ord('A')
"
Create a Dendogram from Genome,"from Bio.Align.Applications import ClustalwCommandline
clustalw_exe = r""C:\path\to\clustalw-2.1\clustalw2.exe""
assert os.path.isfile(clustalw_exe), ""Clustal W executable missing""
clustalw_cline = ClustalwCommandline(clustalw_exe, infile=fasta_path)
stdout, stderr = clustalw_cline()    
print stdout
"
Check if user collected any points from my quiz,"def end_of_quiz():
    global score
    if  score > 0:
        print(""Well Done, Your score is:"")
        print(score)
    else:
        print(""Sorry, you didn't get any points, you shall try again!"")
"
Python encoding blocks of text using strings,"def code_char(char, key):
    ichar = int(char)
    ikey = int(key)
    return chr(ord('0') + ichar+ikey)
"
REST post using Python-Request,"data = {""data"" : ""24.3""}
response = requests.post(url, json=data)
"
"Wanting to Change specific Characters from TextFile into Other Characters. Not trying to Write, only wanting to print out into the console",">>> instring = 'ABCD'
>>> instring.translate(str.maketrans('ACac','gtgt'))
'gBtD'
"
Python: how to properly import a function from another file that depends on module,"# my_functions.py
from math   import sqrt
from pandas import DataFrame as df
#Or import pandas as pd 

def sqrt_product(a, b):
    return sqrt(a*b)

def create_df(lst):
    return df(lst)
    #return pd.DataFrame(lst)
"
Python Array Function,"dnsses = openCON(query)
for dns in dnsses:
    printHeader(*dns[0:3])
    printDNS(*dns[3:])
"
Python Pandas Compare 2 Large DataFrames of Text for Similarity,"import itertools as IT
import numpy as np
import pandas as pd
np.random.seed(2015)

N = 10000
df1, df2 = [pd.DataFrame(
    np.random.choice(map(''.join, IT.product(list('ABC'), repeat=2))+['--'], 
                     size=(N, 2)),
    columns=['Col1', 'Col2']) for i in range(2)]


comparison = df1.eq(df2)    
mask = (df1=='--') | (df2=='--')
comparison |= mask

# for column stats
column_stats = comparison.sum(axis=0) / float(len(df1.index))

# for row stats
row_stats = comparison.sum(axis=1) / float(len(df1.columns))
"
Trying to read certain text from a file that has strange characters. (Python),"import re

with open(""input.txt"", ""rb"") as f_input:     
    start_token = raw_input(""Please enter the start keyword: "")
    end_token = raw_input(""Please enter the end keyword: "")
    reText = re.search(""%s(.*?)%s"" % (re.escape(start_token), re.escape(end_token)), f_input.read(), re.S)

    if reText:
        for word in re.findall(r""\b\w+\b"", reText.group(1)):
            print word
    else:
        print ""not found""
"
Have Python 2.7 functions remember value and not reference? Closure Weirdness,"(lambda i: lambda x: x+i)(i)
"
How to reset an unordered index to an ordered one in python?,"transactional.reset_index(inplace = True, drop=True)
"
"Removing an element, but not the text after it","import xml.dom.minidom

data = """"""<root>
<a>Some <b>bad</b> text <i>that</i> I <u>do <i>not</i></u> want to keep.</a>
</root>""""""

dom = xml.dom.minidom.parseString(data)
a = dom.getElementsByTagName('a')[0]
for child in a.childNodes:
    if getattr(child, 'tagName', '') in ('u', 'b'):
        a.removeChild(child)

print dom.toxml()
"
Subtract a column from one pandas dataframe from another,"rates.sub(treas.squeeze(),axis=0).dropna()
"
Matplotlib Half color axis,"import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap

# Evaluate an existing colormap from 0.5 (midpoint) to 1 (upper end)
cmap = plt.get_cmap('gist_earth')
colors = cmap(np.linspace(0.5, 1, cmap.N // 2))

# Create a new colormap from those colors
cmap2 = LinearSegmentedColormap.from_list('Upper Half', colors)

y, x = np.mgrid[-200:1900, -300:2000]
z = np.cos(np.hypot(x, y) / 100) + 1

fig, axes = plt.subplots(ncols=2)
for ax, cmap in zip(axes.flat, [cmap, cmap2]):
    cax = ax.imshow(z, cmap=cmap, origin='lower',
                    extent=[x.min(), x.max(), y.min(), y.max()])
    cbar = fig.colorbar(cax, ax=ax, orientation='horizontal')
    cbar.set_label(cmap.name)

plt.show()
"
Create multiple dictionaries from a single iterator in nested for loops,"with open('genes.csv') as f:
    cread_1 = list(csv.reader(f, delimiter = '\t'))
    sample_1_dict = {i: float(j) for i, j in cread_1}
    sample_1_list = [x for x in sample_1_dict.items()]
    sample_1_values_sorted = sorted(sample_1_list, key=lambda expvalues: expvalues[1])
    sample_1_genes = [i for i, j in sample_1_values_sorted]
    sample_1_values = [j for i, j in sample_1_values_sorted]
    sample_1_graph_raw = [float(j) for i, j in cread_1] 
"
Check if a given directory contains any directory in python,"def folders_in(path_to_parent):
    for fname in os.path.listdir(path_to_parent):
        if os.path.isdir(os.path.join(path_to_parent,fname)):
            yield os.path.join(path_to_parent,fname)

print list(folders_in(""/path/to/parent""))
"
Product of a sequence in NumPy,"In [289]: # Larger inputs
     ...: A = np.random.randint(1,500,(400))
     ...: G = np.random.randint(1,400,(20,20))
     ...: 

In [290]: %timeit calcF(G,A)
1 loops, best of 3: 4.46 s per loop

In [291]: %timeit vectorized_calcF(G,A)  # Posted solution 
1 loops, best of 3: 1.87 s per loop
"
Scrap all tables from div using BeautifulSoup,"from bs4 import BeautifulSoup
import requests 


def getPhoneStats(url):
    try:
        request= requests.get(url)
        if request.status_code == 200:
            soup = BeautifulSoup(request.content,""html.parser"")

            for table in soup.findAll(""table""):
                header = table.th.get_text()
                for row in table.findAll(""tr""):
                    out_row = [ header ]
                    for col in row.findAll(""td""):
                        out_row.append(col.get_text())
                    print(out_row)
        else:
            print('unable to connect ')
    except requests.HTTPError as e:
        print('Unable to open url',e)

if __name__ == ""__main__"":
    getPhoneStats('''http://www.gsmarena.com/lenovo_k3_note-7147.php''')
"
Sort numpy matrix row values in ascending order,"numpy.sort(arr, axis=0)"
"Difference between two ""contains"" operations for python lists","if any(data.n == 5 for data in myList):
    print ""Found it""
"
Cannot get dictionary keys to look like i want them to,"return {'/' + key + '/': val for key, val in dictionary.items()}
"
Vectorize haversine distance computation along path given by list of coordinates,"from __future__ import division, print_function

import numpy as np


def hav(theta):
    return np.sin(theta/2)**2


coords = [[  16.34576887, -107.90942116],
          [  12.49474931, -107.76030036],
          [  27.79461514, -107.98607881],
          [  12.90258404, -107.96786569],
          [  -6.29109889, -107.88681145],
          [  -2.68531605, -107.72796034]]
r = 6371

coordinates = np.deg2rad(coords)
lat = coordinates[:, 0]
lng = coordinates[:, 1]
coslat = np.cos(lat)
t = hav(np.diff(lat)) + coslat[:-1]*coslat[1:]*hav(np.diff(lng))
d = 2*r*np.arcsin(np.sqrt(t))

print(d)
"
"Given a list, How to count items in that list?","list = ""a|dhg|shg|abc|oyi""
items = list.split(""|"")
count = len(items)
print count
"
What does Django Date filter mean by 'Naive'?,"import datetime
import pytz

unaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)
aware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0, pytz.UTC)

now_aware = pytz.utc.localize(unaware)
assert aware == now_aware
"
Why is my metaclass not behaving as expected,">>> type('myclass', (), {})
<class '__main__.myclass'>
"
How to apply a mask to a number or string in Python?,"In [272]: mask = '001001'

In [273]: num=123456

In [274]: """".join(x if y!='1' else '0' for x,y in zip(str(num),mask))
Out[274]: '120450'
"
Convert plain numbers from file to list of integers,">>> with open('FILEPATH') as f:
...     lst = [[int(n)] for n in f.read().split()]
... 
>>> lst
[[299], [314], [427]]
"
Z3: how to encode If-the-else in Z3 python?,">>> x = Int('x')
>>> y = Int('y')
>>> max = If(x > y, x, y)
>>> max
If(x > y, x, y)
>>> simplify(max)
If(x <= y, y, x)
"
Python equivalent of Java's compareTo(),"@functools.total_ordering
class Foo:
    def __init__ (self, a, b):
        self.a = a
        self.b = b

    def __lt__ (self, other):
        if self.a == other.a:
            return self.b < other.b
        return self.a < other.b

    def __eq__ (self, other):
        return self.a == other.b and self.b == other.b
"
Python: Frequency of occurrences,"plt.hist(data, bins=np.arange(data.min(), data.max()+1), align='left')
"
re.findall printing the full text on a line of tekst,"import urllib
import re

html = urllib.urlopen(""http://jshawl.com/python-playground/"").readlines()
for line in html :
    if ""jesseshawl"" in line:
        print line
"
Append index of items in one list to another in Python 2.7,"Master =[23, 5, 6, 34, 11, 23, 23, 11, 6]
List_check = [23, 6, 11]

Location = []
for element in List_check:
    if element in Master:
        for k in range(len(Master)):
            if Master[k] == element:
                Location.append(k)
                break
"
Edgelist from a binary tree,"import networkx as nx
import itertools as IT
import matplotlib.pyplot as plt

class BinaryTree(object):
   def __init__(self, data):
      self.data = data
      self.right = None
      self.left = None
      self.name = None
   def edgelist(self, counter = IT.count().next):
       self.name = counter() if self.name is None else self.name
       for node in (self.left, self.right):       
           if node:
               node.name = counter() if node.name is None else node.name
               yield (self.name, node.name)
       for node in (self.left, self.right):
           if node:
               for n in node.edgelist(counter):
                   yield n

tree = [BinaryTree(i) for i in range(5)]        
tree[0].left = tree[1]
tree[0].right = tree[2]
tree[2].left = tree[3]
tree[2].right = tree[4]

edgelist = list(tree[0].edgelist())
print(edgelist)   

G = nx.Graph(edgelist)
nx.draw_spectral(G)
plt.show()
"
Python series algorithm,">>> list(interpolate([12, None, None, 17, 20, None, 28]))
[12, 14, 15, 17, 20, 24, 28]
"
how to make my maze function print out the solution,"def mazeDetector(row, col, solution):
    solution.append((row, col))
    if m[row][col] == ""F"": return True, solution
    m[row][col] = ""V""
    neighbors = [(row, col - 1), (row + 1, col), (row - 1, col), (row, col + 1)]
    neighbors = filter(lambda (r, c): r >= 0 and c >= 0 and r < len(m) and c < len(m) and m[r][c] not in (""V"", ""W""), neighbors)
    for r, c in neighbors:
        t, sol = mazeDetector(r, c, list(solution))
        if t: return True, sol
    return False, []

print mazeDetector(1, 5, [])[1]
"
http file downloading and saving,"testfile = urllib.request.URLopener()
testfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"
Python CSV reading ascii delimited text?,"import csv

with open('ascii_delim.adt', 'w') as f:
    writer = csv.writer(f, delimiter=chr(31), lineterminator=chr(30))
    writer.writerow(('Sir Lancelot of Camelot', 'To seek the Holy Grail', 'blue'))
    writer.writerow(('Sir Galahad of Camelot', 'I seek the Grail', 'blue... no yellow!'))

def readlines(f, newline='\n'):
    while True:
        line = []
        while True:
            ch = f.read(1)
            if ch == '':  # end of file?
                return
            elif ch == newline:  # end of line?
                line.append('\n')
                break
            line.append(ch)
        yield ''.join(line)

with open('ascii_delim.adt', 'rb') as f:
    reader = csv.reader(readlines(f, newline=chr(30)), delimiter=chr(31))
    for row in reader:
        print row
"
Reading multiple lines from an external text file in Python,"STEP_BYTES = 1024

def main():
    infile = open(""module3.txt"",""r"")
    uppercasecount = 0
    lowercasecount = 0
    digitcount = 0
    spacecount = 0
    data = infile.read(STEP_BYTES)
    while data:
        for character in data:
            if character.isupper() == True:
                uppercasecount += 1
            if character.islower() == True:
                lowercasecount += 1
            if character.isdigit() == True:
                digitcount += 1
            if character.isspace() == True:
                spacecount += 1
        data = infile.read(STEP_BYTES)

    print (""Total count is %d Upper case, %d Lower case, %d Digit(s) and %d spaces."" %(uppercasecount, lowercasecount, digitcount, spacecount))

main()
"
deleting element from python dictionary,"for eachitem in dicta:
    for k in ['NAME','STATE','COUNTRY','REGION','LNAME']:
        del eachitem[k]
"
Maintaining a roll-backable flow of code in python without extreme identation,"class Action(object):
    def __init__(self, count):
        self.count = count
    def perform(self):
        print ""perform "" + str(self.count)
        if self.count == 2:
            raise Exception(""self.count is "" + str(self.count))
    def commit(self):
        print ""commit "" + str(self.count)
    def rollback(self):
        print ""rollback "" + str(self.count)
    def __enter__(self):
        perform()
        return self
    def __exit__(self, exc_type, exc_value, traceback):
        if exc_value is None:
            self.commit()
        else:
            self.rollback()

with Action(1), Action(2), Action(3):
    pass
"
"What is the best, python or bash for generating strings from combinations of letters?",">>> s = 'atgc'
>>> d = dict(zip(s, 'tacg'))
>>> import itertools
>>> for i in itertools.product(s, repeat=10):
    sta = ''.join(i)
    stb = ''.join(d[x] for x in i)
"
list of tuples to dictionary of dictionaries,"import json
from collections import defaultdict

l = [('HCS', 'Assured Build', 'Implementation', 'Hardware Stack'),
     ('HCS', 'Assured Build', 'Implementation', 'SA and SF'),
     ('HCS', 'Assured Build', 'Testing and Validation', 'NFRU-SS'),
     ('HCS', 'Assured Build', 'Testing and Validation', 'NRFU-UC'),
     ('HCS', 'Assured Platform', 'Restoration', 'AS Build'),
     ('HCS', 'Assured Platform', 'Restoration', 'Capacity Management'),
     ('HCS', 'Assured Platform', 'Migration', 'Document Review')]

d = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))
for key1, key2, key3, value in l:
    d[key1][key2][key3].append(value)

print(json.dumps(d, indent=4))
"
"python writing txt file 500* 36 zero,then wrap lines in every 16","for i in range(500):
    for j in range (16):
        print '%8.1f' % (0),
    print 
    for j in range (16):
        print '%8.1f' % (0),
    print
    for j in range (4):
        print '%8.1f' % (0),
    print 
"
How would you make a comma-separated string from a list?,"myList = ','.join(map(str, myList))"
Dedupe and sort a list in Python 2.2,"def sort_uniq(alist):
   d = {}
   mod_list = [d.setdefault(i,i) for i in alist if i not in d]
   mod_list.sort()
   return mod_list
"
numpy fromfile and structured arrays,"import numpy as np

headerfmt='20i,20f,a80'
dt = np.dtype(headerfmt)

# Note the 0-index!
x = np.zeros(1, dtype=dt)[0]

print x['f0'], x['f1'], x['f2']
ints, floats, chars = x
"
Using Python functions in Tkinter.Tcl(),"import Tkinter

# create the tcl interpreter
tcl = Tkinter.Tcl()

# define a python function
def pycommand(*args):
    print ""pycommand args:"", "", "".join(args)

# register it as a tcl command:
tcl_command_name = ""pycommand""
python_function = pycommand
cmd = tcl.createcommand(tcl_command_name, python_function)

# call it, and print the results:
result = tcl.eval(""pycommand one two three"")
print ""tcl result:"", result
"
How to calculate all 24 rotations of 3d array?,"def rot90(m, k=1, axis=2):
    """"""Rotate an array by 90 degrees in the counter-clockwise direction around the given axis""""""
    m = numpy.swapaxes(m, 2, axis)
    m = numpy.rot90(m, 2)
    m = numpy.swapaxes(m, 2, axis)
    return m
"
Adding up number in a list with every 3 number,"import itertools

def grouper(n, iterable, fillvalue=None):
    ""grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx""
    args = [iter(iterable)] * n
    return itertools.izip_longest(*args, fillvalue=fillvalue)

map(sum, grouper(3, interger, 0))
"
Get corner values in Python numpy ndarray,"corners = a[tuple(slice(None, None, j-1) for j in a.shape)]
"
incrementing values of a list at specific indexes python,"import numpy as np

list1 = np.array([1, 0, 0, 1, 1, 1, 0, 1, 0])
list2 = np.array([1, 0, 0, 0, 0, 0, 0, 1, 0])
list3 = np.array([1, 0, 0, 0, 0, 0, 0, 0, 0])
list4 = np.array([1, 0, 0, 0, 0, 0, 0, 0, 0])

list1 + list2 + list3 +list4 # desired result!
>>> array([4, 0, 0, 1, 1, 1, 0, 2, 0])
"
Removing empty dictionary elements in Python,"if info_list:
    complete_dict=dict(zip(category_list,info_list))
"
Python convert timedeltas into hours in string format,"from datetime import timedelta

delta = timedelta(hours=3457)
print delta
"
Python: how to map one list and one list of list together,"result = []
for item1, item2 in zip(list1, list2):
    for s in item2:
        result.append((item1, s))
"
Python select columns with similar names,"days = []
for s in l[0]:
    if s.startswith('DAYS'):
        days.append(s)

print days
"
How to define values for RegularGridInterpolator,"from scipy.interpolate import LinearNDInterpolator

ex = LinearNDInterpolator((x, y, z), v)
ex((800, 4.5, 2))
#array(1.0)

ex([[800, 4.5, 2], [800, 4.5, 3]])
#array([ 1.,  2.])
"
Nongreedy Regex with Repetition,"FFD8FF(?:(?=([^F]+|F(?!FD8FF)))\1)*FFD9
"
Returning the index of an item clicked in a tkinter Listbox,"def fileSelection(self):
    selection = listbox.curselection()
    print(selection)
"
Extracting contents of a string within parentheses,"import re
s_pat = r'''
\s*  # any amount of white space
([^( \t]  # start match group; match one char that is not a '(' or space or tab
[^(]*  # match any number of non '(' characters
[^( \t])  # match one char that is not a '(' or space or tab; close match group
\s*  # any amount of white space
\(  # match an actual required '(' char (not in any match group)
\s*  # any amount of white space
([^) \t]  # start match group; match one char that is not a ')' or space or tab
[^)]*  # match any number of non ')' characters
[^) \t])  # match one char that is not a ')' or space or tab; close match group
\s*  # any amount of white space
\) # match an actual required ')' char (not in any match group)
\s*  # any amount of white space
(?:,|$)  # non-match group: either a comma or the end of a line
'''
pat = re.compile(s_pat, re.VERBOSE)

lst = pat.findall(string)
"
Python 3: Can't properly encode and print a downloaded string with /xXX literals,"parsedHtml = BeautifulSoup(pageContent, 'lxml')
"
It's possibile to use set function on a object basing only one attribute?,"# Keep the last copy with a given link but order not preserved in result
kept_last = {x.link: x for x in nonuniquelist}.values()

# Keep the first copy with a given link but order not preserved in result
kept_first = {x.link: x for x in reversed(nonuniquelist)}.values()
"
Python - Replacing characters in a list,">>> L = [1,2,3,4,5,6,7,8,9,10]
>>> L[7]
8
>>> L[7:8]  #NOTE: it's a *list* of a single element!
[8]
"
Sorting a 2D numpy array by multiple axes,"import numpy as np    
a = np.array([(3, 2), (6, 2), (3, 6), (3, 4), (5, 3)])

ind = np.lexsort((a[:,1],a[:,0]))    

a[ind]
# array([[3, 2],
#       [3, 4],
#       [3, 6],
#       [5, 3],
#       [6, 2]])
"
Access environment variables,print(os.environ.get('KEY_THAT_MIGHT_EXIST'))
Python 2D Gaussian Fit with NaN Values in Data,"p, success = optimize.leastsq(errorfunction, params, args=(x, y, data))
"
'QThread: Destroyed while thread is still running' on quit,"import sys
from queue import Queue, Empty
from PySide import QtCore, QtGui

class LogReceiver(QtCore.QObject):
    mysignal = QtCore.Signal(str)

    def __init__(self, queue, *args, **kwargs):
        QtCore.QObject.__init__(self, *args, **kwargs)
        self.queue = queue

    def run(self):
        self.active = True
        while self.active:
            try:
                text = self.queue.get(timeout=1.0)
                self.mysignal.emit('text')
            except Empty:
                continue
        print('finished')

class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.queue = Queue()
        self.thread = QtCore.QThread(self)
        self.receiver = LogReceiver(self.queue)
        self.receiver.moveToThread(self.thread)
        self.thread.started.connect(self.receiver.run)
        self.thread.start()

    def closeEvent(self, event):
        print('close')
        self.receiver.active = False
        self.thread.quit()
        self.thread.wait()

if __name__ == '__main__':

    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.show()

    sys.exit(app.exec_())
"
python while loop and for loop,"i = 1523
total = 0
while i <= 10503:
    total += i
    i += 2
print (total)

total = 0
for i in range (1523, 10504, 2):
    total += i
print (total)
"
Is it possible get a dictionary of passed in parameters similar to kwargs(python)?,"import inspect

def myargs(val1, val2, val3=None, val4=5):
        print inspect.currentframe().f_locals
"
Speed/efficiency comparison for loop vs list comprehension vs other methods,"#!/usr/bin/env python

''' Time various implementations of string diff function

    From http://stackoverflow.com/q/28581218/4014959

    Written by PM 2Ring 2015.02.18
'''

from itertools import imap, izip, starmap
from operator import ne

from timeit import Timer
from random import random, seed

def h_dist0(s1,s2):
    ''' For loop '''
    tot = 0
    for d1, d2 in zip(s1, s2):
        if d1 != d2:
            tot += 1
    return tot

def h_dist1(s1,s2):
    ''' List comprehension '''
    return sum([dgt1 != dgt2 for dgt1, dgt2 in zip(s1, s2)])

def h_dist2(s1,s2):
    ''' Generator expression '''
    return sum(dgt1 != dgt2 for dgt1, dgt2 in zip(s1, s2))

def h_dist3(s1,s2):
    ''' Generator expression with if '''
    return sum(1 for dgt1, dgt2 in zip(s1, s2) if dgt1 != dgt2)

def h_dist3a(s1,s2):
    ''' Generator expression with izip '''
    return sum(1 for dgt1, dgt2 in izip(s1, s2) if dgt1 != dgt2)

def h_dist4(s1,s2):
    ''' imap '''
    return sum(imap(ne, s1, s2))

def h_dist5(s1,s2):
    ''' starmap '''
    return sum(starmap(ne, izip(s1, s2)))

funcs = [
    h_dist0,
    h_dist1,
    h_dist2,
    h_dist3,
    h_dist3a,
    h_dist4,
    h_dist5,
]

# ------------------------------------

def check_full():
    print 'Testing all functions with strings of length', len(s1)
    for func in funcs:
        print '%s:%s\n%d\n' % (func.func_name, func.__doc__, func(s1, s2))

def check():
    print 'Testing all functions with strings of length', len(s1)
    print [func(s1, s2) for func in funcs], '\n'

def time_test(loops=10000, reps=3):
    ''' Print timing stats for all the functions '''
    slen = len(s1)
    print 'Length = %d, Loops = %d, Repetitions = %d' % (slen, loops, reps)

    for func in funcs:
        #Get function name and docstring
        fname = func.func_name
        fdoc = func.__doc__

        print '\n%s:%s' % (fname, fdoc)
        t = Timer('%s(s1, s2)' % fname, 'from __main__ import s1, s2, %s' % fname)
        results = t.repeat(reps, loops)
        results.sort()
        print results
    print '\n' + '- '*30 + '\n'

def make_strings(n, r=0.5):
    print 'r:', r
    s1 = 'a' * n
    s2 = ''.join(['b' if random() < r else 'a' for _ in xrange(n)])
    return s1, s2

# ------------------------------------

seed(37)

s1, s2 = make_strings(100)
#print '%s\n%s\n' % (s1, s2)
check()
time_test(10000)

s1, s2 = make_strings(100, 0.1)
check()
time_test(10000)

s1, s2 = make_strings(100, 0.9)
check()
time_test(10000)

s1, s2 = make_strings(10)
check()
time_test(50000)

s1, s2 = make_strings(1000)
check()
time_test(1000)
"
Remove empty lines,"if re.match(r'^\s*$', line):
    # line is empty (has only the following: \t\n\r and whitespace)
"
How to get 'java -version' output through python,"print subprocess.check_output([""java"", ""-version""], stderr=subprocess.STDOUT)
"
Comparing an arbitrary number of lists element by element,"my_dict = {1: [2, [14, 14, 13, 13, 12]],
           2: [4, [5, 4, 3, 2, 1]],
           3: [4, [13, 12, 11, 10, 9]],
           4: [3, [14, 14, 14, 12, 11]],
           5: [1, [14, 14, 13, 12, 11]],
           6: [4, [14, 13, 12, 11, 10]],
           7: [3, [14, 14, 14, 13, 1]],
           8: [0, [14, 13, 12, 11, 9]]}

key = max(my_dict.iteritems(), key=lambda x: x[1])[0]
print 'The largest list has key: %r' % key
"
How to split pandas data frame by many criteria,"masked = (df['emld'] == 'aol.com') & (df['bounce_type'] == 'hard')
# then the result will be
df[masked]
"
Validity of a string based on some conditions,"import re

parser1 = re.compile(""[0-9]\\*?$"")
parser3 = re.compile(""\\([0-9]\\*[0-9]\\)$"")
parser4 = re.compile(""(\\([0-9]\\*[0-9]\\)|[0-9])\\*(\\([0-9]\\*[0-9]\\)|[0-9])$"")

def validity(s):
    valid = False

    # Condition 1 and 2
    if parser1.match(s):
        return True
    # Condition 3
    if parser3.match(s):
        return True
    # Condition 4
    if parser4.match(s):
        return True

    return False

print validity('1') # Condition 1
print validity('9') # Condition 1
print validity('10') # Doesn't satisfy any of the conditions
print validity('1*') # Condition 2
print validity('4*') # Condition 2
print validity('9*') # Condition 2
print validity('10*') # Doesn't satisfy any of the conditions
print validity('(3*4)') # Condition 3
print validity('(3*9)') # Condition 3
print validity('(4*9)') # Condition 3
print validity('(10*9)') # Doesn't satisfy any of the conditions
print validity('(3*2)*(3*1)') # Condition 4
print validity('(3*2)*8') # Condition 4
print validity('(3*2)*z') # Doesn't satisfy any of the conditions
"
"Replacing multiple characters from an element in a list,","from string import maketrans
trs = maketrans(''.join(old_chars), ''.join(new_chars))
"
Best way to parse a file with columns that randomly change order before importing it into SQL Server 2008?,"from operator import itemgetter
def header_parse(line,order_dict):
    header_info = line.split(',')
    indices = [None] * len(header_info)
    for i,col_name in enumerate(header_info):
        indices[order_dict[col_name]] = i
    return indices

def fix(fname,foutname):
    with open(fname) as f,open(foutname,'w') as fout:
        #Assume first line is a ""header"" and gives the order to use for the
        #rest of the file
        line = f.readline()
        order_dict = dict((name,i) for i,name in enumerate(line.strip().split(',')))
        reorder_magic = itemgetter(*header_parse(line.strip(),order_dict))
        for line in f:
            if line.startswith('Column'):  #somehow determine if this is a ""header""
                reorder_magic = itemgetter(*header_parse(line.strip(),order_dict))
            else:
                fout.write(','.join(reorder_magic(line.strip().split(','))) + '\n')

if __name__ == '__main__':
    import sys
    fix(sys.argv[1],sys.argv[2])
"
Dividing SConstruct code into set of aliases; no code called by default,"env = Environment()

def h(env):
    x = env.Program(""hello1"", ""hello1.c"")
    y = env.Program(""hello2"", ""hello2.c"")
    return x,y

def h3(env):
    return env.Program(""hello3"", ""hello3.c"")

env.Alias(""h"", h(env))
env.Alias(""h3"", h3(env))
Default(None)
"
How to create a Python decorator that can be used either with or without parameters?,"def doublewrap(f):
    '''
    a decorator decorator, allowing the decorator to be used as:
    @decorator(with, arguments, and=kwargs)
    or
    @decorator
    '''
    @wraps(f)
    def new_dec(*args, **kwargs):
        if len(args) == 1 and len(kwargs) == 0 and callable(args[0]):
            # actual decorated function
            return f(args[0])
        else:
            # decorator arguments
            return lambda realf: f(realf, *args, **kwargs)

    return new_dec
"
Change all specific letters in a list in python,"def changeLetter(item_list):
    result_list = []
    for word in item_list:
        new_word = ''
        for char in word:
            if char == 't':
                new_word += 'T'
            else:
                new_word += char
        result_list.append(new_word)
    print result_list



changeLetter([""test"",""iteration"",""123"",""train""])
"
Python log-the-display problems,"python myscript.py > log.txt 2>&1
"
"Confusion with python global variables, pygame event","if e.type == pygame.QUIT:
   print 'Close!'
   self.isRunning = 0
   running = 0
"
Equivalent of Ipython run command in normal python,"def main(filename):
    print(filename)

if __name__ == ""__main__"":
    import sys
    main(sys.argv[1])
"
paint application - python,"import sys, pygame
from pygame.locals import *

pygame.init()

screen = pygame.display.set_mode((1000,600))

screen.fill((255,255,255))

brush1 = pygame.image.load(""redbrush.png"")
brush1 = pygame.transform.scale(brush1,(45,45))
pos1 = (0, 32)

brush2 = pygame.image.load(""bluebrush.png"")
brush2 = pygame.transform.scale(brush2,(45,45))
brush2 = pygame.transform.scale(brush2,(45,45))
pos2 = (0, 64)

brush = brush1

pygame.display.update()

clock = pygame.time.Clock()

z = 0

while 1:
    screen.blit(brush1, pos1)
    screen.blit(brush2, pos2)
    pygame.display.update()
    clock.tick(60)
    x,y = pygame.mouse.get_pos()

    for event in pygame.event.get():
        if event.type ==pygame.QUIT:
            pygame.quit()
            sys.exit() 
        elif event.type ==MOUSEBUTTONDOWN:
            z=1
        elif event.type ==MOUSEBUTTONUP:
            z=0
        if z==1:
            if brush1.get_rect(center=pos1).collidepoint(pygame.mouse.get_pos()):
                brush = brush1
            if brush2.get_rect(center=pos2).collidepoint(pygame.mouse.get_pos()):
                brush = brush2
            screen.blit(brush, (x -23.5,y-23.5))
            pygame.display.update()
"
Python Web Scraping: trying to control the output,"import requests

base_url = ""http://www.forexfactory.com/explorerapi.php""
query = {'content': 'positions',
         'do': 'positions_graph_data',
         'limit': '',
         'interval': 'M5',
         'currency': 'AUDUSD'}

r = requests.get(base_url, query)

template = ""Traders Short {currency_code}: {traders_short}\n""
template += ""Traders Long {currency_code}: {traders_long}\n""

for position in r.json()['positions']:
    if not position['hidden']:
        print(template.format(**position))
"
What is the equivalent to R's match() for python Pandas/numpy?,"from pandas import *
left = DataFrame({'url': ['foo.com', 'bar.com', 'foo.com', 'tmp', 'foo.com'], 'action': [0, 1, 0, 2, 4]})
left[""klass""] = NaN
right1 = DataFrame({'url': ['foo.com', 'tmp'], 'klass': [10, 20]})
right2 = DataFrame({'url': ['bar.com'], 'klass': [30]})

left[""klass""] = left.klass.combine_first(right1.set_index('url').klass[left.url].reset_index(drop=True))
left[""klass""] = left.klass.combine_first(right2.set_index('url').klass[left.url].reset_index(drop=True))

print left
"
Not able to parse html using lxml Xpath parser,"import urllib2
html = urllib2.urlopen(""http://www.amazon.co.uk/product-reviews/B00143ZBHY"").read()
from lxml import etree
tree = etree.HTML(html)
r = tree.xpath("".//*[@id='productReviews']/tr/td[1]/div[9]/text()[4]"")
print r[0]
"
Numpy: Get random set of rows from 2D array,">>> A=np.random.randint(5,size=(10,3))
>>> A
array([[1, 3, 0],
       [3, 2, 0],
       [0, 2, 1],
       [1, 1, 4],
       [3, 2, 2],
       [0, 1, 0],
       [1, 3, 1],
       [0, 4, 1],
       [2, 4, 2],
       [3, 3, 1]])
>>> B=np.random.randint(10,size=2)
>>> B
array([7, 6])
>>> A[B,:]
array([[0, 4, 1],
       [1, 3, 1]])
>>> A[np.random.randint(10,size=2),:]
array([[3, 2, 2],
       [0, 2, 1]])
"
Python iterate over two lists simultaneously,">>> a = [1,2,3]
>>> b = [4,5,6]
>>> for x, y in zip(a, b):
...     print x, y
... 
1 4
2 5
3 6
"
Levinson algorithm in python,"import itertools
import numpy as np
from scipy.linalg import toeplitz, det
"
Convert triangle matrix to square (Python | NumPy)?,"out = A.T + A
idx = np.arange(A.shape[0])
out[idx,idx] = A[idx,idx]
"
Nested dictionaries in classes,"from copy import deepcopy
class IncomeVerification(object):

        data = {'IncomeYears': []}
        def __init__(self, income_years):
            for year in income_years:
                new_year = deepcopy(IncomeYear(year).data)
"
how to loop over below statement,"var = 'F12'
sorted(getattr(X_train_num, var).unique())==sorted(getattr(X_test_num, var).unique())
"
Python callback working with functions but not methods,"from functools import partial
setCallback(partial(myObj.callbackFunction), param=""x"")
"
Python: more readable list comprehension,"newlist = list(set(list1).difference(set(list2)))
"
how do I separate each tr in a table in python?,"from BeautifulSoup import BeautifulSoup
import urllib2

pageSource=urllib2.urlopen('http://www.livescore.com/worldcup/tables/').read()

soup = BeautifulSoup(pageSource)
alltables = soup.findAll( ""table"", {""class"":""league-wc table bh""} )

results=[]
for table in alltables:
    rows = table.findAll('tr')
    _table = []
    for tr in rows[1:]:
        _row = []
        cols = tr.findAll('td')
        for td in cols:
            if td.findAll('a'):
                text=td.a.renderContents().strip()
            else:
                text=td.renderContents().strip()
            _row.append(text)
        _table.append(_row)
    results.append(_table)


# print results
index = 1
for table in results:
    for row in table:
        print ','.join([str(index)] + row[1:])
        index += 1
"
Having issues with re.findall,">>> import re
>>> content = """"""
... <title>
...
...
... xxxxxxx
...
...
... </title>
... """"""
>>> title = re.findall('<title>(.*?)</title>', content, re.S)
>>> title
['\n\n\nxxxxxxx\n\n\n']
>>> title[0].strip()
'xxxxxxx'
>>>
"
New Python Gmail API - Only Retrieve Messages from Yesterday,"from datetime import date, timedelta

today = date.today()
yesterday = today - timedelta(1)

# do your setup...

user_id = 'user email address'

# Dates have to formatted in YYYY/MM/DD format for gmail
query = ""before: {0} after: {1}"".format(today.strftime('%Y/%m/%d'),
                                        yesterday.strftime('%Y/%m/%d'))

response = service.users().messages().list(userId=user_id,
                                           q=query).execute()
# Process the response for messages...
"
"Subtract List B from List A, but keeping the List A index and using difflib string similarity","from fuzzywuzzy import fuzz

max_ratio = 90

c = [i for i, v in enumerate(a) 
     if not any(map(lambda x: fuzz.ratio(v, x)>=max_ratio, b))]
"
get some words sorted by occurrence and some words should be ignored from a string,"ignore = {""a"",""of"",""the"",""an""}

from collections import Counter
cnt = Counter(word for line in text.lower()
              for word in line.split() if word not in ignore)
"
Using argparse with a specified acceptable option,"parser.add_argument('-m','--mode', type=str, required=True, choices=['add', 'del'])
"
How to convert a list to dict using python,"{item[0]: item[1:] for item in inputlist}
"
read a single character from the user,sys.stdin.read(1)
Updating GUI elements in MultiThreaded PyQT,"import sys
import urllib2

from PyQt4 import QtCore, QtGui


class DownloadThread(QtCore.QThread):

    data_downloaded = QtCore.pyqtSignal(object)

    def __init__(self, url):
        QtCore.QThread.__init__(self)
        self.url = url

    def run(self):
        info = urllib2.urlopen(self.url).info()
        self.data_downloaded.emit('%s\n%s' % (self.url, info))


class MainWindow(QtGui.QWidget):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.list_widget = QtGui.QListWidget()
        self.button = QtGui.QPushButton(""Start"")
        self.button.clicked.connect(self.start_download)
        layout = QtGui.QVBoxLayout()
        layout.addWidget(self.button)
        layout.addWidget(self.list_widget)
        self.setLayout(layout)

    def start_download(self):
        urls = ['http://google.com', 'http://twitter.com', 'http://yandex.ru',
                'http://stackoverflow.com/', 'http://www.youtube.com/']
        self.threads = []
        for url in urls:
            downloader = DownloadThread(url)
            downloader.data_downloaded.connect(self.on_data_ready)
            self.threads.append(downloader)
            downloader.start()

    def on_data_ready(self, data):
        print data
        self.list_widget.addItem(unicode(data))


if __name__ == ""__main__"":
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.resize(640, 480)
    window.show()
    sys.exit(app.exec_())
"
python read from shell command output,"#!/bin/sh
while sleep 1s
do
    date
done
"
BeautifulSoup: How do I extract all the <li>s from a list of <ul>s that contains some nested <ul>s?,"for ul in uls:
    for li in ul.findAll('li'):
        print(li)
"
How to do a deepequals on a object in python,"class Test():
    def __init__(self):
        self.value_1 = 42
    def __eq__(self, other):
        return self.__dict__ == other.__dict__
"
Adding ASCII Values together. Jython/Python,"word = 'COMPUTER'
SUM = 0
for char in word:
    value = ord(char)
    SUM += value

print SUM
"
Using Python + BeautifulSoup to pick up text in a table on webpage,"from bs4 import BeautifulSoup

data = """"""
<TR class=""odd"">
    <TD>
        <TABLE class=""zp"">
            <TBODY>
                <TR>
                    <TD>
                        <SPAN>
                            Expiry Date
                        </SPAN>
                        2016
                    </TD>
                </TR>
            </TBODY>
        </TABLE>
    </TD>
    <TD>&nbsp;</TD>
    <TD>&nbsp;</TD>
</TR>
""""""

soup = BeautifulSoup(data)
span = soup.select('tr.odd table.zp > tbody > tr > td > span')[0]
print span.next_sibling.strip()  # prints 2016
"
Setting Yaxis in Matplotlib using Pandas,"fig, axs = plt.subplots(1,3,figsize=(10,4), subplot_kw={'ylim': (100000,500000)})

df2260.plot(ax=axs[0])
df2260.plot(ax=axs[1])
etc...
"
Howto do python command-line autocompletion but NOT only at the beginning of a string,"#!/usr/bin/env python

import readline

values = ['Paul Eden <paul@domain.com>', 
          'Eden Jones <ejones@domain.com>', 
          'Somebody Else <somebody@domain.com>']
completions = {}

def completer(text, state):
    try:
        matches = completions[text]
    except KeyError:
        matches = [value for value in values
                   if text.upper() in value.upper()]
        completions[text] = matches
    try:
        return matches[state]
    except IndexError:
        return None

readline.set_completer(completer)
readline.parse_and_bind('tab: menu-complete')

while 1:
    a = raw_input('> ')
    print 'said:', a
"
"Calling a method of a class, the classname is a variable",">>> def getMethod(module, cls, method):
...     return getattr(getattr(__import__(module), cls), method)
... 
>>> getMethod('sys', 'stdin', 'write')
<built-in method write of file object at 0x7fcd518fa0c0>
"
Python - Parse strings with variable repeating substring,">>> import re
>>> s = '030421-1,2-001 & 030421-1-002,030421-1,2,3-002, 030421-1-003'
>>> it = re.finditer(r'(\b\d{6}-)(\d(?:,\d)*)(-\d{3})\b', s)
>>> for m in it:
    a, b, c = m.groups()
    for x in b.split(','):
        print a + x + c
...         
030421-1-001
030421-2-001
030421-1-002
030421-1-002
030421-2-002
030421-3-002
030421-1-003
"
Python- Key from dict on user input eval. Send to overloaded operator function,"import re
import operator

operators = {""*"": operator.mul,
             ""+"": operator.add,
             ""-"": operator.sub,
             ""/"": operator.truediv} # add or delete from this dict as desired

re_splitters = re.compile('|'.join([re.escape(splitter) for splitter in operators.keys()])

user_input = input(""Here's a prompt! "")
Alice, Bob = map(net_dict.get, re_splitters.split(user_input))
# this may give you errors if you have a poorly formed user input. Catch and handle
# those errors as appropriate

action = re_splitters.search(user_input).group(0)

result = operators[action](Alice, Bob)
"
"Memory-Mapping Slows Down Over Time, Alternatives?","import os, random, time

bdir = '/hdd/backup/'
fns = os.listdir(bdir)

while True:
  fn = random.choice(fns)
  if not fn.startswith(""duplicity-full.""):
    continue
  ts = time.time()
  with open(bdir+fn, 'rb') as f:
    c = f.read()
  print ""MB/s: %.1f"" %(len(c)/(1000000*(time.time()-ts)))
"
subprocess.Popen in Threads,"for thread in threads:
    thread.start()
    thread.join()
"
Is there any way to create column header in csv file instead of row headers using python,"import csv

out_file = 'output.csv'
header_names = [""Test Number"", ""result"", ""output_value"",""duration_of_test""]

data = [[1, 5, 10, 20], [2, 6, 20, 25], [3, 7, 8, 15]]
data.insert(0, header_names)

with open(out_file, 'wb') as f_output:
    csv_output = csv.writer(f_output)
    csv_output.writerows(zip(*data))
"
Adding a column of zeroes to a csr_matrix,"import scipy.sparse as sps

a = sps.rand(10000, 10000, density=0.01, format='csr')

In [19]: %timeit sps.csr_matrix((a.data, a.indices, a.indptr),
...                             shape=(10000, 10020), copy=True)
100 loops, best of 3: 6.26 ms per loop

In [20]: %timeit sps.csr_matrix((a.data, a.indices, a.indptr),
...                             shape=(10000, 10020), copy=False)
10000 loops, best of 3: 47.3 us per loop

In [21]: %timeit sps.csr_matrix((a.data, a.indices, a.indptr),
...                             shape=(10000, 10020))
10000 loops, best of 3: 48.2 us per loop
"
Python opening a File within a Zip File,"zf.extract(filename, path)
"
KL-Divergence of two GMMs,"def gmm_kl(gmm_p, gmm_q, n_samples=10**5):
    X = gmm_p.sample(n_samples)
    log_p_X, _ = gmm_p.score_samples(X)
    log_q_X, _ = gmm_q.score_samples(X)
    return log_p_X.mean() - log_q_X.mean()
"
Convert an int list into an int number,">>> number = int(''.join(str(number) for number in numbers))
"
Removing repetitive lists in a list of list,">>> [list(list(y) for y in el) 
        for el in set([tuple(tuple(x) for x in el) for el in my_list])]

[[[26, 28, 80.0], [25, 40, 80.0]],
 [[10, 12, 80.0]],
 [[40, 42, 80.0], [40, 41, 80.0]],
 [[44, 45, 80.0]],
 [[5, 10, 80.0], [6, 9, 80.0], [5, 8, 80.0]],
 [[22, 24, 80.0]],
 [[14, 16, 80.0], [13, 20, 81.0]],
 [[2, 5, 71.1], [1, 3, 70.0]]]
"
Remove the first character of a string,"s = "":dfa:sif:e""
print s[1:]
"
Python multi-line expressions and stack trace,"import traceback
import inspect
import gc

def giveupthefunc(frame):
    code  = frame.f_code
    globs = frame.f_globals
    functype = type(lambda: 0)
    funcs = []
    for func in gc.get_referrers(code):
        if type(func) is functype:
            if getattr(func, ""func_code"", None) is code:
                if getattr(func, ""func_globals"", None) is globs:
                    funcs.append(func)
                    if len(funcs) > 1:
                        return None
    return funcs[0] if funcs else None


def AssertTrue(expr, reason=None):
    print traceback.format_stack()[-2]
    frame = inspect.currentframe().f_back
    func = giveupthefunc(frame)
    if func:
        source = inspect.getsourcelines(func)
        i = source[1]
        for line in source[0]:
            print i, "":"", line,
            i += 1



def my_fun():
    AssertTrue(1 == 2,
             reason='One is not equal to two')

my_fun()
"
How to Parse an orderedDict?,"your_ordered_dict['clicks__c']
"
Finding minimum value of word from a lot of files in python?,"def _argparse():
    import argparse

    def positive_int(s):
        v = int(s)
        if v < 1:
            raise argparse.ArgumentTypeError('{:r} must be a positive integer'.format(s))
        return v

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=""""""Filter text files and write min value.

    Performs these operations on the text files in supplied `filedir`:

    1. In each file, identify lines starting with the matching `maxprefix`
       which do *not* contain the maximum value for that prefix in that file.
    2. DESTRUCTIVELY REWRITE each file with lines found in step 1 removed!
    3. Write the minimum value (for all lines in all files) to `outputfile`.
    """""")
    parser.add_argument('filedir',
        help=""Directory containg the text files to process. WILL REWRITE FILES!"")
    parser.add_argument('maxprefix', nargs=""?"", default=""ENSG"", 
        help=""Line prefix which should have values less than max value removed in each file"")
    parser.add_argument('outputfile', nargs=""?"", default=""output.txt"",
        help=""File in which to write min value found. WILL REWRITE FILES!"")
    parser.add_argument('-p', '--parallel', metavar=""N"", nargs=""?"", type=positive_int, const=10,
        help=""Process files in parallel, with N workers. Default is to process a file at a time."")
    return parser.parse_args()

if __name__ == '__main__':
    args = _argparse()
    fileglob = os.path.join(args.filedir, '*.txt')
    prefix = args.maxprefix
    outputfile = args.outputfile
    if args.parallel:
        multi_main(fileglob, prefix, outputfile, args.parallel)
    else:
        main(fileglob, prefix, outputfile)
"
How to add values to existing columns in a text file (using Python),"import os.path

h = ['Header 1', 'Hea 2', 'Header 3', 'Header    4', 'H 5', 'Header', 'Header 7', 'Header 8']
a = [1, 2, 3, 4, 5, 6, 7, 8]

fileName = 'myFile.txt'

#write header
withHeader = not os.path.isfile(fileName)

f = open(fileName, 'a')
if withHeader:
    print 'Writing header'
    for s in h:
        f.write('%s\t'%s)
    f.write('\n')

#write numbers
for i in range(0, len(a)):
    space = len(h[i])/2;
    n = a[i]
    for c in range(0, space):
        f.write(' ')
    print 'Writing %d'%n
    f.write('%d'%n)
    for c in range(0, space):
        f.write(' ')
    f.write('\t')
f.write('\n')
f.close()
"
Overloading __dict__() on python class,">>> class Foo(object):
...     def __init__(self, *values):
...         self.some_sequence = values
...     def __iter__(self):
...         for key in self.some_sequence:
...             yield (key, 'Value for {}'.format(key))
... 
>>> f = Foo('bar', 'baz', 'eggs', 'ham')
>>> dict(f)
{'baz': 'Value for baz', 'eggs': 'Value for eggs', 'bar': 'Value for bar', 'ham': 'Value for ham'}
"
Extract domain from body of email,"from lxml import html
from urlparse import urlparse
doc = html.fromstring(html_data)
links = doc.cssselect(""a[href]"")
domains = set([])
for link in links:
    href=link.attrib['href']
    parsed=urlparse(href)
    domains.add(parsed.netloc)
print domains
"
Python - sentence to a dictionary,"text = 'dimension implies direction implies measurement implies the more and the less'
sentence_dict = {}
prev = ''
for word in text.split():
    if word not in sentence_dict:
        sentence_dict[word] = []
    sentence_dict[word].append(prev)
    prev = word

print(sentence_dict)
"
binning a dataframe in pandas in Python,"groups.mean().b
"
Accept newline character in python,"text = ''
while True: # change this condition.
    text += input('''Enter the paragraph :''')+'\n' #UPDATED. Appended a \n character.
"
Numerical integration Loop Python,"fn = 'cooltemp.dat'
c_values = loadtxt(fn,unpack=True,usecols=[1])

I=[]
for c in c_values: #can iterate over numpy arrays directly.  No need for `range(len(...))`

    # equation
    #eqn = 2*x*c[n] #This doesn't work, x not defined yet.

    # integrate 
    result,error = integrate.quad(lambda x: 2*c*x, 0, 1)

    I.append(result)

I = array(I)
"
How to do a loop inside of a loop in python,"for b in range(6):
    for a in range(b+1, 7):
        print ""a:"", a, ""b:"", b
"
"Adding two data items in a list comprehension simultaneously, after a mathematical operation","[[x, number / x] for x in range(1, limit + 1) if number % x == 0]
"
Comparing the elements in two JSON dicts and getting the difference as a ratio or percentage,"from collections import Counter,defaultdict

d = [{'condition': 'functional', 'location':'Sydney' }, {'condition':'functional', 'location': 'Adelaide'}, {'condition':'broken', 'location':'Sydney'}]

cities = [j['location'] for j in d]

#initialize data
data = defaultdict(float)
for city in cities:
    data[city]=0
#Count occurrances of a single city as a counter dictionary
counters = Counter((i['location'] for i in d))

#Do the calculation
for i in d:
    if i['condition']== 'functional':
        inc = (counters[i['location']]*100)/len(d)
        data[i['location']]+= float(inc)
    elif i['condition']== 'broken':
        dec = (counters[i['location']]*100)/len(d)
        data[i['location']]-=float(dec)
    else:
        raise Exception(""Error"")


print {k:""{0}%"".format(v) for k,v in data.items()}
"
Python how to preserve HTTP cookies,"import requests
sess = requests.session()
sess.post(""http://somesite.com/someform.php"", data={""username"": ""me"", ""password"": ""pass""})
#Everything after that POST will retain the login session
print sess.get(""http://somesite.com/otherpage.php"").text
"
Matching IP addresses to a list of subnets and then returning the firewall,"import ipaddress

ipsub = {""10.10.10.0/24"": ""Firewall-Denver"", ""10.10.20.0/25"": ""Firewall-NewYork""}
iplist = [""10.10.10.1"",""10.10.10.174"",""10.10.20.126""]

ipfirewall = {}

for i in ipsub:
    for j in iplist:
        if ipaddress.ip_address(j) in ipaddress.ip_network(i):
            ipfirewall[j] = ipsub[i]
"
Insert repeated value across list slices,"bools[e[0]:e[1]+2] = False
"
"Is it possible to transform fnmatch.translate(""**/*.py"") into a semantically correct regex?","def build_re(glob_str):
    opts = re.compile('([.]|[*][*]/|[*]|[?])|(.)')
    out = ''
    for (pattern_match, literal_text) in opts.findall(glob_str):
        if pattern_match == '.':
            out += '[.]'
        elif pattern_match == '**/':
            out += '(?:.*/)?'
        elif pattern_match == '*':
            out += '[^/]*'
        elif pattern_match == '?':
            out += '.'
        elif literal_text:
            out += literal_text
    return out
"
Why is this Python while loop not working?,"row_count = 0
for row in file_reader:
    row_count += 1
    if row_count > 5:
        break
"
"Python: Split, strip, and join in one line",">>> line = 'a: b :c:d:e  :f:gh   '
>>> ','.join(x.strip() for x in line.split(':'))
'a,b,c,d,e,f,gh'
"
How to query current viewport renderer in maya,"import pymel.core as pm
import pymel.core.uitypes as pmui

modelPanelList = []
modelEditorList = pm.lsUI(editors=True)
for myModelPanel in modelEditorList:
    if myModelPanel.find('modelPanel') != -1:
        modelPanelList.append(myModelPanel)

for modelPanel in modelPanelList:    
    if pmui.ModelEditor(modelPanel).getActiveView():
        try:
            # Always better to try in the case of active panel operations
            # as the active panel might not be a viewport.
            print pmui.ModelEditor(modelPanel).getRendererName()
        except Exception as e:
            # Handle exception
            print e
"
how to extend column size for some selected rows and also add additional rows of a 2D array python2.7,"grids = [[1,2,3], [4,5,6,7,8], [10,11,12]]
print grids 

# Will give you : [[1,2,3], [4,5,6,7,8], [10,11,12]]
"
Python 2.5 and Tskill,"import subprocess

def tskill(*args):
    si = subprocess.STARTUPINFO()
    si.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    command = ('tskill',) + args
    rc = subprocess.call(command, startupinfo=si)
    return rc == 0

if tskill('java') and tskill('javaw'):
    #success
"
Processing Large Files in Python [ 1000 GB or More]," from functools import partial

 def read_in_chunks(size_in_bytes):

    s = 'Lets say i have a text file of 1000 GB'
    with open('data.txt', 'r+b') as f:
        prev = ''
        count = 0
        f_read  = partial(f.read, size_in_bytes)
        for text in iter(f_read, ''):
            if not text.endswith('\n'):
                # if file contains a partial line at the end, then don't
                # use it when counting the substring count. 
                text, rest = text.rsplit('\n', 1)
                # pre-pend the previous partial line if any.
                text =  prev + text
                prev = rest
            else:
                # if the text ends with a '\n' then simple pre-pend the
                # previous partial line. 
                text =  prev + text
                prev = ''
            count += text.count(s)
        count += prev.count(s)
        print count
"
python 32 bit float conversion,">>> import struct
>>> struct.unpack('>f', '\x3f\x9a\xec\xb5')[0]
1.2103487253189087
"
Evaluate multiple variables in one 'if' statement?,"if not any((var1, var2, var3, var4)):
"
Creating a dictionary from a text file on python,"with open('test.txt') as f:
    d = {k:[x.strip() for x in v.split(',')] for k,v in (line.split(':') for line in f)}

d
Out[56]: 
{'A': ['B', 'C'],
 'B': ['C', 'D'],
 'C': ['D'],
 'D': ['C'],
 'E': ['F'],
 'F': ['C']}
"
Calculate all unique permutations using nested loops in Python,"for i, el in enumerate(x):
    for j in x[i:]:
        calc_something(el, j)
"
Remove a value from 1D array,"new_array = array[array != 0]        # using only one comparison

new_array = array[np.nonzero(array)] # using np.nonzero

new_array = array[np.where(array)]   # using np.where
"
Magic assign for custom parameters,"func( API(arg1='foo', arg2='bar'), POST(arg1='foo1'), POST(arg2='bar1'))
"
Printing multiple strings on same line in a loop,"for i in range(1, 100, 10): # i = 1, 11, 21, 31, 41,.....
  print(' '.join(['%6d' % getPentagonalNumber(n) for n in range(i, i+10)]))
"
Python: Interpolate array of unknown size into string,"print(infile.read() % tuple(words))
"
Python - using decorator.py to preserve a method docstring,"from functools import update_wrapper
class class_or_instance(object):
    def __init__(self, fn):
        self.fn = fn

    def __get__(self, obj, cls):
        if obj is not None:
            f = lambda *args, **kwds: self.fn(obj, *args, **kwds)
        else:
            f = lambda *args, **kwds: self.fn(cls, *args, **kwds)
        # update the function to have the correct metadata
        update_wrapper(f, self.fn)
        return f

class A(object):
    @class_or_instance
    def func1(self,*args):
        """"""some docstring""""""
        pass
"
Python dictionary merge values and delete previous,"def split(row):
    ret = some_computation(row, split.previous)
    split.previous = row
    return ret
split.previous = None
"
"More Pythonic way to define custom __eq__ method using try, assert, except","class MySlottedClassMeta(type):
    def __init__(cls, name, bases, attrs):
        super(MySlottedClassMeta, cls).__init__(name, bases, attrs)

    def __new__(metacls, name, bases, attrs):
        assert ""__slots__"" in attrs
        attrs[""_ordered_slots""] = tuple(sorted(attrs[""__slots__""]))

        attrs[""__init__""] = create_init(attrs[""__slots__""])
        attrs[""__eq__""] = create_eq()
        attrs[""__str__""] = create_str()

        cls = super(MySlottedClassMeta, metacls).__new__(metacls, name, bases, attrs)
        return cls  

def create_init(slots):
    args = "", "".join(slots)
    assignments = ""\n    "".join(""self.{0} = {0}"".format(attr) for attr in slots)
    init_source = """"""
def __init__(self, {}):
    {}
"""""".format(args, assignments)
    exec(init_source, globals(), None)
    return __init__

def create_eq():
    def __eq__(self, other):
        try:
            same_slots = self._ordered_slots == other._ordered_slots
        except AttributeError:
            return False
        if not same_slots:
            return False
        return all(getattr(self, attr) == getattr(other, attr) 
                for attr in self._ordered_slots)
    return __eq__

def create_str():
    def __str__(self):
        attr_values = "", "".join(""{}={}"".format(s, getattr(self, s)) for s in self.__slots__)
        return ""{}({})"".format(self.__class__.__name__, attr_values)
    return __str__

class MySlottedClassXY(object):
    __slots__ = ['x', 'y']
    __metaclass__ = MySlottedClassMeta

class MySlottedClassYX(object):
    __slots__ = ['y', 'x']
    __metaclass__ = MySlottedClassMeta

xy1 = MySlottedClassXY(x=1,y=2)
xy2 = MySlottedClassXY(1, 2)
yx = MySlottedClassYX(x=1, y=2)
print(xy1.__slots__)
print(yx.__slots__)
assert xy1 == xy1
assert xy1 == xy2
assert xy1 == yx
"
How to generate all possible combinations from all permutations?,"def product_of_permutations(n, k):
    return product(permutations(range(k)), repeat=n)
"
Avoiding code repetition in default arguments in Python,"class FG:
    def __init__(self, accuracy=1e-3, nstep=10):
        self.accuracy = accuracy
        self.nstep = nstep

    def f(self):
        print ('f', self.accuracy, self.nstep)

    def g(self):
        self.f()
        print ('g', self.accuracy, self.nstep)

FG().f()
FG(1e-5).g()
FG(nstep=20).g()
"
Python program that generate a list from a given list according to a mapping,"gen_list = [mapping[i] for i in org_list]
"
GQL - Select all parents where specific child is not in children,"class User(db.Model):
  username = db.StringProperty()

class Group(db.Model):
  users = db.ListProperty(db.Key)
"
Linking Qs to more Qs based on answers the user gives Python,"def new_question(id):
    if id == 1:
        return question1()
    elif id == 2:
        return question2()
    elif id == 3:
        return question3()
    elif id == 4:
        return question4()
    ... (more ids)

def question1():
    guess = input(""Did you drop your phone? "")
    if guess == ""yes"":
        return 2  # next question will be question 2
    else:
        return 3  # next question will be question 3

def question2():
    guess = input(""Did it shatter the screen? "")
    if guess == ""yes"":
        return 4  # next question will be question 4
    else:
        return 5  # next question will be question 5

def question3():
    guess = input(""Did your phone come in contact with water? "")
    if guess == ""yes"":
        return 4  # next question will be question 4
    else:
        return 7  # next question will be question 7

... (more questions)

answer = 1
while answer != 0:
    answer = new_question(answer)
"
Is there a way to find out if A is a submatrix of B?,"def locate_columns(a, b, offset=0):
    """"""Locate `a` as a sublist of `b`.

    Yields all possible lists of `len(a)` indices such that `a` can be read
    from `b` at those indices.
    """"""
    if not a:
        yield []
    else:
        positions = (offset + i for (i, e) in enumerate(b[offset:])
                     if e == a[0])
        for position in positions:
            for tail_cols in locate_columns(a[1:], b, position + 1):
                yield [position] + tail_cols


def locate_submatrix(a, b, offset=0, cols=None):
    """"""Locate `a` as a submatrix of `b`.

    Yields all possible pairs of (row_indices, column_indices) such that
    `a` is the projection of `b` on those indices.
    """"""
    if not a:
        yield [], cols
    else:
        for j, row in enumerate(b[offset:]):
            if cols:
                if all(e == f for e, f in zip(a[0], [row[c] for c in cols])):
                    for r, c in locate_submatrix(a[1:], b, offset + j + 1, cols):
                        yield [offset + j] + r, c
            else:
                for cols in locate_columns(a[0], row):
                    for r, c in locate_submatrix(a[1:], b, offset + j + 1, cols):
                        yield [offset + j] + r, c

B = [[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15], [16,17,18,19,20]]
A = [[6,8], [16,18]]

for loc in locate_submatrix(A, B):
    print loc
"
using listctrl in notebook wxPython,"def AddList(self, evt):
    # PageOne -> Notebook -> Panel -> MyFrame ( 3x GetParent() )
    self.GetParent().GetParent().GetParent().SecondFrame.list1.InsertStringItem(0,'Hello')
"
python map/reduce: emit multiple keys values from single map lambda,"In [44]: sum(map(lambda x:[int(c) for c in str(x)], somedata), [])
Out[44]: [1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5]
"
Get related dictionaries from lists,"from itertools import product

res = [A, B for A, B in product(ListA, ListB) if ...]
"
How to sort like values in Python,"from itertools import groupby

L = [2, 2, 3, 4, 4, 10]

L.sort()
for key, iterator in groupby(L):
    print key, list(iterator)
"
Python File Transversal,"def traverse(rootdir):
    names = []
    dirs, files = [], []
    for filename in os.listdir(rootdir):
        filepath = os.path.join(rootdir, filename)
        if os.path.isdir(filepath):
            names.append([filename, traverse(filepath)])
        else:
            names.append(filename)
    return sorted(names, key=lambda x: (0, x[0]) if isinstance(x, list) else (1, x))
"
Matching urls in html link elements using regex,">>> reg = '<(\w+)\s[^<>]*?href=[\'""]([\w$-_.+!*\'\(\),%\/:#=?~\[\]!&@;]*?)[\'""].*?>((.+?)</\1>)?'
... 
>>> re.findall(reg, d)
[('link', 'http://blah.net/message/new/?stopemails.aspx?id=5A42FDF5', '', ''), 
('a', 'http://blah.net/message/new/', '', '')]
"
Django: check if an image exists at some particular url,">>> import httplib
>>> conn = httplib.HTTPConnection(""ubuntu.icafebusiness.com"")
>>> conn.request(""HEAD"", ""/images/ubuntugui2.jpg"")
>>> res = conn.getresponse()
>>> print res.getheaders()
[('content-length', '78603'), ('accept-ranges', 'bytes'), ('server', 'Apache'), ('last-modified', 'Sat, 16 Aug 2008 01:36:17 GMT'), ('etag', '""1fb8277-1330b-45489c3ad2640""'), ('date', 'Sat, 30 Jun 2012 08:55:46 GMT'), ('content-type', 'image/jpeg')]
"
Splitting lines in a file into string and hex and do operations on the hex values,"import re

expression = ""(?P<id>\w+?)_INIT\s*?=.*?'h(?P<hexValue>[0-9a-fA-F]*)""
regex = re.compile(expression)

def getIdAndValueFromInitLine(line):
  mm = regex.search(line)
  if mm == None:
    return None # Not the ..._INIT parameter or line was empty or other mismatch happened
  else:
    return (mm.groupdict()[""id""], ""0x"" + mm.groupdict()[""hexValue""])
"
Extract dictionary value from column in data frame,feature3 = [d.get('Feature3') for d in df.dic]
Parsing hh:mm in Python,">>> s = '02:40'
>>> int(s[:-3]) * 60 + int(s[-2:])
160
"
Python: scraping results of webpage of which results are generated server-side,"from bs4 import BeautifulSoup
from selenium import webdriver

url = ""http://example.com/""

browser = webdriver.Firefox()
browser.get(url)
page = BeautifulSoup(browser.page_source, ""lxml"")

# Let's find some tables and then print all their rows
for table in page(""table""):
    for row in table(""tr""):
        print(row)
"
Clear selected list item (so there's no selected list item) in Python/PySide,"def on_list_ItemSelectionChanged(self):
    if self.list.selectedItems():
        self.ui.actionDelete_Task.setEnabled(True)
    else:
        self.ui.actionDelete_Task.setEnabled(False)
"
"Python, assign function to variable, change optional argument's value","
from functools import partial

cube = partial(power, pow=3)
"
Preserving Column Order - Python Pandas and Column Concat,"df.to_csv('Result.csv', index=False, sep=' ')"
Check boolean from another function,"x = 0

def functionA(x):
    if x is 0:
        return True
    else:
        return False

def functionB(bool):
    print bool
    if bool is True:
        print ""Halleluhja""

bool = functionA(x)
functionB(bool)

print x, bool
"
How can I do really cheap command line parsing in Python?,"from sys import argv
quiet = '-d' in argv # True if '-d' in argv else False
"
"Why doesn't if, elif or else work with .lower() in Python?","month.lower() == 'march'
"
How to create a random multidimensional array from existing variables,"import random

def add(grid, char, count):
    while count:
        row = random.randrange(len(grid))
        column = random.randrange(len(grid[0]))
        if world[row][column] == 'g':
            world[row][column] = char
            count -= 1
"
Element to Element addition of two lists in python,"from itertools import chain
l2 = numpy.array(list2)
print chain(*[l2+i for i in list1])
"
Check if list contains another list in python,">>> photos = [[""Trip to Thailand"", ""IMG_001.jpg""], [""Latvia 2010"", ""IMG_001.jpg""]]
>>> photo = [""Latvia 2010"", ""IMG_001.jpg""]
>>> photo in photos
True
"
Renaming multiple files in python,">>> re.sub(r'.{20}(.mkv)', r'\1', 'unique12345678901234567890.mkv')
'unique.mkv'
"
How to use '*' in Mongodb?,"name = {'$exists': True} if name == '*' else name
age = {'$exists': True} if age == '*' else age

info = list(db.test.find({'name': name, 'age': age}))
"
How to expand environment variable in python while escaping special characters?,"# untested
def json_expandvars(o):
    if isinstance(o, dict):
       return {json_expandvars(k): json_expandvars(v) for k, v in o.items()}
    elif isinstance(o, list):
       return [json_expandvars(v) for v in o]
    elif isinstance(o, basestring):
       return os.path.expandvars(o)
    else:
       return o

json_dict = json_expandvars(json.loads(json_str))
"
How to realize a very big int matrix with 5 string columns in numpy (python3)?,"In [77]: np.savetxt('test.txt',A,fmt='%s')

In [78]: cat test.txt
[0 0 0 0 0 0 0 0 0 0] ['ones' 'ones' 'ones']
[0 0 0 0 0 0 0 0 0 0] ['ones' 'ones' 'ones']
...
"
How do I extract table data in pairs using BeautifulSoup?,[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]
Rolling mean with customized window with Pandas,"data_mean = pd.rolling_mean(data, window=5).shift(-2)
"
"how to use python list comprehensions replace the function invoke inside of ""for"" stmt?",">>> results = ( foo() for _ in xrange(10) )
>>> results
<generator object <genexpr> at 0x10041f960>
>>> list(results)
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo
[None, None, None, None, None, None, None, None, None, None]
>>> 
"
how to download multiple file simultaneously and join them in python?,"class ThreadPool(object):
    def __init__(self, max_workers):
        self.queue = queue.Queue()
        self.workers = [threading.Thread(target=self._worker) for _ in range(max_workers)]
    def start(self):
        for worker in self.workers:
            worker.start()
    def stop(self):
        for _ in range(self.workers):
            self.queue.put(None)
        for worker in self.workers:
            worker.join()
    def submit(self, job):
        self.queue.put(job)
    def _worker(self):
        while True:
            job = self.queue.get()
            if job is None:
                break
            job()
"
Searching for value in dictionary and return a new dictionary with the corresponding key and value,"d={}
for key,value in preschool_kids.items():
    if value[0] == color:
        d[key] = value # right way to assign a value to a key
print(d) # this prints the entire dictionary, and not the dictionary at each step
"
Getting the axis labels in matplotlib not to go over the boundaries,"import numpy as np
import matplotlib.pyplot as plt

latexTickSize = 18; latexLabelSize = 26

plt.xlabel('$t$', fontsize=latexLabelSize)    
plt.xticks(np.linspace(-np.pi, np.pi, 5),\
['$-\pi$','$-\pi/2$','$0$','$\pi/2$','$\pi$'], fontsize=latexTickSize)
plt.xlim([-np.pi, np.pi])
plt.ylabel('$x(t)$', fontsize=latexLabelSize)
plt.yticks(np.linspace(-1, 1, 5), fontsize=18)
plt.ylim(-1.25, 1.25)

t = np.linspace(-np.pi, np.pi, 100)
plt.tight_layout()
plt.plot(t, np.cos(t))import numpy as np
"
How to directly set RGB/RGBA colors in mayavi,"#create direct grid as 256**3 x 4 array 
def create_8bit_rgb_lut():
    xl = numpy.mgrid[0:256, 0:256, 0:256]
    lut = numpy.vstack((xl[0].reshape(1, 256**3),
                        xl[1].reshape(1, 256**3),
                        xl[2].reshape(1, 256**3),
                        255 * numpy.ones((1, 256**3)))).T
    return lut.astype('int32')

# indexing function to above grid
def rgb_2_scalar_idx(r, g, b):
    return 256**2 *r + 256 * g + b

#N x 3 colors
colors = numpy.array([_.color for _ in points])

#N scalars
scalars = numpy.zeros((colors.shape[0],))

for (kp_idx, kp_c) in enumerate(colors):
    scalars[kp_idx] = rgb_2_scalar_idx(kp_c[0], kp_c[1], kp_c[2])

rgb_lut = create_8bit_rgb_lut()

points_mlab = mayavi.mlab.points3d(x, y, z
                                   keypoint_scalars,
                                   mode = 'point')

#magic to modify lookup table 
points_mlab.module_manager.scalar_lut_manager.lut._vtk_obj.SetTableRange(0, rgb_lut.shape[0])
points_mlab.module_manager.scalar_lut_manager.lut.number_of_colors = rgb_lut.shape[0]
points_mlab.module_manager.scalar_lut_manager.lut.table = rgb_lut
"
recursively (or non-recursively) iterating through python array and get the elements,"def flatten(lst):
    if not lst:
        return
    elif not isinstance(lst, list):
        yield lst
    else:
        for e in flatten(lst[0]):
            yield e
        for e in flatten(lst[1:]):
            yield e

list(flatten(ls1))
=> [1, '1.0.1', 1, '2.0.1', 1, '3.0.11', 1, '4.0.11']
"
BeautifulSoup - Handing of cases where variable.find( ).string returns empty,"for item in fulllist:
    span = item.find(""span"", class_=""modelYearSort"")
    if span:
        item_print = span.string
        item_print=item_print + ""|"" + item.find(""span"", class_=""mmtSort"").string
        seller_phone=item.find(""span"", class_=""seller-phone"")
        print(seller_phone)
        # item_print=item_print + ""|"" + item.find(""span"", class_=""seller-phone"").string
        item_print=item_print + ""|"" + item.find(""span"", class_=""priceSort"").string
        item_print=item_print + ""|"" + item.find(""span"", class_=""milesSort"").string
        print(item_print)
    else:
        continue #It's empty, go on to the next loop.
"
Matplotlib: Move ticklabels between ticks,"import matplotlib.pyplot as plt
import numpy as np

data = np.random.random((10,10))
labels = 'abcdefghij'

fig, ax = plt.subplots()
im = ax.imshow(data, cmap='gray', interpolation='none')
fig.colorbar(im)

# Set the major ticks at the centers and minor tick at the edges
locs = np.arange(len(labels))
for axis in [ax.xaxis, ax.yaxis]:
    axis.set_ticks(locs + 0.5, minor=True)
    axis.set(ticks=locs, ticklabels=labels)

# Turn on the grid for the minor ticks
ax.grid(True, which='minor')

plt.show()
"
Sum up previous values of a column,"lB = []
for i in range(len(l)):
    lStuffAbove = l[0:i+1]
    lB.append(sum(lStuffAbove))
"
Python re.findall matches last the last match instead of the first,"^(.*)&&&&.*?@([A-Za-z0-9([A-Za-z0-9_]+)
"
Calculate the duration of a state with a pandas Dataframe,"# set things up
freq = ""1h""
df = pd.DataFrame(
    [2,2,2,1,1,1,2,2,2,3,2,2,1,1],
    index=pd.date_range('00:00', freq=freq, periods=14)
)

# add a column saying if a row belongs to the same state as the one before it
df[""is_first""] = pd.rolling_apply(df, 2, lambda x: x[0] != x[1]).fillna(1)

# the cumulative sum - each ""clump"" gets its own integer id
df[""value_group""] = df[""is_first""].cumsum()

# get the rows corresponding to states beginning
start = df.groupby(""value_group"", as_index=False).nth(0)
# get the rows corresponding to states ending
end = df.groupby(""value_group"", as_index=False).nth(-1)

# put the timestamp indexes of the ""first"" and ""last"" state measurements into
# their own data frame
start_end = pd.DataFrame(
    {
        ""start"": start.index,
        # add freq to get when the state ended
        ""end"": end.index + pd.Timedelta(freq),
        ""value"": start[0]
    }
)
# convert timedeltas to seconds (float)
start_end[""duration""] = (
    (start_end[""end""] - start_end[""start""]).apply(float) / 1e9
)
# get average state length and counts
agg = start_end.groupby(""value"").agg([""mean"", ""count""])[""duration""]
agg[""mean""] = agg[""mean""] / (60 * 60)
"
str performance in python,">>> Timer('str(x)', 'x=100').timeit()
0.25641703605651855
>>> Timer('""%s"" % x', 'x=100').timeit()
0.2169809341430664
"
Calling load functions in correct order from constructors,"class Super(object):
    def __init__(self):
        print 'init super'
        if self.__class__ == Super:
            self.load()
    def load(self):
        print 'load super'

class Sub(Super):
    def __init__(self):
        # always do super first in init
        super(Sub, self).__init__()
        print 'init sub'
        self.load()
    def load(self):
        # load is essentially an extension of init
        # so you still need to call super first
        super(Sub, self).load()
        print 'load sub'

sub = Sub()
"
How to make a test function using pytest,"def test_added():
    assert added(4, 6, 7) == (13, 11, 10)
"
How can I copy a Python string?,">>> a = 'hello'
>>> b = (a + '.')[:-1]
>>> id(a), id(b)
(4435312528, 4435312432)
"
wxPython Custom Dialog loading incorrectly,"import wx

class ForgotPass(wx.Dialog):

    def __init__(self, *args, **kwargs):
        super(ForgotPass, self).__init__(*args, **kwargs) 

        self.InitUI()

    def InitUI(self):
        self.panel = wx.Panel(self)
        self.sizer = wx.BoxSizer(wx.VERTICAL)

        self.title = wx.StaticText(self.panel, label='Forgotten Your Password?', style=wx.ALIGN_CENTER)
        self.title.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, underline=True))  # Underlined & Bold
        self.sizer.Add(self.title)

        self.text = wx.StaticText(self.panel, label=""Contact 'TheHiguty' via ingame PM to have your password reset!"", style=wx.ALIGN_CENTER)
        self.sizer.Add(self.text)

        self.SetSizer(self.sizer)
        self.sizer.Fit(self.panel)
        self.SetSize((400, 150))
        self.SetTitle('Forgotten Your Password')
        self.Center()
        self.Show(True)

def main():
    app = wx.App(False)
    ForgotPass(None)
    app.MainLoop()

if __name__ == ""__main__"":
    main()
"
Outputting Highest/Average Score From List Of 3 (Value) For Each Student (Key) In A Dictionary Sorted From Highest To Lowest?,"sortC = [(n, float(sum(s))/len(s)) for n,s in scores.items()]
sortC.sort(key=lambda x: x[1], reverse=True)
for name, avgScore in sortC:
    print(name, avgScore)
"
Sum of colorvalues of an image,"wts = [.25, .25, .5]    # in order: R, G, B
tot = (arr*wts).sum(-1) # now blue has twice the weight of red and green
"
How to skip a positional argument in Python Argparse,"if args.toolname == 'counter':
    print 'Running counter'
else:
    print 'Running fasta2bed'
"
Python 3.3 pyqtgraph can't plot points,"pg.plot([1,2,3,4], [1,2,3,4], pen=None, symbol='o')
"
How to split each line from file using python?,"from datetime import datetime
from csv import reader

with open('onlyOnce.txt', 'r') as fp:
    for f_time, sec_time, dte in filter(None, reader(fp, delimiter=""_"")):
        check_stime = f_time.split("":"")
        stask_hour= int(check_stime[0])
        stask_minutes = int(check_stime[1])
        check_etime = sec_time.split("":"")
        etask_hour = int(check_etime[0])
        etask_minutes = int(check_etime[1])

        # check every minute if current information = desired information
        now = datetime.now()
        hour_min_sec = now.hour, now.minute, now.second

        if now.strftime(""%Y-%d-%m"") == dte and (stask_hour, stask_minutes, 0) <= hour_min_sec <= (etask_hour, etask_minutes, 0):
            print(""this line in range time: "" + f_time)
        else:
            print("""")
"
Iterate over list of values dictionary,">>> lst = list(data.items())
>>> lst
[('a', [95, 93, 90]), ('b', [643, 611, 610])]
>>> lst1 = list(zip(*[i[1] for i in lst]))
>>> lst1
[(95, 643), (93, 611), (90, 610)]
>>> newlist = []
>>> for x in lst1:
...     d = {}
...     for i,y in enumerate(lst):
...             d[y[0]] = x[i]
...     newlist.append(d)
...
>>> newlist
[{'a': 95, 'b': 643}, {'a': 93, 'b': 611}, {'a': 90, 'b': 610}]
"
converting binary to utf-8 in python,">>> '{:b}'.format(int(u'نقاب'.encode('utf-8').encode('hex'), 16))
1: '1101100110000110110110011000001011011000101001111101100010101000'
"
Using .join() in Python,"result = ', '.join(a[:-1]) + ' and ' + a[-1]
"
Getting selected text (python-gtk),"#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk


class MyApp (object):
    def __init__(self):
        self.window=gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect(""delete_event"", gtk.main_quit )
        self.entry = gtk.Entry()
        self.window.selection_convert(""PRIMARY"", ""STRING"")
        self.window.connect(""selection_received"", self.selection_received)
        self.window.add(self.entry)
        self.window.show_all()
    # Signal handler called when the selections owner returns the data
    def selection_received(self, widget, selection_data, data):
        print 'selection_data.type=%r'%selection_data.type
        # Make sure we got the data in the expected form
        if str(selection_data.type) == ""STRING"":
            self.entry.set_text(""Selected Text is : %s""  % selection_data.get_text())

        elif str(selection_data.type) == ""ATOM"":
            # Print out the target list we received
            targets = selection_data.get_targets()
            for target in targets:
                name = str(target)
                if name != None:
                    self.entry.set_text(""%s"" % name)
                else:
                    self.entry.set_text(""(bad target)"")
        else:
            self.entry.set_text(""Selection was not returned as \""STRING\"" or \""ATOM\""!"")

        return False
    def main(self):
        gtk.main()

app=MyApp()
app.main()
"
how can I get the position of the nonzero values in a numpy array?,">>> a = [(0, 1, 2), (3, 4, 5)]
>>> zip(a)
[((0, 1, 2),), ((3, 4, 5),)]
>>> zip(a[0], a[1])
[(0, 3), (1, 4), (2, 5)]
>>> zip(*a)
[(0, 3), (1, 4), (2, 5)]
"
How to create a timer on python,"from timeit import default_timer

start = default_timer()

# do stuff

duration = default_timer() - start
"
Take screenshot in Python on Mac OS X,os.system('screencapture screen.png')
An idiomatic way to construct a tree in python from a list of locations / namespaces?,"#! /usr/bin/env python
import pprint

from_this = [
        (""global.module1.submodule1.function1"", ""some data""),
        (""global.module1.func1"", ""other data""),
        (""global.module1.submodule1.func2"", ""data again""),
        (""global.module1.submodule1.func3"", ""data""),
        (""global.module2.func3"", ""data""),
        (""global.module4.submodule1.func3"", ""data""),
        (""global.module4.submodule2.func4"", ""daata""),
        (""global.module4.submodule2"", ""da_ta"")
]


def make_node():
    d = {
         ""name"": """",
         ""data"": """",
         ""children"": []
         }
    return d

path_sep = "".""
tree = make_node()
tree[""name""] = ""root""
for path, data in from_this:
    current = tree
    path_list = path.split(path_sep)
    for name in path_list:
        next_node = None
        for child in current[""children""]:
            if child[""name""] == name:
                next_node = child
                break
        if next_node is None:
            n = make_node()
            n[""name""] = name
            current[""children""].append(n)
            current = n
        else:
            current = next_node
    current[""data""] = data
pprint.pprint(tree, indent=1)
"
The best way to filter a dictionary in Python,"d = {k: v for k, v in list(d.items()) if v > 0}"
Python: Strip Everything but Numbers,">>> import re
>>> numbers = re.compile('\d+(?:\.\d+)?')
>>> numbers.findall(""It took 2.3 seconds"")
['2.3']
"
Change calculator nickels pennies,"def corect_change(nickles, pennies, summ):
    i = 0
    while i <= nickles:
        if summ - (i * 5) < 5:
            break
        i += 1
    j = 0
    while j <= pennies:
        if summ == (i * 5) + j:
            break
        j += 1
    return summ == (i * 5) + j
"
How to do a binary search for a range of the same value?,"def search(a, x):
    right = 0
    h = len(a)
    while right < h:
        m = (right+h)//2
        if x < a[m]: h = m
        else: 
            right = m+1
    # start binary search for left element only 
    # including elements from 0 to right-1 - much faster!
    left = 0
    h = right - 1
    while left < h:
        m = (left+h)//2
        if x > a[m]: left = m+1
        else: 
            h = m
    return left, right-1

search(daysSick, 5)
(10, 12)

search(daysSick, 2)
(5, 5)
"
What is the most pythonic way to avoid specifying the same value in a string,"""""""hello {name}, how are you {name}, welcome {name}"""""".format(name='john')"
How to randomly replace a string in a list,"import random

some_list=[""-"",""-"",""-"",""-"",""-"",""-"",""-""]

n=2
for i in range(n):
    some_list[random.randrange(0,len(some_list))]=""*""
"
passing arguments to functions in python using argv,"from sys import argv

def operation(name, number, *args):
    print(name , number)

operation(*argv[1:])
"
Getting a specific parent folder with Python,"path = ""/home/user/puppet/modules/impuls-test/templates""
components = path.split(os.sep)
print str.join(os.sep, components[:components.index(""modules"")+2])
"
colliderect() triggers unexpectedly,"class Worm(pygame.sprite.Sprite): # MODIFIED CONTENTS!
    def __init__(self, surface, x, y, length, (seg_width, seg_height)): # REVISED
        self.surface = surface
        self.x = x
        self.y = y
        self.length = length
        self.dir_x = 0
        self.dir_y = -seg_width # REVISED
        self.body = []
        self.crashed = False

        self.rect = pygame.Rect(x,y,seg_width,seg_height) # NEW/REVISED
        self.segment = pygame.Rect(0,0,seg_width,seg_height) # NEW


    def key_event(self, event):
        """""" Handle key events that affect the worm. """"""
        if event.key == pygame.K_UP:
            self.dir_x = 0
            self.dir_y = -self.segment.height # REVISED
        elif event.key == pygame.K_DOWN:
            self.dir_x = 0
            self.dir_y = self.segment.height # REVISED
        elif event.key == pygame.K_LEFT:
            self.dir_x = -self.segment.width # REVISED
            self.dir_y = 0
        elif event.key == pygame.K_RIGHT:
            self.dir_x = self.segment.width # REVISED
            self.dir_y = 0


    def move(self):
        """""" Move the worm. """"""
        self.x += self.dir_x
        self.y += self.dir_y

        self.rect.topleft = self.x, self.y # NEW/MOVED

        if self.rect.collidelist(self.body) != -1: # REVISED
            self.crashed = True
            print ""CRASHED!""

        new_segment = self.segment.copy() # NEW
        self.body.insert(0, new_segment.move(self.x, self.y)) # REVISED

        if len(self.body) > self.length:
            self.body.pop()


    def draw(self): # REVISED
        for SEGMENT in self.body:   # REPLACEMENT
            self.surface.fill((255,255,255), SEGMENT) # REPLACEMENT
"
I need this Substring counting program to return a Tuple,"from re import finditer

def findSubstringMatch(target, key):
    return tuple(m.start() for m in finditer(key, target))
"
Check if something is not in a list,"((2, 3) not in [(2, 7), (7, 3), 'hi'])"
Creating a rect grid in Pygame,"pos = pygame.mouse.get_pos()
for rect in rectangles:
    if rect.collidepoint(pos):
        changecolor(rect)
"
convert hex to decimal,"int('FFFF', 16)"
Does my code prevent directory traversal?,">>> import os.path
>>> os.curdir
'.'
>>> startdir = os.path.abspath(os.curdir)
>>> startdir
'/home/jterrace'
"
How to convert a particular dtype object column's field into column of data frame in pandas,"df1 = pd.DataFrame([x for x in df['page_view_count']]).join(df['_id'])
df1 = df1.sort_index(1)
print df1
                            _id  comments  detailed-rating  detailed-rating2  \
0      568a8c25cac4991645c287ac       NaN                2                 1   
1      568cd22e9e82dfc166d7dff1         1                1                 1   
2      568e5a38b4a797c664143dda       NaN                1                 1   
3      568e5a561ae56e09656bfb99       NaN                1               NaN   
4      568df45a177e30c6487d3600         1                1                 1   

   main-rating  thank-you  
0            2        NaN  
1            1          1  
2            1        NaN  
3            1        NaN  
4            1          1  
"
How can I use matplotlib's mathtext rendering outside of matplotlib in another tk widget?,"import tkinter as tk
from matplotlib.mathtext import math_to_image
from io import BytesIO
from PIL import ImageTk, Image

class Application(tk.Frame):
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.pack()
        self.createWidgets()



    def createWidgets(self):

        #Creating buffer for storing image in memory
        buffer = BytesIO()

        #Writing png image with our rendered greek alpha to buffer
        math_to_image('$\\alpha$', buffer, dpi=1000, format='png')

        #Remoting bufeer to 0, so that we can read from it
        buffer.seek(0)

        # Creating Pillow image object from it
        pimage= Image.open(buffer)

        #Creating PhotoImage object from Pillow image object
        image = ImageTk.PhotoImage(pimage)

        #Creating label with our image
        self.label = tk.Label(self,image=image)

        #Storing reference to our image object so it's not garbage collected,
        # as TkInter doesn't store references by itself
        self.label.img = image

        self.label.pack(side=""bottom"")
        self.QUIT = tk.Button(self, text=""QUIT"", fg=""red"",
                                            command=root.destroy)
        self.QUIT.pack(side=""top"")

root = tk.Tk()
app = Application(master=root)
app.mainloop()
"
Python program that is given a line read from a text file and displays the one number found,"import re

with open('path/to/file.txt') as inf:
    text = inf.read()  # generally bad practice, but...

numbers = re.findall(r""\d+"", text)  # ['95', '90']
for number in numbers:
    print(number)
"
Python statement as method's argument,"class FilesLineCounter(dict):
    def count_file_lines(self, path):
        with open(path) as file:
            self[path] = sum(1 for line in file if line.strip())
"
"Pyspark, perform word count in an RDD comprised of arrays of strings.","corpus.flatMap(lambda doc: [(x, 1) for x in doc.split(' ')]).reduceByKey(add)
"
Python: use string variable as search pattern in regex,"prompt='''\
    Enter a motif to search for it in the sequence 
    (The wildcard character '?' represents any nucleotide in that position, 
     and * represents none or many nucleotides in that position.)
'''
pattern=None
while pattern==None:
    print prompt
    user_input=raw_input('>>> ')
    letterlist = ['A','C','G','T', '?', '*']
    user_input=user_input.upper()
    if len(user_input)>1 and all(c in letterlist for c in user_input):
        pattern=user_input.replace('?', '.').replace('*', '.*?')
    else:
        print 'Bad pattern, please try again'
"
"using python, Search for a text and print next few lines in python","search_string = 'search'
with open('infile.txt', mode='r') as infile:
    for line in infile:
        if search_string in line:
            with open('outfile.txt', mode='a') as outfile:
                outfile.writelines([line, next(infile), next(infile)])
"
Python :getting the count for the adjectives in a string,">>> adjectives = [['awesome', 'amazing'], ['good', 'nice' ]]
>>> counts = Counter(adjective
...                  for group in adjectives
...                  for adjective in group)
>>> counts
Counter({'awesome': 1, 'good': 1, 'amazing': 1, 'nice': 1})
"
Printing the output in Excel,"def sh(dir):   
    a = xlwt.Workbook()
    sheet = a.add_sheet('sheet1')
    n = 0
    for r,d,f in os.walk(dir):
        for files in f:
            if files.endswith("".xml""):
                print files
                dom=parse(os.path.join(r, files))
                name = dom.getElementsByTagName('rev')
                title = dom.getElementsByTagName('title')
                sheet.write(n, 0, files)
                sheet.write(n, 1, title[0].firstChild.nodeValue)
                sheet.write(n, 2, name[0].firstChild.nodeValue)
                n += 1
                print title[0].firstChild.nodeValue
                print name[0].firstChild.nodeValue
    a.save('sha.xls')
"
How to use Jenkins Environment variables in python script,"import os
import re
qualifier = re.sub(r'[-_]+', '', os.environ['BUILD_ID'])[0:12]
"
Create a python function procedurally (specifically the arguments),"def __call__(self, cls):
    def init(cls_self, *args, **kw):
        for param, value in zip(self.params, args):
            if param in kw:
                raise TypeError(""Multiple values for %s""%param)
            kw[param]=value
        unexpected_args = list(set(kw)-set(self.params))
        if unexpected_args:
            raise TypeError(""Unexpected args %s""%unexpected_args)
        missing_args = list(set(self.params)-set(kw))
        if missing_args:
            raise TypeError(""Expected args %s""%missing_args)
        vars(cls_self).update(kw)
    cls.__init__ = init
    return cls
"
performance degradation when switching from pandas column concatenation to using apply on dataframe,"        t0 = time.time()

        listOfObjectAttributeNames = [""col1"",""col2"",""col3""]

        cleaned_data_set = """"
        for i in listOfObjectAttributeNames:
            cleaned_data_set = cleaned_data_set + data_set[i].map(str)

        t1 = time.time()

        print t1 - t0 
"
Variable area threshold for identifying objects - python,"from scipy import ndimage

labels, nshapes = ndimage.label(a)
areas = ndimage.sum(a, labels=labels, index=range(1, nshapes))

idx = np.argmax(areas)
biggest_shape = labels == (idx + 1)
"
Scipy label dilation,"import numpy as np
import scipy.ndimage as ndimage

A = np.array([[0, 0, 0, 0, 0, 0, 0, 0],
              [0, 1, 1, 2, 2, 0, 0, 0],
              [0, 1, 1, 2, 2, 0, 3, 3],
              [0, 0, 0, 0, 0, 0, 3, 3],
              [0, 0, 0, 0, 0, 0, 3, 3],
              [0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0]])

B = ndimage.maximum_filter(A, 3)
B[A != 0] = A[A != 0]

print B
"
Python sorting array according to date,"import re

l = ['',
     'q//Attachments/Swoop_coverletter_311386_20120103.doc',
     'q//Attachments/Swoop_RESUME_311386_20091012.doc',
     'q//Attachments/Swoop_Resume_311386_20100901.doc',
     'q//Attachments/Swoop_reSume_311386_20120103.doc',
     'q//Attachments/Swoop_coverletter_311386_20100901.doc',
     'q//Attachments/Swoop_coverletter_311386_20091012.doc']

def get_date(line):
    pattern = '.*_(\d{8}).doc'
    m = re.match(pattern, line)
    if m:
        return int(m.group(1))
    else:
        return -1 # or do something else with lines that contain no date


print sorted(l, key=get_date, reverse=True)
"
Remove whitespaces and newlines from JSON file,"import json
import sys
from pkgutil import simplegeneric

@simplegeneric
def get_items(obj):
    while False: # no items, a scalar object
        yield None

@get_items.register(dict)
def _(obj):
    return obj.iteritems() # json object

@get_items.register(list)
def _(obj):
    return enumerate(obj) # json array

def strip_whitespace(json_data):
    for key, value in get_items(json_data):
        if hasattr(value, 'strip'): # json string
            json_data[key] = value.strip()
        else:
            strip_whitespace(value) # recursive call


data = json.load(sys.stdin) # read json data from standard input
strip_whitespace(data)
json.dump(data, sys.stdout, indent=2)
"
Validating integers in Python strings,"try:
    if not all( (0 <= int(i) <= 10000) for i in mystring.split() ):
       raise ValueError(""arg!"")
except ValueError:
    print ""Oops, didn't pass""
"
Matching list items to items at the other end of the same list?,"import sys
data = [line.strip() for line in sys.stdin]
"
Python Assignment or Variable binding?,"A. *x = some other value
"
How can I remove all different script tags in BeautifulSoup?,"
td = soup.find(""td"")
td.get_text()
"
Merge pandas DataFrame with MultiIndex,"import pandas as pd
import io

temp=u""""""Date;Time;ID
8/14/2015;3:00;aaa123
8/7/2015;4:00;aaa123
7/15/2015;2:00;aaa123
8/22/2015;7:00;aaa123
8/3/2015;1:00;bbb222
8/8/2015;5:00;bbb222
8/10/2015;7:00;bbb222""""""

df1 = pd.read_csv(io.StringIO(temp), parse_dates=[0],sep="";"")

df1 = df1.sort_values([""Date"", ""Time""])
df1= df1.set_index([""Date"", ""Time""])

print df1
                     ID
Date       Time        
2015-07-15 2:00  aaa123
2015-08-03 1:00  bbb222
2015-08-07 4:00  aaa123
2015-08-08 5:00  bbb222
2015-08-10 7:00  bbb222
2015-08-14 3:00  aaa123
2015-08-22 7:00  aaa123
"
2D array of objects in Python,nodes = [[Node() for j in range(cols)] for i in range(rows)]
"Combine/ ""concatenate"" two variables, one being a user input","costs = {}

for i in range(4):    
    item_name = input(""What do you want to buy? "")
    costs[item_name] = input('Price? ')
"
How to create a new list out of an existing list by removing duplicates and shifting values?,"from collections import defaultdict 
Null = None
list1 = [(12, ""AB""), (12, ""AB""), (12, ""CD""), (13, Null), (13, ""DE""), (13, ""DE"")]

keys = []
for k,v in list1:
    if k not in keys:
        keys.append(k)

intermediate = defaultdict(list)
for k, v  in list1:
    if v not in intermediate[k]:
        intermediate[k].append(v)

list2 = []
for k in keys:
    list2.append([k] + intermediate[k])

print(list2)
"
Re assign a list efficiently,">>> a = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]
>>> zip(*a)
[(1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12)]
"
Merging lists of lists,">>> L1 = [[1, 2], [3, 4], [5, 6, 7]]
>>> L2 =[['a', 'b'], ['c', 'd'], ['e', 'f', 'g']]
>>> [list(zip(a,b)) for a,b in zip(L2, L1)]
[[('a', 1), ('b', 2)], [('c', 3), ('d', 4)], [('e', 5), ('f', 6), ('g', 7)]]
"
Loading datasets from datastore and merge into single dictionary. Resource problem,"GQL_PARTS_BY_PRODUCT = ProductParts.gql('WHERE products = :1')
for product in productData:
    productDict = {}
    typeDict = {}
    productDict['productName'] = product.name

    cache_key = 'productparts_%s' % (slugify(product.key()))
    partData = memcache.get(cache_key)

    if not partData:
        for type in typeData:
            typeDict[type.typeId] = { 'default' : '', 'optional' : [] }

        # here's a new approach that does just ONE datastore query (for each product)
        GQL_PARTS_BY_PRODUCT.bind(product)
        parts = GQL_PARTS_BY_PRODUCT.fetch(1000)
        for part in parts:
            if part.key() in self.defaultParts:
                part_type = 'default'
            else:
                part_type = 'optional'

            for label in labelsForLangCode:
                if label.key() in defaultPart.partLabelList:
                    typeDict[defaultPart.type.typeId][part_type] = label.partLangLabel
        # (end new code)
        memcache.add(cache_key, typeDict, 500)
        partData = memcache.get(cache_key)

    productDict['parts'] = partData    
    productList.append(productDict)
"
Python Mysqldb update operation with variables,"sql = ""UPDATE analysen SET Nummer = %s WHERE Link like %s""
for n in numbers:
    cursor.execute(sql, [n, '%{}%'.format(n)])
"
Trying to find efficient ways to remove headers in fasta files,"from itertools import izip_longest
sequences = []
with open('protein1.fasta', 'r') as fin:
    for header, seq in izip_longest(*[fin]*2):
        sequences.append(seq)
"
Arrays in loops,"import numpy as np

# Generate some x, y data
x, y = np.random(2, 100)

# Create a histogram of x
counts, bins = np.histogram(x, bins=30)

# Return an series of indicies of which bin each x-value falls into
# This will be the same size as x and have values between 0 to len(bins)
idx = np.digitize(x, bins)

# Print the y-values for each bin
for i in range(bins.size):
   y[idx == i]
"
Python - Combine all items in a list into a string,"list_of_strings = ['abc', 'def', 'ghi'] # give a list of strings

new_string = """".join(list_of_strings)   # join them into a new string
"
Pythonic way of comparing all adjacent elements in a list,"for i,j in enumerate(range(1,len(A)):
    #some operation between A[i] and A[j]
"
Extracting keys-values from dictionary,"list(dictionary.keys()) * 3
"
Cleanest way to get a value from a list element,"print(re.search('\\bLOG_ADDR\\s+(\\S+)', line).group(1))"
python make class iterable by returning embedded iterable,"def __iter__(self):
    for item in self._iterable:
        yield item
"
Most elegant way to check if the string is empty,"if (not my_string):
    pass"
Pandas Bad Lines Warning Capture,"import pandas as pd
import csv      

df = pd.read_csv('data.csv', warn_bad_lines=True, error_bad_lines=False)

#compare length of rows by recommended value:
RECOMMENDED = 3

with open('data.csv') as csv_file:
    reader = csv.reader(csv_file, delimiter=',')
    for row in reader:
        if (len(row) != RECOMMENDED):
            print (""Length of row is: %r"" % len(row) )
            print row

#compare length of rows by length of columns in df
lencols = len(df.columns)
print lencols

with open('data.csv') as csv_file:
    reader = csv.reader(csv_file, delimiter=',')
    for row in reader:
        if (len(row) != lencols):
            print (""Length of row is: %r"" % len(row) )
            print row
"
"Difference of two timedelta objects, with timezones","In [43]: [(utcdate, utcoffset, dstoffset, tzabbrev) for utcdate, (utcoffset, dstoffset, tzabbrev) in zip(tzone._utc_transition_times, tzone._transition_info)][:2]
Out[43]: 
[(datetime.datetime(1, 1, 1, 0, 0),
  datetime.timedelta(0, 4560),
  datetime.timedelta(0),
  'LMT'),
 (datetime.datetime(1901, 12, 13, 20, 45, 52),
  datetime.timedelta(0, 3600),
  datetime.timedelta(0),
  'CET')]
"
"In Python, how do I get a variable via a string representation of the name of the variable?","if hasattr(self, s):
    print getattr(self, s)
"
"Search for specific string, only copy part of string into another textfile","with open('resultfile', 'w') as wFile:
    wFile.write(line.rpartition('_')[-1])
"
Remove nested bbcode quotes in Python?,"stuff = """"""
Other stuff
[quote user2] 
[quote user1]Hello[/quote] 
World 
[/quote] 
Other stuff after the stuff
""""""

from pyparsing import (Word, printables, originalTextFor, Literal, OneOrMore, 
    ZeroOrMore, Forward, Suppress)

# prototype username
username = Word(printables, excludeChars=']')

# BBCODE quote tags
openQuote = originalTextFor(Literal(""["") + ""quote"" + username + ""]"")
closeQuote = Literal(""[/quote]"")

# use negative lookahead to not include BBCODE quote tags in tbe body of the quote
contentWord = ~(openQuote | closeQuote) + (Word(printables,excludeChars='[') | '[')
content = originalTextFor(OneOrMore(contentWord))

# define recursive definition of quote, suppressing any nested quotes
quotes = Forward()
quotes << ( openQuote + ZeroOrMore( Suppress(quotes) | content ) + closeQuote )

# put separate tokens back together
quotes.setParseAction(lambda t : '\n'.join(t))

# quote extractor
for q in quotes.searchString(stuff):
    print q[0]

# nested quote stripper
print quotes.transformString(stuff)
"
Regex to extract all URLs from a page,"def extract_urls(your_text):
  url_re = re.compile(r'\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))')
  for match in url_re.finditer(your_text):
    yield match.group(0)
"
Transpose nested generators,"hints = [""a"", ""b"", ""c""]
generators = list(map(gen_fun, hints))
for x in zip(*generators):
    for txt in x:
        print(txt)
"
How to display a value in a PyQt text field using matplotlib's object picking function?,"import numpy as np
import matplotlib.pyplot as plt
from PyQt4 import QtGui
import sys
from matplotlib.backends.backend_qt4agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt4agg import NavigationToolbar2QTAgg as NavigationToolbar
import matplotlib.pyplot as plt

class Window(QtGui.QDialog):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)
        self.initUI()

    def initUI(self):  
       self.msg = '0'

       # a figure instance to plot on
       self.figure = plt.figure()
       self.canvas = FigureCanvas(self.figure)
       self.toolbar = NavigationToolbar(self.canvas, self)

       # a label
       self.lbl = QtGui.QLabel(self.msg)

       # set the layout
       layout = QtGui.QVBoxLayout()
       layout.addWidget(self.toolbar)
       layout.addWidget(self.canvas)
       layout.addWidget(self.lbl)
       self.setLayout(layout)

       self.plot()

    def changelabel(arg):
        main.lbl.setText(str(arg[0])+' '+str(arg[1]))

    def plot(self):
        # random data
        data = [np.random.random() for i in range(10)]
        # create an axis
        ax = self.figure.add_subplot(111)
        # discards the old graph
        ax.hold(False)
        # plot data
        line, = ax.plot(data, 'o', picker=5)  # 5 points tolerance
        self.canvas.draw()
        self.canvas.mpl_connect('pick_event',  Window.onpick)

    def onpick(self):
        thisline = self.artist
        xdata = thisline.get_xdata()
        ydata = thisline.get_ydata()
        ind = self.ind

        # show data
        self.msg = (xdata[ind], ydata[ind])
        print(self.msg)
#        Window.changelabel(self.msg)
        main.lbl.setText(str(self.msg[0])+' '+str(self.msg[1]))


if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    main = Window()
    main.show()
    sys.exit(app.exec_())
"
Convert a recursive function into Non recursive in Python,"def AcumulacionCelda(x,y):
    if Acum[x, y] != NoData:
        return
    Acum[x, y] = 1
    d = {(-1, -1):  4,
         (-1, 0) :  5,
         (-1, 1) :  6,
         (0, -1) :  3,
         (0, 0)  : 'dummy',
         (0, 1)  :  7,
         (1, -1) :  2,
         (1, 0)  :  1,
         (1, 1)  :  8}
    keys = tuple(product(range(-1,2), range(-1,2)))[::-1]
    queue = [('Loop', (x, y), list(keys))]

    while queue:
        instruction, coords, directions = queue.pop()
        x, y = coords
        if instruction == 'Loop':
            while directions:
                m, n = directions.pop()
                if Direcciones[x+m, y+n] == d[m, n]:
                    queue.append(('Loop', (x, y), directions))
                    queue.append(('Add', (x, y), (m, n)))
                    if Acum[x+m, y+n] == NoData:
                        Acum[x+m, y+n] = 1
                        queue.append(('Loop', (x+m, y+n), list(keys)))
                    break
        elif instruction == 'Add':
            m, n = directions
            Acum[x, y] += Acum[x+m, y+n]
"
"Select adjacent couples (or triads, etc ) from a list","def gen_k_slices(seq, k):
    for i in range(len(seq) - k + 1):
        yield seq[i:i+k]
"
How do you find the IQR in Numpy?,"iqr = np.subtract(*np.percentile(x, [75, 25]))
"
How to load a Python dict from a textfile into a variable,"with open(filename) as f:
    # do something
"
.json extension file + timestamp + Pandas + Python,"In [31]: ts = pd.Series(1, dti)

In [32]: ts.head()
Out[32]:
2012-03-01 00:05:55    1
2012-03-01 00:06:23    1
2012-03-01 00:06:52    1
2012-03-01 00:11:23    1
2012-03-01 00:12:47    1
dtype: int64
"
Parse hours without leading zeroes by strptime in Python,">>> import time
>>> a = ['800.', '830.', '900.', '30.']
>>> [time.strptime(i[:-1].zfill(4), ""%H%M"") for i in a]
[time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=8, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1), time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=8, tm_min=30, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1), time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=9, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1), time.struct_time(tm_year=1900, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=30, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1)]
"
How to convert EST/EDT to GMT?,"import pytz
import datetime as dt

utc=pytz.utc
eastern=pytz.timezone('US/Eastern')
fmt='%Y-%m-%d %H:%M:%S %Z%z'

text='''\
10/1/2010   0:0:0
10/1/2010   0:6:0
10/1/2010   23:54:0
10/3/2010   0:0:0
'''

for datestring in text.splitlines():
    date=dt.datetime.strptime(datestring,""%m/%d/%Y %H:%M:%S"")
    date_eastern=eastern.localize(date,is_dst=None)
    date_utc=date_eastern.astimezone(utc)
    print(date_utc.strftime(fmt))
"
Representing a set of URLs in a list as a tree structure,"ll = [
  {'title': 'Index Page', 'url': 'http://www.example.com/something/index.htm'}, 
  {'title': 'Other Page', 'url': 'http://www.example.com/something/other.htm'},
  {'title': 'About Page', 'url': 'http://www.example.com/thatthing/about.htm'},
  {'title': 'Detail Page', 'url': 'http://www.example.com/something/thisthing/detail.htm'},
]

# First build a list of all url segments: final item is the title/url dict
paths = []
for item in ll:
    split = item['url'].split('/')
    paths.append(split[2:-1])
    paths[-1].append({'title': item['title'], 'url': split[-1]})

# Loop over these paths, building the format as we go along
root = {}
for path in paths:
    branch = root.setdefault(path[0], [{}, []])
    for step in path[1:-1]:
        branch = branch[0].setdefault(step, [{}, []])
    branch[1].append(path[-1])

# As for the cleanup: because of the alternating lists and
# dicts it is a bit more complex, but the following works:
def walker(coll):
    if isinstance(coll, list):
        for item in coll:
            yield item
    if isinstance(coll, dict):
        for item in coll.itervalues():
            yield item

def deleter(coll):
    for data in walker(coll):
        if data == [] or data == {}:
            coll.remove(data)
        deleter(data)

deleter(root)

import pprint
pprint.pprint(root)
"
Deleting elements in a given list only?,"B=A[0]
"
"Python mySQL Update, Working but not updating table",dbb.commit()
python : list of dictionary values by alphabetical order of keys,"[dictionary[k] for k in sorted(dictionary)]
"
Returning function values based on argument?,"class Class1(object):
    def __init__(self):
        self.list1, self.list2, self.list3, self.list4 = [], [], [], []
    def func3 (value):
        self.list3=[]
        self.list4=[]
        #do some operations based on value (that presumably modify list3/list4)
    def func2(self, value):
        self.list1=[]
        self.list2=[]
        #do some operations based on value (that presumably modify list1/list2)
        self.func3(value) # this sets self.list3 and self.list4
    def func1(self):
        value =20
        self.func2(value)
        #func1 now has access to the same self.list3 and self.list4 as func2
"
Python date string manipulation based on timezone - DST,"import pytz
import datetime
s = '2013:07:04:14:00'
mydate = datetime.datetime.strptime(s, '%Y:%m:%d:%H:%M')
mydate = mydate.replace(tzinfo=timezone('Australia/Sydney'))
print mydate
"
Managing Processes from Python multiprocessing module,"from multiprocessing import Pool                                                                                      
import time
import random


def myfunc():
    a = random.randint(0,3)
    time.sleep(a)
    return a

print(""Starting..."")

p = Pool(processes=8)
SOME_LIST = p.map(myfunc, range(p._processes))
p.close()
p.join()

print(""Stopping..."")
print(SOME_LIST)
"
Get list of all possible dict configs in Python,">>> from itertools import product
>>> d = {'a':[1,2], 'b':[3,4,5]} 
>>> list(product(*d.values()))
[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5)]
>>> [dict(zip(d.keys(), combo)) for combo in product(*d.values())]
[{'a': 1, 'b': 3}, {'a': 1, 'b': 4}, {'a': 1, 'b': 5}, {'a': 2, 'b': 3}, {'a': 2, 'b': 4}, {'a': 2, 'b': 5}]
>>> from pprint import pprint
>>> pprint(_)
[{'a': 1, 'b': 3},
 {'a': 1, 'b': 4},
 {'a': 1, 'b': 5},
 {'a': 2, 'b': 3},
 {'a': 2, 'b': 4},
 {'a': 2, 'b': 5}]
"
combining two slicing operations,"v = A[::2][10:20]
v = A[20:40][::2]
v = A[20:40:2]
"
Finding the most frequent character in a string,print(collections.Counter(s).most_common(1)[0])
Rename files using python,"import os
oldFile = r'C:\folder\subfolder\inFile.txt'  # note the r character for raw string
os.path.normpath(oldFile)
"
How to get integer values from a string in Python?,"map(int, re.findall('\\d+', string1))"
How to store two different values returned from query into list data types to be used later(plpy python),"for row in rv:
    the_id = row['id']
    name = row['name']
"
What are the pythonic way to replace a specific set element?,"data.pop()
data.add(new_value)
"
ScraperWiki/Python: filtering out records when property is false,"import scraperwiki
import simplejson
import urllib2
import re

QUERY = 'sw4'
RESULTS_PER_PAGE = '100'
NUM_PAGES = 10

postcode_match = re.compile('(?<![0-9A-Z])([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {0,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)(?![0-9A-Z])', re.I)

for page in range(1, NUM_PAGES+1):
    base_url = 'http://search.twitter.com/search.json?q=%s&rpp=%s&page=%s' \
         % (urllib2.quote(QUERY), RESULTS_PER_PAGE, page)
    try:
        results_json = simplejson.loads(scraperwiki.scrape(base_url))
        for result in results_json['results']:
            #print result
            data = {}
            data['id'] = result['id']
            data['text'] = result['text']
            data['location'] = scraperwiki.geo.extract_gb_postcode(result['text'])
            data['from_user'] = result['from_user']
            data['created_at'] = result['created_at']
            if data['location'] and postcode_match.search(data['text']):
                print data['location'], data['text']
                scraperwiki.sqlite.save([""id""], data)
    except:
        print 'Oh dear, failed to scrape %s' % base_url
        break
"
Beautifulsoup HTML data extraction with BeautifulSoup and Python,"html = """"""<DOC>
<DOCNO> XXX-2222 </DOCNO>
<FILEID>AP-NR-02-12-88 2344EST</FILEID>
<HEAD>Reports Former Saigon Officials Released from Re-education Camp</HEAD>
<TEXT>
Lots of text here
</TEXT>
</DOC>
""""""

import bs4

d = {}

soup = bs4.BeautifulSoup(html, features=""xml"")
docs = soup.findAll(""DOC"")
for doc in docs:
    d[doc.DOCNO.getText()] = (doc.HEAD.getText(), doc.TEXT.getText())

print d
#{u' XXX-2222 ': 
#   (u'Reports Former Saigon Officials Released from Re-education Camp', 
#    u'\nLots of text here\n')}
"
Beautifulsoup find element by text using `find_all` no matter if there are elements in it,"@property
def string(self):
    """"""Convenience property to get the single string within this tag.

    :Return: If this tag has a single string child, return value
     is that string. If this tag has no children, or more than one
     child, return value is None. If this tag has one child tag,
     return value is the 'string' attribute of the child tag,
     recursively.
    """"""
    if len(self.contents) != 1:
        return None
    child = self.contents[0]
    if isinstance(child, NavigableString):
        return child
    return child.string
"
Convert List to Int with Python,"phone_number = toasted_tree.xpath('//b/text()')[0]
phone_number = int(phone_number.replace('-', ''))
"
Why do I get None instead of True/False in python?,">>> def is_sorted(x,i):
...     if i >= len(x):
...         return True
...     elif x[i] <= x[i-1]:
...         return False
...     else:
...         return is_sorted(x,i+1)
... 
>>> x = ""abcadef""
>>> y = ""aabcdef""
>>> z = ""abcdef""
>>> print is_sorted(x, 1)
False
>>> print is_sorted(y, 1)
False
>>> print is_sorted(z, 1)
True
>>> 
"
Group by multiple time units in pandas data frame,"years = range(2012, 2015)
yearly_month_stats = [dfts.xs(str(year)).groupby(lambda x : x.month).mean() for year in years]
df2 = pd.concat(yearly_month_stats, axis=1, keys = years)
"
Complex regex in Python,">>> s = 'GigabitEthernet0/0/0/0 '
>>> s[:2]+''.join([i for i in s if i.isdigit()])
'Gi0000'
"
serching for nested item in nested list [python],">>> lst  = [[01,""ny"",100], [02,""jr"",200], [03, ""la"", 300,""ny""]]
>>> [sublst for sublst in lst if sublst[1] == ""ny""]
[[1, 'ny', 100]]
"
Python: One-liner to perform an operation upon elements in a 2d array (list of lists)?,"[list(map(int, x)) for x in values]
"
Add numbers without carrying,"revs = [str(n)[-1::-1] for n in nums]           # nums as reversed strings
dsum = lambda *ds: sum(int(d or 0) for d in ds) # str-digits -> their sum
sums = map(dsum, *revs)[-1::-1]                 # digit sums, in order
ones = [str(s % 10) for s in sums]              # last digits of the sums
res  = int(''.join(ones))                       # result: 3960
"
Lazy Method for Reading Big File in Python?,"def read_in_chunks(file_object, chunk_size=1024):
    """"""Lazy function (generator) to read a file piece by piece.
    Default chunk size: 1k.""""""
    while True:
        data = file_object.read(chunk_size)
        if not data:
            break
        yield data


f = open('really_big_file.dat')
for piece in read_in_chunks(f):
    process_data(piece)
"
Splitting a string with multiple separators,"import re
pieces = 'Ka4Qb3Td7b4c4'
m = re.compile('[A-Za-z]{1,2}\d+')
print m.findall(pieces)
"
How to encode a long string of hex values in unicode easily in python,""", "".join(unichr(u) for u in (0x062A, 0x0627, 0x0628))
"
cache.fetch in Django?,"def get_value(param1,param2):
    return ""value %s - %s "" % (str(param1),str(param2))

def fetch(key,val_function,**kwargs)
    val = cache.get(key)
    if not val:
        val = val_function(**kwargs)
        cache.set(key,val)
    return val
"
Getting a column into an array from excel in python,"with open(""table.csv"", ""rU"") as f:
    output = sorted([line.split(',')[7].strip() for line in f][1:])
"
Python string text to set of points,"from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont
import numpy as np
import cv2


print np.__version__

def getPixelColor(pixel, x, y):
    try:
        return pixel[x,y]
    except IndexError:
        return (255,255,255)

def hasNeighbourColor(color, pixels, x, y):
    if getPixelColor(pixels,x-1,y-1) == color or getPixelColor(pixels,x,y-1) == color or getPixelColor(pixels,x+1,y-1) == color \
        or getPixelColor(pixels,x-1,y) == color or getPixelColor(pixels,x+1,y) == color\
        or getPixelColor(pixels,x-1,y+1) == color or getPixelColor(pixels,x,y+1) == color or getPixelColor(pixels,x+1,y+1) == color:
        return True
    return False

def createMapOfLetter(letter):
    print ""LETTER %s:"" % letter
    print ""---------""

    img = Image.new('RGB', (230, 230), ""white"")
    d = ImageDraw.Draw(img)
    font = ImageFont.truetype(""arial.ttf"", 300)
    d.text((15, -50), letter, fill=(0, 0, 0), font=font)
    img.save('letter-%s.png' % letter, 'png')

    pixels = img.load()

    ans = []

    for x in range(230):
        for y in range(230):
            if pixels[x,y] == (0,0,0):
                if hasNeighbourColor((255,255,255), pixels, x, y) and not hasNeighbourColor((255,0,0), pixels, x, y):
                    pixels[x,y] = (255,0,0)
                    ans.append([x,y])

    for x in range(230):
        for y in range(230):
            if pixels[x,y] != (255,0,0):
                pixels[x,y] = (255,255,255)

    img.save('letter_map-%s.png' % letter, 'png')
    print ans


createMapOfLetter('A')
"
Python - Using a while loop with an if/elif statement,"while not (choice == ""temp"" or choice == ""distance""):
"
"why does D.get(k,v) seem to always execute v if v is returned from a function?","a = D['a'] if 'a' in D else print('hah')
"
What is the simplest way to swap char in a string with Python?,""""""""""""".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])"
Iterate every 2 elements from list at a time,">>> seq = [1,2,3,4,5,6,7,8,9,10]
>>> it = iter(seq)
>>> for x in it:
...     print [x, next(it)]
...     
[1, 2]
[3, 4]
[5, 6]
[7, 8]
[9, 10]
"
python pandas merging data based off 2 keys,"In [42]: merge(foo, fundraisers, left_on=['fundraiser ID', 'event'], right_on=['ID', 'event'], how='outer')
Out[42]:
   event fundraiser ID  amount ID
0      1             a       3  a
1      1             b       3  b
2      1             c       4  c
3      2             a       5  a
4      2             d       6  d
5      1           NaN     NaN  e
"
python checking if two variables are in a list,"mylist = [4, 5, 6, 7]
all(x in mylist for x in (4, 5, 6))
>True
all(x in mylist for x in (4, 5, 8))
>False
"
Finding all links matching specific URL template in an HTML page,"import re
from bs4 import BeautifulSoup

data = ""your html""
soup = BeautifulSoup(data)

pattern = re.compile(""http://example.com/Stuff/preview/v/\d+/fl/1/t/"")
print soup.find_all('a', {'href': pattern})
"
Beautifulsoup 4: Remove comment tag and its content,"
from bs4 import BeautifulSoup, Comment

data = """"""<div class=""foo"">
cat dog sheep goat
<!--
<p>test</p>
-->
</div>""""""

soup = BeautifulSoup(data)

div = soup.find('div', class_='foo')
for element in div(text=lambda text: isinstance(text, Comment)):
    element.extract()

print soup.prettify()
"
how to compare two fields in python,"file1=[['a',1,2],['a',3,4],['b',4,5],['c',3,5]]

li1=[] #first obj
li2=[] #second obj
skip_next = False
file_len = len(file1)

for current_row_num,row in enumerate(file1):
    if skip_next:
        skip_next = False
        pass
    else:
        if current_row_num == (file_len-1):
            # alone
            li2.append(row)
        elif row[0]!=file1[current_row_num+1][0]:
            #current row belongs in obj2
            li2.append(row)
        else:
            # current row has same first col value as next row
            # append both to li1
            li1.append(row)
            li1.append(file1[current_row_num+1])
            skip_next=True

print ""first obj\n""+str(li1)

print ""second obj\n""+str(li2)
"
"Python string 'join' is faster(?) than '+', but what's wrong here?","from timeit import timeit

noc = 100
tocat = ""a""
def f_call():
    pass

def loop_only():
    for i in range(noc):
        pass

def concat_method():
    s = ''
    for i in range(noc):
        s = s + tocat

def list_append():
    s=[]
    for i in range(noc):
        s.append(tocat)
    ''.join(s)

def list_append_opt():
    s = []
    zap = s.append
    for i in range(noc):
        zap(tocat)
    ''.join(s)

def list_comp():
    ''.join(tocat for i in range(noc))

def concat_method_buildup():
    s=''

def list_append_buildup():
    s=[]

def list_append_opt_buildup():
    s=[]
    zap = s.append

def function_time(f):
    return timeit(f,number=1000)*1000

f_callt = function_time(f_call)

def measure(ftuple,n,tc):
    global noc,tocat
    noc = n
    tocat = tc
    loopt = function_time(loop_only) - f_callt
    buildup_time = function_time(ftuple[1]) -f_callt if ftuple[1] else 0
    total_time = function_time(ftuple[0])
    return total_time, total_time - f_callt - buildup_time - loopt*ftuple[2]

functions ={'Concat Method\t\t':(concat_method,concat_method_buildup,True),
            'List append\t\t\t':(list_append,list_append_buildup,True),
            'Optimized list append':(list_append_opt,list_append_opt_buildup,True),
            'List comp\t\t\t':(list_comp,0,False)}

for i in range(5):
    print(""\n\n%d concatenation\t\t\t\t10'a'\t\t\t\t 100'a'\t\t\t1000'a'""%10**i)
    print('-'*80)
    for (f,ft) in functions.items():
        print(f,""\t|"",end=""\t"")
        for j in range(3):
            t = measure(ft,10**i,'a'*10**j)
            print(""%.3f %.3f |"" % t,end=""\t"")
        print()
"
Finding whether a word exist in a string in python,"if any(re.search(r'\b{}\b'.format(re.escape(word)), sentence, re.I) for word in listword):
    print 'yes'
"
generate many dummies in Pandas when every observation contains a list of possible values,"print df.col.str.get_dummies(sep=' ')
   A  B  C  U  X
0  1  1  1  0  0
1  0  1  1  0  1
2  0  0  0  1  0

print df.join(df.col.str.get_dummies(sep=' '))
     col  A  B  C  U  X
0  A B C  1  1  1  0  0
1  B C X  0  1  1  0  1
2      U  0  0  0  1  0
"
Python 2.7 - Find the number of web server hits,"def year_month(s):
     try:
         discard, month, rest = s.split('/', 2)  # split twice on '/' 
     except ValueError:
         return None  # for last line without /
     year = rest.split(':', 1)[0]
     year = int(year)  # optional
     return year, month
"
replace string if regex matched and replace with something else it matches some other regex,"def dic_gen(exc):
    param_errors = {re.sub(r'(sss_)|(ttt_)', 
        lambda mo: 'aaa_' if mo.group(0) == 'sss_' else 'bbb_', err.name):
        err.address for err in exc.errors}
    param_errors[""status""] = ""ERROR""
    return param_errors
"
A more elegant way of creating tuples of tuples from lists,">>> d = {'AL' : 'Alabama', 'AK' : 'Alaska',}
>>> d.items()
[('AK', 'Alaska'), ('AL', 'Alabama')]
"
How to convert an array of dates (format 'mm/dd/yy HH:MM:SS') to numerics?,"def pre_process(dict_sequence):
    for d in dict_sequence:
        d['time'] = date2num(datetime.datetime.strptime(d['time'],""%d/%m/%y %H:%M:%S"" ))
    yield d
"
Using numpy.bincount with array weights," from scipy.sparse import *
 a = np.array([[1,1], [2,2], [4,4]])
 ii = np.array([1, 1, 0])

 ares = a.reshape((-1,),order='F')
 # ares == array([1, 2, 4, 1, 2, 4])

 col = np.tile(ii,(a.shape[1],))
 # col == np.array([1, 1, 0, 1, 1, 0])

 row = np.tile([0,1],(a.shape[0],1)).reshape((-1,),order='F') 
 # row == np.array([0,0,0,1,1,1]) 

 g = coo_matrix((ares,(col,row)),shape=(2,2))
 print g.todense()     
"
Not able to retrieve the HREF from the tag,"tags = soup('a', limit=3)

for tag in tags:
    print tag.get('href', None)
"
How to combine try/except in python into a pretty one liner?,"class TokenDataType:
    LIST = ""list""
    DICT = ""dict""

def _select_key(keyitt, data):
    try:
        new_key = keyitt.next()
    except StopIteration:
        return data
    if new_key[""t""] == TokenDataType.DICT:
        return _select_key(keyitt, data[new_key[""k""]])
    elif new_key[""t""] == TokenDataType.LIST:
        return _select_key(keyitt, data[new_key[""i""]])

def tokenize_query(query):
    tokens = []
    for token in query.split("".""):
        token = token.strip()
        if token:
            ttype = TokenDataType.LIST if ""["" in token else TokenDataType.DICT
            if ttype == TokenDataType.LIST:
                index = None
                if len(token) >= 3:
                    index = int(token.replace(""["", """").replace(""]"", """"))
                tokens.append({""k"":token, ""t"":ttype, ""i"":index})
            else:
                tokens.append({""k"":token, ""t"":ttype})
    return tokens

def normalize_query(query=None, tokens=None):
    if tokens == None:
        tokens = tokenize_query(query)
    return ""."".join([token[""k""] for token in tokens])

def select(query, data, throw_exception_on_key_not_found=False):
    tokens = tokenize_query(query)
    try:
        return _select_key(iter(tokens), data)
    except Exception as e:
        if throw_exception_on_key_not_found:
            raise e
        return None

DQ = select

if __name__ == ""__main__"":
    test = {""bla"":1, ""foo"":{""bar"":2}, ""baz"":[{""x"":1}, {""x"":2}]}
    print(DQ("".bla"", test))
    print(DQ(""bla"", test))
    print(DQ(""nothere"", test))
    print(DQ("".foo"", test))
    print(DQ(""foo.bar"", test))
    print(DQ(""baz"", test))
    print(DQ(""baz.[0]"", test))
    print(DQ(""baz.[1].x"", test))
    print(DQ(""baz.[2].x"", test))
"
Apply multiple functions to the same argument in functional Python,"from operator import methodcaller

map(methodcaller('__call__', arg), list_of_functions)
"
How does the python difflib.get_close_matches() function work?,"from functools import partial
from operator import sub

def compare_ips(base, ip1, ip2):
    base = [int(s) for s in base.split('.')]
    parts1 = (int(s) for s in ip1.split('.'))
    parts2 = (int(s) for s in ip2.split('.'))
    test1 = sum(abs(d * 10**(3-pos)) for pos,d in enumerate(map(sub, base, parts1)))
    test2 = sum(abs(d * 10**(3-pos)) for pos,d in enumerate(map(sub, base, parts2)))
    return cmp(test1, test2)

base = '198.124.252.101'
test_list = ['198.124.252.102','134.55.41.41','134.55.219.121',
             '134.55.219.137','134.55.220.45', '198.124.252.130']
sorted(test_list, cmp=partial(compare_ips, base))
# yields:
# ['198.124.252.102', '198.124.252.130', '134.55.219.121', '134.55.219.137', 
#  '134.55.220.45', '134.55.41.41']
"
What is the canonical way of handling sys arguments in Python?,"""""""
My script.

usage:
    myscript -a | --along
    myscript -b | --blong

Options:
  -a --along     a help
  -b --blong     b help
""""""

from docopt import docopt
arguments = docopt(__doc__, version='myscript 1.0')
print(arguments)
"
open file in finder or explorer on linux or unix,"subprocess.Popen(['xdg-open','/home/me/otherdir'])
"
How to find all elements in a numpy 2-dimensional array that match a certain list?,"In [321]: A
Out[321]: 
array([[1, 1, 0, 2, 2],
       [1, 1, 0, 2, 0],
       [0, 0, 0, 0, 0],
       [3, 3, 0, 4, 4],
       [3, 3, 0, 4, 4]])

In [322]: A*np.in1d(A,[1,3,4]).reshape(A.shape)
Out[322]: 
array([[1, 1, 0, 0, 0],
       [1, 1, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [3, 3, 0, 4, 4],
       [3, 3, 0, 4, 4]])

In [323]: np.where(np.in1d(A,[1,3,4]).reshape(A.shape),A,0)
Out[323]: 
array([[1, 1, 0, 0, 0],
       [1, 1, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [3, 3, 0, 4, 4],
       [3, 3, 0, 4, 4]])

In [324]: M = np.searchsorted([1,3,4],A.ravel(),'left') != \
     ...:     np.searchsorted([1,3,4],A.ravel(),'right')
     ...: A*M.reshape(A.shape)
     ...: 
Out[324]: 
array([[1, 1, 0, 0, 0],
       [1, 1, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [3, 3, 0, 4, 4],
       [3, 3, 0, 4, 4]])
"
"Matplotlib, Set multiple parameters at once?","font_options = dict(ha='center', labelpad=28)

ax1.set_ylabel('Label1', **font_options)

...

ax2.set_ylabel('Label2', **font_options)
"
Accessing values in a list of nested dictionaries,"docScores = {0:[{u'word':2.3},{u'the':8.7},{u'if':4.1},{u'Car':1.7}],
             1:[{u'friend':1.2},{u'a':5.2},{u'you':3.8},{u'person':0.8}],
             29:[{u'yard':1.5},{u'gardening':2.8},{u'paint':3.7},{u'brush':1.6}]
            }

sum_d={k:sum(d.values()[0] for d in v) for k,v in docScores.items()}

print sum_d
"
"Can I do a reduce on a list comprehension into two lists, based on two values?","get_avg = lambda xs, attr: sum(x[attr] for x in xs) / len(xs)
avg_review = get_avg(books, ""rw"")
avg_rating = get_avg(books, ""rg"")
"
Python: filter on a list returning empty list,"tgt=[]
for root, dirs, files in os.walk(exportLocation):
    for file in files:
        if 'SystemIndex_0A' in file:
            tgt.append(os.path.join(root, file))
"
Populating dictionary from text file PYTHON," out = [dict((int(r[0]), map(int,r[1:])) for r in row) 
       for row in iter(lambda: list(islice(r, 4)),[])]
"
Selecting random values from list until they are gone in Python,"import random

def gen_people_in_group(age, num_male, num_female):
    males = ['m%s' % age] * num_male
    females = ['f%s' % age] * num_female
    return males + females

def gen_random_sample(num_in_group=5):
    groups = [1, 4, 6], [2, 5, 5], [3, 7, 3], [4, 2, 8], [5, 4, 6]

    population = []
    for group in groups:
        population += gen_people_in_group(*group)

    random.shuffle(population)

    for idx in xrange(0, len(population), num_in_group):
        yield population[idx:(idx + num_in_group)]

def main():
    for rand_group in gen_random_sample():
        print rand_group

if __name__ == '__main__':
    main()
"
Some Basic Python Questions,"chr(0xe2) . chr(0x80) . chr(0x98)
"
Count rows that match string and numeric with pandas,"df.MUT.str.extract('A:(T)|A:(G)|A:(C)|A:(-)')
"
Add utc time to filename python,"import datetime
utc_datetime = datetime.datetime.utcnow()
formated_string = utc_datetime.strftime(""%Y-%m-%d-%H%MZ"") //Result: '2011-12-12-0939Z'
filename = '/SomeDirectory/AnotherDirectory/FilePrefix_%s.txt'% formated_string
"
How do I mock a file object with a set size?,"import os.path

os.path.getsize = lambda path: return 2*1024*1024
try:
    _check_image_size(""any arbitrary string"")
except ValueError:
    print ""Successfully raised ValueError""
else:
    print ""Did not raise ValueError""
"
How to extract first and last strings in a sequence?,"data[0][0]=hi
data[0][1]=hello
data[0][2]=how
data[0][3]=to

data[1][0]=hello
data[1][1]=python
data[1][2]=format
data[1][3]=computer
data[1][4]=python
data[1][5]=good programming language
"
"Trying to get a nice format output, easy Python","'\n'.join([' '.join(board)]*5)
"
"Split a Pandas 'findall' result list into multiple items, to group by uniques","In [11]: df = pd.DataFrame([['@a @b'], ['@a'], ['@c']], columns=['tweets'])

In [12]: df
Out[12]:
  tweets
0  @a @b
1     @a
2     @c

In [13]: at_mentions = df['tweets'].str.findall('@[a-zA-Z0-9_]+')
"
Python3: Make itemgetter sort by string length,"DATABASE.sort(key=lambda x: len(x['SPECIAL_KEY']), reverse=True)
"
Check Type: How to check if something is a RDD or a dataframe?,"from functools import singledispatch

@singledispatch
def bar(x):
    pass 

@bar.register(RDD)
def _(arg):
    return ""RDD""

@bar.register(DataFrame)
def _(arg):
    return ""DataFrame""

bar(sc.parallelize([]))
## 'RDD'

bar(sc.parallelize([(""foo"", 1)]).toDF())
## 'DataFrame'
"
Printing a random amount of characters a random amount of times in one line,"import random

def rand_print(s, char_rand_max, str_rand_max):
    for i in range(random.randint(1, str_rand_max)):
        print ''.join([c*random.randint(1, char_rand_max) for c in s]),
    print
"
Loop within 26 numbers,">>> i = 20
>>> i = (i + 10) % 26
>>> print(i)
4
"
remove all whitespace in a string,sentence = ''.join(sentence.split())
"Declare python variable that stores a function, but not run it","cred = lambda: fill(255, 0, 0)
"
Range with alphabets Python,"def customRange(lst):
    if lst[0][0] != lst[1][0]:
        for c in range(ord(lst[0][0]), ord(lst[1][0])+1):
            yield chr(c) + lst[0][1]
    else:
        for n in range(int(lst[0][1]), int(lst[1][1])):
            yield lst[0][0] + str(n)
"
Python 2.7 : How to reduce time to get data percentage of a file?,"import time
from collections import Counter

def fmt(data):
    return """".join(""{:02x}"".format(ord(c)) for c in data).upper()

def pct(v, size):
    return float(v) / size * 100

startTime = time.time()

with open(""myfile.bin"",""rb"") as f:
    counts = Counter(f.read())
    size = f.tell()

threshold = size * 0.005
err = {fmt(k):pct(v, size) for k,v in counts.items() if v > threshold }

if not err:
    print ""OK""
else:
    for k,v in sorted(err.items()):
        print ""    0x{} is {:.2f}%"".format(k, v)

print ""Done in %.2f seconds.""%(time.time() - startTime)
"
Pass arguments to python based on wild character,"echo /bin/*.txt
"
Shuffle in one dimension of a matrix(effeciently)?,"def swap(a, b):
    a = np.copy(a)
    b = np.asarray(b, dtype=np.bool)
    a[b] = a[b, ::-1]  # equivalent to: a[b] = np.fliplr(a[b])
    return a

# the following is faster, but modifies the original array
def swap_inplace(a, b):
    b = np.asarray(b, dtype=np.bool)
    a[b] = a[b, ::-1]


print swap(a=[[1,2],[2,3],[3,4],[3,5],[5,6]],b=[0,0,0,1,1])
"
How to change object variables in for loop in python,"for prop in ('a', 'b'):
    i2prop = getattr(Item2, prop)
    if getattr(Item1, prop) != i2prop:
        setattr(Item1, prop, i2prop)
"
Template Python list with default element values,"template_tuple = (0, 0, 'X', 0, 'Y', 'Z')
template_tuple_len = len(template_tuple)

for row in (
    '\t'.join(('1', '2', '3', '4', '5', '6')),
    '\t'.join(('1', '', '3', '4', '5', '6')),
    '\t'.join(('1', '2', '3', '4'))
    ):
    print [v if len(v) else template_tuple[i] for split_row in
           (row.strip().split('\t'),) for (i, v) in enumerate(
            split_row + [''] * (template_tuple_len - len(split_row)))]
"
Python Class Fields,"def __call__(cls, *args, **kwargs):
    instance = self.__new__(cls, *args, **kwargs)
    instance.__init__(*args, **kwargs)
    return instance
"
remove first char from each line in a text file,"import tempfile
from sys import argv

run, filename = argv

with open(filename) as fin, tempfile.NamedTemporaryFile(delete=False) as fout:
    for line in fin:
        fout.write(line[1:])
    os.rename(fout.name, filename)
"
Python: Find smallest values in nested dict,"mn_year = min((int(d['first date']), int(d['last date'])) for d in dates.values())

print(mn_year)

 print([k for k in dates
       if (int(dates[k]['first date']), int(dates[k]['last date'])) == mn_year])
(1985, 2000)
['third record', 'first record']
"
How to get rid of duplicate entries in a comma separated string,"result = ','.join(set(text.split(',')))
"
Multiply and sum values in a file,"awk '{print ($2+($3*2)),($5+($6*2)),($8+($9*2))}'
"
How to pass more than one parameter in a Jinja loop?,">>> env = jinja2.Environment()
>>> env.globals.update(zip=zip)
>>> tmpl = """"""{% for seller, amount in zip(sellers, cash) %}
  <p><strong>{{seller}}: {{amount}}</p>
{% endfor %}""""""
>>> env.from_string(tmpl).render(sellers=seller, cash=cash)
u'\n  <p><strong>Bob: 12</p>\n\n  <p><strong>Joe: 25</p>\n\n  <p><strong>Tim: 67</p>\n'
"
Insert separator only if didn’t insert one before,"{% for product in product_list %}
    {% if not forloop.first and product.tracks %}
        <li class=""separator""></li>
    {% endif %}

    {% for track in product.tracks %}
        <li>{{track}}</li>
    {% endfor %}
{% endfor %}
"
Grab everything after character if its present,"import re

re.search(r""(- |^)([^-]*)(,|$)"", ""Advertising - Roseville Chase"").group(2)
Out[97]: 'Roseville Chase'

re.search(r""(- |^)([^-]*)(,|$)"", ""Roseville Chase"").group(2)
Out[98]: 'Roseville Chase'
"
How to sort a list with user defined condition in python?,">>> ls = ['qa','uat','prod','dev']
>>> ls.sort(key=lambda x: (1,x) if x=='dev' else (0,x))
>>> ls
['prod', 'qa', 'uat', 'dev']
>>>
"
BRO IDS searches,"import gzip
with gzip.GzipFile(""/path/to/some_log_file.gz"",""w"") as output_file:
     output_file.write(""Hello GZIP World"")
"
"python regular expression for Extracting URL in between matched quotes whether it may be single,double or (",">>> s = '<a href=""http://xxx.yyy.com/help/xxx(yyy)_Help.exe"" '
>>> re.findall(r'\s*([""\'])((?:http|\/).*?)\1[>\s]', s)
[('""', 'http://xxx.yyy.com/help/xxx(yyy)_Help.exe')]
>>> [i[1] for i in re.findall(r'\s*([""\'])((?:http|\/).*?)\1[>\s]', s)]
['http://xxx.yyy.com/help/xxx(yyy)_Help.exe']
>>> 
"
Auto format arguments to string,"def create_query(**kwargs):
    query_string = """"""
         'WhoId':'{who_id}',
         'Subject':'{subject}',
         'Description':'{description}',
         ...
         """""".format(**kwargs)
    print(query_string)
"
Python: sorting a dictionary of lists,">>> sorted(myDict.items(), key=lambda e: e[1][2])
[('item2', [8, 2, 3]), ('item1', [7, 1, 9]), ('item3', [9, 3, 11])]
"
Combining matplotlib quiver and elipses doesn't work,"import numpy as np
import  matplotlib.pyplot as plt
from matplotlib.patches import Ellipse

x, y, width, height, angle=10.0, 6.0, 7.0, 3.0, 160.0

fig = plt.figure(figsize=(12,8))
xx, yy = np.meshgrid(range(20), range(20))
img = (2*xx + yy)/40. # something asymmetrical to understand axes

ax1 = fig.add_subplot(121)
ax1.set_aspect('equal','box')
im1 = ax1.imshow(img, interpolation='none')
ax1.set_title('UL imshow origin')
ax2 = fig.add_subplot(122)
im2 = ax2.imshow(img, interpolation='none', origin='lower')
ax2.set_title('LL imshow origin')

def oneEllipse():
    return Ellipse(xy=(x,y), width=width, height=height, angle=angle,
            facecolor='black')
    # Can't define one Ellipse and add it to two axes. Huh. 

for ax in (ax1, ax2):
    ax.add_artist(oneEllipse())
    # quiver can take a bunch of different function signatures
    # comment out the second or the third line to change the signature easily
    qi = ax.quiver(np.array([x, x+1]), np.array([y, y-1]), #
                np.array([width, width*2]),np.array([height, height/2.]),
                #angles='xy', # this uses the U, V args and flips the vectors
                #angles=np.array([angle, angle]), # angles come out the same
                headwidth=2, color=['white', 'red'], zorder=10)
"
"When querying a Django model, is there a way to match every string in a field","def count_users(selectedTown=None):
    filters = {""gender"": ""M""}
    if selectedTown is not None:
        filters[""town""] = selectedTown
    return User.objects.filter(**filters).count();
"
return combinations having all element present,">>> filter(lambda s: sorted(sum(s,[])) == sorted(lis1), powerset(lis2))
[([1, 2], [3]), ([2, 3], [1]), ([3], [1], [2])]
"
matplotlib: aspect ratio in subplots with various y-axes,"import matplotlib.pyplot as plt 
import numpy as np 

# The key here is the figsize (it needs to be square). The position and size of
# axes in matplotlib are defined relative to the size of the figure.
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(8,8))

for i, ax in enumerate(axes.flat, start=1):
    ax.plot(np.arange(0, i * 4, i))

# By default, subplots leave a bit of room for tick labels on the left.
# We'll remove it so that the axes are perfectly square.
fig.subplots_adjust(left=0.1)

plt.show()
"
Add string between tabs and text,">>> import re
>>> a = '\t\t\tHere is the next part of string.  More garbage.'
>>> re.sub(r'^(\t*)', r'\1 Added String here. ', a)
'\t\t\t Added String here. Here is the next part of string.  More garbage.'
>>> re.sub(r'^(\t*)', r'\1 Added String here. ', 'No leading tabs.')
' Added String here. No leading tabs.'
"
Error while importing Flickr api using Python on Google App Engine,"from google.appengine.ext.webapp.util import run_wsgi_app
import webapp2
from urllib import urlencode, urlopen
from xml.dom import minidom
import hashlib
import os

HOST = 'http://api.flickr.com'
API = '/services/rest'
API_KEY = 'my_key'

debug = False

class MainPage(webapp2.RequestHandler):

    def get(self):
        self.response.headers['Content-Type'] = 'text/html'

        data = _doget('flickr.photos.search', auth=False, text='boston', per_page='2')

        if data:
            photos = data.getElementsByTagName(""photo"")
            for photo in photos:
                farm_id = 1 # ???
                server_id = photo.attributes['server'].value
                photo_id = photo.attributes['id'].value
                secret = photo.attributes['secret'].value
                photo_url = 'http://farm{farm_id}.staticflickr.com/{server_id}/{photo_id}_{secret}.jpg'.format(farm_id=farm_id,                                                                                                         server_id=server_id,                                                                                                         photo_id=photo_id,                                                                                                         secret=secret)
                self.response.write('<img src=""{0}"">'.format(photo_url))
        else:
            self.response.write('Error')


def _doget(method, auth=False, **params):
    #print ""***** do get %s"" % method

    params = params
    url = '%s%s/?api_key=%s&method=%s&%s'% \
      (HOST, API, API_KEY, method, urlencode(params))

    #another useful debug print statement
    if debug:
        print ""_doget"", url

    res = urlopen(url)
    res = res.read()

    return minidom.parseString(res)


application = webapp2.WSGIApplication([('/', MainPage),], debug=True)

def main():
    run_wsgi_app(application)

if __name__ == ""__main__"":
    main()
"
Why is list element replacement slower than string element replacement in python?,"from string import maketrans

map = maketrans('aeiou', '0' * 5)
def str_translate(s, map):
    return s.translate(map)
"
sort integers positive then negative,"l = [-5, -2, -1, 1, 2, 10, 100]

print(sorted(l, key=lambda x: (x >= 0, -x), reverse=True))
"
Grab a line's whitespace/indention with Python,">>> timeit.timeit('r.match(s).group()', 'import re;r=re.compile(r""\s*"")s=""          hello world!""*10000', number=100000)
0.10037684440612793
>>> timeit.timeit('"""".join(itertools.takewhile(lambda x:x.isspace(),s))', 'import itertools;s=""          hello world!""*10000', number=100000)
0.7092740535736084
>>> timeit.timeit('"""".join(itertools.takewhile(str.isspace,s))', 'import itertools;s=""          hello world!""*10000', number=100000)
0.51730513572692871
>>> timeit.timeit('s[:-len(s.lstrip())]', 's=""          hello world!""*10000', number=100000)
2.6478431224822998
"
How to time how long a Python program takes to run?,">>> from timeit import Timer
>>> timer = Timer('main()', 'from yourmodule import main')
>>> print timer.timeit()
"
Removing everything except letters and spaces from string in Python3.3,"whitelist = set('abcdefghijklmnopqrstuvwxy ABCDEFGHIJKLMNOPQRSTUVWXYZ')
myStr = ""happy t00 go 129.129""
answer = ''.join(filter(whitelist.__contains__, myStr))
"
Changing a python iterator while preserving the object,"class X:
    def __init__(self):
        self.prop1 = ""prop1""

    def __iter__(self):
        yield 1
        yield 2
        yield 3

    def method(self):
        print ""method 1""

class Y:
    def __init__(self):
        self.prop2 = ""prop2""

    def __iter__(self):
        yield (1,2)
        yield (3,4)
        yield (5,6)

    def another_method(self):
        print ""method 2""

class FirstInTuple:
    def __init__(self, obj):
        self.obj = obj

    def __getattr__(self, attr):
        return getattr(self.obj, attr)

    def __iter__(self):
        for each in self.obj:
            if hasattr(each, '__getitem__'):
                yield each[0]
            else:
                yield each

if __name__ == ""__main__"":
    x = X()
    y = Y()
    f_x = FirstInTuple(x)
    f_y = FirstInTuple(y)

    for each in x:
        print each
    print
    for each in y:
        print each
    print
    for each in f_x:
        print each
    print
    for each in f_y:
        print each
    print
    print f_x.prop1
    f_x.method()
    print
    print f_y.prop2
    f_y.another_method()
"
python3.4.2 how to assign a string with texts and variables,">>> length=22
>>> slope=45
>>> newstring='length {}, slope {}'.format(length, slope)
>>> newstring
'length 22, slope 45'
"
Format hex digits for character code \x,">>> ""commandstring {}{}"".format('\x00', '\x00')
'commandstring \x00\x00'
"
Python real time varying heat map plotting,"import matplotlib.pyplot as plt
import numpy as np
import time

# create the figure
fig = plt.figure()
ax = fig.add_subplot(111)
im = ax.imshow(np.random.random((50,50)))
plt.show(block=False)

# draw some data in loop
for i in range(10):
    # wait for a second
    time.sleep(1)
    # replace the image contents
    im.set_array(np.random.random((50,50)))
    # redraw the figure
    fig.canvas.draw()
"
How to convert JavaScript dictionary into Python syntax,">>> left = x.find(""{"")
>>> right = x.find(""}"")
>>> y = x[left+1:right]
"
How to remove a word declared in a variable in .csv file with python?,"import csv
...
rd = csv.reader(inputfile)
wr = csv.writer(outputfile)
for row in rd:                       # split each line into a list of fields
    row = [ x.strip() for x in row ] # remove spaces around  fields
    outrow = row[1:]                 # of whatever builds the output row
    wr.writerow(outrow)
"
Creating a JSON response using Django and Python,"return HttpResponse(json.dumps(response_data), content_type='application/json')"
Use python to handle and create input files for external software,"import re
tmplt = '  7352.103      26.0      2.61    -8.397                         11.2'
def fmt_from_template(tmplt):
    pat = r'( *-?\d+\.(\d+))' # one number with its decimal
    fmt = []
    while tmplt:
        match = re.search(pat,tmplt)
        if match:
            x = len(match.group(1)) # length of the whole number
            d = len(match.group(2)) # length of decimals
            fmt += ['%%%d.%df'%(x,d)]
            tmplt = tmplt[x:]
    fmt = ''.join(fmt)
    return fmt
print fmt_from_template(tmplt)
# %10.3f%10.1f%10.2f%10.3f%29.1f
"
Perl to Python Function translation,"sub reverse_hex {
    return join '', reverse unpack 'A2' x 8, $_[0];
}
"
How to display proper output when using re.findall() in python?,">>> for item in price:
...     print(item.decode()) # assume utf-8
... 
1,217.04
"
How to replace repeated instances of a character with a single instance of that character in python,"re.sub('\\*\\*+', '*', text)"
Why is my clojure shell result not like what works in python?,"user> (def notepad-process (future (sh ""emacs"" ""jpad.clj"")))
#'user/notepad-process
"
Adding brackets and commas to multiple JSON objects,"import json

def read_objects(filename):
    decoder = json.JSONDecoder()

    with open(filename, 'r') as inputfile:
        line = next(inputfile).strip()
        while line:
            try:
                obj, index = decoder.raw_decode(line)
                yield obj
                line = line[index:]
            except ValueError:
                # Assume we didn't have a complete object yet
                line += next(inputfile).strip()
            if not line:
                line += next(inputfile).strip()
"
Pre-initialize raw_input with default value,"import readline

DEFAULT_TEXT = ''

def default_hook():
    """"""Insert some default text into the raw_input.""""""
    readline.insert_text(default_hook.default_text)
    readline.redisplay()

readline.set_pre_input_hook(default_hook)

def raw_input_default(prompt, default=None):
    """"""Take raw_input with a default value.""""""
    default_hook.default_text = DEFAULT_TEXT if default is None else default
    return raw_input(prompt)
"
Numpy: find the the non-intersecting values of two arrays,"c = np.setdiff1d(np.union1d(a, b), np.intersect1d(a, b))
"
how to get all possible combination of items from 2-dimensional list in python?,list(itertools.product(*a))
Sorting by nested dictionary in Python dictionary,"a = {
    'searchResult' : [{
                       'resultType' : 'station',
                       'ranking' : 0.5
                      }, {
                       'resultType' : 'station',
                       'ranking' : 0.35
                      }, {
                      'resultType' : 'station',
                      'ranking' : 0.40
                      }]
  }

a[""searchResult""].sort(key=lambda d: d[""ranking""], reverse=True)
"
How to add classmethod to a python class?,"class Test(object):
    pass

@classmethod
def classfunc(cls, attr):
    print(cls, attr)

Test.cf = classfunc
"
Parsing config settings in python,"from pyparsing import *
import re

data = ... # data goes here

date_regex = re.compile(r'\d\d-\d\d-\d\d')
time_regex = re.compile(r'\d\d:\d\d:\d\d')
pairs = [{'category': 'General Information',
          'kv': Group(Word(alphanums) + Word(alphanums))},
         {'category': 'Last Reset:',
          'kv': Group(Word(alphas, max=1) + Word(alphas)) + Literal(':').suppress()
                + Group(Regex(date_regex) + Regex(time_regex)
                + Optional(SkipTo(LineEnd())))
          }
         ]
# build list of categories with associated parsing rules
categories = [Word(""# "").suppress() + x['category']
              + OneOrMore(Group(x['kv']))
              for x in pairs]
# account for thing you don't have specific rules for
categories.append(Word(""#"").suppress() + Optional(SkipTo(LineEnd())) +
                  Group(OneOrMore(Combine(Word(alphanums) + SkipTo(LineEnd()))))
                  )
# OR all the categories together
categories_ored = categories[0]
for c in categories[1:]:
    categories_ored |= c
configDef = OneOrMore(categories_ored)
suppress_tokens = [""show all"", ""SSH>"", ""Active System Configuration""]
suppresses = [Literal(x).suppress() for x in suppress_tokens]
for s in suppresses:
    configDef.ignore(s)

result = configDef.parseString(data)
for e in result:
    print(e)
"
Combine Python List Elements Based On Another List,">>> from itertools import groupby
>>> from operator import itemgetter
>>> phon = [""A"",""R"",""K"",""H""]
>>> idx = [1,2,3,3]
>>> [''.join([c for i, c in group]) for key, group in groupby(zip(idx, phon), itemgetter(0))]
['A', 'R', 'KH']
"
Return information from dict,"@classmethod
def create(cls, **kwargs):
    return cls(**kwargs)
"
Creating D3 nested JSON Data with Python,"import pandas as pd
import json

def find_element(children_list,name):
    """"""
    Find element in children list
    if exists or return none
    """"""
    for i in children_list:
        if i[""name""] == name:
            return i
    #If not found return None
    return None

def add_node(path,value,nest):
    """"""
    The path is a list.  Each element is a name that corresponds 
    to a level in the final nested dictionary.  
    """"""

    #Get first name from path
    this_name = path.pop(0)

    #Does the element exist already?
    element = find_element(nest[""children""], this_name)

    #If the element exists, we can use it, otherwise we need to create a new one
    if element:

        if len(path)>0:
            add_node(path,value, element)

    #Else it does not exist so create it and return its children
    else:

        if len(path) == 0:
            nest[""children""].append({""name"": this_name, ""value"": value})
        else:
            #Add new element
            nest[""children""].append({""name"": this_name, ""children"":[]})

            #Get added element 
            element = nest[""children""][-1]

            #Still elements of path left so recurse
            add_node(path,value, element)
"
Set numpy array elements to zero if they are below a specific threshold,"a = [0 if a_ > thresh for a_ in a]
"
How do I create aggregates by a column in pandas?,"np.random.seed(632)
df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',
                          'foo', 'bar', 'foo', 'foo'],
                   'B' : ['one', 'one', 'two', 'three',
                           'two', 'two', 'one', 'three'],
                   'C' : np.random.randn(8),
                   'D' : np.random.randn(8)})

df['C/D'] = df['C'] / df['D']

In [293]: df.groupby('A')['C', 'C/D'].agg(sum)
Out[293]:
            C       C/D
A
bar  0.060808 -8.173028
foo -1.461735 -0.058941
"
Won't write output to logfile on Unix/Linux but does on Windows,"log=open(os.path.join(logdir, logfile), 'w')
...
    for filename in filenames:
        log.write(os.path.join(dirpath, filename)+'\n')
"
YQL - No definition found for Table,"class MyYql(yql.Public):

    def __init__(self, api_key=None, shared_secret=None, httplib2_inst=None, env=None):
        super(MyYql, self).__init__(api_key, shared_secret, httplib2_inst)
        self.env = env if env else None

    def execute(self, query, params=None, **kwargs):
        kwargs[""env""] = kwargs.get(""env"", self.env)
        return super(MyYql, self).execute(query, params, **kwargs);
"
How to approach this loop?,"string_list = [set(raw_input()) for _ in range(t)]
common = set.intersection(*string_list)
"
Pattern matching on function parameters in Python,"def rangetest(func):
    def onCall(**kargs):
        argchecks = func.__annotations__

        if all(val in range(*argchecks.get(arg)) for arg,val in kargs.items()):
            return func(**kargs)
        else :
              print (""invalid arg range"")
    return onCall


@rangetest
def func(a:(1, 5), b:(4,7), c:(0, 10)):
    print(a + b + c)
"
Search string with re module in html page,"re.findall( r""""""\s*(CATEGORY_ID)\s*=\s*((?:'|"")?\w+(?:'|"")?)"""""", txt )
"
Sort nested list for element in nested list?,"from operator import itemgetter    

data = """"""
General Motors,Chevrolet,K1500 TAHOE 4WD,18,2900,Standard SUV 4WD
General Motors,Chevrolet,TRAVERSE AWD,19,2750,Standard SUV 4WD
Chrysler Group LLC,Dodge,Durango AWD,19,2750,Standard SUV 4WD
Chrysler Group LLC,Dodge,Durango AWD,16,3400,Standard SUV 4WD
Ford Motor Company,Ford,Expedition 4WD,17,3100,Standard SUV 4WD
Ford Motor Company,Ford,EXPLORER AWD,19,2750,Standard SUV 4WD
""""""

data_lines = [x.split("","") for x in data.splitlines()[1:]]

print sorted(data_lines, key=itemgetter(3))

# Optionally join back to strings:
map("","".join, sorted(data_lines, key=itemgetter(3)))
"
How to check if the value on a website has changed,"import sys
import pickle
import urllib2

request = urllib2.Request('http://ecal.forexpros.com/e_cal.php?duration=weekly')
response = urllib2.urlopen(request) # Make the request
# Grab everything before the dynabic double-click link
htmlString = response.read().split('<iframe src=""http://fls.doubleclick')[0]

try: 
    file = pickle.load( open( 'D:\\Download\\htmlString.p', 'r'))
    if pickle.load( open( 'D:\\Download\\htmlString.p', 'r')) == htmlString:
        print(""Values haven't changed!"")
        sys.exit(0)
    else:
        pickle.dump( htmlString, open( 'D:\\Download\\htmlString.p', ""w"" ) )  
        print('Saving')
except IOError: 
    pickle.dump( htmlString, open( 'D:\\Download\\htmlString.p', ""w"" ) )
    print('Created new file.')
"
Is it possible to concatenate QuerySets?,"from django.db.models import Q

myQuery = Q()
for i in range(0,(searchDiff+1)):
    filterString = str(int(searchRange[0]) + i)
    myQueryTwoD.append(Q(asn=filterString))
    for j in range(0,(len(myQueryTwoD)-1)):
        myQuery = myQuery | myQueryTwoD[j]

myQuerySet = my.objects.filter(myQuery)
"
How can I launch an instance of an application using Python?,os.system('start excel.exe <path/to/file>')
"Converting string containing complex date value to a date, with Python",">>> from datetime import datetime
>>> date_string = 'Fri, 31 Oct 2014 01:51:22 +0000'
>>> format_string = '%a, %d %b %Y %I:%M:%S %z'
>>>
>>> date_object = datetime.strptime(date_string, format_string)
>>> date_object
datetime.datetime(2014, 10, 31, 1, 51, 22, tzinfo=datetime.timezone.utc)
>>> date_object.strftime(""%d-%m-%Y"")
'31-10-2014'
>>>
"
How to limit decimal places when using complex numbers,">>> a = cmath.sqrt(-1000)
>>> ""%.12f + %.12fj""%(a.real,a.imag)
'0.000000000000 + 31.622776601684j'
"
construct graph from python set type,"def intersection_graph(sets):
    adjacency_list = {}
    for i, s1 in enumerate(sets):
        for j, s2 in enumerate(sets):
            if j == i:
                continue
            try:
                lst = adjacency_list[i]
            except KeyError:
                adjacency_list[i] = lst = []
            weight = len(s1.intersection(s2))
            lst.append( (j, weight) )
    return adjacency_list
"
python generator of generators?,"from collections import UserList
from functools import partial


def objectitemcaller(key):
    def inner(*args, **kwargs):
        try:
            return getattr(object, key)(*args, **kwargs)
        except AttributeError:
            return NotImplemented
    return inner


class Listable(UserList):
    def __init__(self, iterator):
        self.iterator = iterator
        self.iterated = False

    def __iter__(self):
        return self

    def __next__(self):
        self.iterated = True
        return next(self.iterator)

    def _to_list_hack(self):
        self.data = list(self)
        del self.iterated
        del self.iterator
        self.__class__ = UserList

for key in UserList.__dict__.keys() - Listable.__dict__.keys():
    if key not in [""__class__"", ""__dict__"", ""__module__"", ""__subclasshook__""]:
        setattr(Listable, key, objectitemcaller(key))


def metagen():
    def innergen():
        yield 1
        yield 2
        yield 3

    for i in range(3):
        r = Listable(innergen())
        yield r

        if not r.iterated:
            r._to_list_hack()

        else:
            for item in r: pass

for item in metagen():
    print(item)
    print(list(item))
#>>> <Listable object at 0x7f46e4a4b850>
#>>> [1, 2, 3]
#>>> <Listable object at 0x7f46e4a4b950>
#>>> [1, 2, 3]
#>>> <Listable object at 0x7f46e4a4b990>
#>>> [1, 2, 3]

list(metagen())
#>>> [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
"
python-oauth2 - issue Request objects,"import urllib2
urllib2_req = urllib2.Request(request.url, request.to_postdata())
response = urllib2.urlopen(urllib2_req)
response_body = response.read()    # in case you need it
"
how to Merge two strings based on some conditions,"a = ""  PVT corner         |    TYP_25    |    SLOW_125    SLOW_0_   |    SLOW_M40|    FAST_12 ""
b = "" Description         |  RD   |  WR | A   |  RD     |  WR     |  RD     |  WR     |  RD     |  WR     |  RD     |  WR     ""
head = 0
res = []
for i,(s,t) in enumerate(zip(a,b)):
    if (s,t) == (""|"",""|""):
        res.append([a[head:i].strip()]+[m.strip() for m in b[head:i].split(""|"")])
        head = i + 1
res.append([a[head:].strip()]+[m.strip() for m in b[head:].split(""|"")])

for r in res:
    print r
"
Why doesn't this Python 3 for loop change every variable to 4?,"list = [1,2,3,4,5]
for each in range(len(list)):
    list[each] = 4
print(list)
"
In Python how do I parse the 11th and 12th bit of 3 bytes?,"In [52]: %timeit n = int.from_bytes(bytes_input, 'big')
1000000 loops, best of 3: 237 ns per loop

In [53]: %timeit n >> bit_position & 0b11
10000000 loops, best of 3: 107 ns per loop
"
f.write vs print >> f,"print 1 # prints something like ""1\n""
"
How do I remove a dictionary from a list depending on a value being present in a list in Python?,"seen = set()
temp = set()

with open(infile, 'rt') as f:
    reader = csv.reader(f,delimiter="","")
    next(reader)
    prev = None
    for row in reader:
        # found new name and it is not the first
        if row[0] not in seen and temp:
            # set should only hav  and 1 if all columns only contain 0,1
            if temp == {""0"", ""1""}:
                print(prev)  # print previous row
            # reset temp
            temp = set()
        seen.add(row[0])
        temp.update(row[2:])
        # need to keep track of previous row 
        prev = row
"
Python3 search value in this array,"long_array = [
    ('1','200','300','500','2015-04-25 7:00:00'),
    ('1','200','500','500','2015-04-26 8:00:00'),
    ('1','200','500','500','2015-04-26 8:00:00'), # Repeated
    ('1','200','900','500','2015-04-27 9:00:00'),
    ('1','200','300','500','2015-04-28 17:00:00'),
    ('1','200','300','500','2015-04-28 17:00:00'), # Repeated
    # ...
]
"
Angle between intersecting planes drawn with matplotlib,"# Define inclined plane.
angle = pi * 0.5  # <-- This is the variable
X2, Y2 = np.meshgrid([-dim, dim], [0, dim])
Z2 = Y2 * np.tan(angle)
X3, Y3 = np.meshgrid([-dim, dim], [-dim, 0])
Z3 = Y3 * np.tan(angle)
"
Using python regex to exclude '.' at the end but not inside a string,"re.sub(r'((\@)([\w.-]+[\w]+))', r""<a href='/users/\3'>\1</a>"", htmlcontent)
"
Python ElementTree - Search children/grandchildren in poorly written XML,"import re

from lxml import etree

pattern = re.compile(r""^(\d+) day\(s\)"")

data = """"""your XML here""""""
tree = etree.fromstring(data)

content = tree.findtext("".//String[@name='content']"")
if content:
    match = pattern.search(content)
    if match:
        days = int(match.group(1))

        # TODO: check the days if needed

        node = tree.findtext("".//String[@name='node']"")

        print node, days
"
options for applying conditions to numpy arrays,"result = a[(a==2) | (a==3)]
"
How do I modify all terms following a specific term in a list of terms?,"seen_not = False
output_list = []
for item in input_list:
    if seen_not:
        output_list.append(""NOT_"" + item)
    else:
        output_list.append(item)

    if item == ""not"":
        seen_not = True
"
Importing names from an aliased module. Is it possible?,"import my_package.my_very_long_module_name as foo
from foo import f1, f2, f3
"
How do i randomly select more than one item from a list in linux scripting?,"import random, collections, csv

def pick_non_zero(count):
    ditems = collections.defaultdict(int)

    # Read the current stock file in
    with open(""stock.csv"", ""r"") as f_input:
        csv_input = csv.reader(f_input, delimiter=""\t"")
        headers = csv_input.next()

        for item, quantity in csv_input:
            ditems[item] += int(quantity)

    lchoices = []

    for n in range(count):
        # Create a list of items with quantity remaining
        lnon_zero = [item for item, quantity in ditems.items() if quantity > 0]

        if len(lnon_zero) == 0:
            lchoices.append(""No more stock"")
            break

        # Pick one
        choice = random.choice(lnon_zero)
        # Reduce quantity by 1
        ditems[choice] -= 1
        lchoices.append(choice)

    # Write the updated stock back to the file
    with open(""stock.csv"", ""wb"") as f_output:
        csv_output = csv.writer(f_output, delimiter=""\t"")
        csv_output.writerow(headers)

        for item, quantity in ditems.items():
            csv_output.writerow([item, quantity])

    print ""Stock left""

    for item, quantity in ditems.items():
        print ""%-10s  %d"" % (item, quantity)

    return lchoices

lpicked = pick_non_zero(6)

print
print ""Picked:"", lpicked
"
python 3.3 Beautifulsoup text between 2 sets of classes,"from bs4 import BeautifulSoup

data = '''
<div class=""day""><div class=""content"">Idag<span id='updatedby'>, by <b>Karl</b> (100)     </span></div></div>
<div class=""link""><a href=""out.php?id=XXXXXX"" target=""_blank""><img src=""img/ikon-   Hemsida.gif"" class=""type"" alt=""Hemsida"" /><div class=""text""> Sample text1 </div></a><br />   <div class=""sbar""><img src=""img/comment.gif"" class=""comment"" alt=""Kommentarer"" /> <a    href=""?p=komment&id=xxxxx"">18 comments</a></div></div>
<div class=""link""><a href=""out.php?id=XXXXXX"" target=""_blank""><img src=""img/ikon-Hemsida.gif"" class=""type"" alt=""Hemsida"" /><div class=""text""> Sample text2 </div></a><br /> <div class=""sbar""><img src=""img/comment.gif"" class=""comment"" alt=""Kommentarer"" /> <a href=""?p=komment&id=xxxxx"">18 comments</a></div></div>
<div class=""link""><a href=""out.php?id=XXXXXX"" target=""_blank""><img src=""img/ikon-Hemsida.gif"" class=""type"" alt=""Hemsida"" /><div class=""text""> Sample text3 </div></a><br />  <div class=""sbar""><img src=""img/comment.gif"" class=""comment"" alt=""Kommentarer"" /> <a   href=""?p=komment&id=xxxxx"">18 comments</a></div></div>
<div class=""day""><div class=""content"">2014-01-14<span id='updatedby'>, by<b>Person</b>  (50)</span></div></div>
<div class=""link""><a href=""out.php?id=XXXXXX"" target=""_blank""><img src=""img/ikon-Hemsida.gif"" class=""type"" alt=""Hemsida"" /><div class=""text""> Sample text4 </div></a><br /> <div class=""sbar""><img src=""img/comment.gif"" class=""comment"" alt=""Kommentarer"" /> <a href=""?p=komment&id=xxxxx"">18 comments</a></div></div> 
'''
soup = BeautifulSoup(data)

result = []
tag = soup.find_all('div', {'class': 'day'})[0]
while True:
    tag = tag.next_sibling
    if hasattr(tag, 'class') and 'day' in tag['class']:
        break
    result.append(tag)
for e in result:
    print(e)
"
"Managing script execution using GUI ""buttons"" from Tkinter module","script_thread = None

def startScript():
    global script_thread
    # If we don't already have a running thread, start a new one
    if not script_thread:
        script_thread = MyScript()
        script_thread.start()

def stopScript():
    global script_thread
    # If we have one running, stop it
    if script_thread:
        script_thread.stop()
        script_thread = None
"
Is it possible to implement Newton's Dot Notation (or Lagrange's Prime Notation) in sympy?,"In [10]: x, y = dynamicsymbols('x y')

In [11]: x
Out[11]: x(t)
"
Access child's __dict__ from parent in Python?,"class A:
    @classmethod
    def GetMembers(cls):
        return dict(vars(cls))

class B(A):
    FOO = 'foobar'
    BAR = 'barfoo'
"
Using Django settings in templates,"from django.shortcuts import render_to_response
from django.conf import settings

def my_view(request, ...):
    response_dict = {
        'site_name': settings.SITE_NAME,
        'site_url': settings.SITE_URL,
    }
    ...
    return render_to_response('my_template_dir/my_template.html', response_dict)
"
Override a field in parent class with property in child class,"class C(A, B):
    _x = None

    @property
    def x(self):
        if self._x is not None:
            return self._x
        return self.a + self.y

    @x.setter
    def x(self, val):
        self._x = val
"
Pandas pivot table group summary,"import pandas as pd
import numpy as np

df = pd.DataFrame({'group':['s','s','s','s','p','p','p','p','p'],
                   'section':['b','b','b','a','a','b','a','a','b']
                   })
print (df)
  group section
0     s       b
1     s       b
2     s       b
3     s       a
4     p       a
5     p       b
6     p       a
7     p       a
8     p       b

print (df.groupby(['group', 'section']).size() )
group  section
p      a          3
       b          2
s      a          1
       b          3
dtype: int64

print (df.groupby(['group', 'section']).size().groupby(level=1).agg([len, min, max]) ) 
         len  min  max
section               
a          2    1    3
b          2    2    3
"
Python dictionary vague key search,"from jellyfish import soundex

class SoundexDict(dict):
    # __init__ and __repr__ is left as an exercise for the reader
    def __getitem__(self, key):
        return super().__getitem__(soundex(key))

    def __setitem__(self, key, value):
        super().__setitem__(soundex(key), value)

mydict = SoundexDict()
mydict['google'] = 'google.com'
print(mydict['gewgle'])  # prints 'google.com'
"
How to compare two unequal lists and append matching elements value back to the first List,"List1  = [['A'],['b']]
List2 = ['a','A','c','A','b','b','A','b' ]

from collections import Counter

# gets the frequency count of each element in List2
c = Counter(List2)

# create frequency + 1 objects using the value from our Counter dict
# which is how many times it appears in List2
print([sub * (c[sub[0]] + 1) for sub in List1])
[['A', 'A', 'A', 'A'], ['b', 'b', 'b', 'b']]
"
Python split list by one element,"import numpy as np
l = np.array([(1, 2), (1, 3)])
m = np.array([(3, 1), (2, 4)])
my_list = [l, m]

s = sum(my_list)
for my_element in my_list:
    avg_of_others = (s - my_element) / float(len(my_list) - 1)
"
Issues with Bytes from a Microcontroller in Python,"if data[:2] == b'\xf0\x79':
    assert data[-1] == 0xf7, ""Message did not end with F7 closing byte""
    version = tuple(data[2:4])
    message = data[4:-1].decode('utf-16-le')
"
CSV find max in column and append new data,"text = data.text
rows = [line.split(',') for line in text.split(""\n"") if line]
rows.pop(0)  # get rid of first row from data
max_value = max(row[0] for row in rows)
max_row = max(rows, key=op.itemgetter(0))
"
Fit points to a Lorentzian curve and find center and half maximum bandwidth in Python,"import numpy as np
import scipy as sp
from scipy.optimize import curve_fit

def lorentzian(x, a, x0):
    return a / ((x-x0)**2 + a**2) / np.pi

# Obtain xdata and ydata
...

# Initial guess of the parameters (you must find them some way!)
pguess = [a_guess, x0_guess]

# Fit the data
popt, pcov = curve_fit(lorentzian, xdata, ydata, p0 = pguess)

# Results
a, x0 = popt[0], popt[1]
"
Parsing html for domain links,"url = 'domain.com/'
for domain in list:
    domain_minus_www = domain
    if domain_minus_www.startswith('www.'):
        domain_minus_www = domain_minus_www[4:]
    if url.startswith(domain) or url.startswith(domain_minus_www):
        ... do something ...
"
Checking null object from JSON response in Python,"UNASSIGNED = {'displayName': 'Unassigned'}
for issue in myVals:
    assignee = (issue['fields']['assignee'] or UNASSIGNED)['displayName']
"
Parse a file into a dictionary of arrays,"my_dict={}
with open('file.dat', 'rb') as csvfile:
    dataReader=csv.reader(csvfile)
    for name,item1,item2 in dataReader:
         my_dict.setdefault(name,[]).append([item1,item2])
"
How can I skip the header in Python?,"lineskip1 = 0
for line in airtemp:
    lineskip1 += 1
    if lineskip1 <= 12:  # Skip lines numbered 1 through 12
        continue
    print line
"
python pandas: Simplest way to perform group by and extract count of unique entities?,"In [16]: df.groupby('nr').agg({'name': lambda x: len(x.unique())})
Out[16]:
    name
nr
1      2
2      3
"
psycopg2 execute returns datetime instead of a string,"from datetime import date
import json

class DateEncoder(json.JSONEncoder):

    def default(self, obj):
        if isinstance(obj, date):
            return str(obj)
        return json.JSONEncoder.default(self, obj)
"
Screening out negatives before taking average,"filter (lambda i: i >=0, some_list)
"
Placing of modulo operation in code,"
API for Large Inputs - Lucas Theorem
def mod_inv (a, b):
    return pow(a, b - 2, b)

def small_nCr (n, r, mod):
    hi = max(r, (n - r))
    lo = min(r, (n - r))
    num_prod=1
    den_prod=1
    for each in range (1, lo + 1):
        den_prod = (den_prod * each) % mod
        num_prod = (num_prod * (hi + each)) % mod
    small_c = (num_prod * mod_inv (den_prod, mod)) % mod
    return small_c

def lucas (n, r, mod):
    c = 1
    while (n > 0 or r > 0):
        ni = n % mod
        ri = r % mod
        if (ri > ni):
            return 0
        c = c * small_nCr (ni, ri, mod)
        n = n / mod
        r = r / mod
    return c

def nCr (n, r, mod):
    return lucas (n, r, mod) % mod
"
Python Sleep is way off,"self.driver.find_element_by_link_text(text).is_displayed():
"
How to convert generator object into list?,"sqr = (i**2 for i in xrange(10)) # <generator object <genexpr> at 0x1196acfa0>
list(sqr) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

sqr = (i**2 for i in xrange(10))
for x in sqr:
    print x,
# 0 1 4 9 16 25 36 49 64 81
"
Iteration and replace trough double array,">>> a = [[1, None, 2], [3, 4, 5], [6, None, 7]]
>>> [[0 if x is None else x for x in sublist] for sublist in a]
[[1, 0, 2], [3, 4, 5], [6, 0, 7]]
"
Python tuple key in dictionary not able to fetch,">>> d = {('class1','name1'):3,('class1','name2'):3,('class2','name1'):1,('class2','name2'):2}
>>> dict1 = {k:v for k,v in d.items() if k[0] == ""class1""}
>>> dict2 = {k:v for k,v in d.items() if k[1] == ""class2""}
# in Python2.6 and earlier: dict([(k,v) for k,v in d.items() if blah])
>>> difference = dict(Counter(dict1) - Counter(dict2))
>>> difference
{('class1', 'name2'): 1, ('class1', 'name1'): 2}
"
readlines not reading the last line of the file in python,"cList1 = []
for line in f:
    cList1.append(line.rstrip('\n'))
"
Why are Python lambdas useful?,"def filterfunc(x):
    return x % 3 == 0
mult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])
"
python list_comprehension to get multiple values,"bad_values = filter(lambda value_tuple: value_tuple[1],
                    [(myvalue, why_bad(myvalue)) for myvalue in all_values])
"
Python: Differentiating between row and column vectors,">>> a = np.array([1, 2, 3])
>>> a
array([1, 2, 3])
>>> a[:, np.newaxis]
array([[1],
       [2],
       [3]])
>>> a[np.newaxis, :]
array([[1, 2, 3]])
"
How do I match a word if it starts with a nonalphanumeric character in Python?,"has_1 = any(line == ""1"" for line in f)
"
Preprocessing form data before using it,"def display_form():
    form = FORM('Your name:',
            INPUT(_name='name', requires=IS_NOT_EMPTY()),
            INPUT(_type='submit'))
    if form.process().accepted:
        session.flash = 'form accepted'
        redirect(URL('next'))
    elif form.errors:
        response.flash = 'form has errors'
    else:
        response.flash = 'please fill the form'
    return dict(form=form)
"
I can select randomly from a list... but how do I use this as a variable for different commands? Python,"import random
messages = {
    'animal': ""rawr I'm a tiger"",
    'vegetable': ""Woof, I'm a carrot"",
    'mineral': ""Rumble, I'm a rock"",
}
print messages[random.choice(messages.keys())]
"
Last element in a python iterator,"class IteratorEx(object):
    def __init__(self, it):
        self.it = iter(it)
        self.sentinel = object()
        self.nextItem = next(self.it, self.sentinel)
        self.hasNext = self.nextItem is not self.sentinel

    def next(self):
        ret, self.nextItem = self.nextItem, next(self.it, self.sentinel)
        self.hasNext = self.nextItem is not self.sentinel
        return ret

    def __iter__(self):
        while self.hasNext:
            yield self.next()
"
Copy all values in a column to a new column in a pandas dataframe,"In [1]: import pandas as pd

In [2]: df = pd.DataFrame([['a.1','b.1','c.1'],['a.2','b.2','c.2'],['a.3','b.3','c.3']],columns=['A','B','C'])

In [3]: df
Out[3]:
     A    B    C
0  a.1  b.1  c.1
1  a.2  b.2  c.2
2  a.3  b.3  c.3

In [4]: df['D'] = df['B']                  #<---What you want.

In [5]: df
Out[5]:
     A    B    C    D
0  a.1  b.1  c.1  b.1
1  a.2  b.2  c.2  b.2
2  a.3  b.3  c.3  b.3

In [6]: df.loc[0,'D'] = 'd.1'

In [7]: df
Out[7]:
     A    B    C    D
0  a.1  b.1  c.1  d.1
1  a.2  b.2  c.2  b.2
2  a.3  b.3  c.3  b.3
"
Grouping strings by paragraph,"from itertools import groupby

paragraphs = (list(g) for empty, g in groupby(txt, lambda l: not len(l)) if not empty)
"
Getting values from a dictionary,"X = ['A','B','C']
Y = ['1','2','3']
VALUES_FOR_X = {'A':1, 'B': 2, 'C':3}

class Combination:   # Creates a list of possible position combinations
    def __init__(self,x,y):
        if (x in X) and (y in Y):
            self.x = x
            self.y = y
        else:
            print ""WRONG!!""

    def get_value(self):
        return VALUES_FOR_X[self.x]

    def __repr__ (self):
        return self.x+self.y

class Position:     # Makes operation on the chosen position
    def __init__(self):
        self.xy = []
        for i in X:
            for j in Y:
                self.xy.append(Combination(i,j))

    def choose_last(self):
        return self.xy.pop()



    def __str__(self):
        return ""List contains: "" + str(self.xy)

pos = Position()
print pos
last_item = pos.choose_last()
print ""Last item is:"", last_item
print  last_item.get_value()
"
best way to extract subset of key-value pairs from python dictionary object,"{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"
How to select a node whose subelement includes some text in Python?," import re
 import lxml.etree as ET
 rx = re.compile('.*\(.*\).*')
 data = ET.parse('sample.xml')
 for entry in data.iter('entry'):
    for child in entry.xpath('.//*'):
        if rx.match(child.text + child.tail):
            # Your manipulations go here
            print child
"
wxpython capture keyboard events in a wx.Frame,"class MainWindow(wx.Frame):
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent, title=title, size=(200,100))
        self.panel =  wx.Panel(self, wx.ID_ANY)
        self.Bind(wx.EVT_KEY_DOWN, self.KeyDown)
        self.Bind(wx.EVT_KEY_UP, self.KeyDown)
        self.Bind(wx.EVT_CHAR, self.KeyDown)
        self.panel.SetFocus()

    def KeyDown(self, event=None):
        logging.warning(""OnKeyDown event %s"" % (event))

if __name__ == ""__main__"":
    app = wx.App(False)
    gui = MainWindow(None, ""test"")
    gui.Show()
    app.MainLoop()
"
How to output CDATA using ElementTree,"import elementtree.ElementTree as etree
#~ import cElementTree as etree

def CDATA(text=None):
    element = etree.Element(CDATA)
    element.text = text
    return element

class ElementTreeCDATA(etree.ElementTree):
    def _write(self, file, node, encoding, namespaces):
        if node.tag is CDATA:
            text = node.text.encode(encoding)
            file.write(""\n<![CDATA[%s]]>\n"" % text)
        else:
            etree.ElementTree._write(self, file, node, encoding, namespaces)

if __name__ == ""__main__"":
    import sys

    text = """"""
    <?xml version='1.0' encoding='utf-8'?>
    <text>
    This is just some sample text.
    </text>
    """"""

    e = etree.Element(""data"")
    cdata = CDATA(text)
    e.append(cdata)
    et = ElementTreeCDATA(e)
    et.write(sys.stdout, ""utf-8"")
"
"Taking input containing "" or ' with argparse","print u', '.join([str(value) for value in unicode_values])
"
Accessing selection clipboard from ipython,"import Tkinter # Replace ""Tkinter"" with ""tkinter"" for Python 3.x.
tk = Tkinter.Tk()
tk.withdraw()
print(tk.selection_get())
"
Adding up columns and selecting columns with largest sum,"In [254]:
df = df[s.index[:2]]
df

Out[254]:
    X1  X3
Y         
Y1   1   1
Y2   1   1
Y3   1   0
Y4   0   0
"
"How to set ""step"" on axis X in my figure in matplotlib python 2.6.6?","plt.xticks([1, 2, 3, 4, 5])"
read csv into record array in numpy,"my_data = genfromtxt('my_file.csv', delimiter=',')"
return index for rows in csv module python,"def main():
    tsvfile_input = sys.argv[1]
    data = csv.reader(open(tsvfile_input), delimiter = '\t')
    for index, row in enumerate(data):
        print('Row %d: %f' % (index + 1, sum(float(num) for num in row)))
"
How to convert a Python string to a dimensional array or list,">>> import re
>>> new=[i.split() if re.search(r'\d',i) else i for i in [j for j in re.split(r'\(|\)',s) 
>>> [[int(i) if i.isdigit() else i for i in j] if isinstance(j,list) else j for j in new]
['+ ', ['-', 5, 4], ['-', 2, 1]]
"
Compare equal length lists to find positions that share the same element,"p = []
for i, j in enumerate(zip(*l)):
    if all(j[0]==k for k in j[1:]):
        p.append(i)
"
More efficient solution? Dictionary as sparse vector,"d1 = pandas.DataFrame(numpy.array([1, 4]), index=['a', 'b'], dtype=""int32"")
d2 = pandas.DataFrame(numpy.array([2, 2]), index=['a', 'c'], dtype=""int32"")

d1.add(d2, fill_value=0)
"
Python: Shortest way to extract and count elements from an array of String?,"from collections import Counter
x = ['ab', 'ab', 'ac']
counts = Counter(x)
"
create and insert randomly duplicates,"i = random.randint(0, len(s) - 4)
w = s[i:i+4]
print w
"
"list query, functions in function","def maxagent(gamestate, depth)
    actions = gamestate.getLegalActions(0)
    scores = ( (self.minvalue(gamestate.generateSuccessor(0, a), depth, 1), a)
               for a in actions if a != Directions.STOP
             )
    return max(scores)
...
score, action = maxagent(gamestate, depth)
"
MySQL and PYTHON. How to query an WHERE 'column' IN tuple,"statement = ""SELECT * FROM table""
if filterList:
    statement += "" WHERE column IN ({0})"".format(
        ', '.join(['%s'] * len(filterList)))
cursor.execute(statement, filterList)
"
python re: match everything but a double linebreak,">>> for i in s.split('\n\n'):
        if re.match(r'(?s)__[\d.]+__.*\{: #\w+ \}$', i):
            print(i)


__1.2__ company also consents to other stuff...
Lorem ipsum dolor sit amet, consectetur aquisquam veniam!
{: #lorem_section }
"
How to check dynamic key in dictionary?,"[k for k in d if True if True if True]
['phone', 'gadget_23', 'gadget_56', 'manufacture_23', 'manufacture_1', 'gadget_1', 'price', 'name']
"
How to run jar files in python,"from subprocess import call
call([""java"", ""-jar"", ""foo.jar""])
"
Using python/pandas to search dataframe rows containing both a user-specified integer and approximated float value,">>> df[((df.A - some_float).abs() < abs_tol) & (df.B == 0)]
            A  B
180  0.600577  0
"
How to erase part of a read only file when printing it,"textbeingread = f.readline()[:-1]
"
downloading data using python from a website that uses javascript to display information,"import requests

with requests.Session() as session:
    session.get(""https://www.spice-indices.com/idp2/Main#home"")

    response = session.post(""https://www.spice-indices.com/idp2/intraday/effectivedate/11-14-2015/intraday-announcements.json"", data={
        ""start"": ""0"",
        ""limit"": ""10"",
        ""indexKey"": ""SPUSA-TMI-USDUF--P-US----""
    })

    data = response.json()[""widget_data""]
    for item in data:
        print(item[""EVENT_NAME""])
"
pythonic way for FIFO order in Dictionary,">>> OrderedDict(dog='dom',tiger='EN',panda='EN')  #doesn't preserve order
OrderedDict([('tiger', 'EN'), ('panda', 'EN'), ('dog', 'dom')])
"
How match a paragraph using regex,"for match in re.finditer(r'(?s)((?:[^\n][\n]?)+)', DATA):
   print match.start(), match.end()

# Prints:
# 0 214
# 215 298
# 299 589
"
Python list and for loop,"import itertools

symbols = [""spade"", ""clover"", ""diamond"", ""heart""]
numbers = [""A"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"",       ""K""]

combinations = itertools.product(symbols, numbers)

cards = [""{}:{}"".format(suit, rank) for suit,rank in combinations]
"
Extract unquoted text from a string,"import re
pattern = re.compile(
    r'(?<!\\)(?:\\\\)*(?P<quote>[""\'])(?P<value>.*?)(?<!\\)(?:\\\\)*(?P=quote)'
)

for s in data:
    print pattern.findall(s)
"
Is there a Python standard library class like collections.Counter() but with with lists as values?,"d = collections.defaultdict(list)
for i in f.split(','):
    k, v = i.split('=')
    d[k].append(v)
"
Scraping new ESPN site using xpath [Python],">>> from selenium import webdriver
>>> 
>>> url = ""http://scores.espn.go.com/nba/scoreboard?date=20150405""
>>> 
>>> driver = webdriver.PhantomJS()
>>> driver.get(url)
>>> 
>>> elements = driver.find_elements_by_css_selector(""span.time"")
>>> for element in elements:
...     print element.text
... 

1:00 PM ET
3:30 PM ET
6:00 PM ET
7:00 PM ET
7:30 PM ET
9:00 PM ET
9:30 PM ET 
"
Deleting repeats in a list python,"if mylist:
    mylist.sort()
    last = mylist[-1]
    for i in range(len(mylist)-2, -1, -1):
        if last == mylist[i]:
            del mylist[i]
        else:
            last = mylist[i]
"
extract digits in a simple way from a python string,"map(int, re.findall('\\d+', s))"
Spark reduceByKey on several different values,"import numpy as np
# create a DataFrame (this can also be from an RDD)
df = sqlCtx.createDataFrame(map(lambda x:map(float, x), np.random.rand(50, 3)))
df.agg({col: ""mean"" for col in df.columns}).collect()
"
Traversing and modifying a tree-like list of dict structure,"def dfs(nodes):
    if nodes is not None:
        for node in nodes:
            yield node
            for child in dfs(node['children']):
                yield child

for node in dfs(tree):
    if node['id'] in selected:
        node['selected'] = true
"
Two bar charts in matplotlib overlapping the wrong way,"
import numpy as np
import matplotlib.pyplot as plt

a = range(1,10)
b = range(4,13)
ind = np.arange(len(a))
width = 0.65

fig = plt.figure()
ax = fig.add_subplot(111)
ax.bar(ind+width+0.35, b, 0.45, color='#deb0b0')

ax2 = ax.twinx()
ax2.bar(ind+width, a, width, color='#b0c4de')

ax.set_xticks(ind+width+(width/2))
ax.set_xticklabels(a)

ax.yaxis.set_ticks_position(""right"")
ax2.yaxis.set_ticks_position(""left"")

plt.tight_layout()
plt.show()
"
Python: How to set values of zero in a list/array/pd.Series to be the next non-zero value?,"s.loc[s == 0] = np.nan

s.loc[s == 0] = np.nan
print s.fillna(method='bfill').astype(int).tolist()
[1, -1, -1, -1, 1, 1, -1, -1, -1, -1]
"
Refactoring/cleaningup time function in django view,"def time_encode(hours):
    now = timezone.now().replace(second=0, microsecond=0)
    remainder = now.minute % 15
    delta = (15 - remainder)
    timeFrom = now + timedelta(minutes=delta)
    timeTo = timeFrom + timedelta(hours=hours)
    return (timeFrom, timeTo)
"
Equality of Python classes using slots,"import operator

class CommonEqualityMixin(object):

    __slots__ = ()

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            if self.__slots__ == other.__slots__:
                 attr_getters = [operator.attrgetter(attr) for attr in self.__slots__]
                 return all(getter(self) == getter(other) for getter in attr_getters)

        return False

    def __ne__(self, other):
        return not self.__eq__(other)
"
Python multiprocessing for expensive operation with 2D array,"from multiprocessing import Pool

def f(x):
    return x*x

pool = Pool(processes=4)
print pool.map(f, range(10))
"
Sorting Tuples in a descending order based on the last item given in the tuple,"sorted(tuples, key=lambda t: t[-1])
"
Sorting lists in dictionary,"B = {
      'Mary': [(850, 1000), (9, 10), (1000, 3000), (250, 550)],
      'john': [(500, 1000), (800,3000), (20, 100), (5, 36)],
    }

for item in B:
    B[item].sort(key = lambda i: i[0])
"
Comparing Permutation and Combinations,"inputs = {input1, input2}
found = None
for i, combo in enumerate(combinations(items, 2)):
    if set(combo) == inputs:
        found = i
        break
"
"Is there a way to get function parameter names, including bound-methods excluding `self`?","from inspect import ismethod, getargspec

def exclude_self(func):
    args = getargspec(func)
    if ismethod(func):
        args[0].pop(0)
    return args

exclude_self(c.f) # ArgSpec(args=['a', 'b'], ...)
"
Return function name in python?,"integral.func_name
"
"PyPlot: Trying to generate shared legend in a subplot, but legends don't appear properly when embedded in a loop. (PDF backend)","import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

pie_data = [[1, 2, 3, 4],
            [5, 6, 7, 8],
            [9, 0, 1, 2]]
pie_slice_labels = ['A', 'B', 'C', 'D']
pie_labels = ['1', '2', '3']

PDFfile = PdfPages('output.pdf')

for i in range(4):
    fig, axes = plt.subplots(ncols=len(pie_labels) + 1, figsize=(6,2))

    for ax, data, label in zip(axes, pie_data, pie_labels):
        wedges, labels = ax.pie(data)
        ax.set(title=label, aspect=1)

    # Instead of creating a dummy pie, just use the artists from the last one.
    axes[-1].legend(wedges, pie_slice_labels, loc='center', fontsize='small')
    axes[-1].axis('off')
    # Alternately, you could do something like this to place the legend. If you
    # use this, you should remove the +1 from ncols above. 
    # fig.legend(wedges, pie_slice_labels, loc='center right', fontsize='small')
    # fig.subplots_adjust(right=0.8) # Make room for the legend.

    PDFfile.savefig()

PDFfile.close()
"
Indexing on multiple arguments that depend on each other in pandas dataframe,"import pandas as pd
import numpy as np
df = pd.DataFrame( 
    { ""c1"": np.array(['a','a','b','b','a']) , 
      ""c2"": np.array([1,2,2,2,2])} )
to_keep = {'a':[1],'b':[2,3]}
to_keep = pd.DataFrame([(key, item) for key, val in to_keep.items() for item in val], 
                       columns=['c1', 'c2'])
#   c1  c2
# 0  a   1
# 1  b   2
# 2  b   3

print(pd.merge(df, to_keep, how='inner'))
"
Python generating prime numbers using Set Comprehension,"prime = {x for x in range(2, 100) if all(x % y != 0 for y in range(2, x))}
"
How does one insert a key value pair into a python list?,"data = {
    'a': 15,
    'c': 10,
    'b': 2,
}
# Sort by key:
print [v for (k, v) in sorted(data.iteritems())]
# Output: [15, 2, 10]
# Keys, sorted by value:
from operator import itemgetter
print [k for (k, v) in sorted(data.iteritems(), key = itemgetter(1))]
# Output: ['b', 'c', 'a']
"
Jinja: loop to create form fields with same name but the last character,"{% for r in range(1, 13) %}
    {{ form['sold_' ~ r] }}
{% endfor %}
"
Not able to sort the unicode numbers in python,">>> import natsort
>>> c = [u'9', u'9', u'54', u'51', u'48', u'48', u'47', u'46', u'46', u'45', u'44', u'44', u'43', u'43', u'43', u'42', u'42', u'41', u'41', u'41', u'41', u'41', u'40', u'38', u'38', u'38', u'38', u'37', u'37', u'37', u'36', u'36', u'36', u'36', u'35', u'35', u'35', u'35', u'35', u'35', u'35', u'34', u'34', u'33', u'33', u'33', u'33', u'33', u'32', u'32', u'32', u'31', u'31', u'31', u'30', u'30', u'29', u'29', u'29', u'29', u'29', u'29', u'29', u'26', u'26', u'25', u'25', u'25', u'24', u'24', u'24', u'24', u'23', u'2', u'17', u'16', u'12', u'1', u'1', u'1', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0']
>>> natsort.natsorted(c)
[u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'1', u'1', u'1', u'2', u'9', u'9', u'12', u'16', u'17', u'23', u'24', u'24', u'24', u'24', u'25', u'25', u'25', u'26', u'26', u'29', u'29', u'29', u'29', u'29', u'29', u'29', u'30', u'30', u'31', u'31', u'31', u'32', u'32', u'32', u'33', u'33', u'33', u'33', u'33', u'34', u'34', u'35', u'35', u'35', u'35', u'35', u'35', u'35', u'36', u'36', u'36', u'36', u'37', u'37', u'37', u'38', u'38', u'38', u'38', u'40', u'41', u'41', u'41', u'41', u'41', u'42', u'42', u'43', u'43', u'43', u'44', u'44', u'45', u'46', u'46', u'47', u'48', u'48', u'51', u'54']
"
List files in ONLY the current directory,"files = [f for f in os.listdir('.') if os.path.isfile(f)]
for f in files:
    # do something
"
Obtaining dictionary value in Python,"sozluk_ata = {20225: 17, 20232: 9, 20233: 22, 20234: 3, 20235: 28, 20236: 69}

for key in sozluk_ata:
    print(key, sozluk_ata[key])
"
How to add list to dictionary by using index of list as key and item of list as value?,">>> list1 = [""a"",""b"",""c""]
>>> dict1 = {7:""d"",8:""e"",9:""f""}
>>> dict1.update(dict(enumerate(list1)))
>>> dict1
{0: 'a', 1: 'b', 2: 'c', 7: 'd', 8: 'e', 9: 'f'}
"
How to convince python that an int type is actually a hex type?,"class hexNumber:
   def __init__(self,x):
      if isinstance(x,str):
         self.val = int(x,16)
      elif isinstance(x,int):
         self.val = int(str(x),16)
   def __str__(self):
          return hex(self.val)

y = hexNumber(12345)
print ""%s""%y
print isinstance(y,hexNumber)

y = hexNumber(""1234abc"")
print ""%s""%y
print isinstance(y,hexNumber)
"
python: fast and easy way to compare these lists?,">>> from collections import OrderedDict
>>> counter = (Counter(dict(foo)) + Counter(dict(bar)))
>>> order = OrderedDict(foo + bar).keys()
>>> [[k, counter[k]] for k in order]
[['one', 1], ['two', 1], ['three', 2], ['four', 1], ['five', 1]]
"
Pandas: How to get a new dataframe filled with unions of 2 or 3 or X other dataframes?,"import pandas as pd

df1 = pd.DataFrame({'A': range(5)}, index=list('abcde'))
df2 = pd.DataFrame({'A': range(5)}, index=list('AbCdE'))
print(df1)
#    A
# a  0
# b  1
# c  2
# d  3
# e  4

print(df2)
#    A
# A  0
# b  1
# C  2
# d  3
# E  4

print(df1.reindex(df1.index.intersection(df2.index)))
"
Python - checking if an element is in two lists at the same time,"elems_in_both_lists = set(list1) & set(list2)
"
Creating a list from a string that contains numbers separated by commas; Python 3,"def is_numeric(s):
    is_digit = True

    for char in s:
        if not char.isdigit() and char not in ["" "", ""."", "",""]:
            is_digit = False
            break

    return is_digit
"
Unrolling / expanding a dictionary of iterables into a dataframe,"df[0].fillna(np.Inf, inplace=True)
df2 = pd.concat([df[col] for col in df], axis=0)
df2.dropna(inplace=True)
df2[df2 == np.Inf] = np.NaN
"
Re-reading file when cycling over a file object in Python,"(line for f in (itertools.chain(f, (f for f in (f,) if f.close() and False))
                for f in (open(""filename"") for _ in itertools.repeat(())))
 for line in f)
"
How do I find only whole words using re.search?,"for w in words:
     if re.search('^[a-zA-Z]+$', w) == None:
          continue
"
Numba 3x slower than numpy,"@jit(nopython=True)
def numba_get_pos_neg_bitwise(df, mask):
    pos = np.zeros(df.shape[0])
    neg = np.zeros(df.shape[0])
    vandmask = np.bitwise_and(df[:, 1:], mask)

    for idx in range(df.shape[0]):

        # numba fail with # if np.all(vandmask == mask):
        vandm_equal_m = 1
        for i in xrange(vandmask.shape[1]):
            if vandmask[idx,i] != mask[i]:
                vandm_equal_m = 0
                break
        if vandm_equal_m == 1:
            if df[idx, 0] == 1:
                pos[idx] = 1
            else:
                neg[idx] = 1
    pos = np.nonzero(pos)[0]
    neg = np.nonzero(neg)[0]
    return pos, neg
"
How to efficiently loop through a dictionary when deleting elements from the same (mutated),"if key in a:
    del a[key]
"
How to pass global variables between files in python,"configobj = None

def getconfigobj():
  global configobj
  if not configobj:
    configObj = config.Config()
  return configobj
"
Python Web Crawler not printing any result,"def stepashka_spider(max_pages):
    for page in range(1,max_pages+1):
        url = ""http://online.stepashka.com/filmy/page/{}/"".format(page)
        source_code = requests.get(url)
        plain_text = source_code.text
        soup = BeautifulSoup(plain_text)
        print(""Movies for page {}"".format(page))
        for resoult in soup.findAll(""div"", {""class"": ""video-title""}):
            a_tag = resoult.a
            print(a_tag[""href""])
        print()
"
Calling methods inside class to modify list,"from inspect import ismethod

class MethodTracker(object):
    def collect_data(self):
        data = {}
        for attr in dir(self):
            if not attr.startswith('_') and not hasattr(MethodTracker, attr):
                possible_method = getattr(self, attr)
                if ismethod(possible_method):
                    data.update(possible_method())
        return data

    def decoy_method(self):
        return 'This is not added to data.'

class Example(MethodTracker):
    def method_a(self):
        return [('key_a1', 'val_a1'), ('key_a2', 'val_a2')]

    def method_b(self):
        return [('key_b1', 'val_b1'), ('key_b2', 'val_b2')]
"
Is there a possibility to define dtype only once for all columns?,"np.dtype([('field_%d'%i, '<f8') for i in range(4)])

np.dtype({'formats':['f8']*4, 'names':['f%s'%i for i in range(4)]})

np.format_parser(['f8']*4,[],[]).dtype  # auto generate names
"
Adding Lists Elements to 'Mega List',">>> from functools import reduce
>>> from operator import add
>>> reduce(add, mayorPowers)
['germany', 'italy', 'japan', 'russia', 'uk', 'us']
"
Whole words in python regular expression,"import re

text = ""First line\n"" + \
    ""Second line\n"" + \
    ""Important line! E-mail:mail@domain.de, Phone:991\n"" + \
    ""Another important line! E-mail:tom@gmail.com, Phone:001\n"" + \
    ""Another line""
print text

emails = re.findall(""E-mail:([\w@.-]+)"", text)
print ""Found email(s): "" + ', '.join(emails)
"
Having trouble with pythonic style and list comprehension,"print [idx for idx, field in enumerate(fieldnames) if values[idx] is not None]
# [1, 3]
"
re.split return None in function but normaly works OK,"from subprocess import check_output
def whois(k,  i):
    k = str(k[i])
    who = check_output(['whois',  k], universal_newlines=True)
    who = who.split('NetName:')[1]
    who = who.split('NetHandle')[0]
    return  who.replace(r'\n', '')
"
Python - testing if an object attribute is equal to a given value,"matching = [p for p in people if p.name == 'Bob']
"
how to make this script a little bit faster?,"import math
N = 600851475141
divisors = []
for i in xrange(1, int(math.sqrt(N))+1):
    if N % i == 0:
        divisors.extend(set((i, N//i)))
for d in sorted(divisors):
    print(d)
"
Pythonic method to sum all the odd-numbered lines in a file,"from itertools import islice

with open(""test_file1.txt"", ""r"") as f:
   for line in islice(f, 1, None, 2):
       nums = [int(n) for n in line.split()]
       print 'Sample size: {}  Results: {}'.format(len(nums), sum(nums))
"
How to webscrape this website,"import requests
r = requests.post('http://money.rediff.com/indices/bse/bsesmallcap',
              data={'currentPageNo': 3, 'RowPerPage': 100})
print r.text
"
Index of an element in a numpy array,"In [182]: i, j = np.where(A == 2)

In [183]: A[i,j]
Out[183]: array([2])
"
Function that extracts value from one array depending on the value of another array,"def my_func(a,b):
    result = [b[i] for i in range(len(b)) if a[i] == 5]
    return np.asarray(result)
"
begginer Python -Trouble with concatenating an array of 4 binary ints,"L = [0,1,1,0]
print("""".join(map(str, sorted(L, reverse=True)))) # O(n*log n)
"
Counting a set of characters in a string,"def test(N):
    s = 'qed'
    count = 0
    for i in range(len(N)-2):
        if N[i:i+3] == s:
            count += 1
    return count

>>> test('qedmlqedlolqed')
3
"
__getattr__ throwing maximum recursion error when __setattr__ implemented,"from math import pi, hypot, sqrt
'''
Circle class using __getattr__, and __setattr__ (rename circle2)
'''


# __getattr__(self, name): Automatically called when the attribute name
#       is accessed and the object has no such attribute.
# __setattr__(self, name, value): Automatically called when an attempt is made to bind the attribute name to value.

class Circle:
    def __init__(self, x, y, r):
        self._intialized = False
        self.x = x
        self.y = y
        self.r = r
        self.area = pi * self.r * self.r
        self.circumference = 2 * pi * self.r
        self.distance_to_origin = abs(sqrt(self.x * self.x + self.y * self.y) - self.r)
        self._intialized = True


    def __setattr__(self, name, value):
        if name in ['_intialized']:
            self.__dict__[name] = value
            return
        if name in ['x', 'y']:
            if isinstance(value, int):
                print('we can set x,y')
                self.__dict__[name] = value
            else:  # value isn't an int
                raise TypeError('Expected an int for: {}'.format(name))
        elif not self._intialized:
            self.__dict__[name] = value

        elif name in ['area', 'circumference', 'distance_to_origin']:
            raise AttributeError('Cannot set attribute: {}'.format(name))

if __name__ == '__main__':

    circle = Circle(x=3, y=4, r=5)
    print('x:', circle.x)
    print('y:', circle.y)
    print('r:', circle.r)
    print('area:', circle.area)
    print('circumference:', circle.circumference)
    print('distance_to_origin:', circle.distance_to_origin)
    tests = [('circle.x = 12.3', ""print('Setting circle.x to non-integer fails')""),
             ('circle.y = 23.4', ""print('Setting circle.y to non-integer fails')""),
             ('circle.area = 23.4', ""print('Setting circle.area fails')""),
             ('circle.circumference = 23.4', ""print('Setting circle.circumference fails')""),
             ('circle.distance_to_origin = 23.4', ""print('Setting circle.distance_to_origin fails')""),
             ('circle.z = 5.6', ""print('Setting circle.z fails')""),
             ('print(circle.z)', ""print('Printing circle.z fails')"")]
    for test in tests:
        try:
            exec(test[0])
        except:
            exec(test[1])
"
Appending variable length columns in Pandas dataframe Python,"df = pd.DataFrame({col: pd.Series(range(df[col].iloc[0], 
                                        df[col].iloc[-1] + 1)) for col in df.columns })
"
Python IF Statement not being displayed,"#FinalGrade

results = []

print (""\n"")
print (""-----------------------------------------------------------------------------"")
print (""\n"")
Institution = str(input(""Please Enter the Name of Your Insitution: ""))

while True:
   print (""\n"")
   print (""---------------------------------NEW STUDENT---------------------------------"")
   print (""\n"")
   Year = str(input(""Please Enter the Year of the Student (For Example, 'Year 1 / 2 / 3 / 4'): ""))
   print (""\n"")
   print (""-----------------------------------------------------------------------------"")
   print (""\n"")
   Student = str(input(""Student Full Name: ""))
   print (""\n"")
   Grade1 = int(input(""Enter Student's First Term Grade: ""))
   Grade2 = int(input(""Enter Student's Second Term Grade: ""))
   Grade3 = int(input(""Enter Student's Third Term Grade: ""))
   Grade4 = int(input(""Enter Student's Fourth Term Grade: ""))

   average =  (Grade1+Grade2+Grade3+Grade4)/4

   print (""\n"")
   print (""-----------------------------------------------------------------------------"")
   print (""\n"")
   print (""Total Grade Average: %G"" % (average))

   passed_or_failed = ""PASSED""
   if average < 40:
      passed_or_failed = 'FAILED'
   results.append(passed_or_failed)

   print (""\n"")
   print (""%s has: %s"" % (Student, passed_or_failed))
   print (""\n"")

   cont = input('Do you want to keep entering students? Y/N: ')

   if cont.lower() == ""n"":
      print (""\n"")
      print (""-----------------------------------------------------------------------------"")
      print (""\n"")
      print (""Thank you for using FinalGrade. Goodbye."")
      break
"
to check a condition for all the items in two list in python,"matching = (l for l, b in zip(L, B) if l > float(b * 1.1))
"
Integrating a vector field (a numpy array) using scipy.integrate,"import numpy as np
import matplotlib.pyplot as plt
import scipy.interpolate as interp
import scipy.integrate as integrate

#dummy input from the streamplot demo
y, x = np.mgrid[-3:3:100j, -3:3:100j]
vx = -1 - x**2 + y
vy = 1 + x - y**2

#dfun = lambda x,y: [interp.griddata((x,y),vx,np.array([[x,y]])), interp.griddata((x,y),vy,np.array([[x,y]]))]
dfunx = interp.interp2d(x[:],y[:],vx[:])
dfuny = interp.interp2d(x[:],y[:],vy[:])
dfun = lambda xy,t: [dfunx(xy[0],xy[1])[0], dfuny(xy[0],xy[1])[0]]

p0 = (0.5,0.5)
dt = 0.01
t0 = 0
t1 = 1
t = np.arange(t0,t1+dt,dt)

streamline=integrate.odeint(dfun,p0,t)

#plot it
plt.figure()
plt.plot(streamline[:,0],streamline[:,1])
plt.axis('equal')
mymask = (streamline[:,0].min()*0.9<=x) & (x<=streamline[:,0].max()*1.1) & (streamline[:,1].min()*0.9<=y) & (y<=streamline[:,1].max()*1.1)
plt.quiver(x[mymask],y[mymask],vx[mymask],vy[mymask])
plt.show()
"
Find all combinations of a list of numbers with a given sum,"import itertools
numbers = [1, 2, 3, 7, 7, 9, 10]
result = [seq for i in range(len(numbers), 0, -1) for seq in itertools.combinations(numbers, i) if sum(seq) == 10]
print result
"
Replacing punctuation in a data frame based on punctuation list,"In [49]:

df['text'] = df['text'].str.replace('[^\w\s]','')
df
Out[49]:
         text
0        test
1       hgh12
2      abc123
3  porkyfries

[4 rows x 1 columns]
"
Compare object instances for equality by their attributes in Python,"class Test(object):

    def __init__(self, attr1, attr2):
        self.attr1 = attr1
        self.attr2 = attr2

    def __str__(self):
        return str(self.__dict__)

    def __eq__(self, other): 
        return self.__dict__ == other.__dict__

t1 = Test(""foo"", 42)
t2 = Test(""foo"", 42)
t3 = Test(""bar"", 42)

print t1, t2, t3
print t1 == t2
print t2 == t3
"
How are POST and GET variables handled in Python?,"import cgi
form = cgi.FieldStorage()
print form[""username""]
"
what should I change in my function,"def fun(list_1):
    for each_value in list_1:
        # perform some operation and create a new data frame(pandas) named ""new_data_frame"" for each value in the list
        print each_value
        yield new_data_frame

for data_frame in fun(list_1):
    # Do something with the data frame ""data_frame""
"
Pipe result from subprocess to unix sort,"  p = subprocess.Popen([""perl"", ""pydyn.pl"", file], stdout=subprocess.PIPE)
  output = subprocess.check_output(['sort'], stdin=p.stdout,stdout=outfile)
  p.wait()
"
Select day of month as start of date range using Pandas,"df.insert(0,'adjusted_day',df.index)
df.adjusted_day = df.adjusted_day.apply(lambda x: (x + timedelta(days=-plus_days)).day) 
df[(df.index.day>=from_day) | ((df.adjusted_day <=from_day) & (df.adjusted_day >=from_day-plus_days))]
"
Padding multiple character with space - python,"import re

p = ur'([،;؛¿!""\])}»›”؟%٪°±©®।॥…])'
text = u""this, is a sentence with weird» symbols… appearing everywhere¿""

print re.sub(p, ur' \1 ', text)
"
How do I add tags to certain strings in python using re.sub?,">>> regex = re.compile(r'((iphone|games|mac)(\s*(iphone|games|mac))*)', re.I)
>>> regex.sub(r'<em>\1</em>', sentence)
'I love downloading <em>iPhone games</em> from my <em>mac</em>.'
"
Count frequency of letters in a text file,"from collections import Counter
with open(file) as f:
    c = Counter()
    for x in f:
        c += Counter(x.strip())
"
generate a random string with only certain characters allowed to repeat in python,"numbers = [""1"", ""2"", ""3""]
letters = [""X"", ""Y"", ""Z""]

from random import sample, shuffle


samp = sample(letters,2)+sample(numbers*3,8)
shuffle(samp)

print("""".join(samp))
113332X2Z2
"
How to print different results to a screen and to a file in python?,"`http --print hb google.com > out.txt`
"
How can I send the output of a Logger object in python to a file?,"import logging # Debug logging framework
logging.basicConfig(filename='c:\\loggggggmeee.txt')
logger = logging.getLogger('simulation')
logger.setLevel(logging.INFO)

#--------------- etc-------------------#

logger.info('This is sent to the console')
"
an elegant way to concatenate a list of chars in a string in Python,"''.join(['h', 'e', 'l', 'l', 'o'])
=> 'hello'
"
unsupported operand type(s) for +: 'int' and 'tuple',">>> a = [('Tim Jones', 54), ('Anna Smith', 56), ('Barry Thomas', 88)]
>>> sorted(a,key=lambda x: x[1])
[('Tim Jones', 54), ('Anna Smith', 56), ('Barry Thomas', 88)]
"
Printing the sublist in which the required number is found,"for i in list:
    if (i[0])==6:
        print ""Yes""
        print i
"
"Numpy: For every element in one array, find the index in another array","import numpy as np
x = np.array([3,5,7,1,9,8,6,6])
y = np.array([2,1,5,10,100,6])

index = np.argsort(x)
sorted_x = x[index]
sorted_index = np.searchsorted(sorted_x, y)

yindex = np.take(index, sorted_index, mode=""clip"")
mask = x[yindex] != y

result = np.ma.array(yindex, mask=mask)
print result
"
"What does python3 do with the methods passed to the ""key"" argument of sorted()?","class MyClass(object):
...     def my_method(self): pass
...
>>> MyClass.my_method
<function my_method at 0x661c38>
"
Entering Parameters in Python,">>> import random
>>> parameters = [[1,3,2], [4,5,6]]
>>> random.triangular(*parameters[0])
1.796949832039262
"
how to direct a sh script to run a python script?,"import os

name = ""in_file%d""
for i in range(1, 21):
    os.system(""python code.py in_file{} in_file2 outfile{}"".format(i, i))
"
if typeA in [typeB.typeA for typeB in typeBlist]: ... accessing typeB within the if clause?,"try:
    return (typeB for typeB in typeBlist if typeB.typeA == typeA).next()
except StopIteration:
    return None
"
Formatting custom class output in PyYAML,"import datetime

import yaml

time_format = '%H:%M:%S'

class A(yaml.YAMLObject):
    yaml_tag = u'!A'

    def __init__(self, val):
        self.val = val

    @classmethod
    def to_yaml(cls, dumper, data):
        dict_representation = {
            'val':data.val.strftime(time_format)
        }
        node = dumper.represent_mapping(u'!A', dict_representation)
        return node

    @classmethod
    def from_yaml(cls, loader, node):
        dict_representation = loader.construct_mapping(node)
        val = datetime.datetime.strptime(
            dict_representation['val'], time_format).time()
        return A(val)

if __name__ == '__main__':
    t = datetime.time()
    a = A(t)
    print yaml.dump([t,a], default_flow_style=False)

    loaded = yaml.load(yaml.dump([t,a]))
    print loaded[0] == t
    print loaded[1].val == t
"
Change value of currently iterated element in list in python,"for idx, a in enumerate(foo):
    foo[idx] = a + 42
"
Count duplicate records between two pattern,"txt='''\
Cluster 1
one
one
two
two
two
Cluster 2
two
one
one
two
Cluster 3
one
Cluster 4
two
two
one
'''

import re

for t in re.findall(r'(Cluster \d)(.*?)(?=Cluster|$)', txt, re.S):
    print t[0],t[1].count('one'), t[1].count('two')
"
How can I create a single raw string from multiple literals in Python?,">>> s = (
...     r""foo\tbar\n""
...     r""baz\tqux\n"")
>>> s
'foo\\tbar\\nbaz\\tqux\\n'
>>> s = ''.join(r""""""
... foo\tbar\n
... baz\tqux\n
... """""".splitlines())
>>> s
'foo\\tbar\\nbaz\\tqux\\n'
>>> from textwrap import dedent
>>> s = ''.join(dedent(r""""""
...     foo\tbar\n
...     baz\tqux\n
... """""").splitlines())
>>> s
'foo\\tbar\\nbaz\\tqux\\n'
"
Extracting table info using BeautifulSoup (bs4),"from selenium import webdriver
from bs4 import BeautifulSoup

url = ""http://biology.burke.washington.edu/conus/accounts/../recordview/record.php?ID=1ll&tabs=21100111&frms=1&res=&pglimit=A""

driver = webdriver.Firefox()
driver.get(url)
driver.switch_to_frame(driver.find_elements_by_tag_name('iframe')[0])
soup = BeautifulSoup(driver.page_source)
tables = soup.find_all('table')
#print(tables)
driver.quit()
"
How to find number of matches in the array or dictionary?,"my_dict = {0: 1, 2: 1, 4: 5, 6: 3, 8: 4, 10: 4, 12: 1}
print sum(1 for x in my_dict.values() if x == 4)
"
Count odds in list of lists,"list_of_lists = [[1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5],
                 [1, 2, 3, 4, 5]]

print(sum(i % 2 for sub in list_of_lists for i in sub))
"
python: run interactive python shell from program,"import code

code.interact(local=locals())
"
Finding duplicate files via hashlib?,"duplicates = [files for files in file_dict.values() if len(files) > 1]
"
Different results when running in python interpreter vs. script file,"import glob
glob.glob(""/path/to/directory/*/SomeDir/path/*"")
"
"generate min combining multiple lists, return lowest uncombined list?",">>> min(example, key=lambda element: (element[0] / element[1]) + element[1])
(4, 2)
"
Several functions without global variable,"while True:
    # do stuff
    if condition:
        break
"
What is the most efficient way to move/rename a node in NetworkX?,"import networkx as nx
G = nx.Graph()
G.add_node(1)
G.add_nodes_from('spam')
print G.nodes()
"
How to read specific line in python and print data to text file or console window?,"for line in inputfile:
  line = line.strip() #remove whitespace before and after
  if line[0:6] == 'DeltaE':
    #then we have a line like: DeltaE =    13.5423 | TDMI^2 = 0.6670E-01, Intensity =  6553.
    deltae = float(line.split('|')[0].strip().split('=')[1].strip())
    intensity = float(line.split('|')[1].strip().split(',')[1].strip().split('=')[1].strip())

    print deltae, ',', intensity
"
Counting files and incrementing variable Python,"filecount = len([name for name in os.listdir('.') if os.path.isfile(name)])
"
Make ipdb prompt colored,"grep -r ""ipdb>"" *
"
"get restricted page after login using requests,urllib2 python","from robobrowser import RoboBrowser

browser = RoboBrowser(history=True,
    user_agent='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/33.0.1750.152 Chrome/33.0.1750.152 Safari/537.36')
browser.open('http://selleraccounts.snapdeal.com/')

form = browser.get_form(id='fm1')
form['username'].value = myusername
form['password'].value = mypassword
browser.submit_form(form)
"
How to sort a dataFrame in python pandas by two or more columns?,"df.sort(['a', 'b'], ascending=[True, False])
"
python - 2 math questions,"def A(dx, dy):
  return math.degrees( math.atan2(dy, dx) )

def LengthDir(length, angle):
  radian_angle = math.radians(angle)
  return (length * math.cos(radian_angle), length * math.sin(radian_angle))
"
Deleting parts of a frame using grid_forget Tkinter,"for i in xrange(self.number_boxes):

    self.box[i].grid_remove()
    self.choice_title.grid_remove()
"
How to separate strings in a list in python?,">>> [item for string in original for item in string.split(',') if item]
['state1', 'state2', 'st6']
"
Python3 convert Unicode String to int representation,">>> chr(97)
'a'
>>> chr(193)
'Á'
"
list comprehension with some equal action python,"[items_dict.__setitem__(x, to_string_and_select(x)) for x in we_need_this]
"
Is it possible to run a while loop and check for tkinter input in python 3,"command=lambda:nxt(count)
"
How can I create a script that manufactures MLA citations?,"from glob import glob
from urllib2 import urlopen
from ConfigParser import ConfigParser
from re import search

# I use RE here, you might consider BeautifulSoup because RE can be stupid
TITLE = r""<title>([^<]+)</title>""

result = []
for file in glob(""*.url""):
    config = ConfigParser.ConfigParser()
    config.read(file)
    url = config.get(""InternetShortcut"", ""URL"")

    # Get the title
    page = urlopen(url).read()
    try: title = search(TITLE, page).groups()[0]
    except: title = ""Couldn't find title""

    result.append((url, title))

for url, title in result:
    print ""'%s' <%s>"" % (title, url)
"
How can I sum the product of two list items using for loop in python?,"sum(x * y for x, y in list(zip(a, b)))"
"How to remove specific object from a list, if I can't use the variable it is attached to, to find its index?","balls = [ x for x in balls if x.times_bounced <= N ]
"
Longest repeated substring,"def longest_substr(lst):
    longest = None
    for word in lst:
        for i in range(len(word)):
            for j in range(i+1, len(word)+1):
                if ((longest is None or (j - i > len(longest))) and
                    sum(word[i:j] in w for w in lst) > 1):
                    longest = word[i:j]
    return longest
"
How do I hook into tkinters FileDialog?,"def ask_for_directory(self):
    self.directory_path = filedialog.askdirectory(mustexist=True, title=self.dialog_title)
    if self.directory_path:

        # Check that we have access to the path
        if not os.access(self.directory_path, os.R_OK):

            # If we don't have access
            if messagebox.askretrycancel(title=self.dialog_title, message=""Can't read directory.""):
                self.ask_for_directory()
"
"Removing odd \n, \t, \r and space combinations from a given string in Python",">>> ex_str = u'Word   \n \t \r   \n\n\n word2    word3   \r\r\r\r\nword4\n    word5'
>>> '\n'.join([' '.join(line.split()) for line in ex_str.splitlines() if line.strip(' ')])
u'Word\nword2 word3\nword4\nword5'
"
Split 32-char string into 4 groups of 8,"ostringstream strm;
strm << ""{"" << ""0x"" << str.substr(0, 8) << "",0x"" << str.substr(8, 8)
            << "",0x"" << str.substr(16, 8) << "",0x"" << str.substr(24, 8) << ""}"";
str = strm.str();
"
Use the header as axis and first column as axis,"from io import StringIO

import matplotlib.pyplot as plt
import pandas

data = StringIO(""""""\
Region  Q1  Q2  Q3  Q4
West    1   5.2 3.1 2.05
Center  3.1 1.2 1.2 3
East    1.9 4.1 1.1 5.3
"""""")

df = pandas.read_table(data, sep='\s+')
df = df.set_index('Region')
df.plot(kind='bar')
"
How to correctly access elements of a nested list in python,"def is_corner(lst, i, j):
    return i >= 0 and j > 0 and lst[i-1][j] == ""bar"" and lst[i][j-1] == ""bar""

new_nested_list = [[""bar"" if is_corner(nested_list, i, j) else nested_list[i][j]
                    for j in range(WIDTH)]
                   for i in range(HEIGHT)]
"
How do I re-run code in Python?,"phrase = ""hello, world""

while (input(""Guess the phrase: "") != phrase):
    print(""Incorrect."") //Evaluate the input here
print(""Correct"") // If the user is successful
"
Using lambda to create new list by altering/modifying old list,">>> oldlist = ['a','b','c']
>>> enumerate(oldlist)
<enumerate object at 0x7f5e58a455f0>
>>> list(enumerate(oldlist))  # default start = 0
[(0, 'a'), (1, 'b'), (2, 'c')]
>>> list(enumerate(oldlist, 1))  # explicitly specify `start`
[(1, 'a'), (2, 'b'), (3, 'c')]
"
Find all combinations of palindromic substrings,"def palindromic_substrings(s):
    if not s:
        yield []
        return
    for i in range(len(s), 0, -1):
        sub = s[:i]
        if sub == sub[::-1]:
            for rest in palindromic_substrings(s[i:]):
                yield [sub] + rest
"
convert array to json object,"def replace_empty_dict_with(d, value):
    for k, v in d.iteritems():
        if len(v) == 0:
            d[k] = value
        else:
            replace_empty_dict_with(v, value)

d = {}
w = {}
for node, pid, _ in main_array:
    if pid == -1:
        w[node] = d[node] = {}
    else:
        parent = main_array[pid][0]
        w[node] = w[parent][node] = {}

replace_empty_dict_with(d, -1)
import pprint
pprint.pprint(d)
"
Z3: can Z3 tells me if arithmetic operations return concrete value?,"a, b, c = BitVecs('a b c', 32)
solve(a == b + c, c == b + 5)
"
Python - Easiest way to get ordered key/value pairs from dictionary?,"age_range, freq = zip(*sorted(age_freq.items(), key=lambda x: (int(x[3].split('-')[0]) + int(x[3].split('-')[1]) / 2))
"
How to copy all attributes of one Python object to another?,"class Parent(object):
   def __init__(self, name, number):
       self.name = name
       self.number = number


class Child(object):
    def __init__(self, parent, other):
        self.parent = parent
        self.other = other

    def __getattr__(self, name):
        try:
            return getattr(self.parent, name)
        except AttributeError, e:
            raise AttributeError(""Child' object has no attribute '%s'"" % name)

p = Parent(""Foo"", 42)
c = Child(p, ""parrot"")
print c.name, c.number, c.other
p.name = ""Bar""
print c.name, c.number, c.other
"
python: Sorting a list of lists over a range of elements,"array[np.lexsort(array[:,1:].T)]
"
specific implementation of dictionary,"class dictholder():
    def __init__(self):
        self.dict = {}

    def add(self, name, time):
        if name in self.dict:
            if (abs(time) - abs(self.dict[name][0]) < 2):
                self.dict[name][1] += 1
                self.dict[name][0] = time
                if self.dict[name][1] == 3:
                    del self.dict[name]
        else:
            self.dict[name] = [time, 1]
        for item in self.dict:
            if (abs(time) - abs(self.dict[item][0]) > 2):
                self.dict[item][1] = 1

    def get(self):
        return self.dict
"
Check if there are values other than a certain value exists in a list,"def any(iterable):
    for element in iterable:
        if element:
            return True
    return False
"
django convert .values_list('datetimefield') to date,">>> dt = datetime.datetime.now()
>>> dt
datetime.datetime(2016, 4, 12, 15, 54, 48, 401418)
>>> dt.date()
datetime.date(2016, 4, 12)
"
how to merge duplicate elements?,"from collections import defaultdict
l = ['X', 'X', 'Y', 'Z']

v = [3, 2, 3, 5]

n = defaultdict(list)

for a, b in zip(l, v):
    n[a].append(b)

print(n.values()) # [[3], [3, 2], [5]]
"
Manipulating a list by slicing in Python3.x,"from itertools import izip_longest, chain

def grouper(iterable, n, fillvalue=None):
    ""Collect data into fixed-length chunks or blocks""
    # grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]
result = list(chain.from_iterable(reversed(list(grouper(lst, 3)))))
"
Sorting nested python dictionary by label,">>> lst = [(int(key), value['std']) for key, value in sd_dict.items()]
>>> lst.sort(key=lambda x: (x[1], x[0]))
>>> lst
[(4555, 5656), (5667, 5656)]
"
Use argparse to call different functions,"# Parse the subcommand argument first
parser = ArgumentParser(add_help=False)
parser.add_argument(""function"", 
                    nargs=""?"",
                    choices=['function1', 'function2', 'function2'],
                    )
parser.add_argument('--help', action='store_true')
args, sub_args = parser.parse_known_args(['--help'])

# Manually handle help
if args.help:
    # If no subcommand was specified, give general help
    if args.function is None: 
        print parser.format_help()
        sys.exit(1)
    # Otherwise pass the help option on to the subcommand
    sub_args.append('--help')

# Manually handle the default for ""function""
function = ""function1"" if args.function is None else args.function

# Parse the remaining args as per the selected subcommand
parser = ArgumentParser(prog=""%s %s"" % (os.path.basename(sys.argv[0]), function))
if function == ""function1"":
    parser.add_argument('-a','--a')
    parser.add_argument('-b','--b')
    parser.add_argument('-c','--c')
    args = parser.parse_args(sub_args)
    function1(args.a, args.b, args.c)
elif function == ""function2"":
    ...
elif function == ""function3"":
    ...
"
import userinputed string as a module in python,"m = __import__(a)
"
"Python, Numpy - Trying split an array according to a condition","import numpy as np

t = np.array([ 147, 5729, 5794, 5806, 6798, 8756, 8772, 8776, 9976])
dt  = np.diff(t)
pos = np.where(dt > 100)[0] + 1
print np.split(t, pos)
"
"Faster Python Cosine dissimilarity between Scipy CSR ""vectors""","import scipy.sparse as sparse
import numpy as np
import math

def fCosine(u,v): # u,v CSR vectors, Cosine Dissimilarity
    uData = u.data; vData = v.data
    denominator = np.sqrt(np.sum(uData**2)) * np.sqrt(np.sum(vData**2))
    if denominator>0:
        uCol = u.indices; vCol = v.indices # np array
        intersection = set(np.intersect1d(uCol,vCol))
        uI = np.array([u1 for i,u1 in enumerate(uData) if uCol[i] in intersection])
        vI = np.array([v2 for j,v2 in enumerate(vData) if vCol[j] in intersection])             
        return 1-np.dot(uI,vI)/denominator
    else:
        return float(""inf"")

def alt_fCosine(u,v): 
    uData, vData = u.data, v.data
    denominator = math.sqrt(np.sum(uData**2) * np.sum(vData**2))
    if denominator>0:
        uCol, vCol = u.indices, v.indices 
        uI = uData[np.in1d(uCol, vCol)]
        vI = vData[np.in1d(vCol, uCol)]
        return 1-np.dot(uI,vI)/denominator
    else:
        return float(""inf"")

# Check that they return the same result
N = 10**5
u = np.round(10*sparse.random(1, N, density=0.1, format='csr'))
v = np.round(10*sparse.random(1, N, density=0.1, format='csr'))
assert np.allclose(fCosine(u, v), alt_fCosine(u, v))
"
Is there a simpler way to allocate value to a variable given a if condition - Python?,"a, b, c, d = max(a, x), max(b, x), max(c, x), max(d, x)
"
Reading a file one byte at a time starting from the end to the begining,">>> fh = open(""e:\\text.txt"",""rb"")
>>> fh.seek(0,2)
>>> length = fh.tell()
>>> for i in range(length, 0, -1):
        fh.seek(i-1,0)
        char = fh.read(1)
        print(char)
"
How to select only certain tag and text using xpath?,"from lxml import etree
d = etree.HTML('<html><body><p><b>text1</b> (<span><a href=""#1"">asdf</a>text2</span>)</p></body></html>')
block = d.xpath('/html/body/p')[0]
# etree.strip_tags apparently takes a list of tags to strip, but it wasn't working for me
for tag in set(x.tag for x in block.iterdescendants() if x.tag != 'a'):
  etree.strip_tags(block,tag)

block.xpath('./text()|a')
"
"Python, optimal way of looping through a file, match two lines after a pattern and then join them","def sections(fle):
    with open(fle) as f:
        stp = imap(str.strip, f)
        for line in imap(str.strip, stp):
            if line.startswith("":50:""):
                yield next(stp) + next(stp)
                break
"
How to return elements of a list as variables?,"def find_test(test_list, search_term):
    for index in range(len(test_list)):
        if test_list[index][0] == search_term:
            return test_list[index][1:]
"
"Encapsulation vs. inheritance, help making a choice","class HandlerCase1(object):
    def handle_stuff(self, *args, **kwargs):
        print ""Handling case 1""


class HandlerCase2(object):
    def handle_stuff(self, *args, **kwargs):
        print ""Handling case 2""


if __name__ == ""__main__"":
    handlers = []
    handlers.append(HandlerCase1())
    handlers.append(HandlerCase2())
    for h in handlers:
        h.handle_stuff()
"
slicing dynamically in python,"from random import random

def slicer(longitude):
    alphabet = ""abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    result = """"
    x = 0

    for i in range(1, int(longitude)):
        x = int(62 * random())
        string_section = alphabet[x]
        result = result + string_section
    return result

print(str(slicer(10)))  # get a 10 digit string
"
Separate items in tuples in list when writing to csv,"import csv
lst = [('Endurance', 112, 150, 121, 136), ('Tempo', 152, 190, 138, 142),
       ('Threshold', 192, 210, 144, 150), ('VO2', 212, 240, 152, 155),
       ('Anaerobic', 242, 300, 156, 161)]

def write_csv(lst):

    with open('tz.csv', 'wb') as myfile:
        wr = csv.writer(myfile, delimiter = ',', quoting=csv.QUOTE_ALL)
        wr.writerows(lst)

write_csv(lst)
"
in NetworkX cannot save a graph as jpg or png file,"plt.show(block=False)
plt.savefig(""Graph.png"", format=""PNG"")
"
changing the contents of a file applying different conditions,"import sys

def main(src, dest):
    with open(dest, 'w') as output:
        with open(src) as source:
            for line in source:
                try:
                    start, end, sound = line.split()
                except ValueError:
                    continue
                if sound == 'ay':
                    start = int(start)
                    end = int(end)
                    offset = (end - start) // 2
                    output.write('%s %s ao\n' % (start, start + offset))
                    output.write('%s %s ih\n' % (start + offset, end))
                else:
                    output.write(line)

if __name__ == ""__main__"":

    main(*sys.argv[1:])
"
"Change one character at a time in a string, don't change the string?","from itertools import product

all_combos = (
    ''.join([digit if i == pos else c for i, c in enumerate(letters)])
    for digit, pos in product('1234', range(len(letters))))
"
Can Numpy's frompyfunc() return an image?,"np.array([A.astype(float) for A in fn(z)])
"
Help using *args in tuple matching Python function,"def dict_matcher(dict1, dict2, item1_pos, item2_pos, other1_poss, other2_poss):
"
Rename file names CAP first character but keep the extention lowercase,"import os
import re

r = re.compile(r'[-_ ]+')
def solve(s):
    name, ext = os.path.splitext(s)
    artist, song = name.rsplit('-', 1) 
    artist = r.sub(' ', artist).title().strip()
    song = r.sub(' ', song).title().strip()
    return artist + ' - ' + song + ext

if __name__ == '__main__':
    print solve(""Alibi- Eternity_ Ft_ Armin Van Buuren and Dj Tiesto_.mp3"")
    print solve( ""05-orjan_nilsen-so_long_radio__original_mix.mp3"")
    print solve( ""05 - Orjan Nilsen - So Long Radio (Original Mix).mp3"")
"
Inserting a file's text into another file at a specific line,"# insert contents of ""/test1.txt"" into ""/test2.txt"" at line 20
with open(""/test2.txt"", ""rw+"") as f2:
    for x in range(20):
        f2.readline()   # skip past early lines
    pos = f2.tell() # remember insertion position
    f2_remainder = f2.read()    # cache the rest of f2
    f2.seek(pos)
    with open(""/test1.txt"", ""r"") as f1:
        f2.write(f1.read())
    f2.write(f2_remainder)
"
Adding extra contour lines using matplotlib 2D contour plotting,"import numpy as np
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt

delta = 0.025
x = np.arange(-3.0, 3.0, delta)
y = np.arange(-2.0, 2.0, delta)
X, Y = np.meshgrid(x, y)
Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
# difference of Gaussians
Z = 10.0 * (Z2 - Z1)

plt.figure()
N = 24
CS = plt.contour(X, Y, Z, N)
plt.clabel(CS, inline=1, fontsize=10)
plt.title('{} levels'.format(N))
plt.xlim(0, 3)
plt.ylim(0, 2)
plt.show()
"
Best Method to Find Multiple String Occurrences in Python,"s = """"""TrnIq: Thread on CPU 37
TrnIq: Thread on CPU 37 but will be moved to CPU 44
IP-Thread on CPU 33
FANOUT Thread on CPU 37
Filter-Thread on CPU 38 but will be moved to CPU 51
TRN TMR Test 2 Supervisor Thread on CPU 34
HomographyWarp Traking Thread[0] on CPU 26""""""

for line in s.splitlines():
    words = line.split()
    if not (""CPU"" in words and ""on"" in words): continue # skip uninteresting lines
    prefix_words = words[:words.index(""on"")+1]
    prefix = ' '.join(prefix_words)
    cpu = int(words[-1])
    print (prefix, cpu)
"
Python Detect numbers in string by a list of sample,"def value(c):
    for b in c:
        containsdigit = any(a.isdigit() for a in b)
        if containsdigit:
            print(""The result of : ""+ b + "" is 1"")
        else:
            print(""The result of : "" + b +"" is 0"")
"
"Python: Combine two lists, overwriting the final few lines of the first list","c = a[:-3] + b
"
Selenium: Find adjacent elements,"from selenium.common.exceptions import NoSuchElementException

def get_value(driver, key):
    key = key + "":""
    try:
        return driver.find_element_by_xpath(""//span[@class='minimal-list__title' and . = '%s']/following-sibling::span"" % key).text
    except NoSuchElementException:
        print ""Not Found""
        return None
"
Replacing minimum element in a numpy array subject to a condition,"idx = np.where(cond)[0]
label[idx[arr[idx].argmin()]] = 3
"
Change what the *splat and **splatty-splat operators do to my object,"class MyIterable(object):
    def __iter__(self):
        return iter([1, 2, 3])

class MyMapping(collections.Mapping):
    def __iter__(self):
        return iter('123')
    def __getitem__(self, item):
        return int(item)
    def __len__(self):
        return 3
"
Python reads \n as string,"
>>> list=[]
>>> f=open('list.dat','r')
>>> for line in f.readlines():
...     list.append(line.strip('\n').rsplit(','))
... 
>>> f.close()
>>> 
>>> print list
[['item1', ' a'], ['item2', ' b'], ['item3', ' c']]
>>> 
"
Filling matrix with array of coordinates in python,"In [3]: X = [1, 1, 3, 5];

In [4]: Y = [2, 2, 3, 7];

In [5]: Z = [0.3, -0.5, 1, 1];

In [6]: matrix = np.zeros([10,10])

In [7]: matrix[X,Y] = Z

In [8]: matrix
Out[8]:
array([[ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. , -0.5,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  1. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  1. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ,  0. ]])

In [9]: matrix1 = np.zeros([10,10])

In [10]: for i in range(len(Z)):
   ....:     matrix1[X[i],Y[i]] = Z[i]

In [13]: (matrix1 == matrix).all()  #Just to show its equal to OP's `for` loop method.
Out[13]: True
"
What is wrong in my python script?,"#Imports
import decimal
#variables
neweq = ""neweq""
on = 1
#loop
#equasion function
def eq ():
        global b
        b = input(""Please enter an equation (Example: 10*(3*a)==4*(7*a), or 3.0/7.0). Unfortunately however, you can only use the variable 'a'. Also, you can type 'exit' to quit:  "")
        if b == exit:
             exit (""Thank you for using me :)"")
        else:
            b = float(b)        ## input converted into float.
            b = '%.3f'%(b)      ## after this b would be of type string
            b = float(b)        ## again converting into float to match with ""a"" in `inp()` 
#input funcution
def inp ():
        a = input(""Enter numeral (Example: 1, or 1.5) to proceed, 'exit' to quit, or 'neweq' to enter a new equasion:  "")
        if a == exit:
            exit (""Thank you for using me :)"")
        if a == neweq:
            a = 0
            eq ()
            inp()
        if b == a:          ## if a == b should work now.  
            print ""Yes, the answer is"", a
            eq ()
        else:
            print ""No, the answer is not"", a
            print ""test line"", b
            inp ()
#function calls
eq()
inp ()
"
Removing data from a list from a raw_input variable,"templist_index = templist.index(name+""\n"") # ""foo"" -> ""foo\n"" 
"
scatter plot by category in pandas,"df.plot(x='cpu', y='wait', kind='scatter', 
    c=[cmap.get(c, 'black') for c in df.category])
"
Python: Keep savefig from overwriting old plots,"import os
i = 0
while True:
    i += 1
    newname = '{}{:d}.png'.format(filename, i)
    if os.path.exists(newname):
        continue
    plt.savefig(newname)
    break
"
"""Josephus-problm"" using list in python","def josephus(ls, skip):
    skip -= 1 # pop automatically skips the dead guy
    idx = skip
    while len(ls) > 1:
        print ls.pop(idx) # kill prisoner at idx
        idx = (idx + skip) % len(ls)
    print 'survivor: ', ls[0]
"
Python: Unexpected regex behaviour for {n} match,"p = re.compile(r'\d{4}(?:\s\d{4}){3}')
"
Queuing methods to be run on an object by different threads in Python,"import Queue
import threading

def serialize(q):
  """"""runs a serializer on queue q: put [-1]*4 on q to terminate.""""""
  while True:
    # get output-queue for result, a callable, its args and kwds
    out_q, tocall, args, kwds = q.get()
    if out_q == -1:
      return
    result = tocall(*args, **kwds)
    out_q.put(result)

class WrapCall(object):
  """"""Wraps a callable to serialize calls to it.""""""

  def __init__(self, inq, ouq, tocall):
    self.inq = inq
    self.ouq = ouq
    self.tocall = tocall

  def __call__(self, *a, **k):
    self.inq.put((self.ouq, self.tocall, a, k))
    if self.ouq is None:
      return None
    return self.ouq.get()

class WrapObj(object):
  """"""Wraps any object to serialize all calls to its methods.""""""

  def __init__(self, obj):
    self._o = obj
    self._q = Queue.Queue()
    t = threading.Thread(target=serialize, args=(self._q,))
    t.setDaemon(True)
    t.start()
    self.t = t

  def __getattr__(self, n):
    """"""Wraps methods of self.w into an appropriate WrapCall instance.""""""
    towrap = getattr(self._o, n)
    if not callable(towrap):
      raise TypeError('Cannot wrap noncallable attribute %r (type: %s)'
                       % (n, type(towrap)))
    q = Queue.Queue()
    return WrapCall(self._q, q, towrap)

  def WrapperWait(self):
    """"""Return only when self.t has served all pending requests.""""""
    q = Queue.Queue()
    w = WrapCall(self.__q, q, lambda: None)
    return w()
"
Pandas: Mean of columns with the same names,"df.groupby(by=df.columns, axis=1).mean()"
How do I vectorize this loop in numpy?,">>> inf = np.iinfo('i8').max
>>> np.where(cond, arr, -inf).argmax(axis=1)
array([1, 2])
"
randomly select 3 numbers whose sum is 356 and each of these 3 is more than 30,"import random

def rnd_to_sum_with_min(desired_sum=356, numbers=3, minimum=31):
    selection = []
    for i in range(numbers-1):
        upper_limit = desired_sum - sum(selection) - (numbers - i) * minimum
        choice = random.randint(minimum, upper_limit)
        selection.append(choice)
    selection.append(desired_sum - sum(selection))
    return selection
"
Inserting values into specific locations in a json file with Python,"if files:
    elementId = basename(normpath(path)) + ""Audio"" 
    jsonObject.append({ 
      ""elementId"" : elementId, 
      ""params"" : { 
         ""audioPath"" : path, 
         ""sounds"" : list(files)
         },
      })
"
Printing integers on the same line reading from a text file,"def main():
    num_file = open('numbers.txt', 'r')

    for num in num_file:
        print(num.rstrip('\n'), end='')

    num_file.close()
    print('End of file')

main()
"
"Cloned list seems to be functioning as an alias, even though explicitly declared as a a clone","def calculateProportions(strategies,proportions):
    import copy
    import itertools
    combinations = []
    columns = list(itertools.product(strategies, repeat=3))
    for i in range(0, len(columns)):
        columns[i] = list(columns[i])
    for n in range(0, len(strategies)):
        combinations.append(copy.deepcopy(columns))
"
sort list of class instances according to master list,"class A: pass
class B: pass
class C: pass

classes = [A(), B(), C()]
master_list = [B, A]

def sorter(instance):
    # get the type of the object
    c = instance.__class__
    # if it is in the master_list, use its index, otherwise put it at the end
    return master_list.index(c) if c in master_list else len(master_list)

final_list = sorted(classes, key=sorter)
"
Filling available space with a column in GridBagSizer,"[...]
width = 500 #the desired minimum width
sizer = wx.BoxSizer(wx.VERTICAL)
sizer.SetMinSize((width,1)) #ensures sizer will be minimum width
""""""NOTE: the minimum size gets recalculated when new items are added.
i.e. if height exceeds 1 pixel or if width exceeds wdith, the sizer
will recalculate the minimum size""""""


for i in range(5):
    description = wx.StaticText(self, -1, ""Short Description"") #description is less than 500 pixels, Wrap() will have no effect.
    description.Wrap(width)
[...]
"
Create a simple password for unittest user using PASSWORD_HASHERS,"self.user = User.objects.create(username='testuser',password='!')
self.user.set_password('some_password')
self.user.save() # <--- You need this ;)
"
One loop? python,"import timeit

def sumPair(theList, n):
    for index, e in enumerate(theList):
        if n - e in theList[index+1:]:
            return e, n - e

def sumPair2(theList, n):
    for ind, e in enumerate(theList):
        try:
            theList.index(n - e, ind + 1)
            return e, n - e
        except ValueError:
            pass

def sumPair_gnibbler(theList, n):
    # If n is even, check whether n/2 occurs twice or more in theList
    if n%2 == 0 and theList.count(n/2) > 1:
        return n/2, n/2

    theSet = set(theList)
    for e in theSet:
        if n - e in theSet:
            return e, n - e
"
creating a matrix with randomly generated numbers,"import random
def makematrix(x,y,minnum, maxnum):
    matrix = []
    for row in range(x):
        matrix.append([])
        for col in range(y):
            matrix[row].append(random.uniform(minnum,maxnum))
    return matrix

print(makematrix(4,4,0,100))
"
Python CSV: write rows according to dict mapping,"if value in replacement_map:
    output.extend(replacement_map[value])
else:
    output.append(value)
"
How to access wmi in python?,"c = wmi.WMI()
wql = ""Select * From Win32_SerialPort""
for item in c.query(wql):
    print item
"
how to check the value to overwritten them in xbmc?,"import xbmcaddon
addon = xbmcaddon.Addon()
addon.setSetting('setting_id', 'true')
"
Using Float questions,"def divide(x):
    left, _, right = str(x).partition(""."")
    first = [int(left[0])]
    second = [int(i) for i in left[1:]]
    third = [int(i) for i in right]
    return first, second, third

print divide(123456)
print divide(123.456)
"
python -- measuring pixel brightness,"#Standard
LuminanceA = (0.2126*R) + (0.7152*G) + (0.0722*B)
#Percieved A
LuminanceB = (0.299*R + 0.587*G + 0.114*B)
#Perceived B, slower to calculate
LuminanceC = sqrt( 0.241*R^2 + 0.691*G^2 + 0.068*B^2 )
"
How to make a class that acts like a string?,"import sys
from contextlib import contextmanager

@contextmanager
def capturinglines(output=None):
    ""Captures lines of output to a list.""
    from cStringIO import StringIO

    try:
        output = [] if output is None else output
        stringio = StringIO()
        out, err = sys.stdout, sys.stderr
        sys.stdout, sys.stderr = stringio, stringio
        yield output
    finally:
        sys.stdout, sys.stderr = out, err
        output.extend(stringio.getvalue().splitlines())
        stringio.close()
"
Get name of active Excel workbook from Python,"xl = win32com.client.GetObjec(None, ""Excel.Application"") #instance one
xl = win32com.client.GetObject(""Name_Of_Workbook"") #instance two
"
python sorting dictionary by length of values,">>> d = {""one"": [(1,3),(1,4)], ""two"": [(1,2),(1,2),(1,3)], ""three"": [(1,1)]}
>>> for k in sorted(d, key=lambda k: len(d[k]), reverse=True):
        print k,


two one three
"
Save variable returned by signal handler?,"class SomeClass:
    def __init__(self):
        self.value = None
        ...
        someTextView = build_textview(""some text"")
        ...
        tree_selection = someTreeView.get_child().get_selection()
        tree_selection.connect(""changed"", self.selection_changed)
        ...

    def selection_changed(self, widget, data=None):
        (model, pathlist) = widget.get_selected_rows()
        for path in pathlist :
            tree_iter = model.get_iter(path)
            value = model.get_value(tree_iter,0)
            this.value = value
            return
"
Force a function parameter type in Python?,"# mm.py
registry = {}                                                                   

class MultiMethod(object):                                                      
    def __init__(self, name):                                                   
        self.name = name                                                        
        self.typemap = {}                                                       
    def __call__(self, *args):                                                  
        types = tuple(arg.__class__ for arg in args) # a generator expression!  
        function = self.typemap.get(types)                                      
        if function is None:                                                    
            raise TypeError(""no match"")                                         
        return function(*args)                                                  
    def register(self, types, function):                                        
        if types in self.typemap:                                               
            raise TypeError(""duplicate registration"")                           
        self.typemap[types] = function                                          

def multimethod(*types):                                                        
    def register(function):                                                     
        function = getattr(function, ""__lastreg__"", function)                   
        name = function.__name__                                                
        mm = registry.get(name)                                                 
        if mm is None:                                                          
            mm = registry[name] = MultiMethod(name)                             
        mm.register(types, function)                                            
        mm.__lastreg__ = function                                               
        return mm                                                               
    return register                                                             

    if hasattr(function, ""__lastreg__""):                                        
        function = function.__lastreg__
"
How can I remove all different script tags in BeautifulSoup?,">>> from bs4 import BeautifulSoup
>>> 
>>> soup = BeautifulSoup(u""""""
... <td><a href=""http://www.irit.fr/SC"">Signal et Communication</a>
... <br/><a href=""http://www.irit.fr/IRT"">Ingénierie Réseaux et Télécommunications</a>
... </td>
... """""")
>>> 
>>> td = soup.td
>>> print td.string
None
>>> print td.get_text()
Signal et Communication
Ingénierie Réseaux et Télécommunications
"
Python avoiding implementation method name clashes in subclass,"class Parent(object):
    """""" This parent has all types of methods. """"""
    def _will_private_run_test(self):
        self.__private()

    def public(self):
        print('public', self.__class__)

    def _protected(self):
        print('protected', self.__class__)

    def __private(self):
        print('private', self.__class__)


class Child(Parent):
    """""" This child only knows parent's methods. """"""
    pass



class ChildWithOverrides(Parent):
    """""" This child overrides all. """"""
    def public(self):
        print('New', 'public', self.__class__)

    def _protected(self):
        print('New', 'protected', self.__class__)

    def __private(self):
        print('New', 'private', self.__class__)

def run_private(obj):
    if hasattr(obj, '__private'):
        print('A mirracle happened!')

    try:
        obj.__private()
    except AttributeError as ae:
        print(ae)



parent = Parent()
parent._will_private_run_test()

child = Child()
teen = ChildWithOverrides()

parent.public()
child.public()
teen.public()

parent._protected()
child._protected()
teen._protected()

run_private(parent)
run_private(child)
run_private(teen)
"
Python: Alphanumeric Serial Number with some rules,"def next_string(s):
    if len(s) == 0:
        return '1'
    head = s[0:-1]
    tail = s[-1]
    if tail == 'Z':
        return next_string(head) + '1'
    if tail == '9':
        return head+'A'
    if tail == 'H':
        return head+'J'
    if tail == 'N':
        return head+'P'
    return head + chr(ord(tail)+1)
"
Unpacking list items from a dictionary & writing to a CSV file,"with open('numbers2.csv', 'wt') as f:
    writer = csv.writer(f, lineterminator = '\n')
    writer.writerow(('Var1', ""Var2"", 'Var3', ""Var4"",))
    for value in exchangeDict2.itervalues():
        writer.writerow(value)
"
hardcopy of gnuplot.py plot,"import Gnuplot
from numpy import *

x1 = arange(1,10)
y1 = arange(1,10)

d1 = Gnuplot.Data(x1,y1, with_=""lines lt rgb 'red'"", title=""1"")
g = Gnuplot.Gnuplot()

g.title(""aaa"")
g('set grid')
g('set logscale x')
g('set xtics 1,2,110')
g.plot(d1)
g.hardcopy(""aaa.svg"", terminal='svg', size=[800,400])
"
"comparing a list to a tuple, python 3.x - having problems getting the correct position to print","#!/usr/bin/python
number_items_input = 0
guessed_inventory_list = [] #this is the variable list that will be input by user

survival_gear = (""GPS"",""map"",""compass"",""firstaid"",""water"",""flashlight"",""lighter"",""blanket"",""rope"",""cell phone"",""signal mirror"")

#block bellow takes input from the user
print(""Please choose one by one, which top 10 items do you want with you in caseof a survival situation, think Bear Grylls.Once chosen, your list will be compared to the top 10 survival items list."")

# One can use range functions to loop n times in this case 10 times
for i in range(0,10):
    guessed_items = raw_input(""Please choose:"")
    guessed_inventory_list.append(guessed_items)

print (""You have chosen the following:"", guessed_inventory_list)

# Enumerate is one of the built-in Python functions. 
# It returns an enumerate object. 
# In this case that object is a list of tuples (immutable lists), 
# each containing a pair of count/index and value.
# like [(1, 'GPS'), (2, 'map'), (3, 'compass'),...,(6, 'signal mirror')]
# in the below for loop the list of tuple will be 
#unpacked in to t and individual_items for each iteration
for t,individual_items in enumerate(survival_gear,start=1):
    #the ""in"" is a membership test operator which will test whether
    #individual_items is in list guessed_inventory_list
    if individual_items in guessed_inventory_list:
       #finally the print statements below advise the user if they guessed an item and which position it's in.
       print(""You have chosen wisely"", individual_items)
       print(""It's in position"", t, ""on the survival list"")
"
Remove letter duplicates that are in a row,"from itertools import groupby

def find_dub_strs(mystring):
    grp = groupby(mystring)
    seq = [(k, len(list(g)) >= 2) for k, g in grp]
    allowed = ('aeioupt')
    return rec_dubz('', seq, allowed=allowed)

def rec_dubz(prev, seq, allowed='aeiou'):
    if not seq:
        return [prev]
    solutions = rec_dubz(prev + seq[0][0], seq[1:], allowed=allowed)
    if seq[0][0] in allowed and seq[0][1]:
        solutions += rec_dubz(prev + seq[0][0] * 2, seq[1:], allowed=allowed)
    return solutions
"
Python multiple inheritance questions,"class D( B, C ):
    foo = B.foo
    bar = C.bar
"
Sort list by frequency in python,"counts = collections.Counter(lst)
new_list = sorted(lst, key=counts.get, reverse=True)
"
Pass a counter to every python logging method,"import logging

class ContextFilter(logging.Filter):
    def filter(self, record):
        record.count = counter
        return True

logging.basicConfig(
    level = logging.DEBUG,
    format = '%(levelname)-8s: %(count)s: %(message)s')
logger = logging.getLogger(__name__)
logger.addFilter(ContextFilter())

counter = 5
logger.debug('First Event')
counter += 2
logger.warning('Second Event')
"
TypeError list object is not callable when trying to convert an object to a string,">>> str = ['foo', 'bar']
>>> type(str)
<type 'list'>
>>> print repr(str)
['foo', 'bar']
>>> del str
>>> type(str)
<type 'type'>
>>> print repr(str)
<type 'str'>
"
making a function that takes a list of any size as an argument Python 3,"print set([1])                    # set([1])
print set([1, 2, 3, 1])           # set([1, 2, 3])
"
"pick a random line from a very big file, from command line","$ lines=$(wc -l file | awk '{ print $1 }'); sed -n ""$((RANDOM%lines+1))p"" file  
"
How to read UTF-8 files with Pandas?,"df.apply(lambda x: pd.lib.infer_dtype(x.values))
"
Checking if a list contains a certain sequence of numbers,"s = ''.join(str(i) for i in sorted(L))
if '1234' in s or '2345' in s or '3456' in s:
    # ...
"
Optimizing string parsing with Python,"from pyparsing import OneOrMore, Optional, oneOf, alphas, Word, Group, Forward, Suppress, Dict

# define the grammar
nodes = Forward()
nodeName = oneOf(list(alphas))
nodeChildren = Suppress('(') + Group(nodes) + Suppress( ')')
node = Group(nodeName + Optional(nodeChildren))
nodes <<= OneOrMore(node)

print(nodes.parseString('abc(abc(defg)d)de(f)gh'))
"
Color matplotlib bar chart based on value,"import numpy as np
import matplotlib.pyplot as plt

x = np.arange(10)
y = np.arange(10) * 0.1

mask1 = y < 0.5
mask2 = y >= 0.5

plt.bar(x[mask1], y[mask1], color = 'red')
plt.bar(x[mask2], y[mask2], color = 'blue')
plt.show()
"
Get the subdictionary based on range,"d = {(15,21): ""value1"", (7,45): ""value2"", (500,321): ""value3""}
x1, x2, y1, y2 = 6, 16, 20, 46 
dict((k,v) for k, v in d.iteritems() if x1<k[0]<x2 and y1<k[1]<y2)
"
How can I encode and decode percent-encoded (URL encoded) strings in Python?,"import urllib
urllib.unquote(""Lech_Kaczy%C5%84ski"").decode('utf8')
"
appending code to create multiple random moving sprites - python tkinter,"class EnemiesGroup(object):

    # ... other functions ...    

    def clicked(self, event, enemy):
        print('clicked:', enemy),

        # remove oval from canvas        
        self.canvas.delete(enemy.oval)

        # remove enemy from list
        self.enemies.remove(enemy)

        # create new enemy after 10s
        root.after(10000, self.add_new_enemy)


    def add_new_enemy(self):

        # can be only 5 enemies 
        if len(self.enemies) < 5:
            print('create new enemy')
            e = Enemy(self.canvas)

            # stop new enemy if all enemies are stoped
            e.moving = self.moving

            # bind mouse button to enemy
            self.canvas.tag_bind(e.oval, '<Button-1>', lambda event:self.clicked(event, e))

            self.enemies.append(e)
        else:
            print(""You have 5 enemies - I can't add more."")


    # ... other functions ...
"
"Sort both elements of a tuple, ignoring case, within a list, so that the keys of a dictionary line up correctly","def __eq__(self, other):
    return all(
        sorted(v) == sorted(self.__dict__[key])
            if isinstance(v, np.array)
        else self.__dict__[key] == v
        for key, v in other.__dict__.iteritems()
    )
"
Find the minimum value of a list and print the corresponding index from another list,"list1, list2 = [9.2,6.6,3.1,6.9], [1,2,3,4]
print list2[min((j,i) for i, j in enumerate(list1))[1]]
# 3
"
Influence of choosing string as seed of random on the output,">>> import itertools
>>> s='abc'
>>> [''.join(u) for u in itertools.permutations(s, 3)]
['abc', 'acb', 'bac', 'bca', 'cab', 'cba']
>>> [''.join(u) for u in itertools.product(*3*[s])]
['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'aca', 'acb', 'acc', 
 'baa', 'bab', 'bac', 'bba', 'bbb', 'bbc', 'bca', 'bcb', 'bcc', 
 'caa', 'cab', 'cac', 'cba', 'cbb', 'cbc', 'cca', 'ccb', 'ccc']
"
Simplify Python iterations,"if product == 512:
    #use `map` to turn the factors into strings, first
    print ""factors: "" + "","".join(map(str, factors))
"
"Detection of concurrent event appearances - pandas and DataFrame, but possibly pure-python related","df2 = df.pivot(index=""time"", columns=""machine"", values=""status"")
df2 = df2.fillna(method='ffill')
both_up = df2[(df2 == ""up"").all(axis=1)]
"
Processing large amount of data in Python,"import pandas as pd

data = pd.read_csv(filename, options...)
store = pd.HDFStore('data.h5')
store['mydata'] = data
store.close()
"
BeautifulSoup to find text within <img alt tag,"listm = soup.findAll('td',{'class':'thumb'})
for elem in listm:
    print elem('img')[0]['alt']
"
How can I generate all possible divisor products for a number?,"def products(n, min_divisor=2):
    """"""Generate expressions of n as a product of ints >= min_divisor.""""""
    if n == 1:
        yield []
    for divisor in range(min_divisor, n+1):
        if n % divisor == 0:
            for product in products(n // divisor, divisor):
                yield product + [divisor]
"
python ordered dict issue,"with open(""data.csv"") as f,open(""new.csv"" ,""w"") as out:
    r = csv.reader(f)
    wr= csv.writer(out)
    header = next(r)
    for row in r:
        od.setdefault((row[0], row[-2], row[-1]), []).append("" "".join(row[1:-2]))
    wr.writerow(header)
    for loc,vals in od.items():
        wr.writerow([loc[0]] + vals+list(loc[1:]))
"
swap values in a tuple/list inside a list in python?,"[(t[1], t[0]) for t in mylist]"
How to map a arabic character to english string using python,"In [26]: unicodedata.name('ڥ').lower().split()[2]
Out[26]: 'feh'
"
Setting ndarray values with the flat iterator,"A.ravel()[::N + 1][1:] = 1
"
Custom dictionary through **kw,"class Dtracker(dict):
    def __init__(self,*arg,**kw):
        super(Dtracker,self).__init__(*arg,**kw)
    def __getitem__(self,item):
        print ""Accessed %s"" % str(item)
        return dict.__getitem__(self, item)

def track( fn ):
    def tracked_fn( **kw ):
        kw= Dtracker( kw )
        fn( kw )
    return tracked_fn

@track
def libfn(kw):
    a = kw[""foo""]
    print ""a is %s"" % a
    return a
"
How to iterate over initial dimensions of a Numpy array?,"vec=np.arange(2*2*2*3).reshape(2,2,2,3)
it=np.ndindex(2,2,2)
for i in it:
    print(vec[i])
"
Selective iteration over list,"li = [ 0, '21', '51', '67', '96', '102', '128', '130', '0', '11', '36', '53', '81', '86', '113', '116', '0', '21', '48', '64', '91', '95','125', '139', '166', '175', '200', 205]   

# Convert all items to integers for calculations
li = [int(x) for x in li]

for x, y in zip(li, li[1:]):
    if y != 0:
        a = abs(x - y)      
        print '|%3d - %3d| = %3d' % (x, y, a)
    else:
        print ''
"
"Fuzzy Group By, Grouping Similar Words","class Seeder:
    def __init__(self):
        self.seeds = set()
        self.cache = dict()

    def get_seed(self, word):
        LIMIT = 2
        seed = self.cache.get(word,None)
        if seed is not None:
            return seed
        for seed in self.seeds:
            if self.distance(seed, word) <= LIMIT:
                self.cache[word] = seed
                return seed
        self.seeds.add(word)
        self.cache[word] = word
        return word

    def distance(self, s1, s2):
        l1 = len(s1)
        l2 = len(s2)
        matrix = [range(zz,zz + l1 + 1) for zz in xrange(l2 + 1)]
        for zz in xrange(0,l2):
            for sz in xrange(0,l1):
                if s1[sz] == s2[zz]:
                    matrix[zz+1][sz+1] = min(matrix[zz+1][sz] + 1, matrix[zz][sz+1] + 1, matrix[zz][sz])
                else:
                    matrix[zz+1][sz+1] = min(matrix[zz+1][sz] + 1, matrix[zz][sz+1] + 1, matrix[zz][sz] + 1)
        return matrix[l2][l1]

import itertools

def group_similar(words):
    seeder = Seeder()
    words = sorted(words, key=seeder.get_seed)
    groups = itertools.groupby(words, key=seeder.get_seed)
    return [list(v) for k,v in groups]
"
re-size elements in a list based on index,"a = [[1, 'test', 12, 'toronto'], [2, 'test', 145, 'montreal']]
shorten = {1: 2, 3: 4} #shorten column 1 to length 2, and col 3 to len 4
a = [[e[:shorten[i]] if i in shorten else e for i, e in enumerate(line)] for line in a]
print (a)
"
Python does not recognize the type of a namedtuple,">>> sgn_tuple = namedtuple('sgnt',['signal','type'],verbose=True)

class sgnt(tuple):
        'sgnt(signal, type)' 

        __slots__ = () 

        _fields = ('signal', 'type') 

        def __new__(_cls, signal, type):
            'Create new instance of sgnt(signal, type)'
            return _tuple.__new__(_cls, (signal, type)) 

        @classmethod
        def _make(cls, iterable, new=tuple.__new__, len=len):
            'Make a new sgnt object from a sequence or iterable'
            result = new(cls, iterable)
            if len(result) != 2:
                raise TypeError('Expected 2 arguments, got %d' % len(result))
            return result 

        def __repr__(self):
            'Return a nicely formatted representation string'
            return 'sgnt(signal=%r, type=%r)' % self 

        def _asdict(self):
            'Return a new OrderedDict which maps field names to their values'
            return OrderedDict(zip(self._fields, self)) 

        __dict__ = property(_asdict) 

        def _replace(_self, **kwds):
            'Return a new sgnt object replacing specified fields with new values'
            result = _self._make(map(kwds.pop, ('signal', 'type'), _self))
            if kwds:
                raise ValueError('Got unexpected field names: %r' % kwds.keys())
            return result 

        def __getnewargs__(self):
            'Return self as a plain tuple.  Used by copy and pickle.'
            return tuple(self) 

        signal = _property(_itemgetter(0), doc='Alias for field number 0')
        type = _property(_itemgetter(1), doc='Alias for field number 1')
"
"How do i turn `[(1, 'item1'),(2, ""item2""),(2, ""item3""),(3, ""item4""),(2, ""item5"")]` into a JSON tree and HTML tree in python?","data = [(1, 'item1'), (2, ""item2""), (2, ""item3""), (3, ""item4""), (2, ""item5"")]

import json


class Entity(object):
    def __init__(self, name=None, parent=None):
        self.name = name
        self.parent = parent
        self.level = parent.level + 1 if parent else 0
        self.children = []

    def to_json_obj(self):
        if len(self.children):
            return {'name': self.name, 'children': [child.to_json_obj() for child in self.children]}
        else:
            return {'name': self.name}


def data_to_json(data):
    tree = Entity()
    current = tree
    for item in data:
        if item[0] > current.level:
            pass
        else:
            while True:
                current = current.parent
                if current.level == item[0] - 1:
                    break
        new = Entity(item[1], current)
        current.children.append(new)
        current = new
    return json.dumps(tree.to_json_obj()[""children""][0], indent=2)

print data_to_json(data)
"
How do I apply transformations to list of pandas dataframes?,"data_sets_a = [
    d.groupby(
        ['col_a', 'col_b', 'col_c']
    ).agg(funcs, inplace=True).reset_index() for d in data_sets_a
]
"
Python - Convert String into Iterable Integer List,">>> z = y.split("", "")
>>> print(z)
['10', '21', '42', '5']
"
Convert data frame columns to dictionary,"def adjust_row(row):
    kvp_data = row[3:].valid()
    kvp_data = kvp_data.reshape(kvp_data.size//2, 2)
    kvp = dict(kvp_data)
    return row[:3].append(pd.Series({'kvp': kvp}))
"
Creating new array in for loop (Python),"for d in xrange(1,68):
    exec 'x%s = data[:,%s]' %(d,d-1)
"
Remove all characters from a string who's ordinals are out of range,""""".join([ch for ch in orig_string if ord(ch)<= 128])
"
Why does csv.DictReader skip empty lines?,"import csv
CSV_FIELDS = (""field1"", ""field2"", ""field3"")

class MyDictReader(csv.DictReader):
    def next(self):
        if self.line_num == 0:
            # Used only for its side effect.
            self.fieldnames
        row = self.reader.next()
        self.line_num = self.reader.line_num

        d = dict(zip(self.fieldnames, row))
        lf = len(self.fieldnames)
        lr = len(row)
        if lf < lr:
            d[self.restkey] = row[lf:]
        elif lf > lr:
            for key in self.fieldnames[lr:]:
                d[key] = self.restval
        return d

for row in MyDictReader(open(""f"", 'rb'), fieldnames=CSV_FIELDS, restval=""""):
    print(row)
"
How to pad leading zero (in a function) dynamically?,">>> width = 5
>>> value = 2
>>> '{1:0{0}}'.format(width, value)
'00002'
"
Unique value in list of lists in Python,"entry.append([item])
"
Creating a single regex rather than a nested statement,"regex=re.compile(r'^[^ref]*(?=MBzz)[^ref]*$',re.I|re.MULTILINE)
"
Remove special characters from csv file using python,"import csv

with open(""special.csv"", ""rb"") as infile, open(""repaired.csv"", ""wb"") as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile)
    conversion = set('_""/.$')
    for row in reader:
        newrow = [''.join('_' if c in conversion else c for c in entry) for entry in row]
        writer.writerow(newrow)
"
How to pack in a certain order with Python,"import struct
a1, a0, a3, a2 = struct.unpack('cccc', struct.pack('I', 0x12345678))
struct.pack('cccc', a0, a1, a2, a3)
"
python: Organizing object model of an application,"import os.path

filename = 'foo.zip'

dispatch = {'.zip': handle_zip, '.7z': handle_7z}
_, extension = os.path.splitext(filename)
try:
    rv = dispatch[extension](filename)
except KeyError:
    print 'Unknown extension', extension
    rv = None
"
How do I derive from hashlib.sha256 in Python?,"import hashlib

class shad_256(object):
    """"""
    Double SHA - sha256(sha256(data).digest())
    Less susceptible to length extension attacks than sha256 alone.

    >>> s = shad_256('hello world')
    >>> s.digest_size
    32
    >>> s.block_size
    64
    >>> s.sha256.hexdigest()
    'b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9'
    >>> s.hexdigest()
    'bc62d4b80d9e36da29c16c5d4d9f11731f36052c72401a76c23c0fb5a9b74423'
    >>> s.nonexistant()
    Traceback (most recent call last):
    ...
    AttributeError: '_hashlib.HASH' object has no attribute 'nonexistant'
    >>> s2 = s.copy()
    >>> s2.digest() == s.digest()
    True
    >>> s2.update(""text"")
    >>> s2.digest() == s.digest()
    False
    """"""
    def __init__(self, data=None):
        self.sha256 = hashlib.sha256()
        if data is not None:
            self.update(data)

    def __getattr__(self, key):
        return getattr(self.sha256, key)

    def _get_final_sha256(self):
        return hashlib.sha256(self.sha256.digest())

    def digest(self):
        return self._get_final_sha256().digest()

    def hexdigest(self):
        return self._get_final_sha256().hexdigest()

    def copy(self):
        result = shad_256()
        result.sha256 = self.sha256.copy()
        return result

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
"
"Rendering vectors in a sphere, with better perception","import numpy as np
from mayavi import mlab

# render the sphere mesh
u, v = np.mgrid[0:2*np.pi:20j, 00:np.pi:10j]
x=np.cos(u)*np.sin(v)
y=np.sin(u)*np.sin(v)
z=np.cos(v)

# White background and turn on antialiasing
fig = mlab.figure(bgcolor=(1,1,1))
fig.scene.render_window.aa_frames = 8

# Plot the sphere's mesh
for a,b,c in zip(x.T, y.T, z.T) + zip(x, y, z):
    mlab.plot3d(a, b, c, color=(1,0,0), tube_radius=0.01)

gradients = np.array([[ 0.57735027, -0.57735027,  0.57735027], [ 0.32103634, -0.15367924, -0.93451506], [ 0.41923004, -0.40336058,  0.81335509], [ 0.49175236, -0.7972576 , -0.35008559], [-0.77544582, -0.60942662,  0.16517574], [ 0.49080035, -0.37864643, -0.78469223], [-0.9688558 , -0.14921457, -0.19761968], [-0.55381966, -0.41340241, -0.72276008], [-0.51651138, -0.82581121,  0.22638878], [ 0.51285124, -0.09350922,  0.85336959], [-0.02404559, -0.99431705, -0.10370783], [-0.45752126, -0.15967038,  0.87474549], [-0.11906644, -0.66461051,  0.73764223], [-0.69553846, -0.26904184,  0.66621518], [ 0.84464198, -0.38759068,  0.3692607 ], [ 0.01218729, -0.86413401,  0.5031141 ], [-0.70542359, -0.10816363, -0.70048422], [-0.64579558, -0.75719821, -0.09797404], [ 0.22307518, -0.66173422,  0.715783  ], [ 0.35672677, -0.81123132,  0.46330312], [-0.64859039, -0.59819001,  0.47063699], [-0.9860335 , -0.04110239,  0.16139577], [ 0.78665483, -0.298026  , -0.54069835], [-0.22515292, -0.39356178,  0.89129978], [-0.03115982, -0.20828982, -0.97757065], [ 0.1714755 , -0.88971114, -0.42309603], [-0.1948448 , -0.48424336, -0.85296184], [-0.46394941, -0.51801461,  0.71861798], [-0.45273268, -0.81954175, -0.35126126], [-0.82887799, -0.29984823, -0.47228414], [ 0.21121763, -0.09845807,  0.97246754], [-0.11702234, -0.10076906,  0.98800373], [ 0.31119478, -0.68396461, -0.65981078], [ 0.65285712, -0.07680383, -0.75357729], [ 0.71209121, -0.26699486,  0.64933801], [ 0.97685069, -0.17835225,  0.11812361], [-0.34381351, -0.93718553, -0.05895334], [ 0.68615079, -0.67022949,  0.2828241 ], [-0.6588605 , -0.59295917, -0.46292791], [ 0.15754543, -0.46902952, -0.86901712], [ 0.89081973, -0.0551779 ,  0.45099396], [ 0.09939465, -0.40802586,  0.90754372], [ 0.93604255, -0.26702261, -0.22917943], [-0.93707269, -0.34256476,  0.06741077], [-0.19623031, -0.95031369,  0.24165596], [ 0.45153776, -0.87650371,  0.16689767], [-0.0195914 , -0.72917062, -0.68405145], [ 0.65216494, -0.75583613, -0.05824633], [ 0.13336134, -0.97014433,  0.20257032], [ 0.86954373, -0.49204889,  0.04220884], [ 0.60317737, -0.57162017, -0.55626202], [-0.34353963, -0.78447777,  0.51630914], [-0.35424244, -0.68266952, -0.63912022], [-0.84101379, -0.50332689, -0.19838808], [-0.85885382, -0.33475134,  0.38770047], [ 0.30507854, -0.94518369, -0.11642545], [ 0.7822451 , -0.55481136, -0.28333196], [-0.15034926, -0.90096235, -0.4070158 ], [-0.37529847, -0.20644124, -0.90362221], [-0.87414831, -0.01486413,  0.48543158]])
u, v, w = gradients.T
zero = np.zeros_like(u)

color = (0.2, 0.2, 0.2)
head_length = 0.2
for direct in [-1, 1]:
    h, b = direct * 0.2, direct * (1 - head_length)
    mlab.quiver3d(b*u, b*v, b*w, h*u, h*v, h*w, 
                  mode='cone', scale_factor=1, color=color, resolution=20)
    for i, j, k in zip(u, v, w):
        mlab.plot3d([0, b*i], [0, b*j], [0, b*k], color=color, tube_radius=0.01)

mlab.show()
"
Python removing delimiters from strings,">>> ' '.join(w for w in re.split(""[""+""\\"".join(d)+""]"", s) if w)
'hey you are you ok'
"
"How does NOAA convert City,St to lat long?","import urllib2
import urllib
import json

url = 'http://nominatim.openstreetmap.org/search?'
place = 'MCRAE, GA'
params = urllib.urlencode(dict(q=place, format='json'))
# print(url+params)
response = urllib.urlopen(url+params)
data = json.loads(response.read())[0]
print(data['lon'], data['lat'])
"
How to used NamedTemporaryFile (and when is it closed?),"def check_file(open_file):
    lines = 0
    open_file.seek(0)
    for line in open_file:
        if lines < 5:
            print line
            lines += 1
        else:
            break
"
How do you remove a sublist if a certain element is not found at a specific position across all sublists?,"lst = [['a','b','c'], ['a','b','c','d','f'],['a','b','c','d','e'],['a','b','c','d','e'],['a','b','c','f','f'],['a','b']]
lst_desired = [l for l in lst if len(l) >= 5 and l[4] == ""f""]
print lst_desired
"
"how to write a conditional list comprehension, with ""extend"" functionality","nouns = []
for key, value in pos_dictionary.iteritems():
    if key.startswith('NN'):
        nouns += value
"
"Matplotlib - Move X-Axis label downwards, but not X-Axis Ticks","pl.xlabel(""..."", labelpad=20)
"
How do I create multiple dictionaries based on nested for loops?,"dic={}
for x in range (1,6):
    level = 'level%d' % x 
    dic[level] = {}
    for iteration in range(1, 4): 
        value = 'value%d' % iteration
        dic[level][value] = 0 

print dic 
"
Extracting data in table using BeautifulSoup,">>> areatable = soup.find('table',{'id':'codes'})
>>> d = {}
>>> def chunks(l, n):
...     return [l[i:i+n] for i in range(0, len(l), n)]
>>> dict(chunks([i.text for i in areatable.findAll('td')], 2))
{u'Chunan': u'36', u'Penghu': u'69', u'Wufeng': u'4', u'Fengyuan': u'4', u'Kaohsiung': u'7', u'Changhua': u'47', u'Pingtung': u'8', u'Keelung': u'2', u'Hsinying': u'66', u'Chungli': u'34', u'Suao': u'39', u'Yuanlin': u'48', u'Yungching': u'48', u'Panchiao': u'2', u'Taipei': u'2', u'Tainan': u'62', u'Peikang': u'5', u'Taichung': u'4', u'Yungho': u'2', u'Hsinchu': u'35', u'Tsoying': u'7', u'Hualien': u'38', u'Lukang': u'47', u'Talin': u'5', u'Chiaochi': u'39', u'Fengshan': u'7', u'Sanchung': u'2', u'Tungkang': u'88', u'Taoyuan': u'33', u'Hukou': u'36'}
"
Variable number of arguments and recursion in Python,"def generate_combinations( *args, **kwargs ):
    print(""called with"", args)
    #terminate recursion
    if len(args) == 1:
        return list(set(args[0]))

    #recursion
    else:
        result = []
        args = list(args)
        heads = args.pop(0)
        tails = generate_combinations( *args, **kwargs )
        for head in heads:
            for tail in tails:
                result.append(head + tail)
        return result

if __name__ == '__main__':
    allDigits = [ '1', '2', '3' ]
    lastDigit = [ '4', '5' ]
    letters   = [ 'a', 'b' ]
    print(""{}"".format( generate_combinations( allDigits, lastDigit, letters , Useless='parameter')))
"
How do I compare values in a dictionary?,"print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))"
Recursive generator in C++,"class Digit:
    def __init__(self, modulus):
        self.modulus = modulus
        self.value = 0
    def __str__(self):
        return str(self.value)
    def __nonzero__(self):
        return bool(self.value)
    def increment(self):
        self.value += 1
        self.value %= self.modulus
        return self.value == 0

class Number:
    def __init__(self, moduli):
        self.digits = [Digit(m) for m in moduli]
    def __str__(self):
        return """".join(str(d) for d in self.digits)
    def __nonzero__(self):
        return any(d for d in self.digits)
    def increment(self):
        carryover = True
        for d in reversed(self.digits):
            if carryover:
                carryover = d.increment()

n = Number([3,2,2])
while True:
    print n
    n.increment()
    if not n:
        break
"
"Python: Print first dictionary value for all keys on first line, second on second etc",">>> mapping = {
...     'a':['_________','_________','_________'],
...     'b':['---------','---------','---------'],
...     'c':['=========','=========','========='],
... }
>>> letters = 'abc'
>>> right_order = (mapping[l] for l in letters)
>>> transposed = zip(*right_order)
>>> for column in transposed:
...     print(*(column), sep='')
... 
_________---------=========
_________---------=========
_________---------=========
"
Calculator 7 Segment Display w/ Width,"def sizeVH(vSegHeight,hSegWidth,vSep,hSep):

    hSepStr= "" "" *hSep
    hSegN= "" ""* hSegWidth 
    hSegY= ""-""* hSegWidth

    phyLineN= []
    phyLineN.append([])
    phyLineN[0]= []
    phyLineN.append([])
    phyLineN[1]= []
    phyLineN[1].append([ """", "" "", hSegN,"" "", hSepStr ])
    phyLineN.append([])
    phyLineN[2]= []
    for i in range(vSegHeight) :
        phyLineN[2].append([ """", "" "", hSegN,"" "", hSepStr ])
    phyLineN.append([])
    phyLineN[3]= []
    phyLineN[3].append([ """", "" "", hSegN,"" "", hSepStr ])
    phyLineN.append([])
    phyLineN[4]= []
    for i in range(vSegHeight) :
        phyLineN[4].append([ """", "" "", hSegN,"" "", hSepStr ])
    phyLineN.append([])
    phyLineN[5]= []
    phyLineN[5].append([ """", "" "", hSegN,"" "", hSepStr ])
    phyLineN.append([])
    phyLineN[6]= []
    for i in range(vSep) :
        phyLineN[6].append([ """", "" "", hSegN,"" "", hSepStr ])

    phyLineY= []
    phyLineY.append([])
    phyLineY[0]= []
    phyLineY.append([])
    phyLineY[1]= []
    phyLineY[1].append([ """", "" "", hSegY,"" "", hSepStr ])
    phyLineY.append([])
    phyLineY[2]= []
    for i in range(vSegHeight) :
        phyLineY[2].append([ """", ""|"", hSegN,""|"", hSepStr ])
    phyLineY.append([])
    phyLineY[3]= []
    phyLineY[3].append([ """", "" "", hSegY,"" "", hSepStr ])
    phyLineY.append([])
    phyLineY[4]= []
    for i in range(vSegHeight) :
        phyLineY[4].append([ """", ""|"", hSegN,""|"", hSepStr ])
    phyLineY.append([])
    phyLineY[5]= []
    phyLineY[5].append([ """", "" "", hSegY,"" "", hSepStr ])
    phyLineY.append([])
    phyLineY[6]= []
    for i in range(vSep) :
        phyLineY[6].append([ """", "" "", hSegN,"" "", hSepStr ])

    return (phyLineN,phyLineY)

phyLineN, phyLineY= sizeVH(4,6,1,3)
printNumberNY(3475649560458,phyLineN,phyLineY)
"
Get file path from askopenfilename function in Tkinter,"if filename:
    with open(filename) as file:
        return file.read()
"
How to access python package metadata from within the python console?,"import pip

package = [pckg for pckg in pip.get_installed_distributions() 
            if pckg.project_name == 'package_name'][0]
#  package var will contain some metadata: version, project_name and others.
"
Extract list of values in dictionary for comparison?,"values=d[""chr""]

for i,j in enumerate(values[:-1]):
    first,second=set(j),set(values[i+1])  # current value and next
    print first.intersection(second)
"
python pandas: Rename a series within a dataframe?,"In [11]: df = DataFrame({""A"": [1,2], ""B"": [3,4]})

In [12]: df.rename(columns={""A"": ""series formerly known as A""})
Out[12]: 
   series formerly known as A  B
0                           1  3
1                           2  4
"
Best practice: prepopulate SlugField in Django (without Admin module),"vowels = {'a','e','i','o','u'}
create_nick = lambda name: name[0] + ''.join(l for l in name[1:] if l not in vowels)[:7]
if not self.nickname:
    self.nickname = create_nick(self.name) if len(self.name)>8 else self.name
...
"
Create a list with six sublists of random numbers,"def rand_lists(num_lists, num_vals):
    return [[randint(0, 30) for i in range(num_vals)] for n in range(num_lists)]


>>> rand_lists(2, 7)
[[17, 8, 29, 2, 9, 26, 16],
 [24, 22, 5, 10, 11, 0, 10]]
"
Python using function with if,"if a & b: myChain = myChain(a,b) 
"
parsing string from request data,">>> import re
>>> samples = [
...     u""magic: 'xfF9i4YBAQP1EgoNhgEBAw',"",
...     u""magic: 'AZJEXYx.ZsExcTHvjH9mwQ',"",
... ]
>>> magic_regex = re.compile(ur""magic:\s+'([^']+)',"")
>>> for sample in samples:
...     print magic_regex.search(sample).group(1)
... 
xfF9i4YBAQP1EgoNhgEBAw
AZJEXYx.ZsExcTHvjH9mwQ
"
collecting values from objects in a list,"myValueList = map(operator.attrgetter('prop1'), myList)  # use list(map(...)) in python3.x
"
numpy.unique with order preserved,"import numpy as np
a = np.array(['b','a','b','b','d','a','a','c','c'])
_, idx = np.unique(a, return_index=True)
print a[np.sort(idx)]
"
How do I join a list and then delete the last character?,"def littery(lst):
    return ''.join(word[:-1] for word in lst)
>>> littery(['Andy', 'Warhol'])
'AndWarho'
"
How to apply different aggregation functions to same column by using pandas Groupby,"data.groupby(['A','B']).agg([pd.Series.mean, pd.Series.std, pd.Series.count])
"
What is an elegant way to select all non-None elements from parameters and place them in a python dictionary?,"def function(*args, **kwargs):
    values = {}
    for k in kwargs:
        if kwargs[k] is not None:
            values[k] = kwargs[k]
    if not values:
        raise Exception(""No values provided"")
    return values

>>> function(varone=None, vartwo=""fish"", varthree=None)
{'vartwo': 'fish'}
"
Using regex in Python to extract description of an app from Apple store html,">>> [item.text for item in soup.find_all(""p"", {""itemprop"": ""description""})]
>>> [u' DESCRIPTION HERE ']
"
Python Simple Parse Tree Interpreter,"def parse(tokens):
    """"""parse: tokens_iter or generator -> Node
    From an infix stream of tokens, and the current index into the
    token stream, construct and return the tree, as a collection of Nodes,
    that represent the expression.""""""

    next_tok = next(tokens)

    if next_tok.isdigit():
        return ('literal', next_tok)

    elif next_tok == ""+"":
        return ('add', parse( tokens ), parse( tokens )) # first argument is the node.left, second is the node.right
    elif next_tok == ""-"":
        return ('sub', parse( tokens ), parse( tokens ))
    elif next_tok == ""*"":
        return ('mul', parse( tokens ), parse( tokens ))
    elif next_tok == ""//"":
        return ('div', parse( tokens ), parse( tokens ))

    else:
        return ('variable', next_tok )

# And, example:
print(parse(iter(['-', '//', 'y', '2', 'x'])))
"
"Given the name of a positional parameter to a function, can the parameter's position be determined?",">>> sig_f = inspect.signature(f)
>>> sig_g = inspect.signature(g)
>>> sig_f.parameters
mappingproxy(OrderedDict([('x', <Parameter at 0x1031f1ea8 'x'>), ('y', <Parameter at 0x102e00228 'y'>)]))
>>> sig_f.parameters['x'].annotation
<class 'int'>
>>> sig_g.parameters['b'].annotation
<class 'int'>
>>> sig_f.return_annotation == sig_g.return_annotation
True
"
python: Merge two 1D lists into one 1D list,"[item for items in zip(l1, l2) for item in items]
# [1,9,2,8,3,7,4,6]
"
Convert list of single element tuples to list of elements,"In [132]: zip(*lis)[0]
Out[132]: 
('Knightriders',
 'The Black Knight',
 'Fly by Knight',
 'An Arabian Knight',
 'A Bold, Bad Knight')
"
In python how do I compare an array/list to a number,"filtered = list(itertools.takewhile(lambda item: item%a != 0, array))
if len(filtered) != len(array):
    print array[len(filtered)]
"
"Python, how to substitute one level of a path for ""anything"" or ""*""","id1 = '*'
mask = os.path.join(""c:/logs"", id1, id2, '{}_log_{}_{}-00_{}.zip'.format(id1, dateID, hourID, id2))
for logZip in glob.iglob(mask):
    # logZip is a single file
"
Getting length of YouTube video (without downloading the video itself),"from datetime import timedelta
from urllib2 import urlopen
from xml.dom.minidom import parseString
for vid in ('wJ4hPaNyHnY', 'dJ38nHlVE78', 'huXaL8qj2Vs'):
    url = 'https://gdata.youtube.com/feeds/api/videos/{0}?v=2'.format(vid)
    s = urlopen(url).read()
    d = parseString(s)
    e = d.getElementsByTagName('yt:duration')[0]
    a = e.attributes['seconds']
    v = int(a.value)
    t = timedelta(seconds=v)
    print(t)
"
Python X-axis nearest point,">>> import bisect
>>> def nearest(x, d):
...     index = bisect.bisect(d, x)
...     if not index:
...         return d[index]  # left-most x coordinate
...     if index == len(d):
...         return d[-1]  # right-most x coordinate
...     return min(d[index - 1:index + 1], key=lambda v: abs(v - x))
... 
>>> d = [-5, -3.5, -2.8, -0.6, 1.2, 3.4, 5.6]
>>> nearest(10, d)
5.6
>>> nearest(-10, d)
-5
>>> nearest(0, d)
-0.6
>>> nearest(3, d)
3.4
"
Web crawler to extract in between the list,"from datetime import datetime
import re

from bs4 import BeautifulSoup


data = '<li>January 13, 1991: At least 40 people <a href ="".......""> </a> </li>'
soup = BeautifulSoup(data)

date_string, rest = soup.li.text.split(':', 1)

print datetime.strptime(date_string, '%B %d, %Y').strftime('%d/%m/%Y')
print re.match(r'At least (\d+)', rest.strip()).group(1)
"
Python: 2-item combinations from list of lists containing 1 or more items,"combos = list(chain.from_iterable(product(*c) for c in combinations(x,2)))
"
Get value using lxml,"root.xpath('//h4[@class=""inline""]/following-sibling::text()')[0] 
"
Is there a simpler way to change 0xff01 into \\uff01?,"for i in range(65281, 65375):
    x = '\\u{:04x}'.format(i)
"
"How can I tell MATLAB that the data I am importing is a series of vectors, not just a series of letters?","foo.A = ones(1,5);
foo.B = 2*ones(1,5);
foo.C = 3*ones(1,5);

load('set1.mat'); 

D = [foo.(abc1(1,1)) foo.(abc1(1,2)) foo.(abc1(1,3))];
"
Matlab's Logicals for Array Indexing - Python Equivalent,"import random
a = [random.random() - 0.5 for _ in range (10)]
a = [None if i < 0 else i for i in a]
"
Spark: Generate Map Word to List of Similar Words - Need Better Performance,"from difflib import SequenceMatcher

def is_similar(x, y):
    """"""Dummy similarity check
    >>> is_similar(""AAAAA"", ""AAAAT"")
    True
    >>> is_similar(""AAAAA"", ""TTTTTT"") 
    False
    """"""
    return SequenceMatcher(None, x, y).ratio() > 0.75


def find_similar(kmer, f=is_similar, alphabet=""ATGC""):
    """"""
    >>> kmer, similar = find_similar(""AAAAAA"")
    >>> sorted(similar)[:5]
    ['AAAAAA', 'AAAAAC', 'AAAAAG', 'AAAAAT', 'AAAACA']
    """"""
    candidates = product(alphabet, repeat=len(kmer))
    return (kmer, {"""".join(x) for x in candidates if is_similar(kmer, x)})


 similar_map = kmers.flatmap(find_similar)
"
Update dictionary from two yield functions,">>> [{'number':i,'other_number':j} for i,j in zip(range(0,4),range(3,6))]
[{'number': 0, 'other_number': 3},
 {'number': 1, 'other_number': 4},
 {'number': 2, 'other_number': 5}]
"
Split list in and then join elements in sublists,">>> from itertools import groupby
>>> my_list = ['A > 1', 'B > 2', '\n', 'C > 3', 'D > 4', '\n', 'E > 5', 'F > 6', '\n']
>>> [list(g) for k, g in groupby(my_list, ""\n"".__ne__) if k]
[['A > 1', 'B > 2'], ['C > 3', 'D > 4'], ['E > 5', 'F > 6']]
"
Date removed from x axis on overlaid plots matplotlib,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

n = 100
dates = pd.date_range(start = ""2015-01-01"", periods = n, name = ""yearDate"")

dfs = []

for i in range(3):
    df = pd.DataFrame(data = np.random.random(n)*(i + 1), index = dates,
                      columns = [""DataFrame #"" + str(i) ] )
    df.df_name = str(i)
    dfs.append(df)

df = pd.concat(dfs, axis = 1)
df.plot()
"
Python applying dynamic list comprehension (list append),">>> def f(lst):
...     return [x+1 for x in lst] + [len(lst)]
>>> reduce(lambda lst, i: lst + [f(lst[i])], range(5), [[1]])
[[1], [2, 1], [3, 2, 2], [4, 3, 3, 3], [5, 4, 4, 4, 4], [6, 5, 5, 5, 5, 5]]
"
How to filter a list based on another list's values,">>> import numpy
>>> a = [[1,2],[2,2],[3,3],[4,2],[5,6]]
>>> b = [1,2,2,3,1]
>>> a = numpy.array(a)
>>> b = numpy.array(b)
>>> a[b==1]
array([[1, 2],
       [5, 6]])
>>> a[b==2]
array([[2, 2],
       [3, 3]])
>>> b[b==2]
array([2, 2])
"
python create dictionary from list of strings and list of integers,"titles =  ['Barrel - Part 1', 'Petit Trees (sketch)', 'Island (sketch)']
pages =  [1, 2, 3]

finalDict = {}
for title, page in zip(titles, pages):
    for word in title.split("" ""):
        if word not in finalDict.keys():
            finalDict[word] = [int(page)]
        else:
            finalDict[word] += [int(page)]

print(finalDict)
"
Sorting a list of lists with itertools imap in Python,"for value in foo.values():
    value.sort()
"
Extract attributes and certain tag values from xml using python script,"from lxml import etree


tree = etree.parse('test.xml')

result = {}
for element in tree.xpath('/ecmaarray/*'):
    name = element.attrib[""name""]
    text = element.text
    childs = element.getchildren()

    if not childs:
        result[name] = text
    else:
        child_dict = {}
        child_list = []
        for child in childs:
            child_name = child.attrib.get('name')
            child_text = child.text
            if child_name:
                child_dict[child_name] = child_text
            else:
                child_list.append(child_text)

        if child_dict:
            result[name] = child_dict
        else:
            result[name] = child_list


print result
"
How can I check if a list exist in a dictionary of lists in the same order,"d = {1 : [1,2,3], 2: [2,1]}
lsts = [[1,2],[2,1]]
print(any(x in d.values() for x in lsts))
True

d = {1:[1,2,3],2:[1,2]}
lsts = [[3,2,1],[2,1]]
print(any(x in d.values() for x in lsts))
False
"
Taking info from a File,"import os
#hard code the path to the external file
external_file = 'names.txt'

#if file doesn' exists, create a new file
if not os.path.exists(external_file):
    #Ask the user's name
    name = raw_input(""What's your name?"")
    with open(external_file, ""a"") as f: #using ""a"" will append to the file
        f.write(name)# Write the name to names.txt
        f.write(""\n"")
        f.close()
else:
    #if file exists, use it to load name, else ask user
    with open(external_file, ""r"") as f:#r+ opens a file for reading & writing
        lines = f.read().split('\n') # split the names 
        f.close()
        print ""Hi {}"".format(lines[0])
        response = raw_input(""Is this your name?"")
        if 'no' in response.lower():
            name = raw_input(""What's your name?"") # Asks for new name
            with open(external_file, ""w"") as f:
                f.write(name)# Write the name to names.txt
                f.write(""\n"")
                f.close()
"
Parsing Python Dictionary Keys,"def layers(data):
    try:
        keys = [data.keys()]
    except ValueError:
        return
    rest = layers(next(iter(data.values())))
    return keys + rest if rest else keys
"
Extracting part of a string,">>> import re
>>> s = 'randomwordabcrandomwordsxyzrandomwords'
>>> m = re.search('(abc.*?xyz)', s)
>>> m.group()
'abcrandomwordsxyz'
>>>
"
Using ETag / Last-Modified decorators with Django's class-based generic views,"def dispatch(self, request, *args, **kwargs):
    @condition(...)
    def _dispatch(request, *args, **kwargs):
        return super(ViewClass, self).dispatch(request, *args, **kwargs)
    return _dispatch(request, *args, **kwargs)
"
get some words sorted by occurrence and some words should be ignored from a string,"from collections import Counter
from string import punctuation

cnt = Counter(word for line in text.lower() for word in
              (word.rstrip(punctuation) for word in line.split() 
               if word not in ignore))
"
Python tuple instead of list,"[[os.stat(f).st_size, os.path.realpath(f)] for f in glob.glob('*.sh')]
"
Calculate hour range between dates in python,"from datetime import timedelta as td, datetime

start_date = '2016-01-01'
end_date = '2016-01-02'
d1 = datetime.strptime(start_date, '%Y-%m-%d')
d2 = datetime.strptime(end_date, '%Y-%m-%d')

def get_delta(d1, d2):
    delta = d2 - d1
    return delta

delta = get_delta(d1,d2)
for i in range(delta.days * 24 + 1):
    print d1 + td(hours=i)
"
Print List Of List. Go from list[x][y] to list[y][x],"list = [['apples', 'oranges', 'cherries', 'banana'],
        ['Alice', 'Bob', 'Carol', 'David'],         
        ['dogs', 'cats', 'moose', 'goose']]         


def swaplist(list):                                 
    result_list = []                                
    for index in range(0, len(list[0])):               
        temp_list = []                              
        for i in list:                              
            temp_list.append(i[index])              
        result_list.append(temp_list)               
    return result_list                              

print swaplist(list)                           
"
"How do I check a string, using python, against some specific ABNF rules?","import re

class ZipRelPath:
    FILE_NAME_RE = re.compile(u""^[a-zA-Z0-9 \$\%\'\-_@~\(\)&+,=\[\]\.\u0080-\uFFFF]+$"")
    LANG_TAG_RE  = re.compile(""^[a-z]{1,8}(\-[a-z0-9]{1,8})*$"")
    LOCALES      = ""locales/""

    def __init__(self, path):
        self.path = path
        self.lang_tag = None
        self.folders = []
        self.file_name = None

        self._parse_locales()
        self._parse_folders()

    def _parse_locales(self):
        """"""Consumes any leading 'locales' and lang-tag""""""
        if self.path.startswith(ZipRelPath.LOCALES):
            self.path = self.path[len(ZipRelPath.LOCALES):]
            self._parse_lang_tag()

    def _parse_lang_tag(self):
        """"""Parses, consumes and validates the lang-tag""""""
        self.lang_tag, _, self.path = self.path.partition(""/"")
        if not self.path:
            raise ValueError(""lang-tag missing closing /"")
        if not ZipRelPath.LANG_TAG_RE.match(self.lang_tag):
            raise ValueError(u""'%s' is not a valid language tag"" % self.lang_tag)

    def _parse_folders(self):
        """"""Handles the folders and file-name after the locale""""""
        while (self.path):
            self._parse_folder_or_file()

        if not self.folders and not self.file_name:
            raise ValueError(""Missing folder or file name"")

    def _parse_folder_or_file(self):
        """"""Each call consumes a single path entry, validating it""""""
        folder_or_file, _, self.path = self.path.partition(""/"")
        if not ZipRelPath.FILE_NAME_RE.match(folder_or_file):
            raise ValueError(u""'%s' is not a valid file or folder name"" % folder_or_file)
        if self.path:
            self.folders.append(folder_or_file)
        else:
            self.file_name = folder_or_file

    def __unicode__(self):
        return u""ZipRelPath [lang-tag: %s, folders: %s, file_name: %s"" % (self.lang_tag, self.folders, self.file_name)
"
"Python regex, how to search for multiple strings?","[A-Z]+-\d+
"
Unpack dictionary that contains a list of dictionaries and insert in columns,"dict1 = {}
for eachKey in list(set("","".join(each.keys()) for each in result[""themes""]))[0].split("",""):
    dict1[eachKey] = [each[eachKey] for each in result[""themes""]]
print dict1
"
Indentation of pformat() output,"def f(obj_name, given_dct):
    """"""
    Converts given dct (body) to a pretty formatted string.
    Resulting string used for file writing.

    Args:
        obj_name: (str) name of the dict
    Returns:
        (str)
    """"""

    string = pp.pformat(given_dct, width=1)[1:]

    new_str = ''
    for num, line in enumerate(string.split('\n')):
        if num == 0:
            # (pprint module always inserts one less whitespace for first line)
            # (indent=1 is default, giving everything one extra whitespace)
            new_str += ' '*4 + line + '\n'
        else:
            new_str += ' '*3 + line + '\n'

    return obj_name + ' = {\n' + new_str


s = f(obj_name='MY_DCT', given_dct=d)
"
Make one list from two list applying constraint,">>> A = [2,3,1,4,5,2,4]
>>> B = [4,2,3,6,2,5,1]
>>> [i for sublist in [[a, b] if a < b else [b, a] for a, b in zip(A, B)] for i in sublist]
[2, 4, 2, 3, 1, 3, 4, 6, 2, 5, 2, 5, 1, 4]
"
How to use in python regular expression,"m = re.compile(r'\d{%d}:\d{%d}' % (int(var1), int(var2)))
"
Scene object selective export using Blender Python API 2.6,"import bpy, bmesh 

for ob in bpy.context.scene.objects: 
    if ob.type != 'MESH': 
        continue
    bm = bmesh.new() 
    bm.from_object(ob, bpy.context.scene) 

    if len(bm.faces) > 0 and 0 not in (len(e.link_faces) for e in bm.edges): 
        print(ob.name, ""is valid"") 
    else: 
        print(ob.name, ""has errors"") 
"
itertools or functools for find-replace list in python,">>> [reduce(lambda x, y: x.replace(y[0], y[1]), replacements, s) for s in mylist]
['singing', '', 'This is gold', 'HTML', 'HTML']
"
find a matching line in a txt with python,"pdfname = ""statementConcentrator""
if (pdfname in open(""line56.good"").read()):
    print ""Found it""

lineNum = 0
for line in open(""line56.good"").readlines():
    lineNum = lineNum + 1
    if pdfname in line:
        print ""#%5d: %s""%(lineNum, line[:-1])
"
why doesn't ** unpack kwargs in function calls?,"def test(*args, **kwargs):
    target = kwargs.get('target', '<default-value>')
    print target
"
Python - Getting Rid of Spaces in String,"In [746]: s='asdf             fasd zzzzzz          ddddddd      z'

In [747]: timeit ' '.join(s.split())
1000000 loops, best of 3: 545 ns per loop

In [748]: ptn=re.compile(r""\s+"")

In [749]: timeit re.sub(ptn, ' ', s)
100000 loops, best of 3: 4.08 us per loop
"
Python - Create list with numbers between 2 values?,"list(range(11, 17))"
optimize python key-searching in hierarchichal dictionary,"def updateNgenes(self):
#Updating the number of genes
    self.ngenes = len(self.genes.keys()) 
"
Scripts in python package,"from .. import mypackage
"
Python - Opening and changing large text files,"mesh = open(""file.mesh"", ""r"")
mesh_out = open(""file-1.mesh"", ""w"")

c = mesh.read(1)

if c:
    mesh_out.write(""{"")
else:
    exit(0)
while True:
    c = mesh.read(1)
    if c == """":
        break

    if c == ""["":
        mesh_out.write("",{"")
    elif c == ""]"":
        mesh_out.write(""}"")
    else:
        mesh_out.write©
"
"How to find the combinations (probability) for a,b,c,d,e","import itertools

mystring = 'abcde'
for i in range(1,len(mystring)+1):
    for combo in itertools.combinations(mystring, i):
        print(''.join(combo))
"
Pandas truncate DataFrame after a column condition is met,"import pandas as pd
df = pd.DataFrame({'STEPS_ID':range(1107,1113)*2})
df['GROUP'] = (df['STEPS_ID'] < df['STEPS_ID'].shift(1)).astype('int').cumsum()
# df.set_index('GROUP', inplace=True, append=True)
print(df)
"
How to add Objects to Class with a loop in Python?,"object_dict = dict( (y, CharInStageList(x,y)) for x,y in data )
"
Improving performance of very large dictionary in Python," d = dict.fromkeys(['red', 'green', 'blue', 'yellow', 'orange'])
 d.update(dict(d))     # This makes room for additional keys
                       # and makes the set collision-free.
"
Python regex - faster search,"thisone_pos = rr.find('JA=THISONE')
range_start = rr.rfind(""JA="", 0, thisone_pos) + 3
range_end = rr.find(';', range_start)
print rr[range_start:range_end]
"
Add log separators to all fixtures in unittests,"import functools
import unittest

FUNCTIONS_TO_LOG = ('setUp', 'tearDown')


def log_start_and_end(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        print '********** start {}'.format(f.__name__)
        f(*args, **kwargs)
        print '********** end {}'.format(f.__name__)
    return wrapper


class LoggingMeta(type):
    def __new__(cls, name, bases, namespace):
        for attr, obj in namespace.items():
            if attr in FUNCTIONS_TO_LOG:
                namespace[attr] = log_start_and_end(obj)
        return super(LoggingMeta, cls).__new__(cls, name, bases, namespace)


class BaseTest(unittest.TestCase):
    __metaclass__ = LoggingMeta

    def setUp(self):
        print 'inside setup'

    def tearDown(self):
        print 'inside teardown'

    def test_test(self):
        print 'inside test'

if __name__ == '__main__':
    unittest.main()
"
I want to get numeric data from string. How to do that in python?,">>> import re
>>> a = ""data23/45 data""
>>> [int(x) for x in re.split('[^\d]+', a) if x]
[23, 45]
"
Face recognition in OpenCV Python FAR/FRR,"from sklearn.base import BaseEstimator

class FaceRecognizerModel(BaseEstimator):

    def __init__(self):
        self.model = cv2.createEigenFaceRecognizer()

    def fit(self, X, y):
        self.model.train(X,y)

    def predict(self, T):
        return [self.model.predict(T[i]) for i in range(0, T.shape[0])]
"
Dictionary best data structure for train routes?,"def find_all_paths(graph, start, end, path=[]):
        path = path + [start]
        if start == end:
            return [path]
        if start not in graph:
            return []
        paths = []
        for node in graph[start]:
            if node not in path:
                newpaths = find_all_paths(graph, node, end, path)
                for newpath in newpaths:
                    paths.append(newpath)
        return paths       

def min_path(graph, start, end):
    paths=find_all_paths(graph,start,end)
    mt=10**99
    mpath=[]
    print '\tAll paths:',paths
    for path in paths:
        t=sum(graph[i][j] for i,j in zip(path,path[1::]))
        print '\t\tevaluating:',path, t
        if t<mt: 
            mt=t
            mpath=path

    e1=' '.join('{}->{}:{}'.format(i,j,graph[i][j]) for i,j in zip(mpath,mpath[1::]))
    e2=str(sum(graph[i][j] for i,j in zip(mpath,mpath[1::])))
    print 'Best path: '+e1+'   Total: '+e2+'\n'  

if __name__ == ""__main__"":
    graph = {'A': {'B':5, 'C':4},
             'B': {'C':3, 'D':10},
             'C': {'D':12},
             'D': {'C':5, 'E':9},
             'E': {'F':8},
             'F': {'C':7}}
    min_path(graph,'A','E')
    min_path(graph,'A','D')
    min_path(graph,'A','F')
"
Check if any value of a dictionary matches a condition,">>> pairs = { 'word1':0, 'word2':0, 'word3':2000, 'word4':64, 'word5':0, 'wordn':8 }
>>> any(v > 0 for v in pairs.itervalues())
True
>>> any(v > 3000 for v in pairs.itervalues())
False
"
Checking if a website is up,"conn = httplib.HTTPConnection('www.python.org')
conn.request('HEAD', '/')
r1 = conn.getresponse()
print(r1.status, r1.reason)"
Data structure to implement reverse functionality of a dictionary,"wordpower = {
        ""positive"": (""best"" , ""up"" , ""awesome"" , ""fantastic"" , ""happy"" , ""better"" , ""wonderful"" , ""good"" ),
        ""negative"": (""worst"" , ""down"" , ""terrible"" , ""horrible"" , ""sad"" , ""worse"" , ""dreadful"" , ""bad"" )
        }
reverse = {}
for k, v in wordpower.iteritems():
    for word in v:
        reverse[word] = k
pprint(reverse)
"
Search and sort data from several files,"import heapq, glob

def my_iterable():
    for fname in glob.glob(""in_s*.txt""):
        f = open(fname, ""r"")
        for line in f:
            items = line.split()
            yield fname, items[0], float(items[6])
        f.close()

result = heapq.nsmallest(10, my_iterable(), lambda x: x[2])
print result
"
I need some help starting of this radio program,"import itertools

class Radio:
    def __init__(self):
        self.stations = itertools.cycle([""STATIC"",""97.2"", ""99.6"", ""101.7"", ""105.3"", ""108.5""])
        self.current_station = next(self.stations)

    def seek(self):
        print(""Currently tuned to"", self.current_station)
        print(""Seeking..."")
        self.current_station = next(self.stations)
        print(""Now tuned to"", self.current_station)
"
Applying sqrt function on a column,"import numpy as np
np.sqrt(football[['wins', 'losses']].sum(axis=1))
"
Regex with end of line in group,">>> import re
>>> string = """""".-[ 127.0.0.1/44963 -> 127.0.0.1/502 (syn+ack) ]-
... |
... | server   = 127.0.0.1/502
... | os       = ???
... | dist     = 0
... | params   = none
... | raw_sig  = 4:64+0:0:0:32768,0:::0
... |
... `----""""""
>>> match = re.match( r'(.*)os\s*=(.*?)\n', string, re.DOTALL)
>>> match.group(2)
' ???'
"
"Python , Printing Hex removes first 0?",">>> hex(15)[2:].zfill(2)
'0f'
"
Pandas: convert list of string tuples to dataframe faster?,"In [197]: coords = pd.Series([
   .....:    '(29.65271977700047, -82.33086252299967)',
   .....:    '(29.652914019000434, -82.42682220199964)',
   .....:    '(29.65301114200048, -82.36455186899968)',
   .....:    '(29.642610841000476, -82.29853169599966)'])

In [198]: coords = pd.concat([coords]*1000, ignore_index=True)


In [199]: %%timeit
   .....: str_coords = coords.str[1:-1].str.split(', ')
   .....: df_coords = pd.DataFrame({'lat': str_coords.str[0], 'lon': str_coords.str[1]}, dtype=float)
   .....:
100 loops, best of 3: 14.1 ms per loop

In [200]: %%timeit
   .....: str_coords = coords.str[1:-1].str.split(', ')
   .....: df_coords = str_coords.apply(pd.Series).astype(float)
   .....:
1 loops, best of 3: 821 ms per loop

In [201]: %%timeit
   .....: df_coords = coords.str.extract(r'\((?P<lat>[\d\.]+),\s+(?P<lon>[^()\s,]+)\)')
   .....: df_coords.astype(float)
   .....:
100 loops, best of 3: 16.2 ms per loop
"
python or bash script to pass all files in a folder to java command line,"#!/usr/bin/env python
from glob import glob
from multiprocessing.pool import ThreadPool
from subprocess import call
try:
    from threading import get_ident # Python 3.3+
except ImportError: # Python 2
    from thread import get_ident

cmd = 'java -cp stanford-ner.jar edu.stanford.nlp.process.PTBTokenizer'.split()
def run_command(files):
    with open('output%d.txt' % get_ident(), 'ab', 0) as file:
        return files, call(cmd + files, stdout=file)

all_files = glob('*.txt')
file_groups = (all_files[i:i+100] for i in range(0, len(all_files), 100))
for _ in ThreadPool(10).imap_unordered(run_command, file_groups):
   pass
"
Check if list item contains items from another list,">>> my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456', 'def-111', 'qwe-111']
>>> bad = ['abc', 'def']
>>> [e for e in bad if e in '\n'.join(my_list)]
['abc', 'def']
"
Counting same elements in an array and create dictionary,"import numpy as np

a = [0,0,0,0,0,0,1,1,2,1,0,0,0,0,1,0,1,2,1,0,2,3]

# Find indexes of all zeroes
index_zeroes = np.where(np.array(a) == 0)[0]

# Find discontinuities in indexes, denoting separated groups of zeroes
# Note: Adding True at the end because otherwise the last zero is ignored
index_zeroes_disc = np.where(np.hstack((np.diff(index_zeroes) != 1, True)))[0]

# Count the number of zeroes in each group
# Note: Adding 0 at the start so first group of zeroes is counted
count_zeroes = np.diff(np.hstack((0, index_zeroes_disc + 1)))

# Count the number of groups with the same number of zeroes
groups_of_n_zeroes = {}
for count in count_zeroes:
    if groups_of_n_zeroes.has_key(count):
        groups_of_n_zeroes[count] += 1
    else:
        groups_of_n_zeroes[count] = 1
"
Find the number of ways a sequence can be rearranged,"import itertools
def arrangements(arr):
    p = itertools.permutations(arr)
    return set(item for item in p if all(x!=y for x,y in zip(item,arr)))
"
Convert list of numpy.float64 to float in Python quickly,"In [46]: c
Out[46]: 
[0.0,
 0.33333333333333331,
 0.66666666666666663,
 1.0,
 1.3333333333333333,
 1.6666666666666665,
 2.0]

In [47]: type(c)
Out[47]: list

In [48]: type(c[0])
Out[48]: numpy.float64
"
Split element in string into segments,"print([line.split() for line in [' '.join(group) for group in data]])
"
python filter rewrite filter,"words_no_double_caps = [word for word in words_alnum 
                        if sum(ch.isupper() for ch in word) < 2]
words_no_double_caps = list(filter((lambda word: sum(map(
                           lambda ch: ch.upper(), word)) < 2), words_alnum))
"
Numpy: Striding a multiple channel image,"In [1]: a = np.arange(2*2*2).reshape((2,2,2))

In [2]: a
Out[2]: 
array([[[0, 1],
        [2, 3]],

       [[4, 5],
        [6, 7]]])

In [3]: a.flatten()
Out[3]: array([0, 1, 2, 3, 4, 5, 6, 7])

In [4]: np.swapaxes(a,2,1).flatten()
Out[4]: array([0, 2, 1, 3, 4, 6, 5, 7])
"
python have glob return only the 5 most recent file matches,"for name in sorted(glob.glob('/home/myfiles/*_customer_records_2323_*.zip'))[-5:]:
    print '\t', name
"
Python finding most common pattern in list of strings,"calls = ['admob.api.oauthcert', 'admob.api.newsession', 'admob.endusercampaign']
from collections import Counter
Counter(reduce(lambda x,y: x+y,map (lambda x : x.split("".""),calls))).most_common(2)
"
Python getting all links from a google search result page,"from bs4 import BeautifulSoup
page = requests.get(""https://www.google.dz/search?q=see"")
soup = BeautifulSoup(page.content)
import re
links = soup.findAll(""a"")
for link in  soup.find_all(""a"",href=re.compile(""(?<=/url\?q=)(htt.*://.*)"")):
    print re.split("":(?=http)"",link[""href""].replace(""/url?q="",""""))

['https://www.see.asso.fr/&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CBIQFjAA&usg=AFQjCNF2_I8jB98JwR3jcKniLZekSrRO7Q']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:f7M8NX1XmDsJ', 'https://www.see.asso.fr/%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CBUQIDAA&usg=AFQjCNF8WJButjMNXQXvXBbtyXnF1SgiOg']
['https://www.see.asso.fr/3ei&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CBgQ0gIoADAA&usg=AFQjCNGnPL1RiX5TekI_yMUc-w_f2oVXtw']
['https://www.see.asso.fr/node/9587&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CBkQ0gIoATAA&usg=AFQjCNHX-6AzBgLQUF0s8TxFcZjIhxz_Hw']
['https://www.see.asso.fr/ree&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CBoQ0gIoAjAA&usg=AFQjCNGkkd8e1JjiNrhSM4HQYE-M6g6j-w']
['https://www.see.asso.fr/node/130&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CBsQ0gIoAzAA&usg=AFQjCNEkVdpcbXDz5-cV9u2NNYoV6aM8VA']
['http://www.wordreference.com/enfr/see&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CB0QFjAB&usg=AFQjCNHQGwcsGpro26dhxFP6q-fQvwbB0Q']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:ooK-I_HuCkwJ', 'http://www.wordreference.com/enfr/see%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CCAQIDAB&usg=AFQjCNFRlV5Zv_n48Wivr4LeOkTQsA0D1Q']
['http://fr.wikipedia.org/wiki/S%25C3%25A9e&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CCMQFjAC&usg=AFQjCNGmtqmcXPqYZ_nwa0RWL0uYf5PMJw']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:GjcgkyzsUigJ', 'http://fr.wikipedia.org/wiki/S%2525C3%2525A9e%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CCYQIDAC&usg=AFQjCNHesOIBU3OXBspARcONbK_k_8-gnw']
['http://fr.wikipedia.org/wiki/Camille_S%25C3%25A9e&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CCkQFjAD&usg=AFQjCNGO-WIDl4TrBeo88WY9QsopWmsMyQ']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:izhQjC85nOoJ', 'http://fr.wikipedia.org/wiki/Camille_S%2525C3%2525A9e%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CCwQIDAD&usg=AFQjCNEfcIKsKbf026xgWT7NkrAueZvL0A']
['http://de.wikipedia.org/wiki/Zugersee&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CDEQ9QEwBA&usg=AFQjCNHpfJW5-XdsgpFUSP-jEmHjXQUWHQ']
['http://commons.wikimedia.org/wiki/File:Champex_See.jpg&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CDMQ9QEwBQ&usg=AFQjCNEordFWr2QIaob45WlR5Yi-ZvZSiA']
['http://www.all-free-photos.com/show/showphotop.php%3Fidtop%3D4%26lang%3Dfr&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CDUQ9QEwBg&usg=AFQjCNEC24FOIE5cvF4zmEDgq5-5xubM3w']
['http://www.allbestwallpapers.com/travel-zell_am_see,_kaprun,_austria_wallpapers.html&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CDcQ9QEwBw&usg=AFQjCNFkzMZDuthZHvnF-JvyksNUqjt1dQ']
['http://www.see-swe.org/&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CDkQFjAI&usg=AFQjCNF1zbcLfjanxgCXtHoOQXOdMgh_AQ']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:lzh6JxvKUTIJ', 'http://www.see-swe.org/%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CDwQIDAI&usg=AFQjCNFYN6tzzVaHsAc5aOvYNql3Zy4m3A']
['http://fr.wiktionary.org/wiki/see&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CD8QFjAJ&usg=AFQjCNFWYIGc1gj0prytowzqI-0LDFRvZA']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:G9v8lXWRCyQJ', 'http://fr.wiktionary.org/wiki/see%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CEIQIDAJ&usg=AFQjCNENzi4E1n-9qHYsNahY6lQzaW5Xvg']
['http://en.wiktionary.org/wiki/see&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CEUQFjAK&usg=AFQjCNECGZjw-rBUALO43WaTh2yB9BUhDg']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:ywc4URuPdIQJ', 'http://en.wiktionary.org/wiki/see%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CEgQIDAK&usg=AFQjCNE0pykIqXXRl08E-uTtoj03QEpnbg']
['http://see-concept.com/&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CEsQFjAL&usg=AFQjCNGFWjhiH7dEBhITJt01ob_JENlz1Q']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:jHTkOVEoRsAJ', 'http://see-concept.com/%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CE4QIDAL&usg=AFQjCNECPgxt9ZSFmZzK_ker9Hw_FoCi_A']
['http://www.theconjugator.com/la/conjugaison/du/verbe/see.html&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CFEQFjAM&usg=AFQjCNETCTQ0vPDIdV_2Q57qq11dyN0d8Q']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:xD7_Qo7roS8J', 'http://www.theconjugator.com/la/conjugaison/du/verbe/see.html%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CFQQIDAM&usg=AFQjCNF_hBCyDZncivYGnL7je5kYme9hEg']
['http://www.zellamsee-kaprun.com/fr&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CFcQFjAN&usg=AFQjCNFVDeBWrZMDSjK9jKYF4AQlIXa9lA']
['http://webcache.googleusercontent.com/search%3Fq%3Dcache:BFBEUp05w7YJ', 'http://www.zellamsee-kaprun.com/fr%252Bsee%26hl%3Dfr%26%26ct%3Dclnk&sa=U&ei=ryv6U6PvEKzA7AaB4ICwCA&ved=0CFoQIDAN&usg=AFQjCNHtrOeEpYWqvT3f0M1p-gxUkYT1IA']
"
Python - 'tuple' object does not support item assignment,"from __future__ import division # unnecessary on Py 3
"
comparing numbers in 2 string A and B,"bool(set(int(n) for n in a.split(',')).intersection(int(n) for n in b.split(',')))
"
Find all values with maximum length in a dictionary,"m = max(sortDict.values())
print [v for v in sortDict.values() if len(v) == m]
"
Python 3.5 Regular expressions cannot read text file,"In [18]: records = data.split('\n\n')

In [19]: len(records)
Out[19]: 2

In [20]: records[0][:50]
Out[20]: '\n1)\nName\tfile.doc\nFile Category\tDocument\nFile Type'
"
Splitting strings in python,"re.findall('\\[[^\\]]*\\]|""[^""]*""|\\S+', s)"
Diffing Binary Files In Python,"matches = [(next(g), len(list(g))+1)
           for k, g in groupby(range(min(len(f1), len(f2))), key=lambda i: f1[i] == f2[i])
               if k]
"
How can I differentiate regular whitespaces and escaped ones (&#32;) when parsing XML with xml.etree.ElementTree (python),"
import xml.etree.ElementTree

stop_escape   = lambda text: text.replace(""&#"", ""|STOP_ESCAPE|"")
resume_escape = lambda text: text.replace(""|STOP_ESCAPE|"", ""&#"")

xml_text = """"""
<root>
    <mytag>
        data_with_space&#32;
    </mytag>
</root>""""""
root = xml.etree.ElementTree.fromstring(stop_escape(xml_text))
mytag_txt = resume_escape(root.find(""mytag"").text)
print ""original text: "", repr(mytag_txt)
print ""stripped text: "", repr(mytag_txt.strip())
"
Add multiple columns with zero values from a list to a Pandas data frame,"for col in l:
    df[col] = 0
"
Move file to a folder or make a renamed copy if it exists in the destination folder,"import glob
import re
...
def rename_file(source_filename, source_ext):                                   
    filename_pattern = os.path.join(dest, ""%s[0-9]*%s""                          
                                    % (source_filename, source_ext)) 
    # Contains file such as 'a1.c', 'a2.c', etc...
    existing_files = glob.glob(filename_pattern)
    regex = re.compile(""%s([0-9]*)%s"" % (source_filename, source_ext))          
    # Retrieve the max of the index used for this file using regex
    max_index = max([int(match.group(1))                                        
                     for match in map(regex.search, existing_files)
                     if match])                                                   
    source_full_path = os.path.join(source, ""%s%s""                              
                                    % (source_filename, source_ext))            
    # Rebuild the destination filename with the max index + 1 
    dest_full_path = os.path.join(dest, ""%s%d%s""                                
                                  % (source_filename,                           
                                     (max_index + 1),                           
                                     source_ext))                               
    shutil.copy(source_full_path, dest_full_path)

 ...
 # If the file already exists i.e. replace the while loop in the else statement
 rename_file(name, extension)
"
Python regex based split,"import re
from pprint import pprint

thestr = ""(x=1, y = 2, z = 3 ) (a = 1) (m = 4, n = 6, o = 2)""
groups = re.findall(r'\([^)]+\)', thestr)
matches = []

for group in groups:
    matches.append(re.findall(r'(\w+)\s*=\s*(\d+)', group))

pprint(matches)
"
Why does the order of dimensions change with boolean indexing?,"
ind = np.nonzero(val)[0]
# array([ 0,  1,  2, ...., 39], dtype=int32)
M[0, :, ind].shape   # (40,20)
"
Creating a 2-dimensional Numpy array with the euclidean distance from the center,">>> scipy.spatial.distance.cdist(X, np.atleast_2d(center)).ravel()
array([ 2.72130005,  1.62765189,  1.14245608,  2.55279445,  2.43727709,
        3.20647709,  1.65028127,  0.79044422,  1.8180881 ,  2.38094952])
"
Numpy einsum broadcasting,"np.einsum('...mm->...m', arr)
"
"Reading multiple csv files, concatenate list of file names them into a singe DataFrame","df_dict = {}
df_dict['nba'] = get_merged_csv(path, '*nba.csv')
df_dict['basketball'] = get_merged_csv(path, '*basketball.csv')
df_dict['soccer'] = get_merged_csv(path, '*soccer.csv')
"
Removing many types of chars from a Python string,"string2 = string1.translate(None, "";.,:"")
"
down to zero hackerrank getting time exceeded,"if primes[data] == 1 and memoize[data-1] == -1:
"
Custom Class - Change attribute in array,"Matrix=property(fget=get_Matrix,fset=set_Matrix)         
nonzero =property(fget=get_nonzero,fset=set_nonzero)
"
Python 2.7 accepting capital letters,"Enter your choice: menu
Try again
Enter your choice: mennu
Try again
Enter your choice: mEnU1
Correct input
"
Convert from irregular frequency to monthly within groupby objects in pandas dataframe,"import pandas as pd

df_dg = pd.DataFrame(dict(
     UserID=[11590] * 3 + [115948] * 4,
     Date=[20050613, 20050905, 20051214,
                    20040924, 20041101, 20050202,20050516],
      Characteristic=[0.06, 0.09, 0.07, 0.13, 0.09, 0.06, 0.04]), columns=['UserID','Date','Characteristic'])


df_dg['Date'] = pd.to_datetime(df_dg['Date'], format=""%Y%m%d"")
print df_dg
   UserID       Date  Characteristic
0   11590 2005-06-13            0.06
1   11590 2005-09-05            0.09
2   11590 2005-12-14            0.07
3  115948 2004-09-24            0.13
4  115948 2004-11-01            0.09
5  115948 2005-02-02            0.06
6  115948 2005-05-16            0.04


df_dg['Date1'] = df_dg['Date']

newdf = df_dg.groupby('UserID').apply(lambda x: x.set_index('Date').resample('M', how='first',fill_method='ffill')).reset_index(drop=True, level=0).reset_index()
newdf = newdf.rename(columns={'Date':'month_date', 'Date1':'Date'})
newdf = newdf[['UserID','Date','Characteristic','month_date']]
"
Filtering out values in specific columns with Pandas,"import pandas as pd

x = [1.0, 2.0, ""a"", 3.0]
y = [""b"", 5.0, 3.0, 7.0]

df = pd.DataFrame({""x"":x, ""y"":y})
df.convert_objects(convert_numeric=True).dropna()
"
Increase String by Sequential Index,"awk '/^timeprime = i [+]/{$5+=2} 1' file
"
Place MQTT topics and message in array,"import paho.mqtt.client as mqtt 

topic_names = []

def on_message(mqttc, obj, msg,):
    # print(msg.topic + "" "" + str(msg.payload))
    payload = str(msg.payload)
    print(msg.topic + "" Payload -> "" + payload)

    topic_names.append(msg.topic)

try:
    mqttc = mqtt.Client()
    mqttc.on_message = on_message

    mqttc.connect(""localhost"", 1883, 60)
    mqttc.subscribe(""weather/current/#"", 0)

    mqttc.loop_forever()

except KeyboardInterrupt:
    print ""Received topics:""
    for topic in topic_names:
        print topic
"
Joining dataframes with different datetime frequencies,"In [41]: df1['date2'] = pd.DatetimeIndex(df1['date1']).normalize()

In [42]: pd.merge(df1, df2).head()
Out[42]:
                date1  value1      date2  value2
0 2010-01-01 00:00:00       0 2010-01-01       0
1 2010-01-01 01:00:00       1 2010-01-01       0
2 2010-01-01 02:00:00       2 2010-01-01       0
3 2010-01-01 03:00:00       3 2010-01-01       0
4 2010-01-01 04:00:00       4 2010-01-01       0
"
How to iterate through two lists with one of them shifted?,"import itertools

# ~~~ other code ~~~ #

for elem1, elem2 in itertools.izip_longest(unigram_mixture_list[1:], bigram_mixture_list):
    print elem1, elem2
"
Need help with BeautifulSoup(Python) and parsing HTML table,"from BeautifulSoup import BeautifulSoup

pageSource='''...omitted for brevity...'''    

soup = BeautifulSoup(pageSource)
alltables = soup.findAll( ""table"", {""border"":""2"", ""width"":""100%""} )

results=[]
for table in alltables:
    rows = table.findAll('tr')
    lines=[]
    for tr in rows:
        cols = tr.findAll('td')
        for td in cols:
            text=td.renderContents().strip('\n')
            lines.append(text)
    text_table='\n'.join(lines)
    if 'Website' in text_table:
        results.append(text_table) 
print ""Number of tables found : "" , len(results)
for result in results:
    print(result)
"
Merged xls output different,"import xlwt
import xlrd
import sys
#Create workbook and worksheet

wbk = xlwt.Workbook()
dest_sheet = wbk.add_sheet('Data_1')

for sheet_idx in range(1, 3):
  sheet = xlrd.open_workbook('Data_%d.xls' % sheet_idx).sheet_by_index(0)

  for i in range(5):
    values = sheet.row_values(i)
    for idx, element in enumerate(values):
      dest_sheet.write(i, sheet_idx+idx, element)

wbk.save('DATA.xls')
"
"Is a variable the name, the value, or the memory location?",">>> [id(x) for x in li]
[4373138488, 4372558792, 4372696960, 4373139288, 4373139368]
>>> [id(x) for x in li2]
[4373138488, 4372558792, 4372696960, 4373139288, 4373139368,  4372696720]  
"
"PHP to Python Code Differences - Arrays, Foreach Loops","for i,a in enumerate( ['some', 'list'])
"
Accept a range of numbers in the form of 0-5 using Python's argparse?,"from argparse import ArgumentParser, ArgumentTypeError
import re

def parseNumList(string):
    m = re.match(r'(\d+)(?:-(\d+))?$', string)
    # ^ (or use .split('-'). anyway you like.)
    if not m:
        raise ArgumentTypeError(""'"" + string + ""' is not a range of number. Expected forms like '0-5' or '2'."")
    start = m.group(1)
    end = m.group(2) or start
    return list(range(int(start,10), int(end,10)+1))

parser = ArgumentParser()
parser.add_argument('--range', type=parseNumList)

args = parser.parse_args()
print(args)
"
Pythonic URL Parsing,"partCount = len(pathParts) - 1

path = ""/""
for i in range(2, partCount):
    path += pathParts[i] + ""/""
"
how to return the looped values in a method in python/django that no using array,"print '\n'.join(str(i) for i in Ticket.objects.get_ticket_available_product('2011-12-29', 5, 1) )
"
Why doesn't Python have static variables?,"def foo():
    global bar
    do_stuff(bar)

foo()
foo()
"
python multiprocessing sleep between executions,"import multiprocessing
import subprocess
import time

def prcss(cmd):
  # renaming the subprocess call is silly - remove the rename
  com = subprocess.call(cmd, shell='True') 
  return (com)

if __name__=='__main__':

  pool = multiprocessing.Pool(processes=20)
  results_objects = []

  for j in range(1,21):
    for i in range(10):
      sis = 'nohup ~/mycodes/code >'+str(j)+'/'+'out'+str(i)+'.dat'

      # make an asynchronous that will execute our target function with the
      # sis command
      results_objects.append(pool.apply_async(prcss, args=(sis,))
      # don't forget the extra comma in the args - Process must receive a tuple

      # now we pause for five sections before submitting the next job
      time.sleep(5)

  # close the pool and wait for everything to finish
  pool.close()
  pool.join() 

  # retrieve all of the results
  result = [result.get() for result in results_objects]
"
how to get the common items count of lists,"import itertools
import collections

q1 = 'q1'
q2 = 'q2'
q3 = 'q3'


dic_list = {
     q1:[1,2,3,4,5],
     q2:[2,3,5],
     q3:[2,5]
     }

dic_set = {k:set(v) for k,v in dic_list.items()}

def combo_solution():
     new_dic = collections.defaultdict(dict)
     for k1,k2 in itertools.combinations(dic_set,2):
          value = len(dic_set[k1] & dic_set[k2])
          new_dic[k1][k2] = value
          new_dic[k1][k2] = value
     return new_dic

def perm_solution():
     new_dic = collections.defaultdict(dict)
     for k1, k2 in itertools.permutations(dic_set,2):
          new_dic[k1][k2] = len(dic_set[k1] & dic_set[k2])
     return new_dic

import timeit
print timeit.timeit('combo_solution()','from __main__ import combo_solution',number=100000)
print timeit.timeit('perm_solution()','from __main__ import perm_solution',number=100000)
"
"Returning a random list of integers, Python 3.3","#Randomly generate 20 numbers
elif choice == RANDOMLY_GENERATE:
    randomly_generate()
"
render cms page within another page,"{% for placeholder in request.current_page.placeholders %}
    {{ placeholder.render }}
{% endfor %}
"
storing variables in dictionary and descending order sorting,"from collections import OrderedDict
from operator import itemgetter

# store all key,value pairings to sort later
items = []
for item in lines:
    specificy = c[item]
    try:
        MI1= specificy/float(specificx)
        MI2= MI1*specificx
        M13= specificx*specificx
        Mutual_Information = MI1* math.log(MI1/float(MI2))
        # add tuple of key/value to items
        items.append((item,Mutual_Information))
    except ZeroDivisionError:
        print ""divide by zero""

# create OrderedDict from sorted items, sorting by the second element
d = OrderedDict(sorted(items,key=itemgetter(1),reverse=True))
"
Remove low frequency values from pandas.dataframe,"import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randint(0, high=9, size=(100,2)),
         columns = ['A', 'B'])

threshold = 10 # Anything that occurs less than this will be removed.
value_counts = df.stack().value_counts() # Entire DataFrame 
to_remove = value_counts[value_counts <= threshold].index
df.replace(to_remove, np.nan, inplace=True)
"
Get value to 2 attribute from a xpath node for anchor tag,"for item in list:
    href, text = item.xpath(""@href|text()"")
    print(href, text)
"
Put dict into new list based on a key value in Python,">>> d = {'album': 'Lonerism', 'song': 'Led Zeppelin (Bonus Track)', 'datetime': '2014-12-10 08:03:00', 'artist': 'Tame Impala'}
>>> d['artist'].lower
<built-in method lower of str object at 0x106506e70>
>>> d['artist'].lower == 'tame impala'
False
>>> d['artist'].lower()
'tame impala'
>>> d['artist'].lower() == 'tame impala'
True
"
python getting a specific attribute from a list of objects,"dict_of_balls = {ball.name: ball for ball in list_of_balls}
"
"Parsing Xml with element tree in Python, same tag name","import xml.etree.ElementTree as ET
tree = ET.parse('a.xml')
root = tree.getroot()
print root
dic={}
for i in root.iter('TeamData'):
    dic[i.attrib['Ref']]=[j.text for j in i]
print dic
#output {'1': ['a', 'b', 'c', 'd'], '2': ['e', 'f', 'g', 'h']}
"
print memory address of Python variable,"x = 4
y = 4
w = 9999
v = 9999
a = 12345678
b = 12345678
print hex(id(x))
print hex(id(y))
print hex(id(w))
print hex(id(v))
print hex(id(a))
print hex(id(b))
"
Dynamically define a function,"import numpy as np
import scipy.optimize as optimize
import textwrap

funcstr=textwrap.dedent('''\
def func(x, {p}):
    return x * 2*a + 4*b - 5*c
''')
def make_model(**kwargs):
    params=set(('a','b','c')).difference(kwargs.keys())
    exec funcstr.format(p=','.join(params)) in kwargs
    return kwargs['func']

func=make_model(a=3, b=1)

xdata = np.array([1,3,6,8,10])
ydata = np.array([  0.91589774,   4.91589774,  10.91589774,  14.91589774,  18.91589774])
popt, pcov = optimize.curve_fit(func, xdata, ydata)
print(popt)
# [ 5.49682045]
"
which is pelican executable script that user executes from shell?,">>> from pkg_resources import load_entry_point
>>> mainfunc = load_entry_point('pelican', 'console_scripts', 'pelican')
>>> print mainfunc.__module__
'pelican'
>>> mainfunc()
WARNING: Feeds generated without SITEURL set properly may not be valid
"
How To Handle Python Flask Redirect,"from flask import url_for, redirect
... your code...
return redirect(url_for('delete_elastic_ip', region=None, ip=None))
"
python inheritance __init__ confusion,"class Manga_site(object):

    def __init__(self,homepage,collection_page,base_manga_page,manga_title = """"):
        self.homepage = homepage
        self.collection_page = collection_page
        self.base_manga_page = base_manga_page
        self.manga_title = manga_title


class Mangacanblog(Manga_site):

    def __init__(self,manga_title):
        super(Mangacanblog, self).__init__(bloglink, collectionpagelink, basepagelink, manga_title.lower())
"
Can rectangle be used as a parent class (tkinter)?,"class Rectangle(object):
    def __init__(self, canvas, coords, fill, outline=None):
        self.canvas = canvas
        self.outline = outline if outline is not None else fill
        self.fill = fill
        self.canvas_id = self.canvas.create_rectangle(
            coords, outline=self.outline, fill=self.fill)
"
Find if value exists in multiple lists,"value = 'a'
a = ['a','b','c']
b = ['d','e','f']
d = ['g','h','i']
c = ['j','k','l']

w = next(n for n,v in filter(lambda t: isinstance(t[1],list), globals().items()) if value in v)
print(w)
"
Initialize Multiple Numpy Arrays (Multiple Assignment) - Like MATLAB deal(),"h, i, j = (np.zeros(5),)*3
print h is i
# True
"
Using PyCrypto to decrypt Perl encrypted password,"from Crypto.Cipher import Blowfish
from binascii import hexlify, unhexlify

perl_pass = unhexlify(""9033c838e4418fbdc50a9fc0813745296d195d59954008f94b2b36a8e65dca959686206960a7828a"")

key = unhexlify(""781e5e245d69b566979b86e28d23f2c78e938564cd1410f0ec1c1781466a6738bab0a6ed984c75ab34c68bbf7558077714043c5bdb959e46"")
iv  = '$KJh#(}q'
print Blowfish.new(key, Blowfish.MODE_CBC, iv).decrypt(perl_pass)
"
Print Decimal value from long string of little endian hex values,"hex_string = hex(struct.unpack('<I', struct.pack('>I', int(val, 16)))[0])
"
Convert dataframe with odd timestamp to timeseries with pandas,">>> ts = ts.str.replace(r'(\d\d):(\d\d)$', r'\1\2')
>>> ts
0    25/07/14 09 h 31 min 00 s +0200
1    25/07/14 09 h 32 min 00 s +0200
2    25/07/14 09 h 33 min 00 s +0200
dtype: object
>>> ts.map(lambda t: dt.datetime.strptime(t, '%d/%m/%y %H h %M min %S s %z'))
0    2014-07-25 09:31:00+02:00
1    2014-07-25 09:32:00+02:00
2    2014-07-25 09:33:00+02:00
dtype: object
"
Python: convert string to byte array,"In [49]: import array

In [50]: print array.array('B', ""ABCD"")
array('B', [65, 66, 67, 68])
"
Mask a circular sector in a numpy array,"import numpy as np

def sector_mask(shape,centre,radius,angle_range):
    """"""
    Return a boolean mask for a circular sector. The start/stop angles in  
    `angle_range` should be given in clockwise order.
    """"""

    x,y = np.ogrid[:shape[0],:shape[1]]
    cx,cy = centre
    tmin,tmax = np.deg2rad(angle_range)

    # ensure stop angle > start angle
    if tmax < tmin:
            tmax += 2*np.pi

    # convert cartesian --> polar coordinates
    r2 = (x-cx)*(x-cx) + (y-cy)*(y-cy)
    theta = np.arctan2(x-cx,y-cy) - tmin

    # wrap angles between 0 and 2*pi
    theta %= (2*np.pi)

    # circular mask
    circmask = r2 <= radius*radius

    # angular mask
    anglemask = theta <= (tmax-tmin)

    return circmask*anglemask
"
"In python: How to find match of string in same row, compare part of (fuzzy) matched string to list?","lastname = ['smith','jones','cook']
companies = ['company a','company b']
affiliations = {'matt smith':'company a','tom jones':'company b','karen cook':'company c'}
"
Python - convert from hex integer to hex string,">>> testNum = 0xa1b2c3
>>> hex(testNum)
    '0xa1b2c3'
>>> test = hex(testNum)
>>> isinstance(test, str)
    True
"
"Extracting information from a table on a website using python, LXML & XPATH","from io import BytesIO
import urllib2 as net
from lxml import etree
import lxml.html    

request = net.Request(""http://gbgfotboll.se/serier/?scr=table&ftid=57108"")
response = net.urlopen(request)
data = response.read()

collected = [] #list-tuple of [(col1, col2...), (col1, col2...)]
dom = lxml.html.parse(BytesIO(data))
#all table rows    
xpatheval = etree.XPathDocumentEvaluator(dom)
rows = xpatheval('//div[@id=""content-primary""]/table[1]/tbody/tr')

for row in rows:
    collumns = row.findall(""td"")
    collected.append((
        collumns[0].find(""a"").text.encode(""utf8""), # Lag
        collumns[1].text, # S
        collumns[5].text, # GM-IM
        collumns[7].text, # P - last collumn
    ))

for i in collected: print i
"
Using local variables outside their functions,"def drawCard():
    drawnCard = random.choice(cardDeck)
    adPos = cardDeck.index(drawnCard)
    drawnCardValue = cardValues[adPos]
    return drawnCard, drawnCardValue

drawnCard, drawnCardValue = drawnCard()
"
Tkinter: Update widget from different module,"    def create_widgets(self):
        # global progress_bar (no longer needed)
        # add 'self'
        self.progress_bar = tk.ttk.Progressbar(orient=tk.HORIZONTAL, length=200, mode='determinate')
        self.progress_bar.pack(side=""bottom"")
        ...

def main():
    root = tk.Tk()
    app = Application(master=root)
    Work_Module.progress_bar = self.progress_bar  # add 'self'
    app.mainloop()
"
How to retrieve groups of n items in list,"n = 3
it = iter(my_list)
rn = map(str, range(1, n+1))
for sli in zip(it, it, it):
    print("" "".join([""{}: {}"".format(a,b) for a,b in zip(rn, sli)]))
"
A set of unique lists,">>> lst = [['4bb', '3bb', '3', '1', '2', '4b', '4'],
...  ['4bb', '3bb', '1', '3', '2', '4b', '4'],
...  ['4bb', '3bb', '1', '2', '3', '4b', '4'],
...  ['4bb', '1', '3bb', '3', '2', '4b', '4'],
...  ['4bb', '1', '3bb', '2', '3', '4b', '4']]
>>>
>>> setlst = {tuple(x[-3:]) for x in lst}
>>> newlst = list(map(list, setlst))
>>> newlst
[['2', '4b', '4'], ['3', '4b', '4']]
"
What are the limitations of callback functions associated with Tkinter traces?,"from Tkinter import *

def callbackfunc(*args, **kwargs):
    print args, kwargs
    print ""Hello World!""

class App(object):
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        optionvalue = IntVar(master)
        optionvalue.set(2)
        optionvalue.trace(""w"", callbackfunc)
        self.optionmenu = OptionMenu(master, optionvalue, 1, 2, 3, 4)
        self.optionmenu.pack()

root = Tk()
app = App(root)
root.mainloop()
"
Why aren't dictionaries callable?,"map(d.get, it)  # Existing
map(d, it)      # Proposed
"
Splitting string with multiple delimiters,"import re

results = []
for line in fl:
  # [,/] means ""match if either a , or a / is present""
  results.append(re.split('[,/]',line.strip()))
"
How to convert Python decimal to SQLite numeric?,"import sqlite3
import decimal
D=decimal.Decimal

def adapt_decimal(d):
    return str(d)

def convert_decimal(s):
    return D(s)

# Register the adapter
sqlite3.register_adapter(D, adapt_decimal)

# Register the converter
sqlite3.register_converter(""decimal"", convert_decimal)

d = D('4.12')

con = sqlite3.connect("":memory:"", detect_types=sqlite3.PARSE_DECLTYPES)
cur = con.cursor()
cur.execute(""create table test(d decimal)"")

cur.execute(""insert into test(d) values (?)"", (d,))
cur.execute(""select d from test"")
data=cur.fetchone()[0]
print(data)
print(type(data))

cur.close()
con.close()
"
Python Regular Expression to Remove Unwanted Parts of URL,">>> import urlparse
>>> inputurl = 'http://news.google.com/news/url?sa=t&fd=R&usg=AFQjCNFcQAQ4S3H5xUuU4N-LoM2I9tLxJg&url=http://www.washingtonpost.com/blogs/going-out-guide/wp/2013/11/08/dallas-buyers-club-thor-the-dark-world-and-other-new-movies-reviewed/'
>>> qs = urlparse.urlsplit(inputurl).query
>>> urlparse.parse_qs(qs).get('url', [None])[0]
'http://www.washingtonpost.com/blogs/going-out-guide/wp/2013/11/08/dallas-buyers-club-thor-the-dark-world-and-other-new-movies-reviewed/'
"
Python using *args with default argument,">>> def myfunc(*args, a=""apple""):
        print(a)
        for b in args:
            print(b + ""!"")
...         
>>> myfunc(""banana"", ""orange"")
apple
banana!
orange!
>>> myfunc(""banana"", ""orange"", a=""watermelon"")
watermelon
banana!
orange!
"
Concatenating dictionaries of numpy arrays (avoiding manual loops if possible),"from __future__ import print_function, division
import pandas as pd
import numpy as np

# Create first dictionary
n = 5
s = np.random.randint(1,101,n)
r = np.random.rand(n)
d = {""r"":r,""s"":s}
df = pd.DataFrame(d)
print(df)

# Create second dictionary
n = 2
s = np.random.randint(1,101,n)
r = np.random.rand(n)
t = np.array([""a"",""b""])
d2 = {""r"":r,""s"":s,""t"":t}
df2 = pd.DataFrame(d2)
print(df2)

print(pd.concat([df, df2]))
"
How to create a list from splitting a list elements in python?,"sentences = ['The girls are gorgeous', ""I'm mexican""]
from collections import Counter
print Counter(item for items in sentences for item in items.split())
# Counter({'mexican': 1, 'girls': 1, 'are': 1, 'gorgeous': 1, ""I'm"": 1, 'The':1})
"
re.findall - Getting a list of items from a comma delimited string,"presents = [x.strip() for x in re.findall(r'[^,]*', presents) if x]
"
Access next sibling <li> element with BeautifulSoup,"next_li_element = page.find_next_sibling(""li"")
"
Refreshing a list of variables with one command,"def refresh(variable1, variable2, variable3):
    variable4 = variable1 + variable2 + variable3
    variable5 = variable3 - variable2 / variable1
    return variable4, variable5
"
Output the specific word (from a list) that was found in a string,"st = set(inappropriate)
message = ' '.join(sys.argv[1:]) # the input message already converted to lowercase
message = message.replace(""."", """") # to remove the full stop as well

for word in message.split():
    if word in st:
        print ""{} is inappropriate."".format(word)
"
Generate randon and uniques ids in django,"import random, string
KEYLEN = 15
prefix = ""car""
key = prefix + """".join(random.choice(string.letters+string.digits) for _ in range(KEYLEN))
"
How can I make a string of ASCII characters from a for loop (Python 3.3)?,"import random
s = ''
for i in range(0,8):
    key = random.randint(33,126)
    s += chr(key)
print(s)
"
why does python new york time zone display 4:56 instead 4:00?,"ny_tz = timezone('America/New_York')
ny_time = ny_tz.localize(datetime(2014, 9, 4, 10, 30, 2, 294757))
"
Triangle Siblings in python,"def make_triangle(size, siblings, step): 
    return '\n'.join([' '.join(line) for line in [['*' * (i-(step*sib)) + ' ' * ((size-(step*sib)) - ((i-(step*sib)) if (i-(step*sib) > 0) else 0)) for sib in xrange(siblings)] for i in xrange(1, size+1)]])

>>> print make_triangle(9,3,3)
*                          
**                       
***                    
****      *           
*****     **         
******    ***       
*******   ****   *  
********  *****  ** 
********* ****** ***
"
Python - parse a line of text,"with open(""parser.txt"", ""r"") as input_file, open(""output_parser.txt"",""w"") as output_file:
    for i, line in enumerate(input_file):
        output_file.write ('\n')
        marker_info= line.split()
        end= len(marker_info)
        x=4
        y=8

        while y<=end: #x<=end:
            intensities= marker_info[x:y]
            AA= intensities[0]
            BB= intensities[1]
            AB= intensities[2]
            NN= intensities[3]
            output_file.write ('%s' '\t' '%s' '\t' '%s' '\t' % (AA, AB, BB))
            print end, x, y, marker_info[x:y], AA, AB, BB

            x= y 
            y= x + 4
"
"How do I operate on the actual object, not a copy, in a python for loop?","# Your for loop should be rewritten as follows:
for index in xrange(len(a)):
    a[index] += 1
"
Python 3: Removing an empty tuple from a list of tuples,"filter(None, myList)
"
Numpy multiplication of vectors of different size avoiding for loops,"
import numpy as np

def orig(Kx, Ky, u, v, pk):
    M, N = Kx.shape
    X = u.size
    Y = v.size
    P = np.empty((X, Y), dtype=pk.dtype)
    for m in range(0, M):
        for n in range(0, N):
            for i in range(0,X):
                for j in range(0,Y):
                   Arg = Kx[m,n]*u[i] + Ky[m,n]*v[j]
                   P[i,j] += pk[m,n]*np.cos(Arg)
    return P

def alt(Kx, Ky, u, v, pk):
    Kxu = Kx[:,:,np.newaxis]*u
    Kyv = Ky[:,:,np.newaxis]*v
    Arg = Kxu[:,:,:,np.newaxis] + Kyv[:,:,np.newaxis,:]
    P = (pk[:,:,np.newaxis,np.newaxis]*np.cos(Arg)).sum(axis=0).sum(axis=0)
    return P

M, N = 10, 20
X, Y = 5, 15
Kx = np.random.random((M, N))
Ky = np.random.random((M, N))
u = np.random.random(X)
v = np.random.random(Y)
pk = np.random.random((M, N))
"
Generate random numbers without using the last n values in Python,"s = set(range(0, 100))
last5 = []
def get_next_number():
    reduced_list = list(s - set(last5))
    i = randint(0, len(reduced_list) - 1)
    last5.append(reduced_list[i])
    if len(last5) > 5:
        last5.pop(0)
    return reduced_list[i]
"
two's complement of numbers in python,"format(num % (1 << 16), '016b')
"
Turning a list of dictionaries into a list of lists,"[[x['field2'], x['field1']] for x in l]
"
How to get the 'cardinal' day of the year in Pandas?,"df = pd.DataFrame({
    'Close': [16.66, 16.85, 16.93, 16.98, 17.08, 17.03, 17.09, 16.76, 16.67, 16.71, 20],
    'Date': ['1950-01-03', '1950-01-04', '1950-01-05', '1950-01-06', '1950-01-09', 
             '1950-01-10', '1950-01-11', '1950-01-12', '1950-01-13', '1950-01-16',
             '1951-01-01'], })
df['Date'] = pd.to_datetime(df['Date'])
df = df.set_index('Date')

df['O'] = df.index.day
df['C'] = df.groupby(df.index.year).cumcount(1)+1
"
Calculate a text-position inside a div element into the according position in HTML with Python,"def insertInHtml(string, insstr, position):
    ctr=0
    insidetag=False
    for ci in range(len(string)):
        if string[ci]=='<':
            insidetag=True
        elif string[ci]=='>':
            insidetag=False
        else:
            if not insidetag: ctr+=1
        if ctr==position+1:
            HTMLIndex=ci
            break
    return string[0:HTMLIndex] + insstr + string[HTMLIndex:]
"
change paramstyle on python MySQLdb module,"if args is not None:
    query = query % tuple(( get_codec(a, self.encoders)(db, a) for a in args ))
"
Get a list of lists out of a Python object,"[field for field in dir(Language) if not field.startswith(""__"")]
"
Python CSV DictReader ignore columns?,"dreader = [{'id':1, 'name':'Bob', 'other_stuff':'xy'},
           {'id':2, 'name':'Jen', 'other_stuff':'xx'}]

for d in dict_filter(dreader, 'id', 'name'):
    print d
"
Extract indices of a 2D binary array,"from scipy.ndimage import generic_filter
generic_filter(data, np.all, size=(5,5), mode='constant', cval=0).astype(np.bool)
"
Simulating Lisp's :keywords in Python,"action = 'default'

if some_condition1:
    action = 'do_something'

if some_condition2:
    action = 'do_other_thing'

...

if action == 'default':
   one_reaction()
elif action == 'do_something':
   other_reaction()
...
"
Validate IP address from list,"try:
    socket.inet_aton(data)
except socket.error:
    pass
else:
    print(data)
"
Python: how do I save a file in a different directory?,"path = '/Some/path/to/Pics2'
filename = 'forcing{0}damping{1}omega{2}set2.png'.format(forcing, damping, omega)
filename = os.path.join(path, filename)
fig.savefig(filename)
"
Edit and save file,"source = open('myfile', 'r')
processed_lines = []
for line in source:
    line = ','.join(line.split()).replace('\n', 'yes\n')
    processed_lines.append(line)
output = open('out', 'w')
output.write(''.join(processed_lines))
"
Building a generator from a recursive algorithm,"def _walk (self, starting_node) :
    while starting_node is not self._nil :
        for x in self._walk(starting_node.left):
            yield x
        yield starting_node
        starting_node = starting_node.right
"
python 2.7 username with minimum and max,"def ask_user_name():
    while True:
        username = raw_input(""Please give me a username: "")
        if not any(c in username for c in '0123456789'):
            print(""Username needs to contain at least one number."")
            continue
        if len(username) >= 8:
            print(""Well done"")
        elif len(username) <= 1:
            print(""More characters please."")
            print(""Please try again, input your username again."")
            continue
        break
    return username

print(ask_user_name())
"
Filter special chars such as color codes from shell output,"import re
print re.sub(r'\x1b(\[.*?[@-~]|\].*?(\x07|\x1b\\))', '', a)
"
Get a structure of HTML code,"html = '''<html>
 <body>
 <h1>Simple example</h1>
 <p>This is a simple example of html page</p>
 </body>
 </html>'''

soup = BeautifulSoup(html)

''.join(taggify(soup))
Out[34]: '<html><body><h1></h1><p></p></body></html>'
"
Struggling with unicode in Python,"with io.open('Assets.log', 'w', encoding='utf-8') as f,\
        io.open(pathname, encoding='utf-8') as fin:
    f.write(u'File Path|Brand\n')
    lines = fin.read()
    brand_start = lines.find(u""Brand Title"")
    brand_end = lines.find(u""/>"", brand_start)
    brand = lines[brand_start + 47:brand_end - 2]
    f.write(u'{}|{}\n'.format(pathname[4:35], brand))
"
Need to extract data from a website and store in list using regex,"import requests

respText = requests.get(""http://www.imdb.com/chart/top"").text

for title in re.findall(r'<td class=""titleColumn"">.+?>(.+?)<', respText, re.DOTALL):
    print(title)
"
script to find the difference between two dictionaries in python,">>> d1 = {'a': 1, 'b':2}
>>> d2 = {'b': 2, 'c':3}
>>> diff = set(d1).symmetric_difference(d2)
>>> diff
{'a', 'c'}
"
Slicing and if statements (Python),">>> 2000 % 100
0
>>> 2013 % 100
13
"
Creating a window with an unknown amount of checkboxes - Python/tkinter,"# if ctrls is a list of all lables to your checkboxes
# i is the count and j is the text of label
for i,j in enumerate(ctrls): #what ever loop you want
    var = IntVar()
    c = Checkbutton(self.master,text=j,variable=var)
    boxes.append([j.strip(),var,c])
"
Returning the longest set in a dictionary of sets?,"max(d.values(), key=len)
"
Advanced List sorting Python,">>> d = {'+A':234, '-B':212, 'A':454, '-C':991, '-A':124, '+B':1, 'B':98, '+C':232, 'C':23}
>>> sorted(d, key=lambda x: (x[1], x[0]) if len(x) == 2 else (x[0], ','))
['+A', 'A', '-A', '+B', 'B', '-B', '+C', 'C', '-C']
"
How do I make a JSON file out of a list in Python?,">>> titles = ['New', 'New']
>>> ids = ['123', '123']
>>> {'video': [{'title': title, 'id': id} for title, id in zip(titles, ids)]}
{'video': [{'title': 'New', 'id': '123'}, {'title': 'New', 'id': '123'}]}
"
"Median of a list with NaN values removed, in python",">>> np.median(x[np.isfinite(x)])
2.0
"
python - divide world into bins,"import math
import random
import time
import sys


ball_min_radius = 16.0 #world coordinates         
ball_max_radius = 128.0  #world coordniates
number_balls = 200

world_min_x = -200.0*number_balls**.5  # minimum x in world coordinates
world_max_x = +200.0*number_balls**.5  # maximum x in world coordinates
world_min_y = -200.0*number_balls**.5  # minimum y in world coordinates
world_max_y = +200.0*number_balls**.5  # maximum y in world coordinates


class Ball:
    """""" 
    Implements a point/ball
    """"""

    def __init__(self):
          self.x = random.uniform(world_min_x,world_max_x)
          self.y = random.uniform(world_min_y,world_max_y)
          self.radius = int(random.uniform(ball_min_radius,ball_max_radius))
    def __lt__(self, other):
        return self.id < other.id

    def __str__(self):
        return 'x={x} y={y} r={r}'.format(x=self.x, y=self.y, r=self.radius)

def main():

    balls = [Ball() for i in range(number_balls)]

    dict_of_balls = {}
    ball_collection = []
    for b in balls:
        xb = int(b.x/256)
        yb = int(b.y/256)
        key = (xb, yb)
        dict_of_balls[key] = b

        ball_collection.append((key, b))

    print 'length of dictionary:{}'.format(len(dict_of_balls.keys()))
    print 'length of collection:{}'.format(len(ball_collection))
"
Python Dictionary Print First occurence,"myDict = {'111, A': 4, '112, A': 3, '111, B': 10} # input

# keep track of the first half of the composite keys that you've already handled
# This is used to avoid redundant printing
done = set()

for key in myDict:
    # first half of your composite key (eg. '111')
    # I'll be using '111' to explain the rest of the code
    prefix = key.split(',')[0]

    if prefix not in done: # if you haven't already printed out the stuff for '111'
        print prefix # print '111'
        done.add(prefix) # add '111' to done, so that you don't print it out again

        # for all keys in myDict that are of the form ""111,X"" where X can be anything (e.g. A)
        for k in [k for k in myDict if k.split(',')[0]==prefix]:

            # print a <tab> and the suffix (in our example, ""A"") and the count value (in myDict, this value is 4)
            print '\t', k.split(',')[1], myDict[k]
"
Python . How to get rid of '\r' in string?,line.strip()
How to stop depth-first search when the target vertex of the graph is found?,"def dfs(graph, start, target, visited=None):
    if start == target:
        return True
    if visited is None:
        visited = set()
    visited.add(start)

    found = False
    for n in (set( graph[start] ) - visited):
        if target == n:
            return True
        found = dfs(graph, n, target, visited)
    return found
"
Escaping quotes when isolating strings from input,"import re
import ast

def match_line(line):
    while line:
        print ""Trying to match:"", line
        try:
            return ast.literal_eval(line)
        except SyntaxError, e:
            line = line[:e.offset - 1]
        except ValueError: # No way it would ever match
            break
    return None

with open('test.txt.') as f:
    for line in f:
        match = match_line(line.strip())
        print ""Matched:"", match
        print
"
d3 - how to select specific element from g and transform it,"...
.attr(""fill"", function(d) {
    if (d.street_split === 'AVERAGE')
        return 'red'
    else
        return ""steelblue""
});
"
Parsing XML and writing to CSV file,"#! /usr/bin/python

from xml.dom.minidom import parse
import xml.dom.minidom
import csv

def writeToCSV(myLibrary):
    with open('output.csv', 'wb') as csvfile:
        writer = csv.writer(csvfile, delimiter=',',quotechar='""', quoting=csv.QUOTE_MINIMAL)
        writer.writerow(['title', 'author', 'author'])
        books = myLibrary.getElementsByTagName(""book"")
        for book in books:
            titleValue = book.getElementsByTagName(""title"")[0].childNodes[0].data
            authors = [] # get all the authors in a vector
            for author in book.getElementsByTagName(""author""):
                authors.append(author.childNodes[0].data)
            writer.writerow([titleValue] + authors) # write to csv

doc = parse('library.xml')
myLibrary = doc.getElementsByTagName(""library"")[0]
# Print each book's title
writeToCSV(myLibrary)
"
Python - most efficient way to select a random message according to a type,"import random

messages = {
    1: ['Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
        'Maecenas eu risus a arcu rutrum vehicula vel in neque.'
        'Curabitur ante sapien, cursus nec diam non, porttitor sagittis leo.',
    ],
    2: ['Nunc et nisi nec ligula placerat accumsan.',
        'In lacinia, neque rutrum aliquet luctus, odio ligula accumsan risus.',
    ],
    3: ['....'],
    # ...
}

def random_by_type(type_number):
    return random.choice(messages[type_number])
"
lxml xml parsing with html tags inside xml tags,"from lxml import etree
root = etree.fromstring('''<xml>
<maintag>    
<content> lorem <br>ipsum</br> <strong> dolor sit </strong> and so on </content>
</maintag>
</xml>''')
for content in root.xpath('.//maintag/content'):
    print etree.tostring(content)
"
Tkinter look (theme) in Linux,"from Tkinter import *
from ttk import *

class App():
  def __init__(self, master):
    frame = Frame(master)
    frame.pack()

    master.title(""Just my example"")
    self.label = Label(frame, text=""Type very long text:"")

    self.entry = Entry(frame)

    self.button = Button(frame,
                         text=""Quit"", width=15,
                         command=frame.quit)


    self.slogan = Button(frame,
                         text=""Hello"", width=15,
                         command=self.write_slogan)

    self.label.grid(row=0, column=0)
    self.entry.grid(row=0, column=1)
    self.slogan.grid(row=1, column=0, sticky='e')
    self.button.grid(row=1, column=1, sticky='e')

  def write_slogan(self):
    print ""Tkinter is easy to use!""

root = Tk()
root.style = Style()
#('clam', 'alt', 'default', 'classic')
root.style.theme_use(""clam"")

app = App(root)
root.mainloop()
"
How to convert a python string,"string.decode('string_escape')
"
Color and Line writing using MatPlotLib,"import colorsys
import numpy as np
from matplotlib import pyplot as plt

def get_color(color):
    for hue in range(color):
        hue = 1. * hue / color
        col = [int(x) for x in colorsys.hsv_to_rgb(hue, 1.0, 230)]
        yield ""#{0:02x}{1:02x}{2:02x}"".format(*col)

x = 0.3 * np.array(range(40))

color = get_color(15)

for group in range(15):
    # generates a collection of points
    y = np.exp2(x + 0.5 * group)
    # fit to a polynomial
    z = np.polyfit(x, y, 6)
    p = np.poly1d(z)

    acolor = next(color)

    plt.scatter(x, y, color=acolor, marker='o')
    plt.plot(x, p(x), color=acolor, linestyle='dashed', label=str(group))

plt.legend()
plt.xlim((0, 15))
plt.show() 
"
How can I print second and last three lines from multiple text files?,"#!/usr/bin/awk -f
function beginfile (file) {
    line1 = line2 = line3 = """"
}

function endfile (file) {
    print line1; print line2; print line3
}

FILENAME != _oldfilename \
     {
         if (_oldfilename != """")
             endfile(_oldfilename)
         _oldfilename = FILENAME
         beginfile(FILENAME)
     }

     END   { endfile(FILENAME) }

FNR == 2 {
    print
}

{
    line1 = line2; line2 = line3; line3 = $0
}
"
SQLAlchemy JSON as blob/text,"
import jsonpickle
import sqlalchemy.types as types

class JsonType(types.MutableType, types.TypeDecorator):    
    impl = types.Unicode

    def process_bind_param(self, value, engine):
        return unicode(jsonpickle.encode(value))

    def process_result_value(self, value, engine):
        if value:
            return jsonpickle.decode(value)
        else:
            # default can also be a list
            return {}
"
How can I call the metaclass's __call__?,"class MC(type):
    def __call__(self, *a, **k):
    super(MC, self).__call
        print a, k
        r = super(MC, self).__call__(*a, **k)
        print ""R"", r
        return r

class X(object):
    __metaclass__ = MC
    def __init__(self, x): print ""Init"", x
"
Extracting strings from HTML with Python wont work with regex or BeautifulSoup,"re.search(r'@CAD_DTA\\"">(.+?)@G@H@CAD_LBL',result.text)
          ^          ^
"
How to split string into words that do not contain whitespaces in python?,"""""""This     is a     string"""""".split()"
How can I transform the histograms of grayscale images to enforce a particular ratio of highlights/midtones/shadows?,"import numpy as np

def hist_norm(x, bin_edges, quantiles, inplace=False):
    """"""
    Linearly transforms the histogram of an image such that the pixel values
    specified in `bin_edges` are mapped to the corresponding set of `quantiles`

    Arguments:
    -----------
        x: np.ndarray
            Input image; the histogram is computed over the flattened array
        bin_edges: array-like
            Pixel values; must be monotonically increasing
        quantiles: array-like
            Corresponding quantiles between 0 and 1. Must have same length as
            bin_edges, and must be monotonically increasing
        inplace: bool
            If True, x is modified in place (faster/more memory-efficient)

    Returns:
    -----------
        x_normed: np.ndarray
            The normalized array
    """"""

    bin_edges = np.atleast_1d(bin_edges)
    quantiles = np.atleast_1d(quantiles)

    if bin_edges.shape[0] != quantiles.shape[0]:
        raise ValueError('# bin edges does not match number of quantiles')

    if not inplace:
        x = x.copy()
    oldshape = x.shape
    pix = x.ravel()

    # get the set of unique pixel values, the corresponding indices for each
    # unique value, and the counts for each unique value
    pix_vals, bin_idx, counts = np.unique(pix, return_inverse=True,
                                          return_counts=True)

    # take the cumsum of the counts and normalize by the number of pixels to
    # get the empirical cumulative distribution function (which maps pixel
    # values to quantiles)
    ecdf = np.cumsum(counts).astype(np.float64)
    ecdf /= ecdf[-1]

    # get the current pixel value corresponding to each quantile
    curr_edges = pix_vals[ecdf.searchsorted(quantiles)]

    # how much do we need to add/subtract to map the current values to the
    # desired values for each quantile?
    diff = bin_edges - curr_edges

    # interpolate linearly across the bin edges to get the delta for each pixel
    # value within each bin
    pix_delta = np.interp(pix_vals, curr_edges, diff)

    # add these deltas to the corresponding pixel values
    pix += pix_delta[bin_idx]

    return pix.reshape(oldshape)
"
"python lists, appending something to the list changes the entire thing?","newlist = alist[:]
"
Python full-screen graphics,"Tk.attributes(""-fullscreen"", True)
"
"Easy way to check precedence of ( ""and"", ""or"") in python","l = [True, ""and"", False, ""or"", False, ""or"", False, ""or"", True, ""and"", False, ""or"", False, ""or"", False]
eval(' '.join([ str(z) for z in l]))
"
Alias a function in Python,"def debug(s):
    print s
"
Using Python re.search to find range of numbers,">>> s = ""5-9-90-15""    # fails with the third number
>>> vals = [int(x) for x in s.split('-')]
>>> all(x > L and x < U for x, L, U in zip(vals, lb, ub))
False
"
Do some math over two columns of a .dat file and save results into a third column,"with open(inpath) as infile, open(outpath, 'w') as outfile:
    for line in infile:
        a, b = map(float, line.split())
        total = a + b
        outfile.write('{} {} {}\n'.format(a, b, total))
"
I can't figure out why this while loop isn't functioning properly,"integer1 = eval(input('Enter the first integer between -10 and 10: '))

integer2 = eval(input('Enter the second integer between -10 and 10: '))

while (integer1 >= 10 or integer1 <= -10):
    integer1 = eval(input('Integer 1 is invalid, Please enter a valid number: '))

while (integer2 > 10 or integer2 < -10):
    integer2 = input('Integer2 is invalid, Please enter a valid number: ')
"
"Match two Python lists with regular expressions, and create dictionary output","import re

input = ['MAPLEWOOD AVE', 'LYNNDALE ', 'SUGAR DR']
ref = ['LYNNDALE (?:RD)?', 'HOMAN (?:AVE)?', 'MAPLEWOOD (?:AVE)?', 'LYNNDALE (?:LN)?']
output = dict([ (i, [ r for r in ref if re.match(r, i) ]) for i in input ])
"
filtering grouped df in pandas,grouped.filter(lambda x: len(x) > 1)
Inserting values in a Python list,"def columnize(mylists, maxcolumns):
    return [j[:-1]+([None]*(maxcolumns-len(j)))+j[-1:] for j in mylists]

print columnize(mylists,5)

[['author1', 'author2', 'author3', None, 'this is the title of the article'], ['author1', 'author2', None, None, 'this is the title of the article'], ['author1', 'author2', 'author3', 'author4', 'this is the title of the article']]
"
Return min/max of multidimensional in Python?,"max(c+f for (a,b,c),(d,e,f) in your_list)
"
How to get the length of a cell value in pandas dataframe?,"df['EventCount'] = df['Event'].str.count(""/"") + 1
"
Find the k smallest values of a numpy array,"import numpy as np

A = np.array([1, 7, 9, 2, 0.1, 17, 17, 1.5])
k = 3

idx = np.argpartition(A, k)
print(idx)
# [4 0 7 3 1 2 6 5]
"
Merging CSV data and counting cell values in python pandas,"import pandas as pd
import numpy as np

def combine(values):
    if any(isinstance(v, basestring) for v in values):
        result = values.dropna().tolist()
    else:
        result = values.sum()
    return result

dict1 = { 'M1': {'H': 1, 'J' : 2, 'D' : 'ABC/DEF1.txt'},
          'M2': {'H': 1, 'J' : 2, 'D' : 'ABC/DEF2.txt'},
          'M3': {'H': 1, 'J' : 2, 'D' : 'ABC/DEF3.txt'} }
dict2 = { 'M1': {'H': 4, 'J' : 6, 'D' : 'ABC/DEF1.txt'},
          'M2': {'H': 2, 'J' : 5, 'D' : 'ABC/DEF2.txt'},
          'M4': {'H': 9, 'J' : 8, 'D' : 'ABC/DEF3.txt'}}

df1 = pd.DataFrame(dict1).T
df2 = pd.DataFrame(dict2).T
df = df1.join(df2, rsuffix = '_', how = 'outer').T
grouped = df.groupby(lambda label: label.rstrip('_'))
print(grouped.aggregate(combine).T)
"
find out if a Python object is a string,"isinstance(o, str)"
subsequences of an array that are not zero,">>> from itertools import groupby
>>> l = [240,200,160,4,0,0,0,0,4,4,4,0,0,0,1,1,1,1]
>>> [list(g) for k,g in groupby(l, lambda x: x != 0) if k]
[[240, 200, 160, 4], [4, 4, 4], [1, 1, 1, 1]]
"
Python - counting up in hex,"for i in xrange(256):
    print hex(i)[2:].zfill(2).upper()
"
Subtract one strftime string from another,"import datetime
import time

before = datetime.datetime.now()  # don't convert to string!

time.sleep(5)  # do some stuff....

after = datetime.datetime.now()

delta = after - before
# delta is a datetime.timedelta object.

print(delta)
# which by default stringifies to %H:%M:%S.%f
"
Subtract and add two lists without changing their order in Python,">>> l1 = [68,31,93,35,10]
>>> l2 = [93,0,22,10,99,33,21,9]
>>> l1 + [el2 for el2 in l2 if el2 not in l1]
[68, 31, 93, 35, 10, 0, 22, 99, 33, 21, 9]
>>> [el1 for el1 in l1 if el1 not in l2]
[68, 31, 35]
"
How to flat and merge values in a dictionary using python?,"d = {'Date': ['2013-05-01', '2013-05-01', '2013-05-01', '2013-05-01'], 'Country Code': ['93', '92', '91', '90'], 'Area Code': ['1,2,3,4,5,6,7', '31,32,43,44,54,56,7, ', '434,34,4', '00, 89']}

new = {'Date': d['Date'], 'Combined Code': []}

for i, code in enumerate(d['Country Code']):
    area = map(str.strip, d['Area Code'][i].split(','))
    new['Combined Code'].append("","".join(["""".join(item) for item in zip([code] * len(area), area)]))

print new
"
Generate a regex to find sub strings with certain number of occurrences of certain characters,"  $str = ""IICCIICCIICBIICCIICDIIDIICCIIB"";

  print  ""\n"";
  print  ""012345678911234567892123456789\n"";
  print  ""          +         +         \n"";
  print  $str,""\n------------------------------\n"";

  ($B,$C,$D) = (1,2,0);
  FindOverlaps();

  ($B,$C,$D) = (1,1,0);
  FindOverlaps();

  ($B,$C,$D) = (1,1,1);
  FindOverlaps();

  ($B,$C,$D) = (0,1,1);
  FindOverlaps();

  ($B,$C,$D) = (1,0,1);
  FindOverlaps();

  sub FindOverlaps
  {
      print ""\nB=$B, C=$C, D=$D\n"";

      while ( $str =~ /(?=(?![BCD]{2})(?![I])((?:[B][IDC]*?){$B}(?:[C][IDB]*?){$C}(?:[D][IBC]*?){$D}|(?:[C][IDB]*?){$C}(?:[D][IBC]*?){$D}(?:[B][IDC]*?){$B}|(?:[D][IBC]*?){$D}(?:[B][IDC]*?){$B}(?:[C][IDB]*?){$C}|(?:[C][IDB]*?){$C}(?:[B][IDC]*?){$B}(?:[D][IBC]*?){$D})(?<![I])(?<![BCD]{2}))/g )
      {
          print ""found:  '$1' \t offset = @-[0]\n"";
      }
  }
"
Python how to strip white-spaces from xml text nodes,"from lxml import etree

tree = etree.parse('xmlfile')
root = tree.getroot()

for elem in root.iter('*'):
    if elem.text is not None:
        elem.text = elem.text.strip()

print(etree.tostring(root))
"
Finding and grouping anagrams by Python,"output = [list(group) for key,group in groupby(sorted(words,key=sorted),sorted)]
"
"Python: matching strings against pattern strings with number, string, and date placeholders with good error catching","def match_string(input, pattern, valid_words, date_format):
    print '\n> match_string(\'%s\', \'%s\', %s, \'%s\')' % (input, pattern, valid_words, date_format)

    digits = '0123456789'
    inputIndex = 0
    patternIndex = 0

    while inputIndex < len(input) and patternIndex < len(pattern):
        if pattern[patternIndex] == '#':
            patternIndex += 1
            if pattern[patternIndex] == '#':
                patternIndex += 1
                if pattern[patternIndex] == '#':

                    # validate date
                    date_formatIndex = 0
                    while inputIndex < len(input) and date_formatIndex < len(date_format):

                        if input[inputIndex] == date_format[date_formatIndex]:
                            inputIndex += 1
                            date_formatIndex += 1

                        elif input[inputIndex] in digits:

                            startIndex = inputIndex
                            while inputIndex < len(input) and input[inputIndex] in digits:
                                inputIndex += 1
                            number = int(input[startIndex:inputIndex])

                            if date_format[date_formatIndex:].startswith('%y'):
                                placeholder = True
                            elif date_format[date_formatIndex:].startswith('%m'):
                                if number < 1 or 12 < number:
                                    return 'Error: expected a month between 1 and 12\n input   %d -> ""...%s""\n pattern %d -> ""...%s""\n date format %d -> ""...%s""' % (startIndex, input[startIndex:], patternIndex - 2, pattern[patternIndex - 2:], date_formatIndex, date_format[date_formatIndex:])   

                            elif date_format[date_formatIndex:].startswith('%d'):
                                if number < 1 or 31 < number:
                                    return 'Error: expected a day between 1 and 31\n input   %d -> ""...%s""\n pattern %d -> ""...%s""\n date format %d -> ""...%s""' % (startIndex, input[startIndex:], patternIndex - 2, pattern[patternIndex - 2:], date_formatIndex, date_format[date_formatIndex:])   

                            else:
                                return 'Error: input doesn\'t match date format\n input   %d -> ""...%s""\n pattern %d -> ""...%s""\n date format %d -> ""...%s""' % (startIndex, input[startIndex:], patternIndex - 2, pattern[patternIndex - 2:], date_formatIndex, date_format[date_formatIndex:])   

                            date_formatIndex += 2

                        else:
                            return 'Error: input doesn\'t match date format\n input   %d -> ""...%s""\n pattern %d -> ""...%s""\n date format %d -> ""...%s""' % (inputIndex, input[inputIndex:], patternIndex - 2, pattern[patternIndex - 2:], date_formatIndex, date_format[date_formatIndex:])   

                    patternIndex += 1

                else:
                    # validate word
                    valid = False
                    for word in valid_words:
                        if input[inputIndex:].startswith(word):
                            valid = True
                            inputIndex += len(word)
                            break
                    if not valid:
                        return 'Error: expected a valid word\n input   %d -> ""...%s""\n pattern %d -> ""...%s""' % (inputIndex, input[inputIndex:], patternIndex - 2, pattern[patternIndex - 2:])                    

            else:
                # validate number
                if not input[inputIndex] in digits:
                    return 'Error: expected a number\n input   %d -> ""...%s""\n pattern %d -> ""...%s""' % (inputIndex, input[inputIndex:], patternIndex - 1, pattern[patternIndex - 1:])
                while inputIndex < len(input) and input[inputIndex] in digits:
                    inputIndex += 1

        elif input[inputIndex] != pattern[patternIndex]:
            return 'Error: input and pattern do not match\n input   %d -> ""...%s""\n pattern %d -> ""...%s""' % (inputIndex, input[inputIndex:], patternIndex, pattern[patternIndex:])
        else:
            inputIndex += 1            
            patternIndex += 1
    return True

print match_string('1 and 2 are numbers foo and bar are strings 12-1-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
print match_string('1 is a number foo is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print match_string('foo is a number bar is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print match_string('1 is a number bar is a string 12-1-2013 is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print match_string('1 is a number foo is a string January is a date', '# is a number ## is a string ### is a date', ['foo'], '%m-%d-%y')
print match_string('1 and 2 are numbers foo and bar are strings 15-1-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
print match_string('1 and 2 are numbers foo and bar are strings 08-42-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
print match_string('1 and 2 are numbers foo and bar are strings 08;4;2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '%m-%d-%y')
print match_string('1 and 2 are numbers foo and bar are strings 08-4-2013 is a date', '# and # are numbers ## and ## are strings ### is a date', ['foo', 'bar'], '~%m-%d-%y')
"
How do I handle recursive repr()'s in Python?,"def __init__(self, *list):
    self._list= list
def __repr__(self):
    return 'mything('+repr(self._list)[1:-1]+')')
"
Loop problem while iterating through a list and removing recurring elements,"listy = [2,2,1,3,4,2,1,2,3,4,5]
found = set()
for i in listy:
    if not i in found:
        print i, listy.count(i)
        found.add(i)
"
Storing a text file into SQLite3 database using python,"from babel.messages.pofile import read_po

with open('ru.po') as po_file:
    cat = read_po(po_file)

for message in cat:
    if message.id:
        print '{!r} -> {!r}'.format(message.id, message.string)
"
Create pandas dataframe from nested dict with outer keys as df index and inner keys column headers,"In [182]: dictA = {'X':{'A': 0.2, 'B':0.3, 'C':0.4} ,'Y':{'A': 0.05, 'B':0.8, 'C':0.1},'Z':{'A': 0.15, 'B':0.6, 'C':0.25}}

In [183]: df = pd.DataFrame(dictA).T

In [184]: df
Out[184]:
      A    B     C
X  0.20  0.3  0.40
Y  0.05  0.8  0.10
Z  0.15  0.6  0.25
"
Prevent matplotlib statefulness,"import matplotlib.backends.backend_qt4agg as backend
from matplotlib.figure import Figure

fig = Figure()
ax = fig.add_subplot(111)

manager = backend.new_figure_manager_given_figure(1, fig)
manager.show()
backend.show.mainloop()
"
remove empty numpy array,"In [10]: x=np.zeros((0,4),float)
In [11]: x
Out[11]: array([], shape=(0, 4), dtype=float64)
In [12]: x==[]
Out[12]: False
In [14]: 0 in x.shape  # check if there's a 0 in the shape
Out[14]: True
"
Rolling window or occurrences for 2D matrix in Numpy per row?,"a = rolling_window(matrix, 2)
print np.all(rolling_window(matrix, 2) == [0,1], axis=2)
"
How to sort a Python dictionary by value?,"sorted(a_dict.items(), key=lambda (k, (v1, v2)): v2)
sorted(a_dict.items(), key=lambda item: item[1][1])    # Python 3
"
transforming data frame in ipython a little like transpose,"import pandas as pd
df = pd.DataFrame({'col1': ['a','a','a','b','b'],
                   'col2': [1,3,20,2,4],
                   'col3': [11,12,13,14,15]})
print df.pivot(index='col1', columns='col2')
"
Creating a 4D view on 2D array to divide it into cells of fixed size,"numpy.rollaxis(t.reshape(3, 3, 3, 3), 2, 1)
"
Difference between local and global variables in python,"def altera(L1, L2):
    for elemento in L2:
        # Call method on L1 that changes it
        L1.append(elemento)
    # Call method on L2 that changes it
    L2.append(4)
    # Change object pointed to by name L1 -- Lista1
    L1[-1] = 10
    # Change object pointed to by name L2 -- Lista2
    del L2[0]
    return L2[:]

Lista1 = [1,2,3]
Lista2 = [1,2,3]

Lista3 = altera(Lista1, Lista2)

print Lista1
print Lista2
print Lista3
"
python elementtree xml append,"new=ET.Element('Data')
new.text='FOUR'
child[1].append(new)
new=ET.Element('Data')
new.text='FIVE'
child[1].append(new)
"
How to make matrices in Python?,"for row in matrix:
    print ' '.join(row)
"
How to get two random records with Django,MyModel.objects.order_by('?')[:2]
Add column sum as new column in PySpark dataframe,"newdf = df.withColumn('total', sum(df[col] for col in df.columns))
"
return index for rows in csv module python,"for index, row in enumerate(data):
    RowSum = my_sum(row)
    print('Row %d: %f' % (index + 1, rowSum))
"
Python loop through string in nested for loops,"actions = {
    'normal' : {
        ' ' : lambda x: ('eating', ' '),
        '""' : lambda x: ('quoted', '""'),
        None: lambda x: ('normal', x)
    },
    'eating' : {
        ' ' : lambda x: ('eating', ''),
        '""' : lambda x: ('quoted', '""'),
        None: lambda x: ('normal', x)
    },
    'quoted' : {
        '""' : lambda x: ('normal', '""'),
        '\\': lambda x: ('escaped', '\\'),
        None: lambda x: ('quoted', x)
    },
    'escaped' : {
        None: lambda x: ('quoted', x)
    }
}

def reduce(s):
    result = ''
    state = 'eating'
    for ch in s:
        state, ch = actions[state].get(ch, actions[state][None])(ch)
        result += ch
    return result

s = '''that's my     string, ""   keep these spaces     ""    but reduce these '''
print reduce(s)
"
How to get tag name and its corresponding attributes as a key:value pair from a xsd file,"import xml.sax

class MyXsdHandler(xml.sax.handler.ContentHandler):
    def parse(self, f):
        self.result = {}
        s = open(f, ""r"").read()
        xml.sax.parseString(s, self)
        return self.result

    def startElement(self, name, attrs):
        if name == ""xsd:element"":
            d = dict(attrs)
            self.result[attrs[""name""]] = d

results = MyXsdHandler().parse(""myfile.xsd"")
"
Calculate mean over discrete functions with different amount of sampling points,"import numpy as np
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt

# make up three datasets for testing
x1 = np.linspace(0, 10, num=11, endpoint=True)
x2 = np.linspace(0, 10, num=13, endpoint=True)
x3 = np.linspace(0, 10, num=23, endpoint=True)

y1 = np.cos(-x1**2/9.0) + 0.2*np.random.rand((len(x1)))
y2 = np.cos(-x2**2/9.0) + 0.2*np.random.rand((len(x2)))
y3 = np.cos(-x3**2/9.0) + 0.2*np.random.rand((len(x3)))

# interpolate data
f1 = interp1d(x1, y1,'cubic')
f2 = interp1d(x2, y2,'cubic')
f3 = interp1d(x3, y3,'cubic')

# define common carrier for calculation of average curve
x_all = np.linspace(0, 10, num=101, endpoint=True)

# evaluation of fits on common carrier
f1_int = f1(x_all)
f2_int = f2(x_all)
f3_int = f3(x_all)

# put all fits to one matrix for fast mean calculation
data_collection = np.vstack((f1_int,f2_int,f3_int))

# calculating mean value
f_avg = np.average(data_collection, axis=0)

# plot this example
plt.figure()
plt.hold('on')
plt.plot(x1,y1,'ro',label='row1')
plt.plot(x2,y2,'bo',label='row2')
plt.plot(x3,y3,'go',label='row3')

plt.plot(x_all,f1_int,'r-',label='fit1')
plt.plot(x_all,f2_int,'b-',label='fit2')
plt.plot(x_all,f3_int,'g-',label='fit3')

plt.plot(x_all, f_avg,'k--',label='fit average')
plt.legend(loc=3)

plt.hold('off')
plt.show()
"
"Given two lists of strings, find the total number of strings in the second list which contains any string in the first list as substring",">>> ListA = ['stop', 'kill']
>>> ListB = ['stoppable', 'killable', 'stopkill']

>>> sum(a.lower() in b.lower() for a in ListA for b in ListB)
4
>>> len(set(b for a in ListA for b in ListB if a.lower() in b.lower()))
3
"
What is the overhead of using a dictionary instead of a list?,">>> x['unexpected'] = 'something else'
>>> print(x['unexpected'])
something else
"
how to write the contents of a file into lists in python?,"with open('path/to/file.txt') as f:
    result = [map(int, line.split()) for line in f]
    # [list(map(int, line.split())) for line in f] in Python3
"
"Extract columns using ""genfromtxt""",">>> np.genfromtxt('File1.csv', delimiter='\t', names=True, usecols=(""Time"", ""Profit""), unpack=True)
array([(0.0, 1.0), (2.0, 3.0), (3.0, 4.0), (5.0, 6.0)], 
      dtype=[('Time', '<f8'), ('Profit', '<f8')])
"
Split strings by 2nd space,"words = inputstr.split()
secondwords = iter(words)
next(secondwords)

output = [' '.join((first, second)) 
          for first, second in zip(words, secondwords)]
"
Can't get Scrapy to return text in Div,"s_item['schedule'] = sel.select('//div/text()').extract()[0]
"
The pythonic way of printing a value,"for i, word in enumerate(tmpstr):
    print word, tmpstr[i+1]
"
Scrape a series of tables with BeautifulSoup,"import requests

from bs4 import BeautifulSoup

url = ""http://www.aidn.org.au/Industry-ViewCompany.asp?CID=3113""
html = requests.get(url).text
soup = BeautifulSoup(html)

for feature_heading in soup.find_all(""td"", {""class"": ""Feature-Heading""}):
    print ""\n=== %s ==="" % feature_heading.text
    details = feature_heading.find_next_sibling(""td"")
    for item in details.find_all(""td"", {""class"": [""bodytext"", ""paraheading""]}):
        print(""\t"".join([item[""class""][0], "" "".join(item.text.split())]))
"
Built-in method to Generate Random Strings of Fixed Length From Given Characters,"In [91]: '{:b}'.format(10)
Out[91]: '1010'
"
Variable won't be assigned to input in Python,"def chooseletter():
    playerletter = ''

    # use a tuple of letters in condition instead of splitting
    while playerletter not in ('X', 'O'):
        playerletter = input(""What letter would you like to be? X or O? \n"").upper()

    # move the setting of computerletter outside the loop
    # use the X if Z else Y construction for simplicity
    computerletter = 'O' if playerletter == 'X' else 'X'

    # instead of returning 2 values in a list, return a tuple
    return playerletter, computerletter
"
Pandas DataFrame apply function doubling size of DataFrame,"def make_mask(s):
    if np.unique(s).size == 2: # If binary, return all-false mask
        return np.zeros_like(s, dtype=bool)
    else: # Otherwise, identify outliers
        return s >= np.percentile(s, 99)
"
Extract highest values of numpy structured array,"def high_bitscores(a,qid,thresh=0.9):
    valid = a[a['queryid'] == qid]
    return valid[valid['bitscore'] >= valid['bitscore'].max()*thresh]
"
Ensure uniqueness of instance attribute in python,"class DescName(object):

    def __init__(self):
        self.cache = {None: self}

    def __get__(self, obj, cls=None):
        return self.cache[obj]

    def __set__(self, obj, value):
        cls = obj.__class__

        if value in cls._names:
            raise AttributeError('EXISTING NAME %s' % value)

        try:
            cls._names.remove(self.cache[obj])
        except KeyError:  # 1st time name is used
            pass
        cls._names.add(value)
        self.cache[obj] = value


class MyClass(object):
    _names = set()

    name = DescName()

    def __init__(self, name, *args, **kwargs):
        self.name = name


a = MyClass('hello')
print('a.name:', a.name)
b = MyClass('goodbye')
print('b.name:', b.name)

try:
    c = MyClass('hello')
except AttributeError:
    print('Duplicate Name caught')
else:
    print('c.name:', c.name)

a.name = 'see you again'
print('a.name:', a.name)

try:
    a.name = b.name
except AttributeError:
    print('CANNOT SET a.name to b.name')
else:
    print('a.name %s = %s b.name' % (a.name, b.name))
"
"scrapy, how to separate text within a HTML tag element","from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
import re
from todo.items import wendyItem

class wendySpider(BaseSpider):
    name = ""wendyspider""
    allowed_domains = [""wendys.com.sg""]
    start_urls = [""http://www.wendys.com.sg/outlets.php""]

    def parse(self, response):
        hxs = HtmlXPathSelector(response)
        cells = hxs.select('//div[@id=""menu_list""]//td[@valign=""top""][.//span[@class=""foodTitle""]]')
        items = []
        for cell in cells:
            item = wendyItem()

            # get all text nodes
            # some lines are blank so .strip() them
            lines = cell.select('.//text()').extract()
            lines = [l.strip() for l in lines if l.strip()]

            # first non-blank line is the place name
            item['name'] = lines.pop(0)

            # for the other lines, check for ""Opening hours"" and ""Telephone""
            # to store lines in correct list container

            address_lines = []
            hours_lines = []
            telephone_lines = []

            opening_hours = False
            telephone = False

            for line in lines:
                if 'Opening Hours' in line:
                    opening_hours = True
                elif 'Telephone' in line:
                    telephone = True
                if telephone:
                    telephone_lines.append(line)
                elif opening_hours:
                    hours_lines.append(line)
                else:
                    address_lines.append(line)

            # last address line is the postal code + town name
            item['address'] = ""\n"".join(address_lines[:-1])
            item['postal'] = address_lines[-1]

            # ommit ""Opening hours"" (first element in list)
            item['hours'] = ""\n"".join(hours_lines[1:])

            item['contact'] = ""\n"".join(telephone_lines)

            items.append(item)

        return items
"
Plone - getting and listing objects from member folder in a view,"from Products.CMFCore.utils import getToolByName

catalog = getToolByName(context, 'portal_catalog')
contents = catalog(path=dict(query='/root/Members/' + myname, depth=1))
"
Add two random numbers together?,"if ""Addition"":
    easygui.msgbox (""Please enter the correct answer to earn a point, there are 10 questions in this quiz"")

    Figure1 = random.randrange(0,11)
    Figure2 = random.randrange(0,11)

    PlayerAnswer = easygui.enterbox (""What is "" +str(Figure1)+ "" + "" +str(Figure2)+ ""?"")

    if int(PlayerAnswer) == Figure1 + Figure2:
        AdditionAnswers += 1
        easygui.msgbox (""Correct! Your score is ""+str(AdditionAnswers))
    else:
        AdditionAnswers += 0
        IncorrectAnswers += 1

    easygui.msgbox (""Sorry, incorrect! Your score is still ""+str(AdditionAnswers))
    easygui.msgbox (""You scored "" +str(AdditionAnswers)+ "" out of 10"")
"
How can I check if a string has the same characters? Python,"sorted(str1) == sorted(str2)
"
Mapping a range of integers to a single integer,">>> convert(32)
1
>>> convert(68)
2
>>> convert(150)
4
>>> convert(250)
5
"
Copy numpy array from one (2-D) to another (3-D),"def looping(A, p):
    m, n = A.shape
    B = np.zeros((m,n,p), dtype=int)
    for r in range (m):
        for c in range (n):
            x = np.random.randint(0, p)
            B[r, c, x] = A[r, c]
    return B

def shuffling(A, p):
    m, n = A.shape
    B = np.zeros((m,n,p), dtype=int)
    B[:,:,0] = A
    map(np.random.shuffle, B.reshape(m*n,p))
    return B
"
How do I access embedded json objects in a Pandas DataFrame?,"In [1]: df = pd.DataFrame([[1, {'a': 2}], [2, {'a': 1, 'b': 3}]])

In [2]: df
Out[2]: 
   0                   1
0  1           {u'a': 2}
1  2  {u'a': 1, u'b': 3}

In [3]: df[1].apply(pd.Series)
Out[3]: 
   a   b
0  2 NaN
1  1   3
"
How to save Xlsxwriter file in certain path?,workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')
Pass bash file list to python CLI function,"In [137]: glob.glob('stack342*')
Out[137]: ['stack34234965.py', 'stack34279750.py']
"
Summing across rows of Pandas Dataframe,"df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()"
Put value at centre of bins for histogram,"import matplotlib.pyplot as plt
import numpy as np

def plot_my_time_based_histogram():
    #Note - changed the 24 values for 0
    time_new=[9, 23, 19, 9, 1, 2, 19, 5, 4, 20, 23, 10, 20, 5, 21, 17, 4, 13, 8, 13, 6, 19, 9, 14, 9, 10, 23, 19, 23, 20, 19, 6, 5, 0, 20, 19, 15, 14, 19, 14, 15, 21]
    fig, ax = plt.subplots()
    hour_list = time_new
    print hour_list
    numbers=[x for x in xrange(0,24)]
    labels=map(lambda x: str(x), numbers)
    plt.xticks(numbers, labels)
    #Make limit slightly lower to accommodate width of 0:00 bar
    plt.xlim(-0.5,24)
    plt.hist(hour_list,bins=np.arange(25)-0.5)

    # Further to comments, OP wants arbitrary labels too.
    labels=[str(t)+':00' for t in range(24)]
    ax.set_xticklabels(labels)
    plt.show()

plot_my_time_based_histogram()
"
Python: how to determine if a list of words exist in a string,"def words_in_string(word_list, a_string):
    return set(word_list).intersection(a_string.split())
"
How to parse and simplify a string like '3cm/µs² + 4e-4 sqmiles/km/h**2' treating physical units correctly?,">>> subs[Symbol('almost_meter')] = 0.9*u.meter
... sympify('almost_meter').subs(subs)
0.9*m
"
How to make a list of numpy arrays all have the same shape?,"for i,a in enumerate(your_arrays):
  rows, cols = a.shape
  if rows != N:
    your_arrays[i] = np.vstack([a, np.zeros((N - rows, cols), dtype=a.dtype)])
"
How to save and load an array of complex numbers using numpy.savetxt?,"array = numpy.loadtxt('outfile.txt').view(complex)
"
Python convert String to Tuple for REST API,"import ast

def parse_params(s):
    root = ast.parse(s)
    expr = root.body[0]
    return process_node(expr.value)

def process_node(node):
    if isinstance(node, ast.Tuple):
        return tuple(map(process_node, node.elts))
    elif isinstance(node, ast.Name):
        return node.id
    else:
        raise ValueError(""unsupported node type %r"" % node)
"
Python Parsing HTML Table Generated by JavaScript,"from pandas.io.html import read_html
from selenium import webdriver


driver = webdriver.Firefox()
driver.get('http://www1.nyse.com/about/listed/IPO_Index.html')

table = driver.find_element_by_xpath('//div[@class=""sp5""]/table//table/..')
table_html = table.get_attribute('innerHTML')

df = read_html(table_html)[0]
print df

driver.close()
"
How to reference a static attribute from within a class in Python?,"class MyClass:
    x = 1
    results = list(i+x for i in range(10))
"
Is it possible to create a completely new instance of the members of a parent class?,"class A(object):
    def __init__(self):
        self.x = 0

class B(A):
    pass

ai = A()
bi = B()

print id(ai.x) == id(bi.x)
ai.x=3
print id(ai.x) == id(bi.x)
"
Converting IP address into bytes in python,"ip = '192.168.1.1'
ip_as_bytes = bytes(map(int, ip.split('.')))
"
Change python's print behaviour in a context,"from contextlib import contextmanager
import sys

class Prefixer(object):
    def __init__(self, prefix, orig):
        self.prefix = prefix
        self.orig = orig
    def write(self, text):
        self.orig.write(self.prefix + text)
    def __getattr__(self, attr):
        return getattr(self.orig, attr)     

@contextmanager
def prefix_stdout(prefix):
    current_out = sys.stdout
    try:
        sys.stdout = Prefixer(prefix, current_out)
        yield
    finally:
        sys.stdout = current_out
"
as removing a line commented python file?,"with open('my_file.py', 'r') as f:
    lines = [line for line in f if not line.replace(' ','').lower().startswith(""#'test/"")]

with open('my_file.py', 'w') as f:
    f.writelines(lines)
"
Convert a list of lists of tuples to a tuple of lists of lists in python,"def convert(data_structure):
     sentences, tags = data_structure
     container = []
     for i in xrange(len(sentences)):
         container.append(zip(sentences[i], tags[i]))

     return container
"
Post picture to Tumblr using Python,"#!/usr/bin/python
from tumblr import Api
import sys

BLOG='example.tumblr.com'
USER='example@example.com'
PASSWORD='example'
api = Api(BLOG,USER,PASSWORD)
api.write_photo('http://example.org/somewhere/lolcat.jpg')
"
Store path to dictionary value for setting value,"def set_path(someDict, path, value):
    for x in path[::-1]:
        value = {x: value}
    return deepupdate(someDict, value)


def deepupdate(original, update):
    for key, value in original.items(): 
        if not key in update:
            update[key] = value
        elif isinstance(value, dict):
            deepupdate(value, update[key]) 
    return update


person = {}
person = set_path(person, ['name'], 'Shalom')
person = set_path(person, ['address', 'city'], 'Toronto')
person = set_path(person, ['address', 'street'], 'Baddessa')

pprint(person)
"
How to stop a loop?,"for i in range(1, k+1): 
    if k % i == 0:  
        sx += i
for j in range(1, z+1):
    if z % j == 0:
        sy += j
"
python regex: skip word,"pattern = re.match(""^\s*(\S+)\s+(\S+\s*(\S+)?)?\s+(\S+),.*"", verilogString)
"
How to get the sum of timedelta in Python?,"datetime.combine(date.today(), time()) + timedelta(hours=2)
"
Scrapy selector for nodes between <br /> tags,"[sel.xpath('''.//div/node()[count(preceding-sibling::br)=%d]
                           [not(self::br)]''' % i).extract()
 for i in range(0, len(sel.xpath('.//div/br'))+1)]
"
How to create a class attribute and class property within Elixir/SqlAlchemy,"from sqlalchemy.ext.hybrid import hybrid_property

@hybrid_property
def name (self):
    first_name = self.first_name if self.first_name is not None else """"
    middle_name = self.middle_name if self.middle_name is not None else """"
    last_name = self.last_name if self.last_name is not None else """"
    return "" "".join((first_name, middle_name, last_name)).strip()

@name.setter
def name (self,string):
    first_name = """"
    middle_name = """"
    last_name = """"
    split_string = string.split(' ')
    if len(split_string) == 1:
        first_name = string
    elif len(split_string) == 2:
        first_name, last_name = split_string
    elif len(split_string) == 3:
        first_name, middle_name, last_name = split_string
    else: #len(split_string) > 3:
        first_name = split_string[0]
        last_name = split_string[-1]
        middle_name = "" "".join(split_string[1:-2])
    self.first_name = first_name
    self.middle_name = middle_name
    self.last_name = last_name
"
Make a list of list with string in a text file in Python 3,"with open(""file"", ""r"") as f:
    m = f.readlines()
    print [i.strip().split() for i in m]
"
How to read several rows from a csv,"import csv

user_data = {}
with open(phone_numbers) as f:
    reader = csv.DictReader(f)
    user_data = dict([(record['Name'], record['phone']) for record in reader if record.get('phone').strip())
"
"In Python, given a URL to a text file, what is the simplest way to read the contents of the text file?","import urllib2

for line in urllib2.urlopen(target_url):
    print line
"
Navigating Callable-Iterators,"times = [result.group('time') for result in messages]
"
Unexpected value of floor() function in python,"def fuzzyFloor(v):
    """"""Returns the floor of the given number, unless it is equal to its
    ceiling (within floating point error).""""""
    floor = math.floor(v)
    if fAlmostEqual(floor+1, v):
        return floor+1
    return floor

print fuzzyFloor(14.9999999999999)
print fuzzyFloor(15)
print fuzzyFloor(14.99)
print fuzzyFloor(14.5)
"
Specifying types and patterns using argparse choices,"import os
import argparse

cases = [n[n.rindex(""."")+1:] for n in os.listdir(""."") if n.startswith(""file."")]
cases.append(""_"")
parser = argparse.ArgumentParser()
parser.add_argument('case', choices = cases)

args = parser.parse_args()
print args.case
"
Count overlapping regex matches once again,"def myregex(pattern,text,dir=0):
    import re
    m = re.search(pattern, text)
    if m:
        yield m.group(0)
        if len(m.group('suffix')):
            for r in myregex(pattern, ""%s%s%s"" % (m.group('prefix'),m.group('suffix')[1:],m.group('end')),1):
                yield r
            if dir<1 :
                for r in myregex(pattern, ""%s%s%s"" % (m.group('prefix'),m.group('suffix')[:-1],m.group('end')),-1):
                    yield r


def myprocess(pattern, text):    
    parts = pattern.split(""*"")    
    for i in range(0, len(parts)-1 ):
        res=""""
        for j in range(0, len(parts) ):
            if j==0:
                res+=""(?P<prefix>""
            if j==i:
                res+="")(?P<suffix>""
            res+=parts[j]
            if j==i+1:
                res+="")(?P<end>""
            if j<len(parts)-1:
                if j==i:
                    res+="".*""
                else:
                    res+="".*?""
            else:
                res+="")""
        for r in myregex(res,text):
            yield r

def mycount(pattern, text):
    return set(myprocess(pattern, text))
"
Skip first two characters in (key=lambda) sorting,"sorted(dictionary.items(), key=lambda t: (t[1], t[0][2:]))
"
Python email parse non multipart,"#in case it is not multipart
import email

mail = email.message_from_string(raw_message)
payload = mail.get_payload(decode=True)

mail_dico = { elt.split("":"",1)[0].strip():elt.split("":"", 1)[1].strip() for elt in payload.split(""\n"") if "":"" in elt and "" "" not in elt.split(':')[0].strip()}
"
How to extract an arbitrary line of values from a numpy array?,"import numpy as np
import scipy.ndimage
import matplotlib.pyplot as plt

#-- Generate some data...
x, y = np.mgrid[-5:5:0.1, -5:5:0.1]
z = np.sqrt(x**2 + y**2) + np.sin(x**2 + y**2)

#-- Extract the line...
# Make a line with ""num"" points...
x0, y0 = 5, 4.5 # These are in _pixel_ coordinates!!
x1, y1 = 60, 75
num = 1000
x, y = np.linspace(x0, x1, num), np.linspace(y0, y1, num)

# Extract the values along the line, using cubic interpolation
zi = scipy.ndimage.map_coordinates(z, np.vstack((x,y)))

#-- Plot...
fig, axes = plt.subplots(nrows=2)
axes[0].imshow(z)
axes[0].plot([x0, x1], [y0, y1], 'ro-')
axes[0].axis('image')

axes[1].plot(zi)

plt.show()
"
Reduce Two Pandas Series to a Single One,"In [1]: s1 = Series([1,2,3])

In [2]: s2 = Series([2,3,4])

In [4]: Series(zip(s1,s2))
Out[4]: 
0    (1, 2)
1    (2, 3)
2    (3, 4)
dtype: object
"
Python Regex Sub - Use Match as Dict Key in Substitution,"lambda m: replacement_dict.get(m.group(), m.group()) 
# fallback to just leaving the word there if we don't have a replacement
"
"Which is generally faster, a yield or an append?","# yield_vs_append.py
data = range(1000)

def yielding():
    def yielder():
        for d in data:
            yield d
    return list(yielder())

def appending():
    lst = []
    for d in data:
        lst.append(d)
    return lst
"
sorting a list containing dates as a substring,">>> a.sort(key=lambda s: datetime.strptime(s[:10], '%m/%d/%Y'))
>>> a
['02/12/2012100%ABC10/02/2014F', '08/19/2014100%ABC10/02/2014F', '08/29/2014100%ABC10/02/2012F']
"
Regular Expression String Mangling Efficiency in Python - Explanation for Slowness?,"with open('yourfile') as fh:
    for line in fh:
        result += line
        if line.find('>>>FOOBAR<<<') > -1:
            break
"
How to make an object indestructible even with force deletion?,"class obj:
    def __del__(self):
         global _ref
         _ref = self
         return
"
Python way of getting max of list containing integers and floats,"def cmp_tasks(a,b):
    a = a.split('.')
    b = b.split('.')
    if len(a) == len(b):
        ret = cmp(int(a[0]),int(b[0]))
        if not ret:
            return cmp(int(a[1]),int(b[1]))
        return ret
    else:
        return cmp(int(a[0]),int(b[0]))
"
Get ID of one of multiple buttons in HTML form in Django,"action = None
for key in request.POST.keys():
    if key.startswith('action:'):
        action = key[7:]
        break
"
Explicit line joining in Python,"fd = open(filename)
str = ''.join([line.rstrip('\n') for line in fd if not (line.startswith('>from') or line.startswith('*'))])
"
Sort tuples based on second parameter,my_list.sort(key=lambda x: x[1])
Pandas combine dataframes,"In [100]:

merged = pd.concat([A,B], ignore_index=True)
merged.index = np.arange(1, len(merged) + 1)
merged[3] = pd.Series(index=merged.index, data=merged.index.values).astype(str) + '.txt'
merged
Out[100]:
     1    2      3
1  0.2  0.3  1.txt
2  0.4  0.6  2.txt
3  0.1  0.8  3.txt
4  3.0  4.5  4.txt
"
gtk MessageDialog not closing until enclosing method finishes,"class NestedDialog(object):
    def __init__(self, dialog):
        self.dialog = dialog
        self.response_var = None

    def run(self):
        self._run()
        return self.response_var

    def _run(self):
        self.dialog.show()
        self.dialog.connect(""response"", self._response)
        Gtk.main()

    def _response(self, dialog, response):
        self.response_var = response
        self.dialog.destroy()
        Gtk.main_quit()
"
Scheme to Python: most elegant translation of a recursive procedure?,"def recursivefun(word):
    if len(word) == 2:
        return word
    else:
        x = []
        x.append(word)
        x.extend(recursivefun(word[1:]))
        x.append(word)
        return x

print recursivefun(""banana"")
"
Python - Find top largest numbers in array,"yourdata = [{15: [32, 'massages']}, {45: [12, 'hair-salon']}, {23:[3, 'automotive service']}]

# transfer your data into a more usable format
data = [(score,cat,name) for dat in yourdata for cat,(score,name) in dat.iteritems()]

# sort on descending score
data.sort(reverse=True)

# throw away the low-scoring items
data = data[:int(len(data)*0.6 + 1)]
"
Memoryerror with too big list,"def anno():
    for idx in xrange(248956422):
        elm = ""0""

        for j in range(0, len(whole_st_gen)):
            if whole_st_gen[j] <= idx < whole_end_gen[j]:
                elm = ""1""                    

        for j in range(0, len(whole_st_ex)):
            if whole_st_ex[j] <= idx < whole_end_ex[j]:
                elm = ""2""                    

        for j in range(0, len(whole_st_mr)):
            if whole_st_mr[j] <= idx < whole_end_mr[j]:
                elm = ""3""                    

        for j in range(0, len(whole_st_nc)):
            if whole_st_nc[j] <= idx < whole_end_nc[j]:
                elm = ""4""                    

        yield elm
"
Intersection of variable number of lists,"def intersect(*lists):
    return list(set.intersection(*map(set, lists)))
"
Tkinter: Wait for item in queue,"################################################################################
import threading
import time
import Queue
import Tkinter      as Tk
import Tkconstants  as TkConst
from ScrolledText import ScrolledText
from tkFont       import Font

global top
global dataQ
global scrText

def thread_proc():
    x = -1
    dataQ.put(v)
    x = 0
    for i in xrange(5):
        for j in xrange(20):
            dataQ.put(v)
            time.sleep(0.1)
            x += 1
        time.sleep(0.5)
    dataQ.put(v)

def on_after_elapsed():
    while True:
        try:
            v = dataQ.get(timeout=0.1)
        except:
            break
        scrText.insert(TkConst.END, ""value=%d\n"" % v)
        scrText.see(TkConst.END)
        scrText.update()
    top.after(100, on_after_elapsed)

top     = Tk.Tk()
dataQ   = Queue.Queue(maxsize=0)
f       = Font(family='Courier New', size=12)
scrText = ScrolledText(master=top, height=20, width=120, font=f)
scrText.pack(fill=TkConst.BOTH, side=TkConst.LEFT, padx=15, pady=15, expand=True)
th = threading.Thread(target=thread_proc)
th.start()
top.after(100, on_after_elapsed)
top.mainloop()
th.join()
## end of file #################################################################
"
Need help to modify flood fill algorithm,"def fill(matrix, x, y, color1, color2):

    matWidth = len(matrix)
    matHeight = len(matrix[0])
    if x < 0 or y < 0 or x >= matWidth or y >= matHeight:
        return matrix

    if matrix[x][y] == color2 or matrix[x][y] != color1:
        return matrix
    if matrix[x][y] == color1:
        matrix[x][y] = color2

    fill(matrix, x - 1, y, color1, color2)
    fill(matrix, x + 1, y, color1, color2)
    fill(matrix, x, y - 1, color1, color2)
    fill(matrix, x, y + 1, color1, color2)

    return matrix
"
related to List (want to insert into database),">>> query = 'INSERT INTO (%s) VALUES (%s)' % (','.join([str(i) for i in list1]),
                                              ','.join([str(i) for i in list2]))
>>> print query
INSERT INTO (name,age,sex) VALUES (test,10,female)
"
case insensitive string comparison,(first.upper() == second.upper())
how to scrape product details on amazon webpage using beautifulsoup,"from pprint import pprint
from bs4 import BeautifulSoup
import requests

url = 'http://www.amazon.com/dp/0439136369'
response = requests.get(url, headers={'User-agent': 'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36'})

soup = BeautifulSoup(response.content)
tags = {}
for li in soup.select('table#productDetailsTable div.content ul li'):
    try:
        title = li.b
        key = title.text.strip().rstrip(':')
        value = title.next_sibling.strip()

        tags[key] = value
    except AttributeError:
        break

pprint(tags)
"
JSON dictionary lookup,">>> for artist in data['results']['artistmatches']['artist']:
...     image = max(artist['image'], key=lambda i: sizemap[i['size']])
...     image_url = image['#text']
...     print(image_url)
...
http://img2-ak.lst.fm/i/u/d593a102f004491689bc7e07d8fb09ba.png
"
Find Sum of Columns of Data in Django Like and Excel File,">>> totals = {}
>>> for key in ['month__count', 'recipients__sum', 'unsubscribes__sum', ...]:
...     totals[key] = sum(month.get(key, 0) for month in stats)
"
Assignment to discontinuous slices in python,"for i, b in itertools.izip(I, B):
    A[i] = b
"
Simplifying for-if messes with better structure?,"def matchIt(needle, haystack):
    """"""
    @param needle:   string, text to seek
    @param haystack: string, text to search in

    Return number of times needle is found in haystack,
        allowing overlapping instances.

    Example: matchIt('abab','ababababab') -> 4
    """"""
    lastSeenAt = -1
    timesSeen = 0
    while True:
        nextSeen = haystack.find(needle, lastSeenAt+1)
        if nextSeen==-1:
            return timesSeen
        else:
            lastSeenAt = nextSeen
            timesSeen += 1
"
Add leading 0's to value until length is 8 characters long,"value = '01'
needed = 8 - len(value)
value = '0' * needed + value
"
"Replacing ""tokens"" in Python string with alternate values",">>> template.format(**{""Title"": ""SampleTitle"", ""Note"": ""SampleNote""})
'http://whatever.org/?title=SampleTitle&note=SampleNote'
"
collide_widget with negative size,"def collide_widget(self, wid):
    if self.right < wid.x:
        return False
    if self.x > wid.right:
        return False
    if self.top < wid.y:
        return False
    if self.y > wid.top:
        return False
    return True
"
Most concise way to check whether a list is empty or contains only None?,"if all(e is None for e in myList):
    print('all empty or None')
"
Convert an IP string to a number and vice versa,"import socket, struct

def ip2long(ip):
    """"""
    Convert an IP string to long
    """"""
    packedIP = socket.inet_aton(ip)
    return struct.unpack(""!L"", packedIP)[0]
"
Get random element from attributes in an object,"def getRandomRate(self):
    return random.choice([v for attr, v in vars(self).items()
                          if len(attr) == 8 and attr[3:5] == 'To'])
"
numpy - evaluate function on a grid of points,"import numpy as np

def func(x, y):
    return np.sin(y * x)

xaxis = np.linspace(0, 4, 10)
yaxis = np.linspace(-1, 1, 20)
result = func(x[:,None], y[None,:])
"
Python: Making Dollars make Sense,"from decimal import Decimal
from repr import Repr

class CustomRepr(Repr):
    def repr_Decimal(self, obj, level):
        return ""{0:.2f}"".format(obj)

cr = CustomRepr()

data = {""money"": [Decimal(""42"")]}

print cr.repr(data)
"
Searching for a string in a multidimentional list and appending the sublist containing match to empty list,"def foo(myList,key,first=True):
    return [x for x in myList if key in x or not first and key in x[1]]

>>> foo(myList,'abc')
[['abc', 'abc-321']]
>>> foo(myList,'abc',first=False)
[['abc', 'abc-321'], ['def', '789-abc']]
>>> foo(myList,'abc',first=True)
[['abc', 'abc-321']]    
"
argparse: identify which subparser was used,"import argparse

parser = argparse.ArgumentParser( version='pyargparsetest 1.0' )
subparsers = parser.add_subparsers(help='commands')

# all
all_parser = subparsers.add_parser('all', help='process all apps')
all_parser.set_defaults(which='all')

# app
app_parser = subparsers.add_parser('app', help='process a single app')
app_parser.add_argument('appname', action='store', help='name of app to process')
app_parser.set_defaults(which='app')
"
How can I test this script that accesses urls through several different proxy servers?,"import json 
import urllib2

with open('urls.txt') as f:
    urls = [line.rstrip() for line in f]
with open('proxies.txt') as proxies:
    for line in proxies:
        proxy = json.loads(line)
        proxy_handler = urllib2.ProxyHandler(proxy)
        opener = urllib2.build_opener(proxy_handler)
        urllib2.install_opener(opener)
        for url in urls:
            try:
                data = urllib2.urlopen(url).read()
                print proxy, ""-"", data 
            except:
                print proxy, ""- not working""
"
Labels on pcolormesh,"for ii,i in enumerate(df.index):
    for jj,j in enumerate(df.keys()):
        plt.text(ii+0.5,jj+0.5,df[i][j])
"
converting a treebank of vertical trees to s-expressions,"def reparse(tree=samp):
  stack = [-1]
  result = []
  for line in tree:
    equals, rest = relinelev.match(line).groups()
    linelev = len(equals)
    while linelev < stack[-1]:
      result[-1] += ')'
      curlev = stack.pop()
    if linelev == stack[-1]:
      result[-1] += ')'
    else:
      stack.append(linelev)
    result.append('(%s' % clean(rest))
  while stack[-1] >= 0:
    result[-1] += ')'
    stack.pop()
  return ' '.join(result)
"
Any way to extract the sign of a number in Python?,"def Bolzano(fonction, a, b, tol=0.000001):
   while abs(b-a)>tol:
       m=(a+b)/2
       if cmp(fonction(m), fonction(a)) == 0:
           a=m
       else:
           b=m
   return a, b
"
"How to emulate Firefox ""Save File"" -> OK in Python","fp = webdriver.FirefoxProfile()
fp.set_preference(""browser.download.folderList"",2)
fp.set_preference(""browser.download.dir"", download_dir)
fp.set_preference(""browser.download.manager.showWhenStarting"", False)

fp.set_preference(""browser.helperApps.neverAsk.saveToDisk"", ""text/plain"")

driver = webdriver.Firefox(firefox_profile=fp)
"
Selecting some elements in python lists,"for k, g in groupby(lis, key=lambda x:x[0].partition('.')[0]):
    print '\n'.join(x[0] for x in g) + '\n'
"
storing and retrieving images in dictionary - python,"pictures = {'mary': '001.jpg', 'bob', '002.jpg'}
filename = pictures['mary']
with open(filename. 'rb') as f:
    image = f.read()
"
How to minimize string-appending to one line in Python?,"[x if x[0] == 'A' else ""A"" + x for x in y]
"
adding text to a line in a file,"import fileinput
import sys

print 'list of goodies'
for line in fileinput.input(['./lista.txt'], inplace=True):
    number, item = line.rstrip().split(' ', 1) # strip new line from right, split on first space
    print 'number {0} of {1} for me'.format(number, item)
"
Joining specific tuples within a list,"def join_dates(l):
    date = None
    for t in l:
        if len(t) == 1:
            date = t
        else:
            yield t + date
"
Improve efficiency in Python matching,">>> my_set = set()
>>> my_set
set()

>>> my_set.update([1,2,3])
>>> my_set
set([1,2,3])

>>> my_set.update([""this"",""is"",""stuff""])
>>> my_set
set([1,2,3,""this"",""is"",""stuff""])

>>> my_set.add('apricot')
>>> my_set
set([1,2,3,""this"",""is"",""stuff"",""apricot""])

>>> my_set.remove(""is"")
>>> my_set
set([1,2,3,""this"",""stuff"",""apricot""])
"
Read n test cases from file in Python,"import sys

for line in sys.stdin:
    for j in range(int(line)):
        solve(*[int(i) for i in sys.stdin.next().split()])
"
How do I put lines into a list from CSV using python,"import csv

reader = csv.reader(open(""file.csv"", ""r""), delimiter=',')
print([line for line in reader if 'DEFAULT' not in line])
"
How to store a one-to-one relationship table for fast lookups in Python?,"all = zip( C1, C2, C3)
d1,d2,d3 = {},{},{}
for v in all:
   d1[ v[0]], d2[v[1]], d3[v[2]] = v,v,v
"
Cannot get button to toggle a change in pygame,"import pygame

# --- constants ----

size = width, height = 720, 480
speed = [2, 2]

#Colours

black = (0,0,0)
blue = (0,0,255)
green = (0,200,0)
red = (200,0,0)
green_bright = (0,255,0)
red_bright = (255,0,0)

# --- functions ---

def text_objects(text, font):
    textSurface = font.render(text, True, black)
    return textSurface, textSurface.get_rect()


def game_intro():

    text_vroom, text_vroom_rect = text_objects(""V'Room!"", largeText)
    text_vroom_rect.center = ((width/2),(height/2))

    text_go, text_go_rect = text_objects(""GO"", smallText)
    text_go_rect.center = ((75+(100/2)),(400+(50/2)))

    text_exit, text_exit_rect = text_objects(""Exit"", smallText)
    text_exit_rect.center = ((550+(100/2)),(400+(50/2)))

    running = True

    while running:

        for event in pygame.event.get():
            print(event)
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        mouse = pygame.mouse.get_pos()
        click = pygame.mouse.get_pressed()

        screen.fill(blue)
        screen.blit(text_vroom, text_vroom_rect)

        # Button GO

        if 75+100 > mouse[0] > 75 and 400+50 > mouse[1] > 400:
            pygame.draw.rect(screen, green_bright,(75,400,100,50))

            if click != None and click[0] == 1:
                # wait because `pygame.mouse.get_pressed()` is too fast for human clik
                pygame.time.wait(100)
                # run game
                game_running()
        else:
            pygame.draw.rect(screen, green,(75,400,100,50))

        screen.blit(text_go, text_go_rect)

        # Button EXIT

        if 550+100 > mouse[0] > 550 and 400+50 > mouse[1] > 400:
            pygame.draw.rect(screen, red_bright,(550,400,100,50))

            if click != None and click[0] == 1:
                pygame.quit()
                quit()
        else:
            pygame.draw.rect(screen, red,(550,400,100,50))

        screen.blit(text_exit, text_exit_rect)

        pygame.display.flip()

        clock.tick(15)

def game_running():

    text_stop, text_stop_rect = text_objects(""STOP"", smallText)
    text_stop_rect.center = ((75+(100/2)),(400+(50/2)))

    text_exit, text_exit_rect = text_objects(""Exit"", smallText)
    text_exit_rect.center = ((550+(100/2)),(400+(50/2)))

    running = True

    while running:

        for event in pygame.event.get():
            print(event)
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()

        mouse = pygame.mouse.get_pos()
        click = pygame.mouse.get_pressed()

        screen.fill(blue)
        #screen.blit(BackgroundPNG,(0,0))


        # road and car - or title

        screen.blit(road, (0,0))
        screen.blit(carImg, (350,370))

        # Button STOP

        if 75+100 > mouse[0] > 75 and 400+50 > mouse[1] > 400:
            pygame.draw.rect(screen, green_bright,(75,400,100,50))

            if click != None and click[0] == 1:
                # return to menu
                return
        else:
            pygame.draw.rect(screen, green,(75,400,100,50))

        # draw STOP
        screen.blit(text_stop, text_stop_rect)

        # Button EXIT

        if 550+100 > mouse[0] > 550 and 400+50 > mouse[1] > 400:
            pygame.draw.rect(screen, red_bright,(550,400,100,50))

            if click != None and click[0] == 1:
                pygame.quit()
                quit()
        else:
            pygame.draw.rect(screen, red,(550,400,100,50))

        screen.blit(text_exit, text_exit_rect)

        pygame.display.flip()

        clock.tick(15)


# --- main ---

pygame.init()

screen = pygame.display.set_mode(size)
pygame.display.set_caption(""Broom! || BETA::00.0.3"")

# pictures
road = pygame.surface.Surface( size )
road.fill(black)

carImg =  pygame.surface.Surface( (10,10) )
road.fill(green)

# fonts
largeText = pygame.font.Font('freesansbold.ttf',115)
smallText = pygame.font.Font(""freesansbold.ttf"",20)

# others

clock = pygame.time.Clock()

game_intro()
"
How to define a function that output another function?,"def applyIncrease(increaseFn, m):
    return increaseFn(m)

def makeIncrease(n):
    def _innerFn(arg):
        return arg + n
    return _innerFn
"
check string but skip number inside brackets?,"if objectname.startswith('{}: ['.format(name)):
"
What does action mean for scheduled events in python?,">>> import time
>>> import sched
>>> s = sched.scheduler(time.time, time.sleep)
>>> counter = 0
>>> def addCount():
...     global counter
...     counter = counter + 1
... 
>>> def tick():
...     print time.time()
...     s.enter(5, 0, addCount, ())
...     s.run()
...     print time.time()
...     print counter
... 
>>> tick()
1422090645.65
1422090650.65
1
"
Regex for Matching a Floating Point Number which is not an Integer,"-?(?:\d+())?(?:\.\d*())?(?:e-?\d+())?(?:\2|\1\3)
"
Printing a Tree data structure in Python,"class node(object):
    def __init__(self, value, children = []):
        self.value = value
        self.children = children

    def __str__(self, level=0):
        ret = ""\t""*level+repr(self.value)+""\n""
        for child in self.children:
            ret += child.__str__(level+1)
        return ret

    def __repr__(self):
        return '<tree node representation>'
"
How to solve this Python puzzle in a much more elegant manner?,"def LetterChanges(s):
    orig = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    new = 'bcdEfghIjklmnOpqrstUvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZA'
    result = ''
    for c in s:
        if c in orig:
            c = new[orig.index(c)]
        result += c
    return result
"
Aggregate events with start and end times with Pandas,"df = pd.DataFrame({'start': ['2015-01-05', '2015-01-10', '2015-01-11'], 'end': ['2015-01-07', '2015-01-15', '2015-01-13'], 'value': [3, 4, 5]})
df['end'] = pd.to_datetime(df['end'])
df['start'] = pd.to_datetime(df['start'])
df['dummy'] = 1
"
Parsing an escape character in Python,"re.findall(r'""(?:\\.|[^""\\])*""', str)
"
Building a list of monthly totals,"from collections import Counter
totals = Counter(widget.datetime.month for widget in widgets)
"
"Is it possible to scrap images from a webpage, convert them to numbers and save them to a file?","import requests
import lxml, lxml.html

r = requests.get('http://www.lebanon-lotto.com/lebanese-loto-results/draw-number/1154.php')

html = lxml.html.fromstring(r.text)

imgs =  html.cssselect('img')

for x in imgs:
    src = x.attrib['src']
    #print src
    if 'lotto_balls_gray' in src:
        print src[-6:-4]
"
Formatting datetime in python,">>> import datetime
>>> now = datetime.datetime.now()
>>> datetime.datetime.strftime(now, '%m/%d/%Y')
'01/16/2014'
>>> datetime.datetime.strftime(now, '%H:%M:%S')
'14:18:16'
>>> datetime.datetime.strftime(now, '%I:%M:%S')
'02:18:16'
"
Calculating the Nth Sequence of Length M in Python,">>> test_seq = itertools.izip(itertools.count(), seq(set((1, 2, 3))))
>>> for i in range(10):
...     next(test_seq)
... 
(0, (1,))
(1, (2,))
(2, (3,))
(3, (1, 1))
(4, (1, 2))
(5, (1, 3))
(6, (2, 1))
(7, (2, 2))
(8, (2, 3))
(9, (3, 1))
"
How to get n elements of a list not contained in another one?,"print(list(set(a).difference(b))[:3])
[3, 5, 7]
"
Accumulate items in a list of tuples,">>> from itertools import accumulate
>>> lst = [(0, 0), (2, 3), (4, 3), (5, 1)]
>>> list(zip(*map(accumulate, zip(*lst))))
[(0, 0), (2, 3), (6, 6), (11, 7)]
"
How can I reload objects in my namespace in ipython,"import imp
imp.reload(module)"
get keys correspond to a value in dictionary,"dict((v, k) for k, v in map.items())"
Iteration Through tuple of dictionaries in Python,"for d in reversed(Tuple):
    if ""2"" in d:
        Dict[""2""] = d[""2""]
        break # last dict in Tuple that has the key
"
"Surface where height is a function of two functions, and a sum over the third","X, Y = np.meshgrid(x, y)
ax.plot_surface(X, Y, f)
plt.show()
"
What filter do I need? Want to keep high frequency values only,">>> list(chain.from_iterable(repeat(Counter(x).most_common(1)[0][0],5) for x in grouper(s,5)))
[2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3]
"
LearnPythonTheHardWay Exercise 50,"render = web.template.render('templates/')

class index:
    def GET(self):
        greeting = ""Hello World""
        return render.index(greeting=greeting)
"
extract digits in a simple way from a python string,">>> import re
>>> s = '300 gm'
>>> re.findall('\d+', s)
['300']
>>> s = '300 gm 200 kgm some more stuff a number: 439843'
>>> re.findall('\d+', s)
['300', '200', '439843']
"
How to add n consecutive element in list,"import itertools as it
s = [l[n-i::n] for i in range(n)]
[sum(r) for r in it.izip_longest(*s, fillvalue=0)]
"
PyYAML parse into arbitary object,"def wrap(datum):
  # don't wrap strings
  if isinstance(datum, basestring):
    return datum
  # don't wrap numbers, either
  try: return datum + 0
  except TypeError: pass
  return Fourie(datum)

class Fourie(object):
  def __init__(self, data):
    self._data = data
  def __getattr__(self, n):
    return wrap(self._data[n])
  def __call__(self, n):
    return wrap(self._data[n])
"
python remove info from readlines() that doesn't match a list,"word_list = ['hamburger', 'cow', 'meat']
with open('afile.html', encoding='utf-8-sig') as f:
    lines = f.readlines()
for line in lines:
    for word in word_list:
        if word in line:
            print(line)
            break
"
"stripping away code in python using ""re.sub""","print ''.join(re.findall('[A-Za-z]', decrypt))
"
How to add an extra column to an numpy array,"import numpy as np
N = 10
a = np.random.rand(N,N)
b = np.zeros((N,N+1))
b[:,:-1] = a
"
Get Filename Without Extension in Python,os.path.splitext(filename)[0]
Removing digits from a file,"import fileinput
import string

for line in fileinput.input(""your_file.txt"", inplace=True):
    print line.translate(None, string.digits),
"
"How to arrange a dict by value, and back again?","arrange_func = lambda item: item.particle
data.sort(key=arrange_func)
d = {}
for particle, sprockets in itertools.groupby(data, key=arrange_func):
    d[particle] = {""X"":[], ""Frame"":[]}
    for sprocket in sprockets:
        d[particle][""X""].append(sprocket.x)
        d[particle][""Frame""].append(sprocket.frame)

print d
"
Use python to find html or js tags. (regex?),"from bs4 import BeautifulSoup, Tag

l = ['test', 'test <br>', '<br>']
for item in l:
    soup = BeautifulSoup(item, 'html.parser')
    print item, any(isinstance(element, Tag) for element in soup)
"
Reindexing and filling NaN values in Pandas,"# unstack to wide, fillna as 0s
df_wide = df_indexed.unstack().fillna(0)
# stack back to long
df_long = df_wide.stack()
# change 0s to max using groupby.
df_long['ind_var'] = df_long['ind_var'].groupby(level = 0).transform(lambda x: x.max())
df_long['loc_var'] = df_long['loc_var'].groupby(level = 1).transform(lambda x: x.max())
print df_long
"
Assign variable name to list in if statement python,"v = (item for item in propadd if item[0]==row1[8] and harversine(custx,custy,item[2],item[3])<1500)
k = (item for item in custadd if item[0]==row1[4])
m = (item for item in numlist if re.search(r""^[0-9]+(?=\s)"",row1[0]) is not None and item[0]==re.search(r""^[0-9]+(?=\s)"",row1[0]).group())
for gen in (v, k, m):
    l = list(gen)
    if len(l) == 1:
        row1[1] = l[0][1]
        row1[2] = l[0][2]
        break
"
Recreating Web Audio API GainNode behaviour,"from pydub import AudioSegment
from pydub.utils import ratio_to_db, db_to_float

sound = AudioSegment.from_file('/your/file.wav')

# this is roughly -6.0
half_amplitude_in_db = ratio_to_db(0.5)

# these are all roughly the same result
half_amplitude1 = sound.apply_gain(half_amplitude_in_db)
half_amplitude2 = sound.apply_gain(-6.0)
half_amplitude3 = sound - 6.0

# Assuming 16-bit sound, that’s ~90dB dynamic range.
# so -45dB is half way to silent.
# Note: that is A LOT quieter
half_way_to_silent = sound - 45.0
"
Creating a program that prints true if three words are entered in dictionary order,"if first.lower() <= second.lower() <= third.lower():
    print(True)
"
Generate a sequence keeping previous element in next element python,"def sequence(x, N):
    i = 0
    result = 1
    while i < N:
        result *= (x + i)
        i += 1
        yield result

>>> list(sequence(5, 10))
[5, 30, 210, 1680, 15120, 151200, 1663200, 19958400, 259459200, 3632428800L]
"
Python regular expression: get result without the search string used,"StartTime = re.findall(r""StartTime (\d\.\d{2})"", text)
"
Decimal not getting while dividing,"from __future__ import division
amount = 1000
people = 3
average = amount/people
print average
"
python sparse csr matrix: how to serialize it,"In [3]: row = np.array([0, 0, 1, 2, 2, 2])   
In [4]: col = np.array([0, 2, 2, 0, 1, 2])
In [5]: data = np.array([1, 2, 3, 4, 5, 6])
In [6]: a = sparse.csr_matrix((data,(row,col)), shape=(3,3))

In [7]: a.data
Out[7]: array([1, 2, 3, 4, 5, 6])    
In [8]: a.indices            # csr has coor in indices and indptr
Out[8]: array([0, 2, 2, 0, 1, 2])
In [9]: a.indptr
Out[9]: array([0, 2, 3, 6])

In [10]: ac=a.tocoo()
In [11]: ac.data
Out[11]: array([1, 2, 3, 4, 5, 6])
In [12]: ac.col
Out[12]: array([0, 2, 2, 0, 1, 2])
In [13]: ac.row
Out[13]: array([0, 0, 1, 2, 2, 2])
"
count the occurrences of a list item,"[[x, l.count(x)] for x in set(l)]"
list of methods for python shell?,">>> class X(object):
...   @classmethod
...   def clame(cls): pass
...   @staticmethod
...   def stame(): pass
...   def meth(self): pass
...   def __init__(self):
...     self.lam = lambda: None
...     self.val = 23
... 
>>> x = X()
>>> dir(x)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__',
 '__getattribute__', '__hash__', '__init__', '__module__',
 '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__',
 '__sizeof__', '__str__', '__subclasshook__', '__weakref__',
 'clame', 'lam', 'meth', 'stame', 'val']
"
"Using ARPACK solving eigenvalueproblem, but getting inconsistent results with Matlab","import numpy as np
from scipy.sparse import spdiags
from scipy.sparse.linalg import eigs

# create banded matrix
n = 30
A = spdiags((np.ones((n,1))*[-1,2,-1]).T, [-1,0,1], n, n).todense()
A[0,8] = 30

# EIGS: k closest eigenvalues to sigma
k = 10
sigma = 3.6766133
D = eigs(A, k, sigma=sigma, which='LM', return_eigenvectors=False)
D = D[::-1]
for x in D:
    print '{:.16f}'.format(x)

# EIG
ev,_ = np.linalg.eig(A)
idx = np.argsort(np.abs(ev - sigma))
ev = ev[idx[:k]]
for x in ev:
    print '{:.16f}'.format(x)
"
create column names by joining two labels of different levels with pandas,">>> df_p.columns = ['_'.join(c[::-1]) for c in df_p.columns]
>>> df_p
       col1_l  col2_l  col1_n  col2_n
index                                
0          12      32       0       1
1          16      47       1       1
2          92      22       0       0
3          77      14       0       1

[4 rows x 4 columns]
"
"What's the most elegant, Pythonic way to deduplicate two sequential records in a CSV and retaining one record?","import csv
import itertools

with open(""dedup.csv"", newline="""") as fp_in, open(""dedup_out.csv"", ""w"", newline="""") as fp_out:
    reader = csv.DictReader(fp_in)
    writer = csv.DictWriter(fp_out, reader.fieldnames)
    writer.writeheader()
    for key, group in itertools.groupby(reader, key=lambda row: row[""ORIG""]):
        group = list(group)
        if len(group) == 2:
            group = [row for row in group if not float(row[""SEQ_TIME""]) == 0]
        writer.writerows(group)
"
Mean values depending on binning with respect to second variable,">>> n, _ = np.histogram(x, bins=xbins)
>>> sy, _ = np.histogram(x, bins=xbins, weights=y)
>>> sy2, _ = np.histogram(x, bins=xbins, weights=y*y)
"
Python get normal HEX format for MAC-Adress,"readableMACaddress = '-'.join('%02X' % ((myMAC >> 8*i) & 0xff) for i in reversed(xrange(6)))
"
Python regex findall unexpected output,"print re.findall(r""protocol': (.*?),"", strevent)
"
Python more functions,"def line_to_rainfall(line):
    cols = line.split("","")
    month, num_days = int(cols[0]), int(cols[1])
    daily_rainfalls = [float(x) for x in cols[2:2+num_days]]
    return month, daily_rainfalls


def print_monthly_totals (input_csv_filename):
    data = open(input_csv_filename).readlines()
    print('Rainfall totals for each month')
    for line in data:
        month, daily_rainfalls = line_to_rainfall(line)
        total_rainfall = sum(daily_rainfalls)
        print('Month {:2}: {:.1f}'.format(month, total_rainfall))
"
Python Selenium Get HTML Text in Variables,"//p[contains(., 'Film')][1]
"
implementing custom hashing method,">>> import random
>>> y = random.randrange(2**64) # some 64-bit int
>>> y
17364376918466400468
>>> yt = y * 0.6
>>> yt
1.041862615107984e+19
>>> yt - int(yt)
0.0
"
How to extract text from html conditionally in beautifulsoup,"from lxml import html

ms = '''<tr>
            <td>
             <strong>
              Location:
             </strong>
            </td>
            <td colspan=""3"">
             90 km S. of Prince Rupert
            </td>
            <mytag>
            Hello World
            </mytag>
           </tr>'''

mytree = html.fromstring(ms)  #this creates a 'tree' in memory
for e in mytree.iter():       # iterate through the elements
    if e.tag == 'td':         #focus on the elements that are td elements
        if 'location' in e.text_content().lower(): # if location is in the text of a td
            for sib in e.itersiblings(): # find all the siblings of the td
                sib.text_content()   # print the text
"
Iterate through a List Multiple times Cyclically starting from the Matching Index,"for i, val in enumerate(lst):
    if text in val:
        desired = [ lst[ j%n] for j in range(i+1, i+1+x)] 
"
Equivalent of os.getpardir()?,"os.path.abspath(os.path.pardir)
"
Reading a file with unproperly marked dictionaries,"while chunk:
    chunk = f.read(120)
    ss = ''.join((prec,chunk))
    ecr.append('\n\n------------------------------------------------------------\nss   == %r' %ss)
    mat_dic = None
    for mat_dic in dicreg.finditer(ss):
        ............
        ...............
    if mat_dic:
        prec = ss[mat_dic.end():]
    else:
        prec += chunk
"
What would be a good way to pull the coefficients out of a string in Python?,"eq = 'x^10+6x^4-5x^2+x-11'

patt = r'(?P<sign>[-+]?)(?P<coeff>\d*)(?P<x>x?)(?:\^(?P<exp>\d+))?'
rgx = re.compile(patt)

eq_parts = [m.groupdict() for m in rgx.finditer(eq)][0:-1]

for eqp in eq_parts:
    print eqp
"
Create new file for each instance Python,"for data_type in my_classified_lines:
    outref = open('c:\\directory\\' + data_type + '.txt', 'w')
    out_list =[ ';'.join([item for item in my_classified_lines[data_type'])]
    outref.writelines(outlist) # should be only one line
    outref.close()
"
Python yield vs Ruby yield,"def do_stuff(val):
    print(""Started execution of do_stuff()"")

    yield val + 3
    print(""Line after 'yield val + 3'"")
    yield val + 4
    print(""Line after 'yield val + 4'"")

    print(""Finished executing do_stuff()"")


my_gen = do_stuff(10)

val = next(my_gen)    
print(""--received {} from generator"".format(val))
"
Python equivalent for HashMap,">>> a = dict(one=1, two=2, three=3)
>>> b = {'one': 1, 'two': 2, 'three': 3}
>>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
>>> d = dict([('two', 2), ('one', 1), ('three', 3)])
>>> e = dict({'three': 3, 'one': 1, 'two': 2})
>>> a == b == c == d == e
True
"
Sum over rows in scipy.sparse.csr_matrix,"col = range(5)
row = [0, 1, 1, 0, 1]
dat = [1, 1, 1, 1, 1]
S = csr_matrix((dat, (row, col)), shape=(2, 5))
result = S * A
# check that the result is another sparse matrix
print type(result)
# check that the values are the ones we want
print result.toarray()
"
Python: update a list of tuples... fastest method,"self.sorted_data.extend(value, recid 
                        for recid, value in updated_records.iteritems())
self.sorted_data.sort()
"
Dictionary of Lists to CSV in Python,"from itertools import izip_longest
d = {1: [12, 13, 14, 15], 2: [16, 17, 18], 3: [19, 20, 21, 22]}
labels = d.keys()
rows = izip_longest(*d.values())
"
How to get the variable names from the string for the format() method,"from string import Formatter

names = [fn for _, fn, _, _ in Formatter().parse(yourstring) if fn is not None]
"
print out an indented node tree in python from a list of list,"tree_info = [['5', 'Child 2', '3'],
             ['1', 'Grandparent', 'root'],
             ['4', 'Child 1', '3'], 
             ['3', 'Parent 2', '1'],
             ['2', 'Parent 1', '1'],
             ['6', 'Child 3', '2']
             ]

children = {}
names = {}

for node_id, name, parent in tree_info:
    children.setdefault(parent, []).append(node_id)
    names[node_id] = name

q = [('root', -1)]
while q:
    parent, depth = q.pop()
    if parent != 'root':
        print(' ' * depth + names[parent])

    if parent in children:
        for child in children[parent]:
            q.append((child, depth+1))
"
How to make two objects have the same id in python?,"from collections import namedtuple
def Point(x, y, _Point=namedtuple('Point', 'x y'), _cache={}):
    return _cache.setdefault((x, y), _Point(x, y))

>>> Point(1, 2)
Point(x=1, y=2)
>>> id(Point(1, 2)) == id(Point(1, 2))
True
"
assigning value to a subscripted element of queryset does not work,"   cursor.execute(""""""select CUSTNBR,
                             FROMDATE,
                             sum(DECTHERMS) as DECTHERMS,
                             max(PRICE) as PRICE,
                             sum(SALESDLRS) as SALESDLRS,
                             sum(MCFS) as MCFS
                    from LQPPNATGAS
                    where CUSTNBR = ? and 
                          FROMDATE <> '20000000' 
                    group by CUSTNBR, FROMDATE """""",str(cust_number))


    row = cursor.fetchone()
    while row:
        if str(row.FROMDATE)[0:4] >= str(oldest_year):

            b = Usage.objects.filter(user_id=user_id,from_date=row.FROMDATE)[0]

            print >> sys.stderr , ""before b.decatherms=""+str(b.decatherms)

            b.decatherms = row.DECTHERMS
            b.price = row.PRICE
            b.sales_dollars = row.SALESDLRS
            b.mcf = row.MCFS
            b.save() #(update_fields=['decatherms','price','sales_dollars','mcf'])

            print >> sys.stderr , ""after b.decatherms=""+str(b.decatherms)

        row = cursor.fetchone()
"
python subprocess: check to see if the executed script is asking for user input,"import subprocess

child = subprocess.Popen(['python2', 'simple.py'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)

for line in iter(child.stdout.readline, """"):
    print(line)
    if ""name"" in line:
        child.stdin.write(""foo\n"")
    elif ""age"" in line:
        child.stdin.write(""100\n"")
"
Python For In Loop Matrix for User Input,">>> names_matrix = ([['lname', 'fname', 'city', 'state', 'zipcode'],
...              ['Zdolfalos', 'Johnson', 'Terrell', 'Wilson', 'Key', 'Smith',
...               'Alfonso'],
...              ['Fred', 'Malcom', 'Monkey', 'Wilson', 'LeDoor', 'Jim Bob', 'Ralph'],
...              ['Charlotte', 'Monroe', 'Broken Pine', 'Hogwart', 'Spot in Road',
...               'Denver','Gastonia'],
...              ['NC', 'NC', 'SC', 'VA', 'AL', 'NC', 'NC' ],
...              ['28210', '28337', '28974', '27457', '36827', '28037', '28559'] ])
>>> fixed_names = zip(*names_matrix[1:])
[('Zdolfalos', 'Fred', 'Charlotte', 'NC', '28210'), ('Johnson', 'Malcom', 'Monroe', 'NC', '28337'), ('Terrell', 'Monkey', 'Broken Pine', 'SC', '28974'), ('Wilson', 'Wilson', 'Hogwart', 'VA', '27457'), ('Key', 'LeDoor', 'Spot in Road', 'AL', '36827'), ('Smith', 'Jim Bob', 'Denver', 'NC', '28037'), ('Alfonso', 'Ralph', 'Gastonia', 'NC', '28559')]
>>> userFirstName = 'Fred'
>>> userLastName = 'Zdolfalos'
>>> for row in fixed_names:
...     if userLastName in row and userFirstName in row:
...         print(list(row))
...     else:
...         print('User Not Found!')
...
['Zdolfalos', 'Fred', 'Charlotte', 'NC', '28210']
"
How can I sort list by second element without using lambda?,">>> names = ['john', 'peter', 'olive']
>>> order = [2, 1, 0]

>>> decorated = zip(order, names)
>>> decorated
[(2, 'john'), (1, 'peter'), (0, 'olive')]

>>> sorted_decorated = sorted(decorated)
>>> sorted_decorated
[(0, 'olive'), (1, 'peter'), (2, 'john')]

>>> undecorated = zip(*sorted_decorated)[1]
>>> undecorated
('olive', 'peter', 'john')
"
Django dynamic model fields,"import eav
from app.models import Patient, Encounter

eav.register(Encounter)
eav.register(Patient)
Attribute.objects.create(name='age', datatype=Attribute.TYPE_INT)
Attribute.objects.create(name='height', datatype=Attribute.TYPE_FLOAT)
Attribute.objects.create(name='weight', datatype=Attribute.TYPE_FLOAT)
Attribute.objects.create(name='city', datatype=Attribute.TYPE_TEXT)
Attribute.objects.create(name='country', datatype=Attribute.TYPE_TEXT)

self.yes = EnumValue.objects.create(value='yes')
self.no = EnumValue.objects.create(value='no')
self.unkown = EnumValue.objects.create(value='unkown')
ynu = EnumGroup.objects.create(name='Yes / No / Unknown')
ynu.enums.add(self.yes)
ynu.enums.add(self.no)
ynu.enums.add(self.unkown)

Attribute.objects.create(name='fever', datatype=Attribute.TYPE_ENUM,\
                                       enum_group=ynu)

# When you register a model within EAV,
# you can access all of EAV attributes:

Patient.objects.create(name='Bob', eav__age=12,
                           eav__fever=no, eav__city='New York',
                           eav__country='USA')
# You can filter queries based on their EAV fields:

query1 = Patient.objects.filter(Q(eav__city__contains='Y'))
query2 = Q(eav__city__contains='Y') |  Q(eav__fever=no)
"
Output a dict in python,"class Etudiant(object):
    def __init__(self, numero):
        self.numero = numero
        self._cours = []
    def addCours(self, cours):
        self._cours.append(cours)
    def cours(self, cours):
        return cours in self._cours
    def __repr__(self):
        return '{}: {}'.format(self.numero, self._cours)
"
Preventing a class's function attributes from being passed self as the first arg,"class A:
    def __init__(self, callback):
        self.callback(1, 2)

    # now it won't get passed self
    callback = staticmethod(callback)
"
"Python Class For Reading List Element ,__str__ and class questions","class read_log:
    def __init__(self, exit_status, stdin, stdout, stderr):
        self.exit_status = exit_status
        self.tuple_list = (stdin, stdout, stderr)
"
Python - Compress Ascii String,"In [22]: rings = '''
   ....:     Three Rings for the Elven-kings under the sky, 
   ....:     Seven for the Dwarf-lords in their halls of stone, 
   ....:     Nine for Mortal Men doomed to die, 
   ....:     One for the Dark Lord on his dark throne 
   ....:     In the Land of Mordor where the Shadows lie. 
   ....:     One Ring to rule them all, One Ring to find them, 
   ....:     One Ring to bring them all and in the darkness bind them 
   ....:     In the Land of Mordor where the Shadows lie.'''

In [23]: comptest(rings)                       
original length: 410
zlib compressed length: 205
bz2 compressed length: 248
"
Can't extract text from html using SoupStrainer,"soup.find_all(href=re.compile(""product_info.php?""))
"
remove unnecessary comma from python dict,"','.join(value for value in d.itervalues() if value)
"
How to extract from this list of tuples and convert into this dictionary?,"def convertToDict(my_list):
    result_dict = {}
    for item in my_list:
        result_dict.setdefault(item[0], []).append(item[1])
    return result_dict

print convertToDict(my_list)
# {'id2': ['name3', 'name4'], 'id1': ['name1', 'name2']}
"
print out binary representation of c type in python,">>> inp = '0x0202020202UL'
>>> format(int(inp[:-2], 16), 'b')
'1000000010000000100000001000000010'
# Using `str.rstrip`, This will work for any hex, not just UL
>>> format(int(inp.rstrip('UL'), 16), 'b')
'1000000010000000100000001000000010'
"
Unpack a list so the first element is assigned the result of a function operated on the following elements,"i = [""user_arr"", 100, True]
locals()[i[0]] = prev_def_func(*i[1:])
print(user_arr)
"
Getting cumulative counts of word frequencies founds in a documents,"from pandas import *
import pandas as pd

fdists = [(u'seeing', 2), (u'said.', 2), (u'one', 2), (u'death', 2), (u'entertainment',   2), (u'it\u2019s', 2), (u'weiss', 2), (u'read', 2), (u'\u201cit', 1), (u'shot', 1), (u'show\u2019s', 1), (u'people', 1), (u'dead,\u201d', 1), (u'bloody', 1)]
fdists2 = [(u'seeing', 3), (u'said.', 4), (u'one', 2), (u'death', 2), (u'entertainment',   2), (u'it\u2019s', 2), (u'weiss', 2), (u'read', 2)]
fdists += fdists2

df = DataFrame(data = fdists, columns = ['word','count'])
df= DataFrame([{'word': k, 'count': (v['count'].sum())} for k,v in df.groupby(['word'])], columns = ['word','count'])

Sorted = df.sort(['count','word'], ascending = [0,1])
print Sorted[:30]

             word  count
8           said.      6
9          seeing      5
2           death      4
3   entertainment      4
4            it’s      4
5             one      4
7            read      4
12          weiss      4
0          bloody      1
1          dead,”      1
6          people      1
10           shot      1
11         show’s      1
13            “it      1
"
Replacing a list item and returning a copy of the list (in one line) with Python,"[new_value if i == replace_index else element
 for i, element in enumerate(my_list)]
"
List of list increment if exists otherwise extend,"from collections import defaultdict

l = [
['a', 1],
['b',2],
['c',1],
['a', 2],
['c', 5]
]

d = defaultdict(int)
for key, value in l:
    d[key] += value

print(d.items())
"
Slicing pandas dataframe by column numbers I don't want,"In [10]: ic = lambda x: pd.Int64Index(np.arange(x))

In [11]: df1.iloc[:,~ic(len(df1.columns)).isin([2,4])]
Out[11]: 
   a   b  f  j
0  0  10  1  1
1  1  11  1  1
2  2  12  1  1
3  3  13  2  2
4  4  14  2  2
5  5  15  2  2
6  6  16  3  3
7  7  17  3  3
8  8  18  3  3
9  9  19  3  3

[10 rows x 4 columns]
"
how to allow Tkinter to generate a listbox from list input,"import Tkinter as tk

def populateListbox(lstt):
    listbox.insert(""end"", *lstt)

root = tk.Tk()
listbox = tk.Listbox(root)
listbox.pack()
lst = [""one"", ""two"", ""three"", ""four""]
btn = tk.Button(root, text=""Populate listbox"", command = lambda: populateListbox(lst))
btn.pack()

root.mainloop()
"
How to calculate cosine similarity given 2 sentence strings? - Python,"import re, math
from collections import Counter

WORD = re.compile(r'\w+')

def get_cosine(vec1, vec2):
     intersection = set(vec1.keys()) & set(vec2.keys())
     numerator = sum([vec1[x] * vec2[x] for x in intersection])

     sum1 = sum([vec1[x]**2 for x in vec1.keys()])
     sum2 = sum([vec2[x]**2 for x in vec2.keys()])
     denominator = math.sqrt(sum1) * math.sqrt(sum2)

     if not denominator:
        return 0.0
     else:
        return float(numerator) / denominator

def text_to_vector(text):
     words = WORD.findall(text)
     return Counter(words)

text1 = 'This is a foo bar sentence .'
text2 = 'This sentence is similar to a foo bar sentence .'

vector1 = text_to_vector(text1)
vector2 = text_to_vector(text2)

cosine = get_cosine(vector1, vector2)

print 'Cosine:', cosine
"
How to get a common integer in python from a float list?,"#!/usr/bin/env python3

from fractions import Fraction, gcd
from functools import reduce

def lcm(a, b):
    return a * b // gcd(a, b)

def common_integer(*numbers):
    fractions = [Fraction(n).limit_denominator() for n in numbers]
    multiple  = reduce(lcm, [f.denominator for f in fractions])
    ints      = [f * multiple for f in fractions]
    divisor   = reduce(gcd, ints)
    return [int(n / divisor) for n in ints]
"
Recursion in function causing return variable to equal 'None',"def getKey():
    print(""Enter the key you want to use to decrypt/encrypt the message"")
    key = int(input()) # key input
    if key >= 1 and key <= 26: #checking if key is in between range
        return key #giving back the key
    else: # this should run whenever the input is invalid
        print (""The key must be inbetween 1 and 26"")
        return getKey() # Recursion, to restart the function
"
Selenium Python - Access next pages of search results,"from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

driver = webdriver.Firefox()
url = 'http://www.nice.org.uk/Search.do?searchText=bevacizumab&newsearch=true#/search/?searchText=bevacizumab&mode=&staticTitle=false&SEARCHTYPE_all2=true&SEARCHTYPE_all1=&SEARCHTYPE=GUIDANCE&TOPICLVL0_all2=true&TOPICLVL0_all1=&HIDEFILTER=TOPICLVL1&HIDEFILTER=TOPICLVL2&TREATMENTS_all2=true&TREATMENTS_all1=&GUIDANCETYPE_all2=true&GUIDANCETYPE_all1=&STATUS_all2=true&STATUS_all1=&HIDEFILTER=EGAPREFERENCE&HIDEFILTER=TOPICLVL3&DATEFILTER_ALL=ALL&DATEFILTER_PREV=ALL&custom_date_from=&custom_date_to=11-06-2014&PAGINATIONURL=%2FSearch.do%3FsearchText%40%40bevacizumab%26newsearch%40%40true%26page%40%40&SORTORDER=BESTMATCH'
driver.get(url)

page_number = 1
while True:
    try:
        link = driver.find_element_by_link_text(str(page_number))
    except NoSuchElementException:
        break
    link.click()
    print driver.current_url
    page_number += 1
"
Code optimization - number of function calls in Python,"import pandas as pd

def groupby_solution(X, nbrs):
    i, j = np.transpose([[k, vi] for k, v in nbrs.items() for vi in v])
    return pd.groupby(pd.DataFrame(X[j]), i).sum().values

np.allclose(original_solution(X, nbrs),
            groupby_solution(X, nbrs))
# True
"
function as constructor parameter in python,"class c(object):
    def __init__(self, fun):
        self.fun = fun
        self.fun()
"
multiply numpy ndarray with 1d array along a given axis,"import numpy as np

# Given axis along which elementwise multiplication with broadcasting 
# is to be performed
given_axis = 1

# Create an array which would be used to reshape 1D array, b to have 
# singleton dimensions except for the given axis where we would put -1 
# signifying to use the entire length of elements along that axis  
dim_array = np.ones((1,a.ndim),int).ravel()
dim_array[given_axis] = -1

# Reshape b with dim_array and perform elementwise multiplication with 
# broadcasting along the singleton dimensions for the final output
b_reshaped = b.reshape(dim_array)
mult_out = a*b_reshaped
"
pythonic way to hex dump files,"with open('file.dat', 'rb') as f:
    chunks = iter(lambda: f.read(32), b'')
    hexlines = map(binascii.hexlify, chunks)
"
Parsing an html page using beautifulsoup/python,"from bs4 import BeautifulSoup

data = """"""<span id= ""here"" style>
 <br>
 <b> Post Primary</b>
 <b>school<b>
 <br>
 <b>Roll number: </b>b>
 ""60000""
 <br>
 <b>Principal</b>
 ""Paul Ince""
 <br>
 <b>Enrolment:</b>
 ""Boys; 123 Girls: 102   (2012/13)""
 <br>
 <b>Ethos:</b>
 ""Catholic  &nbsp ""
 <b>Catchment:</b>
 ""North Inner CIty ""
 <br>
 <b>Fees:</b>
 "" No ""
</span>""""""

soup = BeautifulSoup(data)

keys = ['Enrolment', 'Ethos', 'Fees']

for element in soup('b'):
    if element.text[:-1] in keys:
        print element.text + element.next_sibling.strip()
"
Python recursion and return statements,"return self.insert(key, root=tmp.left)
"
Fastest Way to Sum Individual Columns,"c = [1,1,1,1,0,0,0,1,1,1,1,0,0,0]
d = [0,0,0,1,1,1,1,0,0,0,1,1,1,1]
e = [0,0,0,1,1,1,1,0,0,0,1,1,1,1]
m = [0,1,1,0,1,1,0,0,1,1,0,1,1,0]
p = [1,1,0,0,0,1,1,1,1,0,0,0,1,1]
arr = np.row_stack([c,d,e,m,p])
"
Similarities between two csv files,"with open(""list.csv"", ""U"") as file1, open(""example.csv"", ""rb"") as file2, open(""output.csv"", ""wb+"") as file3:
    reader1 = csv.reader(file1)
    reader2 = csv.reader(file2)
    writer = csv.writer(file3)

    reader1_rows = [row for row in reader1]
    reader2_rows = [row for row in reader2]

    for rowA, rowB in zip(reader1_rows, reader2_rows):
        for word in rowA:
            for item in (item for item in rowB if word in item):
                writer.writerow([word, item])
"
Deleting all files in a directory with Python,"import os

filelist = [ f for f in os.listdir(""."") if f.endswith("".bak"") ]
for f in filelist:
    os.remove(f)
"
How can I remove a column from a sparse matrix efficiently?,"from scipy import sparse
from bisect import bisect_left

class lil2(sparse.lil_matrix):
    def removecol(self,j):
        if j < 0:
            j += self.shape[1]

        if j < 0 or j >= self.shape[1]:
            raise IndexError('column index out of bounds')

        rows = self.rows
        data = self.data
        for i in xrange(self.shape[0]):
            pos = bisect_left(rows[i], j)
            if pos == len(rows[i]):
                continue
            elif rows[i][pos] == j:
                rows[i].pop(pos)
                data[i].pop(pos)
                if pos == len(rows[i]):
                    continue
            for pos2 in xrange(pos,len(rows[i])):
                rows[i][pos2] -= 1

        self._shape = (self._shape[0],self._shape[1]-1)
"
"Iterate through a loop to change a conditional statement, python","with some_open_method(filename) as spreadsheet:
    spreadsheet.writelines('%s\n\n\n\n\n' % splitted)
"
Seaching .csv for unwanted string and delete,"import csv
import re

with open('input.csv', 'r') as f_input, open('output.csv', 'wb') as f_output:
    csv_input = csv.reader(f_input, skipinitialspace=True)
    csv_output = csv.writer(f_output)
    keep = re.compile(r'[^0-9a-zA-Z\s,.:]')

    for cols in csv_input:
        cols = [keep.sub('', col) for col in cols]
        csv_output.writerow(cols)
"
How to make a random but partial shuffle in Python?,"import random

def randparts(l):
    n = len(l)
    s = random.randint(0, n-1) + 1
    if s >= 2 and n - s >= 2: # the split makes two valid parts
        yield l[:s]
        for p in randparts(l[s:]):
            yield p
    else: # the split would make a single cycle
        yield l

def shuffle_n(s, n):
    idx = range(len(s))
    random.shuffle(idx)
    mapping = dict((x[i], x[i-1])
        for i in range(len(x))
        for x in randparts(idx[:n]))
    return ''.join(s[mapping.get(x,x)] for x in range(len(s)))
"
Python - Intersection of two lists of lists,"In [1]: l1 = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4], [5,9]]

In [2]: l2 = [[1, 2], [4], [5, 6, 2], [1, 2], [3], [4], [5,6], [1,2]]

In [3]: [list(x) for x in set(tuple(x) for x in l1).intersection(set(tuple(x) for x in l2))]
Out[3]: [[1, 2], [5, 6, 2], [3], [4]]
"
"How to merge Lists in Python?Merging python lists (0,1,2) & (A,B,C) to get (0A, 1B, 2C)",">>> lists = (A, B)
>>> [''.join(x) for x in zip(*lists)]
['0A', '1B', '2C', '3D']
"
Bin timestamp into custom periods,"def f(x, periods=periods):
    for k, v in periods.items():
        if x.hour >= v[0].hour and x.hour < v[1].hour:
            return k
    return 'unknown_period'
"
Split list into dictionary,"import itertools

def limit_files(file_list, at_a_time=10):
    d, r = divmod(len(file_list), at_a_time)
    num_keys = d + 1 if r > 0 else d 

    chunks = itertools.izip_longest(*([iter(x)] * at_a_time))
    return dict((x, y) for x, y in enumerate(chunks))
"
Getting certificate chain with Python 3.3 SSL module,"import socket

from ssl import wrap_socket, CERT_NONE, PROTOCOL_SSLv23
from ssl import SSLContext  # Modern SSL?
from ssl import HAS_SNI  # Has SNI?

from pprint import pprint

def ssl_wrap_socket(sock, keyfile=None, certfile=None, cert_reqs=None,
                    ca_certs=None, server_hostname=None,
                    ssl_version=None):
    context = SSLContext(ssl_version)
    context.verify_mode = cert_reqs

    if ca_certs:
        try:
            context.load_verify_locations(ca_certs)
        # Py32 raises IOError
        # Py33 raises FileNotFoundError
        except Exception as e:  # Reraise as SSLError
            raise SSLError(e)

    if certfile:
        # FIXME: This block needs a test.
        context.load_cert_chain(certfile, keyfile)

    if HAS_SNI:  # Platform-specific: OpenSSL with enabled SNI
        return (context, context.wrap_socket(sock, server_hostname=server_hostname))

    return (context, context.wrap_socket(sock))

hostname = 'www.google.com'
print(""Hostname: %s"" % (hostname))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((hostname, 443))

(context, ssl_socket) = ssl_wrap_socket(s,
                                       ssl_version=2, 
                                       cert_reqs=2, 
                                       ca_certs='/usr/local/lib/python3.3/dist-packages/requests/cacert.pem', 
                                       server_hostname=hostname)

pprint(ssl_socket.getpeercertchain())

s.close()
"
How to efficiently merge multiple list of different length into a tree dictonary in python,"def treeify(seq):
    ret = {}
    for path in seq:
        cur = ret
        for node in path:
            cur = cur.setdefault(node, {})
    return ret
"
Python's re module - saving state?,"def find_the_right_match():
  # now 'm' is a stateful regex
  m = re.match('foo (\w+) bar (\d+)', line)
  if m:
    # do stuff with m.group(1) and m.group(2)
    return # <== exit nested function only
  m = re.match('baz whoo_(\d+)', line)
  if m:
    # do stuff with m.group(1)
    return

find_the_right_match()
"
BIT_COUNT in SQLAlchemy,">>> session.query(""id"", ""name"", ""thenumber12"").\
...         from_statement(""SELECT id, name, 12 as ""
...                 ""thenumber12 FROM users where bit_count(column&bitmask)<:the_val"").\
...                 params(the_val=5).all()
"
Can Python's map function call object member functions?,"import operator
get_bar = operator.methodcaller('get_bar')
for bar in map(get_bar, foos):
"
How to rename a specific word in a file name using python,"new_filename = ""_"".join([file_names.get(k, k) for k in filename_noext.split('_')])
"
What is the best way to get a semi long unique id (non sequential) key for Database objects,"def chaffify(val, chaff_size = 150, chaff_modulus = 7):
    """""" Add chaff to the given positive integer.
    chaff_size defines how large the chaffing value is; the larger it is, the larger (and more unwieldy) the resulting value will be.
    chaff_modulus defines the modulus value for the chaff integer; the larger this is, the less chances there are for the chaff validation in dechaffify() to yield a false ""okay"".
    """"""
    chaff = random.randint(0, chaff_size / chaff_modulus) * chaff_modulus
    return val * chaff_size + chaff

def dechaffify(chaffy_val, chaff_size = 150, chaff_modulus = 7):
    """""" Dechaffs the given chaffed value. The chaff_size and chaff_modulus parameters must be the same as given to chaffify() for the dechaffification to succeed.
    If the chaff value has been tampered with, then a ValueError will (probably - not necessarily) be raised. """"""
    val, chaff = divmod(chaffy_val, chaff_size)
    if chaff % chaff_modulus != 0:
        raise ValueError(""Invalid chaff in value"")
    return val

for x in xrange(1, 11):
    chaffed = chaffify(x)
    print x, chaffed, dechaffify(chaffed)
"
Dot product sparse matrices,"In [7]: a=np.arange(12).reshape(3,4)

In [8]: [np.dot(a[i],a[i]) for i in range(3)]
Out[8]: [14, 126, 366]

In [9]: np.einsum('ij,ij->i',a,a)
Out[9]: array([ 14, 126, 366])
"
Assigning values to two dimensional array from two one dimensional ones,">>> np.column_stack(([1.,1,1],[1,2,3]))
array([[ 1.,  1.],
       [ 1.,  2.],
       [ 1.,  3.]])
"
How do I extend a list from a parent class?,"class Parent(object):
    a_list = ['parent_item1', 'parent_item2', ]
    def print_list(self):
        print(self.a_list)

class Child1(Parent):
    def __init__(self, *args, **kwargs):
        super(Child1, self).__init__(*args, **kwargs)
        self.a_list = self.a_list + ['child1_item']  # <-------

class Child2(Parent):
    def __init__(self, *args, **kwargs):
        super(Child2, self).__init__(*args, **kwargs)
        self.a_list = self.a_list + ['child2_item']  # <-------


parent = Parent()
child1 = Child1()
child2 = Child2()
parent.print_list()
child1.print_list()
child2.print_list()
"
"In Python, loop for don't ""save"" items with same value in a list","return sum(array[1::2])
"
detecting end of tty output,"while 1: 
    c = pfd.stdout.read(1)
    if not c:
        break
    elif c == '\n': # print line when found
        print repr(out)
        out = ''
    else:
        out += c
        if out.strip() == 'sh#':
            break
"
How to set graph (and not figure !) size in matplotlib,"z = [[5,2,7],[8,1,5],[3,4,10]]
fig = plt.figure()
ax = fig.add_subplot(111)
ax.imshow(z,extent=[3,6,6,9],interpolation='none')

plt.show()
"
Setting default setting to 'no proxy' in Selenium Firefox,"import os
from selenium import webdriver

profile = webdriver.FirefoxProfile()
profile.set_preference('network.proxy.Kind','Direct')
webdriver.Firefox(profile)
"
Return copies of dictionary modified,">>> d = {'fn' : 'Joseph', 'ln' : 'Randall', 'phone' : '100' }
>>> lst = ['200', '300', '400', '500']
>>> [dict(d, phone=x) for x in lst]
[{'ln': 'Randall', 'phone': '200', 'fn': 'Joseph'}, {'ln': 'Randall', 'phone': '300', 'fn': 'Joseph'}, {'ln': 'Randall', 'phone': '400', 'fn': 'Joseph'}, {'ln': 'Randall', 'phone': '500', 'fn': 'Joseph'}]
"
Sorting data in DataFrame Pandas,"df.sort_values(['System_num', 'Dis'])"
Python csv string to array,"import StringIO
import csv

scsv = """"""1,2,3
a,b,c
d,e,f""""""

f = StringIO.StringIO(scsv)
reader = csv.reader(f, delimiter=',')
for row in reader:
    print '\t'.join(row)
"
Display array as raster image in python,"import matplotlib.pyplot as plt
import numpy as np

# Generate some data...
x, y = np.meshgrid(np.linspace(-2,2,200), np.linspace(-2,2,200))
x, y = x - x.mean(), y - y.mean()
z = x * np.exp(-x**2 - y**2)

# Plot the grid
plt.imshow(z)
plt.gray()
plt.show()
"
Sorting a huge text file and doing a binary search,"def get_next_word():
    with open(""Input.txt"") as in_file:
        for line in in_file:
            for word in line.strip().split():
                yield word

print any(word == ""Bob"" for word in get_next_word())
# True
"
Calculate Mahalanobis distance using NumPy only,"A = np.dot((xx-yy),VI)
B = (xx-yy).T
n = A.shape[0]
D = np.empty(n)
for i in range(n):
    D[i] = np.sqrt(np.sum(A[i] * B[:,i]))
"
Python: Linking Lists Together,"import itertools 

def do_it(source):
  name, items = None, []
  for item in itertools.chain.from_iterable(source):
    if is_name(item):
      if name: 
        yield [name] + items
        name, items = None, []
      name = item
    else:
      items.append(item)
  yield [name] + items
"
Regex: convert a string to a dictionary using dict comprehension and regex,"from collections import Counter

def convert(string):
    return Counter(re.findall('[A-Z][a-z]*', string))
"
"How to read this file,with skipping some lines using Python?","import csv

with open('input.txt', 'rb') as f:
    for i in range(47):
        next(f, None)
    reader = csv.reader(f,delimiter=' ')
    values = list(reader)

# if you want to remove the ''
#for idx, val in enumerate(values):
#    values[idx] = [x for x in values[idx] if x != '']

print values

with open('output.txt', 'wb') as f:
    writer = csv.writer(f, delimiter=' ', quotechar='""', quoting=csv.QUOTE_MINIMAL)
    for line in values:
        writer.writerow(line)    
"
Is there a way to output the numbers only from a python list?,"import numbers
[x for x in list_1 if isinstance(x, numbers.Number)]
"
Checking running python script within the python script,"import os
import sys
from time import sleep

from subprocess import check_call, CalledProcessError

try:
    check_call([""lockfile-create"", ""-q"",""-p"", ""-r"", ""0"", ""-l"", ""my.lock""])
except CalledProcessError as e:
    print(""{} is already running"".format(sys.argv[0]))
    print(e.returncode)
    exit(1)


# main body

for i in range(10):
    sleep(2)
    print(1)

check_call([""rm"",""-f"",""my.lock""])
"
How to make values in list of dictionary unique?,"seen_set = set()
new_d = []
for i in d:
    if tuple([i['feature_a'],i['feature_b'],i['feature_c']]) not in seen_set:
        new_d.append(i)
        seen_set.add(tuple([i['feature_a'],i['feature_b'],i['feature_c']]))
"
How to convert unicode text to normal text,elems[0].getText().encode('utf-8')
searching beautiful soup output without html tags,"import urllib
import csv
import StringIO

url = 'http://137.205.144.34/services/unload.cmd?format=csvx&sched=&start=-240:00:00&id=75631&step=864'
f = urllib.urlopen(url)
data = f.read()

reader = csv.reader(StringIO.StringIO(data))
for row in reader:
    if row: print row[0]
"
Scipy.sparse.csr_matrix: How to get top ten values and indices?,"def max_n(row_data, row_indices, n):
    i = row_data.argsort()[-n:]
    # i = row_data.argpartition(-n)[-n:]
    top_values = row_data[i]
    top_indices = row_indices[i]  # do the sparse indices matter?
    return top_values, top_indices, i
"
ADODBAPI No. Of Open Connection with database,"import os
import subprocess

## test data
databaseFileSpec = r""Z:\pyTest.mdb""

vbsFileSpec =  os.environ['TEMP'] + r""\mypytemp.vbs""

scriptCode = """"""Option Explicit
Dim con, rst, strOut, strSeparator
Const adSchemaProviderSpecific = -1
Set con = CreateObject(""ADODB.Connection"")
con.Open( _
        ""Provider=Microsoft.Jet.OLEDB.4.0;"" & _
        ""Data Source=""""""
scriptCode += databaseFileSpec
scriptCode += """""""")
Set rst = con.OpenSchema( _
        adSchemaProviderSpecific, _
        , _
        ""{947bb102-5d43-11d1-bdbf-00c04fb92675}"")
strOut = """"
strSeparator = """"
Do While Not rst.EOF
    If rst(2).Value = ""True"" Then
        strOut = strOut & strSeparator & Left(rst(0).Value, Len(Trim(rst(0).Value)) - 1)
        strSeparator = vbTab
    End If
    rst.MoveNext
Loop
WScript.Echo strOut
rst.Close
con.Close""""""

f = open(vbsFileSpec, 'w')
f.write(scriptCode)
f.close()

tabString = subprocess.Popen(
    ""cscript /nologo \"""" + vbsFileSpec + ""\"""",
    shell=True,
    stdout=subprocess.PIPE).stdout.read()
os.remove(vbsFileSpec)

print 'The following machines are connected to ""' + databaseFileSpec + '"":'
for x in tabString.split(""\t""):
    print x
"
How do I change where a variable is pointing to within a function?,"def maybe_replace_corgi(corgi):
    if corgi.cuteness > threshold:
        corgi.will_keep = True
        return corgi
    else:
        return Corgi(name=""Woofus"")

my_corgi = Corgi(name=""Rudolf"")
my_corgi = maybe_replace_corgi(my_corgi)
"
How to efficiently select entries by date in python?,"def find_by_date(haystack, needle):
    for email, email_date in haystack:
        if email_date == needle:
            yield email
"
How can I produce some data with a specific shape?,"A=2
f(x) = A*sin(2*x)
set xrange[-pi:pi]
plot f(x), sin(x), cos(x)
"
Convert string to int in a list by removing floating (Python),"[(a, b, c.replace("","", """")) for a, b, c in List]
"
Pandas: Efficiently subset DataFrame based on strings containing certain values,"df = df[(~df['column2'].str.contains(""foo"")) & (~df['column2'].str.contains(""bird"")) & (~df['column2'].str.contains(""cat""))]
"
Copy select lines from many text files and paste to new file,"import os
theKeyword = 'KEYWORD'
directory = '.' 
with open('output.csv', 'w') as out:
    for file in os.listdir(directory):
        if file.endswith("".log""):
            with open(file, 'r') as f:
                for line in f:
                    if theKeyword in line:
                        out.write(line)
"
Add second axis to polar plot,"plt.setp(ax2.get_yticklabels(), color='darkgreen')
plt.setp(ax.get_yticklabels(), color='darkblue')
"
Combine sparsely populated columns of the same data in pandas,"import pandas as pd
from StringIO import StringIO

data = """""" 90 ,  90 ,  A  ,     ,  A  ,  A 
101 , 101 ,     ,     ,  T  ,  T 
245 , 246 ,  AG ,  AG ,  AG ,  AG
302 , 302 ,  C  ,     ,     ,    
324 , 324 ,     ,  G  ,     ,  G """"""


df = pd.read_csv(StringIO(data), header=None)
s = df.ix[:, 2:].max(axis=1)
df = df.ix[:, :1]
df[""new""] = s
print df
"
Get index values of Pandas DataFrame as list?,df.index.values.tolist()
Counting multiple letter groups in a string (python),"from collections import Counter

s = ""CTAACAAC""

def chunk_string(s, n):
    return [s[i:i+n] for i in range(len(s)-n+1)]

counter = Counter(chunk_string(s, 3))
# Counter({'AAC': 2, 'ACA': 1, 'CAA': 1, 'CTA': 1, 'TAA': 1})
"
Python: Suggestion needed to optimise runtime of filter character method,"def delUnknownChar1(s):
    good = set(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-'"")
    clean = """"
    for ele in s:
        if ele in good:
            clean += ele
    return clean.lstrip(""-'"").rstrip(""-"")
"
Iterate through Python list and do something on last element,"for item in lst:
    do_something_to(item)
do_something_extra_special_to_last(item)
"
For loops in nested list with variable numbers of indices,"for x in reflist:
    for y in x:
        for z in range(0, 41):
            y.append([])
"
Pandas DataFrame not working as intended,"conda update pandas 
"
"""For"" loop first iteration","seq_iter= iter( something.get() )
head = seq_iter.next()
root.copy( head )
foo( head )
for member in seq_iter:
    somewhereElse.copy( member )
    foo( member )
"
figure of imshow() is too small,"fig, ax = subplots(figsize=(18, 2))
ax.imshow(random.rand(8, 90), interpolation='nearest')
tight_layout()
"
Sorting numpy matrix for a given column,"def key(x):
    x = ''.join([i for i in x if i.isdigit() or i=='_'])
    return '{1:{f}{a}10}_{2:{f}{a}10}_{3:{f}{a}10}'.format(*x.split('_'), f='0', a='>')

d = mysort(data, 'MyColumn', key)
"
How to generate numbers based on a pattern in python,"def multiRepeats(chars,n,initial = True):
    strings = []
    if len(chars) == 0 or n == 0: return [""""]
    c = chars[0]
    rest = chars[1:]
    base = 1 if initial else 0
    for i in range(base,n+1):
        head = c * i
        strings.extend([head + tail for tail in multiRepeats(rest,n-i,False)])
    return strings

def digitRepeats(digitString,n):
    return sorted([int(s) for s in multiRepeats(digitString,n)])
"
python: how to replace a string in a list of string with a list of strings?,"for n in data[:]:
    # maniplate data
"
How do you extract a url from a string using python?,"print(re.findall('(https?://[^\\s]+)', myString))"
Efficiently Searching Nested Lists,"import csv

rates={}
with open(ur_file) as f:
    for line in csv.reader(f, skipinitialspace=True, quotechar=""'""):
        rates.setdefault(line[0],{})[line[1]]=[float(e) for e in line[2:]]

print(rates)       
"
Reverse a list without reversed command,"print(list[::-1])
"
Python multiply sequence trick,">>> A = [ [] ] * 2
>>> id(A[0])
24956880
>>> id(A[1])
24956880
>>> id(A[0]) == id(A[1])
True
>>>
"
dictionary and list in python,"from collections import OrderedDict
OrderedDict(zip(list[::2], list[1::2]))
"
Add axis to colorbar in python matplotlib,"import numpy as np
import matplotlib.pyplot as plt

npoints = 1000
x, y = np.random.normal(10, 2, (2, npoints))

fig, ax = plt.subplots()
artist = ax.hexbin(x, y, gridsize=20, cmap='gray_r', edgecolor='white')

# Create the inset axes and use it for the colorbar.
cax = fig.add_axes([0.8, 0.15, 0.05, 0.3])
cbar = fig.colorbar(artist, cax=cax)

plt.show()
"
Open a file from a specific program from python,"subprocess.check_call([""open"", ""-a"", os.path.join(path, ""blender.app""),
                       ""Import_mhx.blend""])
"
get item's position in a list,"[i for (i, x) in enumerate(testlist) if (x == 1)]"
Filtering nosetests by numeric range,"from nose_parameterized import parameterized

def chk(number):
    print number

@parameterized.expand([[x, x] for x in range(100)])
def test(_, number):
    chk(number)
"
Dynamically adding class instance to Python instance à la __setattr__,"class B(object):
    def __init__(self):
        self.a = A()
"
Splitting a string with repeated characters into a list using regex,"[m.group(0) for m in re.finditer('(\\d)\\1*', s)]"
Tkinter - RuntimeError: maximum recursion depth exceeded,"import tkinter as tk

class Application(tk.Tk):

    def __init__(self):
        tk.Tk.__init__(self)
        self.title('Hello world!')

        self.quitButton = tk.Button(self, width=12, text='Quit', bg='tan',
                    command=self.close_app)
        self.quitButton.grid(row=0, column=0, padx=8, pady=8)

        self.helloButton = tk.Button(self, width=12, text='Hello',
                    command=self.say_hi)
        self.helloButton.grid(row=0, column=1, padx=8, pady=8)

    def say_hi(self):
        print('Hello world?!')

    def close_app(self):
        self.destroy()

app = Application()
app.mainloop()
"
python regular expression on first occurance,">>> import re
>>> source = ""blahblah'url=:'http://link.com/=tag/blahblah'url=:'http://link2.com/=tag'""
>>> re.findall(r""(url=:'http://.+?=tag)"", source)
[""url=:'http://link.com/=tag"", ""url=:'http://link2.com/=tag""]
"
How to order a list of lists by the first value,l1.sort(key=lambda x: int(x[0]))
"Python: List to tuple without ""","for i in range(4):
    val = a.instances[""name_""+str(i)]
    my_list.append(val)
"
python regular expression to validate types of strings,"try:
  int(val)
  is_int = True
except ValueError:
  is_int = False
"
Find index of nested item in python,"def myindex(lst, target):
    for index, item in enumerate(lst):
        if item == target:
            return [index]
        if isinstance(item, (list, tuple)):
            path = myindex(item, target)
            if path:
                return [index] + path
    return []
"
How to efficiently find clusters of like elements in a multidimensional array,"In [128]:
# +1 because zeros would be ignored otherwise
scipy.ndimage.measurements.find_objects(clusters+1)
Out[128]:
[(slice(0, 2, None), slice(0, 2, None)),
 (slice(0, 2, None), slice(3, 5, None)),
 (slice(1, 2, None), slice(5, 6, None)),
 (slice(0, 2, None), slice(1, 3, None)),
 (slice(0, 1, None), slice(5, 6, None)),
 (slice(1, 2, None), slice(4, 5, None))]
"
Split field to array when accessed,"def get_word_list(self, name):
    if name in ['keywords', 'spamwords', 'translations']:
        return getattr(self, name).split(',')

# or even
def __getattr__(self, name):
    if name[-5:] == '_list' and name[:-5] in ['keywords', 'spamwords', 'translations']:
        return getattr(self, name[:-5]).split(',')
    else
        raise AttributeError

cat = Categories.get(pk=1)
cat.get_word_list('keywords')  # ['word 1', 'word 2', ...]
cat.keywords_list              # ['word 1', 'word 2', ...] with 2nd approach
cat.keywords                   # 'word 1, word 2' -- remains CSV
"
python convert datetime formatted string to seconds,">>> from datetime import datetime
>>> import time
>>> example = u'2013-10-20T00:41:32.000Z'
>>> datetime.strptime(example, '%Y-%m-%dT%H:%M:%S.%fZ')
datetime.datetime(2013, 10, 20, 0, 41, 32)
>>> time.strptime(example, '%Y-%m-%dT%H:%M:%S.%fZ')
time.struct_time(tm_year=2013, tm_mon=10, tm_mday=20, tm_hour=0, tm_min=41, tm_sec=32, tm_wday=6, tm_yday=293, tm_isdst=-1)
"
Resizing matrix getting rid of 0 entries - Python,"# list comprehensions (equivalent)
no_zeroes_lc = [[col for col in row if col != 0.] for row in e]

# no_zeroes_lc:
# [['x', 'x'], [], [], []]

no_zeroes == no_zeroes_lc  # True
"
Python NLTK interpret a fixed pattern of sentence and tokenize it,"
import re
text= ""I want to go to New York from Atlanta, business class, on 25th July.""
destination= re.findall(r'.to.([A-Z][a-zA-Z]+?[\s-]*[A-Z]*[a-zA-Z]*)',text)
source= re.findall(r'.from.([A-Z][a-zA-Z]+?[\s-]*[A-Z]*[a-zA-Z]*)',text)

print source,destination
"
"directory path as user input, but for multiple folders at once","user_input = input(""ID of file: "")
filenames = glob.glob(
    ""Z:/RunLog/*"" + user_input + ""/*"" user_input + ""/*"" user_input + ""_infosite.rst"")
filename = filenames[0]
f = open(filename)
"
Turn off the the upper/right axis tick marks,"def customaxis(ax, c_left='k', c_bottom='k', c_right='none', c_top='none',
               lw=3, size=12, pad=8):

    for c_spine, spine in zip([c_left, c_bottom, c_right, c_top],
                              ['left', 'bottom', 'right', 'top']):
        if c_spine != 'none':
            ax.spines[spine].set_color(c_spine)
            ax.spines[spine].set_linewidth(lw)
        else:
            ax.spines[spine].set_color('none')
    if (c_bottom == 'none') & (c_top == 'none'): # no bottom and no top
        ax.xaxis.set_ticks_position('none')
    elif (c_bottom != 'none') & (c_top != 'none'): # bottom and top
        ax.tick_params(axis='x', direction='out', width=lw, length=7,
                      color=c_bottom, labelsize=size, pad=pad)
    elif (c_bottom != 'none') & (c_top == 'none'): # bottom but not top
        ax.xaxis.set_ticks_position('bottom')
        ax.tick_params(axis='x', direction='out', width=lw, length=7,
                       color=c_bottom, labelsize=size, pad=pad)
    elif (c_bottom == 'none') & (c_top != 'none'): # no bottom but top
        ax.xaxis.set_ticks_position('top')
        ax.tick_params(axis='x', direction='out', width=lw, length=7,
                       color=c_top, labelsize=size, pad=pad)
    if (c_left == 'none') & (c_right == 'none'): # no left and no right
        ax.yaxis.set_ticks_position('none')
    elif (c_left != 'none') & (c_right != 'none'): # left and right
        ax.tick_params(axis='y', direction='out', width=lw, length=7,
                       color=c_left, labelsize=size, pad=pad)
    elif (c_left != 'none') & (c_right == 'none'): # left but not right
        ax.yaxis.set_ticks_position('left')
        ax.tick_params(axis='y', direction='out', width=lw, length=7,
                       color=c_left, labelsize=size, pad=pad)
    elif (c_left == 'none') & (c_right != 'none'): # no left but right
        ax.yaxis.set_ticks_position('right')
        ax.tick_params(axis='y', direction='out', width=lw, length=7,
                       color=c_right, labelsize=size, pad=pad)
"
wrapping a text file so that each line contain a maximum of 80 characters,"import re

s = 'Text Processing. You are tired of seeing lines on your e-mail wrap because people type lines that are too long for your mail reader application. Create a program to scan a text file for all lines longer than 80 characters. For each of the offending lines, find the closest word before 80 characters and break the line there, inserting the remaining text to the next line (and pushing the previous next line down one). When you are done, there should be no lines longer than 80 characters.'
print '\n'.join(line.strip() for line in re.findall(r'.{1,80}(?:\s+|$)', s))
"
Creating dictionary with key/values coming from a list of lists,">>> {k: v for k, *v in zip(*ll)}
{'c': [3, 6, 9], 'a': [1, 4, 7], 'b': [2, 5, 8]}
"
Flask function decorator run at defintion time and call time?,"def wrapped(...)
    ...

app.add_url_rule(rule, endpoint, wrapped, **options)
return wrapped
"
Python item sort,">>> from collections import Counter
>>> for word, count in Counter(my_list).most_common():
...     print ""{} is repeated {} time{}."".format(word, count, 's' if count > 1 else '')
... 
dog is repeated 3 times.
bird is repeated 1 time.
cat is repeated 1 time.
"
Most efficient way to delete needless newlines in Python,"import re

with open('gutenberg.txt') as stream:
    oldtext = stream.read()

    newtext = re.sub(r'(?<!\n)\n(?![\n\t])', ' ', oldtext.replace('\r', ''))

    print(newtext)
"
How to write simple geometric shapes into numpy arrays,"import numpy
import cairo
import math
data = numpy.zeros((200, 200, 4), dtype=numpy.uint8)
surface = cairo.ImageSurface.create_for_data(
    data, cairo.FORMAT_ARGB32, 200, 200)
cr = cairo.Context(surface)

# fill with solid white
cr.set_source_rgb(1.0, 1.0, 1.0)
cr.paint()

# draw red circle
cr.arc(100, 100, 80, 0, 2*math.pi)
cr.set_line_width(3)
cr.set_source_rgb(1.0, 0.0, 0.0)
cr.stroke()

# write output
print data[38:48, 38:48, 0]
surface.write_to_png(""circle.png"")
"
Combining print statements with list comprehension in python,"from __future__ import print_function
def poll(x):
    regex = re.compile(""\+CMTI:......."")
    [(m, print(""You have received a new message!""))[0] for l in x for m in [regex.search(l)] if m]
"
How to use lxml to find an element by text?,"e = root.xpath('.//a[text()=""TEXT A""]')"
recursive way to go through a nested list and remove all of a select value,"def listcleaner(lst):
    if not lst:   # If list is empty
        return [] # Go no further
    if isinstance(lst[0], list):
        if lst[0]: # If the list has something in it, we want to run listcleaner() on it.
            return [listcleaner(lst[0])] + listcleaner(lst[1:])
        else: # Otherwise, just skip that list
            return listcleaner(lst[1:])
    else:
        return [lst[0]] + listcleaner(lst[1:]) # If it is not a list, return it unchanged plus listcleaner() on the rest.

a = listcleaner([1, [], [2, []], 5]) 
print(a)
"
What causes a method wrapped via a metaclass to forget self when called?,"import types, functools, sys

class VerboseMetaclass(type):

    def __new__(cls, name, bases, classdict):
        for key in sorted(filter(
            lambda name: isinstance(name, str), classdict)):
            classdict[key] = cls.wrap('{}.{}'.format(name, key), classdict[key])
        return super().__new__(cls, name, bases, classdict)

    @classmethod
    def wrap(cls, name, value):
        if isinstance(value, types.FunctionType):
            return cls.wrap_function(name, value)
        if isinstance(value, classmethod):
            return classmethod(cls.wrap_function(name, value.__func__))
        if isinstance(value, staticmethod):
            return staticmethod(cls.wrap_function(name, value.__func__))
        try:
            return VerboseData(name, value)
        except NameError:
            return value

    def wrap_function(name, func):
        @functools.wraps(func)
        def verbose_function(*args, **kwargs):
            args_str = tuple((object.__repr__(item)
                              if isinstance(item, VerboseData)
                              else repr(item)) for item in args)
            kwargs_str = tuple('{!s}={!r}'.format(*pair)
                               for pair in sorted(kwargs.items()))
            signature = '{}({})'.format(name, ', '.join(args_str + kwargs_str))
            print('[ -> ] {}\n'.format(signature))
            try:
                value = func(*args, **kwargs)
                print('[ <- ] {!s} [return {!r}]\n'.format(signature, value))
                return value
            except:
                value = sys.exc_info()[1]
                print('[ <- ] {!s} [raise {!r}]\n'.format(signature, value))
                raise
        return verbose_function

class VerboseData(metaclass=VerboseMetaclass):

    def __init__(self, name, value):
        vars(self).update(locals())

    def __repr__(self):
        return repr(self.value)

    def __get__(self, instance, owner):
        value = self.value
        if isinstance(value, (property, VerboseData)):
            value = value.__get__(instance, owner)
        print('[ get ] {!s} = {!r}\n'.format(self.name, value))
        return value

    def __set__(self, instance, value):
        print('[ set ] {!s} = {!r}\n'.format(self.name, value))
        if isinstance(self.value, (property, VerboseData)):
            self.value.__set__(instance, value)
        else:
            self.value = value

    def __delete__(self, instance):
        print('[ XX ] {}\n'.format(self.name))
        if isinstance(self.value, (property, VerboseData)):
            self.value.__delete__(instance)
        else:
            del self.value

    def __iter__(self):
        return iter(self.value)

class Metaclass(VerboseMetaclass, metaclass=VerboseMetaclass):

    @classmethod
    def __prepare__(metacls, name, bases):
        return super().__prepare__(name, bases)

    def __new__(cls, name, bases, classdict):
        for key, value in {'__new__': cls.new, '__init__': cls.init}.items():
            if key in classdict:
                classdict[key.encode()] = classdict[key]
                classdict[key] = value
        return super().__new__(cls, name, bases, classdict)

    def __init__(self, name, bases, classdict):
        return super().__init__(name, bases, classdict)

    def __call__(self, *args, **kwargs):
        return super().__call__(*args, **kwargs)

    def new(cls, *args, **kwargs):
        for base in cls.__mro__:
            try:
                return vars(base)[b'__new__'](cls, *args, **kwargs)
            except KeyError:
                pass
        return object.__new__(cls, *args, **kwargs)

    def init(self, *args, **kwargs):
        for base in self.__class__.__mro__:
            try:
                return vars(base)[b'__init__'](self, *args, **kwargs)
            except KeyError:
                pass
        return object.__init__(self)

if __name__ == '__main__':
    class Test(metaclass=Metaclass):

        def __new__(cls):
            return super().__new__(cls)

        def __init__(self):
            return super().__init__()

        def run(self):
            pass

    Test().run()
"
Writing a program to print hapax's from a string,"import string
import collections

def hapax(text):
    # Remove Punctuation from the Input text.
    text = text.translate(string.maketrans("""",""""), string.punctuation)
    print ""Debug 1- After remove Punctuation:"", text

    # ignore:- Lower/upper/mix cases
    text = text.lower()
    print ""Debug 2- After converted to Lower case:"", text

    #- Create Default dictionary. Key is word and value 
    word_count = collections.defaultdict(int)
    print ""Debug 3- Collection Default Dictionary:"", word_count

    #- Split text and update result dictionary.
    for word in text.split():
        if word:#- Ignore whitespace.
            word_count[word] += 1

    print ""Debug 4- Word and its count:"", word_count

    #- List which save word which value is 1.
    hapax_words = list()
    for word, value in word_count.items():
        if value==1:
            hapax_words.append(word)

    print ""Debug 5- Final Hapax words:"", hapax_words


hapax('yo i went jogging then yo i went jogging tuesday wednesday some punctuation ? I and & ')
"
Groups of optional arguments for a function - python,"# Use None to represent missing data. Think about it: ""hello"" is not a 
# valid width; neither is """".
def __init__(self, center=None, width=None, height=None, SW=None, NE=None):
    """"""A constructor that assigns attributes to the proper variables

    Block, tuple, tuple -> None""""""

    if center is not None and width is not None and height is not None:
        # If either SW or NE is given, ignore them 
        self.center = center
        self.width = width
        self.height = height
    elif SW is not None and NE is not None:
        # _convert_corners is a helper function you define
        self.center, self.width, self.height = _convert_corners(SW, NE)
    else:
        # Not entirely true. Give width, height, and one corner, you
        # could reconstruct the center, but this is just an example.
        raise ValueError(""Insufficient information to construct Block"")
"
Python re.findall print all patterns,"re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')"
"Python - string replacement, re.match and re.sub in a single operation (replace a char if at end of a string)",">>> import re
>>> m = re.sub(r'(?<=\S)%(?= |$)', r'PCT', 'foo%bar foo% bar%')
>>> m
'foo%bar fooPCT barPCT'
"
groupby by years and generate new columns,"import pandas as pd
import numpy as np

dates = pd.date_range('19990101', periods=6000)
df = pd.DataFrame( np.random.randint(0,50,size=(6000,2)), index = dates)
df.columns = ['winners','losers']
new_df = pd.DataFrame()
new_df ['winners'] = df.groupby(df.index.year, as_index=True)['winners'].sum()
new_df ['losers'] = df.groupby(df.index.year, as_index=True)['losers'].sum()
new_df['winners_Percent'] = new_df['winners']/new_df['winners'].sum()
new_df['losers_Percent'] = new_df['losers']/new_df['losers'].sum()
"
How would a linked list be faster in iteration? with __iter__ and __next__ or with __getitem__?,"def __getitem__(self, i):
    if i >= len(self):
        raise IndexError(""Index out of range."")

    current = self.head
    for _ in xrange(i):
        current = current.next

    return current
"
Python @property.setter,"  class _Wrapper(object):
    def __init__(self, caller, instance):
      self.caller = caller
      self.instance = instance

    def __call__(self, *args, **kwargs):
      print ""I've been wrapped!""
      return self.caller(self.instance, *args, **kwargs)

  class Accouncer(object):
    def __init__(self, method):
      self.method = method

    def __get__(self, instance, _type=None):
      return _Wrapper(self.method, instance)

  def vocal(func):
    return Accouncer(func)

  class Ha(object):
    @vocal
    def stuff(self):
      return 1
"
How can I cache API data in a class attribute?,"import time

class A(object):
    def __init__(self):
        self.n_f = self.n_g = 0

    @cached_property(0.1)
    def f(self):
        self.n_f += 1
        print('calling f', self.n_f)
        return self.n_f

    @cached_property(0.5)
    def g(self):
        self.n_g += 1
        print('calling g', self.n_g)
        return self.n_g

a = A()
print('f', a.f)
print('g', a.g)
print('f', a.f)
print('g', a.g)
print('sleep 0.2')
time.sleep(0.2)
print('f', a.f)
print('g', a.g)
print('sleep 0.4')
time.sleep(0.4)
print('f', a.f)
print('g', a.g)
"
Regular expression to remove line breaks,"re.sub('(?<=[a-z])\\r?\\n', ' ', textblock)"
Pretty printing newlines inside a string in a Pandas DataFrame,"import pandas as pd

data = {'johnny\nnewline': 2, 'alice': 3, 'bob': 3,
        'frank': 4, 'lisa': 1, 'tom': 8}
n = range(1, max(data.values()) + 1)

# Create DataFrame with columns = pos
output = pd.DataFrame(columns=n, index=[])

# Populate DataFrame with rows
for index, (bidder, pos) in enumerate(data.items()):
    output.loc[index, pos] = bidder

# Print the DataFrame and remove NaN to make it easier to read.
print(output.fillna(''))

# Fetch and print every element in column 2
for index in range(1, 5):
    print(output.loc[index, 2])
"
Can I classify elements of a df.column and create a column with the output without iteration (Python-Pandas-Np)?,"In [60]:

%%timeit 
A['Size'] = """"
for index, row in A.iterrows():
    if row['A'] >= 4:
        A.loc[index, 'Size'] = 'Big'
    if 2.5 < row['A'] < 4:
        A.loc[index, 'Size'] = 'Medium'
    if 0 < row['A'] < 2.4:
        A.loc[index, 'Size'] = 'Small'
100 loops, best of 3: 2.31 ms per loop
In [62]:

%%timeit
A.loc[A['A'] >=4, 'Size'] = 'Big'
A.loc[(A['A'] >= 2.5) & (A['A'] < 4), 'Size'] = 'Medium'
A.loc[A['A'] < 2.4, 'Size'] = 'Small'

100 loops, best of 3: 1.95 ms per loop
"
Python - re - need help for regular expression,"re.search('\[([^\]]*)\]', html_template)
"
Iterating Through Table Rows in Selenium (Python),"h  = """"""<table class=""datadisplaytable"">
<tr>
<td class=""dddefault"">16759</td>
<td class=""dddefault"">MATH</td>
<td class=""dddefault"">123</td>
<td class=""dddefault"">001</td>
<td class=""dddefault"">Calculus</td>
<td class=""dddefault""></td>
<td class=""dddead""></td>
<td class=""dddead""></td>
</tr>
<tr>
<td class=""dddefault"">16449</td>
<td class=""dddefault"">PHY</td>
<td class=""dddefault"">456</td>
<td class=""dddefault"">002</td>
<td class=""dddefault"">Physics</td>
<td class=""dddefault""></td>
<td class=""dddead""></td>
<td class=""dddead""></td>
</tr>
</table>""""""

from lxml import html
xml = html.fromstring(h)
# gets the table
table =  xml.xpath(""//table[@class='datadisplaytable']"")[0]


# iterate over all the rows   
for row in table.xpath("".//tr""):
     # get the text from all the td's from each row
    print([td.text for td in row.xpath("".//td[@class='dddefault'][text()])
"
3D-plotting nested dictionaries made up of different length arrays,"import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

x, y, z = [], [], []

for tim, pixels in dictionary.items():
    for pixel, intensities in pixels.items():
        for intensity in intensities:
            x.append(intensity)
            y.append(pixel)
            z.append(tim)

fig = plt.figure()
ax = Axes3D(fig)
ax.plot(x, y, z, zdir='z')
ax.show()
"
django template if or statement,"{% with accepted=req.accepted.all declined=req.declined.all username=user.username %}
    {% if username in accepted and username not in declined or
          username not in accepted and username in declined %}
    ...
{% endwith %}
"
I need to generate x random numbers in an interval from 1 to x but each number have to occur only once,"np.random.permutation(10)
"
Python getting a string (key + value) from Python Dictionary,">>> ', '.join(['{}_{}'.format(k,v) for k,v in d.iteritems()])
'key2_value2, key1_value1'
"
Make a function to call while the program is running,"my_list = ['a', 'b', 'c', 'd', 'e', 'f']

choices = {'remove': my_list.remove,
           'append': my_list.append}

print my_list
while True:
    try:
        choice, item = raw_input('append <x> OR remove <x>\n').split()
        choices[choice](item)
    except (KeyError, ValueError):
        print('something went wrong...')
    print my_list
"
Python lists with irregular format,"def listify(l):
    res = []
    for j in l:
        d = dict([(0,0),(1,0),(2,0),(3,0),(4,0)])
        d.update(j)
        res.append(list(d.items()))
    return res
"
Sql filter query with join objects,"Foo.query.join(Bar).filter_by(Bar.status == filters['status']).all()
"
Python and BeautifulSoup Opening pages,"import requests
from bs4 import BeautifulSoup

r = requests.get(""<add your URL here>"")
soup = BeautifulSoup(r.content)

for a_tag in soup.find_all('a', class_='listing-name', href=True):
    print 'href: ', a_tag['href']
"
Learning Python and using dictionaries,"dv = list()
# arbitrary sequence of numbers
seq = [2,4,5,2,4,6,3,8,9,3,7,2,47,2]

# dictionary counting number of occurances
seqDic = { }

for i in seq:
  if i in seqDic:
    seqDic[i] += 1
  else:
    dv.append(i)
    seqDic[i] = 1
"
Matlab equivalent of Python's 'reduce' function,"d=ndims(a)
M=cat(d+1,a,b,c,d)
max(M,[],d+1)
"
Doubling the matrix in numpy,"import numpy as np
"
how to return the iterations over keys as a string?,"lines = []
for key in self.cases.keys():
    a = key, self.cases[key].color, self.cases[key].thetype
    lines.append(str(a) + ""\n"")
return ''.join(lines)
"
what is the most efficient way to turn a list in python,"zip(*your_list)
"
Explicitly evaluate both conditions when using boolean and,"# explicitly execute the conditions first, compare the outcomes later
test1, test2 = x == 2, myList.pop() == 3
if test1 and test2:
"
Converting values of named tuples from strings to integers,">>> from collections import namedtuple
>>> Base = namedtuple('Base', ['Locus', 'Total_Depth', 'Average_Depth_sample', 'Depth_for_17'])
>>> r = ['chr1:6484996', '1030', '1030', '1030']
>>> Base(r[0], *map(int, r[1:]))
Base(Locus='chr1:6484996', Total_Depth=1030, Average_Depth_sample=1030, Depth_for_17=1030)
"
Execute Python function in Main thread from call in Dummy thread,"import Queue

#somewhere accessible to both:
callback_queue = Queue.Queue()

def from_dummy_thread(func_to_call_from_main_thread):
    callback_queue.put(func_to_call_from_main_thread)

def from_main_thread_blocking():
    callback = callback_queue.get() #blocks until an item is available
    callback()

def from_main_thread_nonblocking():
    while True:
        try:
            callback = callback_queue.get(False) #doesn't block
        except Queue.Empty: #raised when queue is empty
            break
        callback()
"
Rendering Django template from withing template,"{% for post in latest_posts %}
    {% if user.is_logged_in %}
        {% include 'long_form.html' %}
    {% else %}
        {% include 'short_form.html' %}
    {% endif %}
{% endfor %}
"
Python : Adding a code routine at each line of a block of code,"import sys
class SetTrace(object):
    def __init__(self, func):
        self.func = func

    def __enter__(self):
        sys.settrace(self.func)
        return self

    def __exit__(self, ext_type, exc_value, traceback):
        sys.settrace(None)

def monitor(frame, event, arg):
    if event == ""line"":
        print('hello')
        # print(frame.f_globals) 
        # print(frame.f_locals)  
    return monitor



def foo():
   print 'bar'
   print 'barbar'
   print 'barbarbar'

with SetTrace(monitor):
    foo()
"
Making a directory from multiple files in python,"data1 = ... # contents of file1
data2 = ... # contents of file2

data = [data1, data2]
# use [1:] to filter column headers
data_cells = [[line.split() for line in datum.split('\n')][1:]
              for datum in data]

result = []
for line_sequence in zip(*data_cells):
    col1 = line_sequence[0][0] # get row header
    result.append([col1]) # and put it in a list
    for line in line_sequence:
        result[-1].append(line[-1])

out = '\n'.join(['    '.join(line) for line in result])
print(out)
"
How to grab the output from python subprocess,"import requests
r = requests.get(image_url)
# here r.url will return the redirected true image url
image_filename = os.path.basename(r.url)
f = open(image_filename, 'wb')
f.write(r.content)
f.close()
"
substring of a string using python?,"import re
from collections import defaultdict

matches = defaultdict(list)
needles = ['accept','freed','partie','accepta','freeing','party']
haystack = ""I am accepting your invitation for the party. No, really, I accept!""
words = re.findall(r'(\w+)', haystack)

for key in needles:
    for word in words:
       if key in word:
           matches[key].append(word)

for key, found in matches.iteritems():
    print('Key: {} - Total Matches: {}'.format(key, len(found)))
    for match in found:
        print('\t{}'.format(match))
"
Putting biographical data in order from 4 parameters using python 3.3,"def student_data(name, age, number, enrolled):
    return str([name, age, number, enrolled])
"
get all with same name and value in tuple using named tuple,"all_b_values = [t.b for t in list_of_named_tuples]
all_a_values = [t.a for t in list_of_named_tuples]
"
"In Python, given a URL to a text file, what is the simplest way to read the contents of the text file?","import urllib2  # the lib that handles the url stuff

data = urllib2.urlopen(target_url) # it's a file like object and works just like a file
for line in data: # files are iterable
    print line
"
Lists of lists of custom objects in Python,"super_list = [[MyClass() for j in xrange(5)] for i in xrange(100)]
"
Replacing a unicode character in a string in Python 3,">>> s=""bla bla bla \uf604 bla bla bla""
>>> print(s)
bla bla bla  bla bla bla
>>> s=""bla bla bla \uf604 bla bla bla""
>>> s.replace('\uf604','X')
'bla bla bla X bla bla bla'
"
Combining numpy with sympy,"In [11]: x1, x2, x3 = symbols('x1:4')

In [12]: m = Matrix([x2,2*x1,x3/2])

In [13]: m.subs({x1:10, x2:20, x3:30})
Out[13]: 
        ⎡20⎤
        ⎢  ⎥
        ⎢20⎥
        ⎢  ⎥
        ⎣15⎦
"
How to map a function to every item in every sublist of a list,">>> map(lambda x: map(lambda y: y * 2, x), [[1, 2, 3], [4, 5, 6]])
[[2, 4, 6], [8, 10, 12]]
"
Selenium get text from a table cell (td) with XPath,"elem = browser.find_element_by_xpath(""""""//*[@id=""body""]/table/tbody/tr[1]/td/table[2]/tbody/tr/td[2]/table/tbody/tr[4]/td[1]"""""")
print(elem.text)
"
bottom up fibonacci in python using O(1) space,"def fib():
    a, b = 0, 1
    while True:            # First iteration:
        yield a            # yield 0 to start with and then
        a, b = b, a + b    # a will now be 1, and b will also be 1, (0 + 1)
"
Using eval in defing Python class data attributs,"class Test:
    # note that this is only called if the attr does not exist
    def __getattr__(self, name):
        try:
            with open("".matrix/{0}.csv"".format(name)) as f:
                return f.read()
        except IOError:
            raise AttributeError(""{0} does not exist"".format(name))
"
Loading empty dictionary when YAML file is empty (Python 3.4),">>> import yaml
>>> config_file = ''
>>> config = yaml.load(config_file) or {}
>>> print(config)
{}
"
"Beautifulsoup, urllib2 and requests did not find all HTML tags from 9gag.com","In [30]: params = {""appId"": """",
   ....:           ""url"": """",
   ....:           ""count"": ""2"",
   ....:           ""level"": ""2"",
   ....:           ""order"": ""score"",
   ....:           ""mentionMapping"": ""true"",
   ....:           ""origin"": ""9gag.com""}

In [31]: js = ""Request URL:http://comment-cdn.9gag.com/v1/cacheable/comment-list.json""

In [32]: with requests.session() as s:
   ....:         r = s.get(base)
   ....:         soup = BeautifulSoup(r.content,""lxml"")
   ....:         links = [urljoin(base, a[""href""]) for a in soup.select(""a.badge-evt.point"")][:1]
   ....:         for link in links:
   ....:                 cont = s.get(link).content
   ....:                 soup = BeautifulSoup(cont,""lxml"")
   ....:                 script = soup.find(""script"", text=re.compile('appId')).text
   ....:                 data = ast.literal_eval(script[script.find(""{""):script.rfind(""}"") + 1])
   ....:                 params[""appId""] = data[""appId""]
   ....:                 params[""url""] = data[""url""]
   ....:                 page_json = s.get(js, params=params).json()
   ....:                 for dct in page_json[""payload""][""comments""]:
   ....:                         print(dct[""text""])
   ....:                         for child in dct[""children""]:
   ....:                                 print(child[""text""])
   ....:                 

Once again this is a post made by someone who has no idea what true love is. True love is jealous, painful, and difficult. It&#039;s a battle it always will be. You&#039;re either fighting yourself to be a better person, fighting life to give the other person the life they deserve or fighting the other person. But true love is worth all of it, its also beautiful, kind, gentle and warm.  No relationship is perfect. There is not &quot;8 ways to know&quot;. The one for you is the one who will put up with your shit but at the same time make you want to make yourself a better person. Your true love will get on your nerves, piss you off, hurt you, but they will also love you, hold you up when you can&#039;t and forgive you. True love is when you find someone you can stand beside through anything, someone who would never want to hurt you  When you find someone you can trust no matter what. No one is perfect and there is more than one person in the world you can fall in love with, but when you find that person, you fi
@celticdraconian this Is so true
Comment complaining that this will lead straight to the &quot;friendzone&quot;
Comment saying the &quot;Friendzone&quot; is not a thing.
"
How do I set a value of a dictionary to a reference to a value of another dictionary?,"class Lock():
    def __init__(self, locked = True):
        self.attributes = {'locked': locked}

    def toggleLock(self):
        self.attributes.update({'locked': not self.attributes['locked']})

class Door():
    def __init__(self, lock_object):
        self._attributes = {'color':'Blue'}
        self.lock = lock_object

    def get_attribute(self,key):
        if key in self._attributes:
            return self._attributes[key]
        elif key in self.lock.attributes:
            return self.lock.attributes[key]
        raise KeyError(key)

    @property
    def attributes(self):
        """"""
        Door's attributes
        """"""
        # return a new dict that contains the keys of itself, and lock (and possibly more objects)
        a = {}
        a.update(self.lock.attributes)
        a.update(self._attributes)
        return a 

    def __getattr__(self, key):
        #nice addition, makes you able to do things like `if Door.locked:`
        return self.get_attribute(key)
"
How to recover lists that are saved in Series,"pd.Series([[1, 2, 3]]).tolist()[0][0]
"
Python Diferences between lines of strings,">>> with open('strings.txt') as f:
...    odds = [''.join(i) for i in zip(*(chars for chars in zip(*f) 
...                                    if len(set(chars)) != 1))]
>>> odds
['c343', 'c470', '0470']
"
Inserting values into specific locations in a list in Python,"[mylist[i:] + [newelement] + mylist[:i] for i in xrange(len(mylist),-1,-1)]
"
Hex grid in ncurses,"def screen_pos(i, j):
    return i*2 + (j & 1), j

def neighbors(i, j):
    h = 1 - (j & 1)
    return [(i-1, j), (i+1, j),
            (i-h, j-1), (i-h, j+1),
            (i-h+1, j-1), (i-h+1, j+1)]
"
Import .py files with punctuation before extension,"import importlib
my_module = importlib.import_module('4-1')
"
Python logging module is printing lines multiple times,"def _get_logger(self):
    loglevel = logging.INFO
    l = logging.getLogger(__name__)
    if not getattr(l, 'handler_set', None):
        l.setLevel(logging.INFO)
        h = logging.StreamHandler()
        f = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
        h.setFormatter(f)
        l.addHandler(h)
        l.setLevel(loglevel)
        l.handler_set = True
    return l  
"
Why does this iteration didn't return anything out?,"def is_power(a,b):
    if a<b:
        return is_power(b,a)
    elif a==b:
        return True
    else:
        if a%b !=0:
            return False
        else:
            return is_power((a/b),b)


print is_power(2,32)
"
"Parse HTML, set datas to variables","import re

html = ... # your html goes here

telephone = re.search('Tel: ([+\d\s]+)', html).groups()[0]
fax = re.search('Fax: ([+\d\s]+)', html).groups()[0]
paragraphs = [line for line in html.split('\n') if line.startswith('<p>')]
address = '\n'.join([p.replace('<p>', '').replace('</p>', '')
                     for p in paragraphs[0:2]])

print(telephone)
print(fax)
print(address)
"
normalize-space just works with xpath not css selector,"def normalize_whitespace(str):
    import re
    str = str.strip()
    str = re.sub(r'\s+', ' ', str)
    return str
"
"In Python pandas, start row index from 1 instead of zero without creating additional column","In [151]:

df = pd.DataFrame({'a':np.random.randn(5)})
df
Out[151]:
          a
0  0.443638
1  0.037882
2 -0.210275
3 -0.344092
4  0.997045
In [152]:

df.index = np.arange(1,len(df)+1)
df
Out[152]:
          a
1  0.443638
2  0.037882
3 -0.210275
4 -0.344092
5  0.997045
"
Why is inspect.getargspec() return unsized objects?,"if getargspec(g)[3]:
    ...
"
How to sort a structured list of stock data for later access in Python?,"keys = ['Open', 'High', 'Low', 'Close', 'Volume', 'Adj Clos']
histodict = dict((item[0], dict(zip(keys, item[1:]))) for item in history)
"
Updating dictionaries in python,"if symbol in reps or letter in reps.values():
    print(""You already used either the symbol or the letter"")
"
Looping over multiple dictionaries and not just the last dictionary in python,"results = []
for elem in tree.getiterator():
    if elem.tag=='{http://www.namespace.co.uk}AssetEquipment':
        output={}
        results.append(output)
        ...
"
Python: Changing the conditions of a 'for' loop,"l = [1, 2, 3]
while True:
    i = 0
    if i >= len(l):
        break
    if (l[i] match the condition):
        l.insert(i+1, something)
        i = 0
    else:
        i += 1
"
How to write to a specific line in a text file,"W=""""

for i in A:    # for each key in the dictionary
    W+=""{0} {1}\n"".format(i,A[i])     # Append to W a dictionary key , a space , the value corresponding to that key and start a new line

with open(""text.txt"",""w"") as O:
    O.write(W)
"
multiprocessing threadpool not terminating as expected,"def timeout(seconds, function, *args, **kwargs):
    with multiprocessing.pool.ThreadPool(processes=1) as pool:
        result = pool.apply_async(function, args, kwargs)
        try:
            result.get(timeout=seconds)
        except multiprocessing.TimeoutError:
            print(""Process timed out"")
    print(""Pool terminated"")
"
Tkinter create_image not displaying,"photo_image = PhotoImage(filename)
"
More efficient way of getting things from a dictionary,"if find in things:
    print things[find]
"
Compute the similarity between two lists,"import math

def counter_cosine_similarity(c1, c2):
    terms = set(c1).union(c2)
    dotprod = sum(c1.get(k, 0) * c2.get(k, 0) for k in terms)
    magA = math.sqrt(sum(c1.get(k, 0)**2 for k in terms))
    magB = math.sqrt(sum(c2.get(k, 0)**2 for k in terms))
    return dotprod / (magA * magB)
"
Compare List with different number of items,"In [42]: set(B).issubset(A)
Out[42]: True

In [43]: set(A).issubset(B)
Out[43]: False
"
Python max length of j-th item across sublists of a list,">>> x = [['aaa', 'bb','ccc'], ['ophkn','h','aa']]
>>> j = 1
>>> max(len(i[j]) for i in x)
2
"
Matplotlib savefig() on a zoomed in graph,"import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

filename = '/tmp/graph.png'
G = nx.complete_graph(10)
pos = nx.spring_layout(G)
xy = np.row_stack([point for key, point in pos.iteritems()])
x, y = np.median(xy, axis=0)
fig, ax = plt.subplots()
nx.draw(G, pos, with_labels=False, node_size=1)
ax.set_xlim(x-0.25, x+0.25)
ax.set_ylim(y-0.25, y+0.25)
plt.savefig(filename, bbox_inches=0, orientation='landscape', pad_inches=0.1)
"
Replace elements of a multidimensional numpy array according to a rule," In [1]: import numpy as np

 In [2]: arr = np.array([[ 5,  9],[14, 23],[26,  4],[ 5, 26]])

 In [3]: np.bincount(arr.flatten())[arr]
 Out[3]: 
 array([[2, 1],
        [1, 1],
        [2, 1],
        [2, 2]])
"
Python regex to remove all words which contains number,">>> words = ""ABCD abcd AB55 55CD A55D 5555""
>>> ' '.join(s for s in words.split() if not any(c.isdigit() for c in s))
'ABCD abcd'
"
Find all words in a string that start with the $ sign in Python,[word for word in mystring.split() if word.startswith('$')]
How to combine all 3 in 1 re.findall() ??(python 2.7 && Regular Expressions),">>> from bs4 import BeautifulSoup
>>> 
>>> data = """"""
... <div>
...     <span>Span's text</span>
...     <a title=""A title"">link</a>
...     <span class=""test""><b>B's text</b></span>
... </div>
... """"""
>>> soup = BeautifulSoup(data)
>>> 
>>> span_texts = [span.text for span in soup.find_all('span')]
>>> a_titles = [a['title'] for a in soup.find_all('a', title=True)]
>>> b_texts = [b.text for b in soup.select('span[class] > b')]
>>> 
>>> result = span_texts + a_titles + b_texts
>>> print result
[u""Span's text"", u""B's text"", 'A title', u""B's text""]
"
Python slice first and last element in list,"[some_list[0], some_list[-1]]
"
Search function python,"def search_func(lst, x):
    if len(lst) <= 0:   # this is how you test if the list is empty
        return ""failure""
    i = 0               # we'll use this as index to traverse the list
    while i < len(lst): # this is how you test to see if the index is valid
        if lst[i] == x: # this is how you check the current element
            return ""success""
        i += 1          # this is how you advance to the next element
    else:               # this executes only if the loop didn't find the element
        return ""failure"" 
"
"Python: Compare list of strings to list of tuples, and create a new list based on match or no match",">>> import re
>>> a=['from src1 to dest2','from src3 to dest4','from src5 to dest6']
>>> b=[['destb','dest2'],['destd','loc4'],['destf','dest6'],['desth','dest8']]
>>> result = []
>>> for x in a:
...     result.append(x)
...     for i,j in b:
...             if j in result[-1]:
...                     result[-1] = re.sub(j,i,result[-1])
...
>>> result
['from src1 to destb', 'from src3 to dest4', 'from src5 to destf']
"
Java vs. Python specific code-fragment performance improvement,"for i in xrange(1, N):
  v = p[:N-i] - p[i:]
  dist = numpy.sqrt(numpy.sum(numpy.square(v), axis=1))
  for j in numpy.nonzero(dist > 1.4)[0]:
    print j, i+j
"
product of arrays of different sizes in numpy,"np.exp(x[..., None] * y[None, ...])
"
Index of matching rows in Pandas DataFrame [Python],"In [199]: df1.reset_index().merge(df2.reset_index(), on=['a','b'])
Out[199]:
   index_x  a  b  index_y
0        1  9  1       17
1        3  4  0        4
"
Creating array from CSV in Python while limiting columns used,"fid = open('out.txt')  # Just copy what you put in your question inside a file.
l = fid.readlines()  # Read the whole file into a list.
d = {}  # create a dictionary.
for i in l:
    s = i.split()  # split the list using spaces (default)
    d[s[0]] = [int(s[j]) for j in range(1,len(s))] # list comprehension to transform string into its for you number lists.

print(d)
"
Python Class Objects Attribute Referencing,"class b:
    def __init__(self):
        self.attribute_function = None

class a:
    def __init__(self):
        self._temp = 10
        self.counter = 0

    def temp(self):
        obj = b()
        obj.attribute_function = lambda self=self: self.counter < self._temp
        return obj.attribute_function()


if __name__ == ""__main__"":
    obj = a()
    print obj.temp()
"
Iterating through tuples to count values in list,"[Counter(site) for site in zip(*myDict.values())]
"
Loop through netcdf files and run calculations - Python or R,"from pylab import *
import netCDF4

f = netCDF4.MFDataset('/usgs/data2/rsignell/models/ncep/narr/air.2m.19??.nc')
# print variables
f.variables.keys()

atemp = f.variables['air']
print atemp

ntimes, ny, nx = shape(atemp)
cold_days = zeros((ny,nx),dtype=int)

for i in xrange(ntimes):
    cold_days += atemp[i,:,:].data-273.15 < 0

pcolormesh(cold_days)
colorbar()
"
Graph traversal with Networkx (Python),"import pylab as p
import networkx as nx

G = nx.Graph()
G.add_edge(""A"",""B"")
G.add_edge(""A"",""H"")
G.add_edge(""H"",""C"")
G.add_edge(""B"",""C"")
G.add_edge(""B"",""D"")

nx.draw(G)
p.show()
"
Reading a Line From File Without Advancing [Pythonic Approach],"def peek(f, length=1):
    pos = f.tell()
    data = f.read(length) # Might try/except this line, and finally: f.seek(pos)
    f.seek(pos)
    return data

print peek(f, 4) # cat1
print peek(f, 4) # cat1
"
Date Time split in python,"import datetime

string = ""19 Nov 2015  18:45:00.000""
date = datetime.datetime.strptime(string, ""%d %b %Y  %H:%M:%S.%f"")

print date
"
How to mixing two dictionaries in Python?,"for code, (name, num) in dict3.items(): 
    print(code, name, num)
"
Python: format datetime efficiently whilst leaving it as a datetime object,"now = datetime.datetime.now()
now_frmt = now - datetime.timedelta(microseconds=now.microsecond)
"
How to use a bash variable in python,">>> import os
>>> os.environ['IP'] 
"
python help django navigation,">>> help('help')

Welcome to Python 2.5!  This is the online help utility.
....
"
Append a NumPy array to a NumPy array,"In [1]: import numpy

In [2]: a = array([[1,2,3],[4,5,6]])

In [3]: b = array([[9,8,7],[6,5,4]])

In [4]: numpy.concatenate((a,b))
Out[4]: 
array([[1, 2, 3],
       [4, 5, 6],
       [9, 8, 7],
       [6, 5, 4]])
"
How should I get my Tkinter IRC client to continuously read data from the IRC server?,"# python3 source code
from tkinter import *
from tkinter.ttk import *
import threading
import time
import queue


root = Tk()
msg = StringVar()
Label(root, textvariable=msg).pack()

# This is our own event queue, each element should be in this form:
# (function_to_be_called_from_gui_thread, function_arguments)
# In python, functions are objects and can be put in a queue.
my_event_queue = queue.Queue()


def worker():
    """"""
    This is a time consuming worker, it takes 1 second for each task.
    If you put such a worker in the GUI thread, the GUI will be blocked.
    """"""
    task_counter = 0
    while True:
        time.sleep(1)  # simulate a time consuming task

        # show how many tasks finished in the Label. We put this action in my_event_queue instead of handle
        # it from this worker thread which is not safe. This action will be handled by my_event_handler which is
        # called from GUI thread.
        my_event_queue.put((msg.set, '{} tasks finished.'.format(task_counter)))
        task_counter += 1


def my_event_handler():
    """"""
    Query my_event_queue, and handle one event per time.
    """"""
    try:
        func, *args = my_event_queue.get(block=False)
    except queue.Empty:
        pass
    else:
        func(*args)

    # At last schedule handling for next time.
    # Every 100 ms, my_event_handler will be called
    root.after(100, my_event_handler)


threading.Thread(target=worker, daemon=True).start()  # start worker in new thread

my_event_handler()  # start handler, after root.mainloop(), this method will be called every 100ms. Or you can use root.after(100, my_event_handler)

root.mainloop()
"
How to sort a Python dictionary by value?,"sorted(list(a_dict.items()), key=lambda item: item[1][1])"
Sampling from a bounded domain zipf distribution,"import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt

N = 7
x = np.arange(1, N+1)
a = 1.1
weights = x ** (-a)
weights /= weights.sum()
bounded_zipf = stats.rv_discrete(name='bounded_zipf', values=(x, weights))

sample = bounded_zipf.rvs(size=10000)
plt.hist(sample, bins=np.arange(1, N+2))
plt.show()
"
Python Pandas - Cannot Merge Multiple DataFrame returning NaN,"import pandas as pd

AvgPrice = pd.read_csv('csv/BAVERAGE-USD-Bitcoin24hPrice.csv', 
                       index_col=False, 
                       parse_dates=['Date'],
                       usecols=[0,1],
                       header=0, 
                       names=['Date','Price'])

TransVol = pd.read_csv('csv/BCHAIN-ETRAV-BitcoinEstimatedTransactionVolume.csv', 
                       index_col=False, 
                       parse_dates=['Date'],
                       header=0, 
                       names=['Date','TransactionVolume'])


TotalBTC = pd.read_csv('csv/BCHAIN-TOTBC-TotalBitcoins.csv', 
                       index_col=False, 
                       parse_dates=['Date'],
                       header=0, 
                       names=['Date','TotalBTC'])


USDExchVol = pd.read_csv('csv/BCHAIN-TRVOU-BitcoinUSDExchangeTradeVolume.csv', 
                       index_col=False,
                       parse_dates=['Date'],
                       header=0, 
                       names=['Date','USDExchange Volume'])
"
how to change values in a nested list depending on elements of two other different lists and function is difficult to read,"def message_to_bits(msg):
    result = 0
    for c in msg:
        result = (result << 8) | ord(c)
    return result

def get_bit(num, position):
    return num & (1 << position)

def set_bit_on(num, position):
    return num | (1 << position)

def set_bit_off(num, position):
    return num & ~(1 << position)

def set_bit(num, value, position):
    if value:
        return num | (1 << position)
    else:
        return num & ~(1 << position)

def encode(nested_list_thing, key):
    key_bits = message_to_bits(key)
    key_length = 8 * len(key)
    print ('key: {:0%db}' % key_length).format(key_bits)

    # Mask keeps track of which bit in
    # key_bits we are using to set the value of
    mask = 1 << (key_length - 1)

    result = []
    for list_ in nested_list_thing:
        encoded_list = []

        for tuple_ in list_:
            encoded_tuple = []

            for num in tuple_:
                # Encode the number
                set_to_bit = key_bits & mask
                encoded_num = set_bit(num, set_to_bit, 0)
                encoded_tuple.append(encoded_num)
                # Move to next position in key_bits
                mask = mask >> 1
            encoded_list.append(tuple(encoded_tuple))
        result.append(encoded_list)
    return result

image = [[(15, 103, 225), (0, 3, 19)],
        [(22, 200, 1), (8, 8, 8)],
        [(0, 0, 0), (5, 123, 19)]]
key = 'hello'
print encode(image, key)
"
Dictionary help in Python,"class GradeBook(dict):
    def __getitem__(self,key):
        return dict.__getitem__(self,key//10)

    def __missing__(self,key):
        if key > 9:
            return 'A'
        elif key < 5:
            return 'F'

d = GradeBook(zip(range(5,10),'FDCBA'))
print d[100]
print d[45]
print d[120]
print d[45.2]
print d[72.8]
"
How to update the the class type and methods in an existing object,"import types

class ClassA(object):
    def Test(self):
        print 'haha'

obj = ClassA()
obj.Test()
# haha
"
Ruby equivalent of python nonlocal,"counter = -> {
  x = 0
  ->y {
    x += y
    puts x
  }
}

i = counter.()

i.(2)
# 2

i.(3)
# 5
"
How to create a list with strings and integers as its elements?,">>> t = raw_input(""Enter list items: "")
Enter list items: 1 hello 2 world
>>> l = [int(x) if x.isdigit() else x for x in t.split()]
>>> l
[1, 'hello', 2, 'world']
>>>
"
Using multiple lists with formulas,"w, h = [3.11, 4.2, 5.66, 6], [1.1, 2.33, 3.222, 4.23]

def formula(w, h):
    return (h/2.0) + ((w**2) / (8.0*h))

print map(formula, w, h)
# [1.6491022727272726, 2.1113519313304723, 2.853846058348852, 3.1788297872340427]
"
Which Python Conditional Return Statement Is The Most Pythonic?,"return conditional
"
Retrieving versions of a file,"from subprocess import Popen, PIPE

p = Popen(['git', '-C', path_to_my_repository, 'show',
        'master@{' + date_string + '}:' + path_to_file],
    stdin=PIPE, stdout=PIPE, stderr=PIPE)

# Content will be in `output`
output, err = p.communicate()
"
Searching a more elegant way for converting a byte to a list of bits,">>> byte = 0xFC
>>> list_size = 8
>>> [(byte & (1 << (list_size - 1 - k))) >> (list_size - 1 - k) for k in range(list_size)]
[1, 1, 1, 1, 1, 1, 0, 0]
"
Translating timestamp to Human Readable format,"from datetime import datetime
from pytz import timezone, country_timezones, utc

_utc = utc
dte = ""2002-08-22T10:00:00Z""
utc = datetime.strptime(dte, ""%Y-%m-%dT%H:%M:%SZ"").replace(tzinfo=_utc)
coun_to_tz = {tz: coun for coun, v in country_timezones.items() for tz in v}

for _tz, coun in coun_to_tz.items():
    tz = timezone(_tz)
    dt = utc.astimezone(tz)
    if str(dt.time()) == ""00:00:00"":
        print(coun)
        print(dt)
        print(_tz)
"
Press enter as command input,"x = subprocess.Popen('sh abc.sh',
                 shell=True,
                 stdout=subprocess.PIPE,
                 stdin=subprocess.PIPE)

...

x.stdin.write('\n')
"
Remove duplicates from json data,"all_ids = [ each['obj_id'] for each in ds ] # get 'ds' from above snippet
unique_stuff = [ ds[ all_ids.index(id) ] for id in set(ids) ]
"
How can I store data to a data dictionary in Python when headings are in mixed up order,"school = None
headers = None
data = {}
for line in text.splitlines():
    if line.startswith(""school id""):
        school = line.split('=')[1].strip()
        headers = None
        continue
    if school is not None and headers is None:
        headers = line.split('|')
        continue

    if school is not None and headers is not None and line:
        if not school in data:
            data[school] = []
        datum = dict(zip(headers, line.split('|')))
        data[school].append(datum)    
"
converting integer to list in python,list(str(123))
Dynamic programming for primitive calculator,"# only modified function print_solution(n) and solve(n)

def print_solution(n):
    ans = []
    while f(n)[1] != -1:
        ans.append(n)
        n = f(n)[1]
    ans.append(1)
    ans.reverse()
    for x in ans:
        print x,

def solve(n):
    for i in range(1, n):
        f(i)[0]
    print_solution(n)
    print ''

solve(96234) # 1 3 9 10 11 22 66 198 594 1782 5346 16038 16039 32078 96234 
"
How to reindex a dataframe specifying center,"In [132]: df = pd.DataFrame([1,1,1,1], index=pd.date_range('1/1/2013',periods=4))

In [133]: target_zero_row = df.index.get_loc('2013-01-04')

In [134]: df.index = pd.np.arange(df.shape[0]) - target_zero_row

In [135]: df
Out[135]: 
    0
-3  1
-2  1
-1  1
 0  1

[4 rows x 1 columns]
"
How to add x seconds to a Python datetime64[ns] field?,"In [349]: df.apply(lambda x: x['sent'] + np.timedelta64(x['tz_offset'], 's'), axis=1)
Out[349]:
0   2011-01-01 00:00:02
1   2011-01-01 00:01:00
2   2011-01-01 00:02:04
3   2011-01-01 00:03:00
4   2011-01-01 00:04:04
5   2011-01-01 00:05:04
6   2011-01-01 00:06:04
7   2011-01-01 00:07:01
8   2011-01-01 00:08:04
9   2011-01-01 00:09:04
dtype: datetime64[ns]
"
return duplicates in a list,">>> from collections import Counter
>>> lst = [1, 3, 5, 7, 9, 5, 3, 5, 3]
>>> def duplicates(list_of_numbers):
...    counter = Counter(list_of_numbers)
...    return [y for y in counter if counter[y] > 1]
... 
>>> duplicates(lst)
[3, 5]
"
Using Tensors in control flow and conditional statements,"if_true = lambda: ...  # Value to return if `myCondition` is true
if_false = lambda: ...  # Value to return if `myCondition` is false

result = tf.cond(myCondition, if_true, if_false)
"
Python - How to store a socket and a username in a list?,"l = list()
l.add(tuple(username, socket))

print l[0][0], l[0][1] # will print username and soket of first item
"
find last occurence of multiple characters in a string in Python,max(test_string.rfind(i) for i in '([{')
Python - check for combination of items in list of tuples,"[x for x in A if not any([set(y).issubset(set(x)) for y in B])]
"
Relooping the list,"for i, x in zip(range(index + 1), itertools.cycle(lst)):
    print i, x
"
Initialising a vector field in numpy,"rx, ry = y - cx, x - cy
r = np.hypot(rx, ry)
v2 = s * np.dstack((-ry, rx)) / r[..., None]
v2[np.isnan(v2)] = 0
"
'and' operator in string.contains,"df['column_name'].str.contains('test1|test2')
"
Python QuickSort returning original input,"def quicksort(A):
    if len(A) > 1:
        pivot = A[0]
        L = []
        E = []
        R = []
        for i in A:
            if i < pivot:
                L.append(i)
            elif i == pivot:
                E.append(i)
            else:
                R.append(i)
        L = quicksort(L)
        R = quicksort(R)
        return L + E + R
    return A
"
Sorting a list of lists by item frequency in Python 2.3,"mylist.sort(key=lambda sl: (sl.count('YES') + sl.count('MAYBE'), -sl.count('NO')), reverse=True)
"
Eliminating redundant function calls in comprehensions from within the comprehension,"def firstTwoWords(strings):
    return [s.split()[:2] for s in strings]
"
date_range not accepting the variable I want to use?,"from datetime import datetime, timedelta

def last_n_months(num_of_months, start_date=datetime.now(), include_curr=True):
    f = ""%Y-%m""
    curr = start_date
    if include_curr:
        yield curr.strftime(f)
    for num in range(num_of_months):
        curr = curr.replace(day=1) - timedelta(days=1)
        yield curr.strftime(f)

# This month and last 12 months.
print [m for m in last_n_months(12)]
# ['2015-11', '2015-10', '2015-09', '2015-08', '2015-07', '2015-06', '2015-05', '2015-04', '2015-03', '2015-02', '2015-01', '2014-12', '2014-11']

# Last 12 months only.
print [m for m in last_n_months(12, include_curr=False)]
# ['2015-10', '2015-09', '2015-08', '2015-07', '2015-06', '2015-05', '2015-04', '2015-03', '2015-02', '2015-01', '2014-12', '2014-11']    

# Last 12 months from custom date, exclude custom date.
d = datetime(2012, 6, 1)
print [m for m in last_n_months(12, d, False)]
# ['2012-05', '2012-04', '2012-03', '2012-02', '2012-01', '2011-12', '2011-11', '2011-10', '2011-09', '2011-08', '2011-07', '2011-06']
"
How can I return a text fragment from an XPath function?,"from lxml import etree

def myFunc(context, parm):
  em = etree.Element('em')
  em.text = 'text'
  return ['some sample ', em]
"
"How to print all variables values when debugging Python with pdb, without specifying each variable?",">>> zip(dir(), [eval(var) for var in dir()])[-4:]
[('a', 10), ('var', 'var'), ('x', 30), ('y', 50)]
"
Python: How to check if a variable is equal to one string or another string,"if var in ('stringone', 'stringtwo'):
    dosomething()
"
Converting strings to integers then ordering them in an list with strings,">>> int(lis[0].split("":"")[1])
>>> 5

#or  

>>> int(lis[0].split()[1]) 
>>> 5
"
Python and Numeric/numpy Array Slicing Behavior,">>> a = array([[1,2,3],[4,5,6]])
>>> a[:]             # (which actually becomes a[0:2^31-1])
[[1,2,3],[4,5,6]]    # correct, expect the entire array
"
Most pythonic way to reorder repeating list,"print sorted(l, key=lambda item: int(item[1:]))
"
Identifying multiple columns by name in Pandas,"df.filter(regex=r'\.Length$', axis=1)
"
processing a set of unique tuples,"        types = tuple(type_ for _, _, type_ in items)
        yield (name, id_) + types
"
Check if the list is empty,">>> import timeit
>>> all = """"""l = list(range(100))
... rl = list(reversed(range(100)))
... """"""
>>> tim = all + """"""def gt(nums, n):
...     if not nums:
...         return False
...     return max(nums) > n""""""
>>> gnibbler = all + """"""def gt(nums, n):
...     return any(x>n for x in nums)""""""
>>> burhan = all + """"""def gt(nums, n):
...   return max(nums) > n if nums else False""""""
>>> # Test with the condition being False:
... timeit.timeit(setup=tim, stmt=""gt(l, 100)"")
3.011574096311698
>>> timeit.timeit(setup=gnibbler, stmt=""gt(l, 100)"")
8.00847921677337
>>> timeit.timeit(setup=burhan, stmt=""gt(l, 100)"")
2.9805757305956178
>>> timeit.timeit(setup=tim, stmt=""gt(rl, 100)"")
2.8600606448831307
>>> timeit.timeit(setup=gnibbler, stmt=""gt(l, 100)"")
7.997938412127745
>>> timeit.timeit(setup=burhan, stmt=""gt(l, 100)"")
3.032805185133668
>>> # Now what if the condition is True?
... timeit.timeit(setup=tim, stmt=""gt(l, 98)"")
2.98623750798793
>>> timeit.timeit(setup=gnibbler, stmt=""gt(l, 98)"")
8.265056412191534
>>> timeit.timeit(setup=burhan, stmt=""gt(l, 98)"")
2.9731271156252888
>>> timeit.timeit(setup=tim, stmt=""gt(rl, 98)"")
2.8777295865334764
>>> timeit.timeit(setup=gnibbler, stmt=""gt(rl, 98)"")
1.0481696827076092
>>> timeit.timeit(setup=burhan, stmt=""gt(rl, 98)"")
2.8776150752220246
"
How to avoid redundancy between c++ and boost::python docs?,"import re
import sys

def parse_doc_string(istr):
    pattern = re.compile(r'@(\w+)\s+(.*)')
    docstring = list()
    for line in map(lambda s : s.strip(), istr):
        if line == '/**':
            continue
        if line == '*/':
            return docstring
        line = line.lstrip('* ')
        match = pattern.match(line)
        if match:
            docstring.append((match.group(1), match.group(2)))

def extract(istr, docstrings):
    pattern = re.compile(r'^//\s*DocString:\s*(\w+)$')
    for line in map(lambda s : s.strip(), istr):
        match = pattern.match(line)
        if match:
            token = match.group(1)
            docstrings[token] = parse_doc_string(istr)

def format_doc_string(docstring):
    return '\n'.join('{}: {}'.format(k, v) for (k, v) in docstring)

def escape(string):
    return string.replace('\n', r'\n')

def substitute(istr, ostr, docstrings):
    pattern = re.compile(r'@DocString\((\w+)\)')
    for line in map(lambda s : s.rstrip(), istr):
        for match in pattern.finditer(line):
            token = match.group(1)
            docstring = format_doc_string(docstrings[token])
            line = line.replace(match.group(0), escape(docstring))
        print(line, file=ostr)

if __name__ == '__main__':
    sourcefile = sys.argv[1]
    docstrings = dict()
    with open(sourcefile) as istr:
        extract(istr, docstrings)
    with open(sourcefile) as istr:
        with sys.stdout as ostr:
            substitute(istr, ostr, docstrings)
"
Execute function without sending 'self' to it,"class Foo(object):
    global_cache={}
    @classmethod
    def set(cls, key, value):
        cls.global_cache[key] = value
"
Python: Optimise For loops using list-comprehension,"from functools import partial
heatmap_rgba = partial(cmap.to_rgba, alpha=0.5, bytes=True)
heatmap_color = [map(heatmap_rgba, c) for c in heatmap]
"
"Matching all links, except the ones at the beginning in parentheses","from itertools import dropwhile

def get_links(s):
    without_paren = r'<a href=""(?P<WITHOUT_PAREN>[^""]+)"">'
    with_paren = r'\(.*?<a href=""(?P<WITH_PAREN>[^""]+)"">.*?\)'
    master_pattern = with_paren + '|' + without_paren  # try with_paren first
    it = re.finditer(master_pattern, s)
    # Drop matches in `it` until we hit the first without_paren match
    # and yield every match from there onwards
    for mo in dropwhile(lambda mo: mo.lastgroup == 'WITH_PAREN', it):
        yield mo.group(mo.lastgroup)
"
Merge/Join 2 DataFrames by complex criteria,"from scipy.spatial import cKDTree as KDTree
import pandas as pd

# for each row in df2, we want to join the nearest row in df1
# based on the column ""d""
join_cols = ['d']
tree = KDTree(df1[join_cols])
distance, indices = tree.query(df2[join_cols])
df1_near_2 = df1.take(indices).reset_index(drop=True)

left = df1_near_2.rename(columns=lambda l: 'x_' + l)
right = df2.rename(columns=lambda l: 'y_' + l)
merged = pd.concat([left, right], axis=1)
"
Python string to unicode," a=""\u2026""
"
Setting special methods using setattr(),">>> class Example (object):
...     pass
... 
>>> example = Example()
>>> setattr(Example, '__getitem__', lambda x, y: 1)
>>> example['something']
1
"
Use `unittest` to verify that the `exit` function was called,"import sys
import unittest


def func():
    sys.exit()


class MyTest(unittest.TestCase):

    def test_func(self):
        self.assertRaises(SystemExit, func)


if __name__ == ""__main__"":
    unittest.main()
"
Pandas: Iteratively Extract Numpy Arrays From DataFrame,"In [34]:
df[df['user_id'].isin(df1['ids'])].groupby('user_id')['pos'].apply(lambda x: x.values)

Out[34]:
user_id
1520278540    [0.0, -0.1027]
1520303294          [0.4404]
1520304915     [0.3612, 0.0]
Name: pos, dtype: object
"
Drawing Lines and Limiting Them by Screen Size in Python Turtle Graphics,"import turtle  

bob = turtle.Turtle()
xx,yy= turtle.window_width(), turtle.window_height() 
print 'window size: ',xx,yy
bob.speed(15)

stl=int(raw_input(""Please enter length of first side: ""))   

while stl>turtle.window_width()/2:
    stl=int(raw_input(""Please enter a shorter length that will fit into the window: ""))

dec=int(raw_input(""Please enter the change in length per iteration: ""))   


while stl > dec:
    bob.forward(stl)
    bob.right(90)
    stl= stl- dec

turtle.done()
"
Common elements between two lists of lists (intersection of nested lists),"t1 = [[3, 41], [5, 82], [10, 31], [11, 34], [14, 54]]
t2 = [[161, 160], [169, 260], [187, 540], [192, 10], [205, 23], [3,41]]

nt1 = map(tuple, t1)
nt2 = map(tuple, t2)

st1 = set(nt1)
st2 = set(nt2)

print st1.intersection(st2)
"
Can't extract text from html using SoupStrainer,"# TEXT is the text you want to find, or you combine it with re like the above example
for link in soup.findAll('a', href=True, text='TEXT'):
"
Return value while executing paralel processes with python,"from multiprocessing import *
import time


def main():
    processes = 10
    array, loops = list(range(1000)), 1000
    shared = Array('I', processes)
    p_array = []
    for index in range(processes):
        p = Process(target=sample, args=(array, loops, shared, index))
        p.start()
        p_array.append(p)
    while True:
        less_than_1000 = [p for p in enumerate(shared[:]) if p[1] < 1000]
        if less_than_1000:
            print(less_than_1000)
            time.sleep(0.001)
        else:
            break
    print('No process in less than 1000')
    for p in p_array:
        p.join()
    print(shared[:])


def sample(array, loops, p_array, index):
    time.sleep(1)
    for number in range(loops):
        time.sleep(0.001)
        p_array[index] = number * 10
    print('Sample is done')

if __name__ == '__main__':
    main()
"
How to separate filename from path in python (PyQt4.QtCore.QString),"os.path.basename(unicode(my_path))
"
python pandas: apply a function with arguments to a series. Update,"a['x'].apply(lambda x, y: x + y, args=(100,))"
Determining which Dictionary matches my dictionary class in python,"main_dict={
    'dictrefA':{
      ""operation_module"":""cbs"",
      ""operation_group"":""xxx"",
      ""operation_type"":""yyy""},
    'dictrefB':{
      ""operation_module"":""cbs"",
      ""operation_group"":""xxx"",
      ""operation_type"":""yyy1""},
    'dictrefC':{
      ""operation_module"":""cbs"",
      ""operation_group"":""xxx1"",
      ""operation_type"":""yyy1""}
      }

recievedDict={
    ""msg_id"":100,
    ""operation_module"":""cbs"",
    ""operation_group"":""xxx"",
    ""operation_type"":""yyy1"",
    ""user_name"":""venkat"",
    ""msg_length"":50}

for x,y in main_dict.items():
    if all(v in recievedDict.items() for v in y.items()):
        print x
        break
"
word ladder in python,"import string

def allsimilar(word, valid):
  wl = list(word)
  for i, c in enumerate(wl):
    for x in string.ascii_lowercase:
      if x == c: continue
      wl[i] = x
      nw = ''.join(wl)
      if valid(nw): yield nw
    wl[i] = c
"
How to efficiently convert the entries of a dictionary into a dataframe,"d=[(k, s) for k, v in mydict.items() for s in v.split()]
df = pd.DataFrame(d, columns=['key_val','splitted_words'])
"
Remove elements from Spark RDD,"def myParser(line):
    try:
        # do something
        return [result] # where result is the value you want to return
    except:
        return []

sc.textFile('path_to_file').flatMap(myParser)
"
Iterating over a list while incrementing another variable at the same time,"{char:i for char,i in zip(ascii_lowercase, range(1,27))}
"
Aggregate and fill data for missing dates (days and hours),"from collections import defaultdict, OrderedDict                              
from datetime import datetime, timedelta                                      
from itertools import chain, groupby                                          

flat = sorted((datetime.strptime(d, '%m-%d-%Y-%H-%M').date(), f, c)           
              for (d, f, c) in chain(*A))                                     
counts = [(d, f, sum(e[2] for e in l))                                        
          for (d, f), l                                                       
          in groupby(flat, key=lambda t: (t[0], t[1]))]                       

# lets assume that there are some data                                        
start = counts[0][0]                                                          
end = counts[-1][0]                                                           
result = OrderedDict((start+timedelta(days=i), defaultdict(int))             
                     for i in range((end-start).days+1))                      
for day, data in groupby(counts, key=lambda d: d[0]):                         
    result[day].update((f, c) for d, f, c in data)
"
Calculating the Fisher criterion in Python,"import numpy as np

def fisher_criterion(v1, v2):
    return abs(np.mean(v1) - np.mean(v2)) / (np.var(v1) + np.var(v2))
"
Add unspecified options to cli command using python-click,"import click

@click.command(name='my-cmd', context_settings=dict(
    ignore_unknown_options=True,
    allow_extra_args=True,
))
@click.option('--option1')
@click.option('--option2')
@click.pass_context
def cli(ctx, option1, option2):
    click.echo({ctx.args[i][2:]: ctx.args[i+1] for i in xrange(0, len(ctx.args), 2)})
"
Append a list of arrays as column to pandas Data Frame with same column indices,"In [33]: L = list(item for item in range(10))

In [34]: A = list(item for item in range(10,20))

In [35]: data_frame = pd.DataFrame(L,columns=['L'])

In [36]: data_frame['A'] = pd.Series(A, index=data_frame.index)

In [37]: print data_frame

   L   A
0  0  10
1  1  11
2  2  12
3  3  13
4  4  14
5  5  15
6  6  16
7  7  17
8  8  18
9  9  19
"
Django 1.6 models.Manager Complaining about to many values to unpack,"def date_search_threads(self, date1, date2, **kwargs):
    print kwargs[""field""]
    date1 = datetime.datetime.strptime(date1, ""%m-%d-%Y"").date()
    date2 = datetime.datetime.strptime(date2, ""%m-%d-%Y"").date()
    date2 = date2 + datetime.timedelta(days=1)

    param_filter = {'{}__range'.format(kwargs[""column""]): (date1, date2)}
    if 'field' in kwargs:
        field = kwargs['field'].split('=')  
        param_filter[field[0]] = field[1]
    return super(ListAllObjectsManager, self).get_queryset().filter(**param_filter))
"
How to use Pillow instead cv2?,"from PIL import Image
import numpy as np

im = np.array(Image.open('pic.jpg'))
"
dealing with an empty list inside a list,"for sublist in mylist:
    if sublist is None:
        #what to do with None
        continue
    elif not sublist and isinstance(sublist, list):
        #what to do if it's an empty list
        continue
    elif not isinstance(sublist, list):
        #what to do if it's not a list
        continue
    #what to do if it's a list and not empty
"
Pandas: Iteratively Extract Numpy Arrays From DataFrame,"In [37]:
type(df[df['user_id'].isin(df1['ids'])].groupby('user_id')['pos'].apply(lambda x: x.values).iloc[0])

Out[37]:
numpy.ndarray
"
Adding test methods dynamically using decorator,"class sub_test_data(object):

    def __init__(self, *test_data):
        self.test_data = test_data

    def __call__(self, func):
        func.sub_test_data = self.test_data
        func.has_sub_tests = True
        return func

def create_test_driver(func, *args):
    def test_driver(self):
        try:
            func(self, *args)
        except AssertionError as e:
            e.args += ({""test_args"": args},)
            raise
    return test_driver  

def create_sub_tests(cls):
    for attr_name, func in list(vars(cls).items()):
        if getattr(func, ""has_sub_tests"", False):
            for i, value in enumerate(func.sub_test_data):
                test_name = 'test_{}_subtest{}'.format(attr_name, i)
                setattr(cls, test_name, create_test_driver(func, value))
    return cls

@create_sub_tests
class NumbersTest(unittest.TestCase):
    tickets = [0, 1, 2, 3, 4, 5]

    @sub_test_data(*tickets)
    def even(self, t):
        self.assertEqual(t % 2, 0)
"
SQLAlchemy return model from outerjoin,"a = aliased(Model, name=""a"")
b = aliased(Model, name=""b"")
q = (
    session
    .query(a)
    .outerjoin(b, and_(a.pk == b.pk, b.insert_date < task_date))
    .filter(a.insert_date == task_date)
    .filter(b.pk == None)
    # or: .filter(b.pk != None)
)
"
Setting default property value in graph_tool,"import graph_tool.all as gt
g = gt.Graph()

# Initialize property foo with False value
g.vp['foo'] = g.new_vertex_property('bool')

# How many vertices satisfy property foo
sum(g.vp['foo'].a)
"
extra empty element when removing an element from a tuple,"In [21]: type((1,))
Out[21]: tuple
"
What is function.__code__ behavior across multiple program executions?,"python -m dis test.py
"
Python Getting mixed results.,"for line in open('Gin.txt'):    #Will be corrected later..
    if Q.lower() in line.lower():
        print line 
        break
else:
    print ""Found nothing. Did you spell it correct?""
"
Generating a list of tuples and using it,"def read_file(name):
    with open(name) as in_fil:
        return [[item.strip() for item in l.rstrip().split("";"")] for l in in_fil]
"
Creating formula based on binary tree leaves,"def used(points, n):
  if points[n] is None:
    return { n }
  a, b, operator = points[n]
  return used(points, a) | used(points, b)

print used(points, 10)
"
Pandas DataFrame - Combining one column's values with same index into list,"result = gb['Value'].unique()
type(result)
#pandas.core.series.Series

result = result.reset_index()
type(result)
#pandas.core.frame.DataFrame
"
Python MySQLdb placeholders syntax,"query = """"""UPDATE animal SET name = %s
           WHERE name = %s
           """"""
values = (""snake"", ""turtle"")

cursor.execute(query, values)
cursor2.execute(query, values)
"
How to avoid line color repetition in matplotlib.pyplot?,"pyplot.plot(x, y, color='#112233')"
What is the Python equivalent of Perl's ucfirst() or s///e?,"s = ""i'm Brian, and so's my wife!""
print s[0].upper() + s[1:]
"
Extracting float numbers from file using python,">>> print [i for i in re.split(r'[\s\[\]]*',s) if i]
['-5.44339373e+00', '-2.77404404e-01', '1.26122094e-01', '9.83589873e-01', '1.95201179e-01', '-4.49866890e-01', '-2.06423297e-01', '1.04780491e+00', '4.34562117e-01', '-1.04469577e-01', '2.83633101e-01', '1.00452355e-01', '-7.12572469e-01', '-4.99234705e-01', '-1.93152897e-01', '1.80787567e-02']
"
How can I add the outcome of a function to a list in python?,"a = int(input(""Look up to: ""))
print(filter(prime, range(0, a)))
"
To split strings using Python,"for e in csv.reader(st.splitlines(), **kwargs):
    e=[x.strip() for x in e]
    # ... process the split list of elements from a line of csv...
"
constant movement in pygame,"# set_repeat(delay, interval)
pygame.key.set_repeat(1, 10) 
# A delay of 0 disables the repeat.
# The lower the interval, the faster the movement would be.
"
Access parent namespace in python,"import inspect

def c():
    def a():
        frame = inspect.currentframe()
        print frame.f_back.f_locals

    def b():
        pass

    a()

c()
"
How to save a Data Frame column as a list? [Pandas],"df.phone_number.to_csv('phone_numbers.txt', index=False)
"
Automatic transformation from getter/setter to properties,"def make_properties(c):
    from collections import defaultdict
    props=defaultdict(dict)
    for k,v in vars(c).items():
        if k.startswith(""Get""):
            props[k[3:]]['getter']=v
        if k.startswith(""Set""):
            props[k[3:]]['setter']=v
    for k,v in props.items():
        setattr(c,k,property(v.get('getter'),v.get('setter')))
    return c

@make_properties
class C(object):
    def GetX(self):
        print ""GetX""
        return self._x

    def SetX(self, value):
        print ""SetX""
        self._x = value

c=C()
c.X=5
c.X
"
How can I speed up this really basic python script for offsetting lines of numbers,"for file in files:
    with open(file, ""r"") as currentfile, open(file[:-4]+""_RGB_moved.pts"", ""w"") as out:
        firstline = next(currentFile)
        out.write(firstline.split(None, 1)[0])

        for line in currentfile:
            out.write('\n')
            words = line.split()
            newwords = [str(float(words[0])+offsetx), str(float(words[1])+offsety), words[2], str((int(words[3]) + 2050) / 2)]              
            out.write("" "".join(newwords))
"
For loops and else statements in Python,"element = 9
container = set(range(1, 10))

print(""Match Found."" if element in container else ""Match Not Found."")
"
join two lists of dictionaries on a single key,"from collections import defaultdict

l1 = [{""index"":1, ""b"":2}, {""index"":2, ""b"":3}, {""index"":3, ""green"":""eggs""}]
l2 = [{""index"":1, ""c"":4}, {""index"":2, ""c"":5}]

d = defaultdict(dict)
for l in (l1, l2):
    for elem in l:
        d[elem['index']].update(elem)
l3 = d.values()

# l3 is now:

[{'b': 2, 'c': 4, 'index': 1},
 {'b': 3, 'c': 5, 'index': 2},
 {'green': 'eggs', 'index': 3}]
"
How can I use python command line arguments that change at run time?,">>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo')
_StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)
>>> parser.parse_known_args(['--foo', '42', '--spam', 'eggs'])
(Namespace(foo='42'), ['--spam', 'eggs'])
"
python function capitalize first letter only,"def convert(capital):
    index = 0
    while index < len(capital) and not capital[index].isalpha():
        index += 1
    return capital[:index] + capital[index:].capitalize()
"
specify list of floats in argparse,">>> import argparse
>>> parser = argparse.ArgumentParser(description='Process some floats.')
>>> parser.add_argument(""-e"", nargs=6, metavar=('a', 'b', 'c', 'd', 'e', 'f'),
...                         help=""my help message"", type=float,
...                         default=None)
_StoreAction(option_strings=['-e'], dest='e', nargs=6, const=None, default=None, type=<type 'float'>, choices=None, help='my help message', metavar=('a', 'b', 'c', 'd', 'e', 'f'))
>>> try:
...     parser.parse_args('-e 1.0 2.0 3.33 4.45 5.15 6.0'.split())
... except SystemExit:
...     pass
... 
Namespace(e=[1.0, 2.0, 3.33, 4.45, 5.15, 6.0])
>>> try:
...     parser.parse_args('-e foo bar baz spam ham eggs'.split())
... except SystemExit:
...     pass
... 
usage: [-h] [-e a b c d e f]
: error: argument -e: invalid float value: 'foo'
"
How to make simplejson serializable class,"class SerializerRegistry(object):
    def __init__(self):
        self._classes = {}
    def add(self, cls):
        self._classes[cls.__module__, cls.__name__] = cls
        return cls
    def object_hook(self, dct):
        module, cls_name = dct.pop('__type__', (None, None))
        if cls_name is not None:
            return self._classes[module, cls_name].from_dict(dct)
        else:
            return dct
    def default(self, obj):
        dct = obj.to_dict()
        dct['__type__'] = [type(obj).__module__,
                           type(obj).__name__]
        return dct

registry = SerializerRegistry()

@registry.add
class A(object):
    def __init__(self, item1):
        self.item1 = item1
    def __repr__(self):
        return str(self.__dict__)
    def to_dict(self):
        return dict(item1=self.item1)
    @classmethod
    def from_dict(cls, dct):
        return cls(**dct)

s = json.dumps(A(1), default=registry.default)
a = json.loads(s, object_hook=registry.object_hook)
"
Python nested for loop in RGB average,"H, W, b = masked_img.shape
for i in range(0,H,1):
   for j in range(0,W,1):
    if masked_img[i,j,0] > 1 or masked_img[i,j,1] > 1 or masked_img[i,j,2] > 1:
        meanblue = meanblue + masked_img[i,j,0]
        meangreen = meangreen + masked_img[i,j,1]
        meanred = meanred + masked_img[i,j,2]
        count = count+1
"
python : convert string to time object,"# %z is supported in Python 3.2 onwards. Older versions of python don't support that.
from datetime import datetime
date = '2014-12-18T19:00:00-07:00'
format = ""%Y-%m-%dT%H:%M:%S%z""
datetime_obj = datetime.strptime(date, format)
print datetime_obj.strftime(format)
"
random forest with characters in scikit-learn/python,"from sklearn.preprocessing import LabelEncoder
import pandas as pd

data = pd.DataFrame()

data['age'] = [17,33,47]
data['gender'] = ['m','f','m']

enc = LabelEncoder()

print(data)
enc.fit(data['gender'])
data['gender'] = enc.transform(data['gender'])
print(data)
"
Having trouble with decoding JSON in Python,"In [1]: import json

In [2]: s = '{""data"":{""internalName"":""value"",""int"":1}}'

In [3]: data = json.loads(s)

In [4]: print data
{u'data': {u'int': 1, u'internalName': u'value'}}

In [5]: data['data']['internalName']
Out[5]: u'value'
"
Python for loop syntax,"for story in json_obj[""list""][""story""]:
   # each iteration story become this
   # story = {'title': {'$text': 'some title2'}}
   print story[""title""][""$text""] 
"
Pythonic way of searching for a substring in a list,"matches = [s for s in mytext if 'foobar' in s]
"
algorithm translation to php or pseudocode from python for partition of an integer,"def partitions(n):
    # base case of recursion: zero is the sum of the empty list
    if n == 0:
        yield [] # yield empty array
        return # exit function

    # modify partitions of n-1 to form partitions of n
    for p in partitions(n-1): # recursive call, get n-1 partitions
        yield [1] + p # yield array [1, p...]
        if p and (len(p) < 2 or p[1] > p[0]): # p not empty, and length < 2 or p[1] > p[0]
            yield [p[0] + 1] + p[1:] # increment first item of p and yield p
"
Use dataframe column names as labels in pylab.plot,"import pandas as pd
import random
import matplotlib.pyplot as plt

x = [random.randint(10,20) for r in range(100)]
y = [random.randint(0,10) for r in range(100)]

df = pd.DataFrame([x,y]).T #T for transpose

df.columns=['a','b']

df.plot(kind='line')

plt.legend(loc='upper left')

plt.show()
"
Python beautiful soup issue,">>> from bs4 import BeautifulSoup
>>> soup = BeautifulSoup('''\
... <html><head>
...     <meta property=""og:country-name"" content=""South Africa""/>
...     <title>Foo</title>
... </head><body></body></html>''')
>>> country_meta = soup.find('meta', attrs={'property': 'og:country-name', 'content': True})
>>> country_meta
<meta content=""South Africa"" property=""og:country-name""/>
>>> print country_meta['content']
South Africa
"
Boolean expression with strings,"def IsConsecutive(string,pattern):
    return len(''.join(string.split(pattern))) == 0
"
Python: Find out what method on derived class called base class method,"class Controller(object):
    def __init__(self):
        self._output = {}

    def output(self, s, caller):
        method_that_called_me = caller.__name__
        self._output[method_that_called_me] = s

class Public(Controller):
    def about_us(self):
        self.output('Damn good coffee!',self.about_us)

    def contact(self):
        self.output('contact me',self.contact)
"
Process a perl script within a python script,"#!/usr/bin/env python
from subprocess import check_call

with open('input', 'rb', 0) as input_file, \
     open('output', 'wb', 0) as output_file:
    check_call([""perl"", ""script.pl"", ""/path/to/file1/""],
               stdin=input_file, stdout=output_file)
"
Remove all quotes within values in Pandas,"for i, col in enumerate(df.columns):
    df.iloc[:, i] = df.iloc[:, i].str.replace('""', '')
"
How to reformat a string that represents a big-endian into a MAC-Address format?,">>> ':'.join('{:02x}'.format(ord(ch)) for ch in '\x0a\xfa')
'0a:fa'
"
How do you define a variable in one function and change it in another with the first function recognizing it,"exit = False
while not exit:
    option = raw_input(""What would you like to do?"")
    if option == ""exit"":
        exit = True
"
Adding another column to a CSV file w/ python,"with open('C:/Users/User/OneDrive/Documents/Date.csv') as file1, \
     open('C:/Users/User/OneDrive/Documents/Price.csv') as file2, \
     open('C:/Users/User/OneDrive/Documents/Output.csv', 'w') as output:
    reader1 = csv.DictReader(file1)
    reader2 = csv.DictReader(file2)
    writer = csv.DictWriter(output, ['ID', 'Date', 'Price'])
    writer.writeheader()  # Optional if you want the header

    for row1, row2 in zip(reader1, reader2):
        row1.update(row2)
        writer.writerow(row1)
"
"BeautifulSoup: get elements that have a certain attribute, independent of its value","soup.find_all('div', id=False):
"
Python hide already printed text,"import colorama   # OR: from colorama import init
colorama.init()   # AND THEN: init()
"
Writing just the xml declaration to file using Python,"from xml.etree.ElementTree import ElementTree, Element, SubElement, tostring

root = Element('root')

l = ['a', 'b', 'c']
for ch in l:
    parent = SubElement(root,'parent')
    child = SubElement(parent, 'child')
    child.text = ch

document = ElementTree(root)
document.write('file.xml', encoding='utf-8', xml_declaration=True)
"
Make an object behave like a module - Python 3,"from contextlib import contextmanager

@contextmanager
def thrift_client():
    client, transport = thrift_connect()
    client.functions()
    try:   
        yield client
    finally:
        transport.close()
"
Printing a Tree data structure in Python,">>> root = node('grandmother')
>>> root.children = [node('daughter'), node('son')]
>>> root.children[0].children = [node('granddaughter'), node('grandson')]
>>> root.children[1].children = [node('granddaughter'), node('grandson')]
>>> root
<tree node representation>
>>> str(root)
""'grandmother'\n\t'daughter'\n\t\t'granddaughter'\n\t\t'grandson'\n\t'son'\n\t\t'granddaughter'\n\t\t'grandson'\n""
>>> print root
'grandmother'
    'daughter'
        'granddaughter'
        'grandson'
    'son'
        'granddaughter'
        'grandson'
"
Adding html tags to text of XML.ElementTree Elements in Python,"import xml.etree.ElementTree as ET


root = ET.Element('html')
table = ET.SubElement(root, 'table')
tr = ET.SubElement(table, 'tr')
td = ET.SubElement(tr, 'td')
td.text = ""This is the first line ""
# note how to end td tail
td.tail = None
br = ET.SubElement(td, 'br')
# now continue your text with br.tail
br.tail = "" and the second""

tree = ET.tostring(root)
# see the string
tree
'<html><table><tr><td>This is the first line <br /> and the second</td></tr></table></html>'

with open('test.html', 'w+') as f:
    f.write(tree)

# and the output html file
cat test.html
<html><table><tr><td>This is the first line <br /> and the second</td></tr></table></html>
"
How to get numpy array from multiple lists of same length and sort along an axis?,"from operator import itemgetter
zipped = sorted(zip(a,b,c),key=itemgetter(1))


d = np.asarray(zipped)
print(d)
[[  3   9  90]
 [  1  10 100]
 [  1  10 100]
 [  2  11 111]
 [  5  20 200]
 [  6  20 200]
 [  4  22 220]]
"
Filter elements from the end of a list,"end = len(somelist)
while end and somelist[end - 1][1] == 0:
    end -= 1
newlist = somelist[:end]
"
Using python to issue command prompts,"import os
os.system('""C:/Temp/a b c/Notepad.exe""')
"
Python stack simulation using list structure but not list methods,"class Stack(object):
    def __init__(self):
        self._stack = [] # Allocate an empty list

    def push(self, ele):
        self._stack += [ele] # Use list concatenation to emulate the `push` operation

    def pop(self):
        last = self._stack[-1:] # Return the last element of the list (also works for empty lists)
        self._stack = self.stack[0:-1] # Copy the elements from the beginning of the list to the last element of the list
        return last # return the last element

    # All stacks should have the `size` function to determine how many elements are
    # in the stack:
    def size(self):
        return len(self._stack)

    # Occasionally you'll want to see the contents of the stack, so we have to
    # implement the `__str__` magic method:
    def __str__(self):
        return '[%s]' % ','.join(map(str, self._stack))
"
Python Counter: print key whose count is x,"key_whose_count_is_10 = rev[10]
"
Files in python,"def getlines(somefile):
    f = open(somefile).readlines()
    lines = [line for line in f if not line.startswith(""#"") and not line.strip() == """"]
    return lines

entries = getlines(input(""Name of input file: ""))
animal_visits = {}
month_visits = [0] * 13

for entry in entries:
    # count visits for each animal
    animal = entry[:3]
    animal_visits[animal] = animal_visits.get(animal, 0) + 1

    # count visits for each month
    month = int(entry[4:6])
    month_visits[month] += 1

print(""Total Number of visits for each animal"")
for x in sorted(animal_visits):
    print(x, ""\t"", animal_visits[x])

print(""===================================================="")
print(""Month with highest number of visits to the stations"")
print(month_visits.index(max(month_visits)))
"
How to strip a string after a certain amount of words in python,"s = ""Lorem ipsum foo bar foobar stuff etc""
print ' '.join(s.split("" "")[:4])
"
"Removing ""unnamed: #"" when writing to CSV using pandas","df = pd.read_table('data', sep='\s*[|]\s*', header=None)
#             0     1           2     3           4     5
# 0  2015-06-29   NaN  2015-06-28   NaN  2015-06-27   NaN
# 1        col1  col2        col1  col2        col1  col2
# 2          10     3       103.4   6.6       103.2   4.3
# ...
"
Preserving signatures of decorated functions,"import decorator

@decorator.decorator
def args_as_ints(f, *args, **kwargs):
    args = [int(x) for x in args]
    kwargs = dict((k, int(v)) for k, v in kwargs.items())
    return f(*args, **kwargs)

@args_as_ints
def funny_function(x, y, z=3):
    """"""Computes x*y + 2*z""""""
    return x*y + 2*z

print funny_function(""3"", 4.0, z=""5"")
# 22
help(funny_function)
# Help on function funny_function in module __main__:
# 
# funny_function(x, y, z=3)
#     Computes x*y + 2*z
"
How to use a variable within a class that will be independent of any objects created in python?,"class A(object):
    _var = 5

    @property
    def var(self):
        return self.__class__._var

    @var.setter
    def var(self, value):
        self.__class__._var = value
"
How to create a list in Python with the unique values of a CSV file?,"Category, Year = set(), set()
for row in DataCaptured:
    Year.add(row[0])
    Category.add(row[1])
"
Python List Multiplication on Function Call,"def __init__( self , vertices = None , color = rand_rgb() )
    if vertices is None:
        vertices = [rand_xy() for _ in range(N)]
"
Pandas: read_csv (read multiple tables in a single file),"import io
import pandas as pd

data = """"""\
        Name
0  JP2015121
1    US14822
2    US14358
3  JP2015539
4  JP2015156
""""""
df = pd.read_csv(io.StringIO(data), delim_whitespace=True, index_col=0)
print(df)
"
Printing a properly formatted SQLite table in Python,"import sqlite3
import pandas as pd

conn = sqlite3.connect(':memory:')
c = conn.cursor()

c.execute('create table stu ( ID, Name, ShoeSize, Course, IQ, Partner )')
conn.commit()
c.executemany('insert into stu VALUES (?, ?, ?, ?, ?, ?)',
    [(1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None),
     (1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None),
     (1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None),
     (1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None),
     (1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None),
     (1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None),
     (1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None),
     (1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None),
     (1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None),
     (1234567890, u'John Doe', 3852, u'DEGR-AA', 4, None)])
conn.commit()


# Ugly way
print list(c.execute(""SELECT * FROM stu""))

# Pretty way
print pd.read_sql_query(""SELECT * FROM stu"", conn)
"
Python BeautifulSoup parsing specific text,">>> nodes = soup.findAll(text=re.compile('[sS]maller.*[rR]eporting.*[cC]ompany'))
>>> nodes[-1].next.next  # last item in list is the only good one... kinda crap
u'&#254;'
"
"In var = func(), Is func() evaluated right away or when var is needed?","def isIt(arg):
    return (lightweightFunction(arg) and superExpensiveFunction(arg))
"
Most Efficient way to calculate Frequency of values in a Python list?,">>> from collections import Counter
>>> L=['a','b','a','b']
>>> print(Counter(L))
Counter({'a': 2, 'b': 2})
>>> print(Counter(L).items())
dict_items([('a', 2), ('b', 2)])
"
Removing duplicate elements from a Python list containing unhashable elements while preserving order?,"from bisect import bisect_left, insort

def dedup(seq):
    'Remove duplicates. Preserve order first seen.  Assume orderable, but not hashable elements'
    result = []
    seen = []
    for x in seq:
        i = bisect_left(seen, x)
        if i == len(seen) or seen[i] != x:
            seen.insert(i, x)
            result.append(x)
    return result
"
Index the middle of a numpy array?,"middle = lambda x: x[[slice(np.floor(d/4.),np.ceil(3*d/4.)) for d in x.shape]]
"
How to Achieve Continuous Interactive Dialog with a Subprocess in Python?,"import sys
from subprocess import Popen, PIPE

L = [2, 7, 1] # numbers to be squared
p = Popen([sys.executable or 'python', 'square.py'], stdin=PIPE, stdout=PIPE,
          universal_newlines=True, bufsize=-1)
answers = map(int, p.communicate(""\n"".join(map(str, L)))[0].splitlines())
"
Regular expressions in python where text is read from file,"  re_semstudent = re.compile(""Semester:\s*(\d*)\s*\/\s*(\d)\s*Number\s*:\s*(\d{8})\s*Name\s*:\s*(.*)\s*Advisor"",re.U)
"
multiprocessing change current folder for every process,"import multiprocessing,os,shutil
processes=16

in_queue = multiprocessing.Queue()
out_queue = multiprocessing.Queue()

def example_function(path, qin, qout):
    os.chdir(path)

    for i in iter(qin.get, 'stop'):
        print(os.getcwd())
        qout.put(i*i)


devshm='/dev/shm/'
# create processes & folders
procs = []
for i in range(processes):
    path = devshm+str(i)+'/'
    os.mkdir(path)
    #shutil.copy(some_files,path)

    procs.append(multiprocessing.Process(target=example_function, args=(path,in_queue, out_queue)))
    procs[-1].start()


# send input
for i in range(1000):
    in_queue.put(i)
# send stop signals
for i in range(processes):
    in_queue.put('stop')

# collect output    
results = []
for i in range(1000):
    results.append(out_queue.get())
"
Dictionary value sorting,"import itertools as IT

first = {
    ('monkey',1): 130.0,
    ('dog',2): 123.0,
    ('cat', 3): 130.0,
    ('cat', 4): 130.0,
    ('mouse', 6): 100.0
    }

counter = 0
ordered = sorted(first, key = lambda k: (first[k], k[1], k[0]))

second = {}
for key, group in IT.groupby(ordered, first.__getitem__):
    # group = list(group)
    # print(key, group)
    # (100.0, [('mouse', 6)])
    # (123.0, [('dog', 2)])
    # (130.0, [('monkey', 1), ('cat', 3), ('cat', 4)])
    previous = None
    for name, num in group:
        if name != previous:
            counter += 1
        second[num] = counter
        previous = name

print(second)
"
Plotting a Fast Fourier Transform in Python,"import pandas
import matplotlib.pyplot as plt
#import seaborn
%matplotlib inline

# the OP's data
x = pandas.read_csv('http://pastebin.com/raw.php?i=ksM4FvZS', skiprows=2, header=None).values
y = pandas.read_csv('http://pastebin.com/raw.php?i=0WhjjMkb', skiprows=2, header=None).values
fig, ax = plt.subplots()
ax.plot(x, y)
"
How do I remove an element from a list without using .remove,"userlist.pop(userlist.index(-max([-u for u in userlist])))
"
How to obtain the type of the values in a defaultdict,">>> d = defaultdict(int)
>>> d[10] = 3+4j
>>> d
defaultdict(<type 'int'>, {10: (3+4j)})
>>> d[30]
0
>>> d[""fred""]
0
"
"Python, sort a list of objects by lowest sub-object attribute","sorted(list_of_objects, key=lambda o: min(p.z for p in o.point_array))
"
Solving a task in cosmology using Python 2.7.5,"from string import ascii_lowercase as letters
dic = {letters[j]:float(val) for j, val in enumerate(astr.split(' '))}
"
python how can I find out the duplicate elements in a three dimensional list,"def reduceDups(lst):
  lst = sorted(lst)
  i = 0
  while(i < len(lst)):
    if(i < len(lst) - 1):
      # Get reference elements
      (refFirst, refLast) = (lst[i][:-1], lst[i][-1])

      # Get first, last elements of possible duplicate
      (dupFirst, dupLast) = (lst[i + 1][:-1], lst[i + 1][-1])

      if(refFirst == dupFirst):
        # Next element is identical (by our comparison). Get rid of it
        lst.pop(i + 1)
        lst[i].append(dupLast)
      else:
        i += 1
    else:
      i += 1

  return lst
"
How to find the path of a changing directory name?,"import os, glob
next(glob.iglob(os.path.expanduser('~/.mozilla/firefox/*.default/bookmarkbackups')))
"
Print values from several array using Python,"a = (1, 2, 3, 4, 5, 6)
print ""z\tx\ty""  # Print top line separated by tab characters
for i in a:  # For each element in the list
    if i % 2 == 0:  # If the element is even
        print i, ""\t"", i
    else:  # If it is odd
        print i, ""\t\t"", i
"
Python Counter results to csv file,"for key, count in your_counter.iteritems():
    location, lat, long = key
    writer.writerow([location, lat, long, count])
"
How to generate a list of antonyms for adjectives in WordNet using Python,"from nltk.corpus import wordnet as wn

for i in wn.all_synsets():
    if i.pos() in ['a', 's']: # If synset is adj or satelite-adj.
        for j in i.lemmas(): # Iterating through lemmas for each synset.
            if j.antonyms(): # If adj has antonym.
                # Prints the adj-antonym pair.
                print j.name(), j.antonyms()[0].name()
"
nested for loop in python not working,"maxima = [float('-inf')] * 13
minima = [float('inf')] * 13
with open('names.csv') as input_file:
    for row in input_file:
        for col, value in row.split(','):
            value = float(value)
            maxima[col] = max(maxima[col], value)
            minima[col] = min(minima[col], value)

# This gets the value you called ``l``
combined_max_and_min = zip(maxima, minima)
"
How to add a comma to the end of a list efficiently?,"with open('yourfile.txt') as f:
  result = ','.join(f)
"
sort a list of lists by a specific index of the inner list,"sorted(L, key=itemgetter(2))"
Extracting variables from set of strings in python,"def convert(val):
    """"""
    Attempt to coerce type of val in following order: int, float, str
    """"""
    for type in (int, float, str):
        try:
            return type(val)
        except ValueError:
            pass
    return val

def make_config(*args, **kwargs):
    for arg in args:
        try:
            key,val = arg.split('=')
            kwargs[key.strip()] = convert(val.strip())
        except ValueError:   # .split() didn't return two items
            pass
    return kwargs

s1 = 'DataFile=scan1.dat'
s2 = 'NumberOfChannels=32'
config = make_config(s1, s2)
"
Passing data to mod_wsgi,"BUFFER_SIZE = 10 # 10 bytes for testing. Use something bigger
def application(environ, start_response):
    start_response('200 OK', [('Content-type', 'text/plain')]
    buffer = []
    size = 0
    for chunk in chunk_generator():
        buffer.append(chunk)
        size += len(chunk)
        if size > BUFFER_SIZE:
            for buf in buffer:
                yield buf
            buffer = []
            size = 0

def chunk_data_generator()
    yield 'Chunk 1\n'    
    yield 'Chunk 2\n'    
    yield 'Chunk 3\n'
    yield 'Chunk 4\n'
    yield 'Chunk 5\n'
"
Create view to recarray subclass,"import numpy as np

class Theta(np.recarray):
    ''' Defines a class for the parameters of a DDM model.

    '''
    def __new__(clc, *args, **kwargs):
        a = np.atleast_2d(np.array(*args, **kwargs))
        dtype = np.dtype([('v', '<f8'), ('a', '<f8'), ('w', '<f8')])
        r = np.recarray(shape=a.shape[0], dtype=dtype)
        r.v = a[:,0]
        r.a = a[:,1]
        r.w = a[:,2]
        return r.view(Theta)

r = Theta([[1,2,3],[1,2,3]])
"
Pandas: Pivoting with multi-index data,"rating = pd.DataFrame({""BMW"":[7, 8, 9, 8], ""Fiat"":[2, 1, 10, 3], ""Toyota"":[3, 8, 7,9]})
own = pd.DataFrame({""BMW"":[1, 0, 0, 0], ""Fiat"":[1, 1, 0, 1], ""Toyota"":[0, 1, 1, 1]})

r = rating.unstack().reset_index(name='value')
o = own.unstack().reset_index(name='value')
res = DataFrame({""Brand"":r[""level_0""], ""Rating"": r[""value""], ""Own"": o[""value""]})
res = res.groupby([""Own"", ""Brand""]).mean().reset_index()
res.pivot(index=""Own"", columns=""Brand"", values=""Rating"")

# result
# Brand       BMW  Fiat  Toyota
# Own                          
# 0      8.333333    10       3
# 1      7.000000     2       8
"
Functional Python - Multiple Dictionaries to One Dictionary,"fst = lambda (x,_): x
grade_to_school = ((g,x) for x in a,b,c for g in x['grades'])
d = { g : list(y) for g,y in groupby(sorted(grade_to_school, key=fst), key=fst) }
"
How to efficiently convert Matlab engine arrays to numpy ndarray?,np.array(x._data).reshape(x.size[::-1]).T
ElementTree: What is the syntax for the 'match' argument to the 'find' method?,"try:
    from . import ElementPath
except ImportError:
    ElementPath = _SimpleElementPath()
"
How do I make part of a string lowercase in python?,"for word in string.split(' '):
    # your existing code
    print(word, end=' ')
"
How to return all possible combination,">>> from itertools import product
>>> A = [[1, 2, 3], ['foo', 'bar'], ['spam', 'eggs']]
>>> for vector in product(*A):
...     print vector
... 
(1, 'foo', 'spam')
(1, 'foo', 'eggs')
(1, 'bar', 'spam')
(1, 'bar', 'eggs')
(2, 'foo', 'spam')
(2, 'foo', 'eggs')
(2, 'bar', 'spam')
(2, 'bar', 'eggs')
(3, 'foo', 'spam')
(3, 'foo', 'eggs')
(3, 'bar', 'spam')
(3, 'bar', 'eggs')
"
Counting using a pre-defined list,"import collections

p = ['a', 'b', 'c']
h = ['a', 'c', 'd', 'c']

c = collections.Counter(h)
print c

for i in p:
  print i, c[i]
"
"Determine if an image exists within a larger image, and if so, find it, using Python",">>> from skimage import data
>>> im = gray2rgb(data.coins())
>>> tpl = im[170:220, 75:130].copy()

>>> y, x = find_image(im, tpl)
>>> y, x
(170, 75)
"
Python datetime format like C# String.Format,"_format_changes = (
    ('yyyy', '%Y'), ('yyy', '%Y'), ('yy', '%y'),('y', '%y'),
    ('MMMM', '%B'), ('MMM', '%b'), ('MM', '%m'),('M', '%m'),
    ('dddd', '%A'), ('ddd', '%a'), ('dd', '%d'),('d', '%d'),
    ('HH', '%H'), ('H', '%H'), ('hh', '%I'), ('h', '%I'),
    ('mm', '%M'), ('m', '%M'),
    ('ss', '%S'), ('s', '%S'),
    ('tt', '%p'), ('t', '%p'),
    ('zzz', '%z'), ('zz', '%z'), ('z', '%z'),
    )

def cnv_csharp_date_fmt(in_fmt):
    ofmt = """"
    fmt = in_fmt
    while fmt:
        if fmt[0] == ""'"":
            # literal text enclosed in ''
            apos = fmt.find(""'"", 1)
            if apos == -1:
                # Input format is broken.
                apos = len(fmt)
            ofmt += fmt[1:apos].replace(""%"", ""%%"")
            fmt = fmt[apos+1:]
        elif fmt[0] == ""\\"":
            # One escaped literal character.
            # Note graceful behaviour when \ is the last character.
            ofmt += fmt[1:2].replace(""%"", ""%%"")
            fmt = fmt[2:]
        else:
            # This loop could be done with a regex ""(yyyy)|(yyy)|etc"".
            for intok, outtok in _format_changes:
                if fmt.startswith(intok):
                    ofmt += outtok
                    fmt = fmt[len(intok):]
                    break
            else:
                # Hmmmm, what does C# do here?
                # What do *you* want to do here?
                # I'll just emit one character as literal text
                # and carry on. Alternative: raise an exception.
                ofmt += fmt[0].replace(""%"", ""%%"")
                fmt = fmt[1:]
    return ofmt
"
python list as function parameter,"def fizz_count(x): 
    return x.count('fizz')
"
How to find a non-alphanumeric character and move it to the end of a string in Python,">>> import re

>>> string = ""string.isnotimportant""
#I explain a bit about this at the end
>>> regex = '\w*(\W+)\w*' # the brackets in the regex mean that item, if matched will be stored as a group
#in order to understand the re module properly, I think your best bet is to read some docs, I will link you at the end of the post
>>> x = re.search(regex, string)

>>> x.groups() #remember the stored group above? well this accesses that group.
               #if there were more than one group above, there would be more items in the tuple
('.',)

#here I reassign the variable string to a modified version where the '.' is replaced with ''(nothing).
>>> string = string.replace('.', '')
>>> string += x.groups()[0] # here I basically append a letter to the end of string
"
How to combine try/except in python into a pretty one liner?,"printlist.append(text.get('data',''))
"
Extract specific lines from file and create sections of data in python,"with open('data.txt', 'r') as f:
    theDict = {}
    found = -1
    for (lineno,line) in enumerate(f):
        if found < 0:
            if line.find('ArrayOf_xsd_string')>=0:
                found = lineno
                entries = []
            continue
        # Grab following 6 lines...
        if 2 <= (lineno-found) <= 6+1:
            entry = line.strip(' """"{}[]=:,')
            entries.append(entry)
        #then create a dict with the key from line 5
        if (lineno-found) == 6+1:
            key = entries.pop(4)
            theDict[key] = entries
            print key, ','.join(entries) # comma-separated, no quotes
            #break # if you want to end on first match
            found = -1 # to process multiple matches
"
How to send Gmail email with multiple CC:'s,">>> from email.utils import formataddr
>>> addresses = [(""John Doe"", ""john@domain.com""), (""Jane Doe"", ""jane@domain.com"")]
>>> ', '.join([formataddr(address) for address in addresses])
'John Doe <john@domain.com>, Jane Doe <jane@domain.com>'
"
Evaluate integral from sympy as lambda function,">>> f = lambdify(x, integrate(x**2+2,x))
>>> f(2)
6.666666666666666
"
How to return the native object value when not accessed as a list,"class ListOptions(object):
    pass

class Options(object):
    @classmethod
    def list(cls):
        return ListOptions

    @classmethod
    def __setattr__(cls, name, value):
        if instance(value, list):
            value = [] + value
        else:
            value = [ value ]
        object.__setattr__(cls, name, value[-1])
        setattr(ListOptions, name, value)

setattr(Options, 'opt', Option('opt', None))
"
Python 2.7 print strings,"import re
txt = ""[something name=\""Paul\"" other=\""1/1/1\""][something name=\""James\"" other=\""4/3/5\""][something name=\""Victor\"" other=\""7/2/6\""][something name=\""Jane\"" other=\""4/3/6\""]""
for name in re.findall('name\=\\""(.*?)\\\""', txt):
    print name
"
Is there a way to programatically determine the order in which functions are declared in a python module?,"from types import MethodType, FunctionType
methodtypes = set((MethodType, FunctionType, classmethod, staticmethod))

def methods_in_order(cls):
    ""Given a class or instance, return its methods in the order they were defined.""
    methodnames = (n for n in dir(cls) if type(getattr(cls, n)) in methodtypes)
    return sorted((getattr(cls, n) for n in methodnames), 
                  key=lambda f: getattr(f, ""__func__"", f).func_code.co_firstlineno)
"
Python regex and find multiple times,"^(?P<number>\d+)(?P<content>.*)$
"
Numpy einsum broadcasting,"arr = np.random.random((6,2,3,4,5,6))
result = np.einsum('ijklmi->ijklm', arr)
result2 = np.einsum('i...i->i...', arr)
assert np.allclose(result, result2)
"
Using .join() in Python,"f = lambda x: ', '.join(x[:-1]) + ' and '+x[-1]
"
Python - List comprehension expression for assigning values from list to list of DataFrames,"In [54]: df = pd.DataFrame({ 'A' : pd.Series(1,index=list(range(4)),dtype='float32'),
   ....:                      'B' : 'bar',
   ....:                      'C' : 'foo' })

In [55]: list_df = [df,df,df]

In [56]: file_names = ['source1','source2','source3']

In [57]: def func(df,file):
   ....:     df.loc[:,'filename'] = file
   ....:

In [58]: [func(df,file) for df,file in zip(list_df,file_names)]
Out[58]: [None, None, None]

In [59]: df
Out[59]:
   A    B    C filename
0  1  bar  foo  source3
1  1  bar  foo  source3
2  1  bar  foo  source3
3  1  bar  foo  source3
"
Efficient way to create a dense matrix from diagonal vectors in Python?,"import numpy as np
import math
import timeit


def v(x):
    return math.exp(x)


def makeS1(N, x_range):
    vec = np.full(N, 2 * v(x_range[1]))
    vec[0] *= 0.5
    S = np.diag(vec)
    vec = np.full(N - 1, v(x_range[0]))
    S += np.diag(vec, 1)
    for m in xrange(1, N):
        vec = np.full(N - m, 2 * v(x_range[m + 1]))
        vec[0] *= 0.5
        S += np.diag(vec, -m)
    return S


def makeS2(N, x_range):
    values = np.array([v(x) for x in x_range])
    values_doubled = 2 * values

    def value_at_position(ai, aj):
        result = np.zeros((N, N))
        for i, j in zip(ai.flatten(), aj.flatten()):
            if j > i + 1:
                continue
            elif j == i + 1:
                result[i, j] = values[0]
            elif j == 0:
                result[i, j] = values[i + 1]
            else:
                result[i, j] = values_doubled[i - j + 1]
        return result

    return np.fromfunction(value_at_position, (N, N))


def makeS3(N, x_range):
    values = np.array([v(x) for x in x_range])
    values_doubled = 2 * values
    result = np.zeros((N, N))
    for i in xrange(N):
        for j in xrange(min(i + 2, N)):
            if j == i + 1:
                result[i, j] = values[0]
            elif j == 0:
                result[i, j] = values[i + 1]
            else:
                result[i, j] = values_doubled[i - j + 1]
    return result


def makeS4(N, x_range):
    values = np.array([v(x) for x in x_range])
    values_doubled = 2 * values
    result = np.eye(N, k=1) * values[0]
    result[:, 0] = values[1:]
    for i in xrange(N - 1):
        result[i + 1, 1:i + 2] = values_doubled[1:i + 2][::-1]
    return result


def main():
    N = 2000
    x_range = np.random.randn(N + 1)

    start = timeit.default_timer()
    s1 = makeS1(N, x_range)
    print 'makeS1', timeit.default_timer() - start
    start = timeit.default_timer()
    s2 = makeS2(N, x_range)
    print 'makeS2', timeit.default_timer() - start
    start = timeit.default_timer()
    s3 = makeS3(N, x_range)
    print 'makeS3', timeit.default_timer() - start
    start = timeit.default_timer()
    s4 = makeS4(N, x_range)
    print 'makeS4', timeit.default_timer() - start
    if N < 10:
        print s1
        print s2
        print s2
        print s4
    assert np.allclose(s1, s2)
    assert np.allclose(s2, s3)
    assert np.allclose(s3, s4)


main()
"
"Can Python classes have members that are accessible, but not from an instance of the class?","class A(object):
    x = 1
    def __getattribute__(self, name):
        if name == 'x':
            raise AttributeError
        return super(A, self).__getattribute__(name)
    def __setattr__(self, name, value):
        if name == 'x':
            raise AttributeError
        return super(A, self).__setattr__(name, value)
    def __delattr__(self, name):
        if name == 'x':
            raise AttributeError
        return super(A, self).__delattr__(name)
"
How do I check for next to next line while reading a file in python and strip the newline character at its end?,"import sys
import fileinput

for line in fileinput.input(inputfilename):
    if line.startswith('for(') and line.endswith(';'):
        line = line.rstrip('\n') + next(ifh).rstrip('\n') + next(ifh)
    sys.stdout.write(line)
"
Find Max in Nested Dictionary,"max(d, key=lambda x: d[x]['count'])"
lxml: split at attribute?,"#!/usr/bin/env python

snippet = """"""
<html><head></head><body>
<div align=center><a style=""font-size: 1.1em"">Football</a></div>
<a href="""">Team A</a>
<a href="""">Team B</a>
<div align=center><a style=""font-size: 1.1em"">Baseball</a></div>
<a href="""">Team C</a>
<a href="""">Team D</a>
</body></html>
""""""

import lxml.html

html = lxml.html.fromstring(snippet)
body = html[1]

results = []
current_category = None

for element in body.xpath('./*'):
    if element.tag == 'div':
        current_category = element.xpath('./a')[0].text
    elif element.tag == 'a':
        results.append({ 'category' : current_category, 
            'title' : element.text })

print results
"
Check if a file is not open( not used by other process) in Python,"import psutil

for proc in psutil.process_iter():
    try:
        flist = proc.get_open_files()
        if flist:
            print(proc.pid,proc.name)
            for nt in flist:
                print(""\t"",nt.path)

    # This catches a race condition where a process ends
    # before we can examine its files    
    except psutil.NoSuchProcess as err:
        print(""****"",err) 
"
How to form a string from 2 values,">>> string = 'WWF'
>>> num = 0.0
>>> print (""{0}:{1}"".format(string[-1],num))
F:0.0
"
Read facebook messages using python sdk,"#!/usr/bin/env python

import facebook

at = <my access token>
pid = <my page id>
api = facebook.GraphAPI( at )
args = {'fields' : 'message'}  #requested fields
conv = api.get_object( 'me/conversations')
msg = api.get_object( conv['data'][0]['id']+'/messages')
for el in msg['data']:
    content = api.get_object( el['id'], **args)   #adding the field request
    print content
"
"dfs to implement a graph, python","graph = {'A': ['B', 'C'],
         'B': ['A', 'D', 'E'],
         'C': ['A', 'F'],
         'D': ['B'],
         'E': ['B', 'F'],
         'F': ['C', 'E']}

def dfs_path(graph,start,end):
    result = []
    dfs(graph,start,end,[],result)
    return result

def dfs(graph,start,end,path,result):
    path+=[start]
    if start == end:
        result.append(path)
    else:
        for node in graph[start]:
            if node not in path:
                dfs(graph,node,end,path[:],result)
print(dfs_path(graph,'A','F')) 
"
Recognition of elements in a list - machine learning,"import numpy as np

# I'll use numbers instead of words,
# but same exact concept
points_list = [[0,1,2],
               [0,3],
               [1,4],
               [0,2]]

scores = np.zeros((5,5))

for points in points_list:
    temp = np.array(points)[:, np.newaxis]       
    scores[temp, points] += 1
"
"Pandas, Get count of a single value in a Column of a Dataframe","df = df['col'].value_counts().reset_index()
df.columns = ['col', 'count']
print df
   col  count
0    1      5
1    2      3
"
"Python Pandas Dataframe Conditional If, Elif, Else","In [26]:
np.where(df['Search term'].str.contains('|'.join(brand_terms)),
        'Brand',
         np.where(df['Search term'].str.contains('|'.join(footwear_terms)),
             'Footwear',
             '--'))

Out[26]:
array(['Brand', 'Footwear', '--'],
      dtype='|S8')
"
How do you check to see if an input is equal to a certain integer or integers?,"if isinstance(var, int):
"
How can I replace named vars in a string in python from an incomplete dictionary?,"from collections import defaultdict
my_dict = defaultdict(str,form)
msg = """"""<html><p>%(Frist_Name)s</p><p>%(Last_Name)s</p></html> """""" % my_dict
"
How to modify class object parameters in code,"for i in d:
    setattr(testobj, i, d[i])
"
Create a list of tuples containing adjacent numbers?,"def yield_adjacent(lst):
    it = iter(lst)
    sub = [next(it)]
    for n in it:
        if n - sub[-1] == 1:
            sub.append(n)
        else:
            yield tuple(sub)
            sub = [n]
    yield tuple(sub)
"
Modify default queryset in django,"class CustomManager(models.Manager):
    def get_query_set(self):
        return super(CustomManager, self).get_queryset().filter(canceled=False)

class MyModel(models.Model):
    # Blah blah
    objects = CustomManager()
"
"How to ""fake"" a module safely in a Python package","/dir1
    __init__.py
        from module import abc
    /module
        __init__.py
           from module1 import abc
        module1.py  # this is the moved and renamed module.py, with git history
            abc = None
        module2.py  # this is the 30% you've factored out
            # whatever's in here
"
Pandas group by operations on a data frame,"In [1]: import pandas as pd

In [2]: from StringIO import StringIO

In [3]: data = """"""UsrId   JobNos
   ...:  1       4
   ...:  1       56
   ...:  2       23 
   ...:  2       55
   ...:  2       41
   ...:  2       5
   ...:  3       78
   ...:  1       25
   ...:  3       1""""""

In [4]: df = pd.read_csv(StringIO(data), sep='\s+')

In [5]: grouped = df.groupby('UsrId')

In [6]: grouped.JobNos.sum()
Out[6]: 
UsrId
1         85
2        124
3         79
Name: JobNos

In [7]: grouped.JobNos.sum().idxmax()
Out[7]: 2
"
Remove final characters from string recursively - What's the best way to do this?,""""""""""""".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]"
How can I search a nested dictionary with specific constraints in mind,"def special_search(my_dict, pos, min, max):
    result = {}
    for item, tuples in my_dict.items():
        matches = []
        for i, t in enumerate(tuples):
            if min <= t[pos] <= max:
                matches.append(i)
        if matches:
            result[item] = tuple(matches)
    return result
"
string replace in Python,"a.replace(""xxxxxx"", ""foo"")
"
Python: delete substring by indices,"def delete_substring_blocks(s, blocks):
    return ''.join(delete_blocks(s, blocks))
"
Compare values in 2 columns and output the result in a third column in pandas,"df['output'] = (df.groupby('a_id')
               .apply(lambda x : x['b_received'].isin(x['c_consumed']).astype('i4'))
               .reset_index(level='a_id', drop=True))
"
How to split a string by multiple separators and store in a list?,"import re
s = ""(I (J (K L) (M N)) (O P))""
re.findall('[\w\(\)]',s)
"
Python List Maker,"with open('file.txt') as input_file:
    long_list = input_file.readlines()
"
"HOW TO ""Arbitrary"" format items in list/dict/etc. EX: change 4th character in every string in list","In [47]: def RandomAlter(l, func, char):
    return [''.join([func(w[x]) if x == char else w[x] for x in xrange(len(w))]) for w in l]
   ....:

In [48]: RandomAlter(words, str.upper, 4)
Out[48]: ['housE', 'flowEr', 'tree']

In [49]: RandomAlter([str.upper(w) for w in words], str.lower, 2)
Out[49]: ['HOuSE', 'FLoWER', 'TReE']

In [50]: RandomAlter(words, lambda x: '_', 4)
Out[50]: ['hous_', 'flow_r', 'tree']
"
Random rounding to integer in Python,"import random
import math
import numpy as np

def prob_round(x):
    sign = np.sign(x)
    x = abs(x)
    is_up = random.random() < x-int(x)
    round_func = math.ceil if is_up else math.floor
    return sign * round_func(x)

x = 6.1
sum( prob_round(x) for i in range(100) ) / 100.
=> 6.12
"
selectively copying from an input file,"def selectivelyCopy(inputFile,outputFile,predicate):
    linesCopied = 0
    for line in inputFile:
        if predicate(line): # test each line with the predicate function
            outputFile.write(line)
            linesCopied+=1
    inputFile.close()
    return linesCopied
"
Numpy: Efficient access to sub-arrays generated by numpy.split,"dm = np.abs(np.diff(f['mz']))
pos = np.flatnonzero(np.r_[True, dm > 2])

totals = np.add.reduceat(f['mz']*f['I'], pos)
counts = np.add.reduceat(f['I'], pos)
result = totals / counts
"
"match non-unique, un-sorted array to indexes in unique, sorted array","# Store matching indices of 'sentence' in 'vocab' when ""left-searched""
out = np.searchsorted(vocab,sentence,'left').astype(float)

# Get matching indices of 'sentence' in 'vocab' when ""right-searched"".
# Now, the trick is that non-matches won't have any change between left 
# and right searches. So, compare these two searches and look for the 
# unchanged ones, which are the invalid ones and set them as NaNs.
right_idx = np.searchsorted(vocab,sentence,'right')
out[out == right_idx] = np.nan
"
Python: How to prepend the string 'ub' to every pronounced vowel in a string?,"""Hi, how are you?"" → ""Hubi, hubow ubare yubou?""
"
unable to correctly identify Pareto observations in 4-dimensional solution space,"import numpy as np
def identify_pareto_observations(fitness_observations):
    np_array_fitness_observations = np.array(fitness_observations)
    np_array_fitness_observations = np_array_fitness_observations[np.lexnp_array_fitness_observations[:,0].argsort()]
    np_pareto_frontier = np_array_fitness_observations[[0],:]
    for row in np_array_fitness_observations[1:,:]:
        dominated = False
        for nondom in np_pareto_frontier:
            if all([row[x] > nondom[x] for x in range(len(row))]):
                dominated = True
                break
        if not dominated:
            np_pareto_frontier = np.concatenate((np_pareto_frontier, [row]))
    return np_pareto_frontier
"
Python procedure for changing an object,"def inc(lst):
    lst[0] += 1

a = 7
b = [a]
inc(b)
print b, a
"
"Why does Django not find these urls, allthough the regex matches?",">>>import re
>>>test = [""accounts/confirm/fb75c6529af9246e4e048d8a4298882909dc03ee0/"", ""accounts/confirm/fb75c6529af9246e4e-048d8a4298882909dc03ee0/"", ""accounts/confirm/fb75c6529af9246e4e=048d8a4298882909dc03ee0/"", ""accounts/confirm/fb75c6529af9246e4e%20048d8a4298882909dc03ee0/""]
>>>all([re.match(r'^accounts/confirm/(.+)$', item) for item in test])
True
"
"How to convert datetime.timedelta to minutes, hours in Python?","def convert_timedelta(duration):
    days, seconds = duration.days, duration.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = (seconds % 60)
    return days, hours, minutes, seconds
"
Determining three in a row in Python 2d array,"# A bogus game with wins in several directions.
board = (
    [1,1,2,1],
    [0,2,1,1],
    [2,2,2,1],
    [1,0,0,1],
)

# A few convenience variables.    
n_rows = len(board)    
lft = [ [0] * i for i in range(n_rows) ]  # [[], [0], [0, 0], [0, 0, 0]]
rgt = list(reversed(lft))

# Create transpositions of the board to check for wins in various directions.
transpositions = {
    'horizontal' : board,
    'vertical'   : zip(*board),
    'diag_forw'  : zip(* [lft[i] + board[i] + rgt[i] for i in range(n_rows)] ),
    'diag_back'  : zip(* [rgt[i] + board[i] + lft[i] for i in range(n_rows)] ),
}

# Apply Jonathan's horizontal-win check to all of the transpositions.
for direction, transp in transpositions.iteritems():
    for row in transp:
        s = ''.join( map(str, row) )
        for player in range(1,3):
            if s.find(str(player) * 3) >= 0:
                print 'player={0} direction={1}'.format(player, direction)
"
define a regular expression in python,">>> import re
>>> text = ""text, 1CTT, 2IR8, 35TR, 4T1R, smth else""
>>> pattern = re.compile(r""[0-9][A-Z0-9]{3}"")
>>> pattern.findall(text)
['1CTT', '2IR8', '35TR', '4T1R']
"
"Adjusting CSV data: appending cells to previous row, merge cells containing certain string","with open('input.csv', newline='') as infile, open('output.csv', 'w', newline='') as outfile:
    reader = csv.reader(infile, delimiter='\t')
    writer = csv.writer(outfile, delimiter='\t')

    for row in reader:
        if len(row) > 3:
            # detect if `c` is missing (insert your own test here)
            # sample test looks for 3 consecutive columns with values f, o and o
            if row[3:6] == ['f', 'o', 'o']
                # insert an empty `c`
                row.insert(3, '')

        if len(row) < 5:
            # make row at least 5 columns long
            row.extend([''] * (5 - len(row)))
        if len(row) > 5:
            # merge any excess columns into the 5th column
            row[4] = ','.join(row[4:])
            del row[5:]

        writer.writerow(row)
"
Django loading dictionary values into JSON,"data = []
if objects:
    keys = model_to_dict(objects[0]).keys()
    for object in objects:
        d = model_to_dict(object)
        data.append([d[key] for key in keys] + [object.storeID.StoreName])
"
Seperate words/numbers from symbols in Python,">>> re.findall(r""('[^']*'|[a-z0-9]+|[^a-z0-9\s]+)"", s, re.I)
"
How to optimize a python script which runs for 4**k times?,"import itertools

def HammingDistance(string_1, string_2):
    assert len(string_1) == len(string_2)
    return sum(c1 != c2 for c1, c2 in zip(string_1, string_2))

def MotifCount(string1, substring, d):
    for i in range(len(string1) - len(substring) + 1):
        if HammingDistance(string1[i:i+len(substring)], substring) <= d:
            print(i)

MotifCount(""CGCCCGAATCCAGAACGCATTCCCATATTTCGGGACCACTGGCCTCCACGGTACGGACGTCAATCAAAT"", ""ATTCTGGA"", 3)
"
The fractions are incomplete,"import fractions
ai = fractions.Fraction(2)
bi = 1
n = 5
for i in range(n):
    ai = 2 + bi / ai
    F = ai - 1
    print(F)
"
making a string into a list within a list comprehension,">>> lst = [1,100,10]
>>> sorted(lst) #returns sorted list
[1, 10, 100]
>>> lst #is still the same
[1, 100, 10]
>>> lst.sort() #returns nothing
>>> lst #has updated
[1, 10, 100]
"
Python: Finding Unique Subsequences of Unique Strings,"import itertools
import sys

def unique_substrings(txt_lst:list, k:int) -> set:
    return set([' '.join(combo) for combo in itertools.combinations(txt_lst, 3) \
                if len(set(combo))==3])

if __name__ == ""__main__"":
    infile, k, outfile = sys.argv[1:]
    with open(infile) as inf:
        txt_lst = infile.read().split()
    with open(outfile) as outf:
        for line in unique_substrings(txt_lst, k):
            outf.write(line + ""\n"")
"
Where can I find the first text that loads in the Python shell and change it?,"import sys
print(""Welcome, master!"")
sys.ps1 = ""How may I serve you? ""
sys.ps2 = ""                 ... ""
"
Python 2.7 List of Lists Manipulation,">>> myList = [
...     [u'MtM', u'Consistency Check', u'Break', 123123, 123, 456456, 456, '1/8/2014'],
...     [u'MtM', u'Consistency Check', u'Break', 321321, 321, 654654, 654, '1/8/2014'],
...     [u'MtM', u'Consistency Check', u'Break', 987987, 987, 789789, 789, '1/9/2014'],
...     [u'Notional', u'Consistency Check', u'Break', 320320, 320, 210210, 210, '1/13/2014'],
...     [u'Notional', u'Completeness Check', u'Break', 121121, 121, 412412, 412, '1/13/2014']
... ]
>>> sums = {}
>>> for entry in myList:
...     key = entry[0], entry[-1]
...     if key not in sums:
...         sums[key] = entry[:]
...         sums[key][1] = set([entry[1]])
...     else:
...         sums[key][3:-1] = [s + elem for s, elem in zip(sums[key][3:-1], entry[3:-1])]
...         sums[key][1].add(entry[1])
... 
>>> [e[:1] + [':'.join(e[1])] + e[2:] for e in sums.values()]
[[u'MtM', u'Consistency Check', u'Break', 987987, 987, 789789, 789, '1/9/2014'],
 [u'Notional', u'Completeness Check:Consistency Check', u'Break', 441441, 441, 622622, 622, '1/13/2014'],
 [u'MtM', u'Consistency Check', u'Break', 444444, 444, 1111110, 1110, '1/8/2014']]
"
Create a Tuple from text file,"import csv

output = []
block = ()
with open('input_file') as in_file:
    csv_reader = csv.reader(in_file)
    for row in csv_reader:
        output.append(tuple(row))

first_element = output[0]
a, b, c, d = output[1:]
block = (first_element[0], a, b, c, d)
"
how to add and sort multidimentional array in python?,"values = [(int(x), int(y)) for x,y in values]
"
How to find index of a character after space in python,"def mysplit(line):
    split1 = line.split(':')
    last = len(split1) - 1 
    for i, t1 in enumerate(split1):
        if i == 0 or i == last:
            yield t1.strip()
        else:
            for t2 in t1.split(None, 1): 
                yield t2.strip()

testline = ""t 1 : n1   t t 2 : n2   t t t 3 : n3"" 
testsplit = list(mysplit(testline))
print(testsplit)
# prints ['t 1', 'n1', 't t 2', 'n2', 't t t 3', 'n3']
"
sorting the elements in the list,"A = ['a','c','b']
B = [5,7,4]

A_sorted, B_sorted = zip(*sorted(zip(A, B))
"
Sorting a list based on associated scores,"from collections import defaultdict # using defaultdict makes the sums easier

correlations = defaultdict(int) # default to int (i.e. 0)

for i1, i2, correl in strScoresDict: # loop through data
    correlations[i1] += correl # add score for first item
    correlations[i2] += correl # and second item

output = sorted(correlations, 
                key=lambda x: correlations[x], 
                reverse=True) # sort keys by value
"
Getting current url,"def view1(request, form_class=MyForm, template_name='myapp/page.html'):
    # app code here
    this_url = reverse('view1')
    render_to_response(template_name, locals(), RequestContext(request))

def view2(request, form_class=MyForm, template_name='myapp/page.html'):
    # app code here
    this_url = reverse('view2')
    render_to_response(template_name, locals(), RequestContext(request))
"
Call all __init__ but once in Python,"def mymethod(self,*args,**kwargs):
    super(thisclass,self).method(*args,**kwargs)
    ...
"
"In python, how can I ensure that one of my class's methods is always called even if a subclass overrides it?","class MetaHandler(type):
    def __new__(cls, name, bases, attrs):
        instance = type.__new__(cls, name, bases, attrs)
        super_instance = super(instance, instance)
        if hasattr(super_instance, 'prepare') and hasattr(instance, 'prepare'):
            super_prepare = getattr(super_instance, 'prepare')
            sub_prepare = getattr(instance, 'prepare')
            def new_prepare(self):
                super_prepare(self)
                sub_prepare(self)
            setattr(instance, 'prepare', new_prepare)
        return instance


class BaseHandler(object):
    __metaclass__ = MetaHandler
    def prepare(self):
        print 'BaseHandler.prepare'


class SubHandler(BaseHandler):
    def prepare(self):
        print 'SubHandler.prepare'
"
Parse 4th capital letter of line in Python?,"In [1]: import re

In [2]: s = 'adsgasdlkgasYasdgjaUUalsdkjgaZsdalkjgalsdkjTlaksdjfgasdkgj'

In [3]: re.match(r'(?:.*?[A-Z]){3}.*?([A-Z].*)', s).group(1)
Out[3]: 'ZsdalkjgalsdkjTlaksdjfgasdkgj'
"
Calling class method as part of initialization,">>> class A(object):pass
... 
>>> class B(A):pass
... 
>>> class C(A): pass
... 
>>> A.__subclasses__()
[<class '__main__.B'>, <class '__main__.C'>]
>>> 
"
String Concatenation: Putting large chuck of text in Python code,"class SomeClass(object):
    def somemethod(self):
        return '''\
This text
does not need to be indented
at all.
In this text, newlines are preserved.
'''
        # but do continue the next line at the right indentation.
"
Python: Remove numbers at the beginning of a string,">>> samples = """"""\
... 123.123.This is a string some other numbers
... 1. This is a string some numbers
... 12-3-12.This is a string 123
... 123-12This is a string 1234
... """""".splitlines()
>>> for sample in samples:
...     print 'From: {!r}\nTo:   {!r}\n'.format(
...         sample, sample.lstrip('0123456789.- '))
...
From: '123.123.This is a string some other numbers'
To:   'This is a string some other numbers'

From: '1. This is a string some numbers'
To:   'This is a string some numbers'

From: '12-3-12.This is a string 123'
To:   'This is a string 123'

From: '123-12This is a string 1234'
To:   'This is a string 1234'
"
Python initialize multiple variables to the same initial value,"x = None
y = None
"
Cycling through possible indentations in python.el in Emacs,";; Indent specific                                                                                                                         
(define-key map ""\177"" 'python-indent-dedent-line-backspace)                                                                               
(define-key map (kbd ""<backtab>"") 'python-indent-dedent-line)                                                                              
(define-key map ""\C-c<"" 'python-indent-shift-left)                                                                                         
(define-key map ""\C-c>"" 'python-indent-shift-right)                                                                                        
(define-key map "":"" 'python-indent-electric-colon)      
"
"Unicode not printing correctly to cp850 (cp437), play card suits","# coding: utf-8
from __future__ import print_function
import sys
import codecs

symbols = (u'♠',u'♥',u'♦',u'♣')

print(u' '.join(symbols))
print(*symbols)
with codecs.open('test.txt','w','utf-8') as testfile:
    print(*symbols, file=testfile)
"
Python - Return top 5 words with highest frequency,"import collections
def top5_words(text):
    counts = collections.Counter(text.lower().split())
    return [elem for elem, _ in sorted(counts.most_common(),key=lambda x:(-x[1], x[0]))[:5]]
"
Which of those encoding methods is the most reliable one?,"with codecs.open(""testcodec.txt"", ""r"",""utf-8"") as f3:
    s = f3.read()

# modify s here

with codecs.open(""testcodec.txt"", ""w"",""utf-8"") as f3:
    f3.write(s)
"
What is the correct way to link Django Flatpages?,"from django.contrib.flatpages import views

urlpatterns += [
    url(r'^about-us/$', views.flatpage, {'url': '/about-us/'}, name='about'),
    url(r'^license/$', views.flatpage, {'url': '/license/'}, name='license'),
]
"
How to add a string to a specific line,"def update_file(filename, ln):
    with open(filename, 'r') as f:
        lines = f.readlines()

    with open(filename, 'w') as f:
        for idx,line in enumerate(lines):
            (idx in ln and f.write('------'))
            f.write(line)
"
"Python print "" character","print("""""""""""""""")
"
__getattr__ throwing maximum recursion error when __setattr__ implemented,"from math import pi, hypot, sqrt


class Circle:
    def __init__(self, x, y, r):
        self.x = x
        self.y = y
        super().__setattr__('r', r)
        super().__setattr__('area', pi * self.r * self.r)
        super().__setattr__('circumference', 2 * pi * self.r)
        super().__setattr__('distance_to_origin',
                            abs(sqrt(self.x * self.x + self.y * self.y) - self.r))

    def __setattr__(self, name, value):
        if name in ['x', 'y']:
            if isinstance(value, int):
                print('we can set x,y')
                super().__setattr__(name, value)
            else:  # value isn't an int
                raise TypeError('Expected an int for: {}'.format(name))
        else:
            raise AttributeError('Cannot set attribute: {}'.format(name))
"
How can I get all the software link?,"import urllib
import urlparse
from bs4 import BeautifulSoup

for i in xrange(3):
    url = ""http://www.downloadcrew.com/?act=search&page=%d&cat=51"" % i
    pageHtml = urllib.urlopen(url)
    soup = BeautifulSoup(pageHtml)

    for a in soup.select(""div.productListingTitle a[href]""):
        try:
            print (a[""href""]).encode(""utf-8"",""replace"")
        except:
            print ""no link""
"
Python regular expressions - find a string in a file that occurs somewhere before another string?,"import re

ss = ('Mr Dotwo bought two gifts for his two sons, two hours ago: two BICYCLES '
      'because his two sons wanted only two BICYCLES')
print ss,'\n\n'


print 'Replacing all ""two"" before the first ""BICYCLES"":\n'
reg = re.compile('(\\btwo\\b)|BICYCLES.+')
print reg.sub(lambda mat: '@@@@' if mat.group(1) else mat.group(),ss)
"
parsing meta tag with Beautiful Soup and Python,"In [99]: soup.find(""span"", {""class"": ""egV2_archivedDateEnded""}).nextSibling
Out[99]: u'Fri 23 Nov,10:00AM'
"
Cleaning away symbols/whitespace efficiently,"y = [""- memphis , tn! "", ""~~~memphis,tn"", "":) memphis , tn (:"", "". - memphis,tn - ."", ""memphis tn?"", "". - memphis,tn - ."", ""- . memphis,tn . -""]

for x in y:
    print(','.join(y for y in re.split(""[- ,!~?:;)(.]"", x) if y))
"
ScraperWiki/Python: filtering out records when property is false,"import scraperwiki
import simplejson
import urllib2

QUERY = 'meetup'
RESULTS_PER_PAGE = '100'
NUM_PAGES = 10

for page in range(1, NUM_PAGES+1):
    base_url = 'http://search.twitter.com/search.json?q=%s&rpp=%s&page=%s' \
         % (urllib2.quote(QUERY), RESULTS_PER_PAGE, page)
    try:
        results_json = simplejson.loads(scraperwiki.scrape(base_url))
        for result in results_json['results']:
            #print result
            data = {}
            data['id'] = result['id']
            data['text'] = result['text']
            data['location'] = scraperwiki.geo.extract_gb_postcode(result['text'])
            data['from_user'] = result['from_user']
            data['created_at'] = result['created_at']
            if data['location']:
                print data['location'], data['from_user']
                scraperwiki.sqlite.save([""id""], data)
    except:
        print 'Oh dear, failed to scrape %s' % base_url
        break
"
How to not start the next day with datetime while adding a timedelta?,"from datetime import datetime,timedelta


def weird_time(current_time,duration):
    start = datetime.strptime(current_time, ""%H:%M:%S"")
    st_hr, st_min, st_sec = start.hour, start.minute, start.second
    comb = timedelta(minutes=st_min,seconds=st_sec) + timedelta(seconds=duration)
    mn, sec = divmod(comb.total_seconds(), 60)
    hour, mn = divmod(mn, 60)
    return ""{:02}:{:02}:{:02}"".format(int(st_hr+hour), int(mn), int(sec))
"
Converting 32-bit integer into array of four 8-bit integers in Python,"In [50]: dt1=np.dtype(('i4', [('bytes','u1',4)]))

In [53]: x2=x.view(dtype=dt1)

In [54]: x2.dtype
Out[54]: dtype([('bytes', 'u1', (4,))])

In [55]: x2['bytes']
Out[55]: 
array([[  0,   0,   0,   0],
       [232,   3,   0,   0],
       [208,   7,   0,   0],
       [184,  11,   0,   0],
       [160,  15,   0,   0],
       [136,  19,   0,   0],
       [112,  23,   0,   0],
       [ 88,  27,   0,   0],
       [ 64,  31,   0,   0],
       [ 40,  35,   0,   0],
       [ 16,  39,   0,   0],
       [248,  42,   0,   0]], dtype=uint8)

In [56]: x2
Out[56]: 
array([    0,  1000,  2000,  3000,  4000,  5000,  6000,  7000,  8000,
        9000, 10000, 11000])
"
matplotlib: how to plot concentric circles at a given set of radii,"ax.plot(np.linspace(0, 2*np.pi, 100), np.ones(100)*5, color='r', linestyle='-')
"
Adding a simple value to a string,"final = path2 + w
"
How do I count the number of identical characters in a string by position using python?,"sum(1 for c1, c2 in itertools.izip(s1, s2) if c1 == c2)
"
python accessing dictionary with wildcards,"import re

class RegexDict(dict):

    def get_matching(self, event):
        return (self[key] for key in self if re.match(key, event))
"
Multiplying across in a numpy array,">>> m * c[:, np.newaxis]
array([[ 0,  0,  0],
       [ 4,  5,  6],
       [14, 16, 18]])
"
(Python) Program to read specific data from many output files,"import os

for subdir, dirs, files in os.walk(""your root directory""):
    for file in files:
        print os.path.join(subdir, file)
        #processing the files
"
"How do I retrieve the version of Selenium currently installed, from Python",">>> import selenium
>>> selenium.__version__
'2.37.2'
"
Python oneline switch,"levels = {
    'INFO': logging.INFO, 
    'WARNING': logging.WARNING,
    'ERROR': logging.ERROR,
}
py_loglevel = levels.get(self.loglevel, logging.DEBUG)
"
"Python - compare columns in a text file, loop and pop lists","import csv

with open(fn, 'r') as fin:
    reader=csv.reader(fin, skipinitialspace=True)
    header=next(reader)
    data={k:[] for k in header}
    for row in reader:
        row_di={k:v for k,v in zip(header, row)}
        if (all(len(data[e]) for e in header) 
               and row_di['Third col']==data['Third col'][-1] 
               and row_di['Fourth col']==data['Fourth col'][-1]):
            for e in header:
                data[e].pop()
        else:
            for e in header:
                data[e].append(row_di[e])

>>> data
{'Second col': ['Bryant', 'Bryant', 'Williams', 'Williams', 'Williams'], 'First col': ['Pat', 'Pat', 'Jim', 'Jim', 'Jim'], 'Fourth col': ['29th April', '9th May', '10th March', '17th March', '21st March'], 'Third col': ['ID2', 'ID2', 'ID3', 'ID3', 'ID3'], '...': ['...   ', '... ', '...  ', '...   ', '...']}
"
How to simplify python logging code,"import logging
import inspect
import functools

def log_begin_end(func):
    """"""This is a decorator that logs the name of `func` (in capital letters).

    The name is logged at the beginning and end of the function execution.

    """"""
    @functools.wraps(func)
    def new_func(*args, **kwargs):

        logging.info(""Start task "" + func.__name__.upper())
        result = func(*args, **kwargs)
        logging.info(""End task "" + func.__name__.upper())
        return result

    return new_func
"
running through a loop and find a condition that match,"prev = None
it = iter(data)
for point in it:
    if point == 'red':
       print '#',
    else:
       print '.',
       if prev == 'red': # encounted ['red', 'blank']
          break
    prev = point

for point in it:
    print '.',
print
"
Python & Matplotlib: How to create a meshgrid to plot surf?,"from itertools import product

X = np.arange(15) # or whatever values for x
Y = np.arange(5)  # or whatever values for y
N, M = len(X), len(Y)
Z = np.zeros((N, M))
for i, (x,y) in enumerate(product(X,Y)):
    Z[np.unravel_index(i, (N,M))] = z([x,y])
"
"Find the first N elements of a list, until a condition is satisfied","return list(itertools.takewhile(not_condition, your_list))
"
creating stream to iterate over from string in Python,"txt = ""foo\nbar\nbaz""

m_1 = []
io = StringIO.StringIO(txt)
for line in io:
    m_1.append(line)
"
Populating a defaultdict at init time,">>> defaultdict(int, [(i, i*i) for i in range(5)])
defaultdict(<type 'int'>, {0: 0, 1: 1, 2: 4, 3: 9, 4: 16})
"
How to use a map with *args to unpack a tuple in a python function call,"def merger( (leftfile,rightfile,leftvarname,outvarname) ):
    do_the_merge
"
How can I replace substrings without replacing all at the same time? Python,"import re
pattern = re.sub('noun', lambda match: getRandomLine('noun.txt'), pattern)
"
colliderect() triggers unexpectedly,"  # in class Worm...
def __init__(self, surface, x, y, length):
    self.surface = surface
    self.x = x
    self.y = y
    self.length = length
    self.dir_x = 0
    self.dir_y = -1
    self.body = []
    self.crashed = False

    self.rect = pygame.Rect(x,y,1,1)  # the 1,1 in there is the size of each worm segment!
      # ^ Gives the 'head' of the worm a rect to collide into things with.

  #...

def move(self):
    """""" Move the worm. """"""
    self.x += self.dir_x
    self.y += self.dir_y

    if (self.x, self.y) in self.body:
        self.crashed = True

    self.body.insert(0, (self.x, self.y))

    if len(self.body) > self.length:
        self.body.pop()

    self.rect.topleft = self.x, self.y
      # ^ Add this line to move the worm's 'head' to the newest pixel.
"
Add a 2 value tuple to dict as key:value,"rules.update(rule.split('=', 1) for rule in recurrence.split(';'))
"
Two Lists Into One Dictionary Python,"import csv
from itertools import izip_longest
dates = ['2014-07-31', '2013-11-22', '2014-01-01']
closes = [""what's"", 'this?']
with open('data.csv', 'w') as f:
    csv.writer(f).writerows(izip_longest(dates, closes))
"
Numpy modify array in place?,">>> def foo(a):
...     a += 10
... 
>>> a = numpy.arange(10)
>>> a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> foo(a)
>>> a
array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19])
"
Check what proxies are used in Requests module in Python3,"requests.utils.get_environ_proxies(url)
"
Reading complex binary file in python,"import array

def read_complex_array2(filename, M, N):
    result = []
    with open(filename, ""rb"" ) as input:
        for col in xrange(M):
            reals = array.array('h')
            reals.fromfile(input, N)
            # reals.byteswap()  # if necessary
            imags = array.array('h')
            imags.fromfile(input, N)
            # imags.byteswap()  # if necessary
            cmplx = [complex(r,i) for r,i in zip(reals, imags)]
            result.append(cmplx)
    return result
"
How do I save an image in python 3 using PIL?,"from tkinter import *
from PIL import Image
from PIL import Image, ImageTk
import time, sys


def col():
    global count1,count,pix,x,root,img
    count1+=1
    print(""(""+str(count1)+"")"")
    count=-1
    for i in pix:
        count+=1
        #print(i)
        i+=10
        pix[count]=i

    #update the data in img and then paste it into photo
    img.putdata(pix)
    photo.paste(img)
    root.update()
    root.after(100, col)

root=Tk()

#load the image before making PhotoImage
img = Image.open(""AI.gif"")
pix=list(img.getdata())
width=img.size[0]
height=img.size[1]
#img.close() #don't close the image as you won't be able to modify it after closing

# do this part after defining img
photo = ImageTk.PhotoImage(img)
        # ^ use PIL's PhotoImage to use PIL operations on it
x=Label(root, compound=""top"", image=photo)
x.pack(side=""right"")

root.geometry((str(width)+""x""+str(height))+""-0+0"")
root.update()

count1=0
col()

root.mainloop()
"
argparse conditional argument structure,"import argparse

class OneOrThree(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if len(values) == 1:
            setattr(namespace, self.dest, values)
            setattr(namespace, 'result', decimal_to_dms(*values))
        elif len(values) == 3:
            setattr(namespace, self.dest, values)
            setattr(namespace, 'result', dms_to_decimal(*values))
        else:
            raise parser.error('Expected 1 or 3 arguments')

def dms_to_decimal(deg,minute,sec):
    assert float(minute) < 60.0, 'Mintue value: %s must be less than 60' % float(minute)
    assert float(sec) < 60.0, 'Second value: %s must be less than 60' % float(sec)
    return float(deg)+float(minute)/60.0+float(sec)/(60.0*60.0)

def decimal_to_dms(deg):
    minute = 60.0*(deg-int(deg))
    sec = 60.0*(minute-int(minute))
    return int(deg),int(minute),sec

parser = argparse.ArgumentParser(
    usage='%(prog)s deg [minute, sec]',)
parser.add_argument('dms_args', nargs='+',
                    type=float,
                    action=OneOrThree,
                    metavar='deg [minute, sec]',
                    help='Given one arg, returns dms. Given three args, returns deg')
args = parser.parse_args()
print(args.result)
"
How to extract a number from a string in python,"In [74]: import re

In [75]: re.findall('\d+',""any string coming from db[090876]"")
Out[75]: ['090876']
"
Understanding how to multiply specific values in tuples in Python,"portfolio= [ ( ""25-Jan-2001"", 43.50, 25, 'CAT', 92.45 ),
( ""25-Jan-2001"", 42.80, 50, 'DD', 51.19 ),
( ""25-Jan-2001"", 42.10, 75, 'EK', 34.87 ),
( ""25-Jan-2001"", 37.58, 100, 'GM', 37.58 )
]

print total_purchase_price(portfolio)
print total_wins(portfolio)
"
Adding Zooming in and out with a Tkinter Canvas Widget in Python,"    def redraw(self, x=0, y=0):
        if self.img_id: self.canvas.delete(self.img_id)
        iw, ih = self.orig_img.size
        # calculate crop rect
        cw, ch = iw / self.scale, ih / self.scale
        if cw > iw or ch > ih:
            cw = iw
            ch = ih
        # crop it
        _x = int(iw/2 - cw/2)
        _y = int(ih/2 - ch/2)
        tmp = self.orig_img.crop((_x, _y, _x + int(cw), _y + int(ch)))
        size = int(cw * self.scale), int(ch * self.scale)
        # draw
        self.img = ImageTk.PhotoImage(tmp.resize(size))
        self.img_id = self.canvas.create_image(x, y, image=self.img)
        gc.collect()
"
Referencing range of IP addresses,"for i in range(5,51):
    ip = ""192.168.0.%d"" % (i)
    print ip
"
Sending http headers with python,client.send('HTTP/1.0 200 OK\r\n')
How to set all values of a complex dict to the same one?,"def setdictvalto(d, value):
    for k in d:
        if isinstance(d[k], dict):
            setdictvalto(d[k], value)
        else:
            d[k] = value
"
"Without using Counter(), how to find most common element in a list?","from collections import defaultdict
count_dict = defaultdict(int)
for item in my_list:
    count_dict[item] += 1
"
Jinja install for python,"easy_install Jinja2
"
RFC 1123 Date Representation in Python?,"from email.utils import formatdate
from datetime import datetime
from time import mktime

now = datetime.now()
stamp = mktime(now.timetuple())
print formatdate(
    timeval     = stamp,
    localtime   = False,
    usegmt      = True
) #--> Wed, 22 Oct 2008 10:55:46 GMT
"
Create an empty data frame with index from another data frame,df2 = pd.DataFrame(index=df1.index)
Increasing the functionality of my Scrapy spider - Following internal links,"import urlparse
from scrapy.spider import BaseSpider
from scrapy.http import Request
from scrapy.selector import Selector
from TOSpider.items import TOSpiderItem

class MySpider(BaseSpider):
    name = ""TOSpider""
    allowed_domains = [""http://nowtoronto.com/""]
    start_urls = [""http://www.nowtoronto.com/music/listings/""]

    def parse(self, response):
        selector = Selector(response)
        listings = selector.css(""div.listing-item0, div.listing-item1"")

        for listing in listings:
            item = NowTorontoItem()
            for body in listing.css('span.listing-body > div.List-Body'):
                item [""eventArtist""] = body.css(""span.List-Name::text"").extract()
                item [""eventTitle""] = body.css(""span.List-Body-Emphasis::text"").extract()
                item [""eventHolder""] = body.css(""span.List-Body-Strong::text"").extract()
                item [""eventDetails""] = body.css(""::text"").extract()

            # instead of returning all items at the end,
            # you can use yield with an item in each iteration
            yield item

            # and you can also yield a Request()
            # so that scrapy enqueues a new page to fetch
            detail_url = listing.css(""div.listing-readmore > a::attr(href)"")
            if detail_url:
                yield Request(urlparse.urljoin(response.url,
                                               detail_url.extract()[0]),
                              callback=self.parse_details)

    def parse_details(self, response):
        selector = Selector(response)
        # and here you parse 
        # <span property=""v:location"">, 
        # <span property=""v:organization"">, 
        # <span property=""v:name"">, 
        # <span property=""v:street-address"">, 
        # <span property=""v:locality"">, 
        # <span property=""v:postal-code"">, 
        # <span property=""v:tel""> and <span property=""v:url""> ...
        #
        # and return a item
"
Python - Return values from a function,"for (item, value) in config.items(section):
    # the function returns at the end of the 1st iteration
    # hence you get only 1 tuple. 
    # You may also consider using a generator & 'yield'ing the tuples
    return (item, value) 
"
why is numba so much faster on this simple summation?,"@nb.jit(nopython=True)
def nb_sum(A):
    s=0
    n = A.shape[0]
    for i in range(n):
        s += A[i]
    return s

@nb.jit(nopython=True)
def nb_sum2(i):
    s=0
    for x in range(i):
        s+=x
    return s
"
dictionary not storing multiple values for same key,"import math

def distance(argv):
    comp_diff = []
    for comp_1, comp_2 in argv:
        comp_diff.append(comp_1-comp_2)
        print comp_2
    return math.sqrt(sum([math.pow(comp,2) for comp in comp_diff]))

if __name__ == '__main__':
    components = [(0,4), (0,5), (0,4)]
    d = distance(components)
    print d
"
How to check if a date time is before midday,"if dt.time() < datetime.time(12, 30)
"
How do I specify which columns to print to a text file using Python?,"In [219]: words = ['5216', 'SMITH', 'VICTORIA', 'F', '2009-12-19']

In [220]: [words[0], words[-1]]
Out[220]: ['5216', '2009-12-19']

In [221]: words[1:3]
Out[221]: ['SMITH', 'VICTORIA']
"
How to apply a mask to a number or string in Python?,"In [277]: mask = '001001'

In [278]: num=12345678

In [279]: """".join(x if y!='1' else '0' for x,y in izip_longest(str(num),mask,fillvalue=""#""))
Out[279]: '12045078'
"
how to change the name of the field displaying in my form,"from django.utils.translation import ugettext_lazy as _

class PostForm(forms.ModelForm):
    name = forms.CharField(
        label=_('Title'),
        ...
    )
    ....
"
Adding attribute to form field using crispy forms,"        def __init__(self, *args, **kwargs):
            super(RedeemForm, self).__init__(*args, **kwargs)
            setup_bootstrap_helpers(self)
            .....................
            self.fields['email'].required = True
"
List position changing,"for items in line:
    breakup= items.split()
    number, salary, position, first, des1, des2, last = breakup
    data.append(tuple([last, first + ' ' + des1 + ' ' + des2, number, position, salary]))

print data
"
Zip and apply a list of functions over a list of values in Python,"[x(y) for x, y in zip(functions, values)]"
Merging part of tuples in Python,">>> l = [('a', 'b', 'c', [(1, 2),(2, 3),(3, 4)]),
...      ('a', 'b', 'c', [(1, 1),(2, 4),(3, 6)]),
...      ('a', 'b', 'd', [(1, 3),(2, 6),(3, 7)]),
...      ('a', 'b', 'd', [(1, 7),(2, 8),(3, 9)])]

>>> d = defaultdict(lambda:defaultdict(list))
>>> for k1,k2,k3, lst in l:
...  for t in lst:
...   d[(k1,k2,k3)][t[0]].append(t[1])
"
check whether a file exists,os.path.isfile(fname)
Why can't I duplicate selected items in for loop?,"letters = ['a', 'b', 'c']
cn = letters.count(""c"")
letters = [""c""] * letters.count(""c"") + letters

print(letters)
"
How to do a binary search for a range of the same value?,"daysSick = [0, 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 6, 11, 15, 24]

# using a function
idxL = lambda val, lst:  [i for i,d in enumerate(lst) if d==val]

allVals = idxL(0,daysSick)
(0, 3)
"
longest common sequence group,"def common_count(t0, t1):
  ""returns the length of the longest common prefix""
  for i, pair in enumerate(zip(t0, t1)):
    if pair[0] != pair[1]:
      return i
  return i

def group_by_longest_prefix(iterable):
  ""given a sorted list of strings, group by longest common prefix""
  longest = 0
  out = []

  for t in iterable:
    if out: # if there are previous entries 

      # determine length of prefix in common with previous line
      common = common_count(t, out[-1])

      # if the current entry has a shorted prefix, output previous 
      # entries as a group then start a new group
      if common < longest:
        yield out
        longest = 0
        out = []
      # otherwise, just update the target prefix length
      else:
        longest = common

    # add the current entry to the group
    out.append(t)

  # return remaining entries as the last group
  if out:
    yield out
"
Better way to find existence of arrays in list of arrays,"if array_to_add is not in array_list:
    array_list.append(array_to_add)
"
Two try statements with the same except clause,"for i in range(1, -1, -1):
    try:
        string[i] = int(string[i])
    except ValueError:
        pass
    else:
        break
else:
    print('Was in neither form')
"
How to reduce xticks label resolution when showing clock time,"from matplotlib.dates import AutoDateFormatter, AutoDateLocator

xtick_locator = AutoDateLocator()
xtick_formatter = AutoDateFormatter(xtick_locator)
xtick_formatter.scaled[30.] = '%d %b'
xtick_formatter.scaled[1.] = '%d %b'
xtick_formatter.scaled[1/24.] = '%d/%m %H:%M'
xtick_formatter.scaled[1/(24.*60.)] = '%d/%m %H:%M'
xtick_formatter.scaled[1/(24.*60.*60.)] = '%d/%m %H:%M:%S'
ax_av.xaxis.set_major_locator(xtick_locator)
ax_av.xaxis.set_major_formatter(xtick_formatter)
"
How to look for consecutive repeats in regex?,"mystring = 'abccd'
print re.findall(r'(\w)\1', mystring)  # ['c']
"
pop() function not functioning right in a for loop,"def anti_vowel(text):
    return ''.join(c for c in text if c.lower() not in vowels)
"
Turning string with embedded brackets into a dictionary,"import re
x=""{key1 value1} {key2 value2} {key3 {value with spaces}}""
print dict(re.findall(r""\{(\S+)\s+\{*(.*?)\}+"",x))
"
How to use the quick sort to sort by index in a list of a list,"import operator
mylist = [[2, 5, 3],
          [2, 4, 9],
          [0, 9, 1],
          [1, 1, 1],
          [4, 7, 5]]

mylist.sort(key=operator.itemgetter(1))
"
Use Beautifulsoup to turn <ul> <li> and unbounded items into a list,"from pprint import pprint
from bs4 import BeautifulSoup


input_string = """"""peanut butter1
<ul id=""ul0002"" list-style=""none"">peanut butter2
    <li id=""ul0002-0001"" num=""0000"">2.0 to 6.0 mg of 17&#x3b2;-estradiol and</li>
    <li id=""ul0002-0002"" num=""0000"">0.020 mg of ethinylestradiol;</li>
    <br>
    <li id=""ul0002-0003"" num=""0000"">0.25 to 0.30 mg of drospirenone and</li>peanut butter3
</ul>peanut butter4""""""

soup = BeautifulSoup(input_string, 'html.parser')

result = []
for item in soup.find_all(text=True):
    value = item.strip()
    if value:
        parent = 'no tag' if item.parent.parent is None else item.parent.name
        result.append([parent, value])

pprint(result)
"
Check for the presence of a key/value pair in a Python dictionary,"# Or specify your own default value
if mydict.get(""key"", False) == ""somevalue""
"
enumeration values in json,"#!/usr/bin/python
import json
import cgi
import cgitb
import sys
reload(sys)
sys.setdefaultencoding('utf8')
form = cgi.FieldStorage() 
cityRu = form.getvalue('city')
print (""Content-type: text/html"")
print ("""")
cities = json.loads(open('json/cities.json').read())
ourResult = cities
for rs in ourResult:
    try:
        print (rs['name_translations']['en']+' - '+rs['name_translations']['ru'])
    except KeyError:
        print (""ERROR WITH KEYS"")
        # do something else...
"
state retention for classes and closures,"class Counter:
    def __init__(self, start=0):
        self.count = start - 1
    def __call__(self):
        self.count += 1
        return self.count
"
Combine XML files similar to ConfigParser's multiple file support,"import lxml.etree as ET
import io

class Settings(object):
    def __init__(self,text):
        root=ET.parse(io.BytesIO(text)).getroot()
        self.settings=dict((elt.tag,elt.text) for elt in root.xpath('/Settings/*'))
    def update(self,other):
        self.settings.update(other.settings)

text='''\
<?xml version=""1.0"" encoding=""UTF-8""?>
<Settings>
    <PathA>/Some/path/to/directory</PathA>
    <PathB>/Another/path</PathB>
</Settings>'''

text2='''\
<?xml version=""1.0"" encoding=""UTF-8""?>
<Settings>
    <PathB>/Change/this/path</PathB>
</Settings>'''    

s=Settings(text)
s2=Settings(text2)
s.update(s2)
print(s.settings)
"
Simple and safe way to wait for a Python Process to complete when using a Queue,"import multiprocessing

class MyClass:
    def __init__(self):
        pass

def example_run(someArbitraryInput):
    foo = [MyClass() for i in range(10000)]
    return foo

if __name__ == '__main__':

    pool = multiprocessing.Pool(processes=5)
    output = pool.map(example_run, range(5))
    pool.close();  pool.join()  # make sure the processes are complete and tidy
    print(""Processes completed"")
"
Python Subset dataframe with another dataframe,"import pandas as pd
df1 = pd.DataFrame({'item' :  [1, 2, 3, 4],
                           'fruit' : ['mango', 'apple', 'banana', 'mango']})

df2 = pd.DataFrame({'item' : [1, 2]})

print(df1[(df1.item).isin(df2.item)])
"
Cannot change content of list within list. Can anybody explain why?,"month_iter = iter(month)
try:
  while True:
    week = next(month_iter)
    # here begins your code
    week = [day[0] for day in week]
    # here ends your code
except StopIteration:
  pass
"
Making sure each method ends with a specific statement,"class Example(object):
  def method1(self):
    print 1
  def method2(self):
    print 2
  def __getattribute__(self, name):
    def f():
        # todo: check if it's actually a function or not before calling
        r = object.__getattribute__(self, name)()
        print 'hello world'
        return r
    return f
"
How can I check if the characters in a string are in a dictionary of values?,">>> set(s) & d.keys()
{'a', 'c', 'b'}
"
Matrix with given numbers in random places in python/numpy,"In [7]: import itertools
In [8]: indices = list(itertools.product(range(N), range(N)))
"
I want to find the date in the description of AMI image,">>> import re
>>> patt = re.compile(""([0-9]{2}/[0-9]{2}/[0-9]{4})"")
>>> m = patt.search(ami_image.description)
>>> m.groups(0)
('17/04/2015',)
"
Python sqlite3 build where part with dynamic placeholders,"sql = ""SELECT ... WHERE 1""
parameters = []
if name_input != """":
    sql += "" AND name = ?""
    parameters += [name_input]
if id_input != """":
    sql += "" AND id = ?""
    parameters += [id_input]
...
"
Can I set a variable to nothing?,"if sUserInt == None:
    #do stuff here
"
How do I find the attribute to two separate words in Python?,"# list labels for columns
columns = ['Masculine', 'Neuter', 'Feminine', 'Plural']

# list labels for rows
rows = ['Nominative', 'Accusative', 'Dative', 'Genitive']

# create a grid of answers for combination of column-rows
answers = [['der', 'das', 'die', 'die'],
        ['den', 'das', 'die', 'die'],
        ['dem', 'dem', 'der', 'den'],
        ['des', 'des', 'der', 'der']]

def correct_answer(column_name, row_name):
    # get correct indexes
    column_index = columns.index(column_name)
    row_index = rows.index(row_name)
    # used indexes to get answer
    return answers[row_index][column_index]

print correct_answer('Masculine', 'Accusative')
"
how can I use selenium with my normal browser,"options = webdriver.ChromeOptions()
options.add_argument('--user-data-dir=/path/to/my/profile')
driver = webdriver.Chrome(chrome_options=options)
"
How can I get the public IP using python2.7?,"ipify.org
from json import load
from urllib2 import urlopen

my_ip = load(urlopen('https://api.ipify.org/?format=json'))['ip']
"
Returning specific content,"data = soup.find(""ul"", {""class"": ""posts""})

ips = [line.rsplit(None, 1)[1] for line in data.text.splitlines() if line]

print(ips)
['116.10.191.162', '116.10.191.204', '61.174.51.232', '61.174.51.224', '116.10.191.225', '200.162.47.130', '116.10.191.175', '61.174.51.223', '61.174.51.234', '61.174.51.209', '116.10.191.165', '106.240.247.220']
"
non writing replace/update in rethinkdb query,"r.table(""A"")
  .map(lambda x: 
    x.merge({
      ""b_list"" :
        x[""b_list""].eq_join(lambda x: x, r.table(""B""))[""right""]})
"
How can group relations be shown?,"food = {""Chicken"": ""Chicken $4.99"", ""Beef"": ""Beef $5.95"", ""Taco"": ""Taco $3.50""}
toys = {""Blocks"": ""Blocks $12.35"", ""Army men"": ""Army men $5.99""}
                #Ect.


search = input(""Search Here "")
print(search)


if search in food:  #  If the key exists in the dict, print all items 
    print (food.items())
elif search in toys:
    print (toys.items())
"
python pyparsing word excludeChars,"integer = Word(nums+'_').setParseAction(lambda t: int(t[0].replace('_','')))
integer.parseString('1_000')  -->  [1000]
"
python - extract lines in CSV file which don't have elements in a list,"r = re.compile('\\b('+""|"".join(de)+')\\b', re.IGNORECASE)
"
How can I return the last element that fits under the criteria for driver.find_element_by_partial_link_text?,"elems = driver.find_elements_by_partial_link_text('sometext')
if elems:
    my_elem = elems[-1]
"
Mocking a variable in python,"from threading import Thread
from time import sleep

def change_state(obj):
    sleep(5)
    obj.commandState = obj.COMMAND_COMPLETE

def test_1():
  obj = MyClass()

  # Launch a thread that within 5 seconds will change the state of `obj`
  Thread(target=change_state, args=[obj]).start()

  # Call the main loop, which will recognize that the state changed within 5 secs
  obj.run_loop()
"
Temporal Expression recognition in Python,">>> from dateutils import parser
>>> parser.parse('January 12, 2012').strftime('%s')
'1326315600'
>>> parser.parse('01/12/2012').strftime('%s')
'1326315600'
>>> parser.parse('Sunday, 16/09/2012').strftime('%s')
'1347742800'
"
Python JSON dump a list of object.,"strs = [json.dumps(innerdict) for innerdict in d]
s = ""[%s]"" % "",\n"".join(strs)
open('./testing.json','w').write(s)
"
"In programming, why are escape sequences for regex and escape sequences for string literals different?","regex_string = 'A.C'  # match an A, followed by any character, followed by C
regex_string = 'A\.C' # match an A, followed by a period, followed by C
regex_string = 'AsC'  # match an A, followed by s, followed by C
regex_string = 'A\sC'  # match an A, followed by a space character, followed by C
"
more concise comparison of two lists?,"not any(x > y for x, y in zip(t1, t2))
=> True
"
Joining two 2D numpy arrays into a single 2D array of 2-tuples,"import numpy as np
dists = np.vstack(([x_dists.T], [y_dists.T])).T
"
How to combine the data from many data frames into a single data frame with an array as the data values,"In [31]: p.apply(f, 'items')
array([1, 5])
array([2, 6])
array([3, 7])
array([4, 8])
Out[31]:
   col1  col2
1     1     1
2     1     1
"
Hierarchical option tree in python,"class Cmd:

    def __init__(self, key, parent=None):
        self.key = key
        self.parent = parent

    def __call__(self, *args, **kwargs):
        return ""%s %s"" % (self.parent(), self.key) if self.parent else self.key
"
python mock: @wraps(f) problems,">>> from functools import wraps
>>> from mock import Mock
>>> def decor(f):
...     @wraps(f)
...     def wrapper(*args, **kwds):
...         return f(*args, **kwds)
...     return wrapper
... 
>>> mock_func = Mock()
>>> decor(mock_func)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin>"", line 2, in decor
  File "".../opt/lib/python2.7/functools.py"", line 33, in update_wrapper
    setattr(wrapper, attr, getattr(wrapped, attr))
  File "".../lib/python2.7/site-packages/mock.py"", line 660, in __getattr__
    raise AttributeError(name)
AttributeError: __name__
>>> mock_func.__name__ = 'foo'
>>> decor(mock_func)
<function foo at 0x10c4321b8>
"
python - is there no better way to get the expression in a debug function,"For example:
#!/usr/bin/env python

import logging
import inspect

def buggy_fn():
    d = 42;
    if d != 69:
        logging.debug('%s(%d): %s is not what we expected. [%s]',
                inspect.currentframe().f_back.f_code.co_filename,
                inspect.currentframe().f_back.f_lineno,
                'd',
                repr(d),
                )

if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)
    buggy_fn()
"
temporary variables in a python expression,">>> b, c = 2, 3
>>> (lambda a: a * (a + 1))(b * c)
42
"
concatenate dictionaries over a key,"result = {}
for d in alist:
    for key, value in d.items():
        result.setdefault(key, []).append(value)
"
how to show Percentage in python,print('{0:.0f}%'.format(1.0 / 3 * 100))
Using a constantly changing variable to define a list,"def makeMessage(feedItem):
    message = {'title':..., ...}
    return message

messages = [makeMessage(fi) for fi in feed['items']]
print(messages)
"
Clicking links by regexp in python selenium,"sel = selenium.selenium(""localhost"", 4444, ""*firefox"", ""http://www.ncbi.nlm.nih.gov/"")
sel.start()
sel.open('/pubmed')
sel.type(""search_term"", ""20032207[uid]"")
sel.click(""search"")
sel.wait_for_page_to_load(30000)
sel.click(""//*[contains(@id,'linkout')]"")
"
Getting the number of digits (Python),"num = 127
order = len(str(num))
print(order) # prints 3
"
Why my python and objective-c code get different hmac-sha1 result?,"def get_signature(key, msg):
    if(isinstance(key, str)):
        key = key.encode('ascii')
    if(isinstance(msg, str)):
        msg = msg.encode('ascii')
    return base64.b64encode(hmac.new(key, msg, hashlib.sha1).digest())
"
"How to know from inside a module, during run time, which script has called a function in it","#file a.py
def my_func(whichmod=None):
    if whichmod == 'b':
         print 'You are module b!'
    elif whichmod == 'c':
         print 'You are module c!'
    else:
         print 'You are not B nor C!'

#files b.py/c.py
import a
a.my_func(whichmod='b')   # or 'c' in module c

#file d.py
import a
a.my_func()
"
Get specifics elements of a xml output in python,"from xml.etree import ElementTree
xmldata = '''<?xml version=""1.0"" encoding=""utf-8""?>
<upload>
    <image>
        <name/>
        <title/>
        <caption/>
        <hash>dxPGi</hash>
        <deletehash>kj2XOt4DC13juUW</deletehash>
        <datetime>2011-06-10 02:59:26</datetime>
        <type>image/png</type>
        <animated>false</animated>
        <width>1024</width>
        <height>768</height>
        <size>172863</size>
        <views>0</views>
        <bandwidth>0</bandwidth>
</image>
<links>
    <original>http://i.stack.imgur.com/dxPGi.png</original>
    <imgur_page>http://imgur.com/dxPGi</imgur_page>
    <delete_page>http://imgur.com/delete/kj2XOt4DC13juUW</delete_page>
    <small_square>http://i.stack.imgur.com/dxPGis.jpg</small_square>
    <large_thumbnail>http://i.stack.imgur.com/dxPGil.jpg</large_thumbnail>
</links>
</upload>'''
tree = ElementTree.fromstring(xmldata)
print tree.find('.//original').text
"
How to test how many times a function has been called,"class Counter(object):
    counts = {}

    @staticmethod
    def count(func):
        def wrapped(*args,**kwargs):
            if func.__name__ in Counter.counts.keys():
                Counter.counts[func.__name__] += 1
            else:
                Counter.counts[func.__name__] = 1
            return func(*args,**kwargs)
        return wrapped

@Counter.count
def test():
    pass

@Counter.count
def test2():
    test()

@Counter.count
def test3():
    test()
    test2()

for _ in range(4):
    test3()
    test2()
    test()

print Counter.counts
"
How can I select values along an axis of an nD array with an (n-1)D array of indices of that axis?,"A[np.ix_(*[np.arange(x) for x in J.shape])+(J,)]
A[np.ogrid[[slice(k) for k in J.shape]]+[J]]
"
Not able to view all columns in Pandas Data frame,"df.to_csv('myfile.csv')
"
Convert an int and bytearray into a ByteString Python struct Socket,">>> struct.pack('<l10s', 1234, bytearray([0]*10)) # In Python 3.x
# struct.pack('<l10s', 1234, bytes(bytearray([0]*10))) # In Python 2.x
b'\xd2\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
"
"Convert a file into a matrix, replace each character with a number in Python","import re
from pprint import pprint

def loadmaze(filename):

    maze = []

    with open(filename) as f:
        for line in f:
            with_delimiters = ''
            for i,ch in enumerate(line):
                with_delimiters += 'S' + ch
            line = with_delimiters

            inchars = '# M'
            outchars = ['-1','0','-2']
            for i,ch in enumerate(inchars):
                line = line.replace(ch,outchars[i])
                line = line.replace('\n','')

            maze_col = line.split('S')
            for i in maze_col:  
                if i == '':
                    maze_col.remove(i)
            maze.append(map(int,maze_col))

    return maze


pprint (loadmaze('maze.txt'))
"
efficient algorithm instead of looping,"import random
import time
def rand_vector(size=3):
    return [random.randint(1, 100) for _ in xrange(3)]
def rand_list(length=200):
    return [rand_vector() for _ in xrange(length)]

print ""Generating lists...""
L1 = rand_list(200)
L2 = rand_list(200)

print ""Running slow...""
s = time.time()
print calc_slow(L1, L2)
print ""Slow for (%d, %d) took %.2fs"" % (len(L1), len(L2), time.time() - s)

print ""Running fast...""
s = time.time()
print calc_fast(L1, L2)
print ""Fast for (%d, %d) took %.2fs"" % (len(L1), len(L2), time.time() - s)
"
Retrieving python module path,path = os.path.abspath(amodule.__file__)
Updating multiple lines of a text file python,"import re
with open(""input.txt"") as infile, open(""output.txt"", ""w"") as outfile:
    outfile.write(re.sub(r""(?s)<cmd>.*?</cmd>"", ""<cmd>\n</cmd>"", infile.read()))
"
How to filter results of a groupby in pandas,"def filtermax(g, filter_on, filter_items, max_over):
    infilter = g.index.isin(filter_items).sum() > 0
    if infilter:
        return g[g[max_over] == g.ix[filter_items][max_over].max()]
    else:
        return g[g[max_over] == g[max_over].max()]
    return g
"
Tokenization using regexp in Python,"ss = ""spam bar ds<hai bye>sd baz eggs ZQ<boo <abv> foo>WX  ""

reg = re.compile('(?:'
                     '\S*?'
                     '<'
                     '[^<>]*?'
                     '(?:<[^<>]*>[^<>]*)*'
                     '[^<>]*?'
                     '>'
                       ')?'
                 '\S+')

print reg.findall(ss)
"
My spider doesn't follow links,"SgmlLinkExtractor(allow = ('\?id=5&epslanguage=fi&sivu=\d'))
"
How do I compare multiple key values from a list of dictionaries?,"from collections import defaultdict
reverselookup = defaultdict(list)
for testdict in test_data:
    reverselookup[testdict['value']].append(testdict)
"
How to move data in numpy array from column/row to another based on value in third column,"import pandas as pd
import numpy as np
np.random.seed(2016)

df = pd.DataFrame({'shapeid': [0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2],
               'x': np.random.random(14),
               'y': np.random.random(14)}) 
#     shapeid         x         y
# 0         0  0.896705  0.603638
# 1         0  0.730239  0.588791
# 2         0  0.783276  0.069347
# 3         0  0.741652  0.942829
# 4         0  0.462090  0.372599
# 5         1  0.642565  0.451989
# 6         1  0.224864  0.450841
# 7         1  0.708547  0.033112
# 8         1  0.747126  0.169423
# 9         2  0.625107  0.180155
# 10        2  0.579956  0.352746
# 11        2  0.242640  0.342806
# 12        2  0.131956  0.277638
# 13        2  0.143948  0.375779

df['col'] = df.groupby('shapeid').cumcount()
df = df.pivot(index='shapeid', columns='col')
df = df.sort_index(axis=1, level=1)
df.columns = ['{}{}'.format(col, num) for col,num in df.columns]
print(df)
"
Optimisation of a simple vector operation (python),">>> dx, dy = x.T
>>> tx, ty = t.T

>>> (dx[:, None] - tx)**2 + (dy[:, None] - ty)**2
array([[ 0.61048982,  0.04379578,  0.30763149],
       [ 0.02709455,  0.30235292,  0.25135934],
       [ 0.21249888,  0.14024951,  0.28441688],
       [ 0.39221412,  0.01994213,  0.17699239]])
"
Xpath Attribute REGEX,"from lxml import html
import requests

page = requests.get('http://web.international.ucla.edu/institute/events')
tree = html.fromstring(page.text)

event_titles = tree.xpath('//a[starts-with(@href,""/institute/event/"")]/text()')

for event_title in event_titles:
    print ""Event Title: "", event_title
"
Name isn't found in my Python application,"def Addition(a, b):
    return a + b

def Subtraction(a, b):
    return a - b

def Multiplication(a, b):
    return a * b

def Division(a, b):
    return a / b

keepProgramRunning = True

while keepProgramRunning:
    print ""Welcome to the Calculator!""
    print ""Please choose what you'd like to do:""

    print ""0: Addition""
    print ""1: Subtraction""
    print ""2: Multiplication""
    print ""3: Division""    


    #Capture the menu choice.
    choice = raw_input()

    #Capture the numbers you want to work with.
    numberA = raw_input(""Enter your first number: "")
    numberB = raw_input(""Enter your second number: "")

    if choice == ""0"":
        print ""Your result is:""
        print Addition(numberA, numberB)
    elif choice == ""1"":
        print ""Your result is:""
        print Subtraction(numberA, numberB)
    elif choice == ""2"":
        print ""Your result is:""
        print Multiplication(numberA, numberB)
    elif choice == ""3"":
        print ""Your result is:""
        print Division(numberA, numberB)
    else:
        print ""Please choose a valid option.""
"
How do i get the output in one line as a string?,"def capital(uinput):
    slice4 = uinput[:4]
    result = """"
    for i in slice4:
       j = ord(i)
       j = j - 32
       k = chr(j)
       result += k
    print result
"
Check if list is either empty or only containing zeroes,"if any(aboveAdj1 + aboveAdj2):
    perAboveFix = 100 * (sum(aboveAdj1) + sum(aboveAdj2)) / (len(aboveAdj1) + len(aboveAdj2))
"
How to check for a necessary input of raw_input?,"ans = raw_input('Enter: ')
if not ans:
    print ""You entered nothing!""
else:
    print ""You entered something!""
"
"Injecting ""global imports"" into Python functions","class GetAverageContext(object):
    def __init__(self, average=pkg1.average, get_lengths=pkg2.get_lengths):
        self.average = average
        self.get_lengths = get_lengths

DefaultGetAverageContext = GetAverageContext()

def get_average(lists, context=DefaultGetAverageContext):
    return context.average(*context.get_lengths(*lists))
"
NumPy map calculation depending on the indices,">>> x, y = np.meshgrid(np.linspace(0, 1, 5), np.linspace(0, 10, 3))
>>> x
array([[ 0.  ,  0.25,  0.5 ,  0.75,  1.  ],
       [ 0.  ,  0.25,  0.5 ,  0.75,  1.  ],
       [ 0.  ,  0.25,  0.5 ,  0.75,  1.  ]])
>>> y
array([[  0.,   0.,   0.,   0.,   0.],
       [  5.,   5.,   5.,   5.,   5.],
       [ 10.,  10.,  10.,  10.,  10.]])
"
Python Assign Value to New Column If Contains() Is True,"df['Type'] = df.Source.str.lower().str.extract('(video|audio|default)')
"
Combine multidimensional array by group python,"d = {}

for nm, ip, tm, dte in data:
    key = nm, dte
    if key in d:
        v = d[key]
        v[1] += "", {}"".format(ip)
        v[2] += "", {}"".format(dte)
    else:
        d[key] = [nm, ip, tm, dte]

print(list(d.values()))
"
Remove part of an element in python,"for item in res:
    print(item)

#the_real_identifier
#the_real_identifier1
"
"RDD transformation map, Python","from itertools import islice

# Dummy data
with open(""/tmp/foo"", ""w"") as fw:
    fw.writelines([""foo"", ""1.0"", ""2.0"", ""3.0""])

def process_part(i, iter):
    if i == 0:
        # We could use enumerate as well
        for x in islice(iter, 1):
            yield x
    for x in iter:
        yield float(x)

(sc.textFile(""foo.txt"")
    .mapPartitionsWithIndex(process_part)
    .collect())
## ['""foo""', 1.0, 2.0, 3.0, 4.0]
"
How to handle CLI subcommands with argparse,"import argparse
parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='Functions')
parser_1 = subparsers.add_parser('cmd1', help='...')
parser_1.add_argument('cmd1_option1', type=str, help='...')
parser_1.set_defaults(parser1=True)

parser_2 = subparsers.add_parser('cmd2', help='...')
parser_2.set_defaults(parser2=True)

parser_3 = subparsers.add_parser('cmd3', help='...')
parser_3.add_argument('cmd3_options', type=int, help='...')
parser_3.set_defaults(parser_3=True)

args = parser.parse_args()
print(args)
"
How to replace different blocks of text in all combinations using awk?,"#!/usr/bin/python
""""""Read cobol file and print all possible redefines.""""""
import sys
from itertools import product

def readfile(fname):
    """"""Read cobol file & return a master list of lines and namecount of redefined lines.""""""
    master = []
    namecount = {}
    with open(fname) as f:
        for line in f:
            line = line.rstrip(' .\t\n')
            if not line:
                continue
            words = line.split()
            n = int(words[0])
            if '=' in words or 'REDEFINES' in words:
                name = words[3]
            else:
                name = words[1]
            master.append((n, name, line))
            namecount[name] = namecount.get(name, 0) + 1
    # py2.7: namecount = {key: val for key, val in namecount.items() if val > 1}
    namecount = dict((key, val) for key, val in namecount.items() if val > 1)

    return master, namecount

def compute(master, skip=None):
    """"""Return new cobol file given master and skip parameters.""""""
    if skip is None:
        skip = {}
    seen = {}
    skip_to = None
    output = ''
    for n, name, line in master:
        if skip_to and n > skip_to:
            continue
        seen[name] = seen.get(name, 0) + 1
        if seen[name] != skip.get(name, 1):
            skip_to = n
            continue
        skip_to = None
        output += line + '\n' 
    return output

def find_all(master, namecount):
    """"""Return list of all possible output files given master and namecount.""""""
    keys = namecount.keys()
    values = [namecount[k] for k in keys]
    out = []
    for combo in product(*[range(1, v + 1) for v in values]):
        skip = dict(zip(keys, combo))
        new = compute(master, skip=skip)
        if new not in out:
            out.append(new)
    return out

def main(argv):
    """"""Process command line arguments and print results.""""""
    fname = argv[-1]
    master, namecount = readfile(fname)
    out = find_all(master, namecount)
    print('\n'.join(out))

if __name__ == '__main__':
    main(sys.argv)
"
Elif-row without else python,"wereAnyTrue = False

if foo == 4 :
  # Do the washing
  wereAnyTrue = True
if bar == 6 :
  # Buy flowers for girlfriend
  wereAnyTrue = True

# ... etc

if not wereAnyTrue :
  # Eat pizza in underpants
"
numpy: efficiently reading a large array,"a = numpy.fromfile('filename', dtype=numpy.float32)"
Regex to match date and time,"In [33]: %%timeit
m = matcher.match(line)
m.group(1), m.group(2)
   ....: 
1000000 loops, best of 3: 1.08 µs per loop

In [35]: %%timeit                                    
spl = line.split()
tme, dte = spl[-3], spl[-1]
   ...: 
1000000 loops, best of 3: 354 ns per loop
"
How to round a number to significant figures in Python,">>> from math import log10, floor
>>> def round_to_1(x):
...   return round(x, -int(floor(log10(abs(x)))))
... 
>>> round_to_1(0.0232)
0.02
>>> round_to_1(1234243)
1000000.0
>>> round_to_1(13)
10.0
>>> round_to_1(4)
4.0
>>> round_to_1(19)
20.0
"
Python: Compare 2 lists of tuples of different size,"In [57]: list_x=[(1,1),(1,2),(2,3),(2,5),(4,6)]

In [58]: list_y=[(1,1,33),(1,3,65),(2,4,11)]

In [59]: list_x_set = set(list_x)

In [60]: result = [item for item in list_y if item[0:2] not in list_x_set]

In [62]: result
Out[62]: [(1, 3, 65), (2, 4, 11)]
"
Why are strings from sys.stdin different from hardcoded strings in my script?,"import sys

if __name__ == ""__main__"":
    for text in sys.stdin:
        text_in_script = 'test'

        # warning: rstrip() removes all whitespace; see rstrip() docs for alternatives
        print(text.rstrip() == text_in_script)
"
what is the difference between functools.wraps and update_wrapper,"def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
    def decorator(wrapper):
        return update_wrapper(wrapper, wrapped=wrapped, ...)
    return decorator
"
Need assistance on Print function,"print(""Your number is {a}."".format(a=a))
"
Combine two lists which have the same item in dict,"temp = {a['category_name']: dict(a) for a in a_list}
for b in b_list:
    temp[b['category_name']].update(b)
c_list = list(temp.values())    # list() unnecessary in py2.X
"
Speed up for loop with numpy,"In [158]: C[d,e,f + b[:, np.newaxis]].shape
Out[158]: (50, 900)
"
Python - Seaborn: Modifying the heatmap legend,"fig, ax = plt.subplots()
fig.set_size_inches(14, 7)
uniform_data = np.random.rand(10, 12)
#add an axis to our plot for our cbar, tweak the numbers there to play with the sizing. 
cbar_ax = fig.add_axes([.92, .3, .02, .4])
#assign the cbar to be in that axis using the cbar_ax kw
sns.heatmap(uniform_data, ax=ax, cbar_ax=cbar_ax)

#hacky solution to change the highest (last) yticklabel
changed_val = "">= "" + cbar_ax.get_yticklabels()[-1].get_text()

#make a new list of labels with the changed value.
labels = [x.get_text() for x in cbar_ax.get_yticklabels()[:-1]] + [changed_val]

#set the yticklabels to the new labels we just created. 
cbar_ax.set_yticklabels(labels)
"
Send mail on Celery task success/failure reliably,"import functools


def send_emails(func):
    @functools.wraps(func)
    def wrapper(self, *args, **kwargs):
        this_task_id = self.request.id
        email = kwargs.pop('email', False)  # get email and remove it from kwargs
        try:
            ret = func(self, *args, **kwargs)
        except NotifyException as ex:
            if email:
                send_failure_mail(email, this_task_id)
            return ex.value
        except Exception:
            if email:
                send_failure_mail(email, this_task_id)
            # It would be better to raise again to allow celery knows the task has failed
            raise
        else:
            if email:
                send_success_mail(mail, this_task_id)
            return ret
    return wrapper
"
custom object list json serialize in python,"import json

class Custom(object):
    pass

class CustomEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Custom):
            return 'TASTY'
        return CustomEncoder(self, o)

print json.dumps( Custom(), cls=CustomEncoder )
print json.dumps( [1, [2,'three'], Custom()], cls=CustomEncoder )
"
Using list.reverse() on a copy changes the original,">>> import copy
>>> x = [1,2,3, [4,5]]
>>> y = copy.copy(x)
>>> id(x)
141913324
>>> id(y)
139369964
>>> x.append(10)
>>> x
[1, 2, 3, [4, 5], 10]
>>> y
[1, 2, 3, [4, 5]]
>>> x[3].append(20)
>>> x
[1, 2, 3, [4, 5, 20], 10]
>>> y
[1, 2, 3, [4, 5, 20]]
>>> z = copy.deepcopy(x)
>>> z
[1, 2, 3, [4, 5, 20], 10]
>>> x[3].append(50)
>>> x
[1, 2, 3, [4, 5, 20, 50], 10]
>>> z
[1, 2, 3, [4, 5, 20], 10]
>>> 
"
Adding ith element of two lists,"list_final = [l1 + l2 for l1, l2 in zip(list_1, list_2)]
"
Intersection between two list of strings python,"def solution(S):
    length = len(S)
    if length == 0:
        return 1
    count = 0
    i = 1 # Don't test the empty string!
    while i <= (length + 1)/2: # Test up to halfway
        prefix = S[:i] # Up to i
        suffix = S[:length-i-1:-1] # Reverse string, up to length - i - 1
        print prefix, suffix
        if prefix == suffix:
            count += 1
        i += 1
    return count

print solution("""")
print solution(""abbabba"")    
print solution(""codility"")
"
wrapped output for python logging.StreamHandler(),"import logging
import textwrap

class WrappedFixedIndentingLog(logging.Formatter):
    def __init__(self, fmt=None, datefmt=None, style='%', width=70, indent=4):
        super().__init__(fmt=fmt, datefmt=datefmt, style=style)
        self.wrapper = textwrap.TextWrapper(width=width, subsequent_indent=' '*indent)

    def format(self, record):
        return self.wrapper.fill(super().format(record))

# standard stuff
rootLogger = logging.getLogger()
rootLogger.setLevel(logging.DEBUG)
consLogger = logging.StreamHandler()
rootLogger.addHandler(consLogger)

# indent=18 matches fixed width of asctime + levelname + spaces
consLogger.setFormatter(WrappedFixedIndentingLog(
    '%(asctime)-8s %(levelname)-8s %(message)s', '%H:%M:%S', indent=18))

message = ""Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.""
rootLogger.log(logging.DEBUG, message)
"
How do i turn a list of words into a sentence string?,"' '.join(word[0] for word in word_list)
"
python split and evaluate,"import re
regex = re.compile(r'\([^\(\)]+\)')

def eval_expr(expr):
    match = regex.search(expr)
    if match:
        sub_expr = match.group()
        return eval_expr(expr.replace(sub_expr, str(eval_expr(sub_expr[1:-1]))))
    args = expr.split()
    op = args.pop()
    return eval(op.join(args))
"
Python Regex And encode,"for name in files:
    with open(name, 'r') as f:
        for line in f:
            matches = re.findall(""\d{2}-\d{8}"", line)
            for mt in matches:
                print mt
"
Consolidate duplicate rows of an array,">>> b = a[np.argsort(a[:, 0])]
>>> grps, idx = np.unique(b[:, 0], return_index=True)
>>> counts = np.add.reduceat(b[:, 1:], idx)
>>> np.column_stack((grps, counts))
array([[117,   1,   1,   0,   0,   1],
       [120,   0,   1,   1,   0,   0],
       [163,   1,   0,   0,   0,   0],
       [189,   0,   0,   0,   1,   0]])
"
python initialization of constants in separate file,"class MyClass(object):
    ...
    def __getattr__(self, key):
        return self.config.get('constants', key)
"
I can't turn elements of my list into integers,"items = [int(j) for j in contents[i].split("";"")]
"
Nth Fibonacci number for n as big as 10^19?,"X**100 == (((((X**2)**2)**2)**2)**2)**2 + ...
"
Compare two strings in python,"if test_string.lower() in (s.lower() for s in list_of_strings)
"
Stripping Unwanted Characters When Writing To A File,"#list of lines
lines = ['34512340', '0.5\r\n', 'Plain Brackets'];

#looping through the whole list
for i in range(len(lines)):

    #stripping unwanted characters \n and \r from each line
    lines[i] = lines[i].rstrip('\n').rstrip('\r')

    #printing the line without the unwanted characters
    print lines[i]
"
Python: Split text after the second occurrence of character,"def hyphen_split(a):
    if a.count(""-"") == 1:
        return a.split(""-"")[0]
    else:
        return ""-"".join(a.split(""-"", 2)[:2])

>>> hyphen_split(""some-sample-filename-to-split"")
'some-sample'
>>> hyphen_split(""some-sample"")
'some'
"
Sum array by number in numpy,"import numpy as np
data = np.arange(1, 7)
groups = np.array([0,0,1,2,2,1])

unique_groups = np.unique(groups)

# Forgive the bad naming here...
# I can't think of more descriptive variable names at the moment...
x, y = np.meshgrid(groups, unique_groups)
data_stack = np.tile(data, (unique_groups.size, 1))

data_in_group = np.zeros_like(data_stack)
data_in_group[x==y] = data_stack[x==y]

sums = data_in_group.sum(axis=1)
"
why \* escapes even when it is a raw string?,"s_pat = '(' + re.escape(r'*text*') + ')*'
"
Python Binary File Manipulation Speed Up,"from os.path import join
import numpy
import struct
from time import time


def main():

    #Set the path name and filename
    folder = join(""Tone_Tests"",""1khz_10ns_0907153323"")
    fn = join(folder,""Channel1.raw32"")


    #Test 1
    start = time()
    f = open(fn,'rb')
    array = read_fromstring(f)
    f.close()
    print ""Test fromString = "",time()-start
    del array

    #Test 2
    start = time()
    f = open(fn,'rb')
    array = read_struct(f)
    f.close()
    print ""Test fromStruct = "",time()-start
    del array

    #Test 3
    start = time()
    f = open(fn,'rb')
    array = read_fromfile(f)
    f.close()
    print ""Test fromfile = "",time()-start
    del array


def read_fromstring(f):
    #Use Numpy fromstring, read each 4 bytes, convert, store in list
    data = []

    chunk = f.read(4)

    while chunk:
        num_chunk = numpy.fromstring(chunk, dtype = 'float32')
        data.append(num_chunk)

        chunk = f.read(4)

    return numpy.array(data)

def read_struct(f):
    #Same as numpy froms string but using the struct.
    data = []

    chunk = f.read(4)

    while chunk:
        num_chunk = struct.unpack('<f',chunk)
        data.append(num_chunk)

        chunk = f.read(4)

    return numpy.array(data)

def read_fromfile(f):
    return numpy.fromfile(f, dtype = 'float32', count = -1)
"
Python list of tuples to list of int,y = [i[0] for i in x]
Positive integer from Python hash() function,">>> import sys
>>> sys.maxsize
9223372036854775807L
>>> hash('asdf')
-618826466
>>> hash('asdf') % ((sys.maxsize + 1) * 2)
18446744073090725150L
"
Python Regex Split Keeps Split Pattern Characters,"""""""Docs/src/Scripts/temp"""""".replace('/', '/\x00/').split('\x00')"
Matplotlib: Saved files in a loop aren't the same as in show(),"for i in range(0,int(files)):
    fig= plt.figure()
    plt.grid(True)
    ...
"
get min max values of items with same id if difference exists?,">>> def compare(f1, f2):
    # 2 embedded 'with' because I'm on Python 2.5 :-)
    with open(f1+'.txt', 'r') as fin1:
        with open(f2+'.txt', 'r') as fin2:
            lines1 = fin1.readlines()
            lines2 = fin2.readlines()
                    # Do not forget the strip function to remove unnecessary '\n'
            diff_lines = [l.strip() for l in lines1 if l not in lines2]
                    # Ok, we have our differences (very basic)
            diffs = defaultdict(list)
            for line in diff_lines:
                d = eval(line) # We have a dict
                for k in d:
                    list_ids = d[k] # Only one value, k is the frame
                    for i in range(0, len(d[k]), 2):
                        diffs[d[k][i]].append(k)
            for id_ in diffs:
                diffs[id_].sort()
                for k, g in groupby(enumerate(diffs[id_]), lambda (i, x): i - x):
                    group = map(itemgetter(1), g)
                    print 'id {0} : {1} -> {2}'.format(id_, group[0], group[-1])

>>> compare(r'E:\CFM\Dev\Python\test\f1', r'E:\CFM\Dev\Python\test\f2')
id 2 : 17 -> 24
id 2 : 26 -> 26
id 3 : 16 -> 24
id 3 : 26 -> 26
id 10 : 23 -> 24
id 10 : 26 -> 26
"
Count the occurence of specific number from column // convert column data to list,"In [46]: B = [1,2,3,4,5]

In [47]: B.count(2)
Out[47]: 1
"
"How can I make python's argparse accept any number of [-R a b]s, and aggregate them into a list","import argparse

class Pairs(argparse.Action):
    def __call__(self, parser, namespace, values, opts, **kwargs):
        lst = getattr(namespace, self.dest)
        if lst is None:
            lst = []
            setattr(namespace, self.dest, lst)
        lst.append(tuple(values))

parser = argparse.ArgumentParser()   
parser.add_argument('-R', nargs='+', dest='libnames', action=Pairs)
print parser.parse_args(""-R a b -R c d -R e f"".split())
"
Using 'if in' with a dictionary,"value in dictionary or any(value in dictionary[key] for key in dictionary)
"
Python Random List Comprehension,">>> [x for x in random.choice([p for p in itertools.permutations(s, 3) if len(set(p)) == 3])]
[3, 5, 2]
"
Collecting like term of an expression in Sympy,"z.args
"
How do I join a list and then delete the last character?,"last = slice(-1)
def littery(*lst):
    return ''.join(lst)[last]
"
How to get the content from a certain <table> using python?,"#!/usr/bin/env python
import csv
import sys
import urllib2
from bs4 import BeautifulSoup # $ pip install beautifulsoup4

soup = BeautifulSoup(urllib2.urlopen('http://poj.org/status'))

writer = csv.writer(sys.stdout)
for tr in soup.find('table', 'a')('tr'):
    writer.writerow([td.get_text() for td in tr('td')])
"
Python Function to return a list of common letters in first and last names,"def CommonLetters(s1, s2):
    l1=list(''.join(s1.split()))
    l2=list(''.join(s2.split()))
    return [x for x in l1 if x in l2]

print CommonLetters('Tom','Dom de Tommaso')    
"
Index of columns where rows match criterion Python Pandas,"np.argwhere(df.values ==1)
"
parse nested conditional statements,"import re

conditions = ['CELSIUS', 'FROM_KELVIN']

def eval_conditional(matchobj):
    statement = matchobj.groups()[1].split('#else')
    statement.append('') # in case there was no else statement
    if matchobj.groups()[0] in conditions: return statement[0]
    else: return statement[1]

def parse(text):
    pattern = r'#if\s*(\S*)\s*((?:.(?!#if|#endif))*.)#endif'
    regex = re.compile(pattern, re.DOTALL)
    while True:
        if not regex.search(text): break
        text = regex.sub(eval_conditional, text)
    return text

if __name__ == '__main__':
    i = open('input.txt', 'r').readlines()
    g = ''.join([x.split(';')[0] for x in i if x.strip()])
    o = parse(g)
    open('output.txt', 'w').write(o)
"
Obtaining list (or set) of unique values in nested dictionary,">>> from operator import itemgetter 
>>> set(map(itemgetter(""food""), orders.values()))
{'pizza', 'taco'}
"
Python 3: Get value of variable entered from user input,"Choose_Item = eval(input(""Select your item:  ""))
"
Python - Replace part of regex?,"# capture
s = ""Example {String}""
replaced = re.sub(r'({).*?(})', r'\1a\2', s)

# lookaround
s = ""Example {String}""
replaced = re.sub(r'(?<={).*?(?=})', r'a', s)
"
How do I efficiently replace the last line in a string?,">>> old = '''The quick
... brown fox jumps
... over the lazy
... dog
... '''
>>> old.rstrip('\n').rsplit('\n', 1)[0] + '\nhorse and rider'
'The quick\nbrown fox jumps\nover the lazy\nhorse and rider'
"
matplotlib hexbin normalize,"plt.subplot(111)
hb = plt.hexbin(x,y, cmap=plt.cm.YlOrRd_r)
plt.cla()
plt.hexbin(x, y,
           C=np.ones_like(y, dtype=np.float) / hb.get_array().max(),
           cmap=plt.cm.YlOrRd_r,
           reduce_C_function=np.sum)
plt.axis([xmin, xmax, ymin, ymax])
cb = plt.colorbar()
"
Python Pandas: Counting the Frequency of unique values over all Columns,">>> df.apply(pd.Series.nunique)
1    3
2    2
3    2
4    3
dtype: int64
"
Parsing CSV data based on header fields using Pyparsing,"from StringIO import StringIO
from csv import DictReader
from classes import Customer, Order

data1 = """"""
first_name surname address notes purchase_order order_date
""Bob"" ""Smith"" ""123 Lucky Street"" ""Bad customer"" ""123ABC"", 2013/10/20
""Zoe"" ""Jackson"" ""5 Mountain View Street"" ""Good customer"" ""abc211"" 2014/01/01
"""""".strip()


data2 = """"""
first_name surname address phone_home phone_mobile purchase_order order_date total
""Bob"" ""Smith"" ""123 Lucky Street"" ""12345678"" ""1234567890"" ""123ABC"" 2013/10/20, $100
""Zoe"" ""Jackson"" ""5 Mountain View Street"" ""87654321"" ""0987654321"" ""abc211"" 2014/01/01 $1000
"""""".strip()

buf1 = StringIO(data1)
buf2 = StringIO(data2)

reader = DictReader(buf1, delimiter="" "")
for rec in reader:
    print rec
    customer = Customer(**rec)
    print customer.report()
    order = Order(**rec)
    print order
    print order.report()

print ""---next one comes---""

reader = DictReader(buf2, delimiter="" "")
for rec in reader:
    print rec
    customer = Customer(**rec)
    print customer.report()
    order = Order(**rec)
    print order
    print order.report()
"
WindowsError moving sqlite3 database after closing,"db = sqlite3.connect('test.db.temp')
db.executescript('CREATE TABLE foo (bar);')
db.close()
os.rename('test.db.temp', 'test.db')
"
SyntaxError: invalid syntax (Python 3.2),">>> 'retstring = retstring + (""&nbsp;""*(max - len(string)+1,)'.count(""("")
3
>>> 'retstring = retstring + (""&nbsp;""*(max - len(string)+1,)'.count("")"")
2
"
zero-mq: socket.recv() call is blocking,"while True:
    try:
        #check for a message, this will not block
        message = socket.recv(flags=zmq.NOBLOCK)

        #a message has been received
        print ""Message received:"", message

    except zmq.Again as e:
        print ""No message received yet""

    # perform other important stuff
    time.sleep(10)
"
Python re.search exact match on variable,"re.match(r'^\S+\s+\b%s\b' % CartID, line)
"
matplotlib: make legend keys square,"import numpy as np
from matplotlib.legend_handler import HandlerPatch
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Define square (rectangular) patches
# that can be used as legend keys
# (this code is based on the legend guide example)

class HandlerSquare(HandlerPatch):
    def create_artists(self, legend, orig_handle,
                       xdescent, ydescent, width, height, fontsize, trans):
        center = xdescent + 0.5 * (width - height), ydescent
        p = mpatches.Rectangle(xy=center, width=height,
                               height=height, angle=0.0)
        self.update_prop(p, orig_handle, legend)
        p.set_transform(trans)
        return [p]      

# this example is the matplotlib barchart example:

N = 5
menMeans = (20, 35, 30, 35, 27)

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(ind, menMeans, width, color='r')

womenMeans = (25, 32, 34, 20, 25)
rects2 = ax.bar(ind+width, womenMeans, width, color='y')

# add some text for labels, title and axes ticks
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('G1', 'G2', 'G3', 'G4', 'G5') )

# append the new patches to the legend-call:

ax.legend( (rects1[0], rects2[0]), ('Men', 'Women'), 
           handler_map={rects1[0]: HandlerSquare(), rects2[0]: HandlerSquare()})

plt.show()
"
Calculating average of numbers in a file,"import string

fileName = raw_input(""What file name: "")
lines = []
try:
    file = open(fileName)
    lines = file.readlines()
    file.close()
except:
    print ""Unable to open file""
sum = 0
values = 0
if(len(lines) > 0):
    for line in lines:
        value = 0
        try:
            value = int(string.strip(line))
        except ValueError:
            pass
        if(value != 0):
            sum = sum + value
            values += 1
    print ""Average = %f for %d lines, sum = %f""%(sum/values,values,sum)
else:
    print ""No lines in the file""
"
Why not os.path.join use os.path.sep or os.sep?,"join = lambda *args: ""/"".join(args)
"
Use class as string,"var = ""MyClassName""
import sys
mod = sys.modules[__name__]
getattr(mod, var)()
"
Adding a 1-D Array to a 3-D array in Numpy,"np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"
Correct pattern for inserting row in SQLAlchemy,"def _tag_find_or_create(tag_name):
    tag = Tag.query.filter_by(tag_name=tag_name).first()
    return tag or Tag(tag_name=tag_name)


class Book(Base):
    __tablename__ = 'book'
    id = Column(Integer, primary_key=True)
    book_name = Column(String)

    # relationship
    _tags = relationship('Tag', secondary='book_tag')
    tags = association_proxy('_tags', 'tag_name', creator=_tag_find_or_create)
"
How to handle dictionary attributes at arbitrarily nested depths?,">>> from operator import itemgetter
>>> from functools import reduce
>>> def compose(*functions):
...     return reduce(lambda f, g: lambda x: f(g(x)), functions, lambda x: x)

>>> nest = compose(*[itemgetter(name) for name in reversed(lookup['customfield'])])
>>> nest(data)
1
"
Python what does this code do? list = list[ list != value],"ans_list[ans_list != tree.ans_ind]
"
How to find a particular string within another string as quickly as possible?,"def xyz_there(string):
    return string.count("".abc"") != string.count(""abc"")
"
Merge multiple dataframes with non-unique indices,"In [29]: res.index = res.index.droplevel(1)

In [30]: res
Out[30]:
   s0  s1
0   1   1
0   2 NaN
1   3   4
1 NaN   5
"
Extract data from a list of tuples,"from ast import literal_eval
from itertools import izip    #For memory efficiency use this over zip

with open('file.txt') as f:

    #Firstly collect the first column from each line in a list
    column_1 = [line.split(None, 1)[0] for line in f if not line.isspace()]
    f.seek(0)  #Move the file pointer to the start of the file

    # Now we need to use the second column from each line and convert it to
    # a Python list using ast.literal_eval.
    # Then we pass each of these lists to izip with `*` to get a transpose
    # of the data. 


    for x in izip(*(literal_eval(line.split(None, 1)[1]) for line in
                                                        f if not line.isspace())):

        #Here x contains items on the same index from each list.

        print '""Coordinates:"" {0}, {1}'.format(*x[0][:2])

        for a, b in izip(column_1, x):
            print ""{0}, {1}"".format(a, b[-1])
        print
"
Writing a Python tool to convert XML to Python?,"import xml.etree.ElementTree as ET

class Parser:

    def __init__(self):
        self.output_list = []  # collected output lines
        self.il = 0            # indentation level


    def __iter__(self):
        return iter(self.output_list)


    def out(self, s):
        '''Output the indented string to the output list.'''
        self.output_list.append('    ' * self.il + s)


    def indent(self, num=1):
        '''Increase the indentation level.'''
        self.il += num


    def dedent(self, num=1):
        '''Decrease the indentation level.'''
        self.il -= num


    def parse(self, elem):
        '''Call the parser of the elem.tag name.

        The tag name appended to ""parse_"" and then the name of that
        function is called.  If the function is not defined, then
        self.parse_undefined() is called.'''

        fn_name = 'parse_' + elem.tag
        try:
            fn = getattr(self, fn_name)
        except AttributeError:
            fn = self.parse_undefined
        return fn(elem)


    def loop(self, elem):
        '''Helper method to loop through the child elements.'''
        for e in elem:
            self.parse(e)


    def parseXMLfile(self, fname):
        '''Reads the XML file and starts parsing from the root element.'''
        tree = ET.parse(fname)
        script = tree.getroot()
        assert script.tag == 'script'
        self.parse(script)


    ###################### ELEMENT PARSERS #######################

    def parse_undefined(self, elem):
        '''Called for the element that has no parser defined.'''
        self.out('PARSING UNDEFINED for ' + elem.tag)


    def parse_script(self, elem):
        self.loop(elem)


    def parse_stage(self, elem):
        self.out('')
        self.out('Parsing the stage: ' + elem.attrib['id'])
        self.indent()
        self.loop(elem)
        self.dedent()


    def parse_initialise(self, elem):
        self.out('')
        self.out('#---------- ' + elem.tag + ' ----------')
        self.loop(elem)


    def parse_variable(self, elem):
        tt = str   # default type
        if elem.attrib['type'] == 'Integer': 
            tt = int
        # elif ... etc for other types

        # Conversion of the value to the type because of the later repr().
        value = tt(elem.attrib['value'])  

        id_ = elem.attrib['id']

        # Produce the line of the output.
        self.out('{0} = {1}'.format(id_, repr(value)))


    def parse_execute(self, elem):
        self.out('')
        self.out('#---------- ' + elem.tag + ' ----------')
        self.loop(elem)


    def parse_if(self, elem):
        assert elem[0].tag == 'condition'
        condition = self.parse(elem[0])
        self.out('if ' + condition + ':')
        self.indent()
        self.loop(elem[1:])
        self.dedent()


    def parse_condition(self, elem):
        assert len(elem) == 0
        return elem.text


    def parse_then(self, elem):
        self.loop(elem)


    def parse_else(self, elem):
        self.dedent()
        self.out('else:')
        self.indent()
        self.loop(elem)


    def parse_error(self, elem):
        assert len(elem) == 0
        errorID = elem.attrib.get('errorID', None)
        fieldID = elem.attrib.get('fieldID', None)
        self.out('error({0}, {1})'.format(errorID, fieldID))


    def parse_setNextStage(self, elem):
        assert len(elem) == 0
        self.out('setNextStage --> ' + elem.text)


if __name__ == '__main__':
    parser = Parser()
    parser.parseXMLfile('data.xml')
    for s in parser:
        print s
"
Python: Function to flatten generator containing another generator,"def flatten(it):
    for x in it:
        if (isinstance(x, collections.Iterable) and
            not isinstance(x, str)):
            yield from flatten(x)
        else:
            yield x
"
Limiting the number of combinations /permutations in python,"itertools.islice(itertools.product(*big_list), 5000)
"
How to match a number in middle using python regular expression?,"NUM_FLOWS\n-+[\s\S]*?(\d+)\s*-+
"
recursively go through all subdirectories and read files,"for (root, subFolders, files) in os.walk(rootdir):
    pass"
How to read text file with uneven number of columns with python-pandas?,"import pandas as pd
import io

temp=u""""""really:1 christensen:1 scariest:1 many_of:1 label:positive
varied_experiences:1 experiences_from:1 island_resident:1 many_and:1 label:positive
scariest:1 many_of:1 label:negative""""""
#after testing replace io.StringIO(temp) to filename
df = pd.read_csv(io.StringIO(temp), 
                 sep="";"", #some string which is NOT in all text
                 header=None, 
                 names=['text'])
print (df)
                                                text
0  really:1 christensen:1 scariest:1 many_of:1 la...
1  varied_experiences:1 experiences_from:1 island...
2                scariest:1 many_of:1 label:negative

df[['bag','label']] = df.text.str.rsplit(expand=True, n=1)
df = df.drop('text', axis=1)
print (df)
                                                 bag           label
0        really:1 christensen:1 scariest:1 many_of:1  label:positive
1  varied_experiences:1 experiences_from:1 island...  label:positive
2                               scariest:1 many_of:1  label:negative
"
iterating list through multiple if statement in python,"mylist = [98, 10, 12]
w = 85
c = 90
status = 'OK' # assume it's ok until you found a value exceeding the threshold
for i in mylist:
    if status == 'OK' and i < w: # Only check OK as long as the status is ok
        status = ""OK""
    elif i >= w and i < c:
        status = ""WARNING""
    elif i >= c:
        status = ""CRITICAL""
        break # End the loop as soon as a value triggered critical

print status
"
efficient way to find several rows above and below a subset of data,"f = lambda i: [ i-2, i-1, i, i+1, i+2 ]

In [21]: indexers = Index(list(chain(*[ f(i) for i in [71, 102, 103, 179, 505, 506, 607] ]))).unique()

In [22]: df.iloc[indexers]
Out[22]: 
            0         1
69   0.792996  0.264597
70   1.084315 -0.620006
71  -0.030432  1.219576
72  -0.767855  0.765041
73  -0.637771 -0.103378
100 -1.087505  1.698133
101  1.007143  2.594046
102 -0.307440  0.308360
103  0.944429 -0.411742
104  1.332445 -0.149350
105  0.165213  1.125668
177  0.409580 -0.375709
178 -1.757021 -0.266762
179  0.736809 -1.286848
180  1.856241  0.176931
181 -0.492590  0.083519
503 -0.651788  0.717922
504 -1.612517 -1.729867
505 -1.786807 -0.066421
506  1.423571  0.768161
507  0.186871  1.162447
508  1.233441 -0.028261
605 -0.060117 -1.459827
606 -0.541765 -0.350981
607 -1.166172 -0.026404
608 -0.045338  1.641864
609 -0.337748  0.955940

[27 rows x 2 columns]
"
Tkinter - Can't bind arrow key events,"from Tkinter import *

main = Tk()

def leftKey(event):
    print ""Left key pressed""

def rightKey(event):
    print ""Right key pressed""

frame = Frame(main, width=100, height=100)
main.bind('<Left>', leftKey)
main.bind('<Right>', rightKey)
frame.pack()
main.mainloop()
"
"Indexing numpy arrays with numpy arrays, in arbitrary dimension","newImg = img[x]
"
python map vs itertools.map: Make the iterator version behave like the former,"collections.deque(itertools.imap(f, range(3)), maxlen=0)
"
Getting captured group in one line,"match = re.search(pattern, string)
if match:
   process(match)
"
How to center buttons in Kivy?,"size: self.parent.size
pos: self.parent.pos
"
Python select ith element in OrderedDict,">>> list(ordered_dict.keys())[2]
'c'
>>> list(ordered_dict.values())[2]
2
"
How to set environment variables in Python,os.environ['DEBUSSY'] = '1'
Performance considerations when populating lists vs dictionaries,">>> %%timeit
... l = [None] * 1000000
... for i in xrange(1000000): my_list[i] = str(i)
... 
10 loops, best of 3: 147 ms per loop
"
Calling load functions in correct order from constructors,"class Loader(type):
    def __new__(cls, name, bases, attrs):
        if attrs.get('__init__'):
            attrs['_init'] = attrs['__init__']
            del attrs['__init__']
        if attrs.get('_init_'):
            attrs['__init__'] = lambda self: self._init_()
            attrs['_init'] = lambda self: None
        return super(Loader, cls).__new__(cls, name, bases, attrs)

class Super(object):
    __metaclass__ = Loader
    def _init_(self):
        print 'init super'
        self._init()
        self.load()

    def load(self):
        print 'load super'

class Sub(Super):
    def __init__(self):
        print 'init sub'

    def load(self):
        super(Sub, self).load()
        print 'load sub'


sub = Sub()
sup = Super()
"
"In python, how could I make this three line code into a one line code?","__import__('shutil').copy(__import__('sys').argv[1], __import__('sys').argv[2])
"
How to get the text from a match till the next match of the same pattern,">>> import re
>>> separator = ""INFO1: BLAH\nINFO2: BLAH\n""
>>> map(lambda(p): ""%s%s"" % (separator, p), re.split(r'%s.*' % separator, all_text)[1:])
"
Detrend Flux Time Series with Non-Linear Trend,"import numpy as np
import matplotlib.pyplot as plt

num = 1000
x = np.linspace(0, 10, num)
y = np.exp(x)

# Add some non-stationary noise that's hard to see without de-trending
noise = 100 * np.exp(0.2 * x) * np.random.normal(0, 1, num)
y += noise

# Detrend with a 2d order polynomial
model = np.polyfit(x, y, 2)
predicted = np.polyval(model, x)

fig, axes = plt.subplots(nrows=2, sharex=True)
axes[0].plot(x, y, 'ro')
axes[0].plot(x, predicted, 'k-')
axes[0].set(title='Original Data and 2nd Order Polynomial Trend')

axes[1].plot(x, y - predicted, 'ro')
axes[1].set(title='Detrended Residual')

plt.show()
"
Generate combinations from an input in python,"def combine(template, options):
    template = template.replace('?', '{}')
    for opts in itertools.product(*options):
        yield template.format(*opts)
"
Python Reuse a Variable in the Else Block of an If-Else Statement,"import functools

@functools.lru_cache()
def getSrc():
    return askdirectory()
"
How do i write a new line or \n into a file,"import os

with open(section + ""_tmp""+"".txt"", ""a"") as fi:
    fi.write(os.linesep)
    fi.write(files1)
    # Or simply fi.write(os.linesep + files1)
"
How to unzip an iterator?," xs, ys = itertools.tee(a)
 xs, ys = (x[0] for x in xs), (y[1] for y in ys)
"
Get a datetime format from a string in Python,">>> from datetime import datetime
>>> from calendar import monthrange
>>> month = '1406'
>>> year, month = int(month[:2]), int(month[2:])
>>> year += 2000  # assume this century
>>> day = monthrange(year, month)[1]
>>> datetime(year, month, day)
datetime.datetime(2014, 6, 30, 0, 0)
>>> print datetime(year, month, day)
2014-06-30 00:00:00
"
Find maximum with limited length in a list,"[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]"
how to determine the period of a function,"iterations = 0;
tmp = origin_matrix;

do
    tmp = operation(tmp);
    iterations += 1;
while tmp != origin_matrix;

return iterations;
"
Puzzling dictionary matching problem,"        coordinates_list = [chromo,start,end]   
        OCR_dict = {row[3]:coordinates_list}
        for keys,values in OCR_dict.items():
            OCR_chromosome = values[0]
"
Praw: How to filter search results based on created date?,"limit = 100  # Reddit maximum limit
total_list = []
submissions = r.get_subreddit('soccer').get_new(limit=limit)
submissions_list = [
    x for x in submissions
    if datetime.utcfromtimestamp(x.created_utc) >= an_hour_ago
]
total_list += submissions_list
if len(submissions_list) == limit:
    submissions = r.get_subreddit('soccer').get_new(
        # get limit of items past the last item in the total list
        limit=100, params={""after"": total_list[-1].fullname}
    )
submissions_list_2 = [
    # iterate through the submissions generator object
    x for x in submissions
    # add item if item.created_utc is newer than an hour ago
    if datetime.utcfromtimestamp(x.created_utc) >= an_hour_ago
]
total_list += submissions_list_2
print total_list
"
How to convert numpy object array into str/unicode array?,"c = a.astype('U')
"
Conversion of Matlab sparse to Python scipy csr_matrix,"In [159]: idx=np.where(mask.ravel()==1)[0]
In [160]: A=sparse.csr_matrix((np.ones_like(idx),(idx,idx+1)),shape=(N,N))
"
Creating dataframe by adjusting the index taken from list of tuples,"
import pandas as pd
from numpy import arange
#mytup = [(111, [1,2,3,4,5], 0), (222, [33,44,55,66], 2), (333, [0,11,22,33], -1)]
mytup = [(111, [1,2,3,4,5], 0),
         (222, [33,44,55,66], 2),
         (444, [1,2,3,4,5], 0),
         (333, [0,11,22,33], -1),
         ('a', [5,6,7], -2)]

def SfromTuple(row):
    name, data, shift = row
    return pd.Series(data, index = arange(shift, len(data) + shift))

reindexed = pd.concat([SfromTuple(row) for row in mytup], axis=1)
reindexed.columns = [x[0] for x in mytup]
print(reindexed)
"
Python 3: Multiply a vector by a matrix without NumPy,"np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])"
For Loop efficiency when using enumerate or other functions,"for i,m in enumerate(hazardflr):
safetiles.append((m,step))
    while i < len(safetiles):
        nextSafe = safetiles[i]
        ns0 = nextSafe[0]
        if knownSafe(roomwidth, roomheight, ns0, nextSafe[1]):
            if trapdoor[ns0/roomwidth][ns0 % roomwidth] is ""0"":
                if ns0 not in safezone:
                    safezone.append(ns0)
                for e in givenSteps(roomwidth,ns0,True):
                    if knownSafe(roomwidth, roomheight, e, ns0):
                        if trapdoor[e/roomwidth][e%roomwidth] is ""0"" and (e, ns0) not in safetiles:
                            safetiles.append((e, ns0))
"
Multiple merge of data frame without replacing the values,"mapping = df2.to_dict()['value']
for col in ['pin', 'pin1', 'pin2', 'pin3']:
    df1['{}_value'.format(col)] = df1[col].map(mapping)
"
Replace the words in a list with the position of each word,"Sentence = str(input(""Type in the sentence here:"")).split("" "")
indexed_sentence = list(map(lambda x: Sentence.index(x), Sentence))
"
Python 3 control flow in script with lots of steps,"import funcy
from functools import partial 


composition = funcy.rcompose(
    partial(func1, additional_arg_name=something),
    ...
)
"
Compare two CSV files field by field and list all mismatches,"import csv, itertools
column_names = ['id','name','amount']
source_data = csv.reader(open('foo1.csv'))
target_data = csv.reader(open('foo2.csv'))
counter = 1
def rowElementCompare(sourceRow, targetRow):
    row_length = min(len(sourceRow), len(targetRow))
    for i in range(row_length):
        if sourceRow[i] != targetRow[i]:
            print i
            yield i # UPDATED
    return # UPDATED
for source_row,target_row in itertools.izip(source_data,target_data):
    comparison_result = None
    for comparison_result in rowElementCompare(source_row, target_row): # UPDATED
        print ""Mismatch in column %s on row number %d , source value %s, target value %s"" % (column_names[comparison_result], counter, source_row[comparison_result], target_row[comparison_result])
    counter += 1
"
beautiful soup doesn't find all the tags,"url='https://scholar.google.gr/citations?user=aFYdVoYAAAAJ&hl=el&view_op=citations_histogram'
"
Insert an element into a list in python,"def f(j, ls):
    return [ls[:i] + [j] + ls[i:] for i in xrange(len(ls) + 1)]
"
Is there's any python library to output dictionary in beautiful ascii table?,"t = PrettyTable(['key', 'value'])
for key, val in dictionary.items():
   t.add_row([key, val])
print t
"
Introspection on a python decorated method,"def my_decorator(function):
    def outer():
        print('outer')
        return function()
    return outer

@my_decorator
def my_method():
    print('inner')

try:
    # Python2
    my_method.func_closure[0].cell_contents()
except AttributeError:
    # Python3
    my_method.__closure__[0].cell_contents()
"
Chopping A Line From A Text Document Into Different Strings,"def proc(filename, lineno):
    line = linecache.getline(filename, lineno)
    a, *b, c, d, e, f = line.strip().split('|')
    b = '|'.join(b)
    # do something
"
Changing a string in a list of strings,"# user input in user_input
new_list = [item if item != user_input else ""yes"" for item in old_list] 
"
"Print pixels in image which are < 10,10,10","from PIL import Image

im = Image.open(""g.bmp"")       # The input image. Should be greyscale
out = open(""out.txt"", ""wb"")    # The output.

data = im.getdata()            # This will create a generator that yields
                               # the value of the rbg values consecutively. If
                               # g.bmp is a 2x2 image of four rgb(12, 12, 12) pixels, 
                               # list(data) should be 
                               # [(12,12,12), (12,12,12), (12,12,12), (12,12,12)]

for i in data:                   # Here we iterate through the pixels.
    if i[0] < 10:                # If r==b==g, we only really 
                                 # need one pixel (i[0] or ""r"")

        out.write(str(i[0])+"" "") # if the pixel is valid, we'll write the value. So for
                                 # rgb(4, 4, 4), we'll output the string ""4""
    else:
        out.write(""X "")          # Otherwise, it does not meet the requirements, so
                                 # we'll output ""X""
"
python merge two lists (even/odd elements),"for i,v in enumerate(y):
    x.insert(2*i+1,v)
"
Read from a file and save integers to a list Python,"lines = [line.strip() for line in open('fileRadiance.txt', 'r')]

Reg = []
Items = []
for line in lines:
    if ""Item1"" in line or '-----' in line:
        continue
    words = line.split()
    if words[0] == ""Region:"":
        Reg.append(words[1])
        Items.append([])
    else:
        Items[-1].append([int(i) for i in words])
"
Too many decimal places when using timedelta,"def custom_format(td):
    minutes, seconds = divmod(td.seconds, 60)
    hours, minutes = divmod(minutes, 60)
    formatted = '{:d}:{:02d}'.format(hours, minutes)
    if td.days:
        formatted = '{} day{} {}'.format(
            td.days, 's' if td.days > 1 else '', formatted)
    return formatted
"
how to change the type of items in the list?,">>> li = ['1 ', '2', '3 ', '4', '5 ', '6', '7 ']
>>> map(int, li)
<map object at 0xffe3ed0c>
>>> list(map(int, li))
[1, 2, 3, 4, 5, 6, 7]
>>> for elem in map(int, li):
...     print(elem)
...
1
2
3
4
5
6
7
"
Python: pulling bold text and the text that follows,"from lxml import html

x = html.fromstring(h)
div = x.xpath(""//*[@id='ANALYSIS']"")[0]
out = [b.text + "","" +  b.xpath(""./following::text()[1]"")[0].lstrip("","") for b in div.xpath("".//b[@class='black']"")]
"
sort a list of dicts by x then by y,"list.sort(key=lambda item: (item['points'], item['time']))"
finding a file name from a substring,"mylist = [""hi_there"", ""bye_there"",""hello_there""]
print '\n'.join(s for s in mylist if s.startswith(""hi""))
"
python sort on extension / Name of the file,"results = [os.path.join(root, f) 
               for root, dirs, files in os.walk(search_folder) 
                   for f in files]
"
inserting a line in a file using python,"from itertools import groupby
from tempfile import NamedTemporaryFile
from shutil import move

with open(""in.txt"") as f, NamedTemporaryFile(""w"",dir=""."",delete=False) as out:
    grps = groupby(f,key=lambda x: x.startswith(""$""))
    for k, v in grps:
        if k:
            val = next(v)
            out.write(val)
            if val.startswith(""$ yum""):
                out.writelines(next(grps,[[], [""""]])[1])
                out.write(""I am a new line\n"")
        else:
            out.writelines(v)
move(out.name,""in.txt"")
"
Display list of option choices in help text automatically in OptionParser,"choices = ['prod', 'staging', 'test', 'dev'] 
help = ""Environment to run on (choose from: {!r})"".format(choices)
parser.add_option('-e', '--env',
                  type='choice',
                  action='store',
                  dest='environment',
                  choices=choices,
                  default='dev',
                  help=help,)
"
Numeric solve transcendental equation in python or Matlab,"from __future__ import division
from sympy import *
x = symbols('x')
w = symbols('w', cls=Function)
a,b,E,J =  symbols('a b E J')
equ = E*J*diff(w(x),x,4) - a*x -b - w(x)
dsolve(equ, w(x))
# This generates a function that is too generic and too big to copy-paste
# Let's make some assumptions
J = Symbol('J', real=True, positive=True)
E = Symbol('E', real=True, positive=True)
equ = E*J*diff(w(x),x,4) - a*x -b - w(x)
dsolve(equ, w(x))
"
Write to CSV file after re.sub Python,"for row in row.split('\n'):
    writer.writerow(row.split(','))
"
pandas error creating TimeDeltas from Datetime operation,"for i in date_list:
    data[i+""InDays""] = data[i].apply(lambda x: (current_date - x).days if x is not pd.NaT else np.NaN)
"
How to retrieve a specific field whith a special character in a list,"lis=[(item[3],item[5]) for item in msg if item .startwith('$') ]
"
How to solve this using regex?,">>> re.findall('Message: (.+?)$', s, re.M)
['1st message', '2dn message', '3rd message']
"
How do I write to a file using a terminal command in python?,"import subprocess
# Create a Popen object that captures the output.
p=subprocess.Popen(['look','data'],stdout=subprocess.PIPE)
# Call 'look data' and wait for it to finish.
p.wait()
# Now read the output.
print p.stdout.read()
"
Python descriptors with arguments?,"
import functools
def valid_for(typelist):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(self, *args):
            if self.genus_type in typelist:
                return func(self, *args)
            else:
                # handle this case
                raise NotImplementedError(
                    '{} not in {}'.format(self.genus_type, typelist))
        return wrapper
    return decorator

class A(object):
    def __init__(self):
        self.genus_type = 'typeA'
    @valid_for(['typeB'])
    def do_something_cool(self):
        print 'blah'

a = A()
try:
    a.do_something_cool()
except NotImplementedError as err:
    print(err)
    # typeA not in ['typeB']

a.genus_type = 'typeB'
a.do_something_cool()
# blah
"
Splitting a byte list into a list of dicts,"import StringIO
import re
from itertools import imap
from functools import partial

keys = (""red"", ""green"", ""blue"", ""alpha"")
# Create an object we can read from
str_iter = StringIO.StringIO(re.sub(""\xff.*"", """", bitstream))
# A callable which reads 8 bytes at a time from str_iter
read_8_bytes = partial(str_iter.read, 8)
# Convert an 8-byte string into a tuple of 4 integer values
unpack_rgba = partial(struct.unpack, ""<HHHH"")
# An iterable of 8-byte strings
chunk_iter = iter(read_8_bytes, '')
# Map unpack_rgba over the iterator to get an iterator of 4-tuples,
# then zip each 4-tuple with the key tuple to create the desired dict
rgba = [dict(zip(keys, rgba_values))
         for rgba_values in imap(unpack_rgba, chunk_iter)]
"
How can I analyze or improve my niece's simple compression algorithm that is based on Morse code?,"
while i < len(sc):
    curr = sc[i]
    i += 1
    if not(curr in string.digits):
        num = 1 if start + 1 == i else int(sc[start:i-1])
        chars.append("""".join(curr * num))
        start = i
"
Python: A4 size for a plot,"figure(figsize=(11.69, 8.27))"
python and string extraction,"str = ""13480 D'AAA-BBB CCC...""
result = str.split(' ',1)

print(result[0]) # will print ""13480""
print(result[1]) # will print ""D'AAA-BBB CCC...""
"
Print contents of txt file into Table form,"contents = []
with open('tables.dat', 'r+') as f:
    for line in f:
        contents.append(line.split(','))

max_name_length = max([len(line[0]) for line in contents])

print(""    Team                       Points     Diff      Goals     \n"")
print(""--------------------------------------------------------------------------\n"")
for i, line in enumerate(contents):
    line = [el.replace('\n', '') for el in line]
    print(""{i:>3}  {0:<{fill_width}}   {1:>3}   {2:>3}   {3:>3}"".format(i=i, *line, fill_width=max_name_length))
"
How to dynamically create parameterized test from the file (json or yaml) in python,"import json
from functools import wraps


def params_from_file(file):
    """"""Decorator to load params from json file.""""""
    def decorator(func_to_decorate):
        @wraps(func_to_decorate)
        def wrapper(self, *args, **kwargs):
            with open(file, 'r') as fh:
                kwargs = json.loads(fh.read())
                return func_to_decorate(self, **kwargs)
        return wrapper
    return decorator
"
Python Numpy 2D plot set total number of y-tics with autoscaling,"fig, axes = plt.subplots(nrows=4)
for y, ax in zip(ydata, axes):
    ax.plot(x, y, color='salmon')
    ax.locator_params(axis='y', nbins=5)
plt.show()
"
Python ElementTree find() not matching within kml file,">>> tree = lxml.etree.fromstring('''<kml xmlns=""http://www.opengis.net/kml/2.2"">
...   <Document>
...     <name>Location history from 03/03/2012 to 03/10/2012</name>
...   </Document>
... </kml>''')
>>> tree.xpath('//kml:name', namespaces={'kml': ""http://www.opengis.net/kml/2.2""})
[<Element {http://www.opengis.net/kml/2.2}name at 0x23afe60>]
"
Python dictionary with two keys with shelve,"def create_entry(key1, key2, value, shelf):
    shelf[(key1, key2)] = value
"
How to iterate over the dictionary keys to calculate cosine similarity using the values?,"import math
inputDict = {""in"" : [0.01, -0.07, 0.09, -0.02], ""and"" : [0.2, 0.3, 0.5, 0.6], ""to"" : [0.87, 0.98, 0.54, 0.4]}
def cosine_similarity(vec1,vec2):
    sum11, sum12, sum22 = 0, 0, 0
    for i in range(len(vec1)):
        x = vec1[i]; y = vec2[i]
        sum11 += x*x
        sum22 += y*y
        sum12 += x*y
    return sum12/math.sqrt(sum11*sum22)


result = {}
for key,value in inputDict.items():
    temp,tempDict= 0,{}
    for keyC,valueC in inputDict.items():
        if keyC == key:
            continue
        temp = cosine_similarity(value,valueC)
        tempDict[keyC] =temp
    result[key]= tempDict


print(result)
"
Copy_from command to copy values of dictionary in a table,"import StringIO
dictFile = StringIO.StringIO()
for item in dictionary.iteritems():
    dictFile.write(""%s\t%s\n""%item)
cur.copy_from(dictFile, 'myTable')
"
How to get an attribute just from the current class and not from possible parent classes?,">>> class A(object):
...    x = 42
...    y = 43
... 
>>> class B(A):
...    x = 11
... 
>>> b = B()
"
numpy 2D array assignment with 2D value and indices arrays,"I = np.arange(X.shape[0])[:, np.newaxis]
output[I, Y] = X
"
Round an answer to 2 decimal places in Python,"from decimal import Decimal, ROUND_HALF_UP
def round_decimal(x):
  return x.quantize(Decimal("".01""), rounding=ROUND_HALF_UP)

cost = Decimal(input(""Enter 12 month cost: ""))
print(""6 Month Cost: "", round_decimal(cost * Decimal("".6"")))
"
Efficient way of computing Kullback–Leibler divergence in Python,"from scipy import stats
kld = stats.entropy(distributions.T[:,:,None], distributions.T[:,None,:])
"
Converting integer to string,str(a)
How to get all grandchildren of a directory in python with only one OS call,"glob.glob('/home/*/*/')
"
Using Pandas read_csv() on an open file twice,"self.csvdataframe = pd.read_csv(self.csvfile)
"
Python: How to know if two dictionary have the same keys,">>> dic1 = {'a':'a','b':'c','c':'d'}
>>> dic2 = {'b':'a','a':'c','c':'d'}
>>> dic1.keys() == dic2.keys()
True
>>> dic1.keys() - dic2
set()
>>> dic1.keys() | dic2
{'a', 'c', 'b'}
"
Unicode case conversion,"def haslower(unicodechar):
    return unicodechar != unicodechar.lower()

def anylower(unicodestring):
    return any(haslower(c) for c in unicodestring)
"
PyZMQ one-way communication,"# server1.py

poller = zmq.Poller()
poller.register(s)

while True:
    events = dict(poller.poll(0))
    if s in events:
        msg = s.recv()
        print(""received %r"" % msg)
        if msg == 'quit':
            break
    else:
        # no message to recv, do other things
        time.sleep(1)
"
"Remove file permissions, creation date from rsync listing command in python?","retval = subprocess.Popen(['rsync', '--list-only', source],
                           stdout=subprocess.PIPE, 
                           env={'RSYNC_PASSWORD': password}).communicate()[0]
retval = retval.split(' ')[-1]
"
Define Ctypes array that overlaps in memory for numpy array and multiprocessing,"import numpy as np
import ctypes
from multiprocessing import Array, Process


def main():
    buf = Array(ctypes.c_int8, 10) # 10 byte buffer

    with buf: # acquire lock
        ctypes_arr = buf.get_obj()
        arr = np.frombuffer(ctypes_arr, dtype=np.int16) # int16 array, with size 5
        total = arr.sum()
        del arr, ctypes_arr # losing lock, delete local reference to the buffer

    print(""total before:"", total) # 0

    p = Process(target=subprocess_target, args=(buf,))
    p.start()
    p.join()

    with buf:
        # interpret first 8 bytes as two 4 byte ints
        view = memoryview(buf.get_obj())[:8]
        arr = np.frombuffer(view, dtype=np.int32)
        total = arr.sum()
        del arr, view

    print(""total after:"", total) # 262146
    raw_bytes = list(buf.get_obj())
    assert raw_bytes == [0, 0, 1, 0, 2, 0, 3, 0, 4, 0]


def subprocess_target(buf):
    """"""Sets elements in buf to [0, 1, ..., n-2, n-1]""""""
    with buf:
        arr = np.frombuffer(buf.get_obj(), dtype=np.int16)
        arr[:] = range(len(arr))
        del arr


if __name__ == ""__main__"":
    main()
"
Why is this tag empty when parsed with beautiful soup?,"table = soup.find(""table"", class_=""yfnc_tabledata1"")
total_revenue_label = table.find(text=re.compile(r'Total Revenue'))
print total_revenue_label.parent.parent.next_sibling.get_text(strip=True)
"
plot multiple data series from numpy array,"# get where F == 1000
maskF = dataset.F == 1000
# get the values where F == 1000
rows = dataset[maskF]
# get the values where A12 is in column E
rows = rows[rows.E == ""A12""]
#remove the we don't want to see
del rows[""E""]
del rows[""F""]
#Plot the result
rows.plot(xlim=(0,None), ylim=(-1,2))
"
Scrape data from reduced table,"soup = BeautifulSoup(page, 'lxml')  # requires 'lxml' to be installed

table = soup.find(""center"").find(""table"")
for row in table.find_all(""tr"")[3:]:
    cells = [cell.get_text(strip=True) for cell in row.find_all(""td"")]
    print(cells)
"
pysnmp mac to human readable,"# apt-get install python-netaddr
"
How to Process Row Pairs Preserving an ID Column without Dictionaries using Pandas?,"def get_group_pairs(grp):
    pairs = combinations(grp.index, 2)
    data = [grp.loc[p, ('Name', 'Z')].values.flatten('F') for p in pairs]
    return pd.DataFrame(data, columns=['Name1', 'Name2', 'Z1', 'Z2'])

def merge_zpairs(grp):
    data = {'Z1': grp['Z1'].tolist(), 'Z2': grp['Z2'].tolist()}
    return pd.Series(data)

namepairs = df.groupby('Frame').apply(get_group_pairs).reset_index(level=1, drop=True)
zpairs = namepairs.groupby(['Name1', 'Name2']).apply(merge_zpairs).reset_index()
"
"Python: I have a dual key list, which is the most effective storage object for retreival",">>> left(""10000"").parent()
Entry({'parent': '', 'key': '10001', 'fkey': 'qwer'})
>>> left(""10000"").parent().parent()
>>> left(""10001"")
Entry({'parent': '', 'key': '10001', 'fkey': 'qwer'})
>>> left(""10001"") is left(""10000"").parent()
True
"
How to check if type of a variable is string?,"isinstance(s, str)"
Moviepy - avoid writing to disk with ImageSequenceClip?,"from moviepy.editor import VideoFileClip
def flip(image):
    """"""Flips an image vertically """"""
    return image[::-1] # remember that image is a numpy array

clip = VideoFileClip(""my_original_video.mp4"")
new_clip = clip.fl_image( flip )
new_clip.write_videofile(""my_new_clip"", some other parameters)
"
Get CSV values for words in list,"% cat test1.py
text = ['My', 'arm', 'has', 'no', 'chin', '.']
data = [row.split() for row in open('datafile.csv').readlines()[1:]]
data = {row[0]:[int(elt) for elt in row[1:]] for row in data}
annotated_text = [tuple([w]+data[w]) if w in data else (w,) for w in text]
print annotated_text
% cat datafile.csv 
       name   score1   score2   score3
       arm    1        2        3
       beard  4        5        6
       chin   7        8        9
% python test1.py 
[('My',), ('arm', 1, 2, 3), ('has',), ('no',), ('chin', 7, 8, 9), ('.',)]
% 
"
"Find all combinations of letters, selecting each letter from a different key in a dictionary",">>> import itertools                                                                                                                >>> d = {'1': ['a', 'd', 'e', 'l', 's'], '2': ['s', 'i', 'r', 't', 'n'], '3': ['b', 'o', 'e', 'm', 'k'], '4': ['f', 'y', 'u', 'n', 'g'] }
>>> for combo in itertools.product(*[d[k] for k in sorted(d.keys())]):
...     print ''.join(combo)
... 
asbf
asby
asbu
asbn
asbg
asof
asoy
asou
ason
asog
asef

...

snkf
snky
snku
snkn
snkg
"
Executing a list of imported functions,"import modules
hello = 'Hello'
for m in dir(modules):
    obj = getattr(modules,m)
    if hasattr( obj, ""__call__"" ): #or use `if callable(obj):`
        print obj(hello)
"
Grouping lists in Python but keeping them in order,"list1 = [{'position':'child','title':'dave','obj':'obj','created':'2013-11-20'},
         {'position':'child','title':'james','obj':'obj','created':'2013-11-19'},
         {'position':'child','title':'james','obj':'obj','created':'2013-11-18'},
         {'position':'child','title':'ian','obj':'obj','created':'2013-11-17'},
         {'position':'child','title':'dave','obj':'obj','created':'2013-11-16'},
         {'position':'child','title':'dave','obj':'obj','created':'2013-11-15'},
         {'position':'child','title':'dave','obj':'obj','created':'2013-11-14'}]

import itertools
import operator

list1 = [
    x
    for key, grp in itertools.groupby(list1, key=operator.itemgetter('title'))
    for x in [{'position': 'parent', 'title': key + ' root'}]+ list(grp)
]
for x in list1:
    print(x)
"
Python - Convert list of single key dictionaries into a single dictionary,">>> {k: v for d in lst for k, v in d.iteritems()}
{'1': 'A', '3': 'C', '2': 'B'}
"
Get the highest possible gmtime for any architecture,"def binary_search(haystack, needle, lo, hi): # avoid bisect() range limitation
    while lo < hi:
        mid = (lo + hi) // 2
        if haystack[mid] > needle:
            hi = mid
        elif haystack[mid] < needle:
            lo = mid + 1
        else:
            return mid
    return hi
"
Code for logistic equation,"import numpy as np
import matplotlib.pyplot as plt
import pylab
import numpy

def f(x, r):
    """"""Discrete logistic equation with parameter r""""""
    return r*x*(1-x)

if __name__ == '__main__':
    # initial condition for x
    ys = []
    rs = numpy.linspace(0, 4, 400)

    # Loop through `rs`. `r` is assigned the values in `rs` one at a time. 
    for r in rs:
        x = 0.1
        # Repeat this loop 500 times. 
        # i is just a dummy variable since it is not used inside the for-loop.
        for i in range(500):
            # Evaluate f at (x, r). The return value is assigned to x.
            # x is then fed back into f(x, r). 
            # This makes x jump around 500 times according to the logistic equation.
            # r remains fixed.
            x = f(x, r)

        # Do this 50 times
        for i in range(50):
            # Again make the x jump around according to the logistic equation
            x = f(x, r)
            # Save the point (r, x) in the list ys
            ys.append([r, x])

    # ys is a list of lists.
    # You can also think of ys as a list of [r, x] point.
    # This converts the list of lists into a 2D numpy array.
    ys = numpy.array(ys)

    # ys[:,0] is a 1D array of r values
    # ys[:, 1] is a 1D array of x values
    # This draws a scatter plot of (r, x) points.
    pylab.plot(ys[:,0], ys[:,1], '.')
    pylab.show()
"
Python check last word/number in a string?,"import math
x = raw_input(""Input action to be peformed on your number, followed by your number: "")
# Assume ""Pi 2""  is entered
x = x.split()
action = x[0]
number = int(x[1])
if action.startswith(""Pi""):
    print number * math.pi
"
How do you set the absolute position of figure windows with matplotlib?,"import matplotlib
matplotlib.use(""wx"")
from pylab import *
figure(1)
plot([1,2,3,4,5])
thismanager = get_current_fig_manager()
thismanager.window.SetPosition((500, 0))
show()
"
Suppress matplotlib figures when running .py files via python or ipython terminal,"#!/usr/bin/python

import sys
import os
import glob
from contextlib import contextmanager
import traceback

set_backend = ""import matplotlib\nmatplotlib.use('Agg')\n""

@contextmanager
def redirected_output(new_stdout=None, new_stderr=None):
    save_stdout = sys.stdout
    save_stderr = sys.stderr
    if new_stdout is not None:
        sys.stdout = new_stdout
    if new_stderr is not None:
        sys.stderr = new_stderr
    try:
        yield None
    finally:
        sys.stdout = save_stdout
        sys.stderr = save_stderr

def run_exectests(test_dir, log_path='exectests.log'):

    test_files = glob.glob(os.path.join(test_dir, '*.py'))
    test_files.sort()
    passed = []
    failed = []
    with open(log_path, 'w') as f:
        with redirected_output(new_stdout=f, new_stderr=f):
            for fname in test_files:
                print("">> Executing '%s'"" % fname)
                try:
                    code = compile(set_backend + open(fname, 'r').read(),
                                   fname, 'exec')
                    exec(code, {'__name__':'__main__'}, {})
                    passed.append(fname)
                except:
                    traceback.print_exc()
                    failed.append(fname)
                    pass

    print "">> Passed %i/%i tests: "" %(len(passed), len(test_files))
    print ""Passed: "" + ', '.join(passed)
    print ""Failed: "" + ', '.join(failed)
    print ""See %s for details"" % log_path

    return passed, failed

if __name__ == '__main__':
    run_exectests(*sys.argv[1:])
"
concise and fast zip operation on lists of lists in Python?,"print zip( a[0], b[0] )
print zip( a[1], b[1] )
"
Python Hexadecimal,">>> format(255, '02X')
'FF'
>>> format(255, '#04x')
'0xff'
>>> format(255, '#04X')
'0XFF'
"
Set background of Python OpenCV warpPerspective,"cv2.warpPerspective(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]])
"
TensorFlow Resize image tensor to dynamic shape,"shape = tf.shape(image)
height = shape[0]
width = shape[1]
new_shorter_edge = 400
height_smaller_than_width = tf.less_equal(height, width)

new_shorter_edge = tf.constant(400)
new_height, new_width = tf.cond(
    height_smaller_than_width,
    lambda: new_shorter_edge, (width / height) * new_shorter_edge,
    lambda: new_shorter_edge, (height / width) * new_shorter_edge)
"
Why does type(mock.MagicMock()) == mock.MagicMock returns False?,"def __new__(cls, *args, **kw):
    # every instance has its own class
    # so we can create magic methods on the
    # class without stomping on other mocks
    new = type(cls.__name__, (cls,), {'__doc__': cls.__doc__})
    instance = object.__new__(new)
    return instance
"
How to dynamically load a Python class,"def my_import(name):
    components = name.split('.')
    mod = __import__(components[0])
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod
"
convert contents of metadata file into variables list,"f = open('metadata.txt', 'r') #open file for reading

def build_data(f): #build dictionary

    output = {} #Dict
    for line in f.readlines(): #Iterates through every line in the string
        if ""="" in line: #make sure line has data as wanted
            l = line.split(""="") #Seperate by ""="" and put into a list
            output[l[0].strip()] = l[1].strip() #First word is key, second word is value

    return output #Returns a dictionary with the key, value pairs.

data = build_data(f)

print data[""IMAGE_QUALITY""] #prints 9
"
"iterate through df column and return value in dataframe based on row index, column reference","import numpy as np
import pandas as pd
nan = np.nan
df = pd.DataFrame({'1999': [nan, 3414760915.0, 48640611686.0, 1239840270.0, nan],
 '2000': [nan, 3632043908.0, 54790060513.0, 1401694156.0, nan],
 '2001': [2461666315.0, 4060758804.0, 54744714110.0, 1484004617.0, nan],
 '2002': [4128818042.0, 4435078648.0, 56760288396.0, 1717563533.0, nan],
 '2003': [4583648922.0, 5746945913.0, 67863829705.0, 2373836214.0, nan],
 '2004': [5285461999.0, 7314865176.0, 85324998959.0, 2916913449.0, nan],
 '2005': [6275076000.0, 8158549000.0, 103000000000.0, 3248135000.0, nan],
 '2006': [7057598000.0, 8992642000.0, 117000000000.0, 3536452000.0, nan],
 '2007': [9843842000.0, 10701010000.0, 135000000000.0, 4010785000.0, nan],
 '2008': [10190530000.0, 12881350000.0, 171000000000.0, 4001349000.0, nan],
 '2009': [12486940000.0, 12044210000.0, 137000000000.0, 3649863000.0, nan],
 '2010': [15936800000.0, 11926950000.0, 161000000000.0, 3346317000.0, nan],
 'country': ['Afghanistan', 'Albania', 'Algeria', 'Andorra', 'Anguilla'],
 'men_ed_yrs': [11, 11, 13, 11, 11],
 'total_ed_yrs': [8, 11, 13, 11, 11],
 'women_ed_yrs': [5, 11, 13, 12, 11],
 'year': ['2004', '2004', '2005', '2008', '2008']})

melted = pd.melt(df, id_vars=['country', 'year', 'men_ed_yrs', 'women_ed_yrs', 
                              'total_ed_yrs'], var_name='year_col')
result = melted.loc[melted['year'] == melted['year_col']]
print(result)
"
How to format an array of floats into a string,"[""10$^{}$"".format(int(math.log10(num))) for num in a]
"
Counting substrings in string,"def count(M, N):
    count = 0
    for i in range(len(N)-len(M)+1):
        if N[i:i+len(M)] == M:
            count += 1
    return count
"
Match words that are not inside the characters < > using regular expressions,">>> [word for word in text.split() if not word.startswith(""<"") and not word.endswith("">"")]
['Hi', 'is', 'going']
"
Insert value in Incremental List not working,"def fill_range(initial_range, fill_vallue):
    smallest = initial_range[0]
    biggest = initial_range[-1]
    items = set(initial_range)
    for i in range(smallest, biggest+1):  # use xrange on python2.x
        if i in items:
            yield i
        else:
            yield fill_value
"
Most Common letter in a string,"def mwl(text):
    import string
    import collections
    text = text.lower() 
    for l in string.punctuation:
        for x in text:
            if x == l:
                text = text.replace(x,'')
    collist=collections.Counter(text).most_common(1)
    print(collist[0][0])
"
pandas row specific apply,">>> from functools import partial
>>> s.apply(partial(map, lambda x: x*2 ))
a                ['ss', 'ii', 'xx']
b    ['ss', 'ee', 'vv', 'ee', 'nn']
c                ['ss', 'ii', 'xx']
d    ['ss', 'ee', 'vv', 'ee', 'nn']
e                ['ss', 'ii', 'xx']
"
Creating a 2d Grid in Python,"def makeLRGrid(g):
    return [row[:] for row in g]
"
Python regexp to match full or partial word,"import re
p = re.compile(ur'\b(yest(?:e(?:r(?:d(?:ay?)?)?)?)?|tod(?:ay?)?|tom(?:o(?:r(?:r(?:ow?)?)?)?)?)\b', re.IGNORECASE)
test_str = u""yest\nyeste\nyester\nyesterd\nyesterda\nyesterday\ntod\ntoda\ntoday\ntom\ntomo\ntomor\ntomorr\ntomorro\ntomorrow\n\nyesteray\ntomorow\ntommorrow\ntody\nyesteday""
print(p.findall(test_str))
# => [u'yest', u'yeste', u'yester', u'yesterd', u'yesterda', u'yesterday', u'tod', u'toda', u'today', u'tom', u'tomo', u'tomor', u'tomorr', u'tomorro', u'tomorrow']
"
Python: How to extract floating point numbers from a text file with mixed content?,"import re

# this is the same data just copy/pasted from your question
data = """"""    ahi1
    b/se
ahi 
test    -2.435953
        1.218364
    ahi2
    b/se
ahi 
test    -2.001858
        1.303935""""""

# what we're gonna do, is search through it line-by-line
# and parse out the numbers, using regular expressions

# what this basically does is, look for any number of characters
# that aren't digits or '-' [^-\d]  ^ means NOT
# then look for 0 or 1 dashes ('-') followed by one or more decimals
# and a dot and decimals again: [\-]{0,1}\d+\.\d+
# and then the same as first..
pattern = re.compile(r""[^-\d]*([\-]{0,1}\d+\.\d+)[^-\d]*"")

results = []
for line in data.split(""\n""):
    match = pattern.match(line)
    if match:
        results.append(match.groups()[0])

pairs = []
i = 0
end = len(results)
while i < end - 1:
    pairs.append((results[i], results[i+1]))
    i += 2

for p in pairs:
    print ""%s, %s"" % (p[0], p[1])
"
Retrieving a specific set element in Python,"from collections import defaultdict
D = defaultdict(list)
D[somekey].append(auxfield)
"
Any function in numpy/pandas/python to search and replace,"# Make a copy of ds1 to initialize output array 
out = ds1.copy()

# Find out the row indices in ds2 that have intersecting elements between 
# its first column and ds1
_,C = np.where(ds1.ravel()[:,None] == ds2[:,0])

# New values taken from the second column of ds2 to be put in output
newvals = ds2[C,1]

# Valid positions in output array to be changed
valid = np.in1d(ds1.ravel(),ds2[:,0])

# Finally make the changes to get desired output
out.ravel()[valid] = newvals
"
Multiply array of vectors with array of matrices; return array of vectors?,"(arr_in[...,None]*matrices).sum(1)
"
Create string ndarray from ndarray of int 'flags' using list of string meanings,"mapped = np.take(meanings, flags)
"
Python: How to get string between matches?,"sample_input = ""Process 1234567-89.1234.12431242.12.1234 -  text title and long text description with no assured pattern Process 2234567-89.1234.12431242.12.1234 : chars and more text Process 3234567-89.1234.12431242.12.1234 - more text process 3234567-89.1234.12431242.12.1234 (...)""
m = re.match(r""(Process \d{7}\-\d{2}\.\d{4}\.\d+\.\d{2}\.\d{4}.*?)(?=Process)|(Process \d{7}\-\d{2}\.\d{4}\.\d+\.\d{2}\.\d{4}.*)"", sample_input)
m.group(1)       # The first parenthesized subgroup.
m.groups()       # Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern
"
Sorting a dictionary having keys as string of numbers in python,"for k in sorted(a):
    print k, a[k] # or whatever.
"
Debugging modifications of sys.path,"import sys

class VerboseSysPath(list):
    def croak(self, action, args):
        frame = sys._getframe(2)
        print('sys.path.{}{} from {}:{}'.format(
            action, args, frame.f_code.co_filename, frame.f_lineno))

    def insert(self, *args):
        self.croak('insert', args)
        return super(VerboseSysPath, self).insert(*args)

    def append(self, *args):
        self.croak('append', args)
        return super(VerboseSysPath, self).append(*args)

    def extend(self, *args):
        self.croak('extend', args)
        return super(VerboseSysPath, self).extend(*args)

    def pop(self, *args):
        self.croak('pop', args)
        return super(VerboseSysPath, self).pop(*args)

    def remove(self, *args):
        self.croak('remove', args)
        return super(VerboseSysPath, self).pop(*args)

    def __delitem__(self, *args):
        self.croak('__delitem__', args)
        return super(VerboseSysPath, self).__delitem__(*args)

    def __setitem__(self, *args):
        self.croak('__setitem__', args)
        return super(VerboseSysPath, self).__setitem__(*args)

    def __setslice__(self, *args):
        self.croak('__setslice__', args)
        return super(VerboseSysPath, self).__setslice__(*args)

sys.path = VerboseSysPath(sys.path)
"
How to make Python's findall regular expression method inclusive,">>> re.findall('%%.*?%%', s, re.DOTALL) # Even this works !!! 
['%%substring1%%', '%%substring2%%']
"
Switch between assignments to different variables in python? With ternary operator?,"test = True
a = 23
b = 42
a,b = (1,b) if test else (a,1)
print (a,b)
"
Store a list (ArrayList?) of integers in python,"a=open(""file"",""r"") # if they're in a file and written newline-separated
for x in a:
    the_list.append(int(x)) # add a value to list
a.close() # close file
for x in the_list:
    print(x) # print value line by line
the_list=list() # empty list
"
Difficulty of this particular job using pyparsing? (beginner),"from pyparsing import Word,alphanums,Forward,Optional,nestedExpr,delimitedList

topicString = Word(alphanums+'-')
expr = Forward()
expr << topicString + Optional(nestedExpr(content=delimitedList(expr)))

test = 'topic(subtopic(sub-subtopic), subtopic2), topic2'

print delimitedList(expr).parseString(test).asList()
"
Trying to log date and time into sqlite3,"Fetches the next row of a query result set, returning a single sequence, or None when no more data is available.
"
How to find the column index of the value of a given row in numpy?,"predictions = np.array([[1,-1,-1,-1],[-1,1,1,-1],[-1,-1,-1,1],[-1,-1,-1,-1]])

In [72]: np.where((predictions==1).sum(1)==1, (predictions==1).argmax(axis=1)+1, 0)
Out[72]: array([1, 0, 4, 0])
"
pandas plot xticks on x-axis,"import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# your data
# ===================================
np.random.seed(0)
df1 = pd.DataFrame(dict(date=pd.date_range('2015-01-01', periods=12, freq='MS'), line1=np.random.randint(10, 30, 12), line2=np.random.randint(20, 25, 12)))

Out[64]: 
         date  line1  line2
0  2015-01-01     22     22
1  2015-02-01     25     21
2  2015-03-01     10     20
3  2015-04-01     13     21
4  2015-05-01     13     21
5  2015-06-01     17     20
6  2015-07-01     19     21
7  2015-08-01     29     24
8  2015-09-01     28     23
9  2015-10-01     14     20
10 2015-11-01     16     23
11 2015-12-01     22     20



df2 = pd.DataFrame(dict(date=pd.date_range('2015-01-01', periods=12, freq='MS'), quant=100*np.random.randint(3, 10, 12)))

Out[66]: 
         date  quant
0  2015-01-01    500
1  2015-02-01    600
2  2015-03-01    300
3  2015-04-01    400
4  2015-05-01    600
5  2015-06-01    800
6  2015-07-01    600
7  2015-08-01    600
8  2015-09-01    900
9  2015-10-01    300
10 2015-11-01    400
11 2015-12-01    400

# plotting
# ===================================
fig, ax = plt.subplots(figsize=(10, 8))
ax.plot(df1.date, df1.line1, label='line1', c='r')
ax.plot(df1.date, df1.line2, label='line2', c='b')
ax2 = ax.twinx()
ax2.set_ylabel('quant')
ax2.bar(df2.date, df2.quant, width=20, alpha=0.1, color='g', label='quant')
ax.legend(loc='best')
ax.set_xticks(ax.get_xticks()[::2])
"
wxpython How to change the values of widgets in other panel,"# -*- coding: utf-8 -*-
import wx
import sys


class PanelOne(wx.Panel):
    """"""""""""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""Constructor""""""
        wx.Panel.__init__(self, parent)
        self.SetBackgroundColour(""blue"")
        font = wx.Font(12, wx.DECORATIVE, wx.NORMAL, wx.BOLD)
        button1 = wx.Button(self, -1, label='Button1')
        button2 = wx.Button(self, -1, label='Button2')
        button1.SetFont(font)
        button2.SetFont(font)


        vbox = wx.BoxSizer(wx.VERTICAL)
        vbox.Add(button1, 1, wx.EXPAND)
        vbox.Add(button2, 1, wx.EXPAND)
        self.SetSizer(vbox)

class PanelTwo(wx.Panel):
    """"""""""""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""Constructor""""""
        wx.Panel.__init__(self, parent)
        self.textctrl = wx.TextCtrl(self, -1, pos=(200,120), style=wx.TE_PROCESS_ENTER|wx.CENTER)    



class PanelThree(wx.Panel):
    """"""""""""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""Constructor""""""
        wx.Panel.__init__(self, parent)
        self.SetBackgroundColour(""white"")

        self.text = wx.TextCtrl(self, -1, 
                            style = wx.TE_MULTILINE|wx.TE_READONLY|
                            wx.HSCROLL)
        vbox = wx.BoxSizer(wx.VERTICAL)
        vbox.Add(self.text, 1, wx.EXPAND)
        self.SetSizer(vbox)


########################################################################
class MainPanel(wx.Panel):
    """"""""""""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""Constructor""""""
        wx.Panel.__init__(self, parent)

        topSplitter = wx.SplitterWindow(self, size=(800,600))
        vSplitter = wx.SplitterWindow(topSplitter)

        self.panelOne = PanelOne(vSplitter)
        self.panelTwo = PanelTwo(vSplitter)
        self.panelThree = PanelThree(topSplitter)

        self.panelTwo.textctrl.Bind(wx.EVT_KEY_DOWN, self.OnEnter)

        vSplitter.SplitVertically(self.panelOne, self.panelTwo)
        vSplitter.SetSashGravity(0.3)

        topSplitter.SplitHorizontally(vSplitter, self.panelThree)
        topSplitter.SetSashGravity(0.5)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(topSplitter, 1, wx.EXPAND)

    def OnEnter(self, event):
        keycode = event.GetKeyCode()
        if keycode == wx.WXK_RETURN or keycode == wx.WXK_NUMPAD_ENTER:
            """"""Here, I want to Print some message in PanelThree textctrl """"""
            self.panelThree.text.SetValue(""ENTER PRESSED"")
        else:
            self.panelThree.text.SetValue("""")
        event.Skip()



########################################################################
class MainFrame(wx.Frame):
    """"""""""""

    #----------------------------------------------------------------------
    def __init__(self):
        """"""Constructor""""""
        wx.Frame.__init__(self, None, title='my program',
                          size=(800,600))
        panel = MainPanel(self)
        self.Show()

#----------------------------------------------------------------------
if __name__ == ""__main__"":
    app = wx.App(False)
    frame = MainFrame()
    app.MainLoop()
"
How to select all locations of unique elements in numpy 2d array with bounding box around them?,"import numpy as np

x = np.array([[1,1,2,2],
              [1,1,2,2],
              [3,3,4,4],
              [3,3,4,4]])

for val in np.unique(x):
    rows, cols = np.where(x == val)
    rowstart, rowstop = np.min(rows), np.max(rows)
    colstart, colstop = np.min(cols), np.max(cols)
    print val, (rowstart, colstart), (rowstop, colstop) 
"
Python: numerical sorting in QTableWidget,"class MyTableWidgetItem(QtGui.QTableWidgetItem):
    def __init__(self, text, sortKey):
            QtGui.QTableWidgetItem.__init__(self, text, QtGui.QTableWidgetItem.UserType)
            self.sortKey = sortKey

    #Qt uses a simple < check for sorting items, override this to use the sortKey
    def __lt__(self, other):
            return self.sortKey < other.sortKey 
"
How to know the filetype through python,"import mimetypes
type, subtype = mimetypes.guess_type(filename_or_url)
"
Iterating through a numpy array and then indexing a value in another array,"elevation_change = np.zeros_like(sediment_transport)
nrows, ncols = flow_direction.shape
lookup = {32: (-1, -1),
          16:  (0, -1), 
          8:   (1, -1),
          4:   (1,  0),
          64: (-1,  0),
          128:(-1,  1),
          1:   (0,  1),
          2:   (1,  1)}

for [i, j], flow in np.ndenumerate(flow_direction):
    dr, dc = lookup.get(flow, (0,0))
    r, c = i + dr, j + dc
    if not ((0 <= r < nrows) & (0 <= c < ncols)):
        elevation_change[i,j] = 0
    else:
        elevation_change[i,j] = sediment_transport[r, c]
"
"Pandas, how to filter a df to get unique entries?","# first way
sorted = df.sort(['type', 'value'], ascending = [True, False])

first = sorted.groupby('type').first().reset_index()
"
How to use str.replace() with a dictionary of replacements? Python,">>> replacements = {ord(k): ord(v) for k, v in replacements.iteritems()}
>>> replacements
{8216: 39, 8217: 39, 8212: 45, 8221: 34, 8220: 34}
>>> u'\u2019Hello world! \u2014 You rock!\u2018'.translate(replacements)
u""'Hello world! - You rock!'""
"
Convert epoch/unix time into readable format,"################################################################################
#Class definition for EST timezone since python doesn't have one
class EST(tzinfo):
    def utcoffset(self, dt):
        return timedelta(-5)

    def tzname(self, dt):
        return ""EST""

    def dst(self, dt):
        return timedelta(0)

################################################################################
#Class definition for CST timezone since python doesn't have one
class CST(tzinfo):
    def utcoffset(self, dt):
        return timedelta(hours=-6)

    def tzname(self, dt):
        return ""CST""

    def dst(self, dt):
        return timedelta(0)


nowcst = datetime.now(tz=CST())
nowest = now.replace(tzinfo(EST())
"
Ouput file redirection in Python,"sys.stderr = sys.stdout = logFile = open( tmpLogFileName, 'a', 0 )
"
How to create struct for passing between nodes using mpi4py,"#!/usr/bin/env python
from __future__ import print_function
from  mpi4py import MPI
import numpy as np

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

assert size > 1

def definetype(field_names, field_dtypes):
    num = 2
    dtypes = list(zip(field_names, field_dtypes))
    a = np.zeros(num, dtype=dtypes)

    struct_size = a.nbytes // num
    offsets = [ a.dtype.fields[field][1] for field in field_names ]

    mpitype_dict = {np.int32:MPI.INT, np.float64:MPI.DOUBLE}  #etc
    field_mpitypes = [mpitype_dict[dtype] for dtype in field_dtypes]

    structtype = MPI.Datatype.Create_struct([1]*len(field_names), offsets, field_mpitypes)
    structtype = structtype.Create_resized(0, struct_size)
    structtype.Commit()
    return structtype


if __name__ == ""__main__"":
    struct_field_names = ['int', 'dbl']
    struct_field_types = [np.int32, np.float64]
    mytype = definetype(struct_field_names, struct_field_types)
    data = np.zeros(1, dtype=(list(zip(struct_field_names, struct_field_types))))

    if rank == 0:
        comm.Recv([data, mytype], source=1, tag=0)
        print(data)
    elif rank == 1:
        data[0]['int'] = 2
        data[0]['dbl'] = 3.14
        comm.Send([data, mytype], dest=0, tag=0)
"
python - Count number of occurences of each number,"from collections import defaultdict
numstring = ""1,2,3,4,5,1,6,7,1,8,9,10,11,12,1,1,2""
numcount = defaultdict(int)
for num in numstring.split(','):
    numcount[num] += 1
"
Multiplication of two arrays in numpy,">>> (x[:, np.newaxis] * y).T
array([[3, 6],
       [4, 8]])
"
deleting items from a dictionary with a given list,"for k in l:
    try:
        del d[k]
    except KeyError:
        print 'No such key', k
"
Regex that grabs variable number of groups,"comment_line = re.compile(r""\s*#"")
class_line = re.compile(r""class (?P<classname>)"")
possible_keys = [""model"", ""fields"", ""write_once_fields"", ""required_fields""]
data_line = re.compile(r""\s*(?P<key>"" + ""|"".join(possible_keys) +
                       r"")\s+=\s+(?P<value>.*)"")

with open( ...
    d = {} # default catcher as above
    for line in ...
       if comment_line.match(line):
           continue
       class_match = class_line.match(line)
       if class_match:
           d = matches[class_match.group('classname')]
           continue # there won't be more than one match per line
       data_match = data_line.match(line)
       if data_match:
           key,value = data_match.group('key'), data_match.group('value')
           d[key] = value
"
Pandas Dataframe - How To Convert Date to Boolean Columns?,"target = pd.DataFrame(0, index=df.index, columns=range(1,13))
dm = pd.get_dummies(df.index.month).set_index(df.index)
target = (target + dm).fillna(0)
target.columns = ['is'+x.capitalize() for x in pd.datetools.MONTHS]
pd.concat([df, target], axis=1)
"
Python get sublists,"def get_sublists(length):
    for i in range(len(lst) - length + 1)
        yield lst[i:i + length]
"
What's the most pythonic way to apply a function on every word in a string with multiple types of white space characters?,">>> import re
>>> def f(a):
...   return a[::-1]
...
>>> s = '\t  \t this  is a\tbanana   \n'
>>> re.sub(r'[^\s]+', lambda m: f(m.group(0)), s)
'\t  \t siht  si a\tananab   \n'
"
Streaming data with Python and Flask,"#!/usr/bin/env python
import time
from flask import Flask, Response

app = Flask(__name__)


def stream_template(template_name, **context):
    # http://flask.pocoo.org/docs/patterns/streaming/#streaming-from-templates
    app.update_template_context(context)
    t = app.jinja_env.get_template(template_name)
    rv = t.stream(context)
    # uncomment if you don't need immediate reaction
    ##rv.enable_buffering(5)
    return rv


@app.route('/')
def index():
    def g():
        for i, c in enumerate(""hello""*10):
            time.sleep(.1)  # an artificial delay
            yield i, c
    return Response(stream_template('index.html', data=g()))


if __name__ == ""__main__"":
    app.run(host='localhost', port=23423)
"
Unable to retrieve element of desired XPATH using BeautifulSoup,"import requests
from bs4 import BeautifulSoup as Soup

page = ""http://www.zillow.com/homedetails/1630-Amalfi-Dr-Pacific-Palisades-CA-90272/20546602_zpid/""
response = requests.get(page)
soup = Soup(response.text,""lxml"")
metas = soup.select(""meta"")
"
"Combine Dictionaries With average values for similar keys,Python","d = {}
for k, v in dict_a.items():
    if k in dict_b:
        val1, val2 = (v[0]+ dict_b[k][0]) / 2, (v[1] + dict_b[k][1]) / 2 # average sum of ele1 and ele2 in each value list
        d[k] = [val1, val2] # set new value to key
        del dict_b[k] # remove key
    else:
        d[k] = v # else just add the k,v

d.update(dict_b) # update with remainder of dict_b
"
Efficient way of counting number of elements smaller (larger) than cutoff in a sorted list,"import bisect
n = bisect.bisect_left(lst, mx)
"
how to correctly modify the iterator of a loop in python from within the loop,"index = 0
while index < len(list):
   if s == ""b"" or s == ""c"":
       del list[index]
       continue
   index += 1
"
How to change list into HTML table ? (Python),"from collections import Counter, defaultdict

hello = [""hello"",""hi"",""hello"",""hello""]
counter= Counter(hello)
bye = defaultdict(int)
print""<table>""
for word in counter.keys():
    print ""<tr>""
    print ""<td>"" + str(word) + "":"" + str(counter[word]) + ""</td>""
    print ""</tr>""
    bye[word] = counter[word]
print""</table>""
"
Python - extracting particular numbers from each line in a file,"with open(""test.txt"") as f,open(""out.txt"",""w"") as out:
    for line in f:
        if ""Get location"" in line:
            a,b,_ = line.rsplit(None,1)[1].strip(""()"").split("","", 2)
            out.write(""{},{}\n"".format(a,b))
"
Matching lists when elements are not ordered," [k for k, v in dict.items() if all((x in v) for x in b)]
"
numpy - Python - Selectively import parts of the .txt file,">>> lines={}
>>> for i in range(2,6):
...    lines[i]=linecache.getline('/tmp/lines.txt', i).strip()
... 
>>> lines
{2: '2013:10:15', 3: 'line 3', 4: 'line 4', 5: '2010:8:15'}
"
Generate special list from file in python,"with open('filename') as f:
    myVar = [line.rstrip().split(':') for line in f]
"
sort list of objects by return of object method,"from operator import attrgetter

sorted(list_of_objects, key=attrgetter('_variable_name'))
"
Python/lxml/Xpath: How do I find the row containing certain text?,"In [19]: def func(doc,txt):
    ...:     exp=u'.//th[div[text()=""{0}""]]'\
    ...:         u'/following-sibling::td/text()'.format(txt)
    ...:     return [i.strip() for i in doc.xpath(exp)]

In [20]: func(doc,u'Total Accounts Receivable')
Out[20]: ['338,594', '270,133', '214,169', '244,940', '236,331']
"
Parse multiple json objects that are in one line,">>> import re
>>> s = r'{""data1"": {""data1_inside"": ""bla{bl\""a""}}{""data1"": {""data1_inside"": ""blabla[""}}{""data1"": {""data1_inside"": ""bla{bla""}}{""data1"": {""data1_inside"": ""bla[""}}'
>>> r = re.split('(\{.*?\})(?= *\{)', s)
['', '{""data1"": {""data1_inside"": ""bla{bl\\""a""}}', '', '{""data1"": {""data1_inside"": ""blabla[""}}', '', '{""data1"": {""data1_inside"": ""bla{bla""}}', '{""data1"": {""data1_inside"": ""bla[""}}']
"
Group spark dataframe by date,"from pyspark.sql.functions import hour, mean

(df
    .groupBy(hour(""timestamp"").alias(""hour""))
    .agg(mean(""value"").alias(""mean""))
    .show())

## +----+------------------+
## |hour|              mean|
## +----+------------------+
## |   0|508.05999999999995|
## |   1| 449.8666666666666|
## |   2| 524.9499999999999|
## |   3|264.59999999999997|
## +----+------------------+
"
pyparsing whitespace match issues,"data = ""Library\tSSHClient    with name\tnode""

# replace tabs with 2 spaces
data = data.replace('\t', '  ')

print linedefn.parseString(data)
"
Row into column in Python,"import pandas as pd
import io

temp=u""""""date;p01;p02;p03;p04;p05;p06
01-01-1941;33.6;7.1;22.3;0;0;0
01-02-1941;0;0;1.1;11.3;0;0""""""
#after testing replace io.StringIO(temp) to filename
df = pd.read_csv(io.StringIO(temp), sep="";"")
print df
         date   p01  p02   p03   p04  p05  p06
0  01-01-1941  33.6  7.1  22.3   0.0    0    0
1  01-02-1941   0.0  0.0   1.1  11.3    0    0
"
Add a column from a csv to another csv,"import csv

in_1_name = ""/home/julien/input.csv""
in_2_name = ""/home/julien/excel/output.csv""
out_name = ""/home/julien/excel/merged.csv""

with open(in_1_name) as in_1, open(in_2_name) as in_2, open(out_name, 'w') as out:
    reader1 = csv.reader(in_1, delimiter="";"")
    reader2 = csv.reader(in_2, delimiter="";"")
    writer = csv.writer(out, delimiter="";"")
    for row1, row2 in zip(reader1, reader2):
        if row1[0] and row2[0]:
            writer.writerow([row1[0], row2[0]])
"
How to remove an item in a list that has a specific ordering of words,"import re

mylist = [""hello there"", ""Watermelons are delicious"", ""What is the colour of my shirt""]

mylist[:] = [s for s in mylist if not re.search(r""\bis the colour\b"",s)])
"
finding tuple sublist with minimal overlap,"from itertools import *
import operator

def allsubsets(l):
    for s in chain( *map(lambda r: combinations(l,r), xrange(1,len(l))) ):
        yield s


# only count tuples that make consecutive ranges
def mk_cover(acc, item):
    ((curlo, curhi), tuplist, ovl) = acc
    (newlo, newhi)                 = item
    if newlo<=curhi:
        # ok, the new item possibly extends the range
        if newhi>=curhi:
            overlap = curhi - newlo
        else:
            overlap = newhi - newlo
            newhi   = curhi
        return ((curlo, newhi), tuplist+[item], ovl+overlap)
    else:
        # it doesn't so return the old accumulator
        return acc

# return a function that will inspect lists-of-tuples
# to see if they cover the range lo -> hi. If they do,
# append the covering list and the overlap to an
# accumulator; a list of solutions found so far
def mk_finder(lo, hi):
    def overlapper(acc, tuples):
        # inspect the subset of tuples, wether they 
        # cover lo -> hi 
        # sort by start value
        tuples                    = list(sorted(tuples, key=operator.itemgetter(0)))
        ((covlo, covhi), tl, ovl) = reduce(mk_cover, tuples[1:], (tuples[0], [tuples[0]], 0))
        if covlo<=lo and covhi>=hi:
            acc.append( ((covlo, covhi), tl, ovl) )
        return acc
    return overlapper
"
determine matplotlib axis size in pixels,"width *= fig.dpi
height *= fig.dpi
"
"Python, how to flexibly create subclass?","def create_custom_subclass(cls):
    class sub(cls):
        def set_value(self):
            more_set_value()
            super().set_value()
    return sub

AA = create_custom_subclass(A)
a = AA()
a.set_value()
"
Python Retrieve Email Addresses,"import email.utils

def split_combined_addresses(addresses):
    parts = email.utils.getaddresses(addresses)
    return [email.utils.formataddr(name_addr) for name_addr in parts]

print(split_combined_addresses(email_to))
"
Unpythonic way of printing variables in Python?,"# Python 2.6
print(""{0}, {1}, {2}"").format(foo, bar, baz) 

# Python 2.7/3.1+
print(""{}, {}, {}"").format(foo, bar, baz)    
"
Run python from python without Popen or os.system,"for thing in list_of_stuff:
    x = __import__('inner-script')
    x.className(thing, counter)
"
Comparing python dictionaries and find diffrence of the two,"def compare_json(x,y):
    for x_key in x:
        if x_key in y and x[x_key] == y[x_key]:
            print 'Match'
        else:
            print 'Not a match'
    if any(k not in x for k in y):
        print 'Not a match'
"
Pandas multiindex dataframe set first row in a column to 0,"In [33]: df.sort_index()
Out[33]: 
        A   B         C
0      40  56 -1.223941
1      24  77 -0.039775
2       7  83  0.741013
3      48  38 -1.795053
4      62  15 -2.734968
...    ..  ..       ...
99995  20  25 -0.286300
99996  27  21 -0.120430
99997   0   4  0.607524
99998  38  31  0.717069
99999  33  63 -0.226888

[100000 rows x 3 columns]
"
Remove or adapt border of frame of legend using matplotlib,plt.legend(frameon=False)
numpy arange and where,"def near(a,b,rtol=1e-5,atol=1e-8):
    try:
        return np.abs(a-b)<(atol+rtol*np.abs(b))
    except TypeError:
        return False

myarr = np.arange(6.6,10.25,0.05)
for item in [6.6,6.65,6.7,6.8,6.9,6.95,7.95,8.0,8.1,8.15,6.2,6.25,6.35]:
    print (np.where(near(myarr,item)))

# (array([0]),)
# (array([1]),)
# (array([2]),)
# (array([4]),)
# (array([6]),)
# (array([7]),)
# (array([27]),)
# (array([28]),)
# (array([30]),)
# (array([31]),)
# (array([], dtype=int32),)
# (array([], dtype=int32),)
# (array([], dtype=int32),)
"
How to convert the following scala code to python,"import datetime

def value_to_string(input):

    # String
    if isinstance(input, basestring):
        return 'string'

    # BigDecimal
    if isinstance(input, int):
        return 'int'

    # Array
    if isinstance(input, list):
        return 'list'

    # Map
    if isinstance(input, dict):
        return 'dictionary'

    # Date
    if isinstance(input, datetime.date):
        return 'date'

    # ...
"
How can this Python Scrabble word finder be made faster?,"f = open('/usr/share/dict/words')
d = {}
lets = set('abcdefghijklmnopqrstuvwxyz\n')
for word in f:
  if len(set(word) - lets) == 0 and len(word) > 2 and len(word) < 9:
    word = word.strip()
    key = ''.join(sorted(word))
    if key in d:
      d[key].append(word)
    else:
      d[key] = [word]
f.close()
anadict = [' '.join([key]+value) for key, value in d.iteritems()]
anadict.sort()
f = open('anadict.txt','w')
f.write('\n'.join(anadict))
f.close()
"
Remove punctuation from Unicode formatted strings,"import unicodedata
import sys

tbl = dict.fromkeys(i for i in xrange(sys.maxunicode)
                      if unicodedata.category(unichr(i)).startswith('P'))
def remove_punctuation(text):
    return text.translate(tbl)
"
Random sampling one element without making it a list in Python,"randomVar = random.choice([var1,var2,var3,var4])
"
Applying time-variant filter in Python,"In [8]: freq, bw = pi/4, pi/8

In [9]: R = e ** (-bw / 2)

In [10]: c = cos(freq) * 2 * R / (1 + R ** 2) # AudioLazy included the cosine

In [11]: gain = (1 - R ** 2) * sqrt(1 - c ** 2)
"
regex to remove non alpha-words A-Z a-z from a list (exceptions),"cases=[
    [""The"", ""sailor"", ""is"", ""sick"", "".""],
    [""The"", ""U.S."", ""is"", ""big"", "".""],
    [""round"", ""up"", ""the"", ""''"", ""blonde"", ""bombshell"", ""\\"", 
    ""a"", ""all"", ""-lrb-"", ""well"", ""almost"", ""all"", ""-rrb-""],
]

import re

for li in cases:
    print '{}\n\t->{}'.format(li, [w for w in li if re.search(r'^[a-zA-Z]', w)])
"
Refactoring code/consolidating functions (e.g. nested for-loop order),"template = ""Player # likes @.""
subs = (""{n}"", ""{w}"") if numbers_first else (""{w}"", ""{n}"")
format = make_format(template, subs) # escape {}, replace # and @

# ...
for n, w in product(*data):
    print(format.format(n=n, w=w))
"
Python Palindrome Help: Count palindromes in a sentence,"sentence = input(""Enter a sentence: "").split()

count = 0
for w in sentence:
    if palindrome(w):
        count += 1
        print(""{} is a palindrome."")
    else:
        print(""{}  is not a palindrome."")
print("" There are {} palindromes in your sentence\n."".format(count))
"
How can I load a csv file and store its contents into an (numpy) array in python?,"import numpy as np

def get_from_csv(fname):
    data = np.loadtxt(fname, dtype=np.object, delimiter="","")
    col = np.array([[ int(fname.rstrip("".txt"")) ] * data.shape[0]]).T
    return np.hstack( (col, data) )

files = [""1.txt"", ""2.txt"", ""3.txt""]

for f in files:
    try:
        data = np.vstack( (data, get_from_csv(f)) )
    except:
        data = get_from_csv(f)
print data
"
Why can't I get track titles from url?,"from ast import literal_eval
import re
import urllib2

from bs4 import BeautifulSoup

url = 'http://archive.org/details/HQSherlockRathboneTCS'
soup = BeautifulSoup(urllib2.urlopen(url))

script = soup.find('script', text=lambda x: x and 'jw6' in x)
text = script.text.replace('\n', '')

pattern = re.compile(r""Play\('jw6', (.*?),\s+\{\""start"")

playlist = literal_eval(pattern.search(text).group(1).strip())
for track in playlist:
    print track['title']
"
Make sentences with 1st|2nd|3rd|4th to XML according to a special specification,"import re
import xml.etree.ElementTree as ET


data = """"""I will meet you at 1st.
5th... OK, 5th?
today is 2nd
Aug.3rd""""""

endings = ['st', 'th', 'nd', 'rd']
pattern = re.compile('(%s)' % ""|"".join(endings))

root = ET.Element('root')
for line in data.split('\n'):
    items = []
    for item in re.split(pattern, line):
        if item in endings:
            items.append('<Font Script=""super"">%s</Font>' % item)
        else:
            items.append(item)
    element = ET.fromstring(""""""<Text VAlign=""top"" VPosition=""85.00"">%s</Text>"""""" % ''.join(items))
    root.append(element)

print ET.tostring(root)
"
pandas.read_sql and interpreting dates specified as weeks,"sql = ""SELECT STR_TO_DATE(CONCAT(y,':',w,':1'), '%x:%v:%w') as date, d FROM test.t""    
df = pd.read_sql(sql, engine)
"
Multi-condition regex in Python,"In [1]: strs=""I am a string""

In [2]: lis=['this', 'is', 'a', 'regex', 'test']

In [3]: any(x in strs for x in lis)
Out[3]: True
"
Getting selected text (python-gtk),"self.s_text=gtk.SelectionData.get_text()
"
How to find the index value of a variable in SPSS Python,"varObj = datasetObj.varlist['ID']
"
Python (Maya) pass flags as variables,"mesh_options = {'type':'mesh', 'long':True } 
meshes = cmds.ls(**mesh_options)
"
Importing in functions instead of at the beginning or the script?,"try:
    import module.that.may.not.be.available
    def framework_dependent_function():
        # whatever
except ImportError:
    def framework_dependent_function():
        # the required functionality is not available
        # this function can not be run
        raise NotImplementedError
"
Finding common elements between two files,"def get_protein_chunks(filepath):
    chunk = []
    last_indented = False
    with open(filepath) as f:
        for line in f:
            if not line.startswith("" ""):
                current_indented = False
            else:
                current_indented = True
            if last_indented and not current_indented:
                yield chunk
                chunk = []       
            chunk.append(line.strip())
            last_indented = current_indented


look_for_proteins = set(line.strip() for line in open('file2.txt'))


for p in get_protein_chunks(""input.txt""):
    proteinname = p[0].split()[0]
    proteindata = p[1:]
    if proteinname not in look_for_proteins:
        continue
    print ""Protein: %s"" % proteinname
    golines = [l for l in proteindata if l.startswith(""GO:"")]
    for g in golines:
        print g
"
Initializing numpy masked array from Python int list with None values,"ma.masked_invalid(np.array(column, dtype=float), copy=False).astype(int).data
"
Getting actual facebook and twitter image urls using python,"from bs4 import BeautifulSoup
import urllib

urlData = urllib.urlopen('https://www.facebook.com/photo.php?fbid=10152055005350906')
data = str(urlData.readlines())
bs = BeautifulSoup(data)
imgUrl = bs.find('img', attrs={'class': 'fbPhotoImage img'}).get('src')
urllib.urlretrieve(imgUrl, ""plane.jpg"")
"
Python/Numpy/Scipy - Converting string to mathematical function,"import numpy as np
import scipy.special as special

expr='(1+p[1])**(1+p[1])/special.gamma(1+p[1]) * x**p[1]/p[0]**(1+p[1]) * np.exp(-(1+p[1])*x/p[0])'

def make_func(expr):
    funcstr='''\
def f(x,p):
    return {e}
    '''.format(e=expr)
    exec(funcstr)
    return f

f=make_func(expr)
print(f(1,[2,3]))
"
Use 'in' in an array of arrays,"d = {}
for word, lineno in document:
    d.setdefault(word, [lineno, 0])[1] += 1 # works whether or not word was in d before
"
Round an answer to 2 decimal places in Python,"print(""6 Month Cost: %.2fUSD"" % (cost * .6))
"
"Finding ""hotspots"" in unidimensional list in python","from sklearn.cluster import KMeans

data = [[1200, 1210], [1212, 1222], [1190, 1200], [300, 310], [800, 810]]
centers = [[sum(x) / len(x)] for x in data]

clf = KMeans(n_clusters=3)

clf.fit(centers)

for points in data:
    center = sum(points) / len(points)
    print points, center, clf.predict([center])
"
"Clunky calculation of differences between an incrementing set of numbers, is there a more beautiful way?",">>> nums = [1,4,6,10]
>>> [x-y for x,y in zip(nums[1:],nums)]
[3, 2, 4]
>>> delta=[x-y for x,y in zip(nums[1:],nums)]
>>> float(sum(delta))/len(delta)
3.0
"
Replace a character with multiple characters using Python,"yield comb(S.replace('?','0',1))
"
How to add 2 scrollbars with tkinter in python 3.4?,"from win32com.client import Dispatch
from tkinter import *
from tkinter import ttk
import tkinter


class applicazione(object):


    def __init__(self, root):
        self.root = root

        # Top-level frame
        self.root.title('Controllo dati per fatturazione elettronica - Manticle - Smith & Nephew Italia')

        self.frame = ttk.Frame(self.root, width=300, height=250)

        # Canvas creation with double scrollbar
        hscrollbar = ttk.Scrollbar(self.frame, orient = tkinter.HORIZONTAL)
        vscrollbar = ttk.Scrollbar(self.frame, orient = tkinter.VERTICAL)
        sizegrip = ttk.Sizegrip(self.frame)
        self.canvas = tkinter.Canvas(self.frame, bd=0, highlightthickness=0, yscrollcommand = vscrollbar.set, xscrollcommand = hscrollbar.set)
        vscrollbar.config(command = self.canvas.yview)
        hscrollbar.config(command = self.canvas.xview)


        # Add controls here
        self.subframe = ttk.Frame(self.canvas)        


        #### Titles
        self.titoli_HFT = [""Dest_Cod_FIS_P_Iva"", ""Cod_Cli"", ""Dest_RagSoc1"", ""Dest_RagSoc2"",
                           ""Dest_Indirizzo"", ""Dest_CAP"", ""Dest_Localita"", ""Dest_Provincia"", ""Cli_Cod_Fis_P_Iva"",
                            ""Cod_Dest"", ""Cli_RagSoc1"", ""Cli_RagSoc2"", ""Cli_Indirizzo"", ""Cli_CAP"",
                           ""Cli_Localita"", ""Cli_Provincia"", ""Tipo_Doc"", ""pre_Num_Doc"", ""Num_Doc"",
                            ""Data_Doc"", ""Vs_Rif"", ""Data_Rif"", ""Blank"", ""Blank2"", ""CPT"", ""Scad_Pagamento"",
                           ""Descr"", ""Num_Ord"", ""Tot_Imp"", ""Tot_IVA"", ""Tot_Doc"", ""Nazione"", ""IPA"", ""Reg_Fiscale""]



        self.inizializza_widgets()

        #Packing everything
        self.subframe.pack(fill = tkinter.BOTH, expand = tkinter.TRUE)
        hscrollbar.pack( fill=tkinter.X, side=tkinter.BOTTOM, expand=tkinter.FALSE)
        vscrollbar.pack( fill=tkinter.Y, side=tkinter.RIGHT, expand=tkinter.FALSE)
        sizegrip.pack(in_= hscrollbar, side = BOTTOM, anchor = ""se"")
        self.canvas.pack(side = tkinter.LEFT, padx  = 5, pady  = 5, fill = tkinter.BOTH, expand= tkinter.TRUE)
        self.frame.pack( padx   = 5, pady  = 5, expand = True, fill = tkinter.BOTH)


        self.canvas.create_window(0,0, window = self.subframe)
        self.root.update_idletasks() # update geometry
        self.canvas.config(scrollregion = self.canvas.bbox(""all""))
        self.canvas.xview_moveto(0) 
        self.canvas.yview_moveto(0)    


    def inizializza_widgets(self):

        self.LabelFrame = ttk.Frame(self.subframe)
        self.lblins = tkinter.Label(self.LabelFrame, text=""Controllo dati per fatturazione elettronica"", font=(""Helvetica"", 12))
        self.lblins.pack()

        for i in range (0,len(self.titoli_HFT)):
            j = 80*i
            self.lblnome=tkinter.Label(self.LabelFrame, text= self.titoli_HFT[i], font=(""Helvetica"", 8))
            self.lblnome.pack(side = LEFT)#place(x=85+j, y=50)

        self.ContentFrame = ttk.Frame(self.subframe, width = 600, height = 600)

        self.ButtonsFrame = ttk.Frame(self.subframe)
        ttk.Frame(self.ButtonsFrame).pack(side=LEFT, fill = X, expand=TRUE)
        ttk.Button(self.ButtonsFrame, text='Inserisci', width='10').pack(side = LEFT)
        ttk.Button(self.ButtonsFrame, text='Modifica', width='10').pack(side = LEFT)
        ttk.Button(self.ButtonsFrame,  text='Indietro', width='10').pack(side = LEFT)
        ttk.Button(self.ButtonsFrame,  text='Avanti', width='10').pack(side = LEFT)
        ttk.Frame(self.ButtonsFrame).pack(side=RIGHT, fill = X, expand=TRUE)

        self.LabelFrame.pack(side = TOP, fill = X, expand=TRUE)
        self.ContentFrame.pack(fill = BOTH, expand = TRUE)
        self.ButtonsFrame.pack(side = BOTTOM, fill = X, expand = TRUE)



if __name__ == '__main__':
    root = tkinter.Tk()
    root.title( ""Double scrollbar with tkinter"" )
    w, h = root.winfo_screenwidth(), root.winfo_screenheight()
    root.geometry(""%dx%d+0+0"" % (0.99*w, 0.9*h))
    applicazione(root)


    root.mainloop()
"
Replicate Java's PBEWithMD5AndDES in Python 2.7,"from Crypto.Hash import MD5
from Crypto.Cipher import DES

_password = 'q1w2e3r4t5y6'
_salt = '\x80\x40\xe0\x10\xf8\x04\xfe\x01'
_iterations = 50
plaintext_to_encrypt = 'MyP455w0rd'

# Pad plaintext per RFC 2898 Section 6.1
padding = 8 - len(plaintext_to_encrypt) % 8
plaintext_to_encrypt += chr(padding) * padding

if ""__main__"" == __name__:

    """"""Mimic Java's PBEWithMD5AndDES algorithm to produce a DES key""""""
    hasher = MD5.new()
    hasher.update(_password)
    hasher.update(_salt)
    result = hasher.digest()

    for i in range(1, _iterations):
        hasher = MD5.new()
        hasher.update(result)
        result = hasher.digest()

    encoder = DES.new(result[:8], DES.MODE_CBC, result[8:16])
    encrypted = encoder.encrypt(plaintext_to_encrypt)

    print encrypted.encode('base64')
"
How can I get from 'pyspark.sql.types.Row' all the columns/attributes name?,"row_info.__fields__
"
SqlAlchemy: filter to match all instead of any values in list?,"select aid
from jt
where bid in (<your list>)
group by aid
having count(distinct bid) = 2
"
PHP to python pack('H'),"import binascii
import hashlib

the_hash = hashlib.md5('Dummy String').hexdigest()
print the_hash
the_unhex = binascii.unhexlify(the_hash)
print the_unhex
"
Checking two time intervals are overlapping or not,"overlapped = sorted(overlapped) #this gives a list
"
Wxpython cut copy paste and openfiledialog,"import os
os.startfile(filepath)
"
"Django: making {% block ""div"" %} conditional with a conditional {% extends %}","{% extends x|yesno:""stamped/blank.html,stamped/home.html"" %}
"
Find the lowest non-masked point with numpy efficiently,"np.where((A < thresh).all(0),-1,(A >= thresh).argmax(0))
"
python function incrementing variable in list for no obvious reason,">>> a = [1, 2]
>>> b = list(a)
>>> id(a)
4300922320
>>> id(b)
4300922680
>>> 
"
How to sort a Python dict by value,"res = list(sorted(theDict, key=theDict.__getitem__, reverse=True))
"
Most pythonic way of ensuring a list of objects contains only unique items,">>> Point = namedtuple('Point', ['x', 'y'])
>>> p = Point(11, y=22)     # instantiate with positional or keyword arguments
>>> p[0] + p[1]             # indexable like the plain tuple (11, 22)
33
>>> x, y = p                # unpack like a regular tuple
>>> x, y
(11, 22)
>>> p.x + p.y               # fields also accessible by name
33
>>> p                       # readable __repr__ with a name=value style
Point(x=11, y=22)
"
Iterate within directory to zip files with python,"def map_reduce(data, mapper, reducer):
    d = {}
    for elem in data:
        key, value = mapper(elem)
        d.setdefault(key, []).append(value)
    for key, grp in d.items():
        d[key] = reducer(key, grp)
    return d
"
python dict to numpy structured array,"import numpy as np
result = {0: 1.1181753789488595, 1: 0.5566080288678394, 2: 0.4718269778030734, 3: 0.48716683119447185, 4: 1.0, 5: 0.1395076201641266, 6: 0.20941558441558442}

names = ['id','data']
formats = ['f8','f8']
dtype = dict(names = names, formats=formats)
array = np.array(result.items(), dtype=dtype)

print(repr(array))
"
How to download images from BeautifulSoup?,"for link in soup.select(""img[src^=http]""):
        lnk = link[""src""]
        with open(basename(lnk),"" wb"") as f:
            f.write(requests.get(lnk).content
"
How to address a dictionary in a list of ordered dicts by unique key value?,">>> from collections import defaultdict
>>> d = defaultdict(list)
>>> d['a'].append(1)
>>> d['a'].append(2)
>>> d['b'].append(3)
>>> d['c'].append(4)
>>> d['b'].append(5)
>>> print(d['a'])
[1, 2]
>>> print(d)
defaultdict(<type 'list'>, {'a': [1, 2], 'c': [4], 'b': [3, 5]})
"
Counting number of strings in a List with Python,"for k,v in cn.items():
    print(""[{}][{}]"".format(k,v))

[thus][2]
[count][1]
[one][2]
[once][2]
[this][1]
"
Plot bar graph and timeseries plot on different axis using pandas,"import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as mgrid
import pandas as pd

fig, tsax = plt.subplots(figsize=(12,5))
barax = tsax.twinx()

data = pd.DataFrame(np.random.randn(10,3), columns=list('ABC'), index=pd.DatetimeIndex(freq='1M', start='2012-01-01', periods=10))
data['A'] **= 2

# the `width` is specified in days -- adjust for your data
barax.bar(data.index, data['A'], width=5, facecolor='indianred')

barax.set_ylabel('Miles')
tsax.set_ylabel('Miles/Gallon')

barax.xaxis.tick_top()

fig.tight_layout()

tsax.plot(data.index, data['B'])
tsax.plot(data.index, data['C'])
"
How to recursively remove certain keys from a multi-dimensional(depth not known) python dictionary?,"    obj = dict((key, remove_keys(value, rubbish))
               for key, value in obj.iteritems()
               if key not in rubbish)
"
Iterate with binary structure over numpy array to get cell sums,"In [42]: import numpy as np

In [43]: a = np.zeros((6,6), dtype=np.int) 
a[1:5, 1:5] = 1;
a[3,3] = 0;
a[2,2] = 2

In [48]: s = ndimage.generate_binary_structure(2,2) # Binary structure

In [49]: ndimage.convolve(a,s)
Out[49]: 
array([[1, 2, 3, 3, 2, 1],
       [2, 5, 7, 7, 4, 2],
       [3, 7, 9, 9, 5, 3],
       [3, 7, 9, 9, 5, 3],
       [2, 4, 5, 5, 3, 2],
       [1, 2, 3, 3, 2, 1]])
"
Pass multiple arguments to a function in tkinter,"from Tkinter import *

def displayButton(root,employNum, employPass):

    Label(root,text = employNum.get() ).grid(row = 3, column = 1, sticky = N+S+W+E)
    Label(root, text = employPass.get()).grid(row = 4, column = 1, sticky = N+S+W+E)

def main():

    root = Tk()

    Label(root, text = 'Employee Number: ').grid(row = 0, column = 0, sticky = W)
    Label(root, text = 'Login Password: ').grid(row = 1, column = 0, sticky = W)

    employeeNum = StringVar()
    employeePass = StringVar()
    Entry(root, textvariable = employeeNum).grid(row = 0, column = 1, columnspan = 2, sticky = W)
    Entry(root, textvariable = employeePass).grid(row = 1, column = 1, columnspan = 2, sticky = W)

    checkButton = BooleanVar()
    Checkbutton(root, text = 'Remember Me', variable = checkButton).grid(row = 2, column = 1, sticky = W)

    Button(root, text = 'Save', relief = RAISED).grid(row = 2, column = 2, sticky = E)
    display = Button(root, text = 'Display', relief = RAISED, command = lambda: displayButton(root, employeeNum,employeePass))
    display.grid(row = 3, column = 2, sticky = E)
    #display.bind('<Button-1>', displayButton)

    Label(root, text = ""Employee's number is "").grid(row = 3, column = 0, sticky = W)
    Label(root, text = ""Employee's Passowrd is "").grid(row =4 , column = 0, sticky = W)
    root.mainloop() 

main()
"
How to pass an integer series as argument to a python function?,"a, b, c, d = map(f, xrange(1, 5))
"
Get name of QPushButton,"self.pushButton_9_3.objectName()
"
"python - cast a class to a tuple and ""autobox"" to a for loop","def __iter__(self):
    yield self.x
    yield self.y
"
Finding the (guaranteed unique) path between two nodes in a tree,"def VisitNode(self, node, target):
    # Base case. If we found the target, return target in a list
    if node == target:
        return [node]

    # If we're at a leaf and it isn't the target, return None 
    if len(self.neighbors(node)) == 0:
        return None

    # recursively iterate over children
    for i in self.neighbors_iter(node):
        tail = self.VisitNode(i, target)
        if tail: # is not None
            return [node] + tail # prepend node to path back from target
    return None #none of the children contains target
"
Python: index of fist element smaller than threshold in reverse sorted list,"def reverse_binary_search(a, x, lo=0, hi=None):
    if lo < 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo < hi: 
        mid = (lo+hi)/2
        if x > a[mid][4]:
            hi = mid 
        else:
            lo = mid+1
    return lo

my_list = [[3,0.99,1], [2,0.98,54], [10,.85,4], [1,0.7,10], [12,0.69,31], [12,0.65,43], [1.56,0]]
threshold = [0.97, 0.90, 0.83, 0.6]

index_list = []
last_index = 0
for t in threshold:
    last_index = reverse_binary_search(my_list, t, last_index) # next time start search from last_index
    index_list.append(last_index)
"
Reading files in directory ending with digit python,"import re

def name_ends_with_digit(filename):
   return re.match(r'\w*\d+.txt$', filename)

def main():
   for filename in os.listdir(""dir/""):
      if name_ends_with_digit(filename):
          execfile('Location of previous python program')
"
Follow First 5 Pages of Google Results Python Mechanize,"from mechanize import Browser
from bs4 import BeautifulSoup

br = Browser()
br.set_handle_robots(False)
br.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 6.2;\
                    WOW64) AppleWebKit/537.11 (KHTML, like Gecko)\
                    Chrome/23.0.1271.97 Safari/537.11')]

url = ""https://encrypted.google.com/search?hl=en&q=site%3Asomedomain.com&start=0""

r = br.open(url)

soup = BeautifulSoup(r)

nextpage = soup.find(""a"", {""id"": ""pnnext""})
print nextpage['href']
"
How to determine regions of pixels with a shared value using PIL,"from itertools import product
from PIL import Image, ImageDraw


def closed_regions(image, test):
    """"""
    Return all closed regions in image who's pixels satisfy test.
    """"""
    pixel = image.load()
    xs, ys = map(xrange, image.size)
    neighbors = dict((xy, set([xy])) for xy in product(xs, ys) if test(pixel[xy]))
    for a, b in neighbors:
        for cd in (a + 1, b), (a, b + 1):
            if cd in neighbors:
                neighbors[a, b].add(cd)
                neighbors[cd].add((a, b))
    seen = set()
    def component(node, neighbors=neighbors, seen=seen, see=seen.add):
        todo = set([node])
        next_todo = todo.pop
        while todo:
            node = next_todo()
            see(node)
            todo |= neighbors[node] - seen
            yield node
    return (set(component(node)) for node in neighbors if node not in seen)


def boundingbox(coordinates):
    """"""
    Return the bounding box that contains all coordinates.
    """"""
    xs, ys = zip(*coordinates)
    return min(xs), min(ys), max(xs), max(ys)


def is_black_enough(pixel):
    r, g, b = pixel
    return r < 10 and g < 10 and b < 10


if __name__ == '__main__':

    image = Image.open('some_image.jpg')
    draw = ImageDraw.Draw(image)
    for rect in disjoint_areas(image, is_black_enough):
        draw.rectangle(boundingbox(region), outline=(255, 0, 0))
    image.show()
"
"More plotting options for pandas.DataFrame.plot(kind=""bar"")","df=pd.DataFrame(np.random.random((6,6)))
ax=df.plot(kind='bar')
ax.yaxis.set_scale('log')
ax.set_xticklabels(['a','b','c','d','e','f'])
"
"Is it possible to execute function every x seconds in python, when it is performing pool.map?","from threading import Timer,Event 

class perpetualTimer(object):

   # give it a cycle time (t) and a callback (hFunction) 
   def __init__(self,t,hFunction):
      self.t=t
      self.stop = Event()
      self.hFunction = hFunction
      self.thread = Timer(self.t,self.handle_function)

   def handle_function(self):
      self.hFunction()
      self.thread = Timer(self.t,self.handle_function)
      if not self.stop.is_set():
          self.thread.start()

   def start(self):
      self.stop.clear()
      self.thread.start()

   def cancel(self):
      self.stop.set()
      self.thread.cancel()
"
Sequence elements will not modify (Python 3.4),"print(""Lotto number"",index,""is"",lotto[index],""!"")
index = index + 1
"
Python 3 Pig Latin Sentence,"newSentence = """"
"
Parsing a string for data sets,"import xml.etree.ElementTree as ET


data = '<Sets X=""s""><B s=""1"" e=""2176"" t=""-2.0774E4"" r=""1"" /><B s=""2177"" e=""8982"" t=""-1.8597E4"" r=""1"" /><B s=""8983"" e=""10393"" t=""-150.22"" r=""1"" /></Sets>'

tree = ET.fromstring(data)
for b in tree.findall('.//B'):
     print map(float, itemgetter(*'setr')(b.attrib))
"
Converting 23/Oct/2014 to 2014/10/23 in Python,">>> from datetime import datetime
>>> original = '23/Oct/2014'
>>> datetime.strptime(original, '%d/%b/%Y').strftime('%Y/%m/%d')
'2014/10/23'
"
python: changing list value in sub-routine,"def test_list_change(lst):
    if len(lst) < 3:
        lst.append(""the last one"")
        test_list_change_2(lst)

def test_list_change_2(lst):
    lst[:] = [""the very last one""] # changes original list object

string_list = [""first"", ""another one""]
test_list_change(string_list)
print (string_list)
['the very last one']
"
How do I add together integers in a list in python?,"x = [2, 4, 7, 12, 3]
sum_of_all_numbers= sum(x)
"
Is it possible to display only first list element in for loop?,"for x in range(10):
    print data[0]
"
How to Select Recurring Text in a File,"def countOK ( lines ):
    cnt = 0
    for i in lines:
        if i == ""Correct\n"":
            cnt += 1
    return cnt
...
lines = open( file ).readlines()
total = len( lines )
totalOK = countOK (lines)
if totalOK >= total / 2:
    print ""Passed""
else:
    print ""Failed""
"
How to exclude files extension from os.walk,"for dir, dirs, files in os.walk(src):
    if any(f.endswith('.txt') for f in files):
        continue  # ignore this directory

    # do something with the files here, there are no .txt files.
    files = [os.path.join(dir, f) for f in files]
"
python pass regex to mongo via http,"import re 
filter = {'id_number': re.compile(""^1234[8-9]"")}
"
Entering large amount of entries in a SQLite Database,"def increment_person_counts(count_per_person):
    with sqlite3.connect(r'./people_database') as connection:
        cursor = connection.cursor()
        cursor.execute('select person from personCounts')
        known_persons = set(row[0] for row in cursor.fetchall())
        cursor.executemany('insert into personCounts(person, count) values (?, ?)', ((person, count) for count_per_person.iteritems() if person in known_persons))
        for person, count in count_per_person.iteritems():
            if person not in known_persons:
                cursor.execute('update personCounts SET count=count + ? WHERE person=?', [count, person])
        connection.commit()
"
Whats the best way to write python code into a python file?,"import os
filepath = os.getcwd()
def MakeFile(file_name):
    temp_path = filepath + file_name
    with open(file_name, 'w') as f:
        f.write('''\
def print_success():
    print ""sucesss""        
''')
    print 'Execution completed.'
"
Selecting all top words in Python list using Counter,"most_common(self, n=None)
"
Filtering histogram edges and counts,"np.random.seed(0)
values = np.random.uniform(0, 100, 10)
values.sort()
>>> values
array([ 38.34415188,  42.36547993,  43.75872113,  54.4883183 ,
        54.88135039,  60.27633761,  64.58941131,  71.51893664,
        89.17730008,  96.36627605])

# Histogram using e.g. 10 buckets
perc, edges = np.histogram(values, bins=10,
                           weights=np.zeros_like(values) + 100./values.size)

>>> perc
array([ 30.,   0.,  20.,  10.,  10.,  10.,   0.,   0.,  10.,  10.])

>>> edges
array([ 38.34415188,  44.1463643 ,  49.94857672,  55.75078913,
        61.55300155,  67.35521397,  73.15742638,  78.9596388 ,
        84.76185122,  90.56406363,  96.36627605])

m = 0; M = 50
mask = (m <= edges) & (edges < M)
>>> mask
array([ True,  True,  True, False, False, False, False, False, False,
       False, False], dtype=bool)

>>> edges[mask]
array([ 38.34415188,  44.1463643 ,  49.94857672])

>>> perc[mask[:-1]][:-1]
array([ 30.,   0.])

m = 40; M = 60
mask = (m < edges) & (edges < M)
>>> edges[mask]
array([ 44.1463643 ,  49.94857672,  55.75078913])
>>> perc[mask[:-1]][:-1]
array([  0.,  20.])
"
Why is my for loop skipping an element in my list?,"while l:
    first = l.pop(0)
    for second in l:
        print(first, second)
"
Unexpected Behaviour of if statement inside loop over d.items(),"if any(k == 'mohammed' and v == '123456789' for k,v in d.items()):
    print(""Match"")
else:
    print(""No Match"")
"
String Validation after input or raw_input in Python,"while not any(c.isdigit() for c in inputted):
"
Get non-duplicate rows from numpy array,"# Consider each row as indexing tuple & get linear indexing value             
lid = np.ravel_multi_index(x.T,x.max(0)+1)

# Get unique indices and tagged indices for all elements
_,unq_idx,tag_idx = np.unique(lid,return_index=True,return_inverse=True)

# Use the tagged indices to count and look for count==1 and repeat like before
out = x[unq_idx[np.bincount(tag_idx)==1]]
"
Find which row/sublist a value is in,">>> [(x[0],y[0]) for x in enumerate(lst) for y in enumerate(x[1]) if y[1] == find]
[(2, 1), (4, 0)]
"
Is it an Array or a String?,"if isinstance(data, array.array):
    # ...
"
Mapping over values in a python dictionary,"my_dictionary = {k: f(v) for k, v in my_dictionary.items()}
"
Which dynamically created object called the function?,"lb = Listbox(self, yscrollcommand = lambda x, y, i=i: self.yscroll(i, x, y))
"
dictionary of lists to tuples,">>> ff = {'one': {'aaa': [1,2,3], 'bbb':[3,4,5] }, 'two': {'ccc' : [3,2,1] }}
>>> {k: [(nk,) + tuple(nv) for nk, nv in v.iteritems()] for k, v in ff.iteritems()}
{'two': [('ccc', 3, 2, 1)], 'one': [('aaa', 1, 2, 3), ('bbb', 3, 4, 5)]}
"
Count the multiple occurrences in a set,"tralala = dict()

for group, name in [('A', 'Bob'), ('B', 'Jane'), ('A', 'Bob')]:
    tralala.setdefault(group, dict()).setdefault(name, 0) 
    tralala[group][name] += 1

print tralala
"
how to check if two numbers in a list are the same in Python,"seen = set()
if num not in seen: add it
"
Removing repeated lines from text file,"result = []
previous_keyword = None
with open('A.pdb') as f:
    for line in f:
        # use these five lines if keyword is fixed at 3rd column, and columns are separated by whitespace
        try:
            keyword = line.split()[2]
        except:
            print('Line with unknown format: ' + line)
            continue

        # use this one if the keyword is fixed at position[13:16]
        #keyword = line[13:16]

        if keyword != previous_keyword:
            result.append(line)
            #result.append(line.rstrip())     use this one if you don't want trailing 'newline'
            previous_keyword = keyword

for x in result:
    print x
"
Reversing order of a list using only the len() function,"rev_list = original[::-len('1')]
"
How to count the number of times a digit appears at the beginning of each number in a file? (python),"DECIMAL_NUM='123456789'

def main():
    # Get file name from user
    file_name = input(""Enter a file name: "")

    # Open the file to read, and get a list of all lines:
    lines = open(file_name, 'r').readlines()

    one = 0
    two = 0
    three = 0
    four = 0
    five = 0
    six = 0
    seven = 0
    eight = 0
    nine = 0

    for line in lines:

        if line.strip(): # Check if line is not empty

            if line[0] == DECIMAL_NUM[0]:
                one += 1            
            elif line[0] == DECIMAL_NUM[1]:
                two += 1
            elif line[0] == DECIMAL_NUM[2]:
                three += 1
            elif line[0] == DECIMAL_NUM[3]:
                four += 1
            elif line[0] == DECIMAL_NUM[4]:
                five += 1
            elif line[0] == DECIMAL_NUM[5]:
                six += 1
            elif line[0] == DECIMAL_NUM[6]:
                seven += 1
            elif line[0] == DECIMAL_NUM[7]:
                eight += 1
            elif line[0] == DECIMAL_NUM[8]:
                nine += 1

    print(one)
    print(two)

main()
"
default argument in bound function,"from functools import partial

zebra_line = partial(""^FO{x},{y}^A0,N,{font}^FH^FD{text}^FS"".format, font=35)
"
What is the Python equivalent of static variables inside a function?,"def static_vars(**kwargs):
    def decorate(func):
        for k in kwargs:
            setattr(func, k, kwargs[k])
        return func
    return decorate

@static_vars(counter=0)
def foo():
    foo.counter += 1
    print ""Counter is %d"" % foo.counter
"
Python: decoding a string that consists of both unicode code points and unicode text,">>> import codecs
>>> codecs.decode('АБВ\\u003d\\""res', 'unicode_escape').encode('latin1').decode('utf8')
'АБВ=""res'
"
Disable/Remove argument in argparse,"In [61]: p1=argparse.ArgumentParser(parents=[p],add_help=False)
In [62]: p1._actions
Out[62]: 
[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, help='show this help message and exit', metavar=None),
 _StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)]
"
timing two algorithms (python) using timeit or time,"def time2algorithms(sound, number=10000):
    t = time.time()
    for i in range(number):
        normal(sound)
    print(time.time() - t)
    t = time.time()
    for i in range(number):
        onlyMax(sound)
    print(time.time() - t)
"
Python - most efficient way to generate combinations of large sets subject to criteria?,"def gen_portfolio(categories):
  n = len(categories)
  tarr = [0] * (n+1)
  parr = [0] * (n+1)
  karr = [0] * (n+1)
  marr = [ len(c) for c in categories ]
  i = 0
  while True:
    while True:
      if i < n:
        p = categories[i][ karr[i] ]
        t = tarr[i] + p
        if t <= 100:
          parr[i] = p
          tarr[i+1] = t
          i += 1
          karr[i] = 0
          continue
        else:
          break                   # backup
      else:
        parr[n] = 100 - tarr[n]   # set the Cash percentage
        yield parr[:]             # yield a copy of the array parr
        break
    # backup
    while True:
      if i > 0:
        i -= 1
        karr[i] += 1
        if karr[i] < marr[i]: break
      else:
        return  # done!

def portfolios2():
  cats = [ [ 10, 15, 20, 25, 30 ], [ 25, 30, 35, 40, 45, 50 ], [ 10, 15, 20 ], [ 20, 25, 30, 35, 40, 45, 50 ] ]
  return gen_portfolio(cats)
"
How to get parent tag while using XPaths in xml.etree.elementree with python 2.6.4,"stages = root.findall(""./ep_150/stage"")        

print '\n\nreviews for id=p4645\n'

for stage in stages:
    for rev in stage.findall('review'):
        if rev.attrib['id']=='p4645':
            print stage.attrib['name'], rev.attrib['name']
"
"Python, Numpy, and OLS","import numpy as np
import scikits.statsmodels.api as sm

a = np.array([[.001,.05,-.003,.014,.035,-.01,.032,-.0013,.0224,.005],[-.011,.012,.0013,.014,-.0015,.019,-.032,.013,-.04,-.05608],
 [.0021,.02,-.023,.0024,.025,-.081,.032,-.0513,.00014,-.00015],[.001,.02,-.003,.014,.035,-.001,.032,-.003,.0224,-.005],
 [.0021,-.002,-.023,.0024,.025,.01,.032,-.0513,.00014,-.00015],[-.0311,.012,.0013,.014,-.0015,.019,-.032,.013,-.014,-.008],
 [.001,.02,-.0203,.014,.035,-.001,.00032,-.0013,.0224,.05],[.0021,-.022,-.0213,.0024,.025,.081,.032,.05313,.00014,-.00015],
 [-.01331,.012,.0013,.014,.01015,.019,-.032,.013,-.014,-.012208],[.01021,-.022,-.023,.0024,.025,.081,.032,.0513,.00014,-.020015]])

y = a[:, 0]
x = a[:, 1:]
results = sm.OLS(y, x).fit()
print results.summary()
"
PyQt4 QStandardItem need setInputMask,"class MaskInputDelegate(QItemDelegate):

    def __init__(self, mask, parent=None):
        QItemDelegate.__init__(self, parent)
        self._mask = mask

    def createEditor(self, parent, option, index):
        editor = QLineEdit(parent)
        editor.setInputMask(self._mask)
        return editor
"
regex to match a variable and get the words inside the quotations from the matching line in python,">>> import re
>>> s = '''
... static public Register myReg1 = new Register(""D4_STAT_1"", 81);
... static public Register myReg2 = new Register(""D5_STAT_1"", 819);
... '''
>>> myvar = ""81""
>>> re.search('static public Register \w+ = new Register\(""(\w+)"", %s\);' % re.escape(str(myvar)), s).group(1)
'D4_STAT_1'
"
2d list to 3d list in python,"list1 = [2,3,1,3],[2,4,6,2]

list2 = [1,2,3,4],[4,3,2,1]

from copy import deepcopy

l3 = list(map(list, map(deepcopy,(list1, list2))))


print(l3[0])
print(l3[1])
[[2, 3, 1, 3], [2, 4, 6, 2]]
[[1, 2, 3, 4], [4, 3, 2, 1]]
"
String in a list doesn't accept assignment,"drive_usage.split()
"
Tokenize and label text,"
import re

def alpha(scanner,token):
    return token, 'a'

def numeric(scanner,token):
    return token,'rn'

def punctuation(scanner,token):
    return token, 'p'

def superscript(scanner,token):
    return token, 'sn'

def unknown(scanner,token):
    return token, 'uk'

scanner = re.Scanner([
    (r""[a-zA-Z]+"", alpha),
    (r""[.,:;!?]"", punctuation),
    (r""[0-9]+"", numeric),
    (r""[\xb9\u2070\xb3\xb2\u2075\u2074\u2077\u2076\u2079\u2078]"", superscript),
    (r""[\s\n]+"", None), # whitespace, newline
    (r""."", unknown)
    ])

tokens, _ = scanner.scan(""This is a little test? With 7,9 and 6. \xa0-\xaf"")
print tokens
"
Parsing HTML data from Wunderground,"
import urllib2
import cookielib

cookieJar = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookieJar))

setmetar = 'http://www.wunderground.com/cgi-bin/findweather/getForecast?setpref=SHOWMETAR&value=1'
request = urllib2.Request(setmetar)
response = opener.open(request)

url = ""http://www.wunderground.com/history/airport/KBUF/2011/1/1/DailyHistory.html?theprefset=SHOWMETAR&theprefvalue=1&format=1""
request = urllib2.Request(url)
page = opener.open(request)
# print(page.info())
dailyData = page.read()                            
print dailyData
"
Convert list of lists of string to list of lists of int,">>> import csv
>>>
>>> with open('file.txt') as f:
...     reader = csv.reader(f)
...     rows = [row for row in reader]
...
>>> rows
[['1', '2', '3', '4', '5', '6', '7'], ['7', '5', '3', '9', '8', '2', '4']]
"
Translating letters not in 7bit ASCII to ASCII (like ń to n and ą to a),"letters={'ł':'l', 'ą':'a', 'ń':'n', 'ć':'c', 'ó':'o', 'ę':'e', 'ś':'s', 'ź':'z', 'ż':'z'}
trans=str.maketrans(letters)
result=text.translate(trans)
"
Reading non well-formed XML file without quotation marks in attribute - python,"mytext=""""""<contextfile concordance=brown>
<context filename=br-a01 paras=yes>
<p pnum=1>
....
<wf cmd=done pos=VB lemma=say wnsn=1 lexsn=2:32:00::>said</wf>
<wf cmd=done pos=NN lemma=friday wnsn=1 lexsn=1:28:00::>Friday</wf>
<wf cmd=ignore pos=DT>an</wf>
....
....
<punc>``</punc>
<wf cmd=ignore pos=DT>no</wf>
<wf cmd=done pos=NN lemma=evidence wnsn=1 lexsn=1:09:00::>evidence</wf>
<punc>''</punc>
....
<wf cmd=done pos=NN lemma=irregularity wnsn=1 lexsn=1:04:00::>irregularities</wf>
<punc>.</punc>
</s>
</p>
</context>
</contextfile>""""""

from lxml import html
parsed = html.fromstring(mytext)
for x in parsed.getiterator(): print x.tag, x.attrib, x.text, x.tail
"
How can I return the shortest word within the longest line?,"def shortest_word_in_longest_line(filename):
    with open(filename) as file:
        longest_line = max(file, key=len)  # file is an iterator over lines
    return min(longest_line.split(), key=len)  # whitespace-separated words
"
Optional yield or return in python3. How to?,"def f_wrapper(option=True):
    gen = f()
    if option:
        return gen    # return the generator unchanged
    return list(gen)  # return all values of the generator as a list
"
"How to put the wx.grid into a GridBagSizer, with scroll bar","import wx
import wx.grid


class MainFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, ""Manager"")
        sizer = wx.BoxSizer(wx.VERTICAL)

        overall = wx.grid.Grid(self)
        overall.CreateGrid(5,2)
        sizer.Add(overall, 0, flag=wx.EXPAND)

        self.SetSizer(sizer)
        self.Fit()

app = wx.App(False)
MainFrame().Show()

app.MainLoop()
"
How to divide string like this into items in Python,"[x.rstrip(',') for x in shlex.split(s)]
Out[20]: ['format', 'db', 'this is string a', '0', '0Ah']
"
Python Pipe Character for calling functions,">>> import re
>>> re.VERBOSE
64
>>> re.IGNORECASE
2
>>> re.VERBOSE | re.IGNORECASE
66
"
Why am I getting TypeError: 'module' object is not callable in python?,"import datetime
import time
from datetime import datetime as dt
"
Converting Sage symbolic Expression to string,"sage: y = 5*x + 7^x + 3*x^2
sage: y
7^x + 3*x^2 + 5*x
sage: type(y)
<type 'sage.symbolic.expression.Expression'>
"
Python searching for number of IPs in Apache log file,"def ips_in_log(log_name):
   with open(log_name, 'r') as f:
      log = f.read()
   ipcount = len(re.findall(r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}',log))
   print(ipcount)
"
Add values for different years,">>> df.groupby(""F"", as_index=False)[""Z""].sum()
    F    Z
0  b1  300
1  b2   50
2  b3  200

[3 rows x 2 columns]
"
grouping by rows in python,"input = [['SE01_inf', 'name', [], 'NA', []],\
         ['SE01_loc', 'NA', 'loc', 'NA', []],\
         ['SE01_id', 'NA', [], '123', []],\
         ['SE01_1_inf', 'name1', [], 'NA', []],\
         ['SE01_1_loc', 'NA', 'loc', 'NA', []]]

output = {}
for row in input:
    id = row[0][:row[0].rfind('_')]
    if id not in output:
        output[id] = [id] + row[1:]
    else:
        output[id] = [new if old in ('NA', []) else old for new, old in zip(row, output[id])]

print output.values()
"
Generic function that accept a table and column name and returns all the primary key values that matches a filter value given,"def get_row(table, col_name, val, default=None):
    col = getattr(table.c, col_name)
    row = table.select(col == S).execute().fetchone()
    if row == None:
        print ""Warning: No row found for %s in %s; using %s"" % (val, table, default)
        row = table.select(col == default).execute().fetchone()       
    return row[0]
"
Python Pandas: How to replace a characters in a column of a dataframe?,"df['range'].replace(',', '-', inplace=True)"
loop for to print a dictionary of dictionaries,">>> D = {'d1': {'a':'1'}, 'd2': {'b':'2'}, 'd3': {'c':'3'}}
>>> for k, d in D.items():
    print k, d

d2 {'b': '2'}
d3 {'c': '3'}
d1 {'a': '1'}
"
Calculating change in percentage between two numbers (Python),"print [100 * (b - a) / a for a, b in zip(prices[::1], prices[1::1])]
"
Python: Pandas DataFrame for tuples,"import numpy as np
import pandas as pd
np.random.seed(2016)

row=['a','b','c']
col=['A','B','C','D']

prevstate = pd.DataFrame([[i+j for j in col] for i in row], index=row, columns=col)
prob = pd.DataFrame(np.random.uniform(0, 1, size=(len(row), len(col))).round(4), 
                    index=row, columns=col)
print(prevstate)
#     A   B   C   D
# a  aA  aB  aC  aD
# b  bA  bB  bC  bD
# c  cA  cB  cC  cD

print(prob)
#         A       B       C       D
# a  0.8967  0.7302  0.7833  0.7417
# b  0.4621  0.6426  0.2249  0.7085
# c  0.7471  0.6251  0.5800  0.2426
"
Is there a nice way splitting a (potentially) long string without splitting in words in Python?,"print '\n'.join(textwrap.wrap(s, 80))
"
What is the pythonic way to detect the last element in a python 'for' loop?,"first = True
for data in data_list:
    if first:
        first = False
    else:
        between_items()

    item()
"
Splitting strings at multiple delimiters in python,"with open(""text.txt"") as f:
    out = []
    for line in f:
        temp = """"
        for ch in line:
            if ch.isalnum():
                temp += ch
            else:
                temp += "" {} "".format(ch)
        out.extend(temp.split())
"
Removing elements from an array that are in another array,"A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"
Merging part of tuples in Python,">>> [(k, v.items()) for k,v in d.items()]
[(('a', 'b', 'c'), [(1, [2, 1]), (2, [3, 4]), (3, [4, 6])]),
 (('a', 'b', 'd'), [(1, [3, 7]), (2, [6, 8]), (3, [7, 9])])]
"
create a Data frame as a function of row index value and column name?,"import pandas as pd
rows = ['1','2','3']
cols = ['X','Y']

df = pd.DataFrame(([col+row for col in cols] for row in rows),
                  index=rows, columns=cols)
"
"How can I implement ""weak"" edges with NetworkX?","def construct_task_graph(deps, tasks):
    required = set(tasks)
    strong_subgraph = extract_strong_subgraph(deps)
    for task in tasks:
        ancestors = nx.ancestors(strong_subgraph, task)
        required.update(ancestors)

    return nx.subgraph(deps, required)

def extract_strong_subgraph(deps):
    strong_deps = nx.DiGraph()
    strong_deps.add_nodes_from(deps)

    strong_edges = (e for e in deps.edges_iter(data=True) if e[2][""is_strong""])
    strong_deps.add_edges_from(strong_edges)

    return strong_deps
"
How to decorate all methods in a class? Can I just decorate the class?,"def decorator(func):

    def wrapped(*args):
        print(""TEST"")
        return func(*args)

    return wrapped


def decorate_object(p_object, decorator):
    for method_name in dir(p_object):
        if method_name.startswith(""dec_""):
            attr = getattr(p_object, method_name)
            wrapped = decorator(attr)
            setattr(p_object, method_name, wrapped)

decorate_object(Xobject, decorator)

x = Xobject()

x.dec_me_1()
x.dec_me_2()
"
writing file & displaying result in idle,"class TeeFile(object):
    def __init__(self, *files):
        self.files = files
    def write(self, data):
        for f in self.files:
            f.write(data)
    def flush(self):
        for f in self.files:
            f.flush()
"
How to unpack binary formatted dates in python?,">>> import struct
>>> from datetime import date
>>> date(*struct.unpack('>HBB', ""\x07\xdb\x0c\x01""))
datetime.date(2011, 12, 1)
"
Scrapy recursive link crawler,"import BeautifulSoup
import urllib2
import itertools
import random


class Crawler(object):
    """"""docstring for Crawler""""""

    def __init__(self):

        self.soup = None                                        # Beautiful Soup object
        self.current_page   = ""http://www.python.org/""          # Current page's address
        self.links          = set()                             # Queue with every links fetched
        self.visited_links  = set()

        self.counter = 0 # Simple counter for debug purpose

    def open(self):

        # Open url
        print self.counter , "":"", self.current_page
        res = urllib2.urlopen(self.current_page)
        html_code = res.read()
        self.visited_links.add(self.current_page) 

        # Fetch every links
        self.soup = BeautifulSoup.BeautifulSoup(html_code)

        page_links = []
        try :
            page_links = itertools.ifilter(  # Only deal with absolute links 
                                            lambda href: 'http://' in href,
                                                ( a.get('href') for a in self.soup.findAll('a') )  )
        except Exception: # Magnificent exception handling
            pass



        # Update links 
        self.links = self.links.union( set(page_links) ) 



        # Choose a random url from non-visited set
        self.current_page = random.sample( self.links.difference(self.visited_links),1)[0]
        self.counter+=1


    def run(self):

        # Crawl 3 webpages (or stop if all url has been fetched)
        while len(self.visited_links) < 3 or (self.visited_links == self.links):
            self.open()

        for link in self.links:
            print link



if __name__ == '__main__':

    C = Crawler()
    C.run()
"
How to use SHGetFileInfo with SHGFI_PIDL in python,"if __name__ == '__main__':
    import os    
    path = os.path.expanduser(r'~\Desktop\desktop.ini')
    pidl = _shell.SHParseDisplayName(path, 0)[0]
    assert isinstance(pidl, list)

    flags = (shellcon.SHGFI_PIDL |
             shellcon.SHGFI_ICON |
             shellcon.SHGFI_DISPLAYNAME |
             shellcon.SHGFI_TYPENAME |
             shellcon.SHGFI_ATTRIBUTES |
             shellcon.SHGFI_SYSICONINDEX)

    hImageList, finfo = SHGetFileInfo(pidl, 0, flags)

    print('hImageList:', hImageList)
    for name, typ in finfo._fields_:
        print(name, ': ', ascii(getattr(finfo, name)), sep='')

    if finfo.hIcon:
        _user32.DestroyIcon(finfo.hIcon)
"
sendmail with HTML message,"msg.attach(MIMEText(text, 'html'))
"
What is the reliable method to find most time consuming part of the code?,"from profilestats import profile

@profile
def my_function(args, etc):
    pass
"
Python converts long number to float I believe ( example: x.xxxe+yy),"table = texttable.Texttable()
table.set_cols_dtype(['i',   # integer
                      'a' ]) # automatic
table.add_rows([['int', 'auto'], [330090997180665856, 330090997180665856], [1, 1]])
print table.draw()
"
Find out if file pointer is at EOF in Python,"import os

R.f.seek(0, os.SEEK_END)
n = R.f.tell()
R.f.seek(0)

while True:
    if R.f.tell() != n:
        line = R.f.readline()
        print(line)
        print(""Not at EOF"")
    else:
         print(""At EOF"")
         break
"
Copying files recursively with skipping some directories in Python?,"import os

def filterls(src, filter_func):
    for root, dirs, files in os.walk(src):
        for f in files:
            if filter_func(f):
                path = os.path.join(root, f)
                yield path[len(src)+1:]
"
Access np.array in ctypes struct,"class MyDualArrayStruct(C.Structure):
    _fields_ = [(""c_x"", C.POINTER(C.c_double)),
                (""c_y"", C.POINTER(C.c_int))]

    def __init__(self,*args,**kwargs):
        super(MyDualArrayStruct,self).__init__(*args,**kwargs)
        self.np_x = np.array([1,2,3,4,5],dtype=""float64"")
        self.c_x = np.ctypeslib.as_ctypes(self.np_x)
        self.np_y = np.array([5,4,3,2,1],dtype=""int32"")
        self.c_y = np.ctypeslib.as_ctypes(self.np_y)

test = MyDualArrayStruct()

print test.np_x
print test.c_x[:5]

# Note that here c_x and np_x both contain the same data. Thus modifying one of them
# (inplace) modifies the other. You can use this to do easy inplace modification of 
# numpy arrays in C functions.
# This implies that test.np_x.sum() is also the sum of test.c_x
test.np_x[:] = 1

print test.np_x
print test.c_x[:5]
"
looping and transformation in pandas,"
import numpy as np
import pandas as pd
def tostr(series):
    return series.astype(str)

dictionary = {'Year': [1985, 1985, 1986, 1986, 1987, 1987], 'Wteam' :[9, 10, 11, 4, 5, 6], 'lteam': [ 1, 2, 3, 12, 13, 14] }
pdf = pd.DataFrame(dictionary)
pdf['result'] = np.where(pdf['Wteam'] > pdf['lteam'], 0, 1)
pdf['min'] = pdf[['Wteam','lteam']].min(axis=1)
pdf['max'] = pdf[['Wteam','lteam']].max(axis=1)

pdf['Season_value'] = tostr(pdf['Year'])+'_'+tostr(pdf['min'])+'_'+tostr(pdf['max'])

print(pdf[['Season_value', 'result']])
"
"How to split but ignore separators in quoted strings, in python?","import re
data = """"""part 1;""this is ; part 2;"";'this is ; part 3';part 4;this ""is ; part"" 5""""""
PATTERN = re.compile(r'''((?:[^;""']|""[^""]*""|'[^']*')+)''')
print PATTERN.split(data)[1::2]
"
Swap two lists in python,"list1 = list2
list2 = [0]*len(list2)
"
What batch_size and pre_dispatch in joblib exactly mean,"from sklearn.externals.joblib import Parallel, delayed
from time import sleep, time

def solve_one_task(task):
    # Solves one task at a time
    print(""%d. Task #%d is being solved""%(time(), task))
    sleep(5)
    return task

def task_gen(max_task):
    current_task = 0
    while current_task < max_task:
        print(""%d. Task #%d was dispatched""%(time(), current_task))
        yield current_task
        current_task += 1

Parallel(n_jobs=2, backend = 'multiprocessing', batch_size=1, pre_dispatch=3)(
        delayed(solve_one_task)(task) for task in task_gen(10))
"
Checking a String's format,">>> import re
>>> abb_pattern = re.compile(r'^ABB+$')
>>> def has_abb(string):
...     return abb_pattern.match(string) is not None
... 
>>> has_abb('ABBBBBBB')
True
>>> has_abb('ABBBBA')
False
>>> has_abb('ABB')
True
>>> has_abb('BABBB')
False
"
Iterator using itertools is skipping a line,"class RewindableFile(file):
    def __init__(self, *args, **kwargs):
        nb_backup = kwargs.pop('nb_backup', 1)
        super(RewindableFile, self).__init__(*args, **kwargs)
        self._nb_backup = nb_backup
        self._backups = []
        self._time_anchor = 0

    def next(self):
        if self._time_anchor >= 0:
            item = super(RewindableFile, self).next()
            self._backup(item)
            return item
        else:
            item = self._forward()
            return item

    def rewind(self):
        self._time_anchor = self._time_anchor - 1
        time_bound = min(self._nb_backup, len(self._backups))
        if self._time_anchor < -time_bound:
            raise Exception('You have gone too far in history...')

    def __iter__(self):
        return self

    def _backup(self, row):
        self._backups.append(row)
        extra_items = len(self._backups) - self._nb_backup
        if extra_items > 0:
            del self._backups[0:extra_items]

    def _forward(self):
        item = self._backups[self._time_anchor]
        self._time_anchor = self._time_anchor + 1
        return item
"
How to plot with different linestyles in pylab,"import numpy as np
a=np.array([1,2,3,4,5,6,7,8,9])
b=np.array([-1,-2,-3,-4,-5,1,2,-3,-4])

x = np.linspace(a.min(), a.max(), 1000)
y = np.interp(x, a, b)

m = y <= 0
plot(np.ma.array(x, mask=m), np.ma.array(y, mask=m), 'b-', lw=2)
m = y > 0
plot(np.ma.array(x, mask=m), np.ma.array(y, mask=m), 'r--', lw=2)
"
Changing the color of a QProgressbar(),"from PyQt4 import QtGui, QtCore

DEFAULT_STYLE = """"""
QProgressBar{
    border: 2px solid grey;
    border-radius: 5px;
    text-align: center
}

QProgressBar::chunk {
    background-color: lightblue;
    width: 10px;
    margin: 1px;
}
""""""

COMPLETED_STYLE = """"""
QProgressBar{
    border: 2px solid grey;
    border-radius: 5px;
    text-align: center
}

QProgressBar::chunk {
    background-color: red;
    width: 10px;
    margin: 1px;
}
""""""

class MyProgressBar(QtGui.QProgressBar):
    def __init__(self, parent = None):
        QtGui.QProgressBar.__init__(self, parent)
        self.setStyleSheet(DEFAULT_STYLE)

    def setValue(self, value):
        QtGui.QProgressBar.setValue(self, value)

        if value == self.maximum():
            self.setStyleSheet(COMPLETED_STYLE)
"
What does '*** Oldest frame' mean in ipdb?,"
d(own)
Move the current frame one level down in the stack trace
(to a newer frame).
w(here)
Print a stack trace, with the most recent frame at the bottom.
An arrow indicates the ""current frame"", which determines the
context of most commands.  'bt' is an alias for this command.
"
Finding all tags and attributes in a HTML,"from lxml.html import fromstring

root = fromstring(data)
print int(root.xpath(""count(//*)"")) + int(root.xpath(""count(//@*)""))
"
Abuse yield to avoid condition in loop,"#!/usr/bin/python

import functools
import timeit

class Revision:
  # a revision is something like a textfile.
  # the search() method will search the textfile
  # and return the lines which match the given pattern.
  # for demonstration purposes this class is simplified
  # to return predefined results
  def __init__(self, results):
    self.results = results
  def search(self, pattern):
    return self.results

class AbstractSearcher:
  def __init__(self, revisions):
    self.revisions = revisions
  def search_for_first_occurence(self, pattern):
    keys = sorted(self.revisions.iterkeys())
    return self.collect_one_occurence(keys, pattern)
  def search_for_last_occurence(self, pattern):
    keys = sorted(self.revisions.iterkeys(), reverse = True)
    return self.collect_one_occurence(keys, pattern)
  def search_for_any_occurence(self, pattern):
    keys = self.revisions.iterkeys()
    return self.collect_one_occurence(keys, pattern)
  def search_for_all_occurences(self, pattern):
    keys = self.revisions.iterkeys()
    return self.collect_all_occurences(keys, pattern)

class SearcherYield(AbstractSearcher):

  def search_revisions(self, keys, pattern):
    # create generator which yields the results one by one
    for key in keys:
      rev = self.revisions[key]
      result = rev.search(pattern)
      if result:
        yield result

  def collect_one_occurence(self, keys, pattern):
    # take the first result and then abandon the generator
    for result in self.search_revisions(keys, pattern):
      return result
    return []

  def collect_all_occurences(self, keys, pattern):
    # collect all results from generator
    results = []
    for result in self.search_revisions(keys, pattern):
      results.extend(result)
    return results

class SearcherCondition(AbstractSearcher):

  def search_revisions(self, keys, pattern, just_one):
    # collect either all results from all revisions
    # or break the loop after first result found
    results = []
    for key in keys:
      rev = self.revisions[key]
      result = rev.search(pattern)
      if result:
        results.extend(result)
        if just_one:
          break
    return results

  def collect_one_occurence(self, keys, pattern):
    return self.search_revisions(keys, pattern, just_one = True)

  def collect_all_occurences(self, keys, pattern):
    return self.search_revisions(keys, pattern, just_one = False)

def benchmark(revcount, timeitcount):

  lastrev = {}
  for i in range(revcount):
    lastrev[i] = Revision([])
  lastrev[revcount] = Revision([1])

  allrevs = {}
  for i in range(revcount):
    allrevs[i] = Revision([1])

  last_yield = SearcherYield(lastrev)
  last_cond = SearcherCondition(lastrev)
  all_yield = SearcherYield(allrevs)
  all_cond = SearcherCondition(allrevs)

  lfy = functools.partial(last_yield.search_for_first_occurence, 'foo')
  lfc = functools.partial(last_cond.search_for_first_occurence, 'foo')
  lay = functools.partial(last_yield.search_for_all_occurences, 'foo')
  lac = functools.partial(last_cond.search_for_all_occurences, 'foo')
  aay = functools.partial(all_yield.search_for_all_occurences, 'foo')
  aac = functools.partial(all_cond.search_for_all_occurences, 'foo')

  print 'benchmark with revcount: %d timeitcount: %d' % (revcount, timeitcount)
  print 'last, first, yield:', timeit.timeit(lfy, number = timeitcount)
  print 'last, first,  cond:', timeit.timeit(lfc, number = timeitcount)
  print 'last,   all, yield:', timeit.timeit(lay, number = timeitcount)
  print 'last,   all,  cond:', timeit.timeit(lac, number = timeitcount)
  print ' all,   all, yield:', timeit.timeit(aay, number = timeitcount)
  print ' all,   all,  cond:', timeit.timeit(aac, number = timeitcount)

def main():
  timeitcount = 1000
  benchmark(1000, timeitcount)
  benchmark(2000, timeitcount)
  benchmark(10000, timeitcount)

if __name__ == '__main__':
  main()
"
communication with 0mq,"def send(data):
    context = zmq.Context()
    socket = context.socket(zmq.PUB)
    socket.connect(""tcp://localhost:5000"")
    while data:
        time.sleep(1)
        socket.send('Sender: %i' % data)
        data -= 1
    socket.close()
"
python reading in multi-column tsv file with row numbers,"import csv
with open(""tsv.tsv"") as tsvfile:
    tsvreader = csv.reader(tsvfile, delimiter=""\t"")
    for line in tsvreader:
        print line[1:]
"
ZSH 5.05 string split on null,"# Determine the shell-specific option character for `read`;
# [-]A for ksh and zsh, [-]a for bash:
readIntoArrayOptChar='A' && [[ -n $BASH_VERSION ]] && readIntoArrayOptChar='a'

# Read the input string into array `a`, splitting into elements by ':'
IFS=: read -r -$readIntoArrayOptChar a <<<""$string""

# Determine the shell-specific start and end indices for printing
# the array elements in a loop:
# bash and ksh are 0-based, zsh is 1-based (by default).
startNdx=0 endNdx=${#a[@]}
[[ -n $ZSH_VERSION ]] && (( ++startNdx, ++endNdx ))

# Print array elements individually.
# Note how the element references are enclosed in {...} for cross-shell 
# compatibility.
for (( i = startNdx; i < endNdx; i++ )); do
  echo ""el. $i: [""${a[i]}""]"" # -> e.g., in zsh, 1st iteration: 'el. 1: [1]'
done
"
gnuplot linecolor variable in matplotlib?,">>> from matplotlib import pyplot as plt
>>> from matplotlib import cm
>>> y = [3,7,5,6,4,8,3,4,5,2,9]
>>> z = [0.3,0.4,0.5,0.6,0.7,0.2,0.3,0.4,0.5,0.8,0.9]
>>> for x, (v, c) in enumerate(zip(y,z)):
...      plt.plot(x,v,marker='o', color=cm.hot(c))
...      
[<matplotlib.lines.Line2D object at 0x0000000008C42518>]
[<matplotlib.lines.Line2D object at 0x0000000008C426D8>]
[<matplotlib.lines.Line2D object at 0x0000000008C42B38>]
[<matplotlib.lines.Line2D object at 0x0000000008C452B0>]
[<matplotlib.lines.Line2D object at 0x0000000008C45438>]
[<matplotlib.lines.Line2D object at 0x0000000008C45898>]
[<matplotlib.lines.Line2D object at 0x0000000008C45CF8>]
[<matplotlib.lines.Line2D object at 0x0000000008C48198>]
[<matplotlib.lines.Line2D object at 0x0000000008C485F8>]
[<matplotlib.lines.Line2D object at 0x0000000008C48A58>]
[<matplotlib.lines.Line2D object at 0x0000000008C4B1D0>]
>>> plt.show()
>>> 
"
Problems with handling files in Python,"with open('/home/path/file.csv', 'r+') as csvfile:
    with open('/home/path/file.enc', 'w') as csvencryptedfile:
        for row in csv.reader(csvfile, delimiter='\t'):
            y = []
            for i in range(0, len(row)):
                x = encrypt(row[i], password)
                y.append(x)
            csvencryptedfile.write('\t'.join(y))
            csvencryptedfile.write('\n')
"
Comparing 40 million lines in a file with 6 million list items in Python,"usernames = set(os.listdir('/path/to/directory/with/usernames/'))
from collections import Counter

f = open('/path/to/6 million')
name_counts = Counter(line.split()[1] for line in f if line in usenames)
print name_counts.most_common()
"
or in if statement - one condition of the two met,"if not request.path.startswith(s) and not request.path.startswith(a):
"
Permutating with repetition and rules between possible values,"def valid_combination(combination):
    # Do whatever test you want here
    pass

def product_with_validation(validation_func, *element_list):
    for combination in itertools.product(*element_list):
        if validation_func(combination):
            yield combination

all_combinations = list(product_with_combo(product_with_validation, [1,2,3],[1,2,3])
"
Recursive numeric triangle in python,"In [1]: def tri(size, row = 0, col = 0):
   ...:     if row < size:
   ...:         num = row + col + 1
   ...:         if num == size + 1:
   ...:             print '\n',
   ...:             tri(size, row + 1, 0)
   ...:         if num <= size:
   ...:             print num, '',
   ...:             tri(size, row, col + 1)
   ...:

In [2]: tri(6)
1  2  3  4  5  6
2  3  4  5  6
3  4  5  6
4  5  6
5  6
6
"
How to create a Dictionary in Python with 2 string keys to access an integer?,"from collections import defaultdict
dic2 = defaultdict(dict)
dic2['New York']['Chicago'] = 25
"
python pandas dataframe to dictionary,df.set_index('id').to_dict()
Python type long vs C 'long long',"from ctypes import c_longlong

class ll(int):
    def __new__(cls, n):
        return int.__new__(cls, c_longlong(n).value)

    def __add__(self, other):
        return ll(super().__add__(other))

    def __radd__(self, other):
        return ll(other.__add__(self))

    def __sub__(self, other):
        return ll(super().__sub__(other))

    def __rsub__(self, other):
        return ll(other.__sub__(self))

    ...
"
How to cut out matched string,"text = ""header1svdijfooter1ccsdheader2cdijhfooter2""
headers = [""header1"", ""header2""]
footers = [""footer1"", ""footer2""]

import re

matches = [re.search(r""{}\w+?{}"".format(header,footer),text).group() for header,footer in zip(headers,footers) if re.search(r""{}\w+?{}"".format(header,footer),text)]
"
"How to convert hex string ""\x89PNG"" to plain text in python",">>> print s.decode('string_escape')
pf=l&hl=en&geocode=&q<
"
difficulty matching single letter programming languages with regex,"re.compile(r'(?<!objective-)\bc\b',re.I)
"
How to put statement before for-loop in python,"for i in range(10):
    print i
"
Inserting integer data that has commas,"        item.get('name', ''),
        re.sub(r'[,$]', """", item.get('salary', 0)),
        item.get('weight', 0),
"
How to manually position one subplot graph in matplotlib.pyplot,"import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt

gs = gridspec.GridSpec(4, 4)
m = 0

for i in range(0, 4, 2):
  for j in range(0, 4, 2):
    if m < 3:
      ax = plt.subplot(gs[i:i+2, j:j+2])
      ax.plot(range(0, 10), range(0, 10))
      m+=1
    else:
      ax = plt.subplot(gs[i:i+2, 1:3])
      ax.plot(range(0, 10), range(0, 10))

plt.show()
"
Python nested while-loop doesn't increment as expected,"for xx in range(0, width, block_size):
    for yy in range(0, height, block_size):
        print (""---"", xx, yy)
        offsetX = min(width, xx + block_size_half)
        offsetY = min(height, yy + block_size_half)

        r, g, b = matrix[xx + offsetX][yy + offsetY]

        for x in range(xx, min(xx + block_size, width)):
            for y in range(yy, min(yy + block_size, height)):
                print (x, y)
                matrix[x][y] = (r, g, b)
"
How to assign a string from a list in python,">>> data= ['hello','world','# ignorethis','xlable: somethingx','ylable: somethingy']
>>> x, y, z = [item.split(':')[-1].strip() for item in data 
                                                  if not item.startswith('#')][:3]
>>> x
'hello'
>>> y
'world'
>>> z
'somethingx'
"
matching list structure other than map() in python,"def process_list(_list):
    return map( lambda x: process_list(x) if type(x)==list else x+1, _list )
"
Parsing JS with Beautiful soup,"import re
regex =  re.compile('\n^(.*?):(.*?)$|,', re.MULTILINE) #compile regex
js_text = re.findall(regex, js_text) #  find first item @ new line to : and 2nd item @ from : to the end of the line or , 
js_text = [jt.strip() for jt in js_text] #  to strip away all of the extra white space.
"
Updating a value in a dictionary inside a dictionary,"for contact_dict in list_of_dicts:
    for phone_dict in contact_dict['phoneNumbers']:
        phone_dict['phone'] = phone_dict['phone'].replace('-', '')
"
Method entry points in a class variable,"class foo(object):
    methods = { 1: 'a', 2: 'b' }
    def go(self, n):
        getattr(self, self.methods[n])()
"
Best way to match a large list against strings in python,"master_list = [
    'There are many types of intrusion detection devices in production today.',
    'The CTO approved a rewrite of the system',
    'The CTO is about to approve a complete rewrite of the system',
    'The CTO approved a rewriting',
    'Breaching of Firewalls'
]

terms = [
    'Intrusion Detection',
    'Approved rewrite',
    'Firewall'
]

stemmer = PorterStemmer()

# for each term, split it into words (could be just one word) and stem each word
stemmed_terms = ((stemmer.stem(word) for word in s.split()) for s in terms)

# add 'match anything after it' expression to each of the stemmed words
# join result into a pattern string
regex_patterns = [''.join(stem + '.*' for stem in term) for term in stemmed_terms]
print(regex_patterns)
print('')

for sentence in master_list:
    match_obs = (re.search(pattern, sentence, flags=re.IGNORECASE) for pattern in regex_patterns)
    matches = [m.group(0) for m in match_obs if m]
    print(matches)
"
How do I get the raw representation of a string in Python?,"""r'{}'"".format(regex.pattern)
"
Xpath() method not returning results using Scrapy,"list_of_goals = row.xpath('//span[@title=""Goal""]')

if list_of_goals:        
    list = str(list_of_goals)
    print remove_tags(list).encode('utf-8') + ""GOAL"" # <-- string
"
python M2Crypto HMAC SHA1,"from M2Crypto.EVP import HMAC
import base64

hmac = HMAC(session_id,'sha1')
hmac.update(decypted_challenge)

auth_response = base64.encodestring(hmac.digest()) #Base64 format
"
Pandas: Convert DataFrame Column Values Into New Dataframe Indices and Columns,"In [5]: df.pivot(index='a', columns='b', values='c').fillna(0)
Out[5]:
b   1   2   3
a
0  10   0   0
1   0  10   0
2   0  20   0
3   0   0  30
4  40   0  10
"
check if a directory exists and create it if necessary,distutils.dir_util.mkpath(path)
Python 2.7 exporting data in a .csv,"with open('spectral_data.csv', 'ab') as f:
    writer = csv.DictWriter(f, ('name', 'data'))
    writer.writerow(data[-1])
"
How to use regular expressions on a .html file in python?,"text = re.sub(""jnnorm"", ""jnnorm MYTAGHERE"", text)
"
How to connect the list to get ip address with port?,">>> [':'.join(group) for group in zip(*[iter(lst)]*2)]
['221.180.147.30:86', '61.155.169.11:808']
"
Elements of a list,"z = [2,3,4,5]
with open(""output.txt"", 'w') as my_file:
    my_file.write('a: %s' % ', '.join([str(i) for i in z])) 
"
optparse - why the last char of the option can be ignored? With `--file` it behaves same as `--fil`,"def _match_abbrev(s, wordmap):
    """"""_match_abbrev(s : string, wordmap : {string : Option}) -> string

    Return the string key in 'wordmap' for which 's' is an unambiguous
    abbreviation.  If 's' is found to be ambiguous or doesn't match any of
    'words', raise BadOptionError.
    """"""
    # Is there an exact match?
    if s in wordmap:
        return s
    else:
        # Isolate all words with s as a prefix.
        possibilities = [word for word in wordmap.keys()
                         if word.startswith(s)]
        # No exact match, so there had better be just one possibility.
        if len(possibilities) == 1:
            return possibilities[0]
        elif not possibilities:
            raise BadOptionError(s)
        else:
            # More than one possible completion: ambiguous prefix.
            possibilities.sort()
            raise AmbiguousOptionError(s, possibilities)
"
Sort from a certain position in a String,">>> inputlist = ['foo: a message', 'bar: d message', 'bar: b message', 'foo: c message']
>>> sorted(inputlist, key=lambda s: s[5:])
['foo: a message', 'bar: b message', 'foo: c message', 'bar: d message']
"
Python arp sniffing raw socket no reply packets,"import socket
import struct
import binascii

rawSocket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(0x0003))

while True:

    packet = rawSocket.recvfrom(2048)

    ethernet_header = packet[0][0:14]
    ethernet_detailed = struct.unpack(""!6s6s2s"", ethernet_header)

    arp_header = packet[0][14:42]
    arp_detailed = struct.unpack(""2s2s1s1s2s6s4s6s4s"", arp_header)

    # skip non-ARP packets
    ethertype = ethernet_detailed[2]
    if ethertype != '\x08\x06':
        continue

    print ""****************_ETHERNET_FRAME_****************""
    print ""Dest MAC:        "", binascii.hexlify(ethernet_detailed[0])
    print ""Source MAC:      "", binascii.hexlify(ethernet_detailed[1])
    print ""Type:            "", binascii.hexlify(ethertype)
    print ""************************************************""
    print ""******************_ARP_HEADER_******************""
    print ""Hardware type:   "", binascii.hexlify(arp_detailed[0])
    print ""Protocol type:   "", binascii.hexlify(arp_detailed[1])
    print ""Hardware size:   "", binascii.hexlify(arp_detailed[2])
    print ""Protocol size:   "", binascii.hexlify(arp_detailed[3])
    print ""Opcode:          "", binascii.hexlify(arp_detailed[4])
    print ""Source MAC:      "", binascii.hexlify(arp_detailed[5])
    print ""Source IP:       "", socket.inet_ntoa(arp_detailed[6])
    print ""Dest MAC:        "", binascii.hexlify(arp_detailed[7])
    print ""Dest IP:         "", socket.inet_ntoa(arp_detailed[8])
    print ""*************************************************\n""
"
"creating a list of tuples (x, y) from a string","data = ""POLYGON ((159.5 534.5, 157.5 535.5, 157.5 554.5, 155.5 557.5))""
print [tuple(map(float, x.split())) for x in data.replace('POLYGON ((', '').replace('))', '').strip().split(', ')]
"
get current time,datetime.datetime.time(datetime.datetime.now())
"Finding all sequences of A, B such that have a specified number of each element","import itertools

def insert_letters(sequence, rest):
    if not rest:
        yield sequence
    else:
        letter, number = rest[0]
        rest = rest[1:]
        possible_locations = range(len(sequence)+1)
        for locations in itertools.combinations_with_replacement(possible_locations, number):
            result = []
            count = 0
            temp_sequence = sequence
            for location in locations:
                while location > count:
                    result.append(temp_sequence[0])
                    temp_sequence = temp_sequence[1:]
                    count += 1
                result.append(letter)
            if temp_sequence:
                result.append(temp_sequence)
            for item in insert_letters(''.join(result), rest):
                yield item

def generate_sequences(*args):
    '''
    arguments : squence of (letter, number) tuples
    '''
    (letter, number), rest = args[0], args[1:]
    for sequence in insert_letters(letter*number, rest):
        yield sequence
"
What is this dictionary assignment doing?,"sentimentDict = {}

def loadSentiment():
    with open('Sentiment/positive_words.txt', 'r') as f:
        sentimentDict['positive'] = dict.fromkeys((line.strip() for line in f), 1)

    with open('Sentiment/negative_words.txt', 'r') as f:
        sentimentDict['negative'] = dict.fromkeys((line.strip() for line in f), 1)
"
Dictionary whose key is independent on the order of elements it contains,">>> dict.fromkeys(itertools.combinations(items, 2), 0)
{(1, 2): 0, (2, 4): 0, (1, 4): 0}

>>> dict.fromkeys(itertools.combinations(items, 3), 0)
{(1, 2, 4): 0}
"
Iterating over a large Django queryset while the data is changing elsewhere,"from django.db.models import F
Book.objects.all().update(activity=F('views')*4)
"
Can I change function parameters when passing them as variables?,">>> import functools
def func(x, y=1):
    print x, y
...     
>>> new_func = functools.partial(func, y=20)
>>> new_func(100)
100 20
"
Detrending a time-series of a multi-dimensional array without the for loops,"# -*- coding: utf-8 -*-
""""""Detrending multivariate array

Created on Fri Dec 02 15:08:42 2011

Author: Josef Perktold

http://stackoverflow.com/questions/8355197/detrending-a-time-series-of-a-multi-dimensional-array-without-the-for-loops

I should also add the multivariate version to statsmodels

""""""

import numpy as np

import matplotlib.pyplot as plt


def detrend_common(y, order=1):
    '''detrend multivariate series by common trend

    Paramters
    ---------
    y : ndarray
       data, can be 1d or nd. if ndim is greater then 1, then observations
       are along zero axis
    order : int
       degree of polynomial trend, 1 is linear, 0 is constant

    Returns
    -------
    y_detrended : ndarray
       detrended data in same shape as original 

    '''
    nobs = y.shape[0]
    shape = y.shape
    y_ = y.ravel()
    nobs_ = len(y_)
    t = np.repeat(np.arange(nobs), nobs_ /float(nobs))
    exog = np.vander(t, order+1)
    params = np.linalg.lstsq(exog, y_)[0]
    fittedvalues = np.dot(exog, params)
    resid = (y_ - fittedvalues).reshape(*shape)
    return resid, params

def detrend_separate(y, order=1):
    '''detrend multivariate series by series specific trends

    Paramters
    ---------
    y : ndarray
       data, can be 1d or nd. if ndim is greater then 1, then observations
       are along zero axis
    order : int
       degree of polynomial trend, 1 is linear, 0 is constant

    Returns
    -------
    y_detrended : ndarray
       detrended data in same shape as original 

    '''
    nobs = y.shape[0]
    shape = y.shape
    y_ = y.reshape(nobs, -1)
    kvars_ = len(y_)
    t = np.arange(nobs)
    exog = np.vander(t, order+1)
    params = np.linalg.lstsq(exog, y_)[0]
    fittedvalues = np.dot(exog, params)
    resid = (y_ - fittedvalues).reshape(*shape)
    return resid, params

nobs = 30
sige = 0.1
y0 = 0.5 * np.random.randn(nobs,4,3)
t = np.arange(nobs)
y_observed = y0 + t[:,None,None]

for detrend_func, name in zip([detrend_common, detrend_separate], 
                               ['common', 'separate']):
    y_detrended, params = detrend_func(y_observed, order=1)
    print '\n\n', name 
    print 'params for detrending'
    print params
    print 'std of detrended', y_detrended.std()  #should be roughly sig=0.5 (var of y0)
    print 'maxabs', np.max(np.abs(y_detrended - y0))

    print 'observed'
    print y_observed[-1]
    print 'detrended'
    print y_detrended[-1]
    print 'original ""true""'
    print y0[-1]

    plt.figure()
    for i in range(4):
        for j in range(3):
            plt.plot(y0[:,i,j], 'bo', alpha=0.75)
            plt.plot(y_detrended[:,i,j], 'ro', alpha=0.75)
    plt.title(name + ' detrending: blue - original, red - detrended')


plt.show()
"
what is a quick way to import a text file in python?,"
lines = [line.strip() for line in open(filename)]
"
Python enum - getting value of enum on string conversion,"class D(Enum):
    def __str__(self):
        return str(self.value)

    x = 1
    y = 2
"
Finding adjacent pairs of characters in a string using recursion,"def find_adjacent(message, pairs, k):
  if k == len(message)-1:
    return(""Number of pairs:"", pairs)
  elif message[k] == message[k+1]:
    if k == 0:
      return find_adjacent(message, pairs+1, k+1) # first letter of message, all good
    elif message[k] != message[k-1]:
      return find_adjacent(message, pairs+1, k+1) # not first letter, and this pair hasn't been counted before
    else:
      return find_adjacent(message, pairs, k+1) # this sequence has already been counted
  else:
    return find_adjacent(message, pairs, k+1)
"
How to match words in 2 list against another string of words without sub-string matching in Python?,"slangNames = set([""Vikes"", ""Demmies"", ""D"", ""MS"", ""Contin""])
riskNames = set([""enough"", ""pop"", ""final"", ""stress"", ""trade""])
d =  {1: ""Vikes is not enough for me"", 2:""Demmies is okay"", 3:""pop a D""}

for k,v in d.items():
    spl = v.split()
    if not slangNames.isdisjoint(spl) and not riskNames.isdisjoint(spl):
        print(k, v)
"
Programmatically accessing arbitrarily deeply-nested values in a dictionary,"class NestedDict(dict):

    def __getitem__(self,keytuple):
        # if key is not a tuple then access as normal
        if not isinstance(keytuple, tuple):
            return super(NestedDict,self).__getitem__(keytuple)
        d = self
        for key in keytuple:
            d = d[key]
        return d

>>> nd = NestedDict(x)
>>> nd['key2']
{'key22': 'value22', 'key21': {'key211': 'value211'}}
>>> nd['key2','key22']
'value22'
>>> nd['key2','key21']
{'key211': 'value211'}
>>> nd['key2','key21','key211']
'value211'
"
"How to ""embed"" a small numpy array into a predefined block of a large numpy array?","import numpy as np

wall = np.zeros((10,10),dtype=np.int)
block = np.arange(1,7).reshape(2,3)

x = 2
y = 3
wall[x:x+block.shape[0], y:y+block.shape[1]] = block
"
extract specific text from several metadata files using python,"def parse(filepath):
    with open(filepath) as f:
        contents = f.readlines()

    output = {}
    group = {}
    inside_group = False

    for line in contents:
        line = line.strip()
        if line == '':
            continue

        type, value = line.split('=')
        type = type.strip()
        value = value.strip()

        if type == 'OBJECT':
            inside_group = True
        elif type == 'END_OBJECT':
            output[value] = group
            inside_group = False
            group = {}
        elif inside_group:
            group[type] = value

    return output
"
separate list elements based on semicolon,"inval = ['48998.tyrone-cluster;gic1_nwgs;mbupi;18:45:44;R;qp32\n', '48999.tyrone-cluster;gic2_nwgs;mbupi;0;Q;batch\n', '49005.tyrone-cluster;...01R-1849-01_2;mcbkss;00:44:23;R;qp32\n', '49032.tyrone-cluster;gaussian_top.sh;chemraja;0;Q;qp32\n', '49047.tyrone-cluster;jet_egrid;asevelt;312:33:0;R;qp128\n', '49052.tyrone-cluster;case3sqTS1e-4;mecvamsi;0;Q;qp32\n', '49053.tyrone-cluster;...01R-1850-01_1;mcbkss;0;Q;batch\n', '49054.tyrone-cluster;...01R-1850-01_2;mcbkss;0;Q;batch\n']

def parse(raw):
    parts = raw.strip().split(';')
    _id, _ = parts[0].split('.')
    return _id, parts[3], parts[4], parts[5]

print map(parse, inval)

# or 
# print [parse(val) for val in inval]
"
Special chacacters in python 3.3,">>> d = {'(': 'a'}
>>> ''.join(map(lambda letter: d.get(letter, letter), 'text with m(ny letters'))
'text with many letters'
"
How am I to get all the connections?,"from collections import deque

def load_all_levels(root, p):
    """"""Load all levels reachable from `root`.
    Return a dictionary mapping level id to level.
    """"""
    # Queue of levels that have been loaded but whose neighbours have not.
    q = deque([root])
    # Map from level id to level for all levels loaded so far.
    loaded = {root.id: root}
    while q:
        for level_id in q.popleft().warps.values():
            if level_id not in loaded:
                level = LevelBuilder.loadLevel(level_id, p.screen)
                loaded[level_id] = level
                q.append(level)
    return loaded
"
Is there a simple way to override the list object's method __getitem__?,"def __getitem__(self,n):
    while len(self) <= n:
        self.append(self.dft)
    return super(ilist, self).__getitem__(n)
"
Python: updating a large dictionary using another large dictionary,b.update(d)
How to copy text file in python,"import copy
def printtext(swefile):
    for row in swefile:
        print(row)
text = open(""wordsv.txt"",""r"",encoding='utf-8').readlines()
text2 = copy.copy(text)
printtext(text)
printtext(text2)
"
SQlite3 fetching data in order with a paramter,"cur.execute(""SELECT name, highest FROM scores WHERE class=""+str(whichclass)+"" ORDER BY highest DESC"")
"
Set is much faster than list while lookup for membership,"from timeit import Timer
print Timer(""0 in L"", ""L=range(100000)"").timeit(number=10000)
print Timer(""0 in S"", ""S=set(range(100000))"").timeit(number=10000)
"
Correct usage of Python threading.RLock,"import threading

class MyLock(threading._RLock):
    def release(self):
        print(""releasing"")
        super(MyLock, self).release()

class Obj():
    def test(self):
        print ""in test""

l = MyLock()
obj = Obj()

def f():
    with l:
        return obj.test()

f()
"
Add value from drop down list to tkinter GUI once item is selected? Python,"from tkinter import *

class Call(object): # CamelCase name for class

    def __init__(self, name):
        self.name = name

        root = Tk()
        options = [""1"", ""2"", ""3""]

        self.var = StringVar()

        self.label = Label(root, text='Test')
        self.label.grid(row=4, column=3)

        OptionMenu(root, self.var, *options, command=self.change_label).grid(row=0, column=3)

        root.mainloop()

    def change_label(self, event):
        self.label['text'] = 'Test ' + self.var.get()

a = Call('')
"
In Python what is it called when you use enclose a variable between 2 plus signs?,">>> variable = ""stuff""
>>> print ""I would like to print {}"".format(variable)
I would like to print stuff
>>> mapping = {'answer': 42, 'interest': 0.815}
>>> print '''\
... The answer to the ultimate question: {m[answer]:>10d}
... Rate: {m[interest]:03.2%}!'''.format(m=mapping)
The answer to the ultimate question:         42
Rate: 81.50%!
"
How can I speed up an iteration in python?,"In [102]: a=['a','b','c','d','e','f','g','b','h','i','f','j']

In [103]: b=['b','f','g','j','b','f']

In [104]: dic=defaultdict(list)

In [105]: for i,x in enumerate(b):
    dic[x].append(i)
   .....:     

#now convert every value(i.e list) present in dic to an iterator.

In [106]: dic={x:iter(y) for x,y in dic.items()}  

In [107]: [next(dic[x]) if x in dic else '-999' for x in a]  #call next() if the key 
                                                             #is present else use '-999'
Out[107]: ['-999', 0, '-999', '-999', '-999', 1, 2, 4, '-999', '-999', 5, 3]
"
Using 'r+' mode to overwrite a line in a file with another line of the same length,"import re

def get_find_and_replace(f):
    """"""f --> a file that is open with r+ mode""""""
    data = f.read()
    def find_and_replace(old, new):
        for m in re.finditer(old, data):
            f.seek(m.start())
            f.write(new)
    return find_and_replace

with open(""test"",""r+"") as f:
  find_and_replace = get_find_and_replace(f)
  find_and_replace(""apples_"",""lettuce"")
  #find_and_replace(...,...)
  #find_and_replace(...,...)
"
Can't set appropriate dtypes reading from a Numpy array,"# To save the slice `df.iloc[1:, :]` to disk:
filename = '/tmp/test.h5'
with pd.HDFStore(filename) as store:
    store['mydata'] = df.iloc[1:, :]

# To load the DataFrame from disk:
with pd.get_store(filename) as store:
    newdf2 = store['mydata']
    print(newdf2.dtypes)
    print(newdf2)
"
Spark: Use same OneHotEncoder on multiple dataframes,"training = sc.parallelize([(0., ), (1., ), (1., ), (3., )]).toDF([""type""])
testing  = sc.parallelize([(0., ), (1., ), (1., ), (1., )]).toDF([""type""])
"
numpy 2d boolean array indexing with reduce along one axis,"def vote_op(angle, belong, THRES_THETA, lines_lengths_vstacked, max_line_length):
    intermediate = (0.3 * (1-(angle[belong]/THRES_THETA)) + 0.7 * (lines_lengths_vstacked[belong]/max_line_length))
    b_rows = np.sum(belong, axis=1)
    b_ind = np.hstack([0, np.cumsum(b_rows)])[:-1]
    intermediate = np.hstack([intermediate, 0])
    votes = np.add.reduceat(intermediate, b_ind)
    votes[b_rows == 0] = 0
    return votes
"
how to create a list of identical tuples in python,">>> pi = 3
>>> l = [[0, pi]] * 4
>>> l
[[0, 3], [0, 3], [0, 3], [0, 3]]
>>> l[0][1] = 4
>>> l
[[0, 4], [0, 4], [0, 4], [0, 4]]  # Wat
"
Equality of dictionaries,"all( d1.get(x) == d2.get(x) for x in l )
"
Python - Is a dictionary slow to find frequency of each character?,"#!/usr/bin/env python
import codecs, itertools, operator, sys
import numpy

filename = sys.argv[1] if len(sys.argv)>1 else '/usr/share/dict/american-english'

# ucs2 or ucs4 python?
dtype = {2: numpy.uint16, 4: numpy.uint32}[len(buffer(u""u""))]

# count ordinals
text = codecs.open(filename, encoding='utf-8').read()
a = numpy.frombuffer(text, dtype=dtype)
counts = numpy.bincount(a)

# pretty print
counts = [(unichr(i), v) for i, v in enumerate(counts) if v]
counts.sort(key=operator.itemgetter(1))
print ' '.join('(""%s"" %d)' % c for c in counts  if c[0] not in ' \t\n')
"
How do I get all bars in a matplotlib bar chart?,"import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

x = np.arange(5)
y = np.random.rand(5)

bars = ax.bar(x, y, color='grey')    
bars[3].set_color('g')
"
How to read file N lines at a time in Python?,"from itertools import islice
with open(filename, 'r') as infile:
    lines_gen = islice(infile, N)
"
How do I write a comma as a normal text in a CSV file?(the double quote method doesn't work),"import csv

with open(outputfilename, 'wb') as outfh:
    writer = csv.writer(outfh)
    writer.writerow(['Data with , commas and nested "" quotes', 'works just fine'])
"
Python Xpath to find text() that contains @domain,">>> import re
>>> re.findall(r'[\w\.]+@domain\.[\w\.]+', 'this is our info: info@domain.co.uk')
['info@domain.co.uk']
"
numpy get all combinations of rows and column indices 2D array,"In [167]: foo[rsum<165][:,csum>80]
Out[167]: 
array([[ 6,  7,  8,  9, 10],
       [12, 14, 16, 18, 20]])
"
Regular expressions matching words which contain the pattern but also the pattern plus something else,"all_keys = set([u'Cyp26_G_R1', u'Cyp26_G_rep1', u'Time'])

specie_name_and_initial_values = set(['[Cyp26_R1R2_RARa]', '[Cyp26_SRC3_1]', '[18-OH-RA]', '[p38_a]', '[Cyp26_G_rep1]', '[Cyp26]', '[Cyp26_G_a]', '[SRC3_p]', '[mRARa]', '[np38_a]', '[mRARa_a]', '[RARa_pp_TFIIH]', '[RARa]', '[Cyp26_G_L2]', '[atRA]', '[atRA_c]', '[SRC3]', '[RARa_Ser369p]', '[p38]', '[Cyp26_mRNA]', '[Cyp26_G_L]', '[TFIIH]', '[Cyp26_SRC3_2]', '[Cyp26_G_R1R2]', '[MSK1]', '[MSK1_a]', '[Cyp26_G]', '[Basal_Kinases]', '[Cyp26_R1_RARa]', '[4-OH-RA]', '[Cyp26_G_rep2]', '[Cyp26_Chromatin]', '[Cyp26_G_R1]', '[RXR]', '[SMRT]'])

specie_name_and_initial_values = set(s.strip(""[]"") for s in specie_name_and_initial_values)

print(all_keys.intersection(specie_name_and_initial_values))
"
Track changes of atributes in instance. Python,"class MagicWrapper(object):
    def __init__(self, wrapped):
        self._wrapped = wrapped

    def __getattr__(self, attr):
        return getattr(self._wrapped, attr)

    def __setattr__(self, attr, val):
        if attr == '_wrapped':
            super(MagicWrapper, self).__setattr__('_wrapped', val)
        else:
            setattr(self._wrapped, 'old_' + attr, getattr(self._wrapped, attr))
            setattr(self._wrapped, attr, val)


class MyObject(object):
    def __init__(self):
        self.attr_one = None
        self.attr_two = 1

obj = MyObject()
obj = MagicWrapper(obj)
obj.attr_one = 'new value'
obj.attr_two = 2

print obj.old_attr_one
print obj.attr_one
print obj.old_attr_two
print obj.attr_two
"
How to add enough zeros before a number in order to have six digits for this number using Python?,"print '{0:06d}'.format(1)
"
Thresholded pixel indices of a NumPy array,"np.argwhere((image > threshold).any(-1))
"
Python- get specific lines from a file and iterate,"from collections import defaultdict
with open(""abc"") as f:
    dic=defaultdict(list)
    i=1
    for line in f:
          line=line.strip()
          if line:
             dic[i].append(line)
             i+=1
          else:
             i=1

for i in range(1,10,2):   #get the 1,3,5,7,9 line
   print ""This is row {0}: {1}"".format(i,"" "".join(dic[i]))

print

for i in [1,4,8]:        #get the 1,4,8 line
   print ""This is row {0}: {1}"".format(i,"" "".join(dic[i]))
"
How to replace strings in a list using tuples of strings and their replacements?,"#!/usr/bin/env python3

def process_ranks(player_ranks, rank_database):
    rank_map = dict(rank_database)
    return [rank_map[rank] for rank in player_ranks]

def main():
    # Sample data.
    player_ranks = ['old' + str(n) for n in range(4)]
    # Database contains more rank data than we will use.
    rank_database = [
      ('old' + str(n), 'new' + str(n)) for n in range(40)
      ]

    print(""Original player ranks:"")
    print(player_ranks)
    processed_ranks = process_ranks(player_ranks, rank_database)
    print(""Processed player ranks:"")
    print(processed_ranks)
    return

if ""__main__"" == __name__:
    main()
"
letter/word guessing game in python,"allletters = set(list('abcdefghijklmnopqrstuvwxyz'))
usedletters = set() # update this as you go
while( len(usedletters) != len(allletters) ):
    guessedletter = raw_input(""pick a letter"")
    availletters = allletters.difference(usedletters)
    usedletters.update(guessedletter)
"
Python: How to order a list based on another list,">>> wordorder = dict(zip(list2, range(len(list2))))
>>> wordorder
{'Pear': 2, 'Bananas': 0, 'Oranges': 1}
>>> sorted(list1, key=lambda x: wordorder.get(x.split('-')[1], len(wordorder)))
['Title1-Bananas', 'Title1-Oranges', 'Title1-Pear', 'Title1-Apples']
"
Problems with the encoding of several concatenated files in python?,"file -I <filename>
"
Finding the amount of time difference between dates in python,"from datetime import timedelta
def my_time_delta(d1,d2):
    """"""
    Returns time delta as the following tuple:
        (""before|after|same"", ""years"", ""months"", ""days"")
    """"""
    if d1 == d2:
        return (""same"",0,0,0)

    # d1 before or after d2?
    if d1 > d2:
        ba = ""after""
        d1,d2 = d2,d1 # swap so d2 > d1
    else:
        ba = ""before""

    years  = d2.year - d1.year
    months = d2.month - d1.month
    days   = d2.day - d1.day

    # adjust for -ve days/months
    if days < 0:
        # get last day of month for month before d1
        pre_d1 = d1 - timedelta(days=d1.day)
        days = days + pre_d1.day
        months = months - 1

    if months < 0:
        months = months + 12
        years  = years - 1

    return (ba, years, months, days)
"
Python - Parse float string to an integer,">>> Fraction(0.9)
Fraction(8106479329266893, 9007199254740992)
>>> Fraction(""0.9"")
Fraction(9, 10)
"
How to use multiprocessing for a Python for loop with a break statement?,"import multiprocessing as mp
import time

def worker(x):
    print('work item', x)
    time.sleep(x)
    result = x - 5
    if result == 0:
        print('termination condition')
    print('work item', x, 'done')
    return result

if __name__ == '__main__':
    p = mp.Pool(4)
    for result in p.imap_unordered(worker, range(20), chunksize=1):
        if result == 0:
            print('terminating')
            p.terminate()
            break
    print('done')
"
How to extract html to text in BeautifulSoup?,"import re
from bs4 import BeautifulSoup

data = """"""your html here""""""

soup = BeautifulSoup(data)

s = soup.find('p').br.previous_sibling  # find ""p"" element and get the part before the 1st br
match = re.search('string\-1\.string2 \d+ (\w+) string3\.string', s)
print match.group(1)
"
How to allow parameters for a decorator while keep the function's signature at the same time?,"def test_decorator(message, arg_name):
    @wrapt.decorator
    def wrapped_f(f, instance, args, kwargs):
        if arg_name in kwargs:
            print(message)
        return f(*args, **kwargs)
    return wrapped_f
"
Extract timestamp from large string,"import re
datepattern = re.compile(""\w{3}, \d{2} \w{3} \d{4} \d{2}:\d{2}:\d{2} \w{3}"")
matcher = datepattern.search(string_to_match_against)
print(matcher.group(0))
"
how to use matplotlib's set_cmap()?,"# ...    
plt.gca().set_color_cycle(['black', 'pink', 'green'])

plt.plot(x,y)
plt.plot(x,y1)
plt.plot(x,y2)
plt.show()
"
Get Nodes from xml by specifying limit,"from xml.etree import ElementTree as ET


data = """"""<Faculty>
    <facultyMember>
        <FirstName>A</FirstName>
    </facultyMember>
    <facultyMember>
        <FirstName>B</FirstName>
    </facultyMember>
    <facultyMember>
        <FirstName>C</FirstName>
    </facultyMember>
    <facultyMember>
        <FirstName>D</FirstName>
    </facultyMember>
    <facultyMember>
        <FirstName>E</FirstName>
    </facultyMember>
    <facultyMember>
        <FirstName>F</FirstName>
    </facultyMember>
    <facultyMember>
        <FirstName>G</FirstName>
    </facultyMember>
    <facultyMember>
        <FirstName>H</FirstName>
    </facultyMember>

</Faculty>""""""

tree = ET.fromstring(data)
begin, end = 3, 6

for element in tree.findall('.//facultyMember')[begin - 1: end]:
    print ET.tostring(element).strip()
"
Create a python dictionary of lists,"the_dict = {
    'amount_paid': request.POST.getlist('amount_paid[]'),
    'paid_date': request.POST.getlist('paid_date[]'),
    'method': request.POST.getlist('method[]'),
    'comments': request.POST.getlist('comments[]'),
}
"
Pandas join/merge 2 dataframes using date as index,"import numpy as np
dates = np.intersect1d(df1['Date'], df2['Date'])
mask1 = df1['Date'].isin(dates)
mask2 = df2['Date'].isin(dates)
result = pd.merge(df1.loc[mask1], df2.loc[mask2], on=['Date', 'count'], how='outer')
"
executemany of CLOB elements on cx_Oracle,"lobdict = {}
for k in list_dict_vals[0].keys():
   lobdict[k] = cursor.var(cx_Oracle.CLOB, arraysize=len(list_dict_vals))
for rownum, row in enumerate(list_dict_values):
  for key, val in row.iteritems():
     lob = lobdict[key]
     lob.setvalue(rownum, val)
     row[key] = lob
...
InsertChunk()
"
"Rewriting array to text file, need to put each part on new line","with open('Stockinventory.txt', 'w') as f:
    for row in items:
        f.write(', '.join(row) + '\n')
"
View pdf image in an iPython Notebook,"class PDF(object):
  def __init__(self, pdf, size=(200,200)):
    self.pdf = pdf
    self.size = size

  def _repr_html_(self):
    return '<iframe src={0} width={1[0]} height={1[1]}></iframe>'.format(self.pdf, self.size)

  def _repr_latex_(self):
    return r'\includegraphics[width=1.0\textwidth]{{{0}}}'.format(self.pdf)
"
argparse - Arbitrary optional arguments,"parser=argparse.ArgumentParser()
parser.add_argument(""foo"")
parser.add_argument(""-bar"", type=int)
#parser can have any arguments, whatever you want!

parsed, unknown = parser.parse_known_args() #this is an 'internal' method
# which returns 'parsed', the same as what parse_args() would return
# and 'unknown', the remainder of that
# the difference to parse_args() is that it does not exit when it finds redundant arguments

for arg in unknown:
    if arg.startswith((""-"", ""--"")):
        #you can pass any arguments to add_argument
        parser.add_argument(arg, type=<your type>, ...)

args=parser.parse_args()
"
Can't plot ellipse in python without fillcolor,"import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse

fig, ax = plt.subplots()

ax.axis('equal')
ell = Ellipse(xy=[0,0], width=30, height=10, angle=0,
              edgecolor='b', lw=4, fill=False)

ax.add_artist(ell)
ax.set(xlim=[-100, 100], ylim=[-100, 100])

plt.show()
"
How to scale all numbers in a string while keeping the format the same in Python?,"import re

text = '''
Cat, 5 kg
Dog, 10 kg
Human, 50 kg
'''.strip()

def divide_numbers(s, n):
    def sub(m):
        return str(int(m.group(0))//n)
    return re.sub('[0-9]+', sub, s)

print(divide_numbers(text, 5))
"
How to take out the column index name in dataframe,">>> dfrm.reset_index()
"
Python: compare column in two files,"import sys 

codes = {}

with open(sys.argv[2], 'r') as f2: 
    for line in f2: 
        fields = line.split()
        codes[fields[0]] = fields[1]

with open(sys.argv[1], 'r') as  f1: 
    for line in f1: 
        fields = line.split(None, 1)
        if fields[0] in codes:
            print('{0:4s}{1:s}'.format(codes[fields[0]], line[4:]), end='')
        else:
            print(line, end='')
"
python inserting and retrieving binary data into mysql,"import binascii
import MySQLdb
import uuid

conn = MySQLdb.connect(host='localhost')

key = uuid.uuid4()
print 'inserting', repr(key.bytes)
r = conn.cursor()
r.execute('INSERT INTO xyz (id) VALUES (%s)', key.bytes)
conn.commit()

print 'selecting', repr(key.bytes)
r.execute('SELECT added_id, id FROM xyz WHERE id = %s', key.bytes)
for row in r.fetchall():
    print row[0], binascii.b2a_hex(row[1])
"
Login and upload file using Python 'requests',"import requests

sessionObj = requests.session()
url1='http://www.abc.com/login.php'
r = sessionObj.post(url1, params={'username':'usernamehere' , 'password':'password here'})
print r.status_code //msg:'200'


filehandle = open('./tmp.txt')
url2='http://www.abc.com/uploader.php'
r = sessionObj.post(url2, data={},files = {'upload':filehandle})
print r.text
"
Stripping headers response - Python,"response = """"""
Server: nginx/1.6.2 (Ubuntu)
Date: Thu, 03 Mar 2016 07:00:00 GMT
Content-Type: text/html
Content-Length: 13471
Last-Modified: Sat, 19 Dec 2015 02:42:32 GMT
Connection: close
ETag: ""5674c418-349f""
Cache-Control: no-store
Accept-Ranges: bytes

<!doctype html> // or <!DOCTYPE html>
# remaining of the page content here.
""""""

print response[response.lower().find('<!doctype html>'):]
"
Combining pandas data frames with overlapping columns / rows,"%%timeit
comb_df = pd.DataFrame()
for df in [df1,df2,df3,df4]:  
    comb_df = comb_df.combine_first( df )

100 loops, best of 3: 8.92 ms per loop
"
best way to extract subset of key-value pairs from python dictionary object,"{k: bigdict[k] for k in ('l', 'm', 'n')}"
check if element of list is present in elements of another list,"import re

a=[""Britney spears"", ""red dog"", ""\xa2xe3""]

regex = re.compile('|'.join(re.escape(x) for x in a))

b=[""cat"",""dog"",""red dog is stupid"", ""good stuff \xa2xe3"", ""awesome Britney spears""]

b = [regex.sub("""",x) for x in b ]
print (b)  #['cat', 'dog', ' is stupid', 'good stuff ', 'awesome ']
"
"Generating Ngrams (Unigrams,Bigrams etc) from a large corpus of .txt files and their Frequency","import os

corpus = []
path = '.'
for i in os.walk(path).next()[2]:
    if i.endswith('.txt'):
        f = open(os.path.join(path,i))
        corpus.append(f.read())
frequencies = Counter([])
for text in corpus:
    token = nltk.word_tokenize(text)
    bigrams = ngrams(token, 2)
    frequencies += Counter(bigrams)
"
"Python3, map-function",">>> mass = 1.2
>>> density = 2.3
>>> masslog = math.log(mass * density)
>>> map(sum, (masslog/(i+1) for i in range(10000)))
<map object at 0x7feccaf1fc18>
"
Pyparsing sequence of repeating pattern,"# Extra credit:
# use Dict to auto-define named groups using each '@x' as a key
parser = LBRACK + Dict(OneOrMore(key_value)) + RBRACK
result = parser.parseString(text)

# print the parsed keys
print result.keys()

# print a value for a particular key
print result['c']

# print a value for a particular key using object notation
print result.b

# dump out the whole structure to see just what we got
print result.dump()
"
Easy way of overriding default methods in custom Python classes?,"@delegate('__len__', '_content')
@delegate('__getitem__', '_content')
class MyList(object):
    def __init__(self, content):
        self._content = content

spam = MyList([1,2,3,4,5])

len(spam) # prints ""5""

spam[0] # prints ""1""
"
suppress section numberings in nbconvert to latex?,"for IPython 1.x:
((*- extends 'latex_article.tplx' -*))

((* block h1 -*))section*((* endblock h1 -*))
((* block h2 -*))subsection*((* endblock h2 -*))
((* block h3 -*))subsubsection*((* endblock h3 -*))
((* block h4 -*))paragraph*((* endblock h4 -*))
((* block h5 -*))subparagraph*((* endblock h5 -*))
"
Writing and documenting a Python script with variable number of arguments,"import argparse

parser = argparse.ArgumentParser(description='View arguments')
parser.add_argument('arguments', nargs='+', help='passed arguments')
args = parser.parse_args()
print args.arguments
"
"In a list of tuples, return tuple[1] if tuple[0] is a duplicate of another tuple[0] in the list",">>> dups = {checksum: names for checksum, names in dups.items() if len(names) > 1}
>>> dups
{'sumstring1': {'abc.txt', 'ghi.txt'}, 'sumstring2': {'def.txt', 'jkl.txt'}}
"
Partitioning elements in list by \t . Python,"output = [sub.split('\t') for sub in my_list]
"
Why does Python modify the list which is out of the loop?,"def sliding_tristep(full_trace, future_step = 2, window_size = 3):
    for user_trace in full_trace:
        for current_input in window(user_trace):
            counter = 0
            trace = current_input[:] # make a copy of current_input
            accumulator = []
            while counter <= future_step:
                next_prediction = predict(trace)  
                trace.append(next_prediction)
                accumulator.append(next_prediction)
                trace = trace[-window_size:]
                counter += 1                    
            print current_input, accumulator
"
Years to Decades,"va['decade'] = (va['contest_id'].apply(lambda x: x[:2])).astype('category')
"
How to read an attribute in another class?,"def openFileDialog(self):
    import os
    path, _ = QtGui.QFileDialog.getOpenFileName(self, ""Open File"", os.getcwd())
    self.label.setText(path)
    return path
"
Python Linked List with Nodes. Iterable,"class Node(object):
    def __init__(self, initdata):
        self.data = initdata
        self.next = None

class UnorderedList(object):

    def __init__(self):
        self.head = None
        self.count = 0

    def __iter__(self):
        current = self.head
        while current is not None:
            yield current
            current = current.next
"
How to sort a matrix in the ascending order by the sum of its row in Python?,"sorted(A, key=sum)
"
Pythonic Comparison Functions,"def comparepeople(p1, p2):
    o1 = p1.lastname, p1.firstname, p1.dob
    o2 = p2.lastname, p2.firstname, p2.dob
    return cmp(o1,o2)
"
Sorting the values within a dropdown widget in ipython notebook,"from collections import OrderedDict
...
testValues = OrderedDict(zip(testValues, testValues)) # from your example
"
"Best Pythonic way to replace any non-A-Z, non numbers, with a dash",">>> my_str = ""1,123_$ABC_NN&_XX,154440480,YVH?ADXX,,503,TCCTGA,503,TATCCTCT,,,154440480""
>>> re.sub(r'[^\w-]', '-', my_str)
'1-123_-ABC_NN-_XX-154440480-YVH-ADXX--503-TCCTGA-503-TATCCTCT---154440480'
"
Is it worth using IPython parallel with scipy's eig?,"from __future__ import print_function
from numpy.random import rand
from IPython.parallel import Client
from mkl import set_num_threads
from timeit import default_timer as clock
from scipy.linalg import eig
from functools import partial
from itertools import product

eig = partial(eig, right=False)  # desired keyword arg as standard

class Bench(object):
    def __init__(self, m_size, n_mat, repeat=3):
        self.n_mat = n_mat
        self.matrix = rand(n_mat, m_size, m_size)
        self.repeat = repeat
        self.rc = Client()

    def map(self):
        results = map(eig, self.matrix)

    def ip_map(self):
        results = self.view.map_sync(eig, self.matrix)

    def parfor(self):
        results = {}
        for i in range(self.n_mat):
            results[i] = self.view.apply_async(eig, self.matrix[i,:,:])
        for i in range(self.n_mat):
            results[i] = results[i].get()

    def timer(self, func):
        t = clock()
        func()
        return clock() - t

    def run(self, func, n_engines, n_mkl, view_method):
        self.view = view_method(range(n_engines))
        self.view.apply_sync(set_num_threads, n_mkl)
        set_num_threads(n_mkl)
        return min(self.timer(func) for _ in range(self.repeat))

    def run_all(self):
        funcs = self.ip_map, self.parfor
        n_engines = 2, 4
        n_mkls = 1, 2
        views = self.rc.direct_view, self.rc.load_balanced_view
        times = []
        for n_mkl in n_mkls:
            args = self.map, 0, n_mkl, views[0]
            times.append(self.run(*args))
        for args in product(funcs, n_engines, n_mkls, views):
            times.append(self.run(*args))
        return times
"
Removing duplicate lists within another list,"def unique(l):
    st, it = set(), iter(l)
    for tup in map(tuple, l):
        if tup not in st:
            yield next(it)
        else:
            next(it)
        st.add(tup)
"
Sorting a list of lists in Python,c2.sort(key=lambda row: row[2])
How do I split a multi-line string into multiple lines?,' a \n b \r\n c '.split('\n')
How to evaluate the sum of values within array blocks,"Z_new = Z.reshape(5,20,5,20).sum(axis=(1,3))
"
How to write Strategy Pattern in Python differently than example in Wikipedia?,"import sys
import types

if sys.version_info[0] > 2:  # Python 3+
    create_bound_method = types.MethodType
else:
    def create_bound_method(func, obj):
        return types.MethodType(func, obj, obj.__class__)

class StrategyExample:
    def __init__(self, func=None):
        self.name = ""Strategy Example 0""
        if func:
             self.execute = create_bound_method(func, self)

    def execute(self):
        print(self.name)

def executeReplacement1(self):
    print(self.name + "" from execute 1"")

def executeReplacement2(self):
    print(self.name + "" from execute 2"")

if __name__ == ""__main__"":
    strat0 = StrategyExample()
    strat1 = StrategyExample(executeReplacement1)
    strat1.name = ""Strategy Example 1""
    strat2 = StrategyExample(executeReplacement2)
    strat2.name = ""Strategy Example 2""

    strat0.execute()
    strat1.execute()
    strat2.execute()
"
Pythonic solution to drop N values from an iterator,"def consume(iterator, n):
    ""Advance the iterator n-steps ahead. If n is none, consume entirely.""
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
"
"How could an ""also if"" be implemented in Python?","class Accumulator(object):
    all = True
    any = False
    none = None
    total = 0
    passed = 0
    failed = 0

    def also(self, condition):
        self.all = self.all and condition
        self.any = self.any or condition
        self.none = not condition and (self.none is None or self.none)
        self.total += 1
        self.passed += 1 if condition else self.failed += 1 
        return condition
"
Avoid double typing class names in python,"import mypackage.image

this_image = image.png(...)
that_image = image.jpeg(....)
"
Create DataArray from Dict of 2D DataFrames/Arrays,"patient_list = []
for i, patient in enumerate(patients):
    df = ...
    array = xr.DataArray(df, dims=['patient', 'attribute'])
    patient_list.append(df)
combined = xr.concat(patient_list, dim=pd.Index(patients, name='patient')
"
How do I work with a nested dictionary's name?,"from collections import OrderedDict

sam = {
  'food': 'tortas',
  'country': 'Mexico',
  'song': 'Dream On',
  }
dave = {
  'food': 'spaghetti',
  'country': 'USA',
  'song': 'Sweet Home Alabama',
  }
# The OrderedDict stores each person's name.
people = OrderedDict([('Sam', sam), ('Dave', dave)])

for name, data in people.items():
    # Name is a key in the OrderedDict.
    print('Name: ' + name)
    for key, value in sorted(data.items()):
        print('  {0}: {1}'.format(key.title(), value))
"
Reading XML file and fetching its attributes value in Python,"import xml.dom.minidom as minidom
doc = minidom.parse(filename)

memoryElem = doc.getElementsByTagName('memory')[0]
print ''.join( [node.data for node in memoryElem.childNodes] )
print memoryElem.getAttribute('unit')
"
Python multiprocessing - Pipe vs Queue,"import traceback
def reader(args):
    try:
        # Insert stuff to be multiprocessed here
        return args[0]['that']
    except:
        print ""FATAL: reader({0}) exited while multiprocessing"".format(args) 
        traceback.print_exc()
"
python grep reverse matching,"f = os.path.join(path, name)
"
Python: How to iterate over specific columns in rows in text file,"row = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']

print row[2:4]
"
How to reconfigure tkinter canvas items?,"item = K.create_rectangle(x1,y1,x2,y2,options...)
K.itemconfig(item,options)
"
what is the best way to represent a char in its bits representation(Python),">>> n = 6 ; ('{:0%sb}' % n).format(5)
'000101'
"
How to know a generated sequence is at most a certain length,">>> from itertools import islice
>>> len(list(islice(sequence(), 2))
2
"
Python nested defaultdict with mix data types,">>> mapping = {'count': int, 'leaf': dict}
>>> mapping['branch'] = lambda: KeyBasedDefaultDict(mapping)
>>> tree = KeyBasedDefaultDict(mapping)
>>> tree['branch']['count'] += 23
>>> tree['branch']['leaf']['tag1'] = 30
>>> tree['branch']['leaf']['tag2'] = 10
>>> tree
{'branch': {'count': 23, 'leaf': {'tag1': 30, 'tag2': 10}}}
"
Call a function with argument list in python,"def wrapper1(func, *args): # with star
    func(*args)

def wrapper2(func, args): # without star
    func(*args)

def func2(x, y, z):
    print x+y+z

wrapper1(func2, 1, 2, 3)
wrapper2(func2, [1, 2, 3])
"
Reverse Polish Calculator in Python,"def is_number(ln):
    try:
        int(ln)
        return True
    except ValueError:
        return False

def main():
    with open('math.txt', 'r') as f:
        lines = (line.strip() for line in f)
        lines = [line for line in lines if line]

    stack = []
    for line in lines:
        if is_number(line):
            stack.append(int(line))
        elif line in ['ADD', 'SUB', 'MUL', 'DIV']:
            if line=='ADD': result = stack.pop() + stack.pop()
            if line=='SUB': result = stack.pop() - stack.pop()
            if line=='MUL': result = stack.pop() * stack.pop()
            if line=='DIV': result = stack.pop() / stack.pop()
            print(result)
            stack.append(result)
        elif line=='PRT':
            print(stack.pop())
        elif line=='STOP':
            exit()
        else:
            raise ValueError(""Unknown line: %s"" % line)

# Call main function

main()
"
Start increment column at begining of month,"import pandas as pd
import numpy as np

N = 300
dates = pd.date_range('19971002', periods=N, freq='B')
df = pd.DataFrame(np.random.randn(N, 1),index=dates,columns=list('A'))
df['Counter'] = df.groupby([df.index.year, df.index.month]).cumcount()+1
print(df.loc['1998-09-25':'1998-10-05'])
"
SciPy.sparse iterative solvers: No sparse right hand side support?,"
"""""" Linop( A ): .matvec .rmatvec( sparse vecs )
http://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.LinearOperator.html
http://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.lsmr.html
""""""

from __future__ import division
import numpy as np
from scipy import sparse
from scipy.sparse.linalg import LinearOperator  # $scipy/sparse/linalg/interface.py

__version__ = ""2015-12-24 dec  denis + safe_sparse_dot""


#...............................................................................
class Linop( LinearOperator ):  # subclass ?
    """""" Aop = Linop( scipy sparse matrix A )
        ->  Aop.matvec(x) = A dot x, x ndarray or sparse
            Aop.rmatvec(x) = A.T dot x
        for scipy.sparse.linalg solvers like lsmr
    """"""

    def __init__( self, A ):
        self.A = A

    def matvec( self, x ):
        return safe_sparse_dot( self.A, x )

    def rmatvec( self, y ):
        return safe_sparse_dot( self.A.T, y )

        # LinearOperator subclass should implement at least one of _matvec and _matmat.
    def _matvec( self, b ):
        raise NotImplementedError( ""_matvec"" )

        # not _matvec only:
        # $scipy/sparse/linalg/interface.py
        # def matvec(self, x):
        #     x = np.asanyarray(x)  <-- kills sparse x, should raise an error

    def _rmatvec( self, b ):
        raise NotImplementedError( ""_rmatvec"" )

    @property
    def shape( self ):
        return self.A.shape


def safe_sparse_dot( a, b ):
    """""" -> a * b or np.dot(a, b) """"""
        # from sklearn
    if sparse.issparse(a) or sparse.issparse(b):
        try:
            return a * b
        except ValueError:  # dimension mismatch: print shapes
            print ""error: %s %s  *  %s %s"" % (
                    type(a).__name__, a.shape,
                    type(b).__name__, b.shape )
            raise
    else:
        return np.dot(a, b)

#...........................................................................
if __name__ == ""__main__"":
    import sys
    from lsmr import lsmr  # patched $scipy/sparse/linalg/lsmr.py

    np.set_printoptions( threshold=20, edgeitems=10, linewidth=100, suppress=True,
        formatter = dict( float = lambda x: ""%.2g"" % x ))

        # test sparse.rand A m n, x n 1, b m 1
    m = 10
    n = 100
    density = .1
    bdense = 0
    seed = 0
    damp = 1

        # to change these params in sh or ipython, run this.py  a=1  b=None  c=[3] ...
    for arg in sys.argv[1:]:
        exec( arg )

    np.random.seed(seed)

    print ""\n"", 80 * ""-""
    paramstr = ""%s  m %d  n %d  density %g  bdense %d  seed %d  damp %g "" % (
            __file__, m, n, density, bdense, seed, damp )
    print paramstr

    A = sparse.rand( m, n, density, format=""csr"", random_state=seed )
    x = sparse.rand( n, 1, density, format=""csr"", random_state=seed )
    b = sparse.rand( m, 1, density, format=""csr"", random_state=seed )
    if bdense:
        b = b.toarray().squeeze()  # matrix (m,1) -> ndarray (m,)

    #...........................................................................
    Aop = Linop( A )
        # aslinearoperator( A ): not for sparse x

        # check Aop matvec rmatvec --
    Ax = Aop.matvec( x )
    bA = Aop.rmatvec( b )
    for nm in ""A Aop x b Ax bA "".split():
        x = eval(nm)
        print ""%s: %s %s "" % (nm, x.shape, type(x))
    print """"

    print ""lsmr( Aop, b )""

    #...........................................................................
    xetc = lsmr( Aop, b, damp=damp, show=1 )
    #...........................................................................

    x, istop, niter, normr, normar, norma, conda, normx = xetc
    x = getattr( x, ""A"", x ) .squeeze()
    print ""x:"", x.shape, x

    #     print ""lsmr( A, b ) -- Valueerror in $scipy/sparse/linalg/interface.py""
    #     xetc = lsmr( A, b, damp=damp, show=1 )  # Valueerror

    safe_sparse_dot( A, b.T )  # ValueError: dimension mismatch
"
Extended conditions in a for loop,">>> def my_range(start, stop, step=1):
...     current = start
...     while current < stop:
...         yield current
...         current += step
... 
>>> [num for num in my_range(0, 10)]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
"
"python built-in function type, how to define a member function for the new type?","def enum(*sequential, **named):
    """""" Contruct an enum """"""
    enums = dict(zip(sequential, range(len(sequential))), **named)
    reverse = dict((value, key) for key, value in enums.items())
    key_names = enums.keys()
    enums['reverse_mapping'] = reverse        
    @classmethod
    def keys(klass):
       return key_names 
    enums['keys'] = keys
    return type('Enum', (), enums)
"
Mutation algorithm python,"for i in data:
    print(i)               #prints list of characters in a not-so-nice format
"
just a canvas in a tkinter window,"from tkinter import ttk
from tkinter import *
from tkinter.ttk import *


class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.grid()      
        self.createWidgets()

    def createWidgets(self):
        self.can = Canvas(self.master, width=500, height=250)
        self.can.grid(row=2, column=1)
        self.can.create_line(0,0,500,200)

root = Tk()
app = Application(master=root)
app.mainloop()
root.destroy()
"
"Pyspark, perform word count in an RDD comprised of arrays of strings.","from operator import add

docs = corpus.flatMap(lambda doc: doc.split(' '))
docs.map(lambda word: (word,1)).reduceByKey(add)
"
Python: list iteration only returns last value,"data = dict()
for covar_type in covs:
    for num in num_comp:
        data[(covar_type, num)] = GMM(...)
"
"How to convert hex string ""\x89PNG"" to plain text in python",">>> s = '\\x70f=l\\x26hl=en\\x26geocode=\\x26q\\x3c'
>>> print s
\x70f=l\x26hl=en\x26geocode=\x26q\x3c
"
Turn Based Movement Algorithm,"import sys

MY_X = 3
MY_Y = 4
MY_RNG = 2

grid = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 0, 0, 1, 0],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 1, 1, 0, 1, 1, 0, 0, 1],
    [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
]

def findTileLetter(x, y):
    return grid[y][x]

class Person:
    pass

def showMap():
    for y in range(len(grid)):
        for x in range(len(grid[y])):
            if grid[y][x] == 0:
                sys.stdout.write(' ')
            elif x == MY_X and y == MY_Y:
                sys.stdout.write('x')
            elif (x, y) in ALLOWEDMOVES:
                sys.stdout.write('o')
            else:
                sys.stdout.write('-')
        sys.stdout.write('\n')

me = Person()

ALLOWEDMOVES = []

PLAYERDISTANCE = {}
PLAYERDISTANCE[me] = MY_RNG

PLAYERSPOSITION = {}
PLAYERSPOSITION[me] = (MY_X, MY_Y)

def showPerson(tilex, tiley, personAtTile):
    global ALLOWEDMOVES
    ALLOWEDMOVES = []
    prepare = {k:v for v,k in PLAYERSPOSITION.items()}
    z = PLAYERDISTANCE[personAtTile]
    #get all coords for the possible moves
    currentNewSpots = []
    oldSpots = []
    a = PLAYERSPOSITION[personAtTile][0]
    b = PLAYERSPOSITION[personAtTile][1]
    c = a + 1
    test = findTileLetter(c, b)
    if test:
        currentNewSpots.append((c, b))
        ALLOWEDMOVES.append((c, b))
    c = a -1
    test = findTileLetter(c, b)
    if test:
        currentNewSpots.append((c, b))
        ALLOWEDMOVES.append((c, b))
    c = b + 1
    test = findTileLetter(a, c)
    if test:
        currentNewSpots.append((a, c))
        ALLOWEDMOVES.append((a, c))
    c = b - 1
    test = findTileLetter(a, c)
    if test:
        currentNewSpots.append((a, c))
        ALLOWEDMOVES.append((a, c))

    showMap()

    for x in range(PLAYERDISTANCE[prepare[(tilex, tiley)]]):
        for y in range(len(currentNewSpots)):
            a = currentNewSpots[y][0]
            b = currentNewSpots[y][1]
            c = a + 1
            test = findTileLetter(c, b)
            if test and ((c, b)) not in ALLOWEDMOVES:
                currentNewSpots.append((c, b))
                ALLOWEDMOVES.append((c, b))
            c = a - 1
            test = findTileLetter(c, b)
            if test and ((c, b)) not in ALLOWEDMOVES:
                currentNewSpots.append((c, b))
                ALLOWEDMOVES.append((c, b))
            c = b + 1
            test = findTileLetter(a, c)
            if test and ((a, c)) not in ALLOWEDMOVES:
                currentNewSpots.append((a, c))
                ALLOWEDMOVES.append((a, c))
            c = b - 1
            test = findTileLetter(a, c)
            if test and ((a, c)) not in ALLOWEDMOVES:
                currentNewSpots.append((a, c))
                ALLOWEDMOVES.append((a, c))
        showMap()

showPerson(MY_X, MY_Y, me)
print ALLOWEDMOVES
"
Getting name of attributes with Scrapy XPATH,">>> selector.xpath('//element').xpath('@*').extract()
[u'value1', u'value2']
>>> selector.xpath('//element').xpath('name(@*)').extract()
[u'attr1']
>>> 
"
Raspberry Pi analog read,"#setup to recieve analog data
it = util.iterator(board)
it.start()
board.analog[0].enable_reporting()
# later to read
board.analog[0].read()
"
Slicing a dictionary,"print({k:d[k] for k in l if k in d})
"
Is there a better way to get a named series of constants (enumeration) in Python?," from __future__ import generators

 def enumerate(iterable):
   number = 0
   for name in iterable:
     yield number, name
     number += 1
"
python print in format way unknow list length,"print ('%-2s ' * len(l))[:-1] % tuple(l)
"
Get non-duplicate rows from numpy array,"# Consider each row as indexing tuple & get linear indexing value             
lid = np.ravel_multi_index(x.T,x.max(0)+1)

# Get counts and unique indices
_,idx,count = np.unique(lid,return_index=True,return_counts=True)

# See which counts are exactly 1 and select the corresponding unique indices 
# and thus the correspnding rows from input as the final output
out = x[idx[count==1]]
"
Creating a new dict with old keys but with subvalues,"g = {0: (1,2,3),1: (3,4,5),2: (4,5,6),3: (7,8,9)}
g2 = dict()
for key in g.keys():
    old_vals=set(g[key])
    new_vals=[]
    for val in old_vals:
        try:
            new_vals.extend(g[val])
        except KeyError:
            pass
    new_vals = tuple(set(new_vals)-old_vals)
    g2[key]=new_vals
"
Scrapy xpath how to,"details = site.select('//*[@id=""detailFacts""]/div[1]|div[2]/div[2]//text()').extract()
item['details'] = next(s for s in details if s)  # getting first not-empty item from the list
"
Dictionary int:variable(reference) in python," class mutable_structure:
   def __init__(self, val):
     self.val = val

   def __repr__(self):
     return self.val
"
How to split a string by a string except when the string is in quotes in python?,"((?:(?!\band\b)[^'])*(?:'[^'\\]*(?:\\.[^'\\]*)*'(?:(?!\band\b)[^'])*)*)(?:and|$)
"
Python 3 control multiprocessing,"def start_process(queue):                                                       
  while True:                                                                   
    try:                                                                        
        m = queue.get()                                                         
        if m == 'exit':                                                         
            print ('cleaning up worker...')                                     
            # add here your cleaning up code
            break
        else:
            print (m)
    except KeyboardInterrupt:
        print ('ignore CTRL-C from worker')
  print('goodbye cruel world')


if __name__ == '__main__':
  queue = Queue()

  process = Process(target=start_process, args=(queue,))
  process.start()

  queue.put(12)
  print ('sending exit')
  queue.put('exit')
  process.join()
"
python re match string in a file,">>> p_number = re.compile(r'(0D[\S]{13}|\d{15})')
>>> for s in ['0Dfannawhoopowe foo', 
              'foo 012345678901234', 
              '012345678901234 foo']:
...     match = p_number.match(s)
...     if match:
...         print match.groups()
... 
('0Dfannawhoopowe',)
('012345678901234',)
"
Fix values that are typed into a doublespinbox in PyQt,"def change_value1(self, val): # new value is passed as an argument
    # so no need for this
    # val = self.spinbox1.value()

    new_val = round(val*5)/5 # one way to fix
    if val != new_val:       # if value is changed, put it in the spinbox
        self.spinbox1.setValue(new_val)

    self.lcd1.display(new_val)
"
How to pass in a starting sequence number to a Django factory_boy factory?,"# File: factories.py
from .models import Book
import factory

starting_seq_num = 0

class BookFactory(factory.Factory):
  FACTORY_FOR = BookModel  
  title = factory.Sequence(lambda n: u'Title #{}'.format(n))

  @classmethod
  def _setup_next_sequence(cls):      
      # Instead of defaulting to starting with 0, start with starting_seq_num.
      return starting_seq_num

# File: make_data.py
import factories

factories.starting_seq_num = 100    
factories.BookFactory().create()
"
Regular Expressions to parse template tags in XML,"import lxml.etree as ET
from lxml.etree import XMLParser

def worthy(elem):
    for child in elem.iterchildren():
        if (child.tag == 't') and (child.text is not None):
            return True
    return False

def dump(elem):
    for child in elem.iterchildren():
        print ""Good"", child.tag, child.text

parser = XMLParser(ns_clean=True, recover=True)
etree = ET.parse('regex_trial.xml', parser)
for thing in etree.findall(""//""):
    if thing.tag == 'tc' and worthy(thing):
        dump(thing)
"
Permutations of list of lists,">>> from itertools import product
>>> list(product(*[[1,2],[3],[4]]))
[(1, 3, 4), (2, 3, 4)]
>>> list(product(*[[1,2,3,4],[2,3],[4,5,6,7],[1]]))
[(1, 2, 4, 1), (1, 2, 5, 1), (1, 2, 6, 1), (1, 2, 7, 1), 
 (1, 3, 4, 1), (1, 3, 5, 1), (1, 3, 6, 1), (1, 3, 7, 1), 
 (2, 2, 4, 1), (2, 2, 5, 1), (2, 2, 6, 1), (2, 2, 7, 1), 
 (2, 3, 4, 1), (2, 3, 5, 1), (2, 3, 6, 1), (2, 3, 7, 1), 
 (3, 2, 4, 1), (3, 2, 5, 1), (3, 2, 6, 1), (3, 2, 7, 1), 
 (3, 3, 4, 1), (3, 3, 5, 1), (3, 3, 6, 1), (3, 3, 7, 1), 
 (4, 2, 4, 1), (4, 2, 5, 1), (4, 2, 6, 1), (4, 2, 7, 1), 
 (4, 3, 4, 1), (4, 3, 5, 1), (4, 3, 6, 1), (4, 3, 7, 1)]
"
Rearranging sections of lines of a file using regular expressions python,"file_to_change = 'testingthecodexlconverter.csv'

file1 = open(file_to_change, 'r+')

with file1  as f:
    for line in f:
        line = line[2:-12]

        tokens = line.split(',')

        # if column index 3 is empty then print without formatting for
        # unnecessary space.
        if not tokens[3]:
            print(tokens[0] + "", "" + tokens[2].strip("" "") + "", "" + tokens[1] + "",,,"")
        else:
            print(tokens[0] + "","" + tokens[3] +  "", "" + tokens[2].strip("" "") + "", "" + tokens[1] + "",,,"")
"
Save file list into text file using python,"with open(""temp.txt"", ""w"") as f:  # with automatically closes your files
    my_l = [x.replace("".jpg"", """").rsplit(""_"", 1) for x in glob.glob(""*.jpg"")]
    for l in my_l:
        f.write(str(l).replace("","", """"))
"
Sibling nodes in ElementTree in Python,"# create snail element
snail = dom.createElement('snail')
snail_text = dom.createTextNode('2')
snail.appendChild(snail_text)

# add it in the right place
profile = dom.getElementsByTagName('profile')[0]
pineapples = dom.getElementsByTagName('pineapples')[0]
profile.insertBefore(snail, pineapples)
"
Properly combining 2 different files,"list1 = map(list,csv.reader(open(""text1"")))
list2 = map(list,csv.reader(open(""text2"")))

with open(""combined.txt"",""wb"") as f:
    csv.writer(f).write_rows(zip(*(zip(*list1)+zip(*list2))))
"
something like partial/selective np.ndenumerate?,"In [243]: for tup in np.ndindex((F.shape[0],F.shape[2])):
    tup1=(tup[0],slice(None),tup[1])
    F[tup]=[tup[0],np.nan,tup[1]]
   .....:     
"
minimum of list of lists,"from operator import itemgetter
min(gen,key=itemgetter(1))
"
writing string to a file on a new line everytime?,f.write('text to write\n')
adding values to default dict list of values,">>> d = {'a': (0, 1, 2), 'b': (1, 2, 3)}
>>> d['a'] = d['a'] + (3,)
>>> d['a']
>>> (0, 1, 2, 3)
"
Django: Check which related object exists,"def some_function(user, ...):
    if Userprofile.objects.filter(user=user).exists()
        profile = user.userprofile
        profile.profile_pic.save('{0}_social.jpg'.format(user.username))
        profile.save()
    elif Recruiter.objects.filter(user=user).exists()
        recruiter = user.recruiter
        recruiter.cover_pic.save('{0}_social.jpg'.format(user.username))
        recruiter.save()
    else:
        # User has neither Userprofile nor Recruiter associated with it!
        # Do something here to handle that case, or just get rid of the else
"
"how to make an entry into a string, and then into an input so I can put 4 entries into a formula?","from Tkinter import *

root = Tk()
root.title(""TkApp"")

var = StringVar()

def varWriter(*args):
    print var.get()
    print type(var.get())
    print int(var.get())
    print type(int(var.get()))
    print float(var.get())
    print type(float(var.get()))
var.trace(""w"", varWriter)

label = Label(root, textvariable=var)
label.pack()

text_entry = Entry(root, textvariable=var)
text_entry.pack()

root.mainloop()
"
How to iterate over all optional arguments and related values?,"
import argparse

parser = argparse.ArgumentParser()
parser.add_argument(""--opt"", action='append')

args = parser.parse_args()
print(args.opt)
"
Getting cumulative counts of word frequencies founds in a documents,"import operator

fdists = [(u'seeing', 2), (u'said.', 2), (u'one', 2), (u'death', 2), (u'entertainment',   2), (u'it\u2019s', 2), (u'weiss', 2), (u'read', 2), (u'\u201cit', 1), (u'shot', 1), (u'show\u2019s', 1), (u'people', 1), (u'dead,\u201d', 1), (u'bloody', 1)]
fdists2 = [(u'seeing', 3), (u'said.', 4), (u'one', 2), (u'death', 2), (u'entertainment',   2), (u'it\u2019s', 2), (u'weiss', 2), (u'read', 2)]
fdists += fdists2

fdict = {}
for i in fdists:
    if i[0] in fdict:
        fdict[i[0]] += i[1]
    else:
        fdict[i[0]] = i[1]

sorted_f = sorted(fdict.items(), key=operator.itemgetter(1), reverse=True)
print sorted_f[:30]

[(u'said.', 6), (u'seeing', 5), (u'death', 4), (u'entertainment', 4), (u'read', 4), (u'it\u2019s', 4), (u'weiss', 4), (u'one', 4), (u'\u201cit', 1), (u'shot', 1), (u'show\u2019s', 1), (u'people', 1), (u'dead,\u201d', 1), (u'bloody', 1)]
"
For-Loop Execution in Python - Does the Executable Code Reset?,"import csv
import matplotlib.pyplot as plt


def crime_rate(*state):
    for s in state:
        r = csv.reader(open('CrimeStatebyState.csv', 'rb'))
        line1 = r.next()
        orig_dict = {}
        for n in range (1960,2006):
            orig_dict[n] = []
        for line in r:
            if line[0] == s:
                orig_dict[int(line[3])].append(int(line[4]))
        for y in orig_dict:
            orig_dict[y] = sum(orig_dict[y])
        plt.plot(orig_dict.keys(), orig_dict.values(),'r')
        print orig_dict.values()
        print s

crime_rate(""Alabama"", ""California"", ""New York"")
"
How to operate on list of data frame in one instruction,"df1 = ...
df2 = ...
df3 = ...
df4 = ...
"
how to get value from a list of tuples and make a new list,">>>arr = [('first_name', u'Renier'), ('second_name', u''), ('surname', u'de Bruyn'), ('own_transport', u'True'), ('id_number', u'910920254081'), ('id_type', u'IDNumber'), ('id_nationality', u'ZA'), ('disabilities_list', u'Intellectual Disability'), ('disabilities_list', u'Memory Loss'), ('disabilities_list', u'Mental Illness'), ('disabilities_list', u'Physical Disability'), ('disabilities_list', u'Speech and Language Disorders'),...]
>>>
>>>[k[1] for k in arr if k[0] == ""disabilities_list[]""] 
[u'Intellectual Disability', u'Memory Loss', ...]
"
How to retrieve and display a Vimeo video's JSON data in python 3.x?,"import urllib.request, json

response = urllib.request.urlopen('http://vimeo.com/api/v2/video/31161781.json')
content = response.read()
data = json.loads(content.decode('utf8'))
"
How to delete some characters from a string by matching certain character in python,"string = string.split(',', 1)[0]
"
Iterating through a dictionary for X number of times,"from heapq import nlargest
for key in nlargest(10, x, key=x.get):
    print key, x[key]
"
Pandas split column name,"df['level'] = np.where(df['group_level'].str.endswith('Low'), 'Low', 'High')
df['group'] = np.where(df['group_level'].str.endswith('Low'), df['group_level'].str[:-3], df['group_level'].str[:-4])

df

    group_level level     group
0     group0Low   Low    group0
1    group0High  High    group0
2     group1Low   Low    group1
3    group1High  High    group1
4      routeLow   Low     route
5     routeHigh  High     route
6   landmarkLow   Low  landmark
7  landmarkHigh  High  landmark
"
"In Django, how can I view all the properties of my user?","print [""{0}: {1}"".format(field.name, getattr(request.user, field.name)) for field in request.user._meta.fields]
"
Python bank game won't go back up,"while abs(account) < 0.000000001:
"
sorting a nested list by both members of an element,"sorted_inner = [[k, sorted(l)] for k, l in list_1]
sorted_outer = sorted(sorted_inner)
"
Assigning int values to each dictionary entry as well as having reference numbers?,">>> mydict={}
>>> mydict.update({}.fromkeys(['1','2','3'],8.5))
>>> mydict
{'1': 8.5, '3': 8.5, '2': 8.5}
>>> mydict.update({}.fromkeys(['4', '5', '6'],13.5))
>>> mydict
{'1': 8.5, '3': 8.5, '2': 8.5, '5': 13.5, '4': 13.5, '6': 13.5}
"
Can argparse in python 2.7 be told to require a minimum of TWO arguments?,"import argparse

parser = argparse.ArgumentParser(description = ""Compare files"")
parser.add_argument('first', help=""the first file"")
parser.add_argument('other', nargs='+', help=""the other files"")

args = parser.parse_args()
print args
"
Influence of choosing string as seed of random on the output,">>> import random
>>> random.seed(42)
>>> for i in range(10):
...   s.sort(key=lambda i:random.random())
...   print ''.join(s)
...
gabecdf
dbgfeac
agbfdce
cebdgaf
fgedbca
afbecgd
bcaegfd
aebcdfg
bacgfed
fgdebca
"
How to gracefully break up a long string,"for i in range(2, l + 1):
    replace_index = ""//form[@id='SubAvailSelectForm']/font/table[2]/tbody/tr[%d]/td[1]/small"" % (i,)
    job_count_array[replace_index] = sel.get_text(replace_index)
"
Call a macro with parameters : Python win32com API,"import win32com.client
xl=win32com.client.Dispatch(""Excel.Application"")
xl.Visible = True
Path = ""C:\\Program Files\\Microsoft Office\\Office14\\XLSTART\\perso.xlsm""
xl.Workbooks.Open(Filename=Path)
param1 = ""Jeremy""
param2 = 3
xl.Application.Run(""Proc"", param1, param2)
"
sorting list of lists Python 2.7,"povijest = sorted([sorted(i) for i in provijest])
"
How to conver this list/tuple in the following list in Python?,">>> x = [[(u'reads_2.fq',), (u'reads_2.fq',), (u'reads_2.fq',), (u'reads_2.fq',), (u'reads_2.fq',)]]
>>> [y[0] for y in x[0]]
[u'reads_2.fq', u'reads_2.fq', u'reads_2.fq', u'reads_2.fq', u'reads_2.fq']
"
"Python Regex Picking ""not include"" word","# -*- coding: utf-8 -*-
import re
p = re.compile(ur'\b[^\Wa]+\b', re.UNICODE)
s = u""asfdba12312sssdr1 12şljş1 kf""
res = [x.encode('utf8') for x in p.findall(s)]
print(res)
"
Pandas - Replace Integers with Floats,">>> df2['A'].astype(float).replace([1, 2, 3, 4, 5], [1, 0.85, 0.70, 0.55, 0.40])
0    1.00
1    0.85
2    0.70
3    0.55
4    0.40
Name: A, dtype: float64
"
Writing a class inside a function in python,"def func(**args):
   class BindArgs(object):
       foo = args['foo']
       print 'foo is ', foo
       def __init__(self,args):
          print "" hello i am here""
   return BindArgs

f = func(foo=3)
f(args=""yellow"")
"
What is the most pythonic way to iterate over OrderedDict,">>> for i, (key, value) in enumerate(d.items()):
...     print(i, key, value)
"
Pandas: Reindexing dataframe won't keep initial values,"df = pd.read_csv('http://pastebin.com/raw/yeHdk2Gq', index_col=0)\
       .reindex([round(i, 5) for i in np.arange(0.6, 3.5, 0.01)])\
       .interpolate(kind='cubic', axis=0)
"
Restrict kivy's TextInput to only ascii characters,"class AsciiInput(TextInput):

    def insert_text(self, string, from_undo=False):
        string = string.decode(""ascii"", errors='ignore')
        return super(AsciiInput, self).insert_text(string, from_undo=from_undo)
"
Change string encoding of pandas MultiIndex,"In [27]: temp = df.reset_index()

In [29]: temp['b'] = temp['b'].str.decode('iso-8859-1').str.encode('utf-8')

In [30]: df = temp.set_index(['a', 'b'])
"
Get required fields from Document in mongoengine?,"[k for k, v in User._fields.items() if v.required]"
Making a dictionary from a list of lists,"for aminoacid, sequence in condondict.iteritems():
    # do stuff with with data...
"
Design heuristics for writing Python classes that interact with `scipy.integrate.odeint`?,"class Foo(object):
    def __init__(self, x):
        self.x = x

    def dosomething(self, y):
        _dosomething(self.x, y)

@numba.jit(nopython=True)
def _dosomething(x, y):
    for i in range(len(x)):
        x[i] += y[i]
"
changing ** operator to power function using parsing?,"from pyparsing import *

# define some basic operand expressions
number = Regex(r'\d+(\.\d*)?([Ee][+-]?\d+)?')
ident = Word(alphas+'_', alphanums+'_')

# forward declare our overall expression, since a slice could 
# contain an arithmetic expression
expr = Forward()
slice_ref = '[' + expr + ']'

# define our arithmetic operand
operand = number | Combine(ident + Optional(slice_ref))

# parse actions to convert parsed items
def convert_to_pow(tokens):
    tmp = tokens[0][:]
    ret = tmp.pop(-1)
    tmp.pop(-1)
    while tmp:
        base = tmp.pop(-1)
        # hack to handle '**' precedence ahead of '-'
        if base.startswith('-'):
            ret = '-pow(%s,%s)' % (base[1:], ret)
        else:
            ret = 'pow(%s,%s)' % (base, ret)
        if tmp:
            tmp.pop(-1)
    return ret

def unary_as_is(tokens):
    return '(%s)' % ''.join(tokens[0])

def as_is(tokens):
    return '%s' % ''.join(tokens[0])

# simplest infixNotation - may need to add a few more operators, but start with this for now
arith_expr = infixNotation( operand,
    [
    ('-', 1, opAssoc.RIGHT, as_is),
    ('**', 2, opAssoc.LEFT, convert_to_pow),
    ('-', 1, opAssoc.RIGHT, unary_as_is),
    (oneOf(""* /""), 2, opAssoc.LEFT, as_is),
    (oneOf(""+ -""), 2, opAssoc.LEFT, as_is),
    ])

# now assign into forward-declared expr
expr <<= arith_expr.setParseAction(lambda t: '(%s)' % ''.join(t))

assert ""2**3"" == expr
assert ""2**-3"" == expr

# test it out
tests = [
    ""2**3"",
    ""2**-3"",
    ""2**3**x5"",
    ""2**-3**x6[-1]"",
    ""2**-3**x5+1"",
    ""(a+1)**2"",
    ""((a+b)*c)**2"",
    ""B**2"",
    ""-B**2"",
    ""(-B)**2"",
    ""B**-2"",
    ""B**(-2)"",
    ""B**2&&T**2*X"",
    ]

x5 = 2
a,b,c = 1,2,3
B = 4
x6 = [3,2]
for test in tests:
    print test
    xform = expr.transformString(test)[1:-1]
    print xform
    print '**' not in xform and eval(xform) == eval(test)
    print
"
Django help - how to get data from foreign keys,">>> ObjectVersion.objects.filter(...).values_list('Cabinet__name')
[('foo',), ('foo2',), ...]
"
Python: flip a precise bit in a double,"from struct import *

def bitflip(x,pos):
    fs = pack('d',x)
    bval = list(unpack('BBBBBBBB',fs))
    [q,r] = divmod(pos,8)
    bval[q] ^= 1 << r
    fs = pack('BBBBBBBB', *bval)
    fnew=unpack('d',fs)
    return fnew[0]
"
Numpy: Transform sparse matrix to ndarray,">>> flat_array = np.asarray(g).flatten()
>>> flat_array
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
"
Mapping 2 lists in Python 2.7,"mapping = {}
for a, b in list2:
    mapping.setdefault(b, []).append(a)
list3 = [[a, b] + mapping[b] for a, b in list1 if b in mapping]
"
Garbage-collect a lock once no threads are asking for it,"import threading

class ArgLocker:
    def __init__(self):
        self.xs = dict() # maps x to (lock, count) pair
        self.lock = threading.Lock()

    def __call__(self, x):
        return AllMine(self.xs, self.lock, x)

class AllMine:
    def __init__(self, xs, lock, x):
        self.xs = xs
        self.lock = lock
        self.x = x

    def __enter__(self):
        x = self.x
        with self.lock:
            xlock = self.xs.get(x)
            if xlock is None:
                xlock = threading.Lock()
                xlock.acquire()
                count = 0
            else:
                xlock, count = xlock
            self.xs[x] = xlock, count + 1

        if count: # x was already known - wait for it
            xlock.acquire()
        assert xlock.locked

    def __exit__(self, *args):
        x = self.x
        with self.lock:
            xlock, count = self.xs[x]
            assert xlock.locked
            assert count > 0
            count -= 1
            if count:
                self.xs[x] = xlock, count
            else:
                del self.xs[x]
            xlock.release()
"
Expanding NumPy array over extra dimension,">>> np.tile(b,(2,2,2))
array([[[ 1.,  0.,  1.,  0.],
        [ 0.,  1.,  0.,  1.],
        [ 1.,  0.,  1.,  0.],
        [ 0.,  1.,  0.,  1.]],

       [[ 1.,  0.,  1.,  0.],
        [ 0.,  1.,  0.,  1.],
        [ 1.,  0.,  1.,  0.],
        [ 0.,  1.,  0.,  1.]]])
"
Sort a Dictionary in Python Based on its Keys (when all keys are ints),">>> from collections import OrderedDict
>>> data = {4:'str1', 19:'str2', 1:'str3', 7:'str4'}
>>> orderedData = OrderedDict(sorted(data.items()))
>>> orderedData
OrderedDict([(1, 'str3'), (4, 'str1'), (7, 'str4'), (19, 'str2')])
"
Python - Print random number of lines from file,"randomNames = random.sample(nameLines, random.randint(1, 2))
"
strncmp in python,"if 'foobar'.startswith('foo'):
    print ""it does!""
"
Embedding a Pygame window into a Tkinter or WxPython frame,"import pygame
import Tkinter as tk
from Tkinter import *
import os

root = tk.Tk()
embed = tk.Frame(root, width = 500, height = 500) #creates embed frame for pygame window
embed.grid(columnspan = (600), rowspan = 500) # Adds grid
embed.pack(side = LEFT) #packs window to the left
buttonwin = tk.Frame(root, width = 75, height = 500)
buttonwin.pack(side = LEFT)
os.environ['SDL_WINDOWID'] = str(embed.winfo_id())
os.environ['SDL_VIDEODRIVER'] = 'windib'
screen = pygame.display.set_mode((500,500))
screen.fill(pygame.Color(255,255,255))
pygame.display.init()
pygame.display.update()
def draw():
    pygame.draw.circle(screen, (0,0,0), (250,250), 125)
    pygame.display.update()
    button1 = Button(buttonwin,text = 'Draw',  command=draw)
    button1.pack(side=LEFT)
    root.update()

while True:
    pygame.display.update()
    root.update()      
"
How can I pass a .txt file as a function parameter,"def my_func(data):
    if isinstance(data, basestring):
        with open(data, 'rb') as f:
            return my_func(f)
    ...
"
Removing Elements in A from B,"from collections import defaultdict

a = [1, 2, 3]
b = [1, 2, 3, 1, 2, 3]

# Build up the count of occurrences in b
d = defaultdict(int)
for bb in b:
    d[bb] += 1

# Remove one for each occurrence in a
for aa in a:
    d[aa] -= 1

# Create a list for all elements that still have a count of one or more
result = []
for k, v in d.iteritems():
    if v > 0:
        result += [k] * v
"
Split string by hyphen,"s=""18'-6""

a, b = s.replace(""'"","""").split(""-"")
print(a,b)
"
Concatenating some string elements in a list with a given string,">>> mylist = ['A', 'B', 'C', 'D']
>>> x = '1'
>>> ix = [False, True, False, True]
>>> [value + x if flag else value for value, flag in zip(mylist, ix)]
['A', 'B1', 'C', 'D1']
"
"python3 variable expansion ""a""*x to add empty elements in a list",">>> l = [''] * 5  
>>> l  
['', '', '', '', '']  
"
How to extract from a Python list while also accounting for the position of the extracted elements?,"from collections import defaultdict

indexes = defaultdict(list)
for i, val in enumerate([4,6,7,21,1,7,3]):
    if val <= 4:
        indexes[val].append(i)
"
loops & string processing error due to logical flaw - python,"if ('data science' in str(item).lower()) or ('open source' in str(item).lower()):
    if ('data science' in str(item).lower()):
        tags.append('data science')
    else:
        tags.append('open source')
else:
    item = str(item).lower().split(' ')
    tags.extend([e.strip(""'():,&;+?][ "") for e in item if e not in remove]
"
How to dynamically create classes inside a module-level initialize() method in Python,"import sys

Base = declarative_base()
if len(sys.argv) > 1 and sys.argv[1] == '--use-alt-db':
    engine = create_engine('mysql://user:pass@alt_host/db_name')
else:
    engine = create_engine('mysql://user:pass@main_host/db_name')

table = Table('something', Base.metadata, autoload_with=engine)

class Something(Base):
    __table__ = table
"
Why won't Python Multiprocessing Workers die?,"from contextlib import closing

def computeStuff(arguments, globalData, concurrent=True):
    with closing(multiprocessing.Pool(initializer=initWorker, initargs=(globalData,))) as pool:
        return pool.map(workerFunction, enumerate(arguments))
"
Python numpy.nan and logical functions: wrong results,">>> (None and True) is None
True
>>> [] and True
[]
>>> [] and False
[]
>>> 
"
Order tuple elements,"b=""""""KLM75, Amsterdam, 14:35, 60, 50
AF111, Paris, 14:20, 50, 64
LH333, Frankfurt, 14:10, 112, 203
KLM71, Madrid, 14:55, 120, 100
TAP103, Salvador, 15:20, 174, 210
LH123, Berlin, 15:10, 115, 210""""""

print(sorted(b.split('\n'),key=lambda x:x.split(',')[2]))
['LH333, Frankfurt, 14:10, 112, 203', 'AF111, Paris, 14:20, 50, 64', 'KLM75, Amsterdam, 14:35, 60, 50', 'KLM71, Madrid, 14:55, 120, 100', 'LH123, Berlin, 15:10, 115, 210', 'TAP103, Salvador, 15:20, 174, 210']
"
How can I import a python file through a command prompt?,"# run.py
import sys
problem = __import__(sys.argv[1], fromlist=[""main""])         # I have also tired 'from problem import main' w/ same result
problem.main()
"
Compress a very large number (in Python),"#! /usr/bin/python

n = 313666666666666688888888888888888866666666666666666666666666666610507466666666666666666666666666399509431888888888888888888888888888888888888888888881666666666666

s = str (n)
print (s)
comp = ''
count = None
while s:
    if s [0] in '01234579':
        if count:
            comp += ('<{}>' if count [0] == 6 else '[{}]').format (count [1] )
            count = None
        comp += s [0]
    if s [0] == '6':
        if count and count [0] == 6: count = (6, count [1] + 1)
        elif count:
            comp += ('[{}]').format (count [1] )
            count = (6, 1)
        else: count = (6, 1)
    if s [0] == '8':
        if count and count [0] == 8: count = (8, count [1] + 1)
        elif count:
            comp += ('<{}>').format (count [1] )
            count = (8, 1)
        else: count = (8, 1)
    s = s [1:]

if count: comp += ('<{}>' if count [0] == 6 else '[{}]').format (count [1] )

print (comp)
"
Creating restricted permutations of a list of items by category,"#!/usr/bin/env python

import itertools

items = {
    'fruits' : ('Orange', 'Apple'),
    'toys' : ('GI-Joe', ),
    'electronics' : ('VCR', ),
    'sporting_goods' : ('Racquet', )
}

def combinate(items, size=3):
    if size > len(items):
        raise Exception(""Lower the `size` or add more products, dude!"")

    for cats in itertools.combinations(items.keys(), size):
        cat_items = [[products for products in items[cat]] for cat in cats]
        for x in itertools.product(*cat_items):
            yield zip(cats, x)

if __name__ == '__main__':
    for x in combinate(items):
        print x
"
Making cvs file of facebook friends with python to import in new profile,"import csv
import sys

with open('myContactList.csv', 'wt') as f:
        writer = csv.writer(f)
        writer.writerow( ('First Name', 'Last Name') )
        for a, b in zip(lsNames, lsLastnames):
            writer.writerow( (a, ' '.join(map(lambda s:s.decode('utf-8'),b)))
"
ValueError: operands could not be broadcast together with shapes,">>> b = np.array([-6 * np.ones(a.shape), -8 * np.ones(a.shape)])
>>> b
array([[[-6., -6., -6., -6., -6., -6.],
        [-6., -6., -6., -6., -6., -6.]],    
       [[-8., -8., -8., -8., -8., -8.],
        [-8., -8., -8., -8., -8., -8.]]])
>>> np.power(a, b)
"
How to avoid passing shell constructs to executable using Popen,"def run():
    p1 = subprocess.Popen(['./main/foo', '--config', 'config_file'],
      stderr=subprocess.STDOUT,
      stdout=subprocess.PIPE)
    p2 = subprocess.Popen(['tee', 'temp.log'], stdin=p1.stdout)
    p1.stdout.close() # drop our own handle so p2's stdin is the only handle on p1.stdout
    # True if both processes were successful, False otherwise
    return (p2.wait() == 0 && p1.wait() == 0)
"
Beginner Python: Calculation Formatting,"def printBMITable(startHeight, endHeight, startWeight, endWeight):

    for x in range (startWeight, endWeight + 1, 10):
        print ""\t"",x,

    print '\n'

    for i in range(startHeight, endHeight + 1):
        print i,
        for x in range(startWeight, endWeight + 1, 10):
            print str(round(calculateBMI(i, x), 2)).rjust(7),
        print ''
"
Get Document from Node or Element objects with minidom,"from xml.dom import minidom

XML = """"""
<root>
   <x>abc</x>
   <y>123</y>
</root>""""""

dom = minidom.parseString(XML)
x = dom.getElementsByTagName('x')[0]

print x
print x.ownerDocument
"
List Comprehension of Lists Nested in Dictionaries,"from itertools import chain

list(chain.from_iterable(dictA.itervalues()))
"
Python disable while iterating,"with sqlite3.connect("":memory:"") as conn:
    # update will hold in transaction.
    for i in xrange(100):
        conn.execute(""insert ...."")

pass
# sqlite3 will commit now
"
How to check for duplicates with less time in a list over 9000 elements by python,">>> lst = [3] + list(range(10**4))
>>> seen = set()
>>> any(x in seen or seen.add(x) for x in lst)
True
>>> seen
set([0, 1, 2, 3])
"
How to retreive particular values from a list: python,"data['elements'] in selectionsFromTable
"
Improving Numpy speed for Gauss-Seidel (Jacobi) Solver,"expr = ""temp = cr*((1 - 1/(2*ri[1:nr,1:nz]))*v[0:nr-1,1:nz] + (1 + 1/(2*ri[1:nr,1:nz]))*v[2:nr+1,1:nz]) + cz*(v[1:nr,0:nz-1] + v[1:nr,2:nz+1]); v[1:nr,1:nz] = temp""
temp = np.empty((nr-1, nz-1))
...
while ...
    # internal updates
    weave.blitz(expr)
"
How to search nested list grid and give lettered coordinates in Python?,"grid = [[""Z"",""9"",""G"",""Q"",""T"",""3""],
    [""Y"",""8"",""F"",""P"",""S"",""2""],
    [""X"",""7"",""E"",""O"",""R"",""1""],
    [""W"",""6"",""D"",""N"",""M"",""0""],
    [""V"",""5"",""C"",""L"",""K"",""U""],
    [""J"",""4"",""B"",""I"",""H"",""A""]]

search = 'D'

for rownum, row in enumerate(grid):
    for colnum, value in enumerate(row):
       if value == search:
           print ""Found value at (%d,%d)"" % (rownum, colnum)
"
Python convert tuple to string,""""""""""""".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))"
Deleting consonants from a string in Python,"str.maketrans({i:None for i in string.ascii_lowercase if i not in ""aeiou""})
"
Select multiple groups from pandas groupby object,"new_gb = pandas.concat( [ gb.get_group(group) for i,group in enumerate( gb.groups) if i < 5 ] ).groupby('model')    
new_gb.hist()
"
"tkinter Display current label,deleting the previous","import Tkinter as tki
class App(object):
     def __init__(self,root):
         self.root = root

         self.txt_frm = tki.Frame(self.root, width=900, height=900)
         self.txt_frm.pack(fill=""both"", expand=True)
         button3 = tki.Button(self.txt_frm,text=""CLICK 1"", command = self.retrieve_inpu)
         button3.grid(column=0,row=2)
         self.entry = tki.Entry(self.txt_frm)
         self.entry.grid(column=1,row=0)

         #place holder for label variable
         self.label = None

     def retrieve_inpu(self):
        ent = self.entry.get()

        #destroy the widget if it has been created
        #you will have a bunch of orphans if you don't
        if self.label:
            self.label.destroy()

        self.label = tki.Label(self.txt_frm,text=ent)
        self.label.grid(column=0,row=3)

root = tki.Tk()
app = App(root)
root.mainloop()
"
how to scrape imbeded script on webpage in python,"import re
from urlparse import unquote

from bs4 import BeautifulSoup
import requests

url = ""http://rads.stackoverflow.com/amzn/click/1597805483""
page = requests.get(url, headers={'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36'})
soup = BeautifulSoup(page.content)

script = soup.find('script', text=lambda x:'bookDescEncodedData' in x)
match = re.search(r'bookDescEncodedData = ""(.*?)"",', script.text)
if match:
    description_html = BeautifulSoup(unquote(match.group(1)))
    print description_html.text
"
Converting string to raw bytes,"import binascii

binary = binascii.unhexlify(text)
"
Simplification of iterating,"string = ''.join('[{0}{1}]'.format(x[1:], self.obj[x]) for x in self.obj)
"
Download numbered image files in numbered folders from internet using python,"for i in xrange(1900,2001):
    for j in xrange(2000, 4001):
        year = str(i)
        image = str(j)
        new_link = 'http://www.fdci.org/imagelibrary/EventCollection/'+year+'/Big/IMG_'+image+'.jpg'
        print new_link
        #Now you will get the possible links within the given ranges,
        #then you can use urllib2 to fetch the response from the link 
        # and do whatever you wanna do 
"
"How to make a python script which can logoff, shutdown, and restart a computer?","subprocess.call(['shutdown', '/a '])"
Call different function for each list item,"arguments = [1, 2, 3, 4]
functions = [a, b, c, d]

results = [func(arg) for func, arg in zip(functions, arguments)]
"
Best way to encode tuples with json,"simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))"
How to update the values in a dict cleanly?,"for (key, value) in records:
    d[key] = d.get(key, 0) + value
"
How to compare a list of lists/sets in python?,">>> filter(lambda x: x not in secnd_list, first_list) + filter(lambda x: x not in first_list, secnd_list)

[['Test3.doc', '3c3c3c', 3333],
 ['Test3.doc', '8p8p8p', 9999],
 ['Test4.doc', '4d4d4d', 4444]]
"
isinstance() is not behaving as I expect,"In [1]: class C(object): pass
In [2]: a = C()
In [3]: class C(object): pass
In [4]: isinstance(a, C)
Out[4]: False
"
How to remove extra list from the result in python,"resultA = method_A()
resultB = method_B()[0]
"
How to replace parenthesis and text within it in Python string,"trd = str.maketrans('()', '{}')
string1 = string1.translate(trd).format(**word_dict)
string2 = string2.translate(trd).format(**word_dict)
"
Sending Post method manually using Python,"from mechanize import Browser

br = Browser()
r = br.open('http://bac.menara.ma/ministere')
br.select_form(nr=0)
# print br.form    # displays form fields and target URL
br.form['txt1'] = '12345678'
r = br.submit()
html = r.read()
assert 'Nom ; ELOUARDI ASSIA' in html
"
Regex for this dataset,"for line in re.findall(r' (.*)', s):
    print(line)
"
Can I specify another class's instance-method as a variable for my method?,"def uses_file(prefix_default):
    def decorator(f):
        @functools.wraps(f)
        def decorated(self, data, prefix=prefix_default):
            fullpath = obj.myDump + prefix + obj.baseFilename
            with open(fullpath, 'w') as h:
                f(h, data, prefix)
            print ""saved"", % fullpath
            return fullpath
        return decorated
    return decorator
"
How to create mask with multiple alternative values (Pandas DataFrame),"mask = (f[""xx""] == ""a"") | (f[""xx""] == ""b"")

print(f[mask])
"
Format string - spaces between every three digit,"format(12345678.46, ',').replace(',', ' ').replace('.', ',')
"
"Flatten nested JSON (Dict, List) into List to prepare to write into DB (Python)","def splitObj (obj, prefix = None):
'''
Split the object, returning a 3-tuple with the flat object, optionally
followed by the key for the subobjects and a list of those subobjects.
obj needs to be a Dictonary
'''
# copy the object, optionally add the prefix before each key
new = obj.copy() if prefix is None or prefix==""NotFlat"" else { '{}_{}'.format(prefix, k): v for k, v in obj.items() }

cL = 0
cD = 0
# try to find the key holding the subobject or a list of subobjects
for k, v in new.items():
    #Determine the number of lists in v
    if isinstance(v, list):
        cL += 1
    #Determine the number of dict in v
    elif isinstance(v, dict):
        cD += 1     
for k, v in new.items():
    # list of subobjects
    if isinstance(v, list):
        if (cD+cL) <=1:
            try:
                type(v[0])
            except IndexError:
                v = [""""]
            if not isinstance(v[0], str):
                del new[k]
                return new, k, v
            elif isinstance(v[0], str):
                #handle list when only containing strings, return, the whole thing
                #solve other dicts which might be in the line
                #use ""NotFlat"" to run loop again but without adding a prefix

                new[k] = "", "".join(v)
                return new, None, None
            else:
                custLog.logger.info("""")
        elif (cD+cL) >1:

            #print(""Count List2 CD: ""+str(cD))
            #print(""Count LIST2 CL: ""+str(cL))

            #if list is empty
            try:
                type(v[0])
            except IndexError:
                v = [""""]

            if not isinstance(v[0], str):
                del new[k]
                for x in flatten([new]):
                    newOut = x
                    break
                return newOut, k, v
            elif isinstance(v[0], str):
                #handle list when only containing strings, return, the whole thing
                #solve other dicts which might be in the line
                #use ""NotFlat"" to run loop again but without adding a prefix
                new[k] = "", "".join(v)
                return None, ""NotFlat"", [new]
            else:
                custLog.logger.error(""weder noch 2"")

    # or just one subobject
    elif isinstance(v, dict):
        if (cD+cL) <=1:
            del new[k]
            return new, k, [v]
        elif (cD+cL) >1:
            del new[k]
            for x in flatten([new]):
                newOut = x
                break
            return newOut, k, [v]
return new, None, None
"
Reduce all values to one specified,">>> lst = [['Amy,1,""10,10,6""'], ['Bella,3,""4,7,2""'], ['Cendrick,3,""5,1,9""'],
 ['Fella,2,""3,8,4""'], ['Hussain,1,""9,4,3""'], ['Jamie,2,""1,1,1""'], ['Jack,3,""10,8,0""'], ['Thomas,2,""5,0,5""'], ['Zyra,1,""7,8,7""']]

>>> from itertools import chain
>>> lst_flat = chain.from_iterable(lst)
>>> sorted_lst = sorted(filter(lambda x: x.split(',')[1] == '2', lst_flat))
>>> print map(lambda x: (x.split(',')[0],
              max([int(y) for y in x.split('""')[1].split(',')])), sorted_lst)

[('Fella', 8), ('Jamie', 1), ('Thomas', 5)]
"
Convert list of lists of string to list of lists of int,">>> with open('file.txt') as f:
...     rows = [line.strip().split(',') for line in f]
...
>>> rows
[['1', '2', '3', '4', '5', '6', '7'], ['7', '5', '3', '9', '8', '2', '4']]
>>> nums = [list(map(int, row)) for row in rows]
>>> nums
[[1, 2, 3, 4, 5, 6, 7], [7, 5, 3, 9, 8, 2, 4]]
"
python listen 2 port same file,"import SocketServer
import threading


class MyUDPHandler(SocketServer.BaseRequestHandler):
    def handle(self):
        data = self.request[0].strip()
        socket = self.request[1]
        print ""%s wrote:"" % self.client_address[0]
        print data
        socket.sendto(data.upper(), self.client_address)


def serve_thread(host, port):
    server = SocketServer.UDPServer((host, port), MyUDPHandler)
    server.serve_forever()


threading.Thread(target=serve_thread,args=('localhost', 9999)).start()
threading.Thread(target=serve_thread,args=('localhost', 12345)).start()
"
Convert user input strings to raw string literal to construct regular expression,"pattern = re.compile(re.escape(motif))
"
Run python script with telnet,"POST /add HTTP/1.1
Content-type:application/x-http-form-urlencoded

title=foo&text=baz+and+spam+and+eggs
"
Create 3D array using Python,">>> import pprint
>>> n = 3
>>> distance = [[[0 for k in xrange(n)] for j in xrange(n)] for i in xrange(n)]
>>> pprint.pprint(distance)
[[[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
 [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]
>>> distance[0][1]
[0, 0, 0]
>>> distance[0][1][2]
0
"
Python: How to suppress the output of os.system,"import urllib2

response = urllib2.urlopen(theurl)
with open(local_filename, 'w') as dl:
    dl.write(response.read())
"
Grep a range of words from a text file python,">>> s = ""my name is Alex and you're Alex too.""
>>> re.search(r'my.*?Alex', s).group()
'my name is Alex'
"
Duplicate element in python list,">>> from itertools import repeat
>>> [x for item in l for x in repeat(item, 2)]
['a', 'a', 'c', 'c', 'e', 'e', 'b', 'b']
"
tuple of datetime objects in Python,"import datetime

def iso_year_start(iso_year):
    ""The gregorian calendar date of the first day of the given ISO year""
    fourth_jan = datetime.date(iso_year, 1, 4)
    delta = datetime.timedelta(fourth_jan.isoweekday()-1)
    return fourth_jan - delta 

def iso_to_gregorian(iso_year, iso_week, iso_day):
    ""Gregorian calendar date for the given ISO year, week and day""
    year_start = iso_year_start(iso_year)
    return year_start + datetime.timedelta(days=iso_day-1, weeks=iso_week-1)


def week_start_end(date):
    year = date.isocalendar()[0]
    week = date.isocalendar()[1]
    d1 = iso_to_gregorian(year, week, 0)
    d2 = iso_to_gregorian(year, week, 6)
    d3 = datetime.datetime(d1.year, d1.month, d1.day, 0,0,0,0)
    d4 = datetime.datetime(d2.year, d2.month, d2.day, 23,59,59,999999)
    return (d3,d4)
"
Python unittest: having an external function for repetitive code in different modules,"# testutils.py
class LogCheckerMixin(object):
    """""" this class adds log checking abilities to a TestCase.
    """"""  
    def check_logs(self, logs, **kw):
       self.assertWhatever(something)


# myserver/tests.py
import unittest
from testutils import LogCheckerMixin

class MyServerTest(unittest.TestCase, LogCheckerMixin):
    def test_log1(self):
        logs = extract_the_logs()
        self.check_logs(logs, log_1=1, log2='foo')
"
Python: How to import other Python files,"pmName = input('Enter module name:')
pm = __import__(pmName)
print(dir(pm))
"
Python: finding files with matching extensions or extensions with matching names in a list,">>> group_by_extension(test_data)
{'arms': ['exia.arms'],
 'dada': ['otherstuff.dada'],
 'data': ['lockon_stratos.data', 'ribbons_almark.data', 'tieria_erde.data'],
 'frame': ['exia.frame'],
 'gn_drive': ['exia.gn_drive'],
 'head': ['exia.head'],
 'legs': ['exia.legs'],
 'pilot': ['exia.pilot'],
 'swords': ['exia.swords']}
"
if statement vs. expression,">>> from timeit import timeit
>>> timeit('x = 1 - x', 'x = 0')
0.044335126876831055
>>> timeit('x ^= 1', 'x = 0')
0.05133986473083496
>>> timeit('x = ((x + 1) % 2)', 'x = 0')
0.11392998695373535
>>> timeit('x = next(x_values)', 'from itertools import cycle; x_values = cycle((0, 1))')
0.1254570484161377
"
Accesing dictionary with class attribute,"class Bunch(object):
  def __init__(self, adict):
    self.__dict__.update(adict)
"
Extract a larger slice than the numpy array's size,"def wpad(A, begin_at, length):
    to_pad = max(length + begin_at - len(A), 0)
    return np.pad(A, (0, to_pad), mode='wrap')[begin_at:begin_at+length]
"
simplifying routine in python with numpy array or pandas,">>> df.iloc[::2].values + df.iloc[1::2].values
array([[ 1.09369669,  1.13884417,  1.24865749],
       [ 0.82102873,  1.68349804,  1.49255768],
       [ 0.65517386,  0.94581504,  0.9036559 ]])
"
Checking if a certain dictionary is in a list,">>> somelist = [{'x':{'xx':'192.111.1.11'}},{'y':{'yx':'192.111.1.12'}}]
>>> any('x' in d for d in somelist)
True
>>> any('z' in d for d in somelist)
False
"
Generate random number outside of range in python,"import random

screen_width = 1000
screen_height = 800
rect_x = 500
rect_y = 250
rect_width = 100
rect_height = 75

valid_points = []
for x in range(screen_width):
    if rect_x <= x < (rect_x + rect_width):
        for y in range(rect_y):
            valid_points.append( (x, y) )
        for y in range(rect_y + rect_height, screen_height):
            valid_points.append( (x, y) )
    else:
        for y in range(screen_height):
            valid_points.append( (x, y) )

for i in range(10):
    rand_point = random.choice(valid_points)
    print(rand_point)
"
How do I Convert Python Dict to JSON in a Multi-Threaded Fashion,"  if __name__ == '__main__':
     files = ['first.in', 'second.in', 'third.in'] # et cetera
     info('main line')
     p = Pool()
     p.map(convertor, files)
     p.close()
"
python load csv file with quoted fields where commas are used as 1000s separator,"import csv

def try_convert_number(s):
    val = s.replace(',', '')
    try:
        return int(val)
    except ValueError:
        try:
            return float(val)
        except ValueError:
            return s
result = []
# in Python 2 use: with open('file.csv', 'rb') as f:
with open('file.csv', newline='') as f:
    reader = csv.reader(f)
    if you_have_a_header_row:
        next(reader)
    for row in reader:
        result.append(map(try_convert_number, row))
"
Anchor Layout to show many widgets in a screen at relative positions,"from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.widget import Widget
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.anchorlayout import AnchorLayout
from kivy.uix.button import Button


class Container(FloatLayout):
    def __init__(self, **kwargs):
        super(Container, self).__init__(**kwargs)

        anchor_rb = AnchorLayout(anchor_x='right', anchor_y='bottom')
        btn = Button(text='Hello World', size=(100, 100), size_hint=(None, None))
        anchor_rb.add_widget(btn)
        self.add_widget(anchor_rb)

        anchor_lc = AnchorLayout(anchor_x='left', anchor_y='center')
        lbl = Label(text=""Am i a Label ?"", size=(100, 100), size_hint=(None, None))
        anchor_lc.add_widget(lbl)
        self.add_widget(anchor_lc)


class MyJB(App):
    def build(self):

        parent = Container()

        return parent

if __name__ == '__main__':
    MyJB().run()
"
Python construct child class from parent,"class A(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b

    def __str__(self):
        return ""A: a = %s, b = %s"" % (self.a, self.b)

class B(A):
    def __init__(self, *args):
        if type(args[0]) is A:
            self.__dict__ = args[0].__dict__.copy()
            c = args[1]
        else:
            super(B, self).__init__(*args[:2])
            c = args[2]
        self.c = c

    def __str__(self):
        return ""B: a = %s, b = %s, c = %s"" % (self.a, self.b, self.c)
"
Get raw input as an option?,"
import argparse

parser=argparse.ArgumentParser()
parser.add_argument('--shortname')
args=parser.parse_args()

print 'starting: ' + str(args.shortname)
"
How do I get the datetime object of today's 5pm in Python?,">>> import datetime
>>> datetime.datetime.combine(
...     datetime.date.today(), 
...     datetime.time(17, 0))
datetime.datetime(2014, 7, 27, 17, 0)
"
How to avoid similar function definitions in Python?,"def make_callback(m_type, other_type, *attrs):
    def callback(msg):
        m = m_type(msg)
        a = other_type()
        for attr in attrs:
            setattr(a, attr, getattr(m, attr))
        pub2.publish(a)
    return callback

callback1 = make_callback(MsgX, msg_type_a, 'x')
callback2 = make_callback(MsgY, msg_type_b, 't', 'u')
"
Why is numpy.all much slower than python standard all?,"x = []
for i in range(1000):
    x.append(numpy.all((x[i],y[i])))
"
How can I sort data in python by the specific part of data?,"sorted(mycount.items(), key=lambda kv: [c[1] for c in kv[1].most_common()], revers=True)
"
String format function does not parse my slashes character?,"wget = ""wget  http://{IPaddress}"".format(IPaddress=ipAddr)
print ""The command wget is %s"" %wget

os.system(wget)
"
Selecting DataFrame slices by date string,"In [29]: df.loc[df.index.indexer_between_time('20130101 23:59:00','20130102 00:03:00'),'Active'] = True

In [30]: df
Out[30]: 
                            0 Active
2013-01-01 23:55:00  0.273194  False
2013-01-01 23:56:00  2.869795  False
2013-01-01 23:57:00  0.980566  False
2013-01-01 23:58:00  0.176711  False
2013-01-01 23:59:00 -0.354976   True
2013-01-02 00:00:00  0.258194   True
2013-01-02 00:01:00 -1.765781   True
2013-01-02 00:02:00  0.106163   True
2013-01-02 00:03:00 -1.169214   True
2013-01-02 00:04:00  0.224484  False

[10 rows x 2 columns]
"
Efficient way of having a function only execute once in a loop,"def run_once(f):
    def wrapper(*args, **kwargs):
        if not wrapper.has_run:
            wrapper.has_run = True
            return f(*args, **kwargs)
    wrapper.has_run = False
    return wrapper


@run_once
def my_function(foo, bar):
    return foo+bar
"
find length of sequences of identical values in a numpy array,"def runs_of_ones(bits):
  for bit, group in itertools.groupby(bits):
    if bit: yield sum(group)
"
Input function from user matplotlib in python,"from pyparsing import Literal,CaselessLiteral,Word,Combine,Group,Optional,\
    ZeroOrMore,Forward,nums,alphas
from numpy import *
import operator

exprStack = []

def pushFirst( strg, loc, toks ):
    exprStack.append( toks[0] )
def pushUMinus( strg, loc, toks ):
    if toks and toks[0]=='-': 
        exprStack.append( 'unary -' )
        #~ exprStack.append( '-1' )
        #~ exprStack.append( '*' )

bnf = None
def BNF():
    """"""
    expop   :: '^'
    multop  :: '*' | '/'
    addop   :: '+' | '-'
    integer :: ['+' | '-'] '0'..'9'+
    atom    :: PI | E | real | T | fn '(' expr ')' | '(' expr ')'
    factor  :: atom [ expop factor ]*
    term    :: factor [ multop factor ]*
    expr    :: term [ addop term ]*
    """"""
    global bnf
    if not bnf:
        point = Literal( ""."" )
        e     = CaselessLiteral( ""E"" )
        fnumber = Combine( Word( ""+-""+nums, nums ) + 
                           Optional( point + Optional( Word( nums ) ) ) +
                           Optional( e + Word( ""+-""+nums, nums ) ) )
        ident = Word(alphas, alphas+nums+""_$"")

        plus  = Literal( ""+"" )
        minus = Literal( ""-"" )
        mult  = Literal( ""*"" )
        div   = Literal( ""/"" )
        lpar  = Literal( ""("" ).suppress()
        rpar  = Literal( "")"" ).suppress()
        addop  = plus | minus
        multop = mult | div
        expop = Literal( ""^"" )
        pi    = CaselessLiteral( ""PI"" )
        t     = CaselessLiteral( ""T"" )

        expr = Forward()
        atom = (Optional(""-"") + ( pi | e | t | fnumber | ident + lpar + expr + rpar ).setParseAction( pushFirst ) | ( lpar + expr.suppress() + rpar )).setParseAction(pushUMinus) 

        # by defining exponentiation as ""atom [ ^ factor ]..."" instead of ""atom [ ^ atom ]..."", we get right-to-left exponents, instead of left-to-righ
        # that is, 2^3^2 = 2^(3^2), not (2^3)^2.
        factor = Forward()
        factor << atom + ZeroOrMore( ( expop + factor ).setParseAction( pushFirst ) )

        term = factor + ZeroOrMore( ( multop + factor ).setParseAction( pushFirst ) )
        expr << term + ZeroOrMore( ( addop + term ).setParseAction( pushFirst ) )
        bnf = expr
    return bnf

# map operator symbols to corresponding arithmetic operations
epsilon = 1e-12
opn = { ""+"" : operator.add,
        ""-"" : operator.sub,
        ""*"" : operator.mul,
        ""/"" : operator.truediv,
        ""^"" : operator.pow }
fn  = { ""sin"" : sin,
        ""cos"" : cos,
        ""tan"" : tan,
        ""abs"" : abs,
        ""trunc"" : lambda a: int(a),
        ""round"" : round,
        ""sgn"" : lambda a: abs(a)>epsilon and cmp(a,0) or 0}

def evaluateStack( s ):
    op = s.pop()
    if op == 'unary -':
        return -evaluateStack( s )
    if op in ""+-*/^"":
        op2 = evaluateStack( s )
        op1 = evaluateStack( s )
        return opn[op]( op1, op2 )
    elif op == ""PI"":
        return math.pi # 3.1415926535
    elif op == ""E"":
        return math.e  # 2.718281828
    elif op == ""T"":
        return linspace(-4 * pi, 4 * pi, 200)
    elif op in fn:
        return fn[op]( evaluateStack( s ) )
    elif op[0].isalpha():
        return 0
    else:
        return float( op )

def compute(s):   
    global exprStack
    exprStack = []
    results = BNF().parseString( s )
    val = evaluateStack( exprStack[:] )
    return val

fun=raw_input(""Please input a function to be evaluated: "")
print compute(fun)
"
Write value to hidden element with selenium python script,"from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

browser = webdriver.Firefox() # Get local session(use webdriver.Chrome() for chrome) 
browser.get(""http://www.example.com"") # load page from some url
assert ""example"" in browser.title # assume example.com has string ""example"" in title

try:
    # temporarily make parent(assuming its id is parent_id) visible
    browser.execute_script(""document.getElementById('parent_id').style.display='block'"")
    # now the following code won't raise ElementNotVisibleException any more
    browser.find_element_by_xpath(""//input[@itemcode='XYZ']"").send_keys(1)
    # hide the parent again
    browser.execute_script(""document.getElementById('parent_id').style.display='none'"")
except NoSuchElementException:
    assert 0, ""can't find input with XYZ itemcode""
"
python: simple way to input python data from file,"from ConfigParser import RawConfigParser
parser = RawConfigParser({""myvar"": ""default_value""}) # Never use ConfigParser.ConfigParser!
parser.read(""my_config"")
myvar = parser.get(""mysection"", ""myvar"")
"
Python re.split() vs nltk word_tokenize and sent_tokenize,"import time
from nltk.tokenize import ToktokTokenizer

import urllib.request
url = 'https://raw.githubusercontent.com/Simdiva/DSL-Task/master/data/DSLCC-v2.0/test/test.txt'
response = urllib.request.urlopen(url)
data = response.read().decode('utf8')

toktok = ToktokTokenizer().tokenize

for _ in range(10):
    start = time.time()
    for line in data.split('\n'):
        toktok(line)
    print ('toktok:\t', time.time() - start)
"
how to match lines between pattern using re module in python,"pat = re.compile(r'\\##### To extract from here ####'
                 '.*?'
                 r'(?=\\##### To extract till here ####)',
                 re.DOTALL)
"
Python-how to send commands to existing shell?,"import subprocess
subprocess.call(""shell commands go in here"")
"
Curious behaviour of print_function in __future__ module on Python 3,"print('Enter the base path of the images: ', end='')
sys.stdout.flush()
"
How to find the location of a python package installed via egg-link?,"import os
import foo.bar

print(os.path.abspath(foo.bar.__file__))
"
Many numpy array manipulations in one array,"index1 = ((A == 2) & (B > C)) 
index2 = ((A == 2) & (B >= D) & (B <= C)) 
res = np.zeros((100, 100), dtype='uint8')
res[index1] = 5
res[index2] = 4
"
What is the Pythonic way to iterate over a dict of dicts and lists?,">>> D = {
...     'Resent-Bcc': [],
...     'Delivered-To': [],
...     'From': {'Name': 'Steve Watson', 'Address': 'steve.watson@example.org'},
...     'Cc': [],
...     'Resent-Cc': [],
...     'Bcc': [ {'Name': 'Daryl Hurstbridge', 'Address': 'daryl.hurstbridge@example.org'},
...              {'Name': 'Sally Hervorth', 'Address': 'sally.hervorth@example.org'},
...              {'Name': 'Mike Merry', 'Address': 'mike.merry@example.org'},
...              {'Name': 'Jenny Callisto', 'Address': 'jenny.callisto@example.org'}
...            ],
...     'To': {'Name': 'Darius Jedburgh', 'Address': 'darius.jedburgh@example.org'}
... }
>>> L = [v if type(v) is list else [v] for v in D.values()]
>>> [(d[""Name""], d[""Address""]) for item in L for d in item ]
[('Steve Watson', 'steve.watson@example.org'), ('Daryl Hurstbridge', 'daryl.hurstbridge@example.org'), ('Sally Hervorth', 'sally.hervorth@example.org'), ('Mike Merry', 'mike.merry@example.org'), ('Jenny Callisto', 'jenny.callisto@example.org'), ('Darius Jedburgh', 'darius.jedburgh@example.org')]
"
Different file name when saving in loop python/pandas,"new_dir = ""path/to/dir/""
for file1, file2 in zip(files_in_folder_1, files_in_folder_2):
    with open(file1) as f1, open(file2) as f2:
        dftask = pd.read_csv(file2)
        dfresource = pd.read_csv(file1)

    dftask.to_csv(os.path.join(new_dir, file2.name))
    dfresource.to_csv(os.path.join(new_dir,file1.name))
"
Reverse AND inverse python3.x OrderedDict efficiently,"$ python -m timeit ""from collections import OrderedDict as OD; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')))"" ""reverse = OD(attributes.items()[::-1])""
10000 loops, best of 3: 54.8 usec per loop
$ python -m timeit ""from collections import OrderedDict as OD; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')))"" ""reverse = OD(reversed(attributes.items()))""
10000 loops, best of 3: 54.4 usec per loop
$ python -m timeit ""from collections import OrderedDict as OD; attributes = OD((('brand','asus'), ('os','linux'), ('processor','i5'), ('memory','4G')))"" ""reversed_attributes=OD(reversed(list(attributes.items())))""
10000 loops, best of 3: 54.4 usec per loop
"
Getting Python System Calls as string results,"import subprocess
resultMD5 = subprocess.Popen([""md5sum"",""myFile""],stdout=subprocess.PIPE).communicate()[0]
"
How to read python dictionary and tuples,">>> n = 0
>>> def factory():
...     global n
...     print('Factory called!')
...     n += 1
...     return n   #returns numbers 1, 2, 3, 4, ...
... 
>>> D = defaultdict(factory)
>>> D[0]
Factory called!
1
>>> D[0]   # the keys exists, thus the factory is not called.
1
>>> D[1]
Factory called!
2
>>> D[1]
2
"
How to split string into dictionary and return a specific dictionary value?,"import re

print(re.findall(""Name\s+=\s+\""(.*?)\"","",s)[0])
version
"
Most efficient way to convert items of a list to int and sum them up,"sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])"
PyQt application crashes after closing QMessagebox window,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from PyQt4 import QtCore
from PyQt4 import QtGui    

class SystemTrayIcon(QtGui.QSystemTrayIcon):
    def __init__(self, parent=None):
        QtGui.QSystemTrayIcon.__init__(self, parent)

        self.setIcon(QtGui.QIcon(""icon.png""))

        self.iconMenu = QtGui.QMenu(parent)
        appabout = self.iconMenu.addAction(""About"")
        appexit = self.iconMenu.addAction(""Exit"")
        self.setContextMenu(self.iconMenu)

        # Remove this next line, it isn't needed
        #self.aboutdialog = QtGui.QWidget(parent)

        self.connect(appabout,QtCore.SIGNAL('triggered()'),self.showAbout)
        self.connect(appexit,QtCore.SIGNAL('triggered()'),self.appExit)

        # Remove this next line, it isn't needed
        #self.show()


    def showAbout(self):
        # Before showing the message box, disable the tray icon menu
        self.iconMenu.setEnabled(false)
        # Replace self.aboutdialog with the Python equivalent of null (0?)
        QtGui.QMessageBox.information(0, self.tr(""About Tunarium""), self.tr(""Your text here.""))
        # Re-enable the tray icon menu
        self.iconMenu.setEnabled(true)

    def appExit(self):
        # Replace the next line with something that calls the QApplication's
        #   exit() or quit() function.
        #sys.exit()
        app.quit()


if __name__ == ""__main__"":
    app = QtGui.QApplication(sys.argv)
    # Tell the application not to exit when the last window is closed. This should 
    # prevent the application from exiting when the message box is closed.
    app.setQuitOnLastWindowClosed(false)

    trayIcon = SystemTrayIcon()
    trayIcon.show()

    sys.exit(app.exec_())
"
Is there a in built method from python csv module to enumerate all possible value for a specific column?,"import pandas as pd

df = pd.read_csv('many_cols.csv')

for col in df.columns:
    print(col, df[col].drop_duplicates().tolist())
"
Equality of dictionaries,"sentinel = object()     #a new object, guaranteed not in dictionary
all( d1.get(x, sentinel) == d2.get(x, sentinel) for x in l )
"
Random number between specific values,">>> import random
>>> [random.randrange(0, 11, 2) for _ in range(20)]
[6, 8, 6, 0, 4, 4, 8, 4, 10, 10, 6, 8, 10, 6, 0, 10, 2, 10, 4, 2]
"
List of References in Google App Engine for Python,"def prefetch_refprops(entities, *props):
    """"""Dereference Reference Properties to reduce Gets.  See:
    http://blog.notdot.net/2010/01/ReferenceProperty-prefetching-in-App-Engine
    """"""
    fields = [(entity, prop) for entity in entities for prop in props]
    ref_keys = [prop.get_value_for_datastore(x) for x, prop in fields]
    ref_entities = dict((x.key(), x) for x in db.get(set(ref_keys)))
    for (entity, prop), ref_key in zip(fields, ref_keys):
        prop.__set__(entity, ref_entities[ref_key])
    return entities  
"
"""Expanding"" pandas dataframe by using cell-contained list","import pandas as pd

df = pd.DataFrame({""data"": ['a', 'b', 'c']})
df['col1'] = 1
df['col2'] = 2
print df
"
How to disallow spaces in between literals in pyparsing?,">>> grammar = pyparsing.Combine(Literal(""from"") + Literal("":"") + Word(pyparsing.alphas))
>>> grammar.parseString('from : mary')
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/usr/lib/pymodules/python2.6/pyparsing.py"", line 1076, in parseString
    raise exc
pyparsing.ParseException: Expected "":"" (at char 4), (line:1, col:5)
>>> grammar.parseString('from:mary')
(['from:mary'], {})
"
Python trying to sort a list alphabetically after it has been sorted numerically,"def print_top(filename):
    word_count = word_dictionary(filename)
    items = sorted(word_count.items(), key=get_count, reverse=True)
    for item in sorted(items[:20]):
        print item[0], item[1]
"
Reshaping arrays in an array of arrays," A.reshape(40, 3, 50)
"
Adding multiple values to an existing dictionary as SETS,">>> i = {""a"": ""111"", ""b"": ""222"", ""c"": [""333"", ""444""]}
>>> {k: set(v) for k, v in i.items()}
{'b': {'2'}, 'a': {'1'}, 'c': {'444', '333'}}
"
how to divide integer and take some part,">>> a = 1029108219821082904444333322221111
>>> a % 10**16
4444333322221111
"
Python IF Statement not being displayed,"if cont.lower() == ""n"":
"
GQL - Select all parents where specific child is not in children,"groups = db.GqlQuery(""SELECT * ""
                     ""FROM Group"")        

for g in groups:                
   if user.key() not in g.users:                    
      group = g
      break

group.users.append(user.key())
"
Random word generator termination condition malfunctioning,"import random
import string

vowels = 'aeiou'
consonants = [c for c in string.ascii_lowercase if c not in vowels]
consonants += ['th','ch','sh','st','ck']

n = random.randint(1, 2)
word = ''
struct = ''

while len(struct) < 3 or n:  # minimum length 3
    if n == 1:
        word += random.choice(consonants)
        struct += 'c'
    elif n == 2:
        word += random.choice(vowels)
        struct += 'v'
    n = random.randint(0, 2)

print(word)
print(struct)
print(len(struct))
"
PyQt: How can i set stylesheet contents on scaled mode?,"from PyQt4 import QtGui, QtCore

class MainWindow(QtGui.QMainWindow):

    def __init__(self, *args, **kwargs):
        super(MainWindow, self).__init__(*args, **kwargs)

        w = QtGui.QWidget() # container widget
        l = QtGui.QVBoxLayout() # your layout
        w.setLayout(l) # set the layout on your container widget

        btn = QtGui.QPushButton(self)
        btn.setStyleSheet(""border-image: url('somepicture.png');"")      

        label = QtGui.QLabel('Hello!')

        l.addWidget(btn) # add your widget to the layout
        l.addWidget(label) # add the label to the layout

        self.setCentralWidget(w) # add the container widget to the QMainWindow        

        self.show()

app = QtGui.QApplication([])
window = MainWindow()

app.exec_()
"
Time formatting using logging module in python,"logging.basicConfig(filename='example.log', filemode='w', format='%(created)f %(message)s', level=logging.INFO)
"
Python: Check if any list element is a key in a dictionary,">>> dict((option, all_options[option]) for option in selected_options if option in all_options)
{'1': '/test/1', '3': '/test/3'}
"
How to add on python,"age += 1
"
Number of occurrences in two strings using a for loop,"In [738]: def occurances(fst, sec):
     ...:     fst=set(fst)
     ...:     return sum(c in fst for c in sec)  #checking ""in set"" is O(1) 
"
"How to parse a tuple of ""x=y"" strings into a dictionary in python?","dict(elem.strip().split('=', 1) for elem in x)
"
Using ipywidget for multiple choice test,"import random
import time
from IPython.display import Image, display, clear_output
from ipywidgets import widgets

x = ['tree.jpg','house.jpg','car.jpg','door.jpg','train.jpg','moon.jpg']

def redraw():
    choices = random.sample(x, 4)
    correct = random.choice(choices)

    display(Image(correct))
    time.sleep(3)

    button1 = widgets.Button(description = choices[0])
    button2 = widgets.Button(description = choices[1])
    button3 = widgets.Button(description = choices[2])
    button4 = widgets.Button(description = choices[3])

    container = widgets.HBox(children=[button1,button2,button3,button4])
    display(container)

    def on_button1_clicked(b):
        # [insert code to record choice] 
        container.close()
        clear_output()
        redraw()

    def on_button2_clicked(b):
        # [insert code to record choice] 
        container.close()
        clear_output()
        redraw()

    def on_button3_clicked(b):
        # [insert code to record choice] 
        container.close()
        clear_output()
        redraw()

    def on_button4_clicked(b):
        # [insert code to record choice] 
        container.close()
        clear_output()
        redraw()

    button1.on_click(on_button1_clicked)
    button2.on_click(on_button2_clicked)
    button3.on_click(on_button3_clicked)
    button4.on_click(on_button4_clicked)

redraw() # initializes the first choice
"
an efficient equivalent to numpy isnan or where that looks over a window of N values,"import numpy as np
import scipy.ndimage as ndimage

x = np.arange(100, dtype='float')
x[x % 13 == 0] = np.nan
print(x)

N = 2
def blank(window):
    return np.nan if np.any(np.isnan(window)) else window[N]
y = ndimage.generic_filter(x, blank, size=(2*N+1,))
print(y)
"
Regular expressions in python (multiple variables),"ultimate_pattern = '|'.join(patterns)
"
Os.walk wont work with directory matched with regex,"def walk_file_system_test():
    #patterns='*', single_level=False, yield_folders=False, yield_files=True, exclude_dirs='.svn'):
    print ""Walk current directory with function defaults.""
    for fsnode in walk_file_system(os.getcwd()):
        print fsnode

    #patterns='*', single_level=False, yield_folders=True, yield_files=True, exclude_dirs='.svn'):
    print ""Walk current directory with yield_folders=True.""
    for fsnode in walk_file_system(os.getcwd(), yield_folders=True):
        print fsnode

    #patterns='*', single_level=False, yield_folders=True, yield_files=False, exclude_dirs='.svn'):
    print ""Walk current directory with yield_folders=True, yield_files=False.""
    for fsnode in walk_file_system(os.getcwd(), yield_folders=True, yield_files=False):
        print fsnode

    #patterns='*', single_level=False, yield_folders=True, yield_files=False, exclude_dirs='.svn'):
    print ""Walk current directory with yield_folders=True, yield_files=False, exclude_dirs='.svn;temp'.""
    for fsnode in walk_file_system(os.getcwd(), yield_folders=True, yield_files=False, exclude_dirs='.svn;temp'):
        print fsnode
"
Why isn´t it updating?,"addresses = [
    ['Bruno', 44444, 'bruno@hotmail.com'],
    ['Mariah', 333, 'mariah@hotmail.com'],
    ['Oliver', 3333, 'oliver@yahoo.co.uk']
]

# prints: [['Bruno', 44444, 'bruno@hotmail.com'], ['Mariah', 333, 'mariah@hotmail.com'], ['Oliver', 3333, 'oliver@yahoo.co.uk']]
print(addresses)

# Remove ""Bruno"" from your addresses
# prints: [['Mariah', 333, 'mariah@hotmail.com'], ['Oliver', 3333, 'oliver@yahoo.co.uk']]
print([address for address in addresses if address[0] != ""Bruno""])

# Sort your addresses descending by name
# prints: [['Oliver', 3333, 'oliver@yahoo.co.uk'], ['Mariah', 333, 'mariah@hotmail.com'], ['Bruno', 44444, 'bruno@hotmail.com']]
print(sorted(addresses, key=lambda address: address[0], reverse=True))
"
Iterating through permutations that fit a specific key,"def permutations_with_length_key(lst, length_key):
    tuples_by_length = {}
    for t in L:
        tuples_by_length.setdefault(len(t), []).append(t)
    positions = {k: i for i, k in enumerate(tuples_by_length.iterkeys())}
    for x in product(*[permutations(v) for v in tuples_by_length.itervalues()]):
        x = map(iter, x)
        yield [next(x[positions[y]]) for y in length_key]
"
ArgumentParser -h not printing options after parse_known_args,"init_parser = argparse.ArgumentParser(prefix_chars='-+', formatter_class=argparse.ArgumentDefaultsHelpFormatter, add_help=False)

# Meta variables
group = init_parser.add_argument_group('Meta Variables', '')
group.add_argument('--to_file', dest='toinitfile', nargs='?', const=DEF_INIT_FILE, default=None, help='write flag values to text file')
group.add_argument('--from_file', type=str, dest='frominitfile', default='', help='reads flag values from file')

args, remaining_argv = init_parser.parse_known_args()

if args.frominitfile:
    conf_parser = SafeConfigParser()
    conf_parser.read(args.frominitfile)
else:
    conf_parser = None

# Inherit options from init_parser
parser = argparse.ArgumentParser(description='Extract and Manage Language Feature Data.', 
    parents=[init_parser])

group = parser.add_argument_group('Some Group', 'blah blah')

group.add_argument('-someFlag', dest='somevar', default=getInitVar('corpdb', conf_parser, DEF_VAR),
                    help='Some help.')
....
"
Can Python's comprehensions make groups?,"result = {}
for key, v1, v2 in inputlist:
    minimum, maximum = result.get(key, (float('inf'), float('-inf')))
    if v1 < minimum:
        minimum = v1
    if v2 > maximum:
        maximum = v2
    result[key] = (minimum, maximum)
"
Python variable value reset out of loop,"q = [ [ (1-i) * j for j in range(2) ] for i in range(2) ]
"
Can Python test the membership of multiple values in a list?,"all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])"
Numpy: split array randomly,"a1,a2,a3 = np.vsplit(a[np.random.permutation(a.shape[0])],(160,180))
"
counting odd numbers in a list python,">>> def countOdd(l):
...     return fold(lambda x,y: x+(y&1),l,0)
... 
>>> def fold(f,l,a):
...     if l == list(): return a
...     return fold(f,l[1:],f(a,l[0]))
"
Retrieve properties of a class instance stored in a dictonary,">>> timeit.repeat(lambda: [d[ind] for ind in sub_list])
[0.8207108974456787, 0.8075330257415771, 0.788733959197998]
>>> timeit.repeat(lambda: map(lambda ind: d[ind], sub_list))
[1.6066839694976807, 1.630357027053833, 1.755575180053711]
"
Python: Make last item of array become the first,">>> a=[1,2,3,4]
>>> a[-1:] + a[:-1]
[4, 1, 2, 3]
"
Computation time insanely long in python,"from collections import defaultdict

dict_STU = defaultdict(list)
with open('all_spot_uniprot.txt', 'rbU') as spot_to_uniprot:
    reader = csv.reader(spot_to_uniprot, delimiter='\t')
    for row in reader:
        dict_STU[int(row[0])].append(row[2])
"
struct.pack is much slower in python 2.6 when working with numpy arrays,"z1 = x.astype('<u2').tostring()
z2 = struct.pack('<'+'H'*x.size,*np.asarray(x).reshape(-1).astype(int))
assert z1 == z2
"
Python: How to escape 'lambda',"print getattr(args, 'lambda')
"
Write to lowercase 'default' section ConfigParser,"import ConfigParser
import sys

config = ConfigParser.ConfigParser()
config.set(ConfigParser.DEFAULTSECT, 'name', 'value')

ORIG_DEFAULTSECT = ConfigParser.DEFAULTSECT # <---
ConfigParser.DEFAULTSECT = 'default'
try:
    config.write(sys.stdout)
finally:
    ConfigParser.DEFAULTSECT = ORIG_DEFAULTSECT # <---
"
How do I convert unicode to unicode-escaped text,"with open(""input.txt"", ""rb"") as f:
    text = f.read().rstrip()  # rstrip to remove trailing spaces
decoded = text.decode('unicode-escape').encode('latin1').decode('utf-8')
with open(""output.txt"", ""wb"") as f:
    f.write(decoded.encode('unicode-escape'))
"
Diagonals at different points of a 2D list in Python,"L = [[1,2,3],[4,5,6], [7,8,9]]
# number of rows, number of columns: ie L is m x n
m, n = len(L), len(L[0])

# Retreive the NE-SW (diag1) and NW-SE (diag2) diagonals
diag1 = []
diag2 = []
for p in range(m+n-1):
    diag1.append([])
    diag2.append([])
    q1 = 0
    if p >= n:
        q1 = p - n + 1
    q2 = m
    if p < m-1:
        q2 = p+1
    for q in range(q1, q2):
        x, y = p - q, q
        diag1[-1].append(L[y][x])
        # To get the other diagonal, read each row ""backwards""
        x = n - x - 1
        diag2[-1].append(L[y][x])
print 'diag1:', diag1
print 'diag2:', diag2
"
nested list displayed in a column,"tableData = [['apples', 'oranges', 'cherries', 'banana'],
             ['Alice', 'Bob', 'Carol', 'David'],
             ['dogs', 'cats', 'moose', 'goose']]

# Find the max length of the word in each row
lens = [max(len(col) for col in row) for row in tableData]

# zip(*list) transposes a list...rows become columns
for row in zip(*tableData):
    # Pass the column widths dynamically.
    print('{:>{lens[0]}} {:>{lens[1]}} {:>{lens[2]}}'.format(*row,lens=lens))
"
Is there a way to detect when a python program is going to end?,"import atexit
@atexit.register
def save_cache():
    print 'save cache'
"
Python Regex or Filename Function,"Side Note
# Remove whitespace from files where EPG named with space "" "" replace with ""_""
for filename in os.listdir("".""):
    if filename.find(""2013|09 "") > 0:
        newfilename = filename.replace("" "",""_"")
        os.rename(filename, newfilename)
"
sorting list of tuples by arbitrary key,"sorted(mylist,key=lambda x: x[1] in order and order.index(x[1]) or len(order)+1)
"
Extract dictionary value from column in data frame,"feature3 = [d.get('Feature3') for d in a]
"
How to pass self object to Global variable (Django views),"class CalculateUserBannedMiddleware(object):

    def process_request(self, request):
        request.user_banned = HellBanList.objects.filter(condemned_id=request.user.id).exists()
"
How to sort this text file in descending order in python?,"sorted(entries, key=lambda t: (-t[0], t[1]))
"
How to list latest modification time of contents of some directories?,"print ""last modified: %s, created: %s"" %(format_time(os.path.getmtime(single_file)),
                                         format_time(os.path.getctime(single_file)))
"
Checking if characters in a file can be integers,"def is_hex(n):
    return n.isdigit() or (""A"" <= n.upper() <= ""F"")
"
Python mock builtin 'open' in a class using two different files,"@patch('__builtin__.open', spec=open)
def test_interface_mapping(self, mock_open):
    handle1 = MagicMock()
    handle1.__enter__.return_value.__iter__.return_value = ('aa', 'bb')
    handle1.__exit__.return_value=False
    handle2 = MagicMock()
    handle2.__enter__.return_value.__iter__.return_value = ('AA', 'BB')
    handle2.__exit__.return_value=False
    mock_open.side_effect = (handle1, handle2)
    with open(""ppp"") as f:
        self.assertListEqual([""aa"",""bb""],[x for x in f])
    with open(""ppp"") as f:
        self.assertListEqual([""AA"",""BB""],[x for x in f])
"
os.system commands,"os.system(""C:\\FIOCheck\\xutil.exe  -i get phy"" +HBEA + "">C:\\FIOCheck\\HBEAResult.txt"")
"
django multiple update dates in one field,"from django.utils import timezone

class YourModel(models.Model):
    name = models.CharField(max_length=100)

    def save(self, *args, **kwargs):
        super(YourModel, self).save(*args, **kwargs)
        YourModelUpdateHistory.objects.create(your_model=self, updated=timezone.now())
"
Scaling Part of a Picture,"      if (x>48 and x<59) and (y>58 and y<71):
        newPxl =getPixel(newPicture, (x-49)*2+49+100,(y-59)*2+59+100)
        setColor(newPxl,color)
"
Extracting pair of values from matrix using python,"mylist = []

with open('test.csv') as f:
    keys = f.readline()
    keys = keys.split()

    for line in f:
        a = line.split()
        mylist.append(a[1:])

for idx1, item in enumerate(mylist):
    for idx2, number in enumerate(item):
        if float(number) > 0.2:
            print ""%7s, %7s  --> %7s"" %(keys[idx1], keys[idx2], number)
"
What is the proper way to split a python module into submodules?,"class A(object):
    def __init__(self, value):
        self.value = value

a = A(1)
print a.value
a.value = 5
print a.value
"
Lift and raise a Canvas over a Canvas in tkinter,"from tkinter import *

def hide_me(event, widget):
    widget.pack_forget()

def show_me(event, widget):
    widget.pack()

root = Tk()
lbl = Label(root, text=""Victim"")

btn = Button(root, text=""Hide the victim"")
btn.bind('<Button-1>', lambda event: hide_me(event, lbl))
btn.pack()

btn2 = Button(root, text=""Show the victim"")
btn2.bind('<Button-1>', lambda event: show_me(event, lbl))
btn2.pack()

lbl.pack()

root.mainloop()
"
Python: Fast and minimalistic way to zip and pair matching elements in two lists,">>> xs = range(100, 200)
>>> ys = range(150, 250)
>>> xs = map(lambda n: tuple(range(n, n + 10)), xs)
>>> ys = map(lambda n: tuple(range(n, n + 10)), ys)

>>> def profile_pairing():
...     list(izip_pairs(xs, ys, lambda x, y: cmp(x[:4], y[:4])))
...
>>> def profile_keying():
...     list(izip_keys(xs, ys, lambda v: v[:4]))
...

>>> from timeit import Timer
>>> Timer(profile_pairing).timeit(1000)
0.575916051864624
>>> Timer(profile_keying).timeit(1000)
0.39961695671081543

>>> xs = map(lambda n: tuple(range(n, n + 10)), range(1000, 2000))
>>> ys = map(lambda n: tuple(range(n, n + 10)), range(1500, 2500))
>>> Timer(profile_pairing).timeit(100)
0.5289111137390137
>>> Timer(profile_keying).timeit(100)
0.4951910972595215

>>> xs = map(lambda n: tuple(range(n, n + 10)), range(10000, 20000))
>>> ys = map(lambda n: tuple(range(n, n + 10)), range(15000, 25000))
>>> Timer(profile_pairing).timeit(10)
0.6034290790557861
>>> Timer(profile_keying).timeit(10)
0.9461970329284668

>>> xs = map(lambda n: tuple(range(n, n + 10)), range(100000, 200000))
>>> ys = map(lambda n: tuple(range(n, n + 10)), range(150000, 250000))
>>> Timer(profile_pairing).timeit(1)
0.6421248912811279
>>> Timer(profile_keying).timeit(1)
1.253270149230957
"
Adding a menu inside of a menubutton? Python,"from tkinter import *

root = Tk()

menubar = Menu(root)

helpmenu = Menu(menubar)
nested_menu1 = Menu(helpmenu)
nested_menu1.add_command(label='Stuff 1')
nested_menu1.add_command(label='Stuff 2')

nested_menu2 = Menu(helpmenu)
nested_menu2.add_command(label='Stuff 3')
nested_menu2.add_command(label='Stuff 4')

menu2_nested = Menu(nested_menu2)
menu2_nested.add_command(label='Stuff 5')
nested_menu2.add_cascade(label='Nestception', menu=menu2_nested)

helpmenu.add_cascade(label='1.0 Nested', menu=nested_menu1)
helpmenu.add_cascade(label='2.0 Nested', menu=nested_menu2)

menubar.add_cascade(label=""Nested Menus"", menu=helpmenu)

root.config(menu=menubar)
root.mainloop()
"
"Merge dictionaries without overwriting, rather an addition of value if key equality","from collections import Counter
d1 = {'eggs':3, 'ham':2, 'toast':1}
d2 = {'eggs':2,'ham':1}
dresult = Counter(d1) + Counter(d2)  #Counter({'eggs': 5, 'ham': 3, 'toast': 1})
"
Efficient way to sort an array with a condition,"res = np.concatenate((a[indices], a[~indices]))
"
Function inside a function best approach?,"def main():
    C1 = DNPClass()
    C1.method1(arg1, arg2, arg3, arg4, arg5)

    # subscribing to event
    C1.method2.RequestEvent += handleResponseEvent  # will call C1.method3

    C2 = DNPClass()

    C2.method2.RequestEvent += handleResponseEvent  # will call C2.method3


def handleResponseEvent(request, response):
    #code to execute when event handler is called
    #code references additional method from current DNPClass instance
    request.dnp.method3()
    ...
"
BeautifulSoup find only elements where an attribute contains a sub-string? Is this possible?,"import re

for t in soup.find_all('img', src=re.compile(r'placeholder')):
"
Mean of object variables in a python array,"In [28]: A = [np.arange(i) for i in range(3, 6)]

In [29]: A
Out[29]: [array([0, 1, 2]), array([0, 1, 2, 3]), array([0, 1, 2, 3, 4])]

In [30]: for B in A: print B.mean()
1.0
1.5
2.0
"
How to distinguish same int and float elements?,"input = [1, 1.0, '1', -1, 1]

output = [x[0] for x in {(y, type(y)) for y in input}]

print output
"
How can I check if a checkbox is checked in Selenium Python Webdriver?,driver.find_element_by_id('<check_box_id>').is_selected()
how to convert string to datetime.timedelta()?,"from datetime import datetime, timedelta

date_select = datetime.strptime('2011-12-1', '%Y-%m-%d')
delta = timedelta(days=1)
target_date = date_select + delta
print target_date
"
Numpy : find number of active tickets at time t given a list of start and duration,">>> x=np.array([(1,2),(2,2),(1,4),(1,1),(3,2)])
>>> x
array([[1, 2],
       [2, 2],
       [1, 4],
       [1, 1],
       [3, 2]])
>>> def activity(t,tickets):
...     tmp = tickets[tickets[:,0] < t]
...     return tmp[tmp[:,0]+tmp[:,1] > t]
...
>>> activity(2,x)
array([[1, 2],
       [1, 4]])
>>> activity(3,x)
array([[2, 2],
       [1, 4]])
"
regex filtering repeatating items with numerics,"import re

def find_pattern(pattern, lst):
    regex = re.compile(pattern)
    for idx, item in enumerate(lst):
        match = regex.match(item)
        if not match:
            continue
        yield match.group(1), idx

list1=['test_input_1','test_input_2','test_input_3','test_input_10','test_input_11']
pat = r'(test_.*_1)\b'

for r in find_pattern(pat, list1):
    print 'found %s at index %s' % r

>>> 
found test_input_1 at index 0
"
python os.listdir() shows protected files,"FILE_ATTRIBUTE_ARCHIVE              = 32
FILE_ATTRIBUTE_ATOMIC_WRITE         = 512
FILE_ATTRIBUTE_COMPRESSED           = 2048
FILE_ATTRIBUTE_DEVICE               = 64
FILE_ATTRIBUTE_DIRECTORY            = 16
FILE_ATTRIBUTE_ENCRYPTED            = 16384
FILE_ATTRIBUTE_HIDDEN               = 2
FILE_ATTRIBUTE_NORMAL               = 128
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED  = 8192
FILE_ATTRIBUTE_OFFLINE              = 4096
FILE_ATTRIBUTE_READONLY             = 1
FILE_ATTRIBUTE_REPARSE_POINT        = 1024
FILE_ATTRIBUTE_SPARSE_FILE          = 512
FILE_ATTRIBUTE_SYSTEM               = 4
FILE_ATTRIBUTE_TEMPORARY            = 256
FILE_ATTRIBUTE_VIRTUAL              = 65536
FILE_ATTRIBUTE_XACTION_WRITE        = 1024
"
Parsing integers from an alphanumeric string in Python,"In [67]: strs=""PRODUCTNAME600COUPON50""

In [68]: re.findall(r'\d+',strs)
Out[68]: ['600', '50']
"
Python argparse: name parameters,"import argparse
class RenameAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest,
                argparse.Namespace(
                    **dict(zip(('oldfile', 'newfile'),
                               values))))

parser = argparse.ArgumentParser()
parser.add_argument('--rename', type=str, nargs=2, help='some help',
                    metavar=('OLDFILE', 'NEWFILE'),
                    action=RenameAction)
args = parser.parse_args()

print(args.rename.oldfile)
"
python pandas trying to reduce reliance on loops,"df = pd.DataFrame({ 'col_1':[True,True,True,True,False,False,False,False,
                             False,True,False,False,False,False,True,True,
                             True,True,True,True,False] })

df['col_2'] = ((df!=df.shift(1)) & (df!=df.shift(2)) & (df!=df.shift(3)) & 
               (df!=df.shift(4)) & (df!=df.shift(5)))
"
Difficulty animating a matplotlib graph with moviepy,"import numpy as np
import matplotlib.pyplot as plt
from moviepy.video.io.bindings import mplfig_to_npimage
import moviepy.editor as mpy

fig = plt.figure(facecolor=""white"") # <- ADDED FACECOLOR FOR WHITE BACKGROUND
ax = plt.axes()
x = np.random.randn(10, 1)
y = np.random.randn(10, 1)
p = plt.plot(x, y, 'ko')
time = np.arange(2341973, 2342373)

last_i = None
last_frame = None

def animate(t):
    global last_i, last_frame

    i = int(t)
    if i == last_i:
        return last_frame

    xn = x + np.sin(2 * np.pi * time[i] / 10.0)
    yn = y + np.cos(2 * np.pi * time[i] / 8.0)
    p[0].set_data(xn, yn)

    last_i = i
    last_frame = mplfig_to_npimage(fig)
    return last_frame

duration = len(time)
fps = 15
animation = mpy.VideoClip(animate, duration=duration)
animation.write_videofile(""test.mp4"", fps=fps)
"
How do I check a string for certain words without getting matches for parts of the words in the string in Python?,"for word in wordList:
    posMatch = re.search(r'\b%s\b' % word, string)
    if posMatch:
        print (posMatch.group())
"
"python matplotlib gridspec, unwanted arbitrary axis labels","...
# hide ticks of main axes
ax0 = plt.gca()
ax0.get_xaxis().set_ticks([])
ax0.get_yaxis().set_ticks([])

gs = gridspec.GridSpec(x, y, wspace=0, hspace=0)
plt.title('Example Plot')

for (j, k), img in np.ndenumerate(table):
    ax = fig.add_subplot(gs[x - j - 1, k])
    # hide ticks of gribspec axes
    ax.get_xaxis().set_ticks([])
    ax.get_yaxis().set_ticks([])
"
"Python, reference a file in the same directory as the running file","with open('%s/data.csv' % os.path.dirname(__file__)) as ...
"
Remove specific characters from a string,"a = a.replace(char, '')"
"Populate Tkinter OptionMenu with list of unknown length, i.e. list of serial ports","import Tkinter as tk

def serial_ports():
    for port in list('ABCDE'):
        yield port

OPTIONS = list(serial_ports())

class App(object):
    def __init__(self, master, **kwargs):
        self.master = master
        self.var = tk.StringVar()
        self.var.set('Port')
        self.option = tk.OptionMenu(master, self.var, *OPTIONS)
        self.option.pack()


root = tk.Tk()
app = App(root)
root.mainloop()
"
Splitting a list in python,">>> l = [11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10]
>>> sorted(x for x in l if x > 13)
[14, 15, 16]
"
PyCharm file path separator,"import os
import sys

filename, extension = os.path.splitext(os.path.basename(sys.argv[0]))
trialname = './trial/{0}'.format(filename)
"
unittest - run the same test for a list of inputs and outputs,"import unittest

from ddt import ddt, data, unpack


@ddt
class TestName(unittest.TestCase):

        # simple decorator usage:
        @data(1, 2)
        def test_greater_than_zero(self, value):
            self.assertGreater(value, 0)

        # passing data in tuples to achieve the 
        # scenarios from your given example:
        @data(('Bob', 'Bob'), ('Alice', 'Alice'))
        @unpack
        def test_name(self, first_value, second_value):
            name, expected_name = first_value, second_value
            self.assertEquals(name, expected_name)

if __name__ == '__main__':
        unittest.main(verbosity=2)
"
Summing several equal size matrices by elements,"import sympy
from sympy.abc import x
import numpy

A = sympy.Matrix([[x,0],[0,x]])
B = numpy.eye(2)
print A + B # Prints ""Matrix([[x + 1.0, 0], [0, x + 1.0]])""
"
read an ip address conversely using python,"ip = '127.0.0.1'

ip = ip.split('.')

ip.reverse()

print('.'.join(ip))
"
Python - Addings nulls,">>> l = [(5, 2), (6, 2), (7, 0), (8, 2), (9, 0), (10, 0), (11, 3), (12, 1)]
>>> lookup = dict(l)
>>> [(x, lookup[x]) if x in lookup else (x, 0) for x in range(1, 13)]
[(1, 0), (2, 0), (3, 0), (4, 0), (5, 2), (6, 2), (7, 0), (8, 2), 
(9, 0), (10, 0), (11, 3), (12, 1)]
"
Iterator inside DictWriter.writerow,"with open('eventsInput.csv', 'w') as csvfile:
    writer = csv.writer(csvfile, delimiter='\t')
     for key, value in users.iteritems(): 
        # That was what changed the result
        actions = list(chain.from_iterable((d[event], d[data]) for d in value))
        print actions
        writer.writerow([key, 0, 0, 0, 0] + [action for action in actions])
"
Optimize python loop,"from itertools import chain

for rec in chain.from_iterable(records):
    #rest of the code
"
Converting OHLC stock data into a different timeframe with python and pandas,"In [50]: df.groupby(dr5minute.asof).agg({'Low': lambda s: s.min(), 
                                         'High': lambda s: s.max(),
                                         'Open': lambda s: s[0],
                                         'Close': lambda s: s[-1],
                                         'Volume': lambda s: s.sum()})
Out[50]: 
                      Close    High     Low    Open  Volume
key_0                                                      
1999-01-04 10:20:00  1.1806  1.1819  1.1801  1.1801      34
1999-01-04 10:25:00  1.1789  1.1815  1.1776  1.1807      91
1999-01-04 10:30:00  1.1791  1.1792  1.1776  1.1780      16
"
Web Mining with Python,"import urllib
import bs4
url=urllib.urlopen('http://www.tcmb.gov.tr/kurlar/201501/02012015.xml').read().decode('Windows-1252')
soup=bs4.BeautifulSoup(url)
data=soup.get_text(' ')
print(data)
"
How to make a character in a list appear only once?,"fracs = {str(Fraction(x, y)) for x in ilist1 for y in ilist2}
"
How can I add an additional row and column to an array?,"L = [x + [0] for x in L]
"
"How to flip an img in Pygame, having trouble in my code?","def update(self, pos):
    if pos != 0:
        self.speed -= 1
        self.x += pos
        # no more self.speed checks
        if self.index < self.max_index:
            self.index += 1
        else:
            self.index = 0
        self.img = self.images[self.index]
    # change True to False if needed, or change the operator.
    if pos < 0:
        self.img = pygame.transform.flip(self.img,True,False)
    screen.blit(self.img,(self.x,self.y))
"
Any way to manually fix operation of `super()` after IPython reload (avoiding TypeError)?,"from issue import A, B, C
c.__class__ = C
"
Python ignoring leading whitespace when doing .replace on dataframe column with strings,"import pandas as pd
import numpy as np

df=pd.DataFrame({'group':[1,2,3,' No Data',4,5,6]})

df = df.applymap(lambda x: np.nan if type(x) == str and 'No Data' in x else x)
print df
"
Matplotlib imshow/matshow display values on plot,"import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

min_val, max_val, diff = 0., 10., 1.

#imshow portion
N_points = (max_val - min_val) / diff
imshow_data = np.random.rand(N_points, N_points)
ax.imshow(imshow_data, interpolation='nearest')

#text portion
ind_array = np.arange(min_val, max_val, diff)
x, y = np.meshgrid(ind_array, ind_array)

for x_val, y_val in zip(x.flatten(), y.flatten()):
    c = 'x' if (x_val + y_val)%2 else 'o'
    ax.text(x_val, y_val, c, va='center', ha='center')

#set tick marks for grid
ax.set_xticks(np.arange(min_val-diff/2, max_val-diff/2))
ax.set_yticks(np.arange(min_val-diff/2, max_val-diff/2))
ax.set_xticklabels([])
ax.set_yticklabels([])
ax.set_xlim(min_val-diff/2, max_val-diff/2)
ax.set_ylim(min_val-diff/2, max_val-diff/2)
ax.grid()
plt.show()
"
"""Adding"" dictionaries in python if some (key, value) pairs match",">>> from collections import defaultdict
>>> d0 = {""a"": ""hello"", ""b"": ""world"", ""c"": 11}
>>> d1 = {""a"": ""hello"", ""b"": ""world"", ""c"": 100}
>>> d2 = {""a"": ""goodbye"", ""b"": ""world"", ""c"": 10}
>>> keyed = defaultdict(int)
>>> for d in (d0, d1, d2):
...     keyed[(d['a'], d['b'])] += d['c']
... 
>>> keyed
defaultdict(<type 'int'>, {('hello', 'world'): 111, ('goodbye', 'world'): 10})
>>> [{'a': a, 'b': b, 'c': c} for (a, b), c in keyed.items()]
[{'a': 'hello', 'c': 111, 'b': 'world'}, {'a': 'goodbye', 'c': 10, 'b': 'world'}]
"
Confusing 'readline' warning in the documentation,"def read(ser, queue):
    for line in ser:
         queue.put(line)
threading.Thread(target=read, args=(ser, queue)).start()
"
writing keys of a dictionary to a text file,"with open(""filename"", ""w"") as f:
    for key in dict:
        print(key, file=f)
"
Argparse optional positional arguments?,">>> import os, argparse
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('-v', action='store_true')
_StoreTrueAction(option_strings=['-v'], dest='v', nargs=0, const=True, default=False, type=None, choices=None, help=None, metavar=None)
>>> parser.add_argument('dir', nargs='?', default=os.getcwd())
_StoreAction(option_strings=[], dest='dir', nargs='?', const=None, default='/home/vinay', type=None, choices=None, help=None, metavar=None)
>>> parser.parse_args('somedir -v'.split())
Namespace(dir='somedir', v=True)
>>> parser.parse_args('-v'.split())
Namespace(dir='/home/vinay', v=True)
>>> parser.parse_args(''.split())
Namespace(dir='/home/vinay', v=False)
>>> parser.parse_args(['somedir'])
Namespace(dir='somedir', v=False)
>>> parser.parse_args('somedir -h -v'.split())
usage: [-h] [-v] [dir]

positional arguments:
  dir

optional arguments:
  -h, --help  show this help message and exit
  -v
"
Use argparse module with argument for a function," >>> import sys
 >>> sys.argv.extend(['--b', '10'])
 >>> import myfile
 >>> file.play()
"
How to get POST and GET parameters from Web Page in python,"from BeautifulSoup import BeautifulSoup

s = urllib2.urlopen('http://stackoverflow.com/questions/10614974/how-to-get-post-and-get-parameters-from-web-page-in-python').read()
soup = BeautifulSoup(s)

forms = soup.findall('form')
for form in forms:
  print 'form action: %s (%s)' % (form['action'], form['method'])
  inputs = form.findAll('input')
  for input in inputs:
    print ""  -> %s"" % (input.attrs) 
"
Python - Extract Main Language Code from HTTP / Browser,"print request.META['HTTP_ACCEPT_LANGUAGE']
"
Python convert single column of data into multiple columns,"from io import StringIO
from collections import OrderedDict

datastring = StringIO(u""""""\
# row = 0
9501.7734375
9279.390625
8615.1640625
# row = 1
4396.1953125
4197.1796875
3994.4296875
# row = 2
9088.046875
8680.6953125
8253.0546875
"""""")      

content = datastring.readlines()
out = OrderedDict()
final = []

for line in content:
    if line.startswith('# row'):
        header = line.strip('\n#')
        out[header] = []
    elif line not in out[header]:
        out[header].append(line.strip('\n'))


for k, v in out.iteritems():
    temp = (k + ',' + ','.join([str(item) for item in v])).split(',')
    final.append(temp)

final = zip(*final)
with open(""C:/temp/output.csv"", 'w') as fout:
    for item in final:
    fout.write('\t'.join([str(i) for i in item]))
"
Python Sympy angle of a complex number?,"n = sympyexpression_whichevaluatestoacomplexnumber
expressionangle = sympy.arg( n )
"
Python - Extract folder path from file path,">>> '\\'.join(existGDBPath.split('\\')[0:-1])
'T:\\Data\\DBDesign'
"
Display monthly columns by year using pandas,"import pandas as pd
data = pd.read_csv(""http://data.giss.nasa.gov/gistemp/tabledata_v3/GLB.Ts+dSST.csv"",
na_values = [""**** "",""***  ""])
print data.head()

df = data.ix[:,0:13] 

print df.columns
Index([u' Year', u'Jan', u'Feb', u'Mar', u'Apr', u'May', u'Jun', u'Jul',
       u'Aug', u'Sep', u'Oct', u'Nov', u'Dec'],
      dtype='object')

table = df.set_index(' Year').stack().reset_index()
table.columns = ['Year','Month','Value']
"
Lists to dictionary but with multiple values for each key,"    d = {} # create dict 
    for root, dirs, files in os.walk(dirt):
        for filename in files:
            if filename.endswith(('.bat', '.vbs', '.ps', '.txt')):
                readfile = open(os.path.join(root, filename), ""r"")
                d.setdefault(filename,[]) #  set default value to a list
                for line in readfile:
                    m = re.match(combined, line)
                    if m:
                        creds.append(m.group(0))
                        d[filename].append(m.group(0).rstrip())  # append data to the key's list stripping newlines etc..
"
Ordered Dictionary is not sorting,"import collections
ordered_dict=collections.OrderedDict()
ordered_dict['foo'] = 1
ordered_dict['bar'] = 2
ordered_dict['baz'] = 3
sorted_dict = collections.OrderedDict(sorted(ordered_dict.items(), 
                                             key=lambda t: t[0]))
"
Find Hyperlinks in Text using Python (twitter related),"import re

myString = ""This is my tweet check it out http://tinyurl.com/blah""

r = re.compile(r""(http://[^ ]+)"")
print r.sub(r'<a href=""\1"">\1</a>', myString)
"
Bootstrap styling in Django,"Custom filters for padding lists:
@register.filter
def ljust_list(l, n):
    """"""
    ljust_list([1, 2], 4) -> [1, 2, None, None]
    """"""
    return l + [None] * (n - len(l))

@register.filter
def rjust_list(l, n):
    """"""
    rjust_list([1, 2], 4) -> [None, None, 1, 2]
    """"""
    return [None] * (n - len(l)) + l
"
Paragraph Matching Python,"import diff_match_patch

dmp = diff_match_patch.diff_match_patch()
diffs = dmp.diff_main('This is my original paragraph.', 'My paragraph is much better now.')
print diffs  # pre-cleanup

dmp.diff_cleanupSemantic(diffs)
print diffs  # post cleanup
"
Python real time varying heat map plotting,"import numpy as np

# create an empty array (NaNs will be drawn transparent)
data = np.empty((50,50))
data[:,:] = np.nan

# ptlist is a list of (x, y, intensity) triplets
ptlist = np.array(ptlist)
data[ptlist[:,1].astype('int'), ptlist[:,0].astype('int')] = ptlist[:,2]
"
Python create instance from list of classes,"class_register[self.__class__.__name__] = self.__class__
"
Is it a way to know index using itertools.cycle()?,">>> from itertools import cycle
>>> for i, item in enumerate(cycle([1, 2, 3])):
...     print i, item
...
0 1
1 2
2 3
3 1
4 2
5 3
"
How to count number of repeated keys in several dictionaries?,"from collections import Counter
from itertools import chain

dicts = [
    {1: 'url1', 3: 'url2', 7: 'url3', 5: 'url4'},
    {1: 'url1', 7: 'url3'},
    {5: 'url4', 10: 'url5'},
]

result = Counter(chain.from_iterable(dicts))

print dict(result)
"
"nltk sentence tokenizer, consider new lines as sentence boundary","def paragraphs(self):
    if self._paragraphs is not None:
        for p in  self._paragraphs:
            yield p
    else:
        raw_paras = self.raw_text.split(self.paragraph_delimiter)
        gen = (Paragraph(self, p) for p in raw_paras if p)
        self._paragraphs = []
        for p in gen:
            self._paragraphs.append(p)
            yield p
"
Create object from several lists,"def daycheck(name, dolist):
    days = ['monday', 'tuesday', 'wednesday','thursday', 'friday',
            'saturday', 'sunday']
    print('type in', name, ""'s day off, please!"")
    dayoff = input()
    if dayoff.strip().lower() in days:
        print(name, ""'s dayoff is"", dayoff, '!!!')
        dolist.append(dayoff)
    else:
        print(""I don't know this day! Please try again!"")
        daycheck(name, dolist)

daycheck('A', dolist)
"
Equality without using operator,">>> not cmp(x, y)
True
>>> not cmp(x, z)
False
"
"Python: how to generate a list of ""flattened"" lists out of a big nested list","def yield_and_flatten(nested):
    """"""Yield sublists and flatten, recursively

    Produces a boolean and list on each yield; the boolean
    flags a merge; sublists are merged just once then
    passed down the recursion tree.

    """"""
    if not isinstance(nested, list):
        yield True, nested
        return
    res = []
    for elem in nested:
        for extend, sub in yield_and_flatten(elem):
            if isinstance(sub, list):
                if extend:
                    res.extend(sub)
                yield False, sub
            else:
                res.append(sub)
    yield True, res
"
How to calculate the value of the sum of squares defined as 1^2 + 2^2 + 3^2 + ... +n2 until a user specified sum has been reached,"numbers = itertools.count(1) # all positive integers
squares = (x**2 for x in numbers) # all squares of positive integers
totals = itertools.accumulate(squares) # all running totals of squares of ...
bigtotals = itertools.dropwhile(lambda total: total < n, totals) # all ... starting >= n
total = next(bigtotals) # first ... starting >= n
"
how to download multiple file simultaneously and join them in python?,"def download(url):
    with urllib.request.urlopen(url) as f:
        return f.read()
"
Convert a list into a dictionary keeping the sequence intact,"from collections import OrderedDict

from itertools import izip
i = iter(list_name)
dic = OrderedDict(izip(i, i))
"
Extracting data from a list of tuples,"res = {k[0]: [k[1], len(k[1])] for k in [(date, [x[2] for x in gr]) for date, gr in groupby(l, itemgetter(1))]}
"
How to Find the Neighbors of a Cell in an ndarray?,"p = np.r_[4, 5]
shape = (6, 6)

neighbours = get_neighbours(p, shape=shape)

x = np.zeros(shape, int)
x[tuple(neighbours.T)] = 1
x[tuple(p)] = 2

print(x)
# [[0 0 0 0 0 0]
#  [0 0 0 0 0 0]
#  [0 0 0 0 0 0]
#  [0 0 0 0 1 1]
#  [0 0 0 0 1 2]
#  [0 0 0 0 1 1]]
"
How do I shift rows of consecutive numbers. Python 3.3.2,">>> import calendar
>>> print calendar.TextCalendar().formatmonth(2013,2,4)
          February 2013
Mon  Tue  Wed  Thu  Fri  Sat  Sun
                      1    2    3
  4    5    6    7    8    9   10
 11   12   13   14   15   16   17
 18   19   20   21   22   23   24
 25   26   27   28
"
How can I tell if a file is a descendant of a given directory?,"os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"
Make Python List Unique in Functional way (map/reduce/filter),"reduce(lambda x,y: x+[y] if x==[] or x[-1] != y else x, your_list,[])
"
"How to understand the result of this np.einsum('kij',A)?","import numpy as np

A = np.arange(24).reshape((2, 3, 4))
B = np.einsum('kij', A)

i, j, k = np.indices(B.shape)

print(np.all(B[i, j, k] == A[k, i, j]))
# True
"
For each function in class within python,"import inspect

def methods(c):
    return (m for m in (getattr(c, d) for d in dir(c))
            if inspect.ismethoddescriptor(m) or inspect.ismethod(m))
"
Calculating date_range over GroupBy object in pandas,"In [15]: g.apply(lambda x: x.index.max() - x.index.min())
Out[15]: 
a
1   01:00:00
2   00:00:00
dtype: timedelta64[ns]
"
Using regular expressions to manipulate strings,"import re
s = '1234-5678-90'
print re.sub(r'(\d{4})-(\d{4})-(\d{2})', r'\3\1\2', s)
"
Passing objects around an event queue in Python,"for name in names_list:
  def update(name):
    names_objs[name].update_value(2)
  events2.push(partial(update, name))
"
How to verify numbers in input with python?,"while True: #infinite loop
   ipt = raw_input(' Enter a number: ')
   try:
      ipt = int(ipt)
      break  #got an integer -- break from this infinite loop.
   except ValueError:  #uh-oh, didn't get an integer, better try again.
      print (""integers are numbers ... didn't you know? Try again ..."")
"
Returning values from inside a while loop in python,"def triangle():
  res = 0
  inc = 1
  while True:
    res += inc
    inc += 1
    yield res

t = triangle()
print next(t)
print next(t)
print next(t)
print next(t)
"
Python string.replace() not replacing characters,"p = re.compile('[/:()<>|?*]|(\\\)')
filename = p.sub('_', line[2])
folder = p.sub('_', line[5])
"
Python 2.7 Correct syntax to re.match accented characters in a Unicode string?,"# coding: utf-8
import re

sentence = u""These characters, ÄÜ, are special.""

def findInSentence(sentence):
    pattern = re.compile(u""ÄÜ"", re.UNICODE)
    return re.search(pattern, sentence).group(0)

print findInSentence(sentence)
"
How can I split this list of strings to list of lists of ints?,"In [14]: [[int(y) for y in x.split()] for x in lis]
Out[14]: [[25, 32, 49, 50, 61, 72, 78, 41], [41, 51, 69, 72, 33, 81, 24, 66]]
"
"Getting respective *args, **kwargs from collection of functions, then filling in the irregular 2d structure with provided 1d arguments","args, varargs, varkw, defaults = inspect.getargspec(func)
result = []
if defaults:
    firstdefault = len(args) - len(defaults)
for i, arg in enumerate(args):
    if defaults and i >= firstdefault:
        result.append((arg, defaults[i - firstdefault]))
    else:
        result.append((arg,))
"
"How to address a python list in MySQL query with ""WHERE""?","cur.execute(
    ""SELECT version,name FROM data2.files WHERE name IN ("" +
    "","".join((""%s"",) * len(filenames)) + 
    "")"",
    tuple(filenames)
)
"
How do I align text output in python?,">>> for i in range(len(num)):
        print('{0:>{numLength}}-{1:>{numLength}}: {2}'.format(lower[i], upper[i], '*' * num[i], digits=numLength))
"
How can I order a list of dictionaries based on another list which has the key?,">>> from pprint import pprint
>>> req_ids = ['964', '123', '534', '645', '876', '222']
>>> res_result = [{'id':'123', 'name':'Sachin'},
...               {'id':'534', 'name':'Vipin'},
...               {'id':'222', 'name':'Ram'},
...               {'id':'645', 'name':'Anoop'},
...               {'id':'964', 'name':'Sani'},
...               {'id':'876', 'name':'John'}]
>>> id_to_pos = {key: i for i, key in enumerate(req_ids)}
>>> sorted(res_result, key=lambda d: id_to_pos[d['id']])
[{'id': '964', 'name': 'Sani'}, {'id': '123', 'name': 'Sachin'}, {'id': '534', 'name': 'Vipin'}, {'id': '645', 'name': 'Anoop'}, {'id': '876', 'name': 'John'}, {'id': '222', 'name': 'Ram'}]
>>> pprint(_)
[{'id': '964', 'name': 'Sani'},
 {'id': '123', 'name': 'Sachin'},
 {'id': '534', 'name': 'Vipin'},
 {'id': '645', 'name': 'Anoop'},
 {'id': '876', 'name': 'John'},
 {'id': '222', 'name': 'Ram'}]
"
How would one add a colorbar to this example?,"cmap = plt.get_cmap('cool', 5)
"
Pandas stack/groupby to make a new dataframe,"df = df.set_index([""resp"", ""vehicle"", ""color""])

grouped = df.groupby(lambda x: x[0].lower(), axis=1)

new_grouped = []
for key, group in grouped:
    group.columns = [""sl_val""] + [""BL_val{}"".format(i) for i in range(1,4)]
    group[""sl""] = key
    new_grouped.append(group)

df2 = pd.concat(new_grouped).reset_index()

df2 = df2.sort([""resp"", ""vehicle"", ""color""]).set_index(""resp"")
df2 = df2[[""vehicle"", ""color"", ""sl""] + [k for k in df2.columns if ""_"" in k]]
"
How to interpolate using nearest neighbours for high dimension numpy python arrays,"import numpy as np
import scipy.ndimage.interpolation

def ndim_interp(A, ranges, p):
    # A: array with n dimensions
    # ranges: list of n lists or numpy arrays of values along each dimension
    # p: vector of values to find (n elements)

    # calculate the coordinates into array positions in each direction
    p_arr = []
    # iterate through all dimensions
    for i in range(A.ndim):
        # check if we are overrange; if we are, use the edgemost values
        if p[i] <= ranges[i][0]:
            p_arr.append(0)
            continue
        if p[i] >= ranges[i][-1]:
            p_arr.append(A.shape[i] - 1)
            continue

        # find the nearest values to the left
        right = np.searchsorted(ranges[i], p[i])
        left = right - 1

        # find the relative distance
        d = (p[i] - ranges[i][left]) / (ranges[i][right] - ranges[i][left])

        # append the position
        p_arr.append(left + d)

    coords = np.array(p_arr).reshape(A.ndim, -1)
    return scipy.ndimage.interpolation.map_coordinates(A, coords, order=1, mode='nearest')[0]
"
argparse: store_true and int at same time,"import argparse
parser = argparse.ArgumentParser()
parser.add_argument(
    '-t', '--temperature',
    help='performs temperature test (period in sec)',
    type=int,
    nargs='?',
    const=60,         # Default value if -t is supplied
    default=None,     # Default value if -t is not supplied
    metavar='PERIOD')

args = parser.parse_args()
print(args)
"
how to make child of a list become a variable in python,">>> globals().update(a[""data""])
>>> var2
2
"
Python: How to access a list of urls through a list of proxies?,"import itertools

with open('proxies.txt') as proxies:
    with open('urls.txt') as urls:
        for (proxie, url) in itertools.product(proxies, urls):
            print ""access"", url.rstrip(), ""using"", proxie.rstrip()
"
Append Level to Column Index in python pandas,"pd.concat([df1, df2, df3], axis=1, keys=['df1', 'df2', 'df3'])
"
python 2.7 : remove a key from a dictionary by part of key,"    >>> d = {
     (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Me'): 300, 
     (u'A_String_0', u'B_String_4'): 301, 
     (u'A_String_0', u'A_String_1', u'B_String_3', u'Remove_Key'): 301,
    }
    >>> 
    >>> 
    >>> d_out = {k:v for k,v in d.items() if not any(x.startswith('Remove_') for x in k)}
    >>> d_out
{(u'A_String_0', u'B_String_4'): 301}
"
Python: Searching for an int in a list,"[i for i, z in enumerate(x) if z == 1]
"
Encompass the output of a for loop into a variable in python,"body=[]
for item in parsed:
    body.append(item['resource']['caseNumber'], \
        item['resource']['subject'], \
        item['resource']['status'], \
        item['resource']['severity'] )
"
python group by data based on one field of list,"import collections
result = collections.defaultdict(list)
i = ((1,'MCA', 'Science'),(2,'physic', 'Science'),(3,'chemsitry', 'Science'),(4,'punjabi', 'arts'),(5,'hindi', 'arts'))
for id,name,subject in i:
    result[subject].append({'id':str(id), 'name':name})
"
Different sequence of names with pandas,"graph_by_common_users = common_users.pivot(index='pair of websites', columns='used_at', values='common users')
#sort by column 2014
graph_by_common_users = graph_by_common_users.sort_values(2014, ascending=False)



ax = graph_by_common_users.plot(kind='barh', width=0.5, figsize=(10,20))
[label.set_rotation(25) for label in ax.get_xticklabels()]


rects = ax.patches 
labels = [int(round(graph_by_common_users.loc[i, y])) for y in graph_by_common_users.columns.tolist() for i in graph_by_common_users.index] 
for rect, label in zip(rects, labels): 
    height = rect.get_height() 
    ax.text(rect.get_width() + 3, rect.get_y() + rect.get_height(), label, fontsize=8) 
"
How do i get my Beautiful soup output data to a text file?,"import urllib2
from bs4 import BeautifulSoup

url = urllib2.urlopen(""http://link"").read()
soup = BeautifulSoup(url)
file = open(""parseddata.txt"", ""wb"")
for line in soup.find_all('a', attrs={'class': 'book-title-link'}):
    href = line.get('href')
    print href
    if href:
        file.write(href + '\n')
file.close()
"
better for-loop syntax for detecting empty sequences?,"it = empty_adaptor(some_iter)
if it is not None: 
   for i in it:
       # handle items
else:
   # handle empty case
"
How to convert an xml string to a dictionary in Python?,"import cElementTree as ElementTree

class XmlListConfig(list):
    def __init__(self, aList):
        for element in aList:
            if element:
                # treat like dict
                if len(element) == 1 or element[0].tag != element[1].tag:
                    self.append(XmlDictConfig(element))
                # treat like list
                elif element[0].tag == element[1].tag:
                    self.append(XmlListConfig(element))
            elif element.text:
                text = element.text.strip()
                if text:
                    self.append(text)


class XmlDictConfig(dict):
    '''
    Example usage:

    >>> tree = ElementTree.parse('your_file.xml')
    >>> root = tree.getroot()
    >>> xmldict = XmlDictConfig(root)

    Or, if you want to use an XML string:

    >>> root = ElementTree.XML(xml_string)
    >>> xmldict = XmlDictConfig(root)

    And then use xmldict for what it is... a dict.
    '''
    def __init__(self, parent_element):
        if parent_element.items():
            self.update(dict(parent_element.items()))
        for element in parent_element:
            if element:
                # treat like dict - we assume that if the first two tags
                # in a series are different, then they are all different.
                if len(element) == 1 or element[0].tag != element[1].tag:
                    aDict = XmlDictConfig(element)
                # treat like list - we assume that if the first two tags
                # in a series are the same, then the rest are the same.
                else:
                    # here, we put the list in dictionary; the key is the
                    # tag name the list elements all share in common, and
                    # the value is the list itself 
                    aDict = {element[0].tag: XmlListConfig(element)}
                # if the tag has attributes, add those to the dict
                if element.items():
                    aDict.update(dict(element.items()))
                self.update({element.tag: aDict})
            # this assumes that if you've got an attribute in a tag,
            # you won't be having any text. This may or may not be a 
            # good idea -- time will tell. It works for the way we are
            # currently doing XML configuration files...
            elif element.items():
                self.update({element.tag: dict(element.items())})
            # finally, if there are no child tags and no attributes, extract
            # the text
            else:
                self.update({element.tag: element.text})
"
Python multimethods using isinstance,"def len(x):
    if type(x) == str:
        # compute the length of a string
    elif type(x) == list:
        # compute the length of a list
    else:
        #
"
Case insensitive dictionary search with Python,theset = set(k.lower() for k in thedict)
Python: Printing letters one by one in Command Prompt,"import time
import sys

def type(str):
    for letter in str:
        print(letter, end='')
        sys.stdout.flush()
        time.sleep(0.02)
    print(""\n"")

type(""This sentence is typed."")
"
Execute Function Every X Seconds On Class Init,"class myBot(JabberBot):
  def start(self):
    threading.Thread(target=self.autoNotifyLoop).start()

  def autoNotifyLoop(self):
    while True:
      self.autoNotify()
      time.sleep(5) # wait 4 seconds

  def autoNotify(self):
    self.send('someuser@jabber.example.com','cooool message text!')
"
Adding the results of multiple functions,"output = list(gen1())
for index, value in enumerate(gen2()):
    output[index] += value
"
Multiple assignment from a function,"t = (2,5)
a,b = t #valid!

def random_int():
    return random.randint(1, 100)
#valid: unpack a 2-tuple to a 2-tuple of variables
a, b = random_int(), random_int()
#invalid: tries to unpack an int as a 2-tuple
a, b = random_int()

#valid: you can also use comprehensions
a, b = (random_int() for i in range(2))
"
how to merge some columns data from different txt files in Python?,"from itertools import izip_longest
import csv
with open('a1.txt', 'rb') as csv1,open('b1.txt', 'rb') as csv2,open('c.txt', 'w') as out:
     spam1 = csv.reader(csv1, delimiter=',')
     spam2 = csv.reader(csv2, delimiter=',')
     last_column=list(izip_longest(*spam2))[-1]
     for i,j in  izip_longest(spam1,last_column):
        out.write(','.join([t.strip(';') for t in i])+','+j+'\n')
"
How to create an SQL View with SQLAlchemy?,"from sqlalchemy import Table
from sqlalchemy.ext.compiler import compiles
from sqlalchemy.sql.expression import Executable, ClauseElement

class CreateView(Executable, ClauseElement):
    def __init__(self, name, select):
        self.name = name
        self.select = select

@compiles(CreateView)
def visit_create_view(element, compiler, **kw):
    return ""CREATE VIEW %s AS %s"" % (
         element.name,
         compiler.process(element.select, literal_binds=True)
         )

# test data
from sqlalchemy import MetaData, Column, Integer
from sqlalchemy.engine import create_engine
engine = create_engine('sqlite://')
metadata = MetaData(engine)
t = Table('t',
          metadata,
          Column('id', Integer, primary_key=True),
          Column('number', Integer))
t.create()
engine.execute(t.insert().values(id=1, number=3))
engine.execute(t.insert().values(id=9, number=-3))

# create view
createview = CreateView('viewname', t.select().where(t.c.id>5))
engine.execute(createview)

# reflect view and print result
v = Table('viewname', metadata, autoload=True)
for r in engine.execute(v.select()):
    print r
"
Break string into list of characters in Python,"fd = open(filename, 'rU')
chars = []
for line in fd:
    chars.extend(line)
"
How to access way coordinates from a large (.json-based) list structure,"coords = {}
for element in elements:
    if element['type'] == 'node':
        coords[element['id']] = (element['lat'], element['lon'])
"
How to Left Justify part of a String in python?,">>> '%-20s %s' % ('## execute', 'Execute an IRC command')
'## execute           Execute an IRC command'
"
Pythonic way of percentagechance,"def sword_fn():
    # your stuff goes here

def dagger_fn():
    # your stuff goes here

def wand_fn():
    # your stuff goes here

make_fn = RandomItemGenerator()
make_fn.add_item(sword_fn,  80)
make_fn.add_item(dagger_fn, 19)
make_fn.add_item(wand_fn,    1)

which = make_fn()      # pick a function
which()                # run the function
"
Which data structure to use in Python to store data like this?,"def monthdict():
    return defaultdict(list)
data = defaultdict(monthdict)

data[year][month].append(day)
"
Memoization fibonacci algorithm in python,"f(5) = 
f(4) + f(3) = 
f(3) + f(2) + f(3) =
f(2) + f(1) + f(2) + f(3) =
f(1) + f(0) + f(1) + f(2) + f(3) = (base clauses) = 
1 + f(0) + f(1) + f(2) + f(3) = 
2 + f(1) + f(2) + f(3) =
3 + f(2) + f(3) = 
3 + f(1) + f(0) + f(3) = 
3 + 1 + f(0) + f(3) = 
5 + f(3) = 
5 + f(2) + f(1)  =
5 + f(1) + f(0) + f(1) =
5 + 1 + f(0) + f(1) =
5 + 2 + f(1) =
8
"
How to split a byte string into separate bytes in python,">>> value = b'\x00\x01\x00\x02\x00\x03'
>>> value[:2]
b'\x00\x01'
>>> value[2:4]
b'\x00\x02'
>>> value[-2:]
b'\x00\x03'
"
Python list help,"copy_of_A = A[:]
"
Pandas: find column name and value with max (and second max) value for each row,"def top(x):
    x.set_index('User', inplace=True)
    df = pd.DataFrame({'Max1Name':[],'Max2Name':[],'Max1Value':[],'Max2Value':[]})
    df.index.name='User'
    df.loc[x.index.values[0],['Max1Name', 'Max2Name']] = x.sum().nlargest(2).index.tolist()
    df.loc[x.index.values[0],['Max1Value', 'Max2Value']] = x.sum().nlargest(2).values
    return df

DF1.groupby('User').apply(top).reset_index(level=1, drop=True).reset_index()
"
Make all possible combinations of list elements - using python,"list(get_all_combinations(input_list))
# [[1], [4], [6], [8], [11], [13], [1, 4], [1, 6], [1, 8], [1, 11], [1, 13],..]
"
Scraping and Parsing a website for information,"import re
import requests

L = []
for i in range(1):      # Number of pages plus one 
     url = ""http://www.pga.com/golf-courses/search?page={}&searchbox=Course+Name&searchbox_zip=ZIP&distance=50&price_range=0&course_type=both&has_events=0"".format(i)
     r = requests.get(url)
     ownership = re.findall('(?<=<div class=""views-field-course-type""><span class=""field-content"">)([^<]+)',r.text)    
     address = re.findall('(?<=<div class=""views-field-address""><span class=""field-content"">)([^<]+)', r.text)
     L.extend(zip(ownership,address))
"
Looking for a concise way to check for point collision in a list of Rects,">>> rects = [pygame.Rect(0,0,100,100), pygame.Rect(30,30,30,30)]
>>> next((r for r in rects if r.collidepoint(10, 10)), None)
<rect(0, 0, 100, 100)>
>>> next((r for r in rects if r.collidepoint(200, 200)), None)
>>>
"
Remove single quotes from python list item,"print('[' + ', '.join(your_list) + ']')
"
"Create parser with subcommands in argparse, customize positional argument(s)","parent_parser.add_argument('--verbose', '-v', action='store_true', 
        help=""Verbosity on"")

child_parser = parent_parser.add_subparsers(title=""subcommand"",
        help=""Subcommand help"")
new_file_command = child_parser.add_parser('new', help=""New text file"")
edit_file_command = child_parser.add_parser('edit', help=""Edit existing text file"")
"
Vectorizing triple for loop in Python/Numpy with different array shapes,"H = 80.0
M,N,R = B.shape
B4D = B[:,None,:,:]
out = ((A.reshape(M,-1,N,R)*np.log(H/B4D))/np.log(10./B4D)).reshape(-1,N,R)
"
Working with python dictionary notation,"#path is the string that you want to do replacements in.
#replacementDict is the dict containing the key-value pairs mentioned in your post.
def iterateLSystem(path, replacementDict):
    #strings aren't mutable, so we make a mutable list version of path
    listPath = list(path)
    for i in range(len(listPath)):
        currentChar = listPath[i]
        if currentChar in replacementDict:
            listPath[i] = replacementDict[currentChar]
    #glob listPath back into a single string
    return """".join(listPath)
"
Python changing function definition in loop?,"def integrate(f, a, b):
    h = float(b-a)/10
    I = 0;
    for i in range(10):
        I += f(h*i)

    return I

A = zeros(N)
for k in range(N):
    A[k] = integrate(lambda x: cos(k*x), a, b)
"
Why does multiprocessing use only a single core after I import numpy?,"os.system(""taskset -p 0xff %d"" % os.getpid())
"
Equivalent of R's removeSparseTerms in Python,"import numpy as np
from scipy.sparse import csr_matrix
MIN_VAL_ALLOWED = 2

X = csr_matrix([[7,8,0],
                [2,1,1],
                [5,5,0]])

z = np.squeeze(np.asarray(X.sum(axis=0) > MIN_VAL_ALLOWED)) #z is the non-sparse terms 

print X[:,z].toarray()
#prints X without the third term (as it is sparse)
[[7 8]
[2 1]
[5 5]]
"
Python iterative loop,"for s in strings:
    if findWholeWord(s)(line) != None:
        print (jd['user_id'], jd['text'])
        break
"
I am using a recursive function and need to print from within the function just once,"def reverseDisplay(n):
    tmp = n % 10       # Determine the rightmost digit,
    print(tmp, end="""") #  and print it with no space or newline.
    if n == tmp:       # If the current n and the rightmost digit are the same...
        print()        #    we can finally print the newline and stop recursing.
    else:              # Otherwise...
        reverseDisplay(n // 10)  # lop off the rightmost digit and recurse.
"
How to get a simple list from a list comprehension that returns a list of lists,">>> spices={
... 'Animals':{1:'Bison', 2:'Panther', 3:'Elephant'},      
... 'Birds':{1:'Duck', 2:'Hawk', 3:'Pigeon'}, 
... 'Fish':{1:'Shark', 2:'Salmon', 3:'Piranha'}
... }
>>> [v for specie in spices for v in spices[specie].values()]
['Shark', 'Salmon', 'Piranha', 'Bison', 'Panther', 'Elephant', 'Duck', 'Hawk', 'Pigeon']
"
How do I iterate over a large number of tuples of integers in the order of their sum?,"def ordered_combinations(pop, n):
    pop = sorted(pop)

    for s in range(sum(pop[:n]), sum(pop[-n:])+1):
        yield from get_sums(pop, s, n)

def get_sums(pop, s, n):
    if n == 1:
        if s in pop:
            yield [s]
        return

    for i, v in enumerate(pop):
        if sum(pop[i:i+n]) > s:
            return
        for rest in get_sums(pop[i+1:], s-v, n-1):
            rest.append(v)
            yield rest
"
How to use return in for loop with function in python,"for item in mylist:
    value = get(item)
    if value is not None:
        return value
"
"Python, obfuscating letters in a list","import random

def obfuscate(word):
    new_word = ''
    for char in word:
        if random.random() > 0.1:
            new_word += random.choice([""!"", ""%"", ""*"", ""#"", ""@""])
        else:
            new_word += char
    return new_word

user_input = raw_input(""Enter a 4-letter word:  "")
if len(user_input) == 4:
    print ""Original:"", user_input
    print ""Obfuscate:"", obfuscate(user_input)
"
heatmap in matplotlib with vector format,"import numpy as np
import numpy.random
import matplotlib.pyplot as plt

# Generate some test data
x = np.random.randn(8873)
y = np.random.randn(8873)

heatmap, xedges, yedges = np.histogram2d(x, y, bins=50)

surf = plt.pcolormesh(xedges, yedges, heatmap)
plt.axis('image')
plt.colorbar(surf, shrink=0.75, aspect=5)
plt.show()
"
Speed up nautilus python-extensions for reading image's Exif,"from gi.repository import Nautilus, GObject
from urllib import unquote
from subprocess import Popen, PIPE

def getexiftool(filename):
    options = '-fast2 -f -m -q -q -s3 -ExifIFD:DateTimeOriginal'
    exiftool = Popen(['/usr/bin/exiftool'] + options.split() + [filename],
                     stdout=PIPE, stderr=PIPE)
    output, errors = exiftool.communicate()
    return output.split('\n')

class MyExtension(Nautilus.ColumnProvider, Nautilus.InfoProvider, GObject.GObject):
    def __init__(self):
        pass

    def get_columns(self):
        return (
            Nautilus.Column(name='MyExif::DateTime',
                            attribute='Exif:Image:DateTime',
                            label='Date Original',
                            description='Data time original'
            ),
        )

    def update_file_info_full(self, provider, handle, closure, file_info):
        if file_info.get_uri_scheme() != 'file':
            return

        filename = unquote(file_info.get_uri()[7:])
        attr = ''

        if file_info.get_mime_type() in ('image/jpeg', 'image/png'):
            GObject.timeout_add_seconds(1, self.update_exif, 
                                        provider, handle, closure, file_info)
            return Nautilus.OperationResult.IN_PROGRESS

        file_info.add_string_attribute('Exif:Image:DateTime', attr)

        return Nautilus.OperationResult.COMPLETE

    def update_exif(self, provider, handle, closure, file_info):
        filename = unquote(file_info.get_uri()[7:])

        try:
            data = getexiftool(filename)
            attr = data[0]
        except:
            attr = ''

        file_info.add_string_attribute('Exif:Image:DateTime', attr)

        Nautilus.info_provider_update_complete_invoke(closure, provider, 
                               handle, Nautilus.OperationResult.COMPLETE)
        return False
"
Should I use a class? (Python),"class quad:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def __call__(x):
        return self.a * x**2 + self.b * x + self.c

q = quad(p, q, r)
q(x)
"
How to not print the last line,"with open(""fb_remodel.csv"",'a') as Html_file:
    # blah blah
    # at the end -- close is automatic.  
"
Python inspect module: keyword only args,"max(None, arg1, arg2, arg3)
"
Return PostgreSQL hstore as OrderedDict using psycopg2 in Python,"# This will save the data as ordered.
data = OrderedDict([('a', '1'), ('b', '2'), ('c', '3')])
cursor.update(""""""
    UPDATE mytable
    SET ordered = %(data)s;
"""""", {
    'data': data
})

# This will save the data as unordered. Whatever the internal order
# happens to be for the dict will be sent. When I run it in the python
# interpreter, it results in:
#   [('a', '1'), ('c', '3'), ('b', '2')]
cursor.update(""""""
    UPDATE mytable
    SET ordered = %(data)s;
"""""", {
    'data': data
})
"
why is plotting with Matplotlib so slow?,"import matplotlib.pyplot as plt
import numpy as np
import time

x = np.arange(0, 2*np.pi, 0.1)
y = np.sin(x)

fig, axes = plt.subplots(nrows=6)

fig.show()

# We need to draw the canvas before we start animating...
fig.canvas.draw()

styles = ['r-', 'g-', 'y-', 'm-', 'k-', 'c-']
def plot(ax, style):
    return ax.plot(x, y, style, animated=True)[0]
lines = [plot(ax, style) for ax, style in zip(axes, styles)]

# Let's capture the background of the figure
backgrounds = [fig.canvas.copy_from_bbox(ax.bbox) for ax in axes]

tstart = time.time()
for i in xrange(1, 2000):
    items = enumerate(zip(lines, axes, backgrounds), start=1)
    for j, (line, ax, background) in items:
        fig.canvas.restore_region(background)
        line.set_ydata(np.sin(j*x + i/10.0))
        ax.draw_artist(line)
        fig.canvas.blit(ax.bbox)

print 'FPS:' , 2000/(time.time()-tstart)
"
numpy squeeze along an axis wont work,"# Squeezed output array
if A.shape[rem_axis]!=1:
    print('Error: Specified axis is not singleton.')
    A_squeezed = np.array([]) # Set empty as a sign of failure
         # Change it to any other signal value or keep as A itself
else:
    A_squeezed = A.reshape(np.delete(A.shape,rem_axis))
"
Counting number of strings in a List with Python,"for k, v in sorted(cn.items(), key=lambda x: (-x[1],x[0])):
    print(""[{}][{}]"".format(k, v))
"
matplotlib savefig image size with bbox_inches='tight',"import matplotlib.pyplot as plt
import numpy as np
sin, cos = np.sin, np.cos

fig = plt.figure(frameon = False)
fig.set_size_inches(5, 8)
ax = plt.Axes(fig, [0., 0., 1., 1.], )
ax.set_axis_off()
fig.add_axes(ax)

x = np.linspace(-4, 4, 20)
y = np.linspace(-4, 4, 20)
X, Y = np.meshgrid(x, y)
deg = np.arctan(Y**3-3*Y-X)
plt.quiver(X, Y, cos(deg), sin(deg), pivot = 'tail', units = 'dots', color = 'red', )
plt.savefig('/tmp/test.png', dpi = 200)
"
Condition always evaluates to else branch,"if x == 0: pass
elif x == 1: pass
else: pass
"
Display array as raster image in python,"import glumpy
import numpy as np

# Generate some data...
x, y = np.meshgrid(np.linspace(-2,2,200), np.linspace(-2,2,200))
x, y = x - x.mean(), y - y.mean()
z = x * np.exp(-x**2 - y**2)

window = glumpy.Window(512, 512)
im = glumpy.Image(z.astype(np.float32), cmap=glumpy.colormap.Grey)

@window.event
def on_draw():
    im.blit(0, 0, window.width, window.height)
window.mainloop()
"
Why do different methods of same object have the same `id`?,"In [201]: f = a.f

In [202]: id(f) == id(a.g)
Out[202]: False
"
Handling tuples as values within a dictionary (in list comprehensions),">>> d = {'a': ('abc', 'pqr', 'xyz'),
...  'b': ('abc', 'lmn', 'uvw'),
...  'c': ('efg', 'xxx', 'yyy')}
>>> x = 'abc'
>>> [ k for k, v in d.items() if v[0] == x ]
['a', 'b']
"
Convert EST timestamp to GMT taking into account Daylight Savings,"Python 3.3+:
timestamp = dt.timestamp()
"
trying to print to a text file with words that only have two or more occurring vowels,"import re
with open(""FirstMondayArticle.html"") as f, open(""twoVoweledWordList.txt"", ""w"") as out:
    two_vowels = re.compile(r"".*[aeiou].*[aeiou].*"", re.I)
    non_word = re.compile(r""\W+"", re.U)
    for line in f:
        for word in non_word.split(line):
            if two_vowels.match(word):
                print(word)
                out.write(""{}\n"".format(word.rstrip()))  
"
How to return all possible combination,"from itertools import product


for vector in product(*A):
    # vector is [a[0], b[0], ..., k[0]] through to [a[k-1], [b[k-1], ..., k[k-1]]
    # odometer style
"
How to save pygame Surface as an image to memory (and not to disk),"from StringIO import StringIO
from PIL import Image
data = pygame.image.tostring(surf, 'RGBA')
img = Image.fromstring('RGBA', (100,200), data)
zdata = StringIO()
img.save(zdata, 'JPEG')
print zdata.getvalue()
"
Pythonic way to rewrite the following C++ string processing code,"s = re.sub(r""\d+"", """", s)
s = re.sub(r""\s+"", "" "", s)
"
How to generate regex to match access.log acording to its format config?,"import re

conf = '$remote_addr - $remote_user [$time_local] ""$request"" $status $body_bytes_sent ""$http_referer"" ""$http_user_agent""'
regex = ''.join(
    '(?P<' + g + '>.*?)' if g else re.escape(c)
    for g, c in re.findall(r'\$(\w+)|(.)', conf))
"
subtract current time from pandas date column,"In [9]:

df = pd.DataFrame(['05/06/2015 00:00', '22/06/2015 00:00', None], columns=['myDate'])
df['myDate']= pd.to_datetime(df['myDate'], coerce=True)
df
Out[9]:
      myDate
0 2015-05-06
1 2015-06-22
2        NaT
In [10]:

df['diff'] = df['myDate'] - dt.datetime.now().date()
df
Out[10]:
      myDate    diff
0 2015-05-06  9 days
1 2015-06-22 56 days
2        NaT     NaT
"
write to file in python3,"out.write(datName + ""\n"")
"
What's the pythonic way of conditional variable initialization?,"  message = get_other_message() if optional_var is not None else get_message()
"
How to not render a entire string with jinja2,"<div>{{ blogpost.text|truncate }}</div>
"
Deleting every second occurence of a word in a txt file (Python),"import re

name='Courtney'

with open(""old_text.txt"") as f:
   txt = f.read()
   new_txt=re.sub(r'(\b{}\b.*?)(\s*\{}\b\s*)'.format(name,name),'\1',txt,re.S)
"
Having trouble with re and matching groups,"import re

line = ""2015/04/13.16:26:07 156.0 GB of instance data copied, dev_iosecs 1887, dev_iorate 88.8 MB/s""

if re.search(""of instance data copied"", line):
    m = re.search(""(?P<datasize>\d*[.][\d]) (?P<units>TB|GB|MB|KB) of instance data copied"", line)
    print m.group('datasize'), m.group('units')
    if m.group('units') == ""GB"":
        print ""MATCH!!!!!""
"
Log-computations in Python,"import scipy.stats as stats

def f(i):
    return i
n, p = 5000, 0.5
print(stats.binom.expect(f, (n, p), lb=0, ub=n))
# 2499.99999997
"
Python amount of days in a month with a given year and month?,"import calendar

year = int(raw_input('Enter year: '))
month = int(raw_input('Enter month number: '))

print(calendar.monthrange(year, month)[1])
"
What is the overhead of using a dictionary instead of a list?,">>> x = maybelist()
>>> x[0] = 'first'
>>> x[1] = 'second'
>>> x[10] = 'eleventh'
>>> print(x)
['first', 'second', None, None, None, None, None, None, None, None, 'eleventh']
>>> print(x[10])
eleventh
"
Python scrape style display:none,"browser = webdriver.PhantomJS(path_to_phantom)
"
How do I merge two lists into a single list?,"[j for i in zip(a, b) for j in i]"
How to use igraph python's metamagic class?,"graph.vs[""size""] = rescale(graph.degree(), out_range=(0, 10))
plot(g)
"
Regex Findall Hang in Linux,"float1 = re.findall(r'\d+\.\d+', string1)
float2 = re.findall(r'\d+\.\d+', string2)
"
Using python decorator with or without parentheses,"def someDecorator(arg=None):
    def decorator(func):
        def wrapper(*a, **ka):
            return func(*a, **ka)
        return wrapper

    if callable(arg):
        return decorator(arg) # return 'wrapper'
    else:
        return decorator # ... or 'decorator'
"
Name isn't found in my Python application,"def main():
    keepProgramRunning = True

    while keepProgramRunning:
        print ""Welcome to the Calculator!""
        print ""Please choose what you'd like to do:""

        print ""0: Addition""
        print ""1: Subtraction""
        print ""2: Multiplication""
        print ""3: Division""    


        #Capture the menu choice.
        choice = raw_input()

        #Capture the numbers you want to work with.
        numberA = raw_input(""Enter your first number: "")
        numberB = raw_input(""Enter your second number: "")

        if choice == ""0"":
            print ""Your result is:""
            print Addition(numberA, numberB)
        elif choice == ""1"":
            print ""Your result is:""
            print Subtraction(numberA, numberB)
        elif choice == ""2"":
            print ""Your result is:""
            print Multiplication(numberA, numberB)
        elif choice == ""3"":
            print ""Your result is:""
            print Division(numberA, numberB)
        else:
            print ""Please choose a valid option.""

def Addition(a, b):
    return a + b

def Subtraction(a, b):
    return a - b

def Multiplication(a, b):
    return a * b

def Division(a, b):
    return a / b

if __name__ == '__main__':
    main()
"
How to use `Series.interpolate` in pandas with the old values modified,"df['itp'].interpolate('spline', order=3, s=0, inplace=True)
"
Is it possible to read FTP files without writing them using Python?,"#!/usr/bin/env python
from ftplib import FTP
from StringIO import StringIO

ftp = FTP('ftp.kernel.org') 
ftp.login()
r = StringIO()
ftp.retrbinary('RETR /pub/README_ABOUT_BZ2_FILES', r.write)

print r.getvalue()
"
Summing over lists in python - is there a better way?,">>> data = [[1,2,3,4,5], [1,1,1,4,1], [1,22,3,1,5], [1,2,5,4,5]]
>>> [sum(x) for x in zip(*data)]
[4, 27, 12, 13, 16]
"
Write average weather data from a year given by user to a text file,"def data_to_python(data_file_name):
    with open(data_file_name,'r') as f:
        data = []
        first = True
        for line in f:
            if first:
                first = False
                datanames = line.split('\t')
            else:
                temp = {}
                for i,item in enumerate(line.split('\t')):
                     temp[datanames[i]] = item
                data.append(temp)
    return data

def searchByYear(data,year):
    temp = []
    for entry in data:
        if entry['Dato'].endswith(str(year)):
            temp.append(entry)
    return temp
"
Splitting a list in python,"def split_list(l, sep):
    current = []
    for x in l:
        if x == sep:
            yield current
            current = []
        else:
            current.append(x)
    yield current
"
Accessing list item in django template,"@register.filter
def get_by_index(lst, idx):
    return lst[idx]
"
How to search by Date given Datetime index,"print df1.index.to_series().dt.date
2011-01-13 16:00:00    2011-01-13
2011-01-14 16:00:00    2011-01-14
2011-01-18 16:00:00    2011-01-18
dtype: object

print df1.index.to_series().dt.date.isin(df2['Date'].dt.date)
Name: Date, dtype: object
2011-01-13 16:00:00     True
2011-01-14 16:00:00    False
2011-01-18 16:00:00    False
dtype: bool

print df1[df1.index.to_series().dt.date.isin(df2['Date'].dt.date)]
                       A    B    C   D
2011-01-13 16:00:00  344  144  616  73
"
Counting number of unique items from a dictionary,"from collections import Counter
dic = Counter()
for line in x:
    m = re.search(r""\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b"",line).group().split()
    c = re.search(r""\[(.+)\]"",line).group().split()
    for i in range(len(m)):
        dic[m[i]] += 1

for k,v in dic.iteritems(): #or items if Python 3.X
    print k, v   
"
Python: How to check if a variable is equal to one string or another string,"if var == 'stringone' or var == 'stringtwo':
    dosomething()
"
"Specifics of converting a custom __repr__, __str__ on a custom python class",">>> ca = ClusterAssignment()
>>> print(ca.__str__)
<bound method ClusterAssignment.__str__ of [string]>
>>> print(ca.__repr__)
<bound method ClusterAssignment.__repr__ of [string]>
"
Python List of Dictionaries[int : tuple] Sum,">>> sum(v[1] for d in myList for v in d.itervalues())
100
"
run os.system command as subprocess python,"cmd = ""/usr/atria/bin/cleartool setview -exec '/usr/bin/python /home/testUser/Development/Scripts/setDoneFlag_Count_Lines.py' testUser__project_5_0_myProject_001""
p=subprocess.Popen(cmd, shell=True)
"
Python searching patterns in lists of strings,"SS = ['T', 'Q', 'T', 'D', 'Q', 'D', 'D', 'Q', 'T', 'D']
print("""".join(SS).count(""TD""))
"
Working on multilevel list (2),"li = ['0', ['1', '2'], ['3', ['4', '5'], '6', ['7'], '8'], '9']
def to_int(lst, path=[]):
    for i, j in enumerate(lst):
        if isinstance(j, list):
            for item in to_int(j, path+[i]): yield item
        else:
            yield int(j), path+[i]

for item in to_int(li):
    print (item)
"
Ordered dictionaries,"if self.caseload:
     print """"
     for i, name in enumerate(self.caseload, 1):
          print ""%d. %s"" % (i, name)
"
Update initial condition in ODE solver each time step,"import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


def ode_rhs(y, t, p, t1):
    ydot[0] = -p[0]*y[0]*y[1] + p[1]*y[2] + p[2]*y[2]
    if t < t1:
        ydot[1] = 0.0
    else:
        ydot[1] = -p[0]*y[0]*y[1] + p[1]*y[2]
    ydot[2] = p[0]*y[0]*y[1] - p[1]*y[2] - p[2]*y[2]
    return ydot


ydot = np.zeros(3)
p = np.array([0.01, 0.25, 0.1])
y0 = [20.0, 100.0, 0.0]
t = np.linspace(0, 200, 2001)
t1 = 20.0

sol = odeint(ode_rhs, y0, t, args=(p, t1))


plt.figure(1)
plt.clf()

plt.subplot(3, 1, 1)
plt.plot(t, sol[:, 0])
plt.axvline(t1, color='r')
plt.grid(True)
plt.ylabel('y[0]')


plt.subplot(3, 1, 2)
plt.plot(t, sol[:, 1])
plt.axvline(t1, color='r')
plt.grid(True)
plt.ylabel('y[1]')
plt.ylim(0, 110)

plt.subplot(3, 1, 3)
plt.plot(t, sol[:, 2])
plt.axvline(t1, color='r')
plt.grid(True)
plt.ylabel('y[2]')
plt.xlabel('t')

plt.show()
"
Python: How to find n-gram patterns in the text?,"d = {w: s.count(w) for w in p_words if w in s}
# -> {'cash': 1, 'limited time offer': 1}
"
How to select all tags with selenium and python,"from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

driver = webdriver.Chrome()
driver.get(""http://www.drugs.com/drug-class/laxatives.html?condition_id=&generic=0&sort=rating&order=desc"") 

# wait for the table list to load
table = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, ""table.data-list"")))

for b in table.find_elements_by_css_selector(""tr td > a[href] > b""):
    print(b.text)
"
How to remove apostrophe from text?,"if file.endswith('.docx'):
    ...
    cleaned = re.sub('<(.|\n)*?>','',content)
    cleaner = string.translate(cleaned, None, [""‘"",""’""])
    # python3 has to use:
    # # cleaner = cleaned.translate(str.maketrans({'‘':'','’':''}))
"
How to count the number of words in a paragraph and exclude some words (from file)?,"words_par.startswith(""P1"" or ""P2"" or ""P3"")
"
How to open a text file as a character matrix in python?,"import numpy

with open(""myfile.fa"",""rt"") as infile:
    matrix =  numpy.matrix([list(line.strip()) for line in infile.readlines()])
    print matrix
"
"Performance comparison of OpenCV-Python interfaces, cv and cv2","import time
import numpy as np
import cv2

gray = cv2.imread('lena_full.jpg',0)
height, width = gray.shape
h = np.empty((height,width,3), np.uint8)

t = time.time()
for i in xrange(height):
    for j in xrange(width):
        k = gray.item(i, j)
        if k == 127:
            h.itemset(i, j, 0, 255)
            h.itemset(i, j, 1, 255)
            h.itemset(i, j, 2, 255)
        elif k > 127:
            h.itemset(i, j, 0, 0)
            h.itemset(i, j, 1, 0)
            h.itemset(i, j, 2, 255-k)
        else:
            h.itemset(i, j, 0, k)
            h.itemset(i, j, 1, 0)
            h.itemset(i, j, 2, 0)
print time.time()-t
"
Python: Read binary file into buffer as integer then Slice,"with open('binary.txt',""rb"",buffering=-1) as f:
    for line in f:
        for c in line:
            print(c)
"
Python script to generate report of packet drop,"d={}
f = open('a.txt', 'r')
for line in f:
     if 'drops' in line:
         data=line.split()
         d[data[1]]=d.setdefault(data[1], 0)+ int(data[3])
print d
"
Add items to a dictionary of lists,">>> my_dict = dict.fromkeys(keys, [])
>>> my_dict
{'k3': [], 'k2': [], 'k1': [], 'k4': []}
>>> my_dict['k3'].append(1)
>>> my_dict
{'k3': [1], 'k2': [1], 'k1': [1], 'k4': [1]}
"
How convert datetime-local to datetime in Python?,"date_in = u'2015-01-02T00:00' 
date_out = datetime.datetime(*[int(v) for v in date_in.replace('T', '-').replace(':', '-').split('-')])
"
How can I select a certain value based on 2(or more) other values in a pandas dataframe,"res = D[(D['DealID'] == ""BAC98765"") & (D[""ServicerId""] == ""30220144"")]['ServicerPropId']
"
Ordering a list of dictionaries in python,"import operator
mylist.sort(key=operator.itemgetter('weight', 'factor'))
"
Send python multiprocessing connection via ØMQ,"import zmq
from multiprocessing import reduction

def rebuild_handle_with_key(pickled_data, authkey=None):
    from multiprocessing import current_process
    from multiprocessing.util import sub_debug
    from multiprocessing.connection import Client
    from multiprocessing.reduction import recv_handle
    import os
    address, handle, inherited = pickled_data
    if inherited:
        return handle
    sub_debug('rebuilding handle %d', handle)
    conn = Client(address, authkey=authkey or current_process().authkey)
    conn.send((handle, os.getpid()))
    new_handle = recv_handle(conn)
    conn.close()
    return new_handle

def rebuild_connection_with_key(reduced_handle, readable, writable, authkey=None):
    import _multiprocessing
    handle = rebuild_handle_with_key(reduced_handle, authkey)
    return _multiprocessing.Connection(
        handle, readable=readable, writable=writable
        )

reduction.rebuild_connection = rebuild_connection_with_key

context = zmq.Context()
socket = context.socket(zmq.SUB)
socket.connect (""tcp://localhost:5556"")
socket.setsockopt(zmq.SUBSCRIBE, '')

obj = socket.recv_pyobj()
authkey = socket.recv()
answer_conn = obj[0](obj[1][0],obj[1][1],obj[1][2], authkey)
# answer_conn = obj[0](*obj[1])

answer_conn.send('All is OK!')
"
Python __repr__ and None,">>> x = 'foo'
>>> eval(repr(x)) == x
True
"
Pygame - Is There A Way To Get The String From fontType.render?,"dialogue = 'Ooh! French Vanilla!'
self.Coffee = self.fontType.render(dialogue, 0, (0,0,0))
"
print edited list without actually editing the list,"print '{}{}'.format(counter, ""   "".join(row))
"
Python 3.4 CSV Deleting items using the in function,"filter_string = self.delName.get(""1.0"",""end-1c"")

with open(""userDatabase.csv"",""r"") as myFile:
    with open(""newFile.csv"",""w"") as newFile:
        for row in myFile:
            if filter_string not in row:
                newFile.write(row)
"
How to prevent a wrapper object wrapping itself?,"class A(object):
    def __new__(cls, obj):
        if isinstance(obj, cls):
            return obj
        rv = object.__new__(cls)
        rv._initialized = False
        return rv

    def __init__(self, obj):
        if self._initialized: return
        self._obj = obj
        self._initialized = True

class B(A):
    def __init__(self, obj):
        if self._initialized: return
        A.__init__(self, obj)
        self._otherthing = ""foo""
"
Targeting specific sub-elements when parsing XML with Python,"import xml.etree.ElementTree as etree
document = etree.parse(open(""your.xml""))

secondIdentifier = document.find("".//product/identifier[2]"")
firstContributor = document.find("".//product/contributor[1]"")
print secondIdentifier, firstContributor
"
What is the pythonic way to reverse a defaultdict(list)?,"target = defaultdict(list)
for key, values in original.items():
    for value in values:
        target[value].append(key)
"
Creating Dataframe from csv with pandas,"df = s.unstack().reset_index(drop=True, level=[1,2])
df.columns = ['group' + str(col) for col in df.columns]
print df
      group1  group2
year                
1969   10574   20245
1969    8924    9919
2012    7861    8242
2012    7245    7821
"
Splitting a string by using two substrings in Python,"re.search('Test(.*)print', testStr, re.DOTALL)"
Aggregating and Renaming Keys in Dictionary,"In [11]: {w: sum(word_count.get(x, 0) for x in ws) for w, ws in synonyms.items()}
Out[11]: {'bear': 6, 'beer': 8}
"
Is there an existing Python class that can hold any user attributes?,">>> class struct(dict):
...     def __getattribute__(self, key):
...         return self[key]
... 
>>> s = struct(a=5, b=7)
>>> s.a
5
"
Help with <key> event in python Entry widget,"    self.__aEntry.bind('<Key>', self.callback) # ※ here!
    self.__aEntry.pack(side=LEFT)

def callback(self, event):
    self.__value = event.widget.get()+event.char # ※ here!
    print self.__value
    if len(self.__value)>2:
        event.widget.delete(2,4) # ※ here!
        return ""break""
"
Parameterizing Python's json.loads() object_hook to a Factory Method,"class JSON_Namespace(object):
    def __init__(self, data_dict):
        self.__dict__.update(data_dict)
    @classmethod
    def load_from_json(cls, json_string):
        return json.loads(json_string, object_hook=cls)
"
dictionary help for python writing a code,"nd = {}
nd['john'] = 109090
nd['albert'] = 1900
nd['Tim'] = 18000

print sorted(nd.items(), key=lambda x: x[1])
"
arrange values in a python 2D array,"for name, values in groupby(data, itemgetter(0)):
    first, second = zip(*values)[1:3]
    print name, max(first), min(second)
"
Python: remove ^A in a string,">>> json_string = '{""id"":13,""code"":""cflw`2B2[h1s`lNzF@sPC1FtaCiK0VF@"",""label"":""Anonymous lifestyle App cflw`2B2[h1s`lNzF@sPC1FtaCiK0VF@""}'
>>> json_string.replace(chr(1), '')
'{""id"":13,""code"":""cflw`2B2[h1s`lNzF@sPC1FtaCiK0VF@"",""label"":""Anonymous lifestyle App cflw`2B2[h1s`lNzF@sPC1FtaCiK0VF@""}'
"
Validating that input is either list or list of lists of singular elemenents,">>> def flat_or_singular(v):
...     flat = lambda l: not any(isinstance(e, list) for e in l)
...     return flat(v) or all(isinstance(e, list) and flat(e) for e in v)
... 
>>> tests = [
...     ['a', 'b', 'c'],
...     [['a' ,'b', 'c'], ['x', 'e', 'w']],
...     [[['a'], ['b'], ['c']], [['x'], ['e'], ['w']]],
...     [['a', 'b', ['e'], 'f'], ['x', 'e', 'w']],
... ]
>>> for test in tests:
...     print('{}: {}'.format(flat_or_singular(test), test))
... 
True: ['a', 'b', 'c']
True: [['a', 'b', 'c'], ['x', 'e', 'w']]
False: [[['a'], ['b'], ['c']], [['x'], ['e'], ['w']]]
False: [['a', 'b', ['e'], 'f'], ['x', 'e', 'w']]
"
"""painting"" one array onto another using python / numpy","from scipy import * # rand
from pylab import * # figure, imshow
from scipy.ndimage import gaussian_filter

# random ""image""
I = rand(100, 100)
figure(1)
imshow(I)

# gaussian filter
J = gaussian_filter(I, sigma=10)
figure(2)
imshow(J)
"
Restarting IIS6 - Python,"import wmi

c = wmi.WMI()

for service in c.Win32_Service(Name=""W3SVC""):
    result, = service.StopService()
"
"String Manipulation in python, different length","# Input data
master = 'animals_goat=1; country=3 4 5; Foo=1 2 3;'
lines = """"""country=0 1 2; Foo=0 0 0;
country=0 0 0; Foo=1 1 1;""""""

# Extract info from master string
items = [s.strip().split('=') for s in master.split(';') if s]
keys = [item[0] for item in items]

# Process input lines, one at a time
for line in lines.splitlines():
    d = dict(items)
    new = dict(s.strip().split('=') for s in line.split(';') if s)
    d.update(new)
    for k in keys:
        print '%s=%s;' % (k, d[k]),
    print """"
"
More pythonic way for dealing with lists and dicts,"for keys, values in my_dict.iteritems():
    fmt_str = ', '.join(chain(keys, *values))
    print fmt_str
"
gdata.data.PhoneNumber: How do I get the type of Phone Number?,"print(dir(phone_number))
"
Fastest method for comparing ranges of multidimensional lists,"#! /usr/bin/env python
from __future__ import print_function
from itertools import product
from random import randint

width, height = 10, 10
known_env = [[0 for x in range(width)] for y in range(height)]
actual_env = [[0 for x in range(width)] for y in range(height)]

# Populate with obstacles
for i in xrange(10):
    x = randint(0, len(actual_env) - 1)
    y = randint(0, len(actual_env[x]) - 1)
    actual_env[x][y] += 1

# Run A* and get a path
path = [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4),
        (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]  # dummy path


def effective_slices(i_w, j_h):
    """"""Note: Depends on globals width and height.""""""
    w, h = width - 1, height - 1
    i_w_p, j_h_p = max(0, i_w - 1), max(0, j_h - 1)
    i_w_s, j_h_s = min(w, i_w + 1), min(h, j_h + 1)
    return slice(i_w_p, i_w_s), slice(j_h_p, j_h_s)


# Traverse path, checking for ""new"" obstacles
for step in path:
    x, y = step[0], step[1]
    # check area around agent
    dim_w, dim_h = effective_slices(x, y)
    actual_set = set(map(tuple, actual_env[dim_w][dim_h]))
    known_set = set(map(tuple, known_env[dim_w][dim_h]))
    sym_diff = actual_set.symmetric_difference(known_set)
    if sym_diff:  # internal map doesn't match real world, update
        for (i, j) in product(range(dim_w.start, dim_w.stop + 1), 
                              range(dim_h.start, dim_h.stop + 1)):
            if known_env[i][j] != actual_env[i][j]:
                known_env[i][j] = actual_env[i][j]
                # Re-run A*
"
How to handle empty (none) tuple returned from python function,"res = nontest()

if res is None:
    ....
else:
    x, y = res
"
Possible to make labels appear when hovering over a point in matplotlib in stem plot?,"
import matplotlib.pyplot as plt
import scipy.spatial as spatial
import numpy as np
pi = np.pi
cos = np.cos

def fmt(x, y):
    return 'x: {x:0.2f}\ny: {y:0.2f}'.format(x=x, y=y)

class FollowDotCursor(object):
    """"""Display the x,y location of the nearest data point.
    http://stackoverflow.com/a/4674445/190597 (Joe Kington)
    http://stackoverflow.com/a/13306887/190597 (unutbu)
    http://stackoverflow.com/a/15454427/190597 (unutbu)
    """"""
    def __init__(self, ax, x, y, tolerance=5, formatter=fmt, offsets=(-20, 20)):
        try:
            x = np.asarray(x, dtype='float')
        except (TypeError, ValueError):
            x = np.asarray(mdates.date2num(x), dtype='float')
        y = np.asarray(y, dtype='float')
        mask = ~(np.isnan(x) | np.isnan(y))
        x = x[mask]
        y = y[mask]
        self._points = np.column_stack((x, y))
        self.offsets = offsets
        y = y[np.abs(y-y.mean()) <= 3*y.std()]
        self.scale = x.ptp()
        self.scale = y.ptp() / self.scale if self.scale else 1
        self.tree = spatial.cKDTree(self.scaled(self._points))
        self.formatter = formatter
        self.tolerance = tolerance
        self.ax = ax
        self.fig = ax.figure
        self.ax.xaxis.set_label_position('top')
        self.dot = ax.scatter(
            [x.min()], [y.min()], s=130, color='green', alpha=0.7)
        self.annotation = self.setup_annotation()
        plt.connect('motion_notify_event', self)

    def scaled(self, points):
        points = np.asarray(points)
        return points * (self.scale, 1)

    def __call__(self, event):
        ax = self.ax
        # event.inaxes is always the current axis. If you use twinx, ax could be
        # a different axis.
        if event.inaxes == ax:
            x, y = event.xdata, event.ydata
        elif event.inaxes is None:
            return
        else:
            inv = ax.transData.inverted()
            x, y = inv.transform([(event.x, event.y)]).ravel()
        annotation = self.annotation
        x, y = self.snap(x, y)
        annotation.xy = x, y
        annotation.set_text(self.formatter(x, y))
        self.dot.set_offsets((x, y))
        bbox = ax.viewLim
        event.canvas.draw()

    def setup_annotation(self):
        """"""Draw and hide the annotation box.""""""
        annotation = self.ax.annotate(
            '', xy=(0, 0), ha = 'right',
            xytext = self.offsets, textcoords = 'offset points', va = 'bottom',
            bbox = dict(
                boxstyle='round,pad=0.5', fc='yellow', alpha=0.75),
            arrowprops = dict(
                arrowstyle='->', connectionstyle='arc3,rad=0'))
        return annotation

    def snap(self, x, y):
        """"""Return the value in self.tree closest to x, y.""""""
        dist, idx = self.tree.query(self.scaled((x, y)), k=1, p=1)
        try:
            return self._points[idx]
        except IndexError:
            # IndexError: index out of bounds
            return self._points[0]

fig, ax = plt.subplots()
x = np.linspace(0.1, 2*pi, 10)
y = cos(x)
markerline, stemlines, baseline = ax.stem(x, y, '-.')
plt.setp(markerline, 'markerfacecolor', 'b')
plt.setp(baseline, 'color','r', 'linewidth', 2)
cursor = FollowDotCursor(ax, x, y, tolerance=20)
plt.show()
"
Python: load a UI from a separate file,"# in ui.py
import Tkinter as tk
class MyApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        ...

# in main.py
import ui
def main():
    main = ui.MyApp()
    main.mainloop()
"
get key from value python,"HVInfoDict = {
    369136986: {
        'cmstrk': 'cms_trk_dcs_05:CAEN',
        'trackersy': 'CMS_TRACKER_SY1527_8',
        'branch': 'branchController05',
        'crate': 'easyCrate1',
        'board': 'easyBoard03',
        'channel': 'channel002'
    }
}

input3 = raw_input(""Write the property(s) which modules connected you want to know, separated by a single space \n > "")
input_list3 = input3.split(' ')
for k in input_list3:
    print ""%r"" % k
    txt.write(""\t\n The modules with property %r are:\n"" % k)
    for l,m in HVInfoDict.items():
        if k in m.values():
            print l
        else:
            print(""Does not exist!"")
"
python: using multiprocessing with a dataframe for geocoding,"import geocoder
import multiprocessing as mp
import pandas as pd

def reverse_gecode(coordinates):
    return geocoder.google(coordinates, method = 'reverse').postal

if __name__ == '__main__':            
    gps = pd.DataFrame({'lat': [27.950575, 40.6936488],
                        'lon': [-82.4571776, -89.5889864]})  # dataframe mehtod
    coords = gps[['lat','lon']].astype(str).apply(lambda x: (x[0],x[1]), axis=1).tolist()
    # multiprocessings                    
    pool = mp.Pool(processes = (mp.cpu_count() - 1))
    gps['zip_code'] = pool.map(reverse_gecode, coords)
    print(gps)
    pool.close()
    pool.join()
"
"Python: How to ""perfectly"" override a dict","import collections


class TransformedDict(collections.MutableMapping):
    """"""A dictionary that applies an arbitrary key-altering
       function before accessing the keys""""""

    def __init__(self, *args, **kwargs):
        self.store = dict()
        self.update(dict(*args, **kwargs))  # use the free update to set keys

    def __getitem__(self, key):
        return self.store[self.__keytransform__(key)]

    def __setitem__(self, key, value):
        self.store[self.__keytransform__(key)] = value

    def __delitem__(self, key):
        del self.store[self.__keytransform__(key)]

    def __iter__(self):
        return iter(self.store)

    def __len__(self):
        return len(self.store)

    def __keytransform__(self, key):
        return key
"
Python - Search a list item that contains a string (match case),"import re
[s for s in mylist if re.search(r'\b{}\b'.format(pattern),s)]
"
Trying to iterate over specific column in python array,"seq1 = 'asdfasdfasdf'
seq2 = 'asdfasdfasdf'

mymatrix = [[0 for y in range(len(seq1)+1)]for x in range(len(seq2)+1)]
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^ reuse this


d = {'score' : 0, 'pointer' : 'none'}

for y in range(len(seq1)+1):
    mymatrix[0][y] = d.copy()

# The first one is already covered, just leave it off using slice
for x in range(len(seq2)+1)[1:]:
    mymatrix[x][0] = d.copy()

for line in mymatrix:
    print(line)
"
Calculating number of occurrences and entering and appending them to csv,"import csv
import datetime
import copy
from collections import defaultdict

with open(r""C:\Temp\test.csv"") as i, open(r""C:\Temp\resuls.csv"", ""wb"") as o:
    rdr, wrt = csv.reader(i), csv.writer(o)

    curr, currdate = defaultdict(lambda:[0, 0]), None
    for line in rdr:
        date, name = datetime.datetime.strptime(line[0], '%d/%m/%Y'), line[7]

        if date != currdate or not currdate:
            prev = copy.deepcopy(curr)
            currdate = date

        wrt.writerow(line + prev[name])

        curr[name][1] += 1
        if line[6] == ""1"": curr[name][0] += 1
"
determine mean zero crossing,"xings = [123,125,127,1045,1049,1050,2147,2147,2151,2155]

THRESHOLD = 100

xlast = -1000000
tot = 0
n = 0
results = []
i = 0
while i < len(xings):
    x = xings[i]
    if x-xlast > THRESHOLD:
        # emit a transition, averaged for the
        if n > 0:
            results.append(tot/n)
        tot = 0
        n = 0
    tot += x
    n += 1
    xlast = x
    i += 1
if n > 0:
    results.append(tot/n)

print results
"
Selenium webdriver with python to scrape dynamic page cannot find element,"In [77]: dr = webdriver.PhantomJS()

In [78]: dr.get(""http://propertymap.sfplanning.org/"")

In [79]:  dr.switch_to.frame(0)  

In [80]: print(dr.find_element_by_id(""addressInput""))
<selenium.webdriver.remote.webelement.WebElement object at 0x7f4d21c80190>
"
How can i execute the following code using pycurl,"import pycurl

with open('test.json') as json:
    data = json.read()

    c = pycurl.Curl()
    c.setopt(pycurl.URL, 'https://api.smartsheet.com/1.1/sheets')
    c.setopt(pycurl.POST, 1)
    c.setopt(pycurl.POSTFIELDS, data)
    c.setopt(pycurl.HTTPHEADER, ['Authorization: Bearer 26lhbngfsybdayabz6afrc6dcd',
                                 'Content-Type: application/json'])
    c.perform()
"
Proxy pattern idiom,"# let's add a classmethod to User or its base class:
class User(...):
    ...
    @classmethod
    def find_or_add(cls, session, **kwargs):
        if len(kwargs) > 0:
            obj = session.query(cls).filter_by(**kwargs).first()
            if not obj:
                obj = cls(**kwargs)
                session.add(obj)
        else:
            # Otherwise, let's create an empty one and add it to the session...
            obj = cls()
            session.add(obj)
        return obj
    ...
user = User.find_or_add(session, email=""someone@tld.com"")
"
How to check if string is a pangram?,"is_pangram = lambda s: not set('abcdefghijklmnopqrstuvwxyz') - set(s.lower())

>>> is_pangram('abc')
False
>>> is_pangram('the quick brown fox jumps over the lazy dog')
True
>>> is_pangram('Does the quick brown fox jump over the lazy dog?')
True
>>> is_pangram('Do big jackdaws love my sphinx of quartz?')
True
"
Python sum of ASCII values of all characters in a string,">>> import numpy as np
>>> np.frombuffer(""abcdefgh"", ""uint8"").sum()
804
"
How can I convert a unicode string into string literals in Python 2.7?,print(s.encode('unicode_escape'))
How to do operations with two vectors of different format in python,"import numpy as np
from scipy.sparse import csr_matrix

x = np.arange(5)+1

y = [1, 0, 0, 1, 2]
y = csr_matrix(y)

x2 = 1.0 / np.matrix(x)

z = y.multiply(x2)
"
Downloading files using Python,"urllib.urlretrieve(url, filename)
"
Concatenate generators in python 3 with +-operator,"x = [1]
y = [2]
z = x + y
x.append(1)
assert z == [1, 2] # z is not effected by the mutation of x
"
How do I update dataframe column values with Pandas?,"groups = df.groupby('Date').indices
df = pd.DataFrame(data= groups.values(),index=groups.keys()).reset_index()
"
How can I convert an image's pixel color information into numbers and store it in a CSV?,"pixels = [i for row in pixels for i in row]
"
Numpy - automatic implicit conversion of np.arrays into lists,">>> ourList =  [[1,2],[1,2],[1,4]]
>>> c3 = np.empty(len(ourList), dtype=np.ndarray)
>>> for i in xrange(len(ourList)):
>>>     c3[i] = np.array(outList[i])
>>> c3
array([array([1, 2]), array([1, 2]), array([1, 4])], dtype=object)
>>> c3[1] = np.array([5])
>>> c3
array([array([1, 2]), array([5]), array([1, 4])], dtype=object)
"
Django - cant pass parameter in HttpResponseRedirect,"def makeurl(request):
    . . .
    request.session['shortened_url'] = shortened_url
    return HttpResponseRedirect(reverse('create'))

def create(request):
    shortened_url = request.session.get('shortened_url')
    . . .

    # delete the session value
    try:
        del session['shortened_url']
    except KeyError:
        pass

    # do whatever
"
Python - Return all substrings in the first group of nested parentheses,"def parens(s):
    i=s[s.find('('):s.find(')')].count('(')   #counts number of '(' until the first ')'
    groups = s[s.find('('):].split(')')       #splits the string at every ')'
    print ')'.join(groups[:i]) +')'           #joins the list with ')' using the number of counted '('
"
List of unicode strings,"from __future__ import unicode_literals
"
How to open Post Urls in multithreads in python,"  rescodeinvalid =[]
  success = []

  def post_and_handle(url,post_data)
       data = urllib.urlencode(post_data)
       req = urllib2.Request(url, data)
       response = urllib2.urlopen(req)
       rescode=response.getcode()

       if responsecode == 400:
              rescodeinvalid.append(url) # Append is thread safe
       elif responsecode == 200:
              success.append(url)  # Append is thread safe

  workers = []
  for i in range(0,len(HostArray)):
         t = threading.Thread(target=post_and_handle,args=(HostArray[i],post_data))
         t.start()
         workers.append(t)

  # Wait for all of the requests to complete
  for t in workers:
       t.join()
"
How do you split a csv file into evenly sized chunks in Python?,"#!/usr/bin/env python

import csv
reader = csv.reader(open('4956984.csv', 'rb'))

chunk, chunksize = [], 100

def process_chunk(chuck):
    print len(chuck)
    # do something useful ...

for i, line in enumerate(reader):
    if (i % chunksize == 0 and i > 0):
        process_chunk(chunk)
        del chunk[:]
    chunk.append(line)

# process the remainder
process_chunk(chunk)
"
python apply decorator to every method in a class without inspect,"import types

class DecoMeta(type):
   def __new__(cls, name, bases, attrs):

      for attr_name, attr_value in attrs.iteritems():
         if isinstance(attr_value, types.FunctionType):
            attrs[attr_name] = cls.deco(attr_value)

      return super(DecoMeta, cls).__new__(cls, name, bases, attrs)

   @classmethod
   def deco(cls, func):
      def wrapper(*args, **kwargs):
         print ""before"",func.func_name
         func(*args, **kwargs)
         print ""after"",func.func_name
      return wrapper

class MyKlass(object):
   __metaclass__ = DecoMeta

   def func1(self): 
      pass

MyKlass().func1()
"
"Django form, change default max_length","class ExampleForm(forms.ModelForm):
    class Meta:
        model = Example

    def __init__(self, *args, **kwargs):
        super(ExampleForm, self).__init__(*args, **kwargs)  
        if self.instance:
            self.fields['description'].max_length = self.instance.description_length
"
splitting string in Python (2.7),">>> import re
>>> numbers = re.compile(r'\(\s*passengers:\s*(\d{1,3}|\?)\s+ crew:\s*(\d{1,3}|\?)\s*\)')
>>> numbers.search('26   (passengers:22  crew:4)').groups()
('22', '4')
>>> numbers.search('32   (passengers:?  crew: ?)').groups()
('?', '?')
"
repetitive arithmetic in Python,"> python -m timeit 'a = 50; b = a*12-1; c = a*b; c; c*100+10; c/100+20;'
1000000 loops, best of 3: 0.27 usec per loop
> python -m timeit '50*(50*12-1); 50*(50*12-1) * 100 + 10; 50*(50*12-1) / 100 + 20'
1000000 loops, best of 3: 0.218 usec per loop
"
Extracting a column from every Frame in a Panel,"df.apply(np.mean, axis='major').loc['B']

Item1    0.025954
Item2    0.446931
Name: B, dtype: float64
"
iterating over a single list in parallel in python,"iter0, iter1, iter2 = itertools.tee(input_iter, 3)
ilen, sum_x, sum_x_sq = count(iter0),sum(iter1),sum(map(lambda x:x*x, iter2))
"
Python + selenium: extract variable quantity of paragraphs between titles," h_counters = []
 count = -1
 for child in page.div.findChildren():
     if ""<h3>"" in str(child):
         h_counters.append(count)
         count = 0
     else:
         count += 1
 h_counters.append(count)
 h_counters = h_counters[1:]
 print (h_counters)
 >> [1, 3, 2]
"
Calculate mean on values in python collections.Counter,"total_squares = sum(number*number * count for number, count in counter)
mean_of_squares = total_squares / count
variance = mean_of_squares - mean * mean
std_dev = math.sqrt(variance)
"
Variable in subprocess,"from subprocess import Popen,PIPE
p1 = Popen([""cat"",""text.txt""], stdout=PIPE)
p2 = Popen([""grep"", variable], stdin=p1.stdout, stdout=PIPE)
p1.stdout.close()  
out,err = p2.communicate()
p1.wait()
print(out)
"
"Use Numpy Multidimensional Array Slicing Without Using the [slice,slice] Syntax?","x = arr[4:10, 9:15, ::-1]
x[0] = 100
"
XPath select all but not self::strong and self::strong/following-sibling::text(),"//div/node()[not(self::strong and contains(text(), ""Title"") or preceding-sibling::strong[1][contains(text(), ""Title"")])]
"
Python: Is it possible to make a class iterable using the standard syntax?,"class MetaFoo(type):
    def __iter__(self):
        for attr in dir(Foo):
            if not attr.startswith(""__""):
                yield attr

class Foo(metaclass=MetaFoo):
    bar = ""bar""
    baz = 1
"
"Regular expression that takes <...> as one item in ""foo bar <hello world> and so on"" (Goal: Simple music/lilypond parsing)",">>> import re
>>> t = ""foo <bar e word> f ga <foo b>""
>>> t2 = re.sub(r""(^|\s+)(?![^<>]*?>)"", "" #"", t).lstrip()
>>> t2
'#foo #<bar e word> #f #ga #<foo b>'
"
Python datetime formatted string to datetime object,">>> import ast
>>> ast.literal_eval('(2011, 12, 11, 15, 45, 20)')
(2011, 12, 11, 15, 45, 20)
"
"merge multiple regex into one which could ""catch them all""",">>> pack = ""oracle-instantclient11.2-basic-11.2.0.3.0-1.x86_64""
>>> reg = re.compile(r""^(?P<package>.*?)-(?P<version>\d.*?)\.(?:noarch|x86_64)$"")
>>> m = reg.match(pack)
>>> m.groupdict()
{'package': 'oracle-instantclient11.2-basic', 'version': '11.2.0.3.0-1'}
"
python - create json file from input matrix by grouping rows,"from itertools import groupby
import json
matrix = [
    ['JAN',  '1', 'abc'],
    ['FEB',  '7', 'xyz'],
    ['FEB',  '4', 'abc'],
    ['MAR',  '3', 'xyz'],
    ['DEC', '12', 'xyz']
]
months = [x[0] for x in matrix]
items = [[x[2], int(x[1])] for x in matrix]
items = sorted(items, key=lambda x: x[0])
items = groupby(items, lambda x: x[0])
items = [{""group"": k, ""data"": [x[1] for x in g]} for k, g in items]
result = {
    ""month"": months,
    ""items"": items
}
print (json.dumps(result, sort_keys=True, indent=4, separators=(',', ': ')))
"
Python: is using decorator to change method arguments a bad thing?,"def update_status(some_item_haver, new_status):
    for item in some_item_haver.items:
        item.update_status(new_status)
"
lxml - how to remove element but not it's content?,"import copy
import lxml.etree

def pprint(e): print(lxml.etree.tostring(e, pretty_print=True))

xml = '''
<body>
    <div id=""first"">
      <div id=""second"">
        <a>...</a>
        <ul>...</ul>
      </div>
    </div>
</body>
'''

root_element = lxml.etree.fromstring(xml)
div_parents = root_element.xpath('//div[div]')

for outer_div in div_parents:
    if len(outer_div.getchildren()) == 1:
        inner_div = outer_div[0]
        # Copy the children of innder_div to outer_div
        for e in inner_div: outer_div.append( copy.deepcopy(e) )
        # Remove inner_div from outer_div
        outer_div.remove(inner_div)

pprint(root_element)
"
python key value list to panda series,"dates, vals = zip(*data)
s = pd.Series(vals, index=dates)
"
Scraping data from multiple links on a webpage,"In [4]: from urllib2 import urlopen

In [5]: citylinkpage = urlopen(""http://www.city-data.com/city/Texas.html"")

In [7]: from bs4 import BeautifulSoup as BS

In [8]: soup = BS(citylinkpage)

In [9]: allImportantLinks = soup.select('table.cityTAB td.ph a')

In [10]: print allImportantLinks[:10]
[<a href='javascript:l(""Abbott"");'>Abbott</a>, <a href='javascript:l(""Abernathy"");'>Abernathy</a>, <a href=""Abilene-Texas.html"">Abilene, TX</a>, <a href=""Addison-Texas.html"">Addison, TX</a>, <a href=""Alamo-Heights-Texas.html"">Alamo Heights</a>, <a href='javascript:l(""Albany"");'>Albany, TX</a>, <a href=""Alice-Texas.html"">Alice</a>, <a href=""Allen-Texas.html"">Allen, TX</a>, <a href='javascript:l(""Alma"");'>Alma, TX</a>, <a href=""Alpine-Texas.html"">Alpine, TX</a>]

In [14]: allCityUrls = [""http://www.city-data.com/city/""+a.get('href') for a in allImportantLinks if not a.get('href').startswith('javascript:')]

In [15]: allCityUrls
Out[15]: 
['http://www.city-data.com/city/Abilene-Texas.html',
 'http://www.city-data.com/city/Addison-Texas.html',
 'http://www.city-data.com/city/Alamo-Heights-Texas.html',
 'http://www.city-data.com/city/Alice-Texas.html',
 'http://www.city-data.com/city/Allen-Texas.html',
 'http://www.city-data.com/city/Alpine-Texas.html',
 'http://www.city-data.com/city/Amarillo-Texas.html',
...
"
How to write a unsigned char* array containing hex values to file in python,"from ctypes import *

rrpLib = cdll.rrpLib # or windll if it use STDCALL

getPluginManualAsPDF = rrpLib.getPluginManualAsPDF
getPluginManualAsPDF.restype = POINTER(c_ubyte)
getPluginManualAsPDF.argtypes = [c_void_p]

getPluginManualNrOfBytes = rrpLib.getPluginManualNrOfBytes
getPluginManualNrOfBytes.restype = c_long
getPluginManualNrOfBytes.argtypes = [c_void_p]
"
Python: Remove elements from the list which are prefix of other,"[x for x, y in zip(ls[:-1], ls[1:]) if x != y[:len(x)]] + [ls[-1]]
"
how to Change dictionary values in python file,"from collections import OrderedDict
import json

with open('data.json', 'r') as f:
    data = json.load(f, object_pairs_hook=OrderedDict)
"
Python: How to remove all empty fields in a nested dict,">>> sample = {
...     ""fruit"": [
...         {""apple"": 1},
...         {""banana"": None}
...     ],
...     ""veg"": [],
...     ""result"": {
...         ""apple"": 1,
...         ""banana"": None
...     }
... }
>>> def clean_empty(d):
...     if not isinstance(d, (dict, list)):
...         return d
...     if isinstance(d, list):
...         return [v for v in (clean_empty(v) for v in d) if v]
...     return {k: v for k, v in ((k, clean_empty(v)) for k, v in d.items()) if v}
... 
>>> clean_empty(sample)
{'fruit': [{'apple': 1}], 'result': {'apple': 1}}
"
Synchronization issue in IPython parallel computing,"from IPython import parallel

rc = parallel.Client()
view = rc[:]

@view.parallel(block=True)
def pfun(a):
    """"""each engine will get a chunk of a, not the whole thing""""""
    c = fun(a)
    return c

# a will be scattered and c will be gathered
c = pfun(a)
"
Regular expression using python is not working,"with open(""pro.txt"") as file:
    count = sum(1 for line in file if regex.search(line))
"
Create a function that produces a list of all cards that have a rank higher than base_card?,"class card:
    'Fields: suit, value'
    def __init__(self, suit, value):
        self.suit = suit
        self.value = value
    def __repr__(self):
        return '{suit} {value}'.format(suit=self.suit,value=self.value)
    def __eq__(self, other):
        return (isinstance(other, self.__class__) and 
                self.suit == other.suit and self.value == other.value)

all_cards = [card(s, v) 
             for s in ('clubs', 'diamonds', 'hearts', 'spades')
                 for v in range(1, 11)]

def higher_in_rank(base_card):
    return all_cards[all_cards.index(base_card)+1:]
"
"What is pythonic way to do dt[,y:=myfun(x),by=list(a,b,c)] in R?","import pandas as pd
df = pd.DataFrame({'a': ['x', 'y', 'x', 'y'],
                   'x': [1, 2, 3, 4]})

df.groupby('a').apply(myfun)
"
Split a list in sublists by a logic criterion,"numlist, alist, blist = [], [], []
for item in mixlist:
    if item == ""a"":
        alist.append(item)
    elif item == ""b"":
        blist.append(item)
    else:
        numlist.append(item)
"
function as constructor parameter in python,"def d(fun, num):
    return fun(num)

def e(x):
    return x**2

d(lambda x: x**2, 7) # Returns 49
d(e) # Also returns 49
"
HTML in between h3/h2 tags with Xpath/BeautifulSoup,"In [1]: import scrapy

In [2]: selector = scrapy.Selector(text=""""""
<h3><span class=""my_class"">First title</span></h3>
<ul><li>Text for the first title... li #1</li></ul>
<ul><li>Text for the first title... li #2</li></ul>

<h3><span class=""my_class"">Second title</span></h3>
<ul><li>Text for the second title... li #3</li></ul>
<ul><li>Text for the second title... li #4</li></ul>
"""""")

In [3]: for cnt, title in enumerate(selector.css('h3'), start=1):
   ...:     print title.xpath('following-sibling::ul[count(preceding-sibling::h3)=%d]/li/text()' % cnt).extract()
   ...: 
[u'Text for the first title... li #1', u'Text for the first title... li #2']
[u'Text for the second title... li #3', u'Text for the second title... li #4']
"
What is the best way to remove a dictionary item by value in python?,"{key: val for key, val in list(myDict.items()) if val != 42}"
How to query an HDF store using Pandas/Python,"In [1]: df = DataFrame({'A' : ['foo','foo','bar','bar','baz'],
                        'B' : [1,2,1,2,1], 
                        'C' : np.random.randn(5) })

In [2]: df
Out[2]: 
     A  B         C
0  foo  1 -0.909708
1  foo  2  1.321838
2  bar  1  0.368994
3  bar  2 -0.058657
4  baz  1 -1.159151

[5 rows x 3 columns]
"
IPython - have print default to print head & tail on long variables,"numpy.set_printoptions(threshold=2)
numpy.array(range(10)).__str__()
'[0 1 2 ..., 7 8 9]'
print numpy.array(range(10))
[0 1 2 ..., 7 8 9]
"
Python: reorganize data and add it to dictionary,"from collections import defaultdict
d = defaultdict(list)
import  csv
with open(infile) as f:
    # skip header
    next(f)
    # use reader to get all rows
    r = csv.reader(f)
    # unpack from each row
    for _id, lt, ln in r:
        # use _id as key and append lat and lon
        d[_id].append(""{},{}"".format(lt,ln))
print(d)
"
Get the commands distutils passes to the compiler,"from distutils.core import setup,Extension
from distutils.cygwinccompiler import Mingw32CCompiler
from pprint import pprint

module1 = Extension('demo', sources = ['demo.c'])

m32 = Mingw32CCompiler()
pprint (vars(m32))


setup (name = 'PackageName',
   version = '1.0',
   description = 'This is a demo package',
   ext_modules = [module1])
"
BeautifulSoup not finding elements,"from selenium import webdriver
from selenium.webdriver import DesiredCapabilities
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup as bs

url = 'http://www.booking.com/searchresults.en-gb.html?label=gen173nr-17CAEoggJCAlhYSDNiBW5vcmVmaFCIAQGYAS64AQTIAQTYAQHoAQH4AQs;sid=1a43e0952558ac0ad0061d5b6523a7bc;dcid=1;checkin_monthday=4;checkin_year_month=2016-2;checkout_monthday=11;checkout_year_month=2016-2;city=-2601889;class_interval=1;csflt=%7B%7D;group_adults=7;group_children=0;highlighted_hotels=1192837;hp_sbox=1;label_click=undef;no_rooms=1;review_score_group=empty;room1=A%2CA%2CA%2CA%2CA%2CA%2CA;sb_price_type=total;score_min=0;si=ai%2Cco%2Cci%2Cre%2Cdi;ss=London;ssafas=1;ssb=empty;ssne=London;ssne_untouched=London&;order=price_for_two'

# setting a custom User-Agent
user_agent = (
    ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) "" +
    ""AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36""
)

dcap = dict(DesiredCapabilities.PHANTOMJS)
dcap[""phantomjs.page.settings.userAgent""] = user_agent

driver = webdriver.PhantomJS(desired_capabilities=dcap)
driver.get(url)

# wait for the total prices to become present
WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.CSS_SELECTOR, "".totalPrice"")))

content = driver.page_source
driver.close()

soup = bs(content, 'lxml')
for e in soup.select('.totalPrice'):
    print(e.text.strip())
"
"Neat way of popping key, value PAIR from dictionary?","from collections import Mapping

class MyDict(Mapping):
    def __init__(self, *args, **kwargs):
        self.update(dict(*args, **kwargs))

    def __setitem__(self, key, item): 
        self.__dict__[key] = item

    def __getitem__(self, key): 
        return self.__dict__[key]

    def __delitem__(self, key): 
        del self.__dict__[key]

    def pop(self, k, d=None):
        return k,self.__dict__.pop(k, d)

    def update(self, *args, **kwargs):
        return self.__dict__.update(*args, **kwargs)

    def __iter__(self):
        return iter(self.__dict__)

    def __len__(self):
        return len(self.__dict__)

    def __repr__(self): 
        return repr(self.__dict__)
"
Find a number in a another number,"def find_length(num):
    # If number is 0, return the length as 1.
    if num == 0:
        return 1
    length = 0

    # Loop over the number by dividing it by 10
    # and incrementing the length counter.

    while num != 0:
        length += 1
        num /= 10
    return length

def find_inside(num1, num2):
    # Trivial case, when the numbers are same.
    if num1 == num2:
        return (True, 1)

    len_n2 = find_length(num2)
    place = find_length(num1)

    # Iterate over the numbers, extracting the last
    # n digits everytime, where n is length of num2
    # Keep dividing the original number by 10 and
    # decrementing place everytime.

    while num1 != 0:
        if num2 == (num1 % (10 ** len_n2)):
            return (True, place - len_n2 + 1)
        num1 /= 10
        place -= 1
    return (False, -1)
"
Extracting text outside of a <div> tag BeautifulSoup,"import re

def find_by_label(soup, label):
    return soup.find(""div"", text=re.compile(label)).next_sibling
"
Python - Pandas — How to check which column a DataFrame is grouped by?,"In [50]: grp.grouper.
grp.grouper.agg_series       grp.grouper.group_info       grp.grouper.names
grp.grouper.aggregate        grp.grouper.group_keys       grp.grouper.ngroups
grp.grouper.apply            grp.grouper.groupings        grp.grouper.nkeys
grp.grouper.axis             grp.grouper.groups           grp.grouper.result_index
grp.grouper.compressed       grp.grouper.indices          grp.grouper.shape
grp.grouper.get_group_levels grp.grouper.labels           grp.grouper.size
grp.grouper.get_iterator     grp.grouper.levels           grp.grouper.sort
"
Efficient unordered substing matching,"import re
s = ""I have a string submarine I want to be able to detect marines as a match""
kw = ""submarine""
r  = re.compile(r""\b[{0}]+\b"".format(kw))
print(r.findall(s))
"
Take last value of the prior grouping in a rolling sum function? Pandas Python,"import pandas as pd

text = """"""DateL1   DateL2 Value   Sum 
12/31/2011  1/25/2012   1321    
3/31/2012   4/25/2012   1457    
6/30/2012   7/25/2012   2056    
9/30/2012   10/26/2012  3461    8295
12/31/2012  1/24/2013   2317    9291
3/31/2013   4/24/2013   2008    9842
6/30/2013   7/24/2013   1885    9671
6/30/2013   7/27/2013   1600    9386
9/30/2013   10/29/2013  1955    7880
9/30/2013   11/1/2013   1400    7325
12/31/2013  1/28/2014   1985    6993
12/31/2013  1/30/2014   1985    6993
3/31/2014   4/24/2014   1382    6367
3/31/2014   4/25/2014   1200    6185
6/30/2014   7/23/2014   2378    6963
9/30/2014   10/21/2014  3826    9389
3/31/2015   4/28/2015   2369    9773
3/31/2015   4/30/2015   2369    9773""""""

from io import BytesIO

df = pd.read_csv(BytesIO(text), delim_whitespace=True, parse_dates=[0], index_col=0)
s1 = pd.rolling_sum(df.groupby(df.index, sort=False).Value.last(), 4)

def f(s):
  return s - s.iat[-1]

s2 = df.groupby(df.index, sort=False).Value.transform(f).fillna(0)

print s1 + s2
"
Substitute values from one pandas data frame to another based on condition,"mask = df_1.astype(str) == '-'
print (mask)
       A      B      C
0  False  False  False
1   True  False  False
2  False  False   True

print (df_1.mask(mask, df_2))
   A  B  C
0  x  1  2
1  y  6  1
2  z  9  8

print (df_1.where(~mask, df_2))
   A  B  C
0  x  1  2
1  y  6  1
2  z  9  8
"
learnpython.org modules exercise,"import re

print sorted([element for element in dir(re) if element.startswith('find')])
"
timing two algorithms (python) using timeit or time,"print(timeit.timeit(""normal(sound)""))
print(timeit.timeit(""onlyMax(sound)""))
"
Python3: Calling functions saved as values (strings) in a dictionary,"globals()[fnc](conn_name)
"
Python - slice array until certain condition is met,"a = np.zeros((10), dtype=str)
a[2] = 'A'
a[4] = 'X'
a[8] = 'B'
"
How would one limit characters per line when printing a raw_input to a text file?,"def split_input(user_string, chunk_size):
    output = []
    words = user_string.split("" "")
    total_length = 0

    while (total_length < len(user_string) and len(words) > 0):
        line = []
        next_word = words[0]
        line_len = len(next_word) + 1

        while  (line_len < chunk_size) and len(words) > 0:
            words.pop(0)
            line.append(next_word)

            if (len(words) > 0):
                next_word = words[0]
                line_len += len(next_word) + 1

        line = "" "".join(line)
        output.append(line)
        total_length += len(line) 

    return output
"
python get non repeating items - fastest method,"from collections import Counter
...
[item for item, count in Counter(l).items() if count == 1]
"
Determining the most common word from a user's input. [Python],">>> from collections import Counter
>>> a = Counter()
>>> a['word'] += 1
>>> a['word'] += 1
>>> a['test'] += 1
>>> a.most_common()
[('word', 2), ('test', 1)]
"
Memoizing SQL queries,"def run_my_query(my_query, cache={})
    if my_query in cache:
        return cache[my_query]
    ...
    cache[my_query] = df
    return df
"
clone element with beautifulsoup,"from bs4 import Tag, NavigableString


def tag_clone(self):
    copy = type(self)(None, self.builder, self.name, self.namespace, 
                      self.nsprefix)
    # work around bug where there is no builder set
    # https://bugs.launchpad.net/beautifulsoup/+bug/1307471
    copy.attrs = dict(self.attrs)
    for attr in ('can_be_empty_element', 'hidden'):
        setattr(copy, attr, getattr(self, attr))
    for child in self.contents:
        copy.append(child.clone())
    return copy


Tag.clone = tag_clone
NavigableString.clone = lambda self: type(self)(self)
"
python: extracting values from csv file by row name,"import csv

with open(inputfilename, 'rb') as infh:
    reader = csv.reader(infh)
    for row in reader:
        if row[0] == 'John':
            print row[1]
"
why using multiple threading to get the sum is correct?,"import threading
x = 0
def foo():
    global x
    for i in xrange(1000000):
        x += 1
threads = [threading.Thread(target=foo), threading.Thread(target=foo)]
for t in threads:
    t.daemon = True
    t.start()
for t in threads:
    t.join()
print(x)
"
How to merge one ordered dict and one dict together?,"merged_dict = {reg_dict[k]: v for k, v in ord_dict.items()}
"
Search and replace characters in string from the list,"import re

in_dict = {
    '1': 'active_rate',
    '2': 'purchase_per_active'
}

formula = {
    'total_purchase': 'B1*B2'
}

def lookup(number):
    return in_dict[number.group(1)]

for key, value in formula.items():
    formula[key] = re.sub(""[a-zA-Z](\d+)"", lookup, value)

print formula
"
Python equivalent of C++ begin() and end() for custom classes,"class MyIter:
    def __init__(self, data):
        self.data = data
        self.max = len(data)
        self.index_pointer = 0

    def __iter__(self):
        return self  #I have a __next__() method, so let's return me!

    def __next__(self):
        index = self.index_pointer

        if index < self.max:
            current_val = self.data[index]
            self.index_pointer += 1
            return current_val
        else:
            raise StopIteration

for i in MyIter([1, 2, 3]):
    print(i)

--output:--
1
2
3
"
Access class variables with __repr__(),"class Foo:
    def __init__(self):
        self.elements = [3, 4, 5]

    def __getitem__(self, index):
        return self.elements[index]
"
how to get argparse to read arguments from a file with an option rather than prefix,"def __call__ (self, parser, namespace, values, option_string=None):
    with values as f:
        contents = f.read()

    data = parser.parse_args(contents.split())
    for k, v in vars(data).items():
        if v and k != option_string.lstrip('-'):
            setattr(namespace, k, v)
"
output the command line called by subprocess?,"In [14]: import subprocess

In [15]: import shlex

In [16]: cmd = 'foo -a -b --bar baz'

In [17]: shlex.split(cmd)
Out[17]: ['foo', '-a', '-b', '--bar', 'baz']

In [18]: subprocess.list2cmdline(['foo', '-a', '-b', '--bar', 'baz'])
Out[19]: 'foo -a -b --bar baz'
"
Sub matrix of a list of lists (without numpy),"class LoL(list):
    def __init__(self, *args):
        list.__init__(self, *args)
    def __getitem__(self, item):
        try:
            return list.__getitem__(self, item)
        except TypeError:
            rows, cols = item
            return [row[cols] for row in self[rows]]

lol = LoL([list(range(10)) for i in range(10)])
print(lol[1:4, 2:5])
"
With reading hebrew in urllib2 python,"response = opener.open(url).read()
"
How to sort list depending on values in sublists?,">>> from operator import itemgetter
>>> sorted(sorted(example), key=itemgetter(1), reverse=True)
[['a', 2], ['b', 2], ['b', 1]]
"
How to obtain the results from a pool of threads in python?,"from multiprocessing.pool import ThreadPool

def foo(word, number):
    print word*number
    return number

def starfoo(args):
    """""" 

    We need this because map only supports calling functions with one arg. 
    We need to pass two args, so we use this little wrapper function to
    expand a zipped list of all our arguments.

    """"""    
    return foo(*args)

words = ['hello', 'world', 'test', 'word', 'another test']
numbers = [1,2,3,4,5]
pool = ThreadPool(5)
# We need to zip together the two lists because map only supports calling functions
# with one argument. In Python 3.3+, you can use starmap instead.
results = pool.map(starfoo, zip(words, numbers))
print results

pool.close()
pool.join()
"
Python timer on randint,"import pygame
from random import randint

pygame.init()

#create a new event id called event_500ms
event_500ms = pygame.USEREVENT + 1

#set timer event to appear on the event queue every 500 number of milliseconds
pygame.time.set_timer(event_500ms, 500)

screen = pygame.display.set_mode((800,800))

while True:
    #get events from the event queue
    for ev in pygame.event.get():
        if ev.type == pygame.KEYDOWN and ev.key == pygame.K_ESCAPE:
                pygame.quit()
                exit()

        #check for event_500ms event
        if ev.type == event_500ms:

            r = randint(0, 255)
            g = randint(0, 255)
            b = randint(0, 255)

            screen.fill((r, g, b))

            pygame.display.flip()
"
"Make a new sublist of preceding characters every time there's a zero in a list, excluding the zero",">>> from itertools import groupby
>>> L = [3,5,0,6,8,9,7,0,1,0]
>>> [list(g) for k, g in groupby(L, key=bool) if k]
[[3, 5], [6, 8, 9, 7], [1]]
"
SQLAlchemy return model from outerjoin,"q = (
    session
    .query(a)
    .filter(a.insert_date == task_date)
    .filter(
        exists(
        # or: ~exists(
            select([b.pk])
            .where(a.pk == b.pk)
            .where(b.insert_date < task_date)
        )
    )
)
"
What is wrong with this alternative bitwise operator function?,"def bitwise_or(num1, num2):
    new_num1 =list(num1[2:])
    new_num2 = list(num2[2:])
    if len(num1) > len(num2):
        new_num2[:0] = '0' * (len(num1) - len(num2))
    elif len(num1) < len(num2):
        new_num1[:0] = '0' * (len(num2) - len(num1))

    new_num = []
    for c1, c2 in zip(new_num1, new_num2):
        if c1 == ""1"" or c2 == ""1"":
            new_num.append(""1"")
        else:
            new_num.append(c1)
    return '0b' + ''.join(new_num)
"
Regex catastrophic backtracking,"/\*.*?\*/
or
/[*].*?[*]/
"
How to setup a (new) monetdb db from scratch in python?,"import subprocess

farm_path=""/home/me/...""
database_name=""test""
subprocess.call(""monetdbd create ""+farm_path,shell=True,executable=""/bin/bash"")
subprocess.call(""monetdbd start ""+farm_path,shell=True,executable=""/bin/bash"")
subprocess.call(""monetdb create ""+database_name,shell=True,executable=""/bin/bash"")
subprocess.call(""monetdb release ""+database_name,shell=True,executable=""/bin/bash"")
"
Passing a function to re.sub in Python,"import re

number_mapping = {'1': 'one',
                  '2': 'two',
                  '3': 'three'}
s = ""1 testing 2 3""

print re.sub(r'\d', lambda x: number_mapping[x.group()], s)
"
Get all values from child elements of a dict as a list,"from operator import itemgetter
map(itemgetter('path'), T.itervalues())
"
"Initializing a class in another class, but passing only set attributes","class OneAttribute:
    def __init__(self,a=1,**kwargs):
        self.a = a

class TwoAttributes:
    def __init__(self,b=2,c=3,**kwargs):
        self.b = b
        self.c = c
"
Python Assignment or Variable binding?,"B. x = malloc(something else)
"
Match surrounding text around a group match,">>> import re
>>> str = '<li><a href=""link"" target=""_parent"">1. Tips and tricks</a></li>'
>>> m = re.findall(r'((?<=>)\d+\.\s*(Tips)[^<]*)', str)
>>> m
[('1. Tips and tricks', 'Tips')]
"
How can I count phrases and use the phrases as headers in Python?,"In [11]: import re

In [14]: re.findall(r'\b%s\b' % p[0], text1)
Out[14]: ['hello', 'hello', 'hello']

In [15]: re.findall(r'\b%s\b' % p[0], text1, re.I)
Out[15]: ['hello', 'hello', 'hello']

In [16]: re.findall(r'\b%s\b' % p[1], text1, re.I)
Out[16]: ['name']

In [17]: re.findall(r'\b%s\b' % p[2], text1, re.I)
Out[17]: ['john doe']
"
Repeatedly execute python script over files in folder arranged in order of date,"import subprocess
import glob
import os.path

with open('output.txt', 'w') as f_output:
    # ap files sorted by modified order
    files = sorted(glob.glob(r'ap*.hdf5'), key=lambda x: os.path.getmtime(x))

    for ap in files:
        path, filename = os.path.split(ap)
        sta = os.path.join(path, 'sta{}'.format(filename[2:]))

        # Do we have an ap/sta pair?
        if os.path.exists(sta):
            # Launch the Python script with the required parameters
            p = subprocess.Popen(['python.exe', 'result.py', ap, sta], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            out, err = p.communicate()
            # Write stdout to a file and stderr to the screen
            f_output.write(out)
            print err
        else:
            print '{} is missing'.format(sta)
"
Is there a comparison key for set objects?,"class TestObj(object):
    def __init__(self, value, *args, **kwargs):
        self.value = value 
        super().__init__(*args, **kwargs)

    def __eq__(self, other):
        return self.value == other.value

    def __hash__(self):
        return hash(self.value)
"
Limit sum of entries in numpy array by adjusting negative entries,"In [155]: def vectorized(initial_values):
     ...:   out = initial_values.copy()
     ...:   sorted_index = np.argsort(out)
     ...:   mask = out.sum() < out[sorted_index].cumsum()
     ...:   out[sorted_index[mask]] = 0
     ...:   out[sorted_index[np.where(mask)[0][-1]+1]] -= out.sum()
     ...:   return out
     ...: 
     ...: def org_app(initial_values):  
     ...:   final_values = initial_values.copy()
     ...:   sorted_index = np.argsort(initial_values)
     ...:   for i, entry in enumerate(final_values[sorted_index]):
     ...:       ss = final_values.sum()
     ...:       if ss >= 0:
     ...:           break
     ...:       adjustment = max(entry, ss)
     ...:       final_values[sorted_index[i]] -= adjustment
     ...:   return final_values
     ...: 
"
"Transform an array of shape (n,) to a numpy array of shape (n,1)","In [64]: na
Out[64]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [65]: str(na)
Out[65]: '[0 1 2 3 4 5 6 7 8 9]'

In [66]: na.reshape((-1,1))
Out[66]:
array([[0],
       [1],
       [2],
       [3],
       [4],
       [5],
       [6],
       [7],
       [8],
       [9]])

In [67]: na.reshape((-1,1)).shape
Out[67]: (10, 1)
"
how do i return a string from a regex match in python,"imtag = re.match(r'<img.*?>', line).group(0)
"
How to add or change a Class (not an instance)?,"class AlternativeName:
    def __init__(self, template, name=""alt_name""):
        self.template = template
        self.name = ""_"" + name

    def __get__(self, instance, klass):
        try:
            return getattr(klass, self.name)
        except AttributeError:
            pass
        alt_name = self.template.format(klass.__name__)
        setattr(klass, self.name, alt_name)
        return alt_name

class Foo:
    alt_name = AlternativeName(template=""{}_ending"")

print(Foo.alt_name)
"
How to use argsparse so the script options with the same affect will appear in the same 'help' line,"import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-a', '-b',  help='do something')

parser.parse_args(['--help'])
"
accumulating an orderedDict,"total = 0
for key, value in month_dictionary.iteritems():
    total += value
    month_dictionary[key] = total
"
Determining if a Variable is Numerically an Integer in Python,"from math import fmod

if fmod(xmax - x0, h) == 0:
    pass
"
python numpy.where function for lists,">>> [a for a, b in zip(array1, array2) if b]
['b', 'c']
"
Python: How to suppress the output of os.system,"try: 
    # python 2.x
    from urllib import urlretrieve
except ImportError:
    # python 3.x
    from urllib.request import urlretrieve

urlretrieve(theurl, local_filename)
"
KeyError with integer tuples as keys,"matrix = ""\t ___ ___ ___\n\t|_{(0, 0)}_|_{(0, 1)}_|_{(0, 2)}_|\n\t|_{(1, 0)}_|_{(1, 1)}_|_{(1, 2)}_|\n\t|_{(2, 0)}_|_{(2, 1)}_|_{(2, 2)}_|""
print(matrix.format(**{str(k): v for k,v in values.items()}))
 ___ ___ ___
|___|___|___|
|___|___|___|
|___|___|___|
"
generate a dependency tree of the inheritance hierarchy,"class Node(object):
    def __init__(self, item, children):
        self.item = item
        self.children = children

def get_class_tree(klass):
    bases = getattr(klass, '__bases__')
    return Node(klass, [get_class_tree(item) for item in bases])

def pprint_node(node, level=0):
    print (""  ""*level) + str(node.item)
    for child in node.children:
        pprint_node(child, level+1)
"
creating multiple objects graphics,"from graphics import *

def main_function():
    win = GraphWin (""Example"" , 1000,1000)
    win.setBackground(""green"")
    circle_params = [(50, 50, 20, ""blue""),
                   (50 ,100, 20, ""blue""),
                   (50,100, 20, ""green""),
                   (300,50, 20, ""green""),
                   (350,50, 20, ""green""),
                   (400,50, 20, ""green""),
                   (450,50, 20, ""green""),
                   ]
    helper_function(win, circle_params)

def helper_function(win, circle_params):
    for param in circle_params:
        a = Circle(Point(param[0], param[1]), param[2]).setFill(param[3]).draw(win)
"
Using arguments to to run functions,"import sys

def f1(): print ""1""
f1.safe = True
def f2(): print ""2""
f2.safe = True
def f3(): print ""3""

for fname in sys.argv[1:]:
    fn = globals()[fname]
    if fn.__dict__.get('safe'):
        fn()
    else:
        print ""No %s for you!"" % fname
"
Python performance characteristics,"for x in whatever():
    anobj.amethod(x)
"
Python - order list of lists by multiple column indexes,">>> import operator
>>> sorted(a, key=operator.itemgetter(1, 0))  # order by column 1 first, then 0.
[['c', 1, 'cc'], ['d', 2, 'ee'], ['a', 4, 'dd'], ['a', 6, 'aa'], ['d', 7, 'bb']]
"
finding the greatest Fibonacci number within limited time in python,"import timeit

def fib(x):
    if x==0 or x==1: return 1
    else: return fib(x-1)+fib(x-2)

print timeit.Timer('fib(5)', 'from __main__ import fib').timeit()
"
removing pairs of elements from numpy arrays that are NaN (or another value) in Python,">>> import numpy as np
>>> a[~np.isnan(a).any(1)]
array([[  1.,  10.],
       [  5.,   6.]])
"
Sort list B by the sort of list A?,">>> A = [2,3,1,4]
>>> B = [5,6,7,8]
>>> A, B = zip(*sorted(zip(A, B)))
>>> list(A)
[1, 2, 3, 4]
>>> list(B)
[7, 5, 6, 8]
"
How to obtain a gaussian filter in python,"import numpy as np

def matlab_style_gauss2D(shape=(3,3),sigma=0.5):
    """"""
    2D gaussian mask - should give the same result as MATLAB's
    fspecial('gaussian',[shape],[sigma])
    """"""
    m,n = [(ss-1.)/2. for ss in shape]
    y,x = np.ogrid[-m:m+1,-n:n+1]
    h = np.exp( -(x*x + y*y) / (2.*sigma*sigma) )
    h[ h < np.finfo(h.dtype).eps*h.max() ] = 0
    sumh = h.sum()
    if sumh != 0:
        h /= sumh
    return h
"
Fixing faulty unicode strings,"% guess_chain_encodings.py ""u'\x99\x8c\x85\x8d'"" ""u'\u05e9\u05dc\u05d5\u05dd'"" --all
"
Decimal approximation to expression (square root),"In [16]: strs=""1,7320508075688772""

In [17]: num=float(""."".join(strs.split("","")))

In [19]: math.ceil(num**2)
Out[19]: 3.0
"
How to change the scope of a variable in a function? Python,"def func(x,y):
    x = x+200 #this can be written x += 200
    y = y+300 #as above: y += 300
    return (x,y) #returns a tuple (x,y)

x = 2
y = 3
func(x,y) # returns (202, 303)
print(x,y) #prints 2 3
"
How fill a regex string with parameters,"def reverse(regex, dict):
    replacer_regex = re.compile('''
        \(\?P\<         # Match the opening
            (.+?)       # Match the group name into group 1
        \>\(.*?\)\)     # Match the rest
        '''
        , re.VERBOSE)

    return replacer_regex.sub(lambda m : dict[m.group(1)], regex)
"
Adding zero in front of a character in Python,"data = ['3.','36','25'];
new_data = ['%02d' % float(x) for x in data]
"
"Map List of Tuples into a Dictionary, python","from collections import defaultdict

myDict = defaultdict(int)

for item in myTupleList:
    myDict[item[1]] += item[2]
"
Blender material from URL,"def run(origin):
    # Load image file from url.    
    try:
        #make a temp filename that is valid on your machine
        tmp_filename = ""/tmp/temp.png""
        #fetch the image in this file
        request.urlretrieve(""https://www.google.com/images/srpr/logo4w.png"", tmp_filename)
        #create a blender datablock of it
        img = bpy.data.images.load(tmp_filename)
        #pack the image in the blender file so...
        img.pack()
        #...we can delete the temp image
        os.remove(tmp_filename)
    except Exception as e:
        raise NameError(""Cannot load image: {0}"".format(e))
    # Create image texture from image
    cTex = bpy.data.textures.new('ColorTex', type='IMAGE')
    cTex.image = img
    # Create material
    mat = bpy.data.materials.new('TexMat')
    # Add texture slot for color texture
    mtex = mat.texture_slots.add()
    mtex.texture = cTex
    # Create new cube
    bpy.ops.mesh.primitive_cube_add(location=origin)
    # Add material to created cube
    ob = bpy.context.object
    me = ob.data
    me.materials.append(mat)

run((0,0,0))
"
"Numpy array, fill empty values for a single column","arr[arr==''] = '0'
"
Python Newbie Combine Text,"print('description', customer, '<MPID={0}>'.format(mpid))
print('description {0} <MPID={1}>'.format(customer, mpid))
"
scipy.sparse dot extremely slow in Python,">>> X.T.dot(L).shape
(50, 100)
>>> X.T.dot(L)[0,0]
<100x100 sparse matrix of type '<type 'numpy.float64'>'
    with 100 stored elements in Compressed Sparse Column format>
"
"Vectorized manipulation of an array, based on a function of indices","def func3(a,k):
    b = np.empty(a.shape)
    ind = np.indices(a.shape).reshape(6, -1)
    mask = ~np.all(ind[:3] == ind[3:6], axis=0)
    ar = a.ravel()
    br = b.ravel()
    br[:] = ar*ind[k]**2
    br[mask] -= ar[mask]*ind[3+k, mask]**2
    return b
"
Sum corresponding elements of multiple python dictionaries,"from collections import Counter
dicts = [{'a':1, 'b':4, 'c':8, 'd':9},
         {'a':2, 'b':3, 'c':2, 'd':7},
         {'a':0, 'b':1, 'c':3, 'd':4}]
c = Counter()
for d in dicts:
    c.update(d)
"
Row counting with conditional range,"import numpy as np

# array of spike times
t = np.array([[ 111,  184,  221,  344,  366,    0,    0,    0,    0,    0,    0],
              [ 408,  518,  972, 1165, 1186,    0,    0,    0,    0,    0,    0],
              [ 208,  432, 1290, 1321,    0,    0,    0,    0,    0,    0,    0],
              [ 553,  684,  713,  888, 1012, 1108, 1134,    0,    0,    0,    0],
              [ 285,  552, 1159, 1183,    0,    0,    0,    0,    0,    0,    0],
              [ 304,  812,  852,    0,    0,    0,    0,    0,    0,    0,    0]],
              dtype=np.float)

# 60 second time bins
bins = np.arange(0, t.max() + 60, 60)

# get the total number of spikes in each 60 second bin over all rows (cells). we 
# can treat t as 1D since we don't care which spike times correspond to which
# cell.
counts, edges = np.histogram(t[t != 0], bins)

print(bins)
# [    0.    60.   120.   180.   240.   300.   360.   420.   480.   540.
#    600.   660.   720.   780.   840.   900.   960.  1020.  1080.  1140.
#   1200.  1260.  1320.  1380.]

print(counts)
# [0 1 0 3 1 2 2 1 1 2 0 2 0 1 2 0 2 0 2 4 0 1 1]
"
count for number of repetition of values in a list and generate outfile,"from collections import Counter
D = Counter()

for line in open('filename', 'r'):
    k = line.split()[-1]
    D[k] += 1

print 'VALUE    NO TIMES REPEATED'
print '-----    -----------------'
for value, count in D.items():
    print '%-6s           %d'  % (value, count)
"
Using django exclude filter problem with empty m2m field,"Case.objects.exclude(agents=request.user)
"
python struct unpack,"unpack(.., ""Z*"")
"
Using BeautifulSoup to extract parts of string,"from BeautifulSoup import BeautifulSoup
from BeautifulSoup import Tag

soup = BeautifulSoup(""<span style=\""font-size:9.0pt;font-family:Arial;color:#666666\""> 20 min <b>Start time: </b> 10 min <b>Other time: </b> 0 min</span>"")
span = soup.find('span')
for e in span.contents:
 if type(e) is Tag:
   print ""found a tag:"", e.name
 else:
   print ""found text:"", e
"
How do I iterate through a string in Python?,"from collections import defaultdict    
def letterOccurrances(string):
    frequencies = defaultdict(lambda: 0)
    for character in string:
        frequencies[character.lower()] += 1
    return frequencies
"
Assigning range of numbers to a letter in python,"print('| ', end='')
for i in range(4):
    print(str(i) + ' | ', end='')
"
Using matplotlib how could I plot a histogram with given data in python,"from matplotlib.pyplot import *
x = [111,122,155,192,11,123,120,]
y = [3,4,3,5,9,10,23]
bar(x,y)
show()
"
How can i make points of a python plot appear over time?,"import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

x = np.arange(10)
y = np.random.random(10)
size = np.random.randint(150, size=10)
colors = np.random.choice([""r"", ""g"", ""b""], size=10)

fig = plt.figure()
plt.xlim(0, 10)
plt.ylim(0, 1)
graph = plt.scatter([], [])

def animate(i):
    graph.set_offsets(np.vstack((x[:i+1], y[:i+1])).T)
    graph.set_sizes(size[:i+1])
    graph.set_facecolors(colors[:i+1])
    return graph

ani = FuncAnimation(fig, animate, repeat=False, interval=200)
plt.show()
"
Python RE does not return anything after /ref=,"from bs4 import BeautifulSoup

soup = BeautifulSoup(htmlsource)
for link in soup.select('li > a[href^=http://www.amazon.ca/Best-Sellers]'):
    print link['href'], link.get_text()
"
Operator overloading in python with the object on the right hand side of the operator,">>> class My_Num(object):
...     def __init__(self, val):
...         self.val = val
...     def __radd__(self, other_num):
...         if isinstance(other_num, My_Num):
...             return self.val + other_num.val
...         else:
...             return self.val + other_num
... 
>>> n1 = My_Num(1)
>>> n2 = 3
>>> 
>>> print n2 + n1
4
>>> print n1 + n2
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: unsupported operand type(s) for +: 'My_Num' and 'int'
"
limit how much data is read with numpy.genfromtxt for matplotlib,">>> import itertools, numpy
>>> with open('test.txt') as t_in:
...     numpy.genfromtxt(itertools.islice(t_in, 3))
... 
array([[  1.,   2.,   3.,   4.,   5.],
       [  6.,   7.,   8.,   9.,  10.],
       [ 11.,  12.,  13.,  14.,  15.]])
"
How to get values from a map and set them into a numpy matrix row?,"[map(dict.get, range(1, 6)) for _ in range(10)]
"
Proper handling of spark broadcast variables in a Python class,"class model(object):
    @staticmethod
    def foobar(a_model):
        mu = a_model.sc.broadcast(a_model.get_mean())
        y = a_model.y
        def _foobar(x):
            return x - mu.value + y 
        return _foobar

    def __init__(self, sc):
        self.sc = sc
        self.y = -1
        self.rdd = self.sc.parallelize([1, 2, 3])

    def get_mean(self):
        return self.rdd.mean()

    def run_foobar(self):
        self.data = self.rdd.map(model.foobar(self))
"
Unable to do scraping href on jquery object,"import re
import json

from bs4 import BeautifulSoup
import requests


url='http://ws.bursamalaysia.com/market/listed-companies/company-announcements/announcements_listing_f.html?_=1449326650932&callback=jQuery16208050466175191104_1449326525662&page_category=company&category=FA&sub_category=all&all_gm=&alphabetical=All&board=&sector=&date_from=&date_to=&company=5218&page=&testing='
pat = re.compile(r'\(\s*(\{[\s,\w,\W]*\})\s*\)')

r = requests.get(url)
js_obj = json.loads(pat.search(r.text).group(1))

soup = BeautifulSoup(js_obj.get('html'), 'lxml')

links = map(lambda a: a.get('href'), soup.find_all('a'))

for link in links:
    print(link)
"
How to get Entry value using PY_VAR0 or PY_VAR1?,"from tkinter import *



def _show_value(v, *pargs):
    print(*pargs)
    print(v.get())



root = Tk()

entry_var1 = StringVar()
entry_var1.trace('w', lambda *pargs: _show_value(entry_var1, *pargs))

entry_var2 = StringVar()
entry_var2.trace('w', lambda *pargs: _show_value(entry_var2, *pargs))


e1 = Entry(root, textvariable=entry_var1)
e1.pack()

e2 = Entry(root, textvariable=entry_var2)
e2.pack()      


root.mainloop()
"
Returning the URL's from a Youtube search,"import urllib
import urllib2
from bs4 import BeautifulSoup

textToSearch = 'hello world'
query = urllib.quote(textToSearch)
url = ""https://www.youtube.com/results?search_query="" + query
response = urllib2.urlopen(url)
html = response.read()
soup = BeautifulSoup(html)
for vid in soup.findAll(attrs={'class':'yt-uix-tile-link'}):
    print 'https://www.youtube.com' + vid['href']
"
Python: How to move forward or backward together in String printable,">>> def shift(s, step, side='Right'):
        step %= len(s) #Will generate correct steps even step > len(s)
        if side == 'Right':
            return s[-step:]+s[:-step]
        elif side == 'Left':
            return s[step:]+s[:step]
        else:
            print 'Please, Specify either Right or Left shift'
            return -1 #as exit code


>>> shift(chars, 2, 'Right')
'YZ0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWX'
>>> shift(chars, 2, 'Left')
'23456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01'
>>> f(chars, 2, 'No_Direction')
Please, Specify either Right or Left shift
-1
"
Python 3.x dynamically group elements in 2d list by common elements in list,"from itertools import groupby
for k, v in groupby(l, key=lambda t: t[0])  # assuming your list is stored in l
    print('%s\n\t%s' % (k, list(v)))
"
Python: Uniqueness for list of lists,"list(map(list, set(map(lambda i: tuple(i), testdata))))"
Python: dictionary to collection,"def writeTowns(text):
    input = open(text, 'r')
    file = input.readlines()
    dict = {}
    for line in file:
        tmp = line.split()
        dict[tmp[1]]  = dict.get(tmp[1]) or [] 
        dict.get(tmp[1]).append(tmp[0])
    return dict


writeTown = writeTowns('file.txt')
print writeTown['Anzegem']
"
Print a list of words in random order - Python,">>> import random
>>> words = [""Please"", ""Help"", ""Me"", ""Merry"", ""Christmas""]
>>> random.sample(words, len(words))
['Merry', 'Me', 'Help', 'Please', 'Christmas']
"
Class with too many parameters: better design strategy?,"class Neuron(object):

    def __init__(self, **kwargs):
        prop_defaults = {
            ""num_axon_segments"": 0, 
            ""apical_bifibrications"": ""fancy default"",
            ...
        }

        for (prop, default) in prop_defaults.iteritems():
            setattr(self, prop, kwargs.get(prop, default))
"
Slicing a list into a list of sub-lists,"list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"
"Python - all lottery combinations - no duplicates, in order","from itertools import combinations
f = open('combinations.txt', 'w')
for comb in combinations(range(1,50), 6):
    f.write(str(comb))
    f.write('\n')
f.close()
"
Parsing/Printing depending on char length in Python; only 98% on CodeEval,"import sys

with open(sys.argv[1], 'r') as in_f:
    for line in in_f:
        line = line.strip()
        if len(line) > 55:
            line = ""{0}... <Read More>"".format(line[:40].rsplit("" "", 1)[0].rstrip())
        sys.stdout.write(""{0}\n"".format(line))
"
Compress a series of 1s and 0s into the shortest possible ascii string,"# A set of 64 characters, which allows a maximum chunk length of 6 .. because
# int('111111', 2) == 63 (plus zero)
charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_'

def encode(bin_string):
    # Split the string of 1s and 0s into lengths of 6.
    chunks = [bin_string[i:i+6] for i in range(0, len(bin_string), 6)]
    # Store the length of the last chunk so that we can add that as the last bit
    # of data so that we know how much to pad the last chunk when decoding.
    last_chunk_length = len(chunks[-1])
    # Convert each chunk from binary into a decimal
    decimals = [int(chunk, 2) for chunk in chunks]
    # Add the length of our last chunk to our list of decimals.
    decimals.append(last_chunk_length)
    # Produce an ascii string by using each decimal as an index of our charset.
    ascii_string = ''.join([charset[i] for i in decimals])

    return ascii_string

def decode(ascii_string):
    # Convert each character to a decimal using its index in the charset.
    decimals = [charset.index(char) for char in ascii_string]
    # Take last decimal which is the final chunk length, and the second to last
    # decimal which is the final chunk, and keep them for later to be padded
    # appropriately and appended.
    last_chunk_length, last_decimal = decimals.pop(-1), decimals.pop(-1)
    # Take each decimal, convert it to a binary string (removing the 0b from the
    # beginning, and pad it to 6 digits long.
    bin_string = ''.join([bin(decimal)[2:].zfill(6) for decimal in decimals])
    # Add the last decimal converted to binary padded to the appropriate length
    bin_string += bin(last_decimal)[2:].zfill(last_chunk_length)

    return bin_string
"
Append itertools.product() results to variable in Python,"candidates = []
for e in lst:
    for i in range(100):
        candidates.append('{}{:02d}'.format(e[:6], i))
"
ElementTree - findall to recursively select all child elements,">>> import xml.etree.ElementTree as ET
>>> 
>>> def find_rec(node, element, result):
...     for item in node.findall('saybye'):
...         result.append(item)
...         find_rec(item, element, result)
...     return result
... 
>>> find_rec(ET.parse(""h.xml""), 'saybye', [])
[<Element 'saybye' at 0x7f4fce206710>, <Element 'saybye' at 0x7f4fce206750>, <Element 'saybye' at 0x7f4fce2067d0>]
"
How to replace previous plots in a matplotlib figure with new plots or grid of plots?,"def dosomething():
    try: 
        self.canvas.get_tk_widget().destroy()
    except:
        pass        
    fig = Figure(figsize=(12, 4))
    axes = fig.add_subplot(111)
    self.canvas = FigureCanvasTkAgg(fig, master=windows)
    self.canvas.get_tk_widget().pack()
    data=np.arange(100)  # not sure what this is for

def dosomethingelse():
    try: 
        self.canvas.get_tk_widget().destroy()
    except:
        pass 
    fig = Figure(figsize=(12, 4))
    fig.plot(np.arange(100)+10*(np.random.rand(100)-0.5),'-r')
    self.canvas = FigureCanvasTkAgg(fig, master=windows)
    self.canvas.get_tk_widget().pack()        
"
Is it possible to unpack a tuple in Python without creating unwanted variables?,"(path, _) = self._treeView.get_cursor()
"
Single dash for argparse long options,"In [250]: p=argparse.ArgumentParser()

In [251]: p.add_argument('-longargument')
Out[251]: _StoreAction(option_strings=['-longargument'], dest='longargument', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)

In [252]: p.parse_args(['-long','test'])
Out[252]: Namespace(longargument='test')

In [253]: p.parse_args(['-l','test'])
Out[253]: Namespace(longargument='test')
"
Translating timestamp to Human Readable format,"from datetime import datetime
from pytz import timezone
import pytz
_utc = pytz.utc

dte = ""2002-08-22T07:00:00Z""
utc = datetime.strptime(dte, ""%Y-%m-%dT%H:%M:%SZ"").replace(tzinfo=_utc)
for tz in pytz.all_timezones:
    tz = timezone(tz)
    print(tz)
    print(utc.astimezone(tz))
"
How to combine try/except in python into a pretty one liner?,"printlist.append(text['data'] if 'data' in text else '')
"
Python String Padding,"lines_of_text = [
    (12345, 1312,  'Teso', 'Billy',  'Jones'),
    (12344, 30000, 'Test', 'John M', 'Smith')
]

for mytuple in lines_of_text:
    name = '{}, {}'.format(mytuple[4], mytuple[3])
    value = '£' + str(mytuple[1])
    print('{name:<20} {id:>8} {test:<12} {value:>8}'.format(
        name=name, id=mytuple[0], test=mytuple[2], value=value)
    )
"
python regex to remove and obtain required string,">>> import re
>>> s = ""<_io.TextIOWrapper name='C:/Python34/abcd.txt' mode='w' encoding='cp1252'>""
>>> re.search(r""<[^>]*\bname='([^']*)"", s).group(1)
'C:/Python34/abcd.txt'
"
Get array which is the result of invoking a function on each element of an object array,"import numpy as np
class Foo():
    def foo(self):
        return np.random.random()

a = np.empty((10,10), dtype=object)
for ind,v in np.ndenumerate(a):
    a[ind] = Foo()

def evaluate_and_reshape(a, shape):
    it = np.nditer( op    = [a.reshape(shape),None],
                    flags = ['multi_index','refs_ok'],
                    op_flags = [['readonly'],
                                ['writeonly','allocate']],
                    op_dtypes = [object, float],
                    itershape = (shape)
                  )
    while not it.finished:
        ind = it.multi_index
        it.operands[1][ind] = it.operands[0][ind].foo()
        it.iternext()
    return it.operands[1]

def sol1():
    return evaluate_and_reshape(a,(20,5))

def sol2():
    return np.reshape( [o.foo() for o in a.flat], (20,5) )
"
Most Pythonic way to read csv values into dict of lists,"import numpy as np
data = np.genfromtxt('data.csv', delimiter=',', names=True)
"
Using live_settings in python shell,"python manage.py --settings=live_settings shell
"
"Python Scrapy project, how can I scrap 1000 pages with the same spider?","    # -*- coding: utf-8 -*-
#Por: Daniel Ortiz Costa, Ivo Andres Astudillo, Ruben Quezada
#Proyecto de Academias Web - Extraer publicaciones de Scopus

from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
import datetime
import MySQLdb

class DmozSpider(BaseSpider):
    name = ""scrapyscopus""

    start_urls = [""http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84858710280"",]

    #id de la url actual
    id_paper_web = """"

    #Variables de la base de datos
    abstracto = """"
    keywords = """"
    anio_publicacion = """"
    tipo_documento = """"
    tipo_publicacion = """"    
    descripcion = """"
    volume_info = """"
    idioma = """"
    fecha_consulta = """"
    nombres = {}
    instituciones = {}

    #La probabilidad de que el articulo sea de alguien que buscamos
    probabilidad = 0

    def __init__(self, *args, **kwargs):
        super(DmozSpider, self).__init__()

        #load file here
        for url in some_file:
            self.start_urls.append[url]


    def parse(self, response):

        #Recibe el codigo de la pagina en la response
        hxs = HtmlXPathSelector(response)

        self.obtenerId(response.url)

        #La probabilidad de exito consta de 3 factores
        #1 - Probabilidad del 25% por pertenecer al pais
        #2 - Probabilidad del 25% por tener la misma inicial y apellido
        #3 - Probabilidad del 35% porque el articulo tenga a alguien de la universidad
        #4 - Probabilidad del 15% si es que todos los del articulo son de la universidad

        #Las dos primeras condiciones ya se cumplieron, por lo que se suma 50%
        #la otra se determinará leyendo las instituciones dentro del código 
        self.probabilidad = self.probabilidad+50;

        #ABSTRACTO
        #Se extrae el abstracto que es el parrafo que contiene un valor align=justify
        lista =  hxs.select('//p[contains(@align, ""justify"")]/text()')  

        #Se saca el texto
        self.abstracto = lista[0].extract()

        #KEYWORDS
        #Se encuentran en el ultimo resultado de la lista de parrafos con clase marginB3
        lista =  hxs.select('//p[@class=""marginB3""]/text()')          

        #Se saca el texto del ultimo resultado
        self.keywords = lista[len(lista)-1].extract()

        #TIPO DE PUB, TIPO DE DOC E IDIOMA
        #Se encuentran todos con la clase paddingR15
        lista =  hxs.select('//span[@class=""paddingR15""]')

        #Se analiza cada uno de los span recibidos en busca del correcto
        for i in lista:

            #Se analiza el strong que retiene la descripcion de lo que vemos
            #Para sacar el lenguaje por ejemplo, debemos buscar la linea ""Original Language""
            #Luego de ello proceder a extraer el texto del span padre

            if (str(i.select('.//strong/text()').extract()[0]) == ""Source Type: ""):
                self.tipo_publicacion=i.select('text()').extract()[0]; 

            if (str(i.select('.//strong/text()').extract()[0]) == ""Original language: ""):
                self.idioma=i.select('text()').extract()[1];

            if (str(i.select('.//strong/text()').extract()[0]) == ""Document Type: ""):
                self.tipo_documento=i.select('text()').extract()[0]; 

        #FECHA DE CONSULTA
        #Para la fecha de consulta se obtiene la fecha actual
        self.fecha_consulta = datetime.datetime.now().strftime(""%Y-%m-%d"")


        #DESCRIPCION
        #La descripcion se encuentra formada por la zona del encabezado
        #Se extrae primeramente el titulo, que es un h2 de clase sourceTitle
        lista =  hxs.select('//h2[@class=""sourceTitle""]/text()') 

        #Luego se la agrega a la cadena de descripcion
        self.descripcion=self.descripcion+str(lista[0].extract())+""\n"";

        #Se obtiene la informacion del volumen que tambien pertenece a la descripcion
        lista =  hxs.select('//div[@class=""volumeInfo""]/text()')             

        #Se la extrae
        self.volume_info=str(lista[0].extract())

        #Se la agrega a la cadena de la descripcion
        self.descripcion=self.descripcion+self.volume_info

        #Se debe extraer el anio de publicacion desde la informacion de volumeen
        #Para ello se llama al metodo respectivo que se encarga de la extraccion
        self.obtenerAnioPublicacion()


        #AUTORES
        #Se determina el parrafo donde se encuentran los nombres de los autores
        lista =  hxs.select('//p[@class=""smallLink authorlink svDoNotLink paddingB5""]')

        #Se seleccionan  los span directos de ese parrafo
        lista = lista.select('span')

        for elemento in lista:

            lista2 = elemento.select('.//sup')

            for i in lista2:
                self.nombres[elemento.select('.//span[@class=""previewTxt""]/text()').extract()[0]]=i.select('text()').extract()[0]
                break;


        #DIRECCIONES
        #Se determina el parrafo donde se encuentran los nombres de los autores
        lista =  hxs.select('//p[@class=""affilTxt""]')

        #Se determina una nueva lista con los sup y su texto
        lista2 = lista.select('.//sup/text()')

        #Se la lista siguiente mostrará los datos procesados
        letras=[]

        #Obtendrá la letra de cada publicación
        for i in lista2:
            letra = str(i.extract()[0])
            letras.append(letra)

        #Se determina el parrafo donde se encuentran los nombres de los autores
        lista3 = lista.select('text()')

        institucion=[]

        contador=0;

        for i in lista3:

            if(i.extract()!=""\n""):
                if ""Loja"" in i.extract():
                    contador=contador+1

                institucion.append(i.extract())

        if contador>=1:
            if contador==1:
                self.probabilidad=self.probabilidad+35
            else:
                if contador==len(institucion):
                    self.probabilidad=self.probabilidad+15

        self.instituciones=dict(zip(letras, institucion))

        self.guardarDatos()

    """"""
    Metodo responsable de obtener el 
    anio de publicacion del articulo.
    """"""
    def obtenerAnioPublicacion(self):

        #Divide el volumen de acuerdo a la , que posee
        componentes=self.volume_info.split(', ')      

        #Dependiendo del tipo de publicacion, la posicion del anio variara
        if(self.tipo_publicacion == ""Journal""):            
            self.anio_publicacion=componentes[2]

        else:
            self.anio_publicacion=componentes[0]



    """"""
    Metodo de obtener el id de la url actual
    """"""
    def obtenerId(self, url):   

        db = MySQLdb.connect(""localhost"",""root"","""",""proyectoacademias"" )

        cursor = db.cursor()

        sql = ""SELECT id FROM test WHERE url like \'""
        sql = sql + url
        sql = sql + ""\'""

        cursor.execute(sql)

        data = cursor.fetchone()

        for row in data:
            print str(row)
            self.id_paper_web=str(row)

        db.close()



    """"""
    Metodo de guardar los datos

    """"""
    def guardarDatos(self):
        db = MySQLdb.connect(""localhost"",""root"","""",""proyectoacademias"" )

        cursor = db.cursor()

        sql = ""UPDATE test SET abstract=\'""+str(self.abstracto)+""\', fecha_consulta=\'""+str(self.fecha_consulta)+""\', anio_publicacion=\'""+str(self.anio_publicacion)+""\', probabilidad=""+str(self.probabilidad)+"" WHERE id = ""+str(self.id_paper_web)

        print ""\n\n\n""+sql+""\n\n\n""
        cursor.execute(sql)      
        db.commit()

        for i in range (len(self.nombres)):
            sql = ""INSERT INTO test_autores VALUES (\'""+self.nombres.keys()[i]+""\', ""+str(self.id_paper_web)+"", \'""+self.instituciones[self.nombres[self.nombres.keys()[i]]]+""\', ""+str((i+1))+"")""
            print ""\n\n\n""+sql+""\n\n\n""
            cursor.execute(sql)
            db.commit()

        db.close()
"
faster way to make a 3D blob with python?,"def make_spots(bright, spread, x0, y0, z0):

    # Create x and y indices
    x = np.linspace(-50, 50, 200)
    y = np.linspace(-50, 50, 200)
    z = np.linspace(-50, 50, 200)

    # this will broadcast out to an (nblobs, ny, nx, nz) array
    dx = x[None, None, :, None] - x0[:, None, None, None]
    dy = y[None, :, None, None] - y0[:, None, None, None]
    dz = z[None, None, None, :] - z0[:, None, None, None]
    spread = spread[:, None, None, None]
    bright = bright[:, None, None, None]

    # we can save time by performing the exponentiation over 2D arrays
    # before broadcasting out to 4D, since exp(a + b) == exp(a) * exp(b)
    s2 = spread * spread
    a = np.exp(-(dx * dx) / s2)
    b = np.exp(-(dy * dy) / s2)
    c = np.exp(-(dz * dz) / s2)

    intensity = bright * a * b * c

    return intensity.astype(np.uint16)
"
Format for arrays in Python,">>> {(i,k): int(x) for i, line in enumerate(Inputstring.splitlines()) for k, x in enumerate(line.split())}
{(7, 3): 68, (16, 9): 94, (19, 4): 83, ..., (13, 1): 80, (11, 17): 29, (2, 0): 81}
"
python match only captures first and last group - am I misunderstanding something?,">>> s = ""$word1$, $word2$, $word3$, $word4$""
>>> authors = re.findall(r""\$(\w+)\$"", s)
>>> authors
['word1', 'word2', 'word3', 'word4']
"
Access instance in other modules,"#config.py
class Configuration:
    __shared_state = {}
    def __init__(self, *import_sections):
        self.__dict__ = self.__shared_state
        if not import_sections: # we are not initializing this time
            return
        #your old code verbatim
"
Is it able to import from a module named uid_2014-10-13.py?,"import importlib

module = importlib.import_module('uid_2014-10-13')
"
Modify python script to run on every file in a directory,"for f in args:
    process(f)
"
Determining a homogeneous affine transformation matrix from six points in 3D using Python,"import numpy as np

def recover_homogenous_affine_transformation(p, p_prime):
    '''
    Find the unique homogeneous affine transformation that
    maps a set of 3 points to another set of 3 points in 3D
    space:

        p_prime == np.dot(p, R) + t

    where `R` is an unknown rotation matrix, `t` is an unknown
    translation vector, and `p` and `p_prime` are the original
    and transformed set of points stored as row vectors:

        p       = np.array((p1,       p2,       p3))
        p_prime = np.array((p1_prime, p2_prime, p3_prime))

    The result of this function is an augmented 4-by-4
    matrix `A` that represents this affine transformation:

        np.column_stack((p_prime, (1, 1, 1))) == \
            np.dot(np.column_stack((p, (1, 1, 1))), A)

    Source: https://math.stackexchange.com/a/222170 (robjohn)
    '''

    # construct intermediate matrix
    Q       = p[1:]       - p[0]
    Q_prime = p_prime[1:] - p_prime[0]

    # calculate rotation matrix
    R = np.dot(np.linalg.inv(np.row_stack((Q, np.cross(*Q)))),
               np.row_stack((Q_prime, np.cross(*Q_prime))))

    # calculate translation vector
    t = p_prime[0] - np.dot(p[0], R)

    # calculate affine transformation matrix
    return np.column_stack((np.row_stack((R, t)),
                            (0, 0, 0, 1)))
"
Regex and Octal Characters,"#!/usr/bin/python
import sys
import re

str = sys.stdin.read()
print re.findall(ur""'\\[0-7]{1,3}'"", str)
"
How to see top n entries of term-document matrix after tfidf in scikit-learn,"from sklearn.feature_extraction.text import TfidfVectorizer
from collections import defaultdict

lectures = [""this is some food"", ""this is some drink""]
vectorizer = TfidfVectorizer(ngram_range=(1,2))
X = vectorizer.fit_transform(lectures)
features_by_gram = defaultdict(list)
for f, w in zip(vectorizer.get_feature_names(), vectorizer.idf_):
    features_by_gram[len(f.split(' '))].append((f, w))
top_n = 2
for gram, features in features_by_gram.iteritems():
    top_features = sorted(features, key=lambda x: x[1], reverse=True)[:top_n]
    top_features = [f[0] for f in top_features]
    print '{}-gram top:'.format(gram), top_features
"
Converting HTML list (<li>) to tabs (i.e. indentation),"import re

def next_tag(s, tag):
    i = -1
    while True:
        try:
            i = s.index(tag, i+1)
        except ValueError:
            return
        yield i

a = ""<list><list-item>First level<list><list-item>Second level</list-item></list></list-item></list>""

a = a.replace(""<list-item>"", ""* "")

for LEVEL, ind in enumerate(next_tag(a, ""<list>"")):
    a = re.sub(""<list>"", ""\n"" + LEVEL * ""\t"", a, 1)

a = a.replace(""</list-item>"", """")
a = a.replace(""</list>"", """")

print a
"
adding elements in nested lists,">>>items = [[datetime.datetime(2000, 12, 10, 0, 0), 0.0011], [datetime.datetime(2000, 12, 11, 0, 0), 0.0013 ], [datetime.datetime(2000, 12, 12, 0, 0), 0.0014]]
>>>sum(item[1] for item in items)
0.0038000000000000004
"
Filtering a list based on another list,"drop = set(drop)

filtered = [d for d in data if not drop.intersection(d[1].split())]
"
Using a class dictionary to map to instance methods in Python,"class Foo(object):
    do_map = dict(this='do_this', that='do_that')

    def my_func(self, item, value):
        if item in do_map:
            getattr(self, do_map[item])(value)
"
Flatten an iterable of iterables,"from collections import Iterable

def flatten(collection):
    for element in collection:
        if isinstance(element, Iterable) and not isinstance(element, str):
            for x in flatten(element):
                yield x
        else:
            yield element
"
How do I print a sorted Dictionary in Python 3.4.3,">>> class1 = { 'Ethan':'9','Ian':'3','Helen':'8','Holly':'6' }
>>> print(sorted(class1.items()))
[('Ethan', '9'), ('Helen', '8'), ('Holly', '6'), ('Ian', '3')]
"
Force Content-Type or expose request.data in Flask for known content-type,"# mkreq.py
from urllib import urlencode
import urllib2
from base64 import b64encode

credentials = {
            'username': 'test@example.com',
            'password': 'password'
}
data = b64encode(urlencode(credentials))
request = urllib2.Request(""http://localhost:5000/login"")
request.add_data(data)
request.add_header('Content-Type', 'application/gooblygop')
# 'application/x-www-form-urlencoded' seems to be a default Content-Type
login1 = urllib2.urlopen(request).read()
print(login1)
request2 = urllib2.Request(""http://localhost:5000/login"")
request2.add_data(data)
login2 = urllib2.urlopen(request2).read()
print(login2)
"
"Python: Splitting a string into words, saving separators","words = tuple(x for x in re.split(r'\)?[, .]\(?', line) if x)
"
Python: Save page's dynamic image,"data = {'varName1': var1, 'varName2': var2, ...}
data = urllib.urlencode(data)
r = br.open('http://www.example.com/html-page-with-dynamic-image-embedded.html', data)
"
How to count values in a certain range in a Numpy array?,((25 < a) & (a < 100)).sum()
How do I parse JSON with multiple keys the same?,"obj = json.load(...)
[dct for dct in obj['posts'] if 'no' in dct]
"
Delete column from pandas DataFrame,"df = df.drop('column_name', 1)
"
Python match raw HTTP POST data,"re.findall(r'^.*\r\n\r\n(.*)', data, re.MULTILINE)
"
Beginner python: Formatting Lines,"oldMac += ""\n"".join(stanza1)
"
Confidence Interval for t-test (difference between means) in Python,"import numpy as np, statsmodels.stats.api as sms

X1, X2 = np.arange(10,21), np.arange(20,26.5,.5)

cm = sms.CompareMeans(sms.DescrStatsW(X1), sms.DescrStatsW(X2))
print cm.tconfint_diff(usevar='unequal')
"
Parse dictionaries within a dictionary in python,"def traverse(tree):
    if not isinstance(tree, dict):
        return tree.isalpha() # if leafs can't be alphabetic, simply return 0
    c = 0
    for k, v in tree.items():
        c += k.isalpha() + traverse(v)
    return c
"
Python pandas: can I speed up this apply statement?,"%%timeit
df['new_date'].apply(lambda r: datetime.datetime.strptime(r, ""%d-%m-%Y"") )

1 loops, best of 3: 2.72 s per loop
"
How to remove character from tuples in list?,"def to_int(s):
    s = ''.join(ch for ch in s if ch.isdigit())
    return int(s)

lst = [('(10', '40)'), ('(40', '30)'), ('(20', '20)')]

lst = [(to_int(a), to_int(b)) for a,b in lst] # => [(10, 40), (40, 30), (20, 20)]
"
Converting Script from Powershell to Python-Regex Not Working as Expected,"found = re.findall(img_url_regex, data)
if not found: # the list is empty
    sys.stderr.write(""Error finding Regex \r\n"")
else:
    for imgurl in found:
        print 'Found image:', imgurl
        # whatever else you want to do with the URL.
"
Python3 - How can I determine the existence of element values?,">>> 'bba' in mylist['b'].values()
True
"
How do I read a text file into a string variable in Python,"str = open('very_Important.txt', 'r').read()"
How to flatten axes of a multidimensional array without making copies in NumPy?,">>> a = numpy.arange(27).reshape((3, 3, 3))
>>> b = a.reshape((9, 3))
>>> b[0] = 55
>>> a
array([[[55, 55, 55],
        [ 3,  4,  5],
        [ 6,  7,  8]],

       [[ 9, 10, 11],
        [12, 13, 14],
        [15, 16, 17]],

       [[18, 19, 20],
        [21, 22, 23],
        [24, 25, 26]]])
"
How do I join the values of nested Python dictionary?,"def flatten_dict_values(d, seen_dict_ids=None):
    values = []
    seen_dict_ids = seen_dict_ids or set()
    seen_dict_ids.add(id(d))
    for value in d.itervalues():
        if id(value) in seen_dict_ids:
            continue
        elif isinstance(value, dict):
            values.extend(flatten_dict_values(value, seen_dict_ids))
        else:
            values.append(value)
    return values

>>> recursive_dict = {'one': 'not-nested',
...                   'two': {'three': 'nested'}}
>>> recursive_dict['recursive'] = recursive_dict
>>> "" "".join(flatten_dict_values(recursive_dict))
'nested not-nested'
"
How do I convert tuple of tuples to list in one line (pythonic)?,"map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))"
"Stack, Pop and Add","def calculate(inputs):
    if not inputs:
        return
    s = make_empty_stack()
    for item in inputs:
        if item in ops:
            op2, op1 = pop_stack(s), pop_stack(s)
            res = ops[item](op1, op2)
            push_stack(s, res)
        else:
            push_stack(s, item)
    return pop_stack(s)
"
Python configparser getting and setting without exceptions,"class DefaultOption(dict):

    def __init__(self, config, section, **kv):
        self._config = config
        self._section = section
        dict.__init__(self, **kv)

    def items(self):
        _items = []
        for option in self:
            if not self._config.has_option(self._section, option):
                _items.append((option, self[option]))
            else:
                value_in_config = self._config.get(self._section, option)
                _items.append((option, value_in_config))
        return _items
"
Python Time Math,"import datetime

start_time = 9 # per user input
end_time = 10 # per user input
divisions = 7 # per user input

total_time = end_time - start_time
start_time = datetime.datetime.combine(datetime.date.today(),datetime.time(start_time))
end_time = start_time + datetime.timedelta(hours=total_time)

increment = total_time*3600000//divisions # resolution in ms

times = [(start_time+datetime.timedelta(milliseconds=increment*i)).time()
         for i in range(divisions)]

from pprint import pprint

pprint(list(map(str,times)))

# ['09:00:00',
#  '09:08:34.285000',
#  '09:17:08.570000',
#  '09:25:42.855000',
#  '09:34:17.140000',
#  '09:42:51.425000',
#  '09:51:25.710000']
"
Only using items from one list once in nested list comprehension,">>> list1 = ['A', 'B']
>>> list2 = ['Apple', 'Banana', 'Balloon', 'Boxer', 'Crayons', 'Elephant']
>>> list2_map = {}
>>> for word in list2:
...     list2_map.setdefault(word[0], []).append(word)
...
>>> ['{}:{}'.format(l, ','.join(list2_map.get(l, []))) for l in list1]
['A:Apple', 'B:Banana,Balloon,Boxer']
"
Pandas Dynamic Stack,"print pd.melt(df.reset_index(), 
              id_vars=['index', 'foo'], 
              value_vars=['bar', 0, 1],
              value_name='bar')
        .sort_values('index')
        .set_index('index', drop=True)
        .dropna()
        .drop('variable', axis=1)
        .rename_axis(None)

  foo bar
0   a   e
0   a   i
0   a   m
1   b   f
1   b   j
2   c   g
2   c   k
2   c   o
3   d   h
3   d   p
"
Is it possible to have csv.DictReader format certain columns as something other than string?,"def convert_fields(iterable, **conversions):
    for item in iterable:
        for key in item.viewkeys() & conversions:
            item[key] = conversions[key](item[key])
        yield item
"
python - increase array size and initialize new elements to zero,"A_new  = padarray(A,[1 2],'post')
"
fit multiple gaussians to the data in python,"Complete working code
from scipy.optimize import curve_fit
import numpy as np
import matplotlib.pyplot as plt

data = np.loadtxt('data.txt', delimiter=',')
x, y = data

plt.plot(x,y)
plt.show()

def func(x, *params):
    y = np.zeros_like(x)
    for i in range(0, len(params), 3):
        ctr = params[i]
        amp = params[i+1]
        wid = params[i+2]
        y = y + amp * np.exp( -((x - ctr)/wid)**2)
    return y

guess = [0, 60000, 80, 1000, 60000, 80]
for i in range(12):
    guess += [60+80*i, 46000, 25]   

popt, pcov = curve_fit(func, x, y, p0=guess)
print popt
fit = func(x, *popt)

plt.plot(x, y)
plt.plot(x, fit , 'r-')
plt.show()
"
All elements from html not being extracted by Requests and BeautifulSoup in Python,"from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


driver = webdriver.PhantomJS()
driver.get(""https://www.bestodds.com.au/odds/cricket/ICC-World-Twenty20/Sri-Lanka-v-Afghanistan_71992/"")

# waiting for the page to load
wait = WebDriverWait(driver, 10)
wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, "".odds-comparison"")))

for comparison in driver.find_elements_by_css_selector("".odds-comparison""):
    description = comparison.find_element_by_css_selector("".description"").text
    print(description)

driver.close()
"
Split diary file into multiple files using Python,"f = open(""diaryfile"", ""r"")
body = []
for line in f:
    if your_regexp.match(line):
        if body:
            write_one(body)
        body = []
    body.append(line)
if body:
    write_one(body)
f.close()
"
How to access the nth element of every list inside another list?,">>> from operator import itemgetter
>>> map( itemgetter(1), lis)
[2, 5, 8, 11]
"
How to unzip a list of tuples into individual lists?,zip(*l)
How to elegantly interleave two lists of uneven length in python?,"from itertools import groupby

len_ab = len(a) + len(b)
groups = groupby(((a[len(a)*i//len_ab], b[len(b)*i//len_ab]) for i in range(len_ab)),
                 key=lambda x:x[0])
[j[i] for k,g in groups for i,j in enumerate(g)]
"
Python Selenium wait for several elements to load,"#in for loop with enumerate for i    
selector.append(' > li:nth-child(%i)' % (i + 1))  # identify child <li> by its order pos
"
proper way to subclass object for __getitem__() in python if emulating a dict,"def __getitem__(self, k):
    if self.mypattern.match(k):
        return 1
    else:
        raise KeyError(""Key {} does not match pattern {}"".format(k, self.mypattern))
"
execute similar files in different directories python,"import os
for root, dirs, files in os.walk(os.path.abspath(""/parent/dir/"")):
  for file in files:
    if os.path.splitext(file)[1] == '.py':
      print os.path.join(root, file)
"
How to get the expected result using list comprehension,"a + b
"
Filtering a list of tuples filled with None in python,">>> my_list = [(2, 3), (3, None), (None, None), (3, 4), (None, 2)]
>>> [t for t in my_list if None not in t]
[(2, 3), (3, 4)]
>>> [t for t in my_list if t != (None, None)]
[(2, 3), (3, None), (3, 4), (None, 2)]
"
Matching array with elements in rows of matrix,"result = [any(x in items for x in matches) for items in x_faces]
"
Iterate a list using recursion,"def replace(thelist, a, b):
    if not thelist:
        return []
    elif thelist[0] == a:
        return [b] + replace(thelist[1:], a, b)
    else:
        return [thelist[0]] + replace(thelist[1:], a, b)
"
Parse an entire JSON object looking for a key in python,"def find_key(dic):
 keys=[]
 if isinstance(dic,dict): 
  for key,value in dic.items():
     if isinstance(value,dict):
        keys.append(key)
        keys.append(find_key(value))
     elif isinstance(value,list):
         keys.append(key)
         keys.append(find_key(value[0]))
     else:
        keys.append(key)
  return keys
"
How can i animate text by character in Tkinter?,"#!/usr/bin/env python

''' animate text in a tkinter canvas 

    See http://stackoverflow.com/q/34973060/4014959
    Written by PM 2Ring 2016.01.24
'''

import Tkinter as tk

class Application(object):
    def __init__(self):
        root = tk.Tk()
        self.canvas = tk.Canvas(root)
        self.canvas.pack()
        self.canvas_text = self.canvas.create_text(10, 10, text='', anchor=tk.NW)

        self.entry = tk.Entry(root)
        self.entry.bind(""<Return>"", self.entry_cb)
        self.entry.pack()
        root.mainloop()

    def animate_text(self, text, delta):
        ''' Animate canvas text with a time delay given in milliseconds '''
        delay = 0
        for i in range(len(text) + 1):
            update_text = lambda s=text[:i]: self.canvas.itemconfigure(self.canvas_text, text=s)
            self.canvas.after(delay, update_text)
            delay += delta

    def entry_cb(self, event):
        self.animate_text(self.entry.get(), 250) 

app = Application()
"
XPath - Return ALL nodes with certain string pattern,"
import lxml.etree as ET

content = '''\
<root xmlns:xsi=""http://www.xxx.com/zzz/yyy"" xmlns:idx=""http://www.belscript.org/schema/index"">
<idx:index xsi:schemaLocation=""http://www.belscript.org/schema/index index.xsd"" idx:belframework_version=""2.0"">
   <idx:namespaces>
      <idx:namespace idx:resourceLocation=""http://resource.belframework.org/belframework/1.0/namespace/entrez-gene-ids-hmr.belns""/>
      <idx:namespace idx:resourceLocation=""http://resource.belframework.org/belframework/1.0/namespace/hgnc-approved-symbols.belns""/>
      <idx:namespace idx:resourceLocation=""http://resource.belframework.org/belframework/1.0/namespace/mgi-approved-symbols.belns""/>
      </idx:namespaces>
      </idx:index>
      </root>
      '''

root = ET.XML(content)
namespaces = {'xsi': 'http://www.xxx.com/zzz/yyy',
              'idx': 'http://www.belscript.org/schema/index'}
for item in root.xpath(
    '//*[local-name()=""namespace""]/@idx:resourceLocation', namespaces=namespaces):
    print(item)
"
How to add my own method to the built-in str type?,"class MyStr(str):
    def change(self): # 's' argument is replaced by 'self'
        result=""""
        for index,item in enumerate(self): # Use 'self' here instead of 's'
            if(index%2 !=0): result=result+item
        return(result)
"
Filtering defaultdict on the base of value,"data = {k:v for k,v in { k:list(filter(lambda i: i['check'] == '1' ,v)) for k, v in data.items()}.items() if len(v)}
"
How to make unique combinations of the following list of tuples,"print("" "".join(item))
"
How to glue elements into a list when using groupby function?,"In [15]:

df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar','foo', 'bar', 'foo', 'foo'],
                   'C' : np.asarray([1,2,3,4,5,6,7,8]),
                   'D' : np.asarray([2,3,4,5,6,7,8,9])})
In [16]:

print df.groupby('A').agg(lambda x: list(x))
                   C                D
A                                    
bar        [2, 4, 6]        [3, 5, 7]
foo  [1, 3, 5, 7, 8]  [2, 4, 6, 8, 9]
"
Colletting element from different DataFrames into arrays,"In [132]: pd.concat([a['x'], b['x']], axis=1)
Out[132]: 
   x  x
0  1  3
1  2  4

[2 rows x 2 columns]
"
Remove and insert lines in a text file,"with open(""file1"") as infile, open(""file2"",""w"") as outfile:
    for i,line in enumerate(infile):
        if i==2:
            # 3rd line
            outfile.write(""new line1\n"")
            outfile.write(""new line2\n"")
            outfile.write(""new line3\n"")
        elif i==3:
            # 4th line
            pass
        else:
            outfile.write(line)
"
Update value in Dictionary with multiple values per key,"ccDict={""111111111111111111"":(""N/A"", ""N/A"", ""N/A"", ""N/A"", ""N/A"")}
new_values = list(ccDict['111111111111111111'])
new_values[0] = ""new value""
ccDict['111111111111111111'] = tuple(new_values)
ccDict['111111111111111111']
('new value', 'N/A', 'N/A', 'N/A', 'N/A')
"
Square detection with aberrations in edges and 1 missing corner,"com = Commonest[Join[mc[[1]], mc[[-1]], Transpose[mc][[1]], Transpose[mc][[-1]]]]
"
"Extract substring from a line in python, if another keyword is found","import re
p = re.compile(r'(?<=\bYEAR=)[^;]+')
test_str = ""1  0001    1   UG  science,ee;YEAR=onefour;standard->2;district->9""
robj = re.search(p, test_str)
if robj:
    print(robj.group(0))
"
Value never below zero,"class PositiveIntegerAttribute(object):

    def __init__(self, name):
        self.name = name

    def __get__(self, obj, typ=None):
        return getattr(obj, self.name)

    def __set__(self, obj, val):
        if not isinstance(val, (int, long)):
            raise TypeError()
        if val < 0:
            raise NegativeValueError()
        setattr(obj, self.name, val)

    def __delete__(self, obj):
        delattr(obj, self.name)
"
Overlapping regex,">>> import re
>>> i = 'aa323aa232.02.03.23.99aa87..0.111111.mm'
>>> re.findall(r'(?=(\d+(?:\.\d+)?))\d+(?:\.\d+(?!\.?\d))?', i)
"
Python Numpy intersect1d on 1D array with 2D array,"a1[np.in1d(a1[:,0],a2)]
"
Convert list of datestrings to datetime very slow with Python strptime,"In [54]: %timeit a = np.genfromtxt('dates.csv', delimiter=',',
                                   converters={0:with_regex})
1 loops, best of 3: 430 ms per loop

In [55]: %timeit a = np.genfromtxt('dates.csv', delimiter=',',
                                   converters={0:with_indexing})
1 loops, best of 3: 391 ms per loop
"
How do I convert Python's itertools.product library from a list comprehension to normal for loops?,"def filtered_product(args, filter_fn):
    pools = map(tuple, args)
    result = [[]]
    for pool in pools:
        new_result = []
        for x in result:
            for y in pool:
                new_val = x+[y]
                if filter_fn(new_val):
                    new_result.append(x+[y])
        result = new_result
        print 'intermediate result:', result
    for prod in result:
        yield tuple(prod)
"
Python and Numeric/numpy Array Slicing Behavior,">>> a = array([[1,2,3],[4,5,6]])
>>> a[:]             # (which actually becomes a[0:2^63-1])
zeros((0, 3), 'l')   # incorrect b/c of overflow, should be full array
>>> a[0:0]
zeros((0, 3), 'l')   # correct, b/c slicing range is null
>>> a[0:2**33+1]
[ [1,2,3]]           # incorrect b/c of overflow, should be full array
                     # although it returned some data b/c the
                     # lower 32 bits of (2^33+1) = 1
>>> a[0:-1]
[ [1,2,3]]           # correct, although I'm not sure why ""a[:]"" doesn't
                     # give this output as well, given that the lower 32
                     # bits of 2^63-1 equal -1
"
callable object as method of a class - Can I get `self` to be the class that owns the method?,"class A(object):
    def __get__(self, cls, instance):
        if instance is not None:
            def wrapper():
                print(""I was called with"", cls, ""and"", instance)
            return wrapper
        return self

class B(object):
    a = A()

B.a()
"
Python creating Covariance matrix from List,">>> d = {'Fac1': ['a', 'b', 'c' , 'b', 'c', 'c'], 
         'Fac2': ['a', 'a', 'a' , 'b', 'b', 'c'], 
         'VarCovar': [1.4, 0.7, 0.3, 1.8, 6.3, 2.4]}
>>> df = pd.DataFrame(d)
>>> table = df.pivot_table(rows='Fac1', cols='Fac2', values='VarCovar')
>>> table.combine_first(table.T)
Fac2    a    b    c
Fac1               
a     1.4  0.7  0.3
b     0.7  1.8  6.3
c     0.3  6.3  2.4
"
How to pass a function as function parameter in Python,"def f(x):
    return 2*x*(1-x)

iterate(seed, num, f)
#                  ^
"
Dynamically import file,"# file configParser.py
userfile = 'users_file.txt'
values = {}
with open(userfile, 'r') as infile:
    for line in userfile:
        name, value = line.strip().split('=')
        values[name] = value
"
How to save JSON string into CSV or TXT in Python?,"for k, v in d.items(): 
    if v: # will be False for any empty list
        print(k.split(""."")[0])
        print([s.split(""."")[0] for s in v])
7
['8']
4
['3', '6']
"
Delete specific spaces from a string Python,">>> import re
>>> re.sub(r'(?<=[A-Za-z])\s+|\s+(?=[A-Za-z])', '', '_ y _ _ o _')
'_y_ _o_'
"
What is the regular expression for matching *text*?,"pattern = ""\*(\w+(?:\s+\w+)*)\*""
re.findall(pattern, ""this is *some text*."") // return 'some text'
re.findall(pattern, ""this is \*another \*text"") // return nothing
"
container where values expire in python,"import datetime
import collections
import threading

class ExpireCounter:
    """"""Tracks how many events were added in the preceding time period
    """"""

    def __init__(self, timeout=1):
        self.lock=threading.Lock()        
        self.timeout = timeout
        self.events = collections.deque()

    def add(self,item):
        """"""Add event time
        """"""
        with self.lock:
            self.events.append(item)
            threading.Timer(self.timeout,self.expire).start()

    def __len__(self):
        """"""Return number of active events
        """"""
        with self.lock:
            return len(self.events)

    def expire(self):
        """"""Remove any expired events
        """"""
        with self.lock:
            self.events.popleft()

    def __str__(self):
        with self.lock:
            return str(self.events)
"
how to generate random num with conditions,"import random as rn

x = range(3)*2 #generate a list where each number appears twice

rn.shuffle(x) #shuffle it
x.pop()       #remove one number
"
Does argparse support multiple exclusive arguments?,"def present(a):
    # test whether an argument is 'present' or not
    # simple case, just check whether it is the default None or not
    if a is not None:
        return True
    else:
        return False

# sample namespace from parser
args = argparse.Namespace(x1='one',x2=None,y1=None,y2=3)

# a nested list defining the argument groups that need to be tested
groups=[[args.x1,args.x2],[args.y1,args.y2]]

# a test that applies 'any' test to the inner group
# and returns the number of groups that are 'present'
[any(present(a) for a in g) for g in groups].count(True)
"
Algorithm to find ALL factorizations of an integer,"import itertools


def mult(fs):
    res = 1
    for f in fs:
        res *= f
    return res


def _generate_all_factorizations(factors):
    if len(factors) <= 1:
        yield factors
        return

    for factors_in_mult in xrange(1, len(factors)+1):
        for which_is in itertools.combinations(range(len(factors)), factors_in_mult):
            this_mult = mult(factors[i] for i in which_is)
            rest = [factors[i] for i in xrange(len(factors)) if i not in which_is]

            for remaining in _generate_all_factorizations(rest):
                yield [this_mult] + remaining
"
Why does the Tkinter canvas request 4 extra pixels for the width and height?,"import pprint
pprint.pprint(c.configure())
{'background': ('background',
                'background',
                'Background',
                'SystemButtonFace',
                'SystemButtonFace'),
 'bd': ('bd', 'borderWidth'),
 'bg': ('bg', 'background'),
 'borderwidth': ('borderwidth', 'borderWidth', 'BorderWidth', '0', '0'),
 'closeenough': ('closeenough', 'closeEnough', 'CloseEnough', '1', '1.0'),
 'confine': ('confine', 'confine', 'Confine', '1', '1'),
 'cursor': ('cursor', 'cursor', 'Cursor', '', ''),
 'height': ('height', 'height', 'Height', '7c', '100'),
 'highlightbackground': ('highlightbackground',
                         'highlightBackground',
                         'HighlightBackground',
                         'SystemButtonFace',
                         'SystemButtonFace'),
 'highlightcolor': ('highlightcolor',
                    'highlightColor',
                    'HighlightColor',
                    'SystemWindowFrame',
                    'SystemWindowFrame'),
 'highlightthickness': ('highlightthickness',
                        'highlightThickness',
                        'HighlightThickness',
                        '2',
                        '0'),
 'insertbackground': ('insertbackground',
                      'insertBackground',
                      'Foreground',
                      'SystemButtonText',
                      'SystemButtonText'),
 'insertborderwidth': ('insertborderwidth',
                       'insertBorderWidth',
                       'BorderWidth',
                       '0',
                       '0'),
 'insertofftime': ('insertofftime', 'insertOffTime', 'OffTime', '300', '300'),
 'insertontime': ('insertontime', 'insertOnTime', 'OnTime', '600', '600'),
 'insertwidth': ('insertwidth', 'insertWidth', 'InsertWidth', '2', '2'),
 'offset': ('offset', 'offset', 'Offset', '0,0', '0,0'),
 'relief': ('relief', 'relief', 'Relief', 'flat', 'flat'),
 'scrollregion': ('scrollregion', 'scrollRegion', 'ScrollRegion', '', ''),
 'selectbackground': ('selectbackground',
                      'selectBackground',
                      'Foreground',
                      'SystemHighlight',
                      'SystemHighlight'),
 'selectborderwidth': ('selectborderwidth',
                       'selectBorderWidth',
                       'BorderWidth',
                       '1',
                       '1'),
 'selectforeground': ('selectforeground',
                      'selectForeground',
                      'Background',
                      'SystemHighlightText',
                      'SystemHighlightText'),
 'state': ('state', 'state', 'State', 'normal', 'normal'),
 'takefocus': ('takefocus', 'takeFocus', 'TakeFocus', '', ''),
 'width': ('width', 'width', 'Width', '10c', '100'),
 'xscrollcommand': ('xscrollcommand',
                    'xScrollCommand',
                    'ScrollCommand',
                    '',
                    ''),
 'xscrollincrement': ('xscrollincrement',
                      'xScrollIncrement',
                      'ScrollIncrement',
                      '0',
                      '0'),
 'yscrollcommand': ('yscrollcommand',
                    'yScrollCommand',
                    'ScrollCommand',
                    '',
                    ''),
 'yscrollincrement': ('yscrollincrement',
                      'yScrollIncrement',
                      'ScrollIncrement',
                      '0',
                      '0')}
"
Adding elements to a list in Python 3.3 by extracting consecutive elements from two other lists,"list4 = []
for t in zip(list1, list2):
    list4.extend(t)
"
Using map() to get number of times list elements exist in a string in Python,"def currently_accepted_solution_augmented(targets, paragraph):
    def tester(s): 
        def f(x):
            return len(re.findall(r""\b"" + x + r""\b"", s))
        return f
    return map(tester(paragraph), targets)
"
"Python: Sorted representation of dict of lists, sorted by number of elements in list, after removing duplicates","print sorted(example_dict,key=lambda x: len(set(example_dict[x])))
"
Python nested loops issues,"results = []
counter = 0

for iteration in xrange(10 ** 6):  # 1 million times
    counter += 1
    roll = random.randint(1, 6), random.randint(1, 6), random.randint(1, 6)
    if roll == (6, 6, 6):
        results.append(counter)
        counter = 0
"
"Python -- ""Batch Processing"" of multiple existing scripts","import os
import sys
import some_other_stuff
SOMETHING_IMPORTANT = 'a value'

def do_frobber(a_file):
   ...

def main(path_to_files):
    all_files = os.listdir(path_to_files)
    for file in all_files:
        do_frobber(os.path.join(path_to_files, file)

if __name__ == '__main__':
    main(sys.argv[1])
"
Adding entered items separated by spaces into a dictionary. Python,"d = {}
for i in range(5):
    user = input('Enter city followed by temperature') 
    # use raw_input(prompt) if using Python 2.x
    data = user.split()
    d[data[0]] = int(data[1])
"
lxml modify tags prevent,"print etree.tostring(root.find('iframe'), encoding='utf-8', method=""html"")
"
Recursively create a new line break after nth character for a given block of text,"def insertNewlines(text, lineLength):

    if len(text) <= lineLength:
        return text
    else:
        return text[:lineLength] + '\n' + insertNewlines(text[lineLength:], lineLength)

text = ""Given text and a desired line length, wrap the text as a typewriter would. Insert a newline character  '\\n' after each word that reaches or exceeds the desired line length.""
print insertNewlines(text, 15)
"
Python Trueskill - Using Dictionaries,"from collections import defaultdict
from itertools import groupby
from pprint import pprint
from trueskill import Rating, rate

results = [(1, 'alice', 2),
           (1, 'bob', 1),
           (1, 'eve', 3),
           (2, 'alice', 1),
           (2, 'eve', 1),
           (3, 'bob', 1),
           (3, 'carol', 2),
           (3, 'alice', 3),
           (3, 'ted', 4),
           (3, 'eve', 5)]
ratings = defaultdict(Rating)

for game_id, result in groupby(results, lambda x: x[0]):
    result = list(result)
    rating_groups = [(ratings[name],) for game_id, name, rank in result]
    ranks = [rank for game_id, name, rank in result]
    transformed_groups = rate(rating_groups, ranks=ranks)
    for x, (game_id, name, rank) in enumerate(result):
        ratings[name], = transformed_groups[x]

pprint(dict(ratings))
"
Calculate bytes of the unicode character in python,"with open(filename, encoding=character_encoding) as file:
    unicode_character_count = sum(len(line) for line in file)
"
How to iterate through three lists in python,"import itertools

list1 = [1,2,3]
list2 = [1,2,3]

for idx, (x, y) in enumerate(itertools.product(list1, list2), 1):
    print x, y, idx
"
Python Beginner. Is this Python code as efficient as it could be?,"print ""x: "" + str(x)
"
Python - Loop through list within regex,"import os
import re
def locate(pattern = r'\d+[_]', root=os.curdir):
    for path, dirs, files in os.walk(os.path.abspath(root)):
        for filename in re.findall(pattern, ' '.join(files)):
            yield os.path.join(path, filename)
"
Python: urlretrieve PDF downloading,"http://www.mathworks.com/moler/random.pdf/

>>> import requests
>>> c = requests.get(""http://www.mathworks.com/moler/random.pdf/"")
>>> len(c.content)
14390
"
Getting proof from z3py,">>> set_param(proof=True)
>>> ctx = Context()
>>> s = Solver(ctx=ctx)
>>> x = Int('x', ctx=ctx)
>>> s.add(x > 0)
>>> s.add(x == 0)
>>> s.check()
unsat
>>> s.proof()
mp(mp(asserted(x > 0),
      rewrite((x > 0) == Not(x <= 0)),
      Not(x <= 0)),
   trans(monotonicity(trans(monotonicity(asserted(x == 0),
                                        (x <= 0) == (0 <= 0)),
                            rewrite((0 <= 0) == True),
                            (x <= 0) == True),
                      Not(x <= 0) == Not(True)),
         rewrite(Not(True) == False),
         Not(x <= 0) == False),
   False)
"
destroy() not destroying on repeats,"'''
Created on Apr 23, 2016

@author: billal begueradj
'''
from tkinter import *
class BlackjackTable:
    def __init__(self,numPlayers):
        self.numPlayers=numPlayers
        self.tableWindow=Tk()
        self.bettedE=False
        self.bettedS=False
        self.bettedW=False
        self.suitWindow()
    def suitWindow(self):
        self.tableWindow.title(""Blackjack Table"")
        self.tableWindow.config(bg=""dark green"")

        self.EHandEntry=Entry(self.tableWindow,fg=""white"",bg=""dark green"",width=10)
        self.EHandEntry.grid(row=5,column=9)

        self.EHandSubmit=Button(self.tableWindow,text=""Bet"",fg=""white"",padx=15,pady=5,command=self.betE,bg=""dark green"",activebackground=""dark green"",activeforeground=""white"")
        self.EHandSubmit.grid(row=5,column=10)


        self.SHandEntry=Entry(self.tableWindow,fg=""white"",bg=""dark green"",width=10)
        self.SHandEntry.grid(row=8,column=6)

        self.SHandSubmit=Button(self.tableWindow,text=""Bet"",fg=""white"",padx=15,pady=5,command=self.betST,bg=""dark green"",activebackground=""dark green"",activeforeground=""white"")
        self.SHandSubmit.grid(row=8,column=7)
        self.WHandEntry=Entry(self.tableWindow,fg=""white"",bg=""dark green"",width=10)
        self.WHandEntry.grid(row=5,column=3)

        self.WHandSubmit=Button(self.tableWindow,text=""Bet"",fg=""white"",padx=15,pady=5,command=self.betW,bg=""dark green"",activebackground=""dark green"",activeforeground=""white"")
        self.WHandSubmit.grid(row=5,column=4)
    def betE(self):
        print(""betE"")
        self.bettedE=True
        self.EHandSubmit.destroy()
        self.EHandEntry.destroy()

    def betST(self):
        print(""betST"")
        self.bettedS=True
        self.SHandSubmit.destroy()
        self.SHandEntry.destroy()

    def betW(self):
        print(""betW"")
        self.bettedW=True
        self.WHandSubmit.destroy()
        self.WHandEntry.destroy()

gui=BlackjackTable(3)
mainloop()
"
Filtering a list based on another list,"filtered = [d for d in data if not any(dropped in d[1].split() for dropped in drop)]
"
"Convert list into sub-list while maintaining ""key""","xl = list(x) # you gave us a tuple          
for i,y in enumerate(xl):
    xx = xl[i]
    xx = [[xx[0],y] for y in xx[1].split('. ')]
    xl[i:i+1] = xx
"
Python convert string of characters into proper list structure,">>> my_str = b'[[""innovation"",3],[""marketing"",3],[""credentials"",2],[""trends"",2]]'
>>> 
>>> from ast import literal_eval
>>> literal_eval(my_str)
[['innovation', 3], ['marketing', 3], ['credentials', 2], ['trends', 2]]
>>> 
"
How to convert defaultdict of defaultdicts [of defaultdicts] to dict of dicts [of dicts]?,"def default_to_regular(d):
    if isinstance(d, defaultdict):
        d = {k: default_to_regular(v) for k, v in d.iteritems()}
    return d
"
Replace 50% of characters (randomly) in a String,"import random
x = ''.join(i if random.randint(0, 1) else 'b' for i in x)
"
Ordered Dictionary is not sorting,"sorted_dict = collections.OrderedDict(sorted(ordered_dict.items()))
"
Creating a Multi-Index / Hierarchical DataFrame from Dictionaries,"multilevel_indices = {'foo': ['A', 'B', 'C'], 'bar': ['X', 'Y'], 'baz': []}    
column_data_1      = {'foo': [2, 4, 5],       'bar': [2, 3], 'baz': []}

pd.concat([pd.Series(column_data_1[k], index=multilevel_indices[k]) for k in multilevel_indices],
          keys=multilevel_indices.keys())
"
cPickle - Ignore stuff it can't serialize instead of raising an exception,"import cPickle
import copy_reg
from types import FunctionType

# data to pickle: note that o['x'] is a lambda and they
# aren't natively picklable (at this time)
o = {'x': lambda x: x, 'y': 1}

# shows that o is not natively picklable (because of
# o['x'])
try:
    cPickle.dumps(o)
except TypeError:
    print ""not natively picklable""
else:
    print ""was pickled natively""

# create a mechanisms to turn unpickable functions int
# stub objects (the string ""STUB"" in this case)
def stub_pickler(obj):
    return stub_unpickler, ()
def stub_unpickler():
    return ""STUB""
copy_reg.pickle(
    FunctionType,
    stub_pickler, stub_unpickler)

# shows that o is now picklable but o['x'] is restored
# to the stub object instead of its original lambda
print cPickle.loads(cPickle.dumps(o))
"
python's re: return True if regex contains in the string,"bool(re.search('ba[rzd]', 'foobarrrr'))"
Getting number of messages in a RabbitMQ queue,"from pyrabbit.api import Client
cl = Client('localhost:55672', 'guest', 'guest')
cl.get_messages('example_vhost', 'example_queue')
"
Python: How to transform a 'flat' sequence into a sequence of tuples?,">>> lst = [1, 2, 3, 4, 5, 6]
>>> list(itertools.islice(lst, 0, None, 2))
[1, 3, 5]
>>> list(itertools.islice(lst, 0, None, 2))
[2, 4, 6]
"
Implementing seq2seq with sampled decoder outputs,"def batch_gumbel_max_sample(a, max_gumbel_noise = 1.0):
    matrix_U = -1.0*tf.log(-1.0*tf.log(tf.random_uniform(tf.shape(a),
                            minval = 0.0, maxval = max_gumbel_noise)))
    return tf.argmax(tf.sub(a, matrix_U), dimension = 1)
"
"Handling arguments in order for preprocessing in Python, when order matters","class DumbArgWrapper(object):
    def __init__(self, *args):
        self.args = args

class Resize(DumbArgWrapper): pass
class Cutoff(DumbArgWrapper): pass
class Blur(DumbArgWrapper): pass

class ImageProcessor(object):
    def preprocess(self, *args):
        for arg in args:
            if isinstance(arg, Resize):
                do_resize(*arg.args)
            # etc.
"
Find borders on a list in python,"tests = [
    [None, 1, 2, None, 3, 4, 5, None],
    [1, 2, None, 3, 4, 5, None],
    [None,1, 2, None, 3, 4, 5],
    [1, 2, None, 3, 4, 5],
    [1, 2, None],
    [None, 1, 2],
]

def find_borders(L):
    it = iter(L)

    start_none = False

    for item in it:
        if item is None:
            start_none = True
            continue
        if start_none:
            start = item
        else:
            start = None

        end = item

        end_none = False

        for item in it:
            if item is None:
                end_none = True
                break
            end = item
        if not end_none:
            end = None
        yield (start, end)

        start_none = True

for t in tests:
    print
    print t
    for x in find_borders(t):
        print x
"
Eliminate numbers in string in Python,">>> str=""aaaa22222111111kkkkk""
>>> re.sub(r'[0-9]',"""",str)
'aaaakkkkk'
"
python datetime: Round/trim number of digits in microseconds,"def format_time():
    t = datetime.datetime.now()
    s = t.strftime('%Y-%m-%d %H:%M:%S.%f')
    return s[:-3]
"
How to detect ASCII characters on a string in python,"#coding: utf-8
import string
text = u""Montréal, über, 12.89, Mère, Françoise, noël, 889""
allowed_letters = string.printable
name_has_accented = [letter for letter in text if not letter in allowed_letters]
if name_has_accented:
    text = """".join(convert(text))
print(text)
"
Python: Find dict in array based on value of key,"list(cdict for cdict in my_list if cdict[""task""] == key)
"
Dynamically get class name at class level variable in python,"class MyClass:

    def __init__(self):
        self.display_name = self.__class__.__name__
"
lxml event parsing big file to extract only some data,"from lxml import etree

attributes = (""name"", ""address"")
context = etree.iterparse(""test.xml"", tag=""document"")

for event, element in context:
    for child in element:
        if child.attrib.get(""name"") in attributes:
            print next(c for c in child).text
    element.clear() # clear the subtree from the memory
"
How to get the value in a nested list using itertools.zip_longest,"for a, b in itertools.zip_longest((b for a in List1 for b in a),List2):
    if a == b:
        # do whatever
"
counting number with 3 csvs python,"starting_number = 5

def modify_starting_num(starting_num):
    starting_num = starting_num * 2
    return starting_num

starting_number = modify_starting_num(starting_number) # Calling the function
print (starting_number)
"
Making default output file dependent on input file,"import os

if output_fname is None:
    basename, ext = os.path.splitext(input_fname)
    output_fname = basename + "".faa""
"
Collecting a value from Json,"import json

json_result = json.loads(json_string)
id = json_result['data'][0]['id']
"
How to label certain x values,"ax = plt.gca()
ax.set_xticks([1, 2.5, 4])
ax.set_xticklabels([""a"", ""b"", ""c""])
"
How to: From one string to another in a long list of strings,"start = ""AAT""
end = [""ATG"", ""TTT"", ""ATC""]
regex = ""%s.*?(?:%s)"" % (start, '|'.join(end))
"
Iteratively-defined Numpy Array Creation,"import numpy as np

# just do something random
X = np.random.random(1000000)

def my_filter(X):
    Y = np.empty(len(X))
    Y[0] = X[0]
    for i in range(1, len(X)):
        Y[i] = max(.99*Y[i-1], X[i])
    return Y
"
Spark: Using iterator lambda function in RDD map(),">>> list(enumerate(lsts, 1))
[(1, [1, 1, 1, 1, 1, 1]),
 (2, [1, 1, 1, 1, 1, 1]),
 (3, [1, 1, 1, 1, 1, 1]),
 (4, [1, 1, 1, 1, 1, 1]),
 (5, [1, 1, 1, 1, 1, 1]),
 (6, [1, 1, 1, 1, 1, 1]),
 (7, [1, 1, 1, 1, 1, 2]),
 (8, [1, 1, 1, 2, 1, 2])]
"
Sorting a NumPy array,"import numpy as np

arr1 = np.array([['! ! !' '! ! ! !'],
 ['! ! !' '! ! ! ""'],
 ['! ! !' '! ! ! .'],
 ['!' '!'],
 ['a' 'ad'],   # Stuff you don't want to get back
 ['}' 'was postponed'],
 ['}' 'was'],
 ['}' '{of']])

arr2 = np.array([['! ! !' '! ! ! !'],
 ['! ! !' '! ! ! ""'],
 ['! ! !' '! ! ! .'],
 ['!' '!'],
 ['b' 'ab'],   # Stuff you don't want to get back
 ['}' 'was postponed'],
 ['}' 'was'],
 ['}' '{of']])

inarr = np.in1d(arr1, arr2)

arr3 = np.empty( shape=(0, 0) )

for i in np.arange(len(arr1)):
  if (inarr[i]):
    arr3 = np.append(arr3,arr1[i])

for i in np.arange(len(arr3)):
  print(arr3[i])
"
How to create Python function that sums values from 7 daily files into one weekly file?,"from collections import defaultdict

files = ['sunday.txt', 'monday.txt', 'tuesday.txt', 'wednesday.txt', 
         'thursday.txt', 'friday.txt', 'saturday.txt'
]

totals = defaultdict(float)

for fn in files:
    with open(fn) as f:
        for line in f.readlines():
            lat, long, prec = line.split()  # strings
            totals[(lat, long)] += float(prec)

# See what we have:
import pprint
pprint.pprint(totals)
"
How do I size QLayout based on proportionality?,"
from PySide import QtGui
import sys

class MainWindow(QtGui.QMainWindow):
  def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.input_widget = InputWidget(self)

        self.layout = QtGui.QVBoxLayout()
        self.layout.addWidget(self.input_widget)
        self.setLayout(self.layout)
        self.setCentralWidget(self.input_widget)

class InputWidget(QtGui.QWidget):
    def __init__(self, parent):
        super(InputWidget, self).__init__(parent)

        self.grid_layout = QtGui.QGridLayout()
        self.labels = [""amp"", ""more text"", ""blabla""]

        self.text_edits = []
        self.qlabels = []

        for row, label in enumerate(self.labels):
            label = QtGui.QLabel(label)
            self.qlabels.append(label)
            self.grid_layout.addWidget(label, row, 0)
            text_edit = QtGui.QTextEdit()
            self.text_edits.append(text_edit)
            self.grid_layout.addWidget(text_edit, row, 1)

        self.grid_layout.setColumnStretch(0, 0)
        self.grid_layout.setColumnStretch(1, 2)

        self.setLayout(self.grid_layout)

if __name__ == ""__main__"":
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    app.exec_() 
"
Ordering a nested dictionary by the frequency of the nested value,"from collections import Counter

d = {
    'KEY1': {
        'key2_1': 5,
        'key2_2': 1,
        'key2_3': 3
    },
    'KEY2': {
        'key2_1': 2,
        'key2_2': 3,
        'key2_3': 4
    }
}

c = Counter()
for k, v in d.iteritems():
    c.update({(k, k1): v1 for k1, v1 in v.iteritems()})

print c.most_common(3)
"
Python: Creating a List of the First n Fibonacci Numbers,"def fib(n):
    if n == 0:
        return [0]
    elif n == 1:
        return [0, 1]
    else:
        lst = fib(n-1)
        lst.append(lst[-1] + lst[-2])
        return lst
"
Special character encoding is lost when string is passed to function,"string = u""Magic Cookie® Extra""
print repr(string)
print repr('a ' + string + ' b')
"
How to use a while loop to start at the right end of the list,"class Demo:
    def __init__(self):
        self.numbers = list(range(1, 10))

    def increment(self):
        for i, num in enumerate(reversed(self.numbers)):
            if num:
                self.numbers[-i - 1] = 0 if num == 9 else num + 1
                break

demo = Demo()
for _ in range(5):
    print(demo.numbers)
    demo.increment()
"
all subsets of a set append Nonetype Error,"main_list.append(sublist)
    return subsets(setys, count + 1, main_list)
"
Plot timeseries of histograms in Python,"In [30]: pcolor(df1.T)
Out[30]: <matplotlib.collections.PolyCollection at 0xbb60e2c>
"
"How to remove commas, brackets in python using regular expression?","{""data"": [{""name"": ""abc""},{""name"": ""xyz""}]}
"
How to represent inf or -inf in Cython with numpy?,">>> float('inf')
inf
>>> np.inf == float('inf')
True
"
How do I use Tkinter and allow my application to keep the focus?,"import subprocess

def write_to_clipboard(string):
    p = subprocess.Popen(['clip'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    p.communicate(input=string)
"
String list from Arduino to Python array,"In [1]: x = """"""4
   ...: 1
   ...: 5
   ...: 2
   ...: 15
   ...: 1""""""

In [2]: x
Out[2]: '4\n1\n5\n2\n15\n1'

In [3]: x.split()
Out[3]: ['4', '1', '5', '2', '15', '1']

In [4]: import numpy as np

In [5]: np.array(x.split(), dtype=float)
Out[5]: array([  4.,   1.,   5.,   2.,  15.,   1.])
"
Find the row and column with the min value in python?,">>> e = [[2, 1, 7, 7], [1, 2, 7, 7], [2, 5, 6, 7], [5, 6, 8, 9]]
>>> result = min((min((v, c) for c, v in enumerate(row)), r) for r, row in enumerate(e))
>>> result[0][1], result[1]
(0, 1)
"
How do I calculate the date six months from the current date,six_months = (date.today() + relativedelta(months=(+ 6)))
Reading binary and text from same file in Python," def get_next_character(f):
     # note: assumes valid utf-8
     c = f.read(1)
     while c:
         while True:
             try:
                 yield c.decode('utf-8')
             except UnicodeDecodeError:
                 # we've encountered a multibyte character
                 # read another byte and try again
                 c += f.read(1)
             else:
                 # c was a valid char, and was yielded, continue
                 c = f.read(1)
                 break

# Usage:
with open(""input.txt"",""rb"") as f:
    my_unicode_str = """"
    for c in get_next_character(f):
        my_unicode_str += c
"
How to access a button's parent in Tkinter without writing class?,"import tkinter
from tkinter import ttk

class MyButton(ttk.Button):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.configure(command=self.callback)

    def callback(self):
        self.master.destroy()

tk = tkinter.Tk()
b = MyButton(tk, text=""close window!"")
b.pack()  # or whatever geometry manager you're using

# we're done!
"
How does the key argument in python's sorted function work?,"list_of_strings.sort(key=lambda s: s[::-1])
"
convert selected datetime to date in sqlalchemy,"distinct_dates = list(session.query(cast(Test_Table.test_time, DATE)).distinct())
"
Finding elements of an array lying between two values,"import unittest

from bisect import bisect_left, bisect_right


def find_range(array, a, b):
    start = bisect_right(array,a)
    end = bisect_left(array,b)
    return (start, end)


class TestCase(unittest.TestCase):
    Y = [1, 3, 5, 10, 15]
    givenY = [3, 4, 5, 6, 7, 8, 9, 10, 11]

    def test_empty_array(self):
        self.assertEqual( (0, 0), find_range([], 1, 2) )

    def test_all_values_larger(self):
        self.assertEqual( (0, 0), find_range([4,5,6], 1, 3) )

    def test_all_values_larger_or_equal(self):
        self.assertEqual( (0, 0), find_range(self.givenY, self.Y[0], self.Y[1]) )

    def test_both_endpoints_inside_list(self):
        self.assertEqual( (1, 2), find_range(self.givenY, self.Y[1], self.Y[2]))
        self.assertEqual( [4], self.givenY[1:2])

    def test_2(self):
        self.assertEqual( (3, 7), find_range(self.givenY, self.Y[2], self.Y[3]) )
        self.assertEqual( [6, 7, 8, 9], self.givenY[3:7])

    def test_no_values_larger_or_equal_to_upper_limit(self):
        self.assertEqual( (8, 9), find_range(self.givenY, self.Y[3], self.Y[4]) )
        self.assertEqual( [11], self.givenY[8:9])


if __name__==""__main__"":
    unittest.main()
"
find the closest number in array that is bigger then the number,"print min(filter(lambda x: x > num,li))
23
"
Casting a custom class to a dict in python,"class A(object):
    def __init__(self, a, b):
        self.a = a
        self.b = b
    def __iter__(self):
        return vars(self).iteritems()
"
How to sort list of string by n-grams in python,">>> ngrams = [""sedan"", ""sail sedan"", ""sail"", ""price of"", ""price"", ""of chevrolet"", ""of"", ""chevrolet sail"", ""chevrolet""]
>>> sorted(ngrams, key=lambda s: len(s.split()), reverse=True)
['sail sedan', 'price of', 'of chevrolet', 'chevrolet sail', 'sedan', 'sail', 'price', 'of', 'chevrolet']
"
Find median of values based on multiple identifiers and add to row,"df = pd.DataFrame(data={'rank': np.random.randint(low=1, high=100, size=500),
                        'SKU': np.random.choice(list('ABCDE'), replace=True, size=500),
                        'date': np.array([d for d in repeat(pd.date_range(start=date(2016,1,1), freq='D', periods=20), 25)]).flatten()})

df['median'] = df.groupby(['date','SKU'])['rank'].transform('median')
"
Draw box around tick label in Matplotlib,"import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax.axis([0, 2000, 0, 2e-9])

ax.annotate('_____', xy=(2000, 0), xytext=(0, -ax.xaxis.labelpad),
            xycoords=('data', 'axes fraction'), textcoords='offset points',
            ha='center', va='top',
            bbox=dict(boxstyle='round', fc='none', ec='red'))

plt.show()
"
stripping the zeros in csv with python,"with open('infilename', 'r') as infile, open('outfilename', 'w') as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile)
    for row in reader:
        row[5] = re.sub(r'^0{3}', '', row[5])
        writer.writerow(row)
"
Calculating the Nth Sequence of Length M in Python,">>> from itertools import chain, product, count
>>> s = set((1, 2, 3))
>>> test_seq = chain.from_iterable(product(s, repeat=n) for n in count(1))
>>> zip(range(10), test_seq)
[(0, (1,)), (1, (2,)), (2, (3,)), (3, (1, 1)), (4, (1, 2)), (5, (1, 3)), 
 (6, (2, 1)), (7, (2, 2)), (8, (2, 3)), (9, (3, 1))]
"
Appending first value of a list into the first value of another list; python,"map(list.extend, T, B)
"
"Elegant way test in python if string contains nothing except 0-9,e,+,-,spaces,tabs","import re
if re.match(r""[0-9e \t+.-]*$"", subject):
     # Match!
"
Get related dictionaries from lists,"res = [A, B for A, B in zip(ListA, ListB) if ...]
"
Assign variable to pyserial port,"import sys
import glob
import serial


def serial_ports():

    if sys.platform.startswith('win'):
        ports = ['COM%s' % (i + 1) for i in range(256)]
    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
        # this excludes your current terminal ""/dev/tty""
        ports = glob.glob('/dev/tty[A-Za-z]*')
    elif sys.platform.startswith('darwin'):
        ports = glob.glob('/dev/tty.*')
    else:
        raise EnvironmentError('Unsupported platform')

    result = []
    for port in ports:
        try:
            s = serial.Serial(port)
            s.close()
            result.append(port)
        except (OSError, serial.SerialException):
            pass
    return result


if __name__ == '__main__':

    VARIABLE = serial_ports()[0] #Assign first port as COM port    
    ser = serial.Serial(
    port=VARIABLE,
    baudrate=115200,
    parity=serial.PARITY_NONE,
    stopbits=serial.STOPBITS_ONE,
    bytesize=serial.EIGHTBITS
    )

    print ""Is port"", VARIABLE , "" open ?"", ser.isOpen()
"
I have a list of strings that end with different extensions how would I tell Python to not print the .zip strings,"list_without_zip = [ x for x in list_with_zip if not x.endswith('.zip') ]
"
How to dynamically create parameterized test from the file (json or yaml) in python,"import json


def create_tests(func_name, file):
    def decorator(cls):
        func = getattr(cls, func_name)
        # Set new funcs to class:
        with open(file, 'r') as fh:
            data = json.loads(fh.read())['data']
            for i, params in enumerate(data):
                def tmp(params=params):  # need for http://stackoverflow.com/q/7546285/1113207
                    def wrapper(self, *args, **kwargs):
                        return func(self, **params)      
                    return wrapper          
                setattr(cls, func_name + '_' + str(i), tmp())
        # Remove func from class:
        setattr(cls, func_name, None)
        return cls
    return decorator
"
"Python: if element1 from list1 is equal to element2 from list2, change element1","Demo on repl.it
Code:
def codes(lst, cods):

    for ind, cod in enumerate(cods):
        cods[ind] = cod.lower()
    toAdd = []
    c = 0
    for ind, elem in enumerate(lst):
        if elem[:4].lower() not in cods:
            toAdd.append(elem + str(ind+c))
            lst.remove(elem)
            c += 1
    for ind, elem in enumerate(lst):
        tmp = []
        tmp.append(elem[:4])
        tmp.append(elem[10:])
        tmp.append(elem[8:10])
        tmp.append(elem[4:8])
        lst.insert(ind, tmp)
        lst.remove(elem)
    [lst.insert(int(elem[-1]), elem[:len(elem) - 1]) for elem in toAdd]

    return lst

first = ['Cara20130716', 'Tara20080601', 'PALA19961231', 'Melo19601023']
secnd = ['PALA', 'CARA', 'Tara']
print codes(first, secnd)
"
Applying function to every other column in pandas dataframe,"df[df.columns[::2]].apply(column_round(2))
"
Getting data from ctypes array into numpy,"a = numpy.frombuffer(buffer, float)
"
Python and multiple select with a ListCtrl,"def OnSelectMustHave(self,event):        
    info = event.GetData()
    InfoList.append(info)
    map(lambda x:self.list_ctrl.SetItemBackgroundColour(x,wx.LIGHT_GREY) ,set(InfoList))
    print info,InfoList
    return
"
How to search for the value of an element in a list of dict based on another value from the same element?,">>> data = [
...     {
...         'name': 'john',
...         'age': 10
...     },
...     {
...         'name': 'paul',
...         'age': 20
...     }
... ]
>>>
>>> next((d['age'] for d in data if d['name'].lower() == 'john'), None)
10
"
finding the last occurrence of an item in a list python,last = len(s) - s[::-1].index(x) - 1
Find amount of times that the chosen letters appear,"In [50]: mystring=""helloworld""

In [51]: mystring.count(""o"")
Out[51]: 2
"
Calculate required equipment on shifts in timespans,"Recreating your DataFrame
import pandas as pd
import arrow

data = {
    'Shift_ID' : [1,2,3,4],
    'Shift_Time_Start' : [arrow.get('2016-03-22 09:00:00').datetime, 
                   arrow.get('2016-03-22 09:20:00').datetime,
                   arrow.get('2016-03-22 09:40:00').datetime,
                   arrow.get('2016-03-22 10:00:00').datetime
                   ],

    'Shift_Time_End' : [arrow.get('2016-03-22 09:35:00').datetime, 
                   arrow.get('2016-03-22 10:20:00').datetime,
                   arrow.get('2016-03-22 10:14:00').datetime,
                   arrow.get('2016-03-22 10:31:00').datetime
                   ],   
        }


df = pd.DataFrame(data)
min_int = '5T'
df

Shift_ID    Shift_Time_End  Shift_Time_Start
0   1   2016-03-22 09:35:00+00:00   2016-03-22 09:00:00+00:00
1   2   2016-03-22 10:20:00+00:00   2016-03-22 09:20:00+00:00
2   3   2016-03-22 10:14:00+00:00   2016-03-22 09:40:00+00:00
3   4   2016-03-22 10:31:00+00:00   2016-03-22 10:00:00+00:00
"
"With pyparsing, how do you parse a quoted string that ends with a backslash","import re
strValue.setParseAction(lambda t: re.sub(r'\\(.)', r'\g<1>', t[0]))
"
How can i set a default value for a function parameter with a decorator?,"def foo(default_value):
    def wrapped(f):
        def bar(param1, param2=default_value):
            print ""inside bar""
            print ""param1=%s param%s""%(param1, param2)
        return bar
    return wrapped
"
Python - Avarage values of numpy multidimensionnal array every specific time,"test_mean = np.zeros_like(test)
for i in xrange(test.shape[0]-4):
    test_mean[i] = test[i:i+4].mean(axis=0)
"
Format string by binary list,"it = iter([0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0])
s = 'stackoverflow'

output = [''.join(('-' for i in b) if not a else b)
          for a,b in 
          itertools.groupby(s, key=lambda x: next(it))]
"
How to match beginning of string or character in Python,"float(re.findall('(?:^|_)' + par + '(\\d+\\.\\d*)', dir)[0])"
importing a JPEG image into an IPython (notebook) program," IMAGEDIR = '/path/to/images'
 load(os.path.join(IMAGEDIR, 'car.jpg'))
"
Read characters in a string only if I have found the part that I need? [Python],">>> response = 'Hello there. Your ID is: 6. Your name is: Number 6.'
>>> before, matched, after = response.partition('Your ID is: ')
>>> if after:
...     yourid, _, _ = after.partition('.')
...     print yourid
6
"
Python 3.5 Regular expressions cannot read text file,"In [2]: with open('encase_example.md') as cf:
   ...:     data = cf.read()
   ...:     

In [3]: data[:41]
Out[3]: '\n1)\nName\tfile.doc\nFile Category\tDocument\n'
"
Take multiple patterns from cli. argparse Python3,">>> args = parser.parse_args(['were', 'you'])
>>> args.pattern
['were', 'you']
>>> pattern = '|'.join(['(?:{})'.format(p) for p in args.pattern])
>>> pattern
'(?:were)|(?:you)'
"
Convering double backslash to single backslash in Python 3,">>> t
'\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u20ac\\u0020\\u00b0'
>>> type(t)
<class 'str'>
>>> enc_t = t.encode('utf_8')
>>> enc_t
b'\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u20ac\\u0020\\u00b0'
>>> type(enc_t)
<class 'bytes'>
>>> dec_t = enc_t.decode('unicode_escape')
>>> type(dec_t)
<class 'str'>
>>> dec_t
'Hello € °'
"
Python - Error Checking,"possibleusershipplaces = {""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9""}

for players_chosen_hit  in iter(lambda:input('Please tell me where the hit is: 1-9  (q to quit) '),""q""):
    if players_chosen_hit.isdigit() and players_chosen_hit in possibleusershipplaces:
        players_chosen_hit = int(players_chosen_hit)
"
Can I create this XML file with lxml?,"from lxml import etree
from lxml.builder import ElementMaker

E = ElementMaker()

format = E.format(
    E.type(""video""),
    E.channelsDepth(""16"", type=""uint""),
    # create more elements here        

    type=""format"",
    uid=""BEAUTY:MasterBeauty""
)
root = E.XML(
    format,

    type=""formats"",
    version=""4""
)

print(etree.tostring(root, xml_declaration=True, encoding='utf-8', pretty_print=True))
"
Fastest Way To Round Number Inside List of Strings Python,"import re

def replace_number(n):
    return str(int(round(int(n.group(0)), -2)))

data = ['F/O 1751 HOBART PL NW', '11TH ST NW 2301', '801 MT VERNON ST NW']

## I'm assuming you only want to munge numbers with 3 or more digits:
for datum in data:
    print re.sub(r""(\d{3,})"", replace_number, datum)
"
How could I make this singly linked list into a doubly linked list?,"class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def __repr__(self):
        return '<DoublyLinkedList {}>'.format(self.head)

    def add_head(self, data=None):
        if self.head is None:
            self.head = self.tail = Node(data)  # the very fist node
        else:
            new_head = Node(data=data, next=self.head)  # prev is None
            self.head.prev = self.head = new_head

    def add_tail(self, data=None):
        if self.tail is None:
            self.head = self.tail = Node(data)  # the very first node
        else:
            new_tail = Node(data=data, prev=self.tail)  # next is None
            self.tail.next = self.tail = new_tail

    # implements iteration from head to tail
    def __iter__(self):
        current = self.head
        while current is not None:
            yield current
            current= current.next

    # implements iteration from tail to head
    def __reversed__(self):
        current = self.tail
        while current  is not None:
            yield current
            current = current.prev
"
"How to process input in parallel with python, but without processes?","from threading import Thread
from collections import deque
import time


# Create a new class that inherits from Thread
class Worker(Thread):

    def __init__(self, inqueue, outqueue, func):
        '''
        A worker that calls func on objects in inqueue and
        pushes the result into outqueue

        runs until inqueue is empty
        '''

        self.inqueue = inqueue
        self.outqueue = outqueue
        self.func = func
        super().__init__()

    # override the run method, this is starte when
    # you call worker.start()
    def run(self):
        while self.inqueue:
            data = self.inqueue.popleft()
            print('start')
            result = self.func(data)
            self.outqueue.append(result)
            print('finished')


def test(x):
    time.sleep(x)
    return 2 * x


if __name__ == '__main__':
    data = 12 * [1, ]
    queue = deque(data)
    result = deque()

    # create 3 workers working on the same input
    workers = [Worker(queue, result, test) for _ in range(3)]

    # start the workers
    for worker in workers:
        worker.start()

    # wait till all workers are finished
    for worker in workers:
        worker.join()

    print(result)
"
Fool python's os.isatty from a bash script,"python myscript.py | cat
"
Setup dictionary lazily,"class MySettingsDict(dict):

    def __getitem__(self, item):
        function, arg = dict.__getitem__(self, item)
        return function(arg)


def expensive_to_compute(arg):
    return arg * 3
"
Convert from string containing hexadecimal characters to bytes in python 3,"inputstring.encode('latin1')
"
Remove elements from the array,"[x + y for x, y in zip(a_list, b_list)]
"
Keep function namespace alive for debugging in IPython,"import sys

def get_locals(func):
    def wrap(*args, **kw):
        sys.settrace(tracefunc)
        try:
            res = func(*args, **kw)
        finally:
            sys.settrace(None)
        return res

    def tracefunc(frame, event, arg):
        if event == ""return"":
            if frame.f_code is func.func_code:
                wrap.last_res = frame.f_locals
        return tracefunc    

    return wrap

@get_locals
def foo(x,y):
    z = x + y
    return z

def bar(x, y):
    z = x - y
    return z

a = 1
b = 2
c = foo(a, b)
d = bar(a, b)

print foo.last_res
"
Looking for a good way to split a string on all-capital words,">>> import re
>>> re.findall(r'\b[A-Z]{2,}\b', var)
['GE', 'APPLES']
"
Python toDataUrl Equivalent,"import base64
from PIL import Image
import StringIO

im = Image.new('L', (width, height))
output = StringIO.StringIO()
im.save(output, ""JPEG"", quality=89)

encoded_string = base64.b64encode(output.getvalue())
"
calculate the date six months from the current date,print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())
Can I format n numbers in Python,"def print_range(start, stop, ncolumns, width=6):
    for i in range(start, stop, ncolumns):
        print(' '.join(['{:{}d}'.format(j, width)
                        for j in range(i, min(i + ncolumns, stop))]))
"
Python: Import from text file to list and sort/average based on multiple columns,"def sort_mean(fle):
    avgs, high = [], []
    with open(fle) as f:
        for row in csv.reader(f, delimiter="" ""):
            name, scores = row[0], row[1:]
            srt = map(int, scores)
            avgs.append((name, sum(srt,0.0) / len(srt)))
            high.append((name, max(srt)))
    avgs.sort(key=itemgetter(1), reverse=1)
    high.sort(key=itemgetter(1), reverse=1)
    return avgs, high
"
Python SQLITE3 SELECT query with datetime calculated string not working,"this_year = DT.date(DT.date.today().year,1,1)
"
Order a list from largest to smallest using insertion sort,"mx = lambda x: reduce(lambda xs, ys: xs if xs > ys else ys, x)
"
"Converting an array to a float, how to reverse the process?","def decode_direct(codes):
    number_of_cols = max(ceil(math.log(v, 100)) for v in codes)
    return [[floor(code/(100**index)) % 100
             for index in range(number_of_cols-1, -1, -1)]
            for code in codes]
"
Populating values in module namespace,"for name in ['A', 'B', 'C']:
    class_ = type(name, (object, ), {})
    exec ""%s = class_"" % name

print A, B, C
"
"The comparison sets after grouping dataframe (Python 3, pandas)","In []: df_merged = pd.concat([df1, df2], axis=0)
       df_total = pd.concat([df1.groupby('key')['Sample'].count(),
                             df2.groupby('key')['Sample'].count(),
                             df_merged.groupby('key')['Sample'].unique().apply(len)],
                             axis=1, ignore_index=True)
       df_total.columns = ['Sample1_Count', 'Sample2_Count', 'Union_Count']
       df_total
Out[]:      Sample1_Count  Sample2_Count Union_Count
       key
       A    4              3             4
       B    1              1             1

In []: df_total['Rate_first'] = df_total['Sample1_Count']/df_total['Union_Count']
       df_total['Rate_second'] = df_total['Sample2_Count']/df_total['Union_Count']
       df_total
Out[]:      Sample1_Count  Sample2_Count Union_Count  Rate_first  Rate_second
       key
       A    4              3             4            1.0         0.75
       B    1              1             1            1.0         1.0
"
How to find and select a table in html code with xpath,"Complete solution
root = tree.getroot()
tables = root.xpath('.//h3[text()=""Impact""]/following-sibling::table')
for table in tables:
    print str
"
How can I remove the ANSI escape sequences from a string in python,"import re

ansi_escape = re.compile(r'\x1b[^m]*m')
ansi_escape.sub('', sometext)
"
Getting totals from list of lists and apply it to a dictionary,"from collections import Counter

res = Counter()
for k, v in data:
    res.update({k: v})

print(res)
"
Extracting text from a nested tags in XML using BeautifulSoup in python,"For your convenience, if a tag has only one child node,
and that child node is a string,the child node is made
available as tag.string, as well as tag.contents[0].
"
Python(3.x) - Opening File and Removing the Quotation Marks when reading file,"content = [""['Chest', ['bench', 'incline'], [2, 1], [10, 10], [10, 20, 10]], 'Chest', ['decline'], [1], [1], [10]""]

import ast
a_tuple = ast.literal_eval(content[0])
print(a_tuple)
"
__getattr__ throwing maximum recursion error when __setattr__ implemented,"def __setattr__(self, name, value):
    if name in ['_intialized']:
        self.__dict__[name] = value
        return
    if name in ['x', 'y']:
        if isinstance(value, int):
            print('we can set x,y')
            self.__dict__[name] = value
            return
        else:  # value isn't an int
            raise TypeError('Expected an int for: {}'.format(name))
    elif not self._intialized:
        self.__dict__[name] = value
    else:
        raise AttributeError('Cannot set attribute: {}'.format(name))
"
to alphabetically order a name and score from a textfile which joins the users name and their highest score,"import re
for score, name in re.findall(""(\d+) (\w+)"", f.read()):  # using regular expressions module to parse the scores and names
    scores[name.strip()].append(int(score))

# Set highest scores first in list and print those sorted
# sort the individual scores high to low, list format[(name, scores),...,]
score_list = [(name, sorted(scores[name], reverse=True)) for name in scores]
# sort the named scores high to low by highest score(x[0] sorts names alphabetic)
score_list = sorted(score_list, key=lambda x: x[1], reverse=True)
print(""Highest sorted"")
for name, v in score_list:  # v contains the individual scores
    print(v[0], name)  # Print highest score which is at 0 index and print the name

print()
print(""highest to lowest"")
for name, v in score_list:  # v contains the individual scores
    print(v, name)  # Print scores and name

print()
print(""highest average"")
average_scores = []
# iterate through the ordered score list and append the average score to the average_scores list
for name, v in score_list:  # v contains the individual scores
    average_scores.append((name, sum(v) / len(v)))
# sort average_scores high to low
sorted_average_scores = sorted(average_scores, key=lambda x: x[1], reverse=True)
# iterate through sorted_average_scores and print the rounded average, non-sorted individual scores, and name
for name, average in sorted_average_scores:
    print(round(average), scores[name], name)
"
Removing values from dict in python,">>> a = {'sd':{},'sdd':'','sadfas':None,'sadfa':'dsf'}
>>> a = dict((k, v) for k, v in a.iteritems() if v != '' and v != {} and v is not None)
>>> a
{'sadfa': 'dsf'}
>>>
"
Import module stored in a cStringIO data structure vs. physical disk file,"import types
import sys

src = """"""
def hello(who):
    print 'hello', who
""""""

def module_from_text(modulename, src):
    if modulename in sys.modules:
        module = sys.modules[modulename]
    else:
        module = sys.modules[modulename] = types.ModuleType(modulename)
    exec compile(src, '<no-file>', 'exec') in module.__dict__
    return module

module_from_text('flup', src)
import flup
flup.hello('world')
"
Replacing entries of an array with those of different array,"Timings:
%timeit nb_replace_values(array1, array2)
"
Reading first n lines of a CSV into a dictionary,"for index, row in enumerate(csv.DictReader(csvfile)):
    if index >= 100:
        break
    print(row['first_name'], row['last_name'])
"
Count number of non-NaN entries in each column of Spark dataframe with Pyspark,"from pyspark.sql.functions import col, sum

def count_not_null(c):
    return sum(col(c).isNotNull().cast(""integer"")).alias(c)

exprs = [count_not_null(c) for c in df.columns]
df.agg(*exprs).show()

## +---+---+---+
## |  x|  y|  z|
## +---+---+---+
## |  1|  2|  3|
## +---+---+---+
"
Get the last index with same max values in a list,"last_max_index3 = lambda s: max((x, i) for i, x in enumerate(s))[1] 
"
Fastest way to list all primes below N,"#!/usr/bin/env python
import psyco; psyco.full()
from math import sqrt, ceil
import numpy as np

def rwh_primes(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Returns  a list of primes < n """"""
    sieve = [True] * n
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i]:
            sieve[i*i::2*i]=[False]*((n-i*i-1)/(2*i)+1)
    return [2] + [i for i in xrange(3,n,2) if sieve[i]]

def rwh_primes1(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Returns  a list of primes < n """"""
    sieve = [True] * (n/2)
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i/2]:
            sieve[i*i/2::i] = [False] * ((n-i*i-1)/(2*i)+1)
    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]]

def rwh_primes2(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Input n>=6, Returns a list of primes, 2 <= p < n """"""
    correction = (n%6>1)
    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]
    sieve = [True] * (n/3)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
      if sieve[i]:
        k=3*i+1|1
        sieve[      ((k*k)/3)      ::2*k]=[False]*((n/6-(k*k)/6-1)/k+1)
        sieve[(k*k+4*k-2*k*(i&1))/3::2*k]=[False]*((n/6-(k*k+4*k-2*k*(i&1))/6-1)/k+1)
    return [2,3] + [3*i+1|1 for i in xrange(1,n/3-correction) if sieve[i]]

def sieve_wheel_30(N):
    # http://zerovolt.com/?p=88
    ''' Returns a list of primes <= N using wheel criterion 2*3*5 = 30

Copyright 2009 by zerovolt.com
This code is free for non-commercial purposes, in which case you can just leave this comment as a credit for my work.
If you need this code for commercial purposes, please contact me by sending an email to: info [at] zerovolt [dot] com.'''
    __smallp = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,
    61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,
    149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,
    229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,
    313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401,
    409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,
    499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,
    601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,
    691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,
    809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,
    907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)

    wheel = (2, 3, 5)
    const = 30
    if N < 2:
        return []
    if N <= const:
        pos = 0
        while __smallp[pos] <= N:
            pos += 1
        return list(__smallp[:pos])
    # make the offsets list
    offsets = (7, 11, 13, 17, 19, 23, 29, 1)
    # prepare the list
    p = [2, 3, 5]
    dim = 2 + N // const
    tk1  = [True] * dim
    tk7  = [True] * dim
    tk11 = [True] * dim
    tk13 = [True] * dim
    tk17 = [True] * dim
    tk19 = [True] * dim
    tk23 = [True] * dim
    tk29 = [True] * dim
    tk1[0] = False
    # help dictionary d
    # d[a , b] = c  ==> if I want to find the smallest useful multiple of (30*pos)+a
    # on tkc, then I need the index given by the product of [(30*pos)+a][(30*pos)+b]
    # in general. If b < a, I need [(30*pos)+a][(30*(pos+1))+b]
    d = {}
    for x in offsets:
        for y in offsets:
            res = (x*y) % const
            if res in offsets:
                d[(x, res)] = y
    # another help dictionary: gives tkx calling tmptk[x]
    tmptk = {1:tk1, 7:tk7, 11:tk11, 13:tk13, 17:tk17, 19:tk19, 23:tk23, 29:tk29}
    pos, prime, lastadded, stop = 0, 0, 0, int(ceil(sqrt(N)))
    # inner functions definition
    def del_mult(tk, start, step):
        for k in xrange(start, len(tk), step):
            tk[k] = False
    # end of inner functions definition
    cpos = const * pos
    while prime < stop:
        # 30k + 7
        if tk7[pos]:
            prime = cpos + 7
            p.append(prime)
            lastadded = 7
            for off in offsets:
                tmp = d[(7, off)]
                start = (pos + prime) if off == 7 else (prime * (const * (pos + 1 if tmp < 7 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 11
        if tk11[pos]:
            prime = cpos + 11
            p.append(prime)
            lastadded = 11
            for off in offsets:
                tmp = d[(11, off)]
                start = (pos + prime) if off == 11 else (prime * (const * (pos + 1 if tmp < 11 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 13
        if tk13[pos]:
            prime = cpos + 13
            p.append(prime)
            lastadded = 13
            for off in offsets:
                tmp = d[(13, off)]
                start = (pos + prime) if off == 13 else (prime * (const * (pos + 1 if tmp < 13 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 17
        if tk17[pos]:
            prime = cpos + 17
            p.append(prime)
            lastadded = 17
            for off in offsets:
                tmp = d[(17, off)]
                start = (pos + prime) if off == 17 else (prime * (const * (pos + 1 if tmp < 17 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 19
        if tk19[pos]:
            prime = cpos + 19
            p.append(prime)
            lastadded = 19
            for off in offsets:
                tmp = d[(19, off)]
                start = (pos + prime) if off == 19 else (prime * (const * (pos + 1 if tmp < 19 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 23
        if tk23[pos]:
            prime = cpos + 23
            p.append(prime)
            lastadded = 23
            for off in offsets:
                tmp = d[(23, off)]
                start = (pos + prime) if off == 23 else (prime * (const * (pos + 1 if tmp < 23 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # 30k + 29
        if tk29[pos]:
            prime = cpos + 29
            p.append(prime)
            lastadded = 29
            for off in offsets:
                tmp = d[(29, off)]
                start = (pos + prime) if off == 29 else (prime * (const * (pos + 1 if tmp < 29 else 0) + tmp) )//const
                del_mult(tmptk[off], start, prime)
        # now we go back to top tk1, so we need to increase pos by 1
        pos += 1
        cpos = const * pos
        # 30k + 1
        if tk1[pos]:
            prime = cpos + 1
            p.append(prime)
            lastadded = 1
            for off in offsets:
                tmp = d[(1, off)]
                start = (pos + prime) if off == 1 else (prime * (const * pos + tmp) )//const
                del_mult(tmptk[off], start, prime)
    # time to add remaining primes
    # if lastadded == 1, remove last element and start adding them from tk1
    # this way we don't need an ""if"" within the last while
    if lastadded == 1:
        p.pop()
    # now complete for every other possible prime
    while pos < len(tk1):
        cpos = const * pos
        if tk1[pos]: p.append(cpos + 1)
        if tk7[pos]: p.append(cpos + 7)
        if tk11[pos]: p.append(cpos + 11)
        if tk13[pos]: p.append(cpos + 13)
        if tk17[pos]: p.append(cpos + 17)
        if tk19[pos]: p.append(cpos + 19)
        if tk23[pos]: p.append(cpos + 23)
        if tk29[pos]: p.append(cpos + 29)
        pos += 1
    # remove exceeding if present
    pos = len(p) - 1
    while p[pos] > N:
        pos -= 1
    if pos < len(p) - 1:
        del p[pos+1:]
    # return p list
    return p

def sieveOfEratosthenes(n):
    """"""sieveOfEratosthenes(n): return the list of the primes < n.""""""
    # Code from: <dickinsm@gmail.com>, Nov 30 2006
    # http://groups.google.com/group/comp.lang.python/msg/f1f10ced88c68c2d
    if n <= 2:
        return []
    sieve = range(3, n, 2)
    top = len(sieve)
    for si in sieve:
        if si:
            bottom = (si*si - 3) // 2
            if bottom >= top:
                break
            sieve[bottom::si] = [0] * -((bottom - top) // si)
    return [2] + [el for el in sieve if el]

def sieveOfAtkin(end):
    """"""sieveOfAtkin(end): return a list of all the prime numbers <end
    using the Sieve of Atkin.""""""
    # Code by Steve Krenzel, <Sgk284@gmail.com>, improved
    # Code: https://web.archive.org/web/20080324064651/http://krenzel.info/?p=83
    # Info: http://en.wikipedia.org/wiki/Sieve_of_Atkin
    assert end > 0
    lng = ((end-1) // 2)
    sieve = [False] * (lng + 1)

    x_max, x2, xd = int(sqrt((end-1)/4.0)), 0, 4
    for xd in xrange(4, 8*x_max + 2, 8):
        x2 += xd
        y_max = int(sqrt(end-x2))
        n, n_diff = x2 + y_max*y_max, (y_max << 1) - 1
        if not (n & 1):
            n -= n_diff
            n_diff -= 2
        for d in xrange((n_diff - 1) << 1, -1, -8):
            m = n % 12
            if m == 1 or m == 5:
                m = n >> 1
                sieve[m] = not sieve[m]
            n -= d

    x_max, x2, xd = int(sqrt((end-1) / 3.0)), 0, 3
    for xd in xrange(3, 6 * x_max + 2, 6):
        x2 += xd
        y_max = int(sqrt(end-x2))
        n, n_diff = x2 + y_max*y_max, (y_max << 1) - 1
        if not(n & 1):
            n -= n_diff
            n_diff -= 2
        for d in xrange((n_diff - 1) << 1, -1, -8):
            if n % 12 == 7:
                m = n >> 1
                sieve[m] = not sieve[m]
            n -= d

    x_max, y_min, x2, xd = int((2 + sqrt(4-8*(1-end)))/4), -1, 0, 3
    for x in xrange(1, x_max + 1):
        x2 += xd
        xd += 6
        if x2 >= end: y_min = (((int(ceil(sqrt(x2 - end))) - 1) << 1) - 2) << 1
        n, n_diff = ((x*x + x) << 1) - 1, (((x-1) << 1) - 2) << 1
        for d in xrange(n_diff, y_min, -8):
            if n % 12 == 11:
                m = n >> 1
                sieve[m] = not sieve[m]
            n += d

    primes = [2, 3]
    if end <= 3:
        return primes[:max(0,end-2)]

    for n in xrange(5 >> 1, (int(sqrt(end))+1) >> 1):
        if sieve[n]:
            primes.append((n << 1) + 1)
            aux = (n << 1) + 1
            aux *= aux
            for k in xrange(aux, end, 2 * aux):
                sieve[k >> 1] = False

    s  = int(sqrt(end)) + 1
    if s  % 2 == 0:
        s += 1
    primes.extend([i for i in xrange(s, end, 2) if sieve[i >> 1]])

    return primes

def ambi_sieve_plain(n):
    s = range(3, n, 2)
    for m in xrange(3, int(n**0.5)+1, 2): 
        if s[(m-3)/2]: 
            for t in xrange((m*m-3)/2,(n>>1)-1,m):
                s[t]=0
    return [2]+[t for t in s if t>0]

def sundaram3(max_n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/2073279#2073279
    numbers = range(3, max_n+1, 2)
    half = (max_n)//2
    initial = 4

    for step in xrange(3, max_n+1, 2):
        for i in xrange(initial, half, step):
            numbers[i-1] = 0
        initial += 2*(step+1)

        if initial > half:
            return [2] + filter(None, numbers)

################################################################################
# Using Numpy:
def ambi_sieve(n):
    # http://tommih.blogspot.com/2009/04/fast-prime-number-generator.html
    s = np.arange(3, n, 2)
    for m in xrange(3, int(n ** 0.5)+1, 2): 
        if s[(m-3)/2]: 
            s[(m*m-3)/2::m]=0
    return np.r_[2, s[s>0]]

def primesfrom3to(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Returns a array of primes, p < n """"""
    assert n>=2
    sieve = np.ones(n/2, dtype=np.bool)
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i/2]:
            sieve[i*i/2::i] = False
    return np.r_[2, 2*np.nonzero(sieve)[0][1::]+1]    

def primesfrom2to(n):
    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """""" Input n>=6, Returns a array of primes, 2 <= p < n """"""
    sieve = np.ones(n/3 + (n%6==2), dtype=np.bool)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
        if sieve[i]:
            k=3*i+1|1
            sieve[      ((k*k)/3)      ::2*k] = False
            sieve[(k*k+4*k-2*k*(i&1))/3::2*k] = False
    return np.r_[2,3,((3*np.nonzero(sieve)[0]+1)|1)]

if __name__=='__main__':
    import itertools
    import sys

    def test(f1,f2,num):
        print('Testing {f1} and {f2} return same results'.format(
            f1=f1.func_name,
            f2=f2.func_name))
        if not all([a==b for a,b in itertools.izip_longest(f1(num),f2(num))]):
            sys.exit(""Error: %s(%s) != %s(%s)""%(f1.func_name,num,f2.func_name,num))

    n=1000000
    test(sieveOfAtkin,sieveOfEratosthenes,n)
    test(sieveOfAtkin,ambi_sieve,n)
    test(sieveOfAtkin,ambi_sieve_plain,n) 
    test(sieveOfAtkin,sundaram3,n)
    test(sieveOfAtkin,sieve_wheel_30,n)
    test(sieveOfAtkin,primesfrom3to,n)
    test(sieveOfAtkin,primesfrom2to,n)
    test(sieveOfAtkin,rwh_primes,n)
    test(sieveOfAtkin,rwh_primes1,n)         
    test(sieveOfAtkin,rwh_primes2,n)
"
How To Get All The Contiguous Substrings Of A String In Python?,"def get_all_substrings(input_string):
  length = len(input_string)
  return [input_string[i:j+1] for i in xrange(length) for j in xrange(i,length)]

print get_all_substrings('abcde')
"
Arbitrary image slice with python/numpy,"def sliceImage(I, a, b, *arg, **kws):
    from scipy import linspace, asarray
    from scipy.ndimage import map_coordinates
    from scipy.linalg import norm
    dst = norm(asarray(b) - a) + 1
    return map_coordinates(I, [linspace(strt, end, dst) 
                               for strt, end in zip(a, b)],
                           *arg, **kws)
"
Dataframe columns from Dataframe rows in Pandas,"In [13]: df1 = pd.DataFrame(np.random.normal(size=8000).reshape(-1,2), columns=['a','b'])

In [14]: df2 = pd.DataFrame(np.random.normal(size=8000).reshape(2,-1),index=['c','d'])

In [15]: %timeit df1.join(df2.T.set_index(df1.index))
1000 loops, best of 3: 600 µs per loop

In [16]: %timeit pd.concat([df1, df2.T.set_index(df1.index)], axis=1)
1000 loops, best of 3: 1.18 ms per loop
"
How can I create a list from two dictionaries?,"fu_list = [(k, fus_d.get(k), fus_s.get(k)) for k in fus_d.viewkeys() | fus_s]
"
How do I specify different date ranges for CustomBusinessDays holidays in Pandas?,"import pandas as pd
from pandas.tseries.offsets import CustomBusinessDay

nolectures = pd.date_range(start='2015-03-28',end='2015-04-12').union_many(
    [['2015-05-01'], pd.date_range(start='2015-11-09',end='2015-12-31')])
calendar = CustomBusinessDay(holidays=nolectures)
print(calendar.holidays)
"
Dynamically growing a python array when assigning to it,"myDict = {x.index:x for x in xs}
"
Reading a binary file into a struct in Python,"from itertools import izip_longest, imap
from struct import unpack, calcsize

fmt_s = '=5i'
fmt_spec = '=256i'
size_s = calcsize(fmt_s)
size = size_s + calcsize(fmt_spec)

def chunked(iterable, n, fillvalue=''):
    args = [iter(iterable)] * n
    return imap(''.join, izip_longest(*args, fillvalue=fillvalue))

data = [unpack(fmt_s, section[:size_s]) + (unpack(fmt_spec, section[size_s:]),)
    for section in chunked(bytes, size)]
"
How do I replace missing/masked data with a row mean with numpy,"import numpy as np

a = np.arange(24).reshape(4,-1).astype(float)   # I changed your example to be a float
b = np.ma.masked_where(numpy.remainder(a,5)==0,a)
c = b.mean(1)

np.copyto(b, c[...,None], where=b.mask)

In [189]: b.data
Out[189]: 
array([[  2.5,   1. ,   2. ,   3. ,   4. ,   2.5],
       [  6. ,   7. ,   8. ,   9. ,   8.2,  11. ],
       [ 12. ,  13. ,  14. ,  14.4,  16. ,  17. ],
       [ 18. ,  19. ,  20.6,  21. ,  22. ,  23. ]])
"
Python - find integer closest to 0 in list,"lst = [237, 72, -18, 237, 236, 237, 60, -158, -273, -78, 492, 243]
min((abs(x), x) for x in lst)[1]
"
Similarities between two csv files,"with open(""example.csv"") as file1, open(""list.csv"") as file2, open(""output.csv"", ""wb+"") as file3:
    writer = csv.writer(file3)
    key_words = [word.strip() for word in file2.readlines()]
    for row in file1:
        row = row.strip()
        for key in (key for key in key_words if key in row):
            writer.writerow([key, row])
"
Find float in ndarray,">>> np.tile(2, array.shape)
array([[2, 2], [2, 2]])
"
Python: Getting the top 4 Highest Values in a 2d List,"teams = [""Randomteam1"",""Randomteam2"",""Randomteam3"",""Randomteam4"",""Randomteam5"",""Randomteam6""]


team_info = [[7, 2, 1, 1, 3], [4, 1, 1, 1, 3],[2, 0, 2, 2, 3], [12, 3, 0, 0, 3], [9, 0, 2, 2, 3], [10, 3, 0, 0, 6]]


data = sorted(zip(teams,team_info),key= lambda x: x[1][0],reverse=True)

[('Randomteam4', [12, 3, 0, 0, 3]), ('Randomteam6', [10, 3, 0, 0, 6]), ('Randomteam5', [9, 0, 2, 2, 3]), ('Randomteam1', [7, 2, 1, 1, 3]), ('Randomteam2', [4, 1, 1, 1, 3]), ('Randomteam3', [2, 0, 2, 2, 3])]
"
Get version string from argparse,"version_action = next((action for action in parser._get_optional_actions()
                       if isinstance(action, argparse._VersionAction)), None)
print version_action.version if version_action else 'unknown'
"
select from list B k distinct elements that are not in list A in python?,"listA = [1,2,3,2,1]
listB = [1,2,3,4,5,4,3,2,1]

set_A = set(listA)
newlist = list(set(listB) - set_A)[:len(set_A)]
"
Compare values from two different dictionaries in Python?,"(k for k in set(sourceDict).intersection(targetDict) if sourceDict[key] != targetDict[key])
"
Python: How to iterate lists of dictionaries Fast,"result = [dictB[5] for dictB in listB
          if 5 in dictB and dictB[5] in interesting_vals]
"
how to write a regex to parse refs/changes,">>> ' '.join(line.split('/', 3)[-1] for line in source.splitlines())
'1025744/3 1025962/5 913745/2'
"
How to split python work between cores? (Multiprocessing lib),"from contextlib import closing, cpu_count, Pool

with closing(Pool(processes=cpu_count())) as pool
    pass # do something
"
Python - List and Loop in one def,"def wfsc_combined(self):
    output = []
    output.append(""%s\t%s\t%s"" % (self.name[0], self.subnet[0], self.gateway[0]))
    for ip in range(100,110):
        output.append(""192.168.1.%d"" % ip)
    return '\n'.join(output)
"
"List the most common lists, from a list","from collections import Counter

GROUP_SIZE = 5
counter = Counter()
mylist = []

with open(""tags.txt"", ""r"") as tagfile:
    tags = (line.strip() for line in tagfile)
    try:
        while len(mylist) < GROUP_SIZE-1:
            mylist.append(tags.next())
    except StopIteration:
        pass

    for tag in tags:   # main loop
        mylist.pop(0)
        mylist.append(tag)
        counter.update((tuple(mylist),))

if len(counter) < 1:
    print 'too few tags in file'
else:
    for tags, count in counter.most_common(10):  # top 10
        print '{}, count = {:,d}'.format(list(tags), count)
"
Count numbers from row in CSV file,"import collections

counts = collections.Counter()
for row in my_reader:
    counts[row[3]] += 1
"
Python trying to Refactor (DRY out) a long Control Flow,"from collections import defaultdict

def processClickOutData(cls, raw_data):
    absolute_total = 0
    absolute_total_true = 0

    list_channels = set()
    list_tids = set()

    total = defaultdict(int)
    total_true = defaultdict(int)
    total_position = defaultdict(int)
    total_position_true = defaultdict(int)

    def defaultdict_int():
        return defaultdict(int)

    singles = defaultdict(defaultdict_int)
    singles_true = defaultdict(defaultdict_int)
    channels = defaultdict(defaultdict_int)
    channels_true = defaultdict(defaultdict_int)
    tid_position = defaultdict(defaultdict_int)
    tid_position_true = defaultdict(defaultdict_int)
    channel_position = defaultdict(defaultdict_int)
    channel_position_true = defaultdict(defaultdict_int)    

    for gap, count, prefered, channel, position in raw_data:
        list_channels.add(channel)
        list_tids.add(tid)

        absolute_total += count
        total[gap] += count
        singles[gap][tid] += count
        channels[gap][channel] += count
        total_position[position] += count
        tid_position[position][tid] += count
        channel_position[position][channel] += count

        if prefered == 0:
            absolute_total_true += count
            total_true[gap] += count
            singles_true[gap][tid] += count
            channels_true[gap][channel] += count
            total_position_true[position] += count
            tid_position_true[position][tid] += count
            channel_position_true[position][channel] += count




    final_values = {""singles"" : singles, ""singles_true"" : singles_true, ""total"" : total, ""total_true"": total_true, ""absolute_total"": absolute_total, ""absolute_total_true"": absolute_total_true, ""channel_totals"" : channels, ""list_channels"" : list_channels, ""list_tids"" : list_tids, ""channel_totals_true"" : channels_true,
                     ""total_position"" :  total_position, ""total_position_true"" : total_position_true, ""tid_position"" : tid_position, ""channel_position"" : channel_position, ""tid_position_true"" : tid_position_true, ""channel_position_true"" : channel_position_true }
    return final_values
"
Why aren't my Python custom math-overload class methods working?,"class IntMeta(type):
    def __init__(cls, *args):
        setattr(cls, ""__add__"", lambda self, other: self.value + other)

class Int(object):
    __metaclass__ = IntMeta
    def __init__(self, value):
        self.value = value
"
How can I get index of elements which are not integer,"(data - data.round()).nonzero()
(array([2, 3]),)
"
How to split 16-bit unsigned integer into array of bytes in python?,"b = struct.pack('<H',0xABCD)

b[0],b[1]
Out[52]: (205, 171)
"
Python subfolder listings,"import os

def listdirs(suffix):
    for dirname, dirnames, filenames in os.walk('.'):
        for subdirname in dirnames:
            subdirpath = os.path.join(dirname, subdirname)
            if subdirpath.endswith(suffix):
                yield subdirpath


if __name__ == ""__main__"":
    for d in listdirs('inputs'):
        print d
"
Combining different elements of array in Numpy while doing vector operations,"q = np.array([1,2,3,4,5])
Q = f(q)
# operate on the middle
Q[1:] += q[:-1]
Q[:-1] += q[1:]
# operate on the ends
Q[0] += q[-1]
Q[-1] += q[0]

q = Q.copy()
"
"With pandas: if, in a row, a word in a column does not occur in string in other column, drop row","result = []
for x, y in zip(df.one, df.two):
    if x in y.split():
        result.append(True)
        continue
    result.append(False)

print df[result]
"
Python equivalent of Scala's lazy val,"
>>> numNonZero = (k for k, w in weights if w > 0)
>>> for k in numNonZero:
...     print(k)
... 
1
3
"
argparse subcommands with nested namespaces,"filter_namespace = argparse.Namespace(filter1=None, filter2=None)
namespace = argparse.Namespace(filter=filter_namespace)
namespace = main_parser.parse_args(namespace=namespace)
"
how to make undo in backtracking? I'm having problems with the recursively backtracking method,"def minimun_path(s,G,camino,cMax,cMin):
    if len(camino) == G.number_of_nodes():
        # I found the complete path
        return camino
    temp = []
    for son in G.neighbors(s):
        # I record all path to a node not visited yet
        if son not in camino:
            peso = weight_of(son,G,s)+cMin
            temp.append( (son,peso) )
    if temp:
        # I choose a minimun of those
        sig,w = min( temp, key=lambda x:x[1])
    else:
        # I don't have where to go, so I stay put
        sig = s
    return minimun_path(sig,G,camino+(s,),cMax,cMin)
"
How to save qlineedit fields into an XML file using Python for loops?,"elements = (
    ('mac', self.lineEdit_mac.text),
    ('broadcast', self.lineEdit_broadcast.text),
    ('destination', self.lineEdit_destination.text),
    ('port', self.lineEdit_port.text),
    ('destinationCheckBox', self.checkBox_destination.checkState),
    ('portCheckBox', self.checkBox_port.checkState)
)

# and remove .iteritems() where previously used
for name, fn in elements:
"
Scrapy simulate XHR request - returning 400,"url = 'https://www.tele2.no/Services/Webshop/FilterService.svc/ApplyPhoneFilters'
req = scrapy.Request(url,
                     method='POST',
                     body='{""filters"": []}',
                     headers={'X-Requested-With': 'XMLHttpRequest',
                              'Content-Type': 'application/json; charset=UTF-8'},
                     callback=self.parser2)
yield req
"
Pyspark changing type of column from date to string,"from pyspark.sql.functions import udf, lit
my_date_format = udf(lambda d, fmt: d.strftime(fmt))

df.select(
    my_date_format(col(""vacationdate""), lit(""%d-%m-%Y"")).alias(""date_string"")
).show()
"
How can I convert an image's pixel color information into numbers and store it in a CSV?,"with open('output.csv', 'w') as outfile:
   outfile.write(' '.join([str(i) for i in pixels])
"
How to reuse a process pool for parallel programming in Python 3,">>> from pathos.pools import ProcessPool as Pool
>>> pool = Pool()
>>> data_list = [range(4), range(4,8), range(8,12), range(12,16)]
>>> squared = lambda x:x**2
>>> mean = lambda x: sum(x)/len(x)
>>> for data in data_list:
...   result = pool.map(squared, data)
...   print mean(result)
... 
3
31
91
183
"
Take multiple patterns from cli. argparse Python3,"def main():
    parser = argparse.ArgumentParser(description='Python Grep.')
    parser.add_argument('--debug', action='store_true', help='Print debug messages')
    parser.add_argument('pattern', type=str, nargs='+', help='Pattern(s) for pgrepping')
    args = parser.parse_args()

    pattern = '|'.join(['(?:{})'.format(p) for p in args.pattern])
    Grepper(pattern, args.debug).matchline()
"
"What is the python equivalent to perl ""a""..""azc""","def letterrange(first, last):
    for k in range(len(last)):
        for x in product(ascii_lowercase, repeat=k+1):
            result = ''.join(x)
            if first:
                if first != result:
                    continue
                else:
                    first = None
            yield result
            if result == last:
                return
"
make only left subplots and bottom subplots (in MxN panels) contain x and y axis labels,"fig, axes = pyplot.subplots(nrows=3, ncols=4, sharex=True, sharey=True)
"
Overwrite several methods of a class with a loop,"class VocalAttribute:

    def __init__(self, name, feedback):
        """"""Called when you first create the descriptor.""""""
        self.name = name  # the name of the attribute 'behind' the property
        self.feedback = feedback  # the feedback to show when the value changes

    def __get__(self, obj):
        """"""Called when you get the descriptor value.""""""
        return getattr(obj, self.name)

    def __set__(self, obj, value):
        """"""Called when you set the descriptor value.""""""
        prev = getattr(obj, self.name, None)
        if value != prev:
            setattr(obj, self.name, value)
            print(self.feedback)

    def __delete__(self, obj):
        """"""Called when you delete the descriptor value.""""""
        delattr(obj, self.name)


class Foo:

    bar = VocalAttribute('_bar', 'I have been edited!')


foo = Foo()

print('1.')

foo.bar = 'hello'

print('2.')

foo.bar = 'hello'

print('3.')

foo.bar = 'world'
"
Python: sorting tuple by last name and handling lower cased first letters,"def item_to_sort_key(item):
    n, name = item
    return name.lower()

sorted(L, key=item_to_sort_key)
"
Detect when a Python module unloads,"import atexit

@atexit.register
def goodbye():
    print ""You are now leaving the Python sector.""
"
Second file handler on a file behaves unexpectedly,"import tempfile

fp1 = tempfile.NamedTemporaryFile()
fp1.write('foo')
fp2 = open(fp1.name)
# Because of buffering we've not yet written to the file.
assert fp2.read() == ''
fp1.flush()
# We've now explicitly written to the file.
assert fp2.read() == 'foo'
fp1.close()
fp2.close()
"
Fitting piecewise function in Python,"import scipy.optimize as so
import numpy as np

def fitfunc(x,p):
   if x>p:
      return x-p
   else:
      return -(x-p)

fitfunc_vec = np.vectorize(fitfunc) #vectorize so you can use func with array

def fitfunc_vec_self(x,p):
  y = np.zeros(x.shape)
  for i in range(len(y)):
    y[i]=fitfunc(x[i],p)
  return y


x=np.arange(1,10)
y=fitfunc_vec_self(x,6)+0.1*np.random.randn(len(x))

popt, pcov = so.curve_fit(fitfunc_vec_self, x, y) #fitting routine that gives error
print popt
print pcov
"
Python: All possible Timezone Abbreviations for given Timezone Name (and vise versa),"import collections
import datetime as DT
import pytz

tzones = collections.defaultdict(set)
abbrevs = collections.defaultdict(set)

for name in pytz.all_timezones:
    tzone = pytz.timezone(name)
    for utcoffset, dstoffset, tzabbrev in getattr(
            tzone, '_transition_info', [[None, None, DT.datetime.now(tzone).tzname()]]):
        tzones[tzabbrev].add(name)
        abbrevs[name].add(tzabbrev)
"
"incrementing key,value pair inside for loop iterating over dictionary","mydict = {'a': 1, 'b': 2, 'c': 3}

items = mydict.iteritems()
for key,value in items:
    if key == 'b':  # some condition
        try:
            key,value = next(items)
        except StopIteration:
            break
    print(key, value)
"
How can I add consistent whitespace to existing HTML using Python?,"Example html5lib parser with BeautifulSoup tree builder
#!/usr/bin/env python
from html5lib import HTMLParser, treebuilders

parser = HTMLParser(tree=treebuilders.getTreeBuilder(""beautifulsoup""))

c = """"""<HTML><HEAD><TITLE>Title</TITLE></HEAD><BODY>...... </BODY></HTML>""""""

soup = parser.parse(c)
print soup.prettify()
"
"Double loops for ""concatenation of subarrays in bigger array""","conc = np.array([A,B,C,D])
"
Find replace Element using Python,"for tag_type in dom.getElementsByTagName('tag_type'):
    while tag_type.hasChildNodes():
        tag_type.removeChild(tag_type.firstChild)
    tag_type.appendChild(dom.createTextNode(""Replacement Word""))
"
A more elegant way of creating tuples of tuples from lists,">>> tuple(d.items())
(('AK', 'Alaska'), ('AL', 'Alabama'))
"
Python Pandas Conditional Sums,"In [31]: df1 = df[df['key2'] == 'one']

In [32]: df1
Out[32]:
      data1     data2 key1 key2
0  0.361601  0.375297    a  one
2  1.468194  0.272929    b  one
4 -0.268210  1.250340    a  one

In [33]: df1.groupby('key1')['data1'].sum()
Out[33]:
key1
a       0.093391
b       1.468194
Name: data1, dtype: float64
"
How to decrease running time of this particular solution?,"def f(n):
    if n == 0:
        return [""""]
    return [a + b for a in ""RL"" for b in f(n-1)]

print(f(3))
"
Wxpython Description of event in status bar,"import wx

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.CreateStatusBar()

        self.panel = wx.Panel(self)
        self.button = wx.Button(self.panel, label=""Test"")
        self.button.SetToolTipString(""This is for testing purposes!"")

        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.button)

        self.panel.SetSizerAndFit(self.sizer)  
        self.Show()

app = wx.App(False)
win = MainWindow(None)
app.MainLoop()
"
replace unique values in a pandas dataframe with random numbers,"def replace_zeros_w_random_normal(DF,label, mu, sigma):
    truth_1 = DF[label] == 0
    random = np.random.normal(mu, sigma, DF.shape[0])
    filt = DF[DF[label] > 0]
    vector_1 = truth_1 * random
    truth_2 = vector_1 == 0
    vector_2 = truth_2 * DF[label]
    DF[label] = np.maximum(vector_1,vector_2)
    return DF
"
Python: Convert format string to regular expression,"import re
UNIQ='_UNIQUE_STRING_'
class MarkPlaceholders(dict):
    def __getitem__(self, key):
        return UNIQ+('(?P<%s>.*?)'%key)+UNIQ

def format_to_re(format):
    parts = (format % MarkPlaceholders()).split(UNIQ)
    for i in range(0, len(parts), 2):
        parts[i] = re.escape(parts[i])
    return ''.join(parts)
"
python 3: log function signature problem,"movedmsg = ""object moved from = {0} to = {1}""
print(movedmsg.format(object.location, new_location))
"
Python: Get first element of list potentially containing sublists,"foo = [[[1,2],[3,4]],[[5,6],[7,8]]]

result = None
while True:
    try:
        result = foo[0]
    except TypeError:
        break
"
Random Trees in OpenCV from python,"forest.train(...)
forest.predict(...)
"
What is the simplest way to dump this column copy of excel data into a python numpy array?,"import numpy as np

x = """"""[23.57734807
24.6558011
23.60110497
25.6801105
24.75524862
23.70055249
23.50718232
23.56906077
22.82265193
23.78563536
21.47348066
22.15359116]
""""""

 arr = np.array(x.replace(""["","""").replace(""]"","""").split(),dtype=float)
 print arr

[ 23.57734807  24.6558011   23.60110497  25.6801105   24.75524862
23.70055249  23.50718232  23.56906077  22.82265193  23.78563536
21.47348066  22.15359116]
"
Convert pandas datetime objects,"In [7]:
df['Time'] = df['Date'].dt.strftime('%H:%M:%S')
df

Out[7]:
            Timestamp                    Date      Time
0  20160208_095900.51 2016-02-08 09:59:00.510  09:59:00
1  20160208_095901.51 2016-02-08 09:59:01.510  09:59:01
2  20160208_095902.51 2016-02-08 09:59:02.510  09:59:02
3  20160208_095903.51 2016-02-08 09:59:03.510  09:59:03
4  20160208_095904.51 2016-02-08 09:59:04.510  09:59:04
5  20160208_095905.51 2016-02-08 09:59:05.510  09:59:05
6  20160208_095906.51 2016-02-08 09:59:06.510  09:59:06
7  20160208_095907.51 2016-02-08 09:59:07.510  09:59:07
8  20160208_095908.51 2016-02-08 09:59:08.510  09:59:08
9  20160208_095909.51 2016-02-08 09:59:09.510  09:59:09
"
GNOME configuration database type-inference,">>> import gconf
>>> client = gconf.Client()
>>> # Get a value and introspect its type:
>>> value = client.get('/apps/gnome-terminal/profiles/Default/background_color')
>>> value.type
<enum GCONF_VALUE_STRING of type GConfValueType>
>>> value.get_string()
'#FFFFFFFFDDDD'
"
Pandas Crosstab: Change Order of Columns That Are Named as Formatted Dates (mmm yy),"table_1=pd.crosstab(f_dtflt.EW_REGIONCOLLSITE, f_dtflt.COLLECTION_DATE.apply(lambda x: x.strftime(""%y %m_%b %y"")), margins=True)
"
Python: Using bisect.insort with key,"def insort_left(a, x, lo=0, hi=None):
    """"""Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    """"""

    if lo < 0:
        raise ValueError('lo must be non-negative')
    if hi is None:
        hi = len(a)
    while lo < hi:
        mid = (lo+hi)//2
        if a[mid] < x: lo = mid+1
        else: hi = mid
    a.insert(lo, x)
"
how to print last 3 datas from the maximum date using pandas python,"#converting column date to datetime
df['date'] = pd.to_datetime(df.date)

print df
         date      sales
0  2014-03-13  10000.000
1  2014-03-21   2000.000
2  2014-03-27   2000.000
3  2014-03-17    200.000
4  2014-03-17      5.000
5  2014-03-28     70.000
6  2014-03-29    200.000
7  2014-03-29      5.000
8  2014-03-30     25.000
9  2014-03-31      0.020
10 2014-03-31     12.000
11 2014-03-31      0.022

print df[df['date'].isin(pd.date_range(end=df.date.max(), periods=3))]

         date    sales
6  2014-03-29  200.000
7  2014-03-29    5.000
8  2014-03-30   25.000
9  2014-03-31    0.020
10 2014-03-31   12.000
11 2014-03-31    0.022
"
Python : fill cuboid with spheres,"x1,y1,z1 = np.argwhere(points_sphere)[:,0], np.argwhere(points_sphere)[:,1], np.argwhere(points_sphere)[:,2]
"
Finding an unknown point using weighted multilateration,"p0=np.random.rand(2)*90+20
p1=np.random.rand(2)*-10+20+p0
p2=np.random.rand(2)*-10+20+p0
p3=np.random.rand(2)*-10+20+p0
p4=np.random.rand(2)*-10+20+p0

target=geo2cart(p0[0],p0[1])
points=np.vstack((p1,p2,p3,p4))
lat    = points[:,0]
lon    = points[:,1]

centers=geo2cart(lat,lon)
#You can change the random at the end to tune the amount of noise
rad =  np.power(np.sum(np.power(centers-target,2),axis=1),.5)#+np.random.rand(4)*10    

print '------------'
start=geo2cart(np.average(lat),np.average(lon))
end_pos=opt.fmin_powell(minimize,start)
print 'Exact',p0
print 'Start guess',cart2geo(start)
print 'Found',cart2geo(end_pos)
print 'Distance',np.linalg.norm(end_pos-target)

Exact [  45.21292244  101.85151772]
Start guess (array([ 60.63554123]), array([ 115.08426225]))
Found (array([ 45.21292244]), array([ 101.85151772]))
Distance 5.30420680512e-11
"
Evaluate multiple variables in one 'if' statement?,"if var1 == var2 == var3 == var4 == False:
"
Python 3.4.4 settin argument in Tkinter?,"from tkinter import *

class SampleApp:
    def __init__(self, parent):

        self.textfield = None

        self.myParent = parent
        self.Container = Frame(parent)
        self.Container.pack()

        self.textfield = Entry(self.Container, bg=""red"")
        self.textfield.pack()

        self.button = Button(self.Container, text=""Get"", command=self.on_button)
        self.button.pack()

    def on_button(self):
        print(self.textfield.get())

root = Tk()
myapp = SampleApp(root)
root.mainloop()
"
Removing all alphabets and commas from a string,">>> re.sub(r""[A-Z;,.]"","" "",strs).split()
['21', '48', '64', '91', '95', '125', '139', '166', '175', '200']
"
iterating over characters in a line and replacing them,"# Read file, convert strings to lists
fin = open(""path/to/file"")
lines = fin.readlines()
line2, line4 = list(lines[1]), list(lines[3])  

# Make the changes to our lists
for i, c in enumerate(line4):
   if( ord(c) > 53 ):
      line2[i] = 'N'

# Overwrite line 2
lines[1] = ''.join(line2)

# Save back to the file
fin.seek(0)
for line in lines:
   fin.write(line)

fin.close()
"
import module from string variable,"import importlib

i = importlib.import_module(""matplotlib.text"")
"
python wraps.who can give a example,">>> from functools import wraps
>>> def my_decorator(f):
...     @wraps(f)
...     def wrapper(*args, **kwds):
...         print 'Calling decorated function'
...         return f(*args, **kwds)
...     return wrapper
...
>>> @my_decorator
... def example():
...     """"""Docstring""""""
...     print 'Called example function'
...
>>> example()
Calling decorated function
Called example function
>>> example.__name__
'example'
>>> example.__doc__
'Docstring'
"
Preceding Word Length,"def match_previous(lst, word):
    # keep matches_count of how many times we find a match and total lengths
    matches_count = total_length_sum = 0.0
    # pull first element from list to use as preceding word
    previous_word = lst[0]
    # slice rest of words from the list 
    # so we always compare two consecutive words
    rest_of_words = lst[1:]
    # catch where first word is ""word"" and add 1 to matches_count
    if previous_word == word:
        matches_count += 1
    for current_word in rest_of_words:
        # if the current word matches our ""word""
        # add length of previous word to total_length_sum
        # and increase matches_count.
        if word == current_word:
            total_length_sum += len(previous_word)
            matches_count += 1
        # always update to keep track of word just seen
        previous_word = current_word
    # if  matches_count is 0 we found no word in the text that matched ""word""
    return total_length_sum / matches_count if matches_count else False
"
how to compare unicode date u'2006-07-23' format and 25-06-15 08:42:43.830000000 PM using python pandas?,"dates = (u'2015-06-23',u'2015-06-29')
df['received_date'] = pd.to_datetime(df['received_date'])
df = df.set_index('received_date')
return df[dates[0]:dates[1]]
"
Python concat string with list,""""""" """""".join(list)"
Python - Insert numbers in string between quotes,"re.sub('(\\d+)', '""\\1""', 'This is number 1 and this is number 22')"
Replace certain element in only first line of the text file,"with open('out.txt', 'w') as fout:
    fout.write(''.join(lines))
"
How to parse a site that returns a different HTML <title>Please wait 5 seconds...</title>,"from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait

driver = webdriver.PhantomJS()
driver.get(""https://kissanime.to"")

# wait for title not be equal to ""Please wait 5 seconds...""
wait = WebDriverWait(driver, 10)
wait.until(lambda driver: driver.title != ""Please wait 5 seconds..."")

print(driver.title)
"
python read from fd directly into bytearray,"import os
import mmap, io, array
import timeit

fn = 'path_to_largish_file'

def fd_readinto_mmap(fd, ba):
    m = mmap.mmap(fd, 0, access=mmap.ACCESS_READ)
    ba.extend(m)
    m.close()

def fd_readinto_fio(fd, ba):
    with io.FileIO(fd, closefd = False) as fio:
    fio.readinto(ba)

def fd_readinto_array(fd, ba):
    ar = array.array('c')
    sz = os.fstat(fd).st_size
    fp = os.fdopen(fd, 'rb')
    ar.fromfile(fp, sz)
    ba.extend(ar)

def fd_readinto_mv(fd, ba):
    stat = os.fstat(fd)
    blksize = getattr(stat, 'st_blksize', 4096)
    bufsize = stat.st_size
    buf = bytearray(bufsize)
    m = memoryview(buf)
    while True:
        b = os.read(fd, blksize)
        s = len(b)
        if not s: break
        m[:s], m = b, m[s:]
    writtenbytes = buffer(buf, 0, bufsize-len(m))
    ba.extend(writtenbytes)

setup = """"""
from __main__ import fn, fd_readinto_mmap, fd_readinto_fio, fd_readinto_array, fd_readinto_mv, reset_fd
import os
openfd = lambda : os.open(fn, os.O_RDONLY)
closefd = lambda fd: os.close(fd)
""""""


reps = 2
tests = {
    'fio' : ""fd=openfd(); fd_readinto_fio(fd, bytearray()); closefd(fd)"",
    'mmap': ""fd=openfd(); fd_readinto_mmap(fd, bytearray()); closefd(fd)"",
    'array': ""fd=openfd(); fd_readinto_array(fd, bytearray());"",
    'mv' : ""fd=openfd(); fd_readinto_mv(fd, bytearray()); closefd(fd)"",
}

width = max(map(len, tests))
for n,t in tests.iteritems():
    time = timeit.timeit(t, setup, number=reps)
    print (""{:%s} {}"" % width).format(n, time)
"
Numbers with hyphens or strings of numbers with hyphens,"import pandas as pd
import numpy as np

df = pd.DataFrame({'foo':['100-200','1000-1100','1100-1200','200-300']*100})

arr = df['foo'].map(lambda item: map(int, item.split('-'))).values
order = np.argsort(arr)
df = df.take(order)
"
How can I use pyparsing to parse nested expressions that have mutiple opener/closer types?,"from pyparsing import *

enclosed = Forward()
nestedParens = nestedExpr('(', ')', content=enclosed) 
nestedBrackets = nestedExpr('[', ']', content=enclosed) 
nestedCurlies = nestedExpr('{', '}', content=enclosed) 
enclosed << (Word(alphas) | ',' | nestedParens | nestedBrackets | nestedCurlies)


data = '(gimme [some {nested, nested [lists]}])' 

print enclosed.parseString(data).asList()
"
SQLite foreign key examples,"# Import the sqlite3 module
import sqlite3
# Create a connection and cursor to your database
conn = sqlite3.connect('example.db')
c = conn.cursor()
# Insert bobby
c.execute(""""""INSERT INTO child VALUES(NULL, 'bobby')"""""")
# The python module puts the last row id inserted into a variable on the cursor
bobby_id = c.lastrowid
# Insert spot
c.execute(""""""INSERT INTO dog VALUES(NULL, 'spot')"""""")
spot_id = c.lastrowid
# Insert the mapping
c.execute(""""""INSERT INTO child_dog VALUES(?, ?)"""""", (bobby_id, spot_id));
# Commit
conn.commit()
conn.close()
"
How to make cards work in python,"ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
suite = ['clubs', 'hearts', 'spades', 'diamonds']

deck = [r + ' ' + s for r in ranks for s in suite]

random.shuffle(deck)
"
a list of tuples into two lists,"zipped = [(12, 1), (123, 4), (33, 4)]
>>> b, c = zip(*zipped)
>>> b 
(12, 123, 33)
>>> c
(1, 4, 4)
"
How can I make django output the day of the week? both in views an in templates,">>> from datetime import datetime
>>> t = Template('It is {{ dt | date:""l"" }} today.')
>>> c = Context({'dt': datetime.today()})
>>> t.render(c)
u'It is Tuesday today.'
"
"Reading CSV files in numpy where delimiter is "",""","import re
import numpy as np

fieldFilter = re.compile(r'^""?([^""]*)""?$')
def filterTheField(s):
    m = fieldFilter.match(s.strip())
    if m:
        return float(m.group(1))
    else:
        return 0.0 # or whatever default

#...

# Yes, sorry, you have to know the number of columns, since the NumPy docs
# don't say you can specify a default converter for all columns.
convs = dict((col, filterTheField) for col in range(numColumns))
data = np.genfromtxt(csvfile, dtype=None, delimiter=',', names=True, 
    converters=convs)
"
"python class, that takes in a couple of variables","class C(object):
    def __init__(self, **kwargs):
        for (variableName, value) in kwargs.items():
            # setattr(), etc.
"
how many logical operator can we use in a statement in python?,"while True:
    vari1=input(""please enter your choice."")
    if vari1.lower() not in ['o','p']:
        print(""please enter a appropriate choice"") 
    else: 
        # do your stuff 
        break
"
Require one out of two keyword arguments,"if {}.viewkeys() < kargs.viewkeys() < {'dollar', 'euro'}:
    raise ValueError('One keyword argument is required: dollar=x or euro=x')
"
Apply time shift on Pandas DataFrame from another column,"import numpy as np
import pandas as pd
np.random.seed(2015)
N = 10
frame = pd.DataFrame({'eventdatetime':pd.date_range('2000-1-1', periods=N, freq='T'), 
                  'seconds': np.random.randint(60, size=N)})
frame.loc[::2, 'seconds'] = np.nan

frame[""s_eventdatetime""] = (
    frame[""eventdatetime""] - np.array(frame['seconds'].fillna(0), dtype='timedelta64[s]'))
"
Reverse a string,a_string[::(-1)]
Adding binary header,"header = struct.pack('lhssls2s',date,version,datatype,indextype,recct,delim,filler)
"
Python: List comprehension list of lists,"[map(lambda x:x+1 ,group) for group in x]
"
Compare 2 .csv files with Python then output results,"import csv

def make_billing_dict(csv_dict_reader):
    bdict = {}
    for entry in csv_dict_reader:
        key = entry['BillingNumber']
        bdict[key] = entry
    return bdict

with open('old.csv') as csv_file:
    old = csv.DictReader(csv_file)
    old_bills = make_billing_dict(old)
"
Extracting content of div with BeautifulSoup,"for x in soup.body.div:
    if x.string:
        print x.string.strip()
"
How to make super() work by manually filling the __class__ cell?,"class foo:
    def bar(self):
        print(__class__)
"
Gather elements from list into lists of lists of equal elements?,"def group(elements, comp_func):
    groups = {}
    for x in elements:
        for y in groups:
            if comp_func(x, y):
                groups[y].append(x)
                break
        else:
            groups[x] = [x]
    return groups
"
Remove character from string if its not in a list...?,">>> ''.join([i for i in contentjoined if i in aminoacids])
'MDVFMKGLSKAKEGVVAAAEKTKQGVAEAAGKTKEGVLYVGSKTKEGVVHGVATVAEKTKEQVTNVGGAVVTGVTAVAQKTVEGAGSIAAATGFVKKDQLGKNEEGAPQEGILEDMPVDPDNEAYEMPSEEGYQDYEPEA'
>>> 
"
NetworkX how to access attributes of objects as nodes,"In [4]: G = nx.Graph()

In [5]: G.add_node(""ONE"", color='red')

In [6]: G.node[""ONE""] # dictionary of attributes
Out[6]: {'color': 'red'}

In [7]: G.add_node(""ONE"",custom_object=one)

In [8]: G.node[""ONE""] # dictionary of attributes
Out[8]: {'color': 'red', 'custom_object': <__main__.myObject at 0x988270c>}
"
can I use the csv module when the end of record marker is not a new line?,">>> import csv
>>> import io
>>> sample = '1¶¦text ""could"" be\'tricky\n\'\\\\¦§2¶¦or easy¦'
>>> input = LineTerminatorTranslator(io.StringIO(sample), '§')
>>> list(csv.reader(input, delimiter='¶', quotechar='¦'))
[['1', 'text ""could"" be\'tricky\n\'\\\\'], ['2', 'or easy']]
"
Python openpyxl select sheet,"from openpyxl import load_workbook
wb2 = load_workbook('test.xlsx')
ws4 = wb2[""New Title""]
"
"What is the best way to write a function that converts an integer of minutes into a string formatted in ""X hour(s) Y minute(s)""?","import datetime
def pprint(val):
   if val == 1:
      return '1 minute'
   x = str(datetime.timedelta(minutes=val))[:-3].split(':')
   r = ''
   if int(x[0]):
       r += x[0]+' hours' if int(x[0]) > 1 else x[0]+' hour'
   if int(x[1]):
       r += ' %s minutes' % int(x[1]) if int(x[1]) > 1 else ' %s minute' % int(x[0])
   return r.strip()
"
Craps simulator on python,"import random
from easygui import *

ans = boolbox(""Would you like to play Craps?"")
while ans == True:
    looping = True
    firstRoll = random.randrange(1,7) + random.randrange(1,7)
    if firstRoll in (7,11):
        result = 1 # initial winning condition
        looping = False
    if firstRoll in (2,3,12):
        result = 0 #initial losing condition
        looping = False

    while looping:
        newRoll = random.randrange(1,7) + random.randrange(1,7)
        if newRoll == firstRoll:
            result = 1 #secondary winning condition
            looping = False
        if newRoll == 7:
            result = 0 #secondary losing condition
            looping = False

    string = """"
    if( result == 1 ):
        string += (""WIN!"")
    else:
        string += (""LOSS!"")
    msgbox(string)
    ans = boolbox(""Would you like to play Craps?"")
"
Pandas compare 2 dataframes by specific rows in all columns,"df = pd.read_csv('raw_df.csv') # raw dataframe
dfp = pd.read_csv('processed_df.csv') # processed dataframe
dfr = df.drop('Tr_id', axis=1)

x = pd.DataFrame()
for col_raw in dfr.columns:
    for col_p in dfp.columns:
        if (dfr.tail(9).astype(int)[col_raw] == dfp[col_p]).all():
            series = dfr[col_raw].head(7).tolist()
            series.append(col_raw)
            x[col_p] = series

x = pd.concat([df['Tr_id'].head(7), x], axis=1)
"
Renaming files according to a set of rules,"import os, shutil, re
def rename_file (original_filename):
    name, extension = os.path.splitext(original_filename)
    #remove one or more dashes, surrounded by non-word characters.
    modified_name = re.sub(r""(\W)-+(\W)"",r""\1\2"",name) 
    new_filename = modified_name + extension
    try:
        # moves files or directories (recursively)
        shutil.move(original_filename, new_filename)
    except shutil.Error:
        print (""Couldn't rename file %(original_filename)s!"" % locals())

target_dir = r""/home/trinity/nmap""
targets = os.listdir(target_dir)
[rename_file(f) for f in targets]
"
How can i make sure \n does not register? when it is in a string,"stringExample = [""a"", ""\n"", ""b"", ""\n"", ""G""]
x = ''.join(stringExample)
y = x.replace(""\n"", """")
print(y)
# abG
"
Pandas Conditionally Concatenate,"print df
0   [a      
1  [b]    [b
2   [a  None

for col in df.columns:
    df.loc[~df[col].str.endswith(']').replace({np.nan: False}), col] = df[col] + ']'
    df[col] = df[col].replace({']': ''})

print df   
   bar  foo
0  [a]     
1  [b]  [b]
2  [a]  NaN
"
Reading a file one byte at a time starting from the end to the begining,">>> fh = open(""e:\\text.txt"",""rb"")
>>> fc = fh.read()
>>> fh.close()
>>> for i in range(len(fc),0,-1):
     print(fc[i-1])
"
Python filter defaultdict,"from collections import defaultdict

myDefaultDict = defaultdict(list, {'ab': [1,2,3], 'c': [4], 'def': [5,6]})  # original 
reduced_d = defaultdict(list, {k: v for k, v in myDefaultDict.items() if len(v) > 1})
"
Python Programming for Absolute Beginner Chapter 5 Challenge 4,">>> for i in range(3):
...     if i == 5:
...         print(i)
...     else:
...         print('Not 5')
... 
Not 5
Not 5
Not 5
"
Randomize a generator,"def random_combinations_sample(lst, element_count, sample_size):
    result = set()
    while len(result) < sample_size:
        indices = random.sample(xrange(len(lst)), element_count)
        sample = tuple(lst[i] for i in sorted(indices))
        result.add(sample)
    return list(result)
"
can I have a mongodb collection as a class attribute in python,"class Collection():
    def __init__(self, db, collection_name):
        self.db = db
        self.collection_name = collection_name

    @property
    def client(self):
        if not hasattr(self.__class__, '_client'):
            self.__class__._client = MongoClient()

        return self.__class__._client

    @property
    def collection(self):
        if not hasattr(self, '_collection'):
            database = getattr(self.client, self.db)
            self._collection = getattr(database, self.collection_name)

        return self._collection
"
Python: Finding unknown repeated word(s) in a list of strings,"import collections

subjects = [
              'Proposal to cooperate - Company Name',
              'Company Name Introduction',
              'Into Other Firm / Company Name',
              'Request for Proposal',
              'Some more Firm / Company Names'
           ]

def phrases(string):
    words = string.split()
    result = []
    for number in range(len(words)):
        for start in range(len(words)-number):
             result.append("" "".join(words[start:start+number+1]))
    return result
"
Making python imports more structured?,"from google.appengine import api
"
"python classes dependant on eachother, how to init?","class A(object):
  def __init__(self):
    self.b = B(self)

class B(object):
  def __init__(self, a):
    self.a = a

a = A()
b = a.b
"
Splitting dict by value of one of the keys,"data1 = [ data[""info""][idx] for idx, x in enumerate(data[""id""]) if x == 1 ]
#data1 = ['info1', 'info2', 'info5', 'info7']
"
Automatically Insert file-modification-time after @date command,"use File::stat;
$fn = $ARGV[0];
$time = localtime stat($fn)->mtime;
open F,""<$fn"";
while (<F>)
{
  s/\@date/\@date $time/;
  print $_;
}
close F;
"
Summing 2nd list items in a list of lists of lists,"[sum([x[1] for x in i]) for i in data]
"
Python/lxml/Xpath: How do I find the row containing certain text?,"In [21]: d={}

In [22]: for i in doc.xpath(u'.//tbody/tr'):
    ...:     if len(i.xpath(u'.//th/div/text()')):
    ...:         d[i.xpath(u'.//th/div/text()')[0]]=\
    ...:         [e.strip() for e in i.xpath(u'.//td/text()')]

In [23]: d.items()[:3]
Out[23]: 
[('Accounts Receivables, Gross',
     ['344,241', '274,894', '218,255', '247,600', '238,596']),
 ('Short-Term Investments', 
     ['27,165', '26,067', '24,400', '851', '159']),
 ('Cash & Short Term Investments',
     ['144,841', '169,760', '189,252', '86,743', '57,379'])] 
"
delete a list element by value,"try:
    a.remove(c)
except ValueError:
    pass"
Replacing Index values using regex matching,"# setting up the indices and the series
arrays = [['@str1', '@str2'], [1, 2]]
ind = pd.MultiIndex.from_arrays(arrays, names=['index', 'other_index'])
series = pd.Series(['s1', 's2'], index=ind)

# index  other_index
# @str1  1              s1
# @str2  2              s2
# dtype: object

vals = zip(*series.index.get_values()) ## values of indices reshaped into a list of tuples
# [('@str1', '@str2'), (1L, 2L)]

# find out where is the index that we want to change
pos = series.index.names.index('index')
# now we can modify the tuple by replacing the strings we do not want
vals[pos] = tuple([x.replace('@', '') for x in vals[pos]])

# Re-create the multi-index
series.index = pd.MultiIndex.from_arrays(vals, names=series.index.names)

print series
# index  other_index
# str1   1              s1
# str2   2              s2
# dtype: object
"
Python Input validation,"while True:
    encrypt = raw_input(""Encrypt or decrypt a file (E/d):"")

    # Convert to lowercase
    encrypt = encrypt.lower()

    # If it's e or d then break out of the loop
    if encrypt in ('e', 'd'):
        break

    # Otherwise, it'll loop back and ask them to input again
"
Fastest way to convert a binary list(or array) into an integer in Python,"# one time precalculation
cache_N = 16  # or much bigger?!
cache = {
   tuple(x): int("""".join([digits[y] for y in x]),2)
   for x in itertools.product((0,1), repeat=cache_N)
}
"
Converting Eastern Arabic numbers to Western Arabic numbers,"S.translate(table) -> unicode

Return a copy of the string S, where all characters have been mapped
through the given translation table, which must be a mapping of
Unicode ordinals to Unicode ordinals, Unicode strings or None.
Unmapped characters are left untouched. Characters mapped to None
are deleted.
"
Python Regex Match Integer After String,"n=1
for match in re.finditer('""id"":([^,]+)', subject):
    if n==1:
        print ""ignoring the first match""
    else:
        print match.group(1)
    n+=1
"
python argparse - pass values WITHOUT command line,"import argparse

argparser = argparse.ArgumentParser()
argparser.add_argument(""--file"", required=True, help=""Video file to upload"")
argparser.add_argument(""--title"", help=""Video title"", default=""Test Title"")
argparser.add_argument(""--description"", help=""Video description"",
    default=""Test Description"")
argparser.add_argument(""--category"", default=""22"",
    help=""Numeric video category. "" +
        ""See https://developers.google.com/youtube/v3/docs/videoCategories/list"")
argparser.add_argument(""--keywords"", help=""Video keywords, comma separated"",
    default="""")
VALID_PRIVACY_STATUSES = (""private"",""public"")
argparser.add_argument(""--privacyStatus"", choices=VALID_PRIVACY_STATUSES,
    default=VALID_PRIVACY_STATUSES[0], help=""Video privacy status."")

#pass in any positional or required variables.. as strings in a list
#which corresponds to sys.argv[1:].  Not a string => arcane errors.
args = argparser.parse_args([""--file"", ""myfile.avi""])

#you can populate other optional parameters, not just positionals/required
#args = argparser.parse_args([""--file"", ""myfile.avi"", ""--title"", ""my title""])


print vars(args)

#modify them as you see fit, but no more validation is taking place
#so best to use parse_args.
args.privacyStatus = ""some status not in choices - already parsed""
args.category = 42

print vars(args)

#proceed as before, the system doesn't care if it came from the command line or not
# youtube = get_authenticated_service(args)    
"
"JSON, lists and recursion in python","for i,x in enumerate(aList):
    if x = somethingSpecial:
        aList[i] = somethingElse
"
Count occurrences of certain words in pandas dataframe,"Definition: df.words.str.contains(self, pat, case=True, flags=0, na=nan)
Docstring:
Check whether given pattern is contained in each string in the array

Parameters
----------
pat : string
    Character sequence or regular expression
case : boolean, default True
    If True, case sensitive
flags : int, default 0 (no flags)
    re module flags, e.g. re.IGNORECASE
na : default NaN, fill value for missing values.
"
How to disable query cache with mysql.connector,con.commit()
"Function which computes once, caches the result, and returns from cache infinitely (Python)","import functools

def gen2func(generator):

    gen = []

    @functools.wraps(generator)
    def wrapper(*args):
        if not gen:
            gen.append(generator(*args))
            return next(gen[0])
        return gen[0].send(args)

    return wrapper

@gen2func
def function_with_static_vars(a, b, c):
    # time-consuming initial setup goes here
    # also initialize any ""static"" vars here
    while True:
        # do something with a, b, c
        a, b, c = yield        # get next a, b, c
"
Python regex string expansion,"def expander(s):
    import re
    from itertools import product
    pat = r""\(([^)]*)\)""
    pieces = re.split(pat, s)
    pieces = [piece.split(""|"") for piece in pieces]
    for p in product(*pieces):
        yield """".join(p)
"
Python beautifulsoup grab table,"from bs4 import BeautifulSoup
import requests

page = 'http://www.airchina.com.cn/www/jsp/airlines_operating_data/exlshow_en.jsp'

r = requests.get(page)

soup = BeautifulSoup(r.text)

div = soup.find('div', class_='mainRight').find_all('div')[1]
table = div.find('table', recursive=False)
for row in table.find_all('tr', recursive=False):
    for cell in row('td', recursive=False):
        print cell.text.strip()
"
Getting the first non None value from list,">>> a = [None, None, None, 1, 2, 3, 4, 5]
>>> next(item for item in a if item is not None)
1
"
"Python, how to put 32-bit integer into byte array","import struct

f=open('myfile.binary', 'rb')
contents=f.read(5)
data=list(contents)
data[0:4]=struct.pack("">i"", 0x12345678)
print data
"
Find the path for Pacman from expanded/explored nodes,"from Queue import Queue
def bfs(numRows, numCols, pacmanPos, grid):
    q = Queue()
    q.put((pacmanPos, [pacmanPos]))
    visited = set([pacmanPos])
    while not q.empty():
        currentPos, path = q.get()
        row, column = currentPos
        if grid[row][column] == '.':
            return len(path), path
        for newPos in [(row, column + 1), (row + 1, column), (row, column - 1), (row - 1, column)]:
            if newPos not in visited and newPos[0] < numRows and newPos[1] < numCols and grid[newPos[0]][newPos[1]] != '%':
                q.put((newPos, path + [newPos]))
                visited.add(newPos)

    return 0, []

r = 7
c = 20

pacmanPos = (3, 9)

grid = ['%%%%%%%%%%%%%%%%%%%%', 
        '%--------------%---%', 
        '%-%%-%%-%%-%%-%%-%-%', 
        '%--------P-------%-%', 
        '%%%%%%%%%%%%%%%%%%-%', 
        '%.-----------------%', 
        '%%%%%%%%%%%%%%%%%%%%']

pathLength, path = bfs(r, c, pacmanPos, grid)
print 'Path Length: {} \nPath: {}'.format(pathLength, path)
"
Login into Server AND MySQL from Python,"def __init__(self):
    self.host = 'some ip address'
    self.user = 'root'
    self.password = '123'
    self.mySqlUser = 'root'
    self.mySqlPassword = 'someotherpassword'
    self.connection = MySQLdb.connect(self.host, self.user, self.password, self.db)
    self.cursor = self.connection.cursor()
"
Obtaining Legendre polynomial form once Legendre coefficients are determined,">>> import numpy as np
>>> timepoints = [1,3,7,15,16,17,19]
>>> myarray = np.array(timepoints)
>>> def mypolynomial(bins, pfinal):   #pfinal is just the estimate of the final array (i'll do quadratic)
...     a,b,c = pfinal  # obviously, for a*x^2 + b*x + c
...     return (a*bins**2) + b*bins + c
>>> mypolynomial(myarray, (1,1,0))
array([  2,  12,  56, 240, 272, 306, 380])
"
Merge Columns within a DataFrame that have the Same Name,"df.groupby(df.columns, axis=1).sum()"
How to get a max string length in nested lists,max(len(word) for word in i)
Python 3.4 - How to create a template property for many classes,"class PositiveValuedProperty():
    def __init__(self, name):
        self.name = ""_"" + name

    def __get__(self, obj, cls=None):
        return getattr(obj, self.name)

    def __set__(self, obj, new_value):
        if new_value < 1:
            new_value = 1
        setattr(obj, self.name, new_value)
"
python stuck in while loop,"while int(send...) == 9 or int(send...) == 9:
"
python convert to yaml formatting issue,"import sys
import ruamel.yaml
from ruamel.yaml.scalarstring import PreservedScalarString

returns = {'file_|-/usr/bin/gen-motd.py_|-/usr/bin/gen-motd.py_|-managed': {'comment': 'File /usr/bin/gen-motd.py updated', 'pchanges': {'diff': '--- \n+++ \n@@ -1,5 +1,7 @@\n #!/usr/bin/env python\n \n+import sys\n+import urllib2\n import socket\n import json\n import time\n'}, 'name': '/usr/bin/gen-motd.py', 'start_time': '16:18:54.060168', 'result': True, 'duration': 99.663, '__run_num__': 1, 'changes': {'diff': '--- \n+++ \n@@ -1,5 +1,7 @@\n #!/usr/bin/env python\n \n+import sys\n+import urllib2\n import socket\n import json\n import time\n'}, '__id__': '/usr/bin/gen-motd.py'}}

for k in returns:
    for k1 in returns[k]:
        if not isinstance(returns[k][k1], dict):
            continue
        for k2 in returns[k][k1]:
            v = returns[k][k1][k2]
            try:
                if '\n' in v:
                    while ' \n' in v:
                        v = v.replace(' \n', '\n') # remove EOL spaces
                    returns[k][k1][k2] = PreservedScalarString(v)
            except TypeError:
                continue

ruamel.yaml.round_trip_dump(returns, sys.stdout)
"
Stab a 3d array,">>> t.reshape(3, 4).T
array([[ 1,  5,  9],
       [ 2,  6, 10],
       [ 3,  7, 11],
       [ 4,  8, 12]])
"
How to order an ndb query by a repeated field that can be empty,"class MyModel(ndb.Model):
  foo = ndb.KeyProperty(repeated=True)
  foo_len = ndb.ComputedProperty(lambda self: return len(self.foo))
"
Adding duplicate keys to JSON with python,"import json
class FakeDict(dict):
    def __init__(self, items):
        # need to have something in the dictionary
        self['something'] = 'something'
        self.items = items

    def __getitem__(self, key):
        return self.last_val

    def __iter__(self):
        subiter = iter(self.items)
        def generator():
            for key, value in self.items:
                self.last_val = value
                yield key

        return generator()

print json.dumps(FakeDict([('a', 5), ('a', 6)]), sort_keys=False)
"
Dynamic Python Array Slicing,">>> a = np.random.rand(3, 4, 5)
>>> a[0, :, 0]
array([ 0.48054702,  0.88728858,  0.83225113,  0.12491976])
>>> a[(0, slice(None), 0)]
array([ 0.48054702,  0.88728858,  0.83225113,  0.12491976])
"
Assigning a variable NaN in python without numpy,">>> from decimal import Decimal
>>> b = Decimal('nan')
>>> print(b)
NaN
>>> print(repr(b))
Decimal('NaN')
>>>
>>> Decimal(float('nan'))
Decimal('NaN')
>>> 
>>> import math
>>> math.isnan(b)
True
"
converting 3d lists to 2d lists in python,"import itertools as it
l = list(it.chain(*it.chain(*sets)))
print(list(chunks(l,3)))
# -> [['a', 'c', 'a'], ['e', 'b', 'c'], ['b', 'e', 'a'], ['z']]
"
How to extract specific lines from a textfile and store in a list(python),"import re
student_num = re.compile(""[0-9]{6}"") // 6 digits
with open(""data_file"") as f:
    for line in f:
        if student_num.match(line.strip()):
            print line.strip()
"
"How can I quickly convert to a list of lists, insert a string at the start of each element?",">>> import numpy as np
>>> data = [1,2,3]
>>> a = np.empty([len(data),2], dtype=object)
>>> a
array([[None, None],
       [None, None],
       [None, None]], dtype=object)
>>> a[:,0]='a'
>>> a
array([[a, None],
       [a, None],
       [a, None]], dtype=object)
>>> a[:,1]=data
>>> a
array([[a, 1],
       [a, 2],
       [a, 3]], dtype=object)
>>> data2=np.array([[1,2],[3,4],[5,6]])
>>> data2
array([[1, 2],
       [3, 4],
       [5, 6]])
>>> b = np.empty([len(data2),3],dtype=object)
>>> b
array([[None, None, None],
       [None, None, None],
       [None, None, None]], dtype=object)
>>> b[:,0]='a'
>>> b
array([[a, None, None],
       [a, None, None],
       [a, None, None]], dtype=object)
>>> b[:,1:]=data2
>>> b
array([[a, 1, 2],
       [a, 3, 4],
       [a, 5, 6]], dtype=object)
"
Tkinter: How to create choice box,"from Tkinter import *

root = Tk()

choices = ['GB', 'MB', 'KB']
variable = StringVar(root)
variable.set('GB')

w = OptionMenu(root, variable, *choices)
w.pack(); root.mainloop()
"
Want to count the number of values in a column that meet a condition,"np.count_nonzero(fs[0:a] >= 0.75)
"
"Letters inside ""int(input(())""","'What is the answer to {} x {}?'.format(num1, num2)
"
Setting values with multiindex in pandas,"import pandas as pd; 
import random
arrays = [['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],
      ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]

#add for testing
np.random.seed(0)
tuples = list(zip(*arrays))
index = pd.MultiIndex.from_tuples(tuples, names=['first', 'second'])
df = pd.concat([pd.Series(np.random.randn(8), index=index), pd.Series(np.random.randn(8), index=index)], axis=1)
"
How to use the same line of code in all functions?,"def get_file_contents(filename):
    with open(filename, 'r') as f:
        return f.read()

def word_count(filename):
    return len(get_file_contents(filename).split())

def line_count(filename):        
    return len(get_file_contents(filename).splitlines())

def character_count(filename):
    return len(get_file_contents(filename))
"
"Create an import statement using variable ""interpolation""","process = __import__('gateway_interface.'+gateway_file,fromlist=['foo']).process
"
Extra arguments for __str__ and __format__,"class Wrapper:
    def __init__(self, o, context):
        self._o = o
        self._context = context
    def __getattr__(self, name):
        return getattr(self._o, ""get_"" + name)(self._context)
"
Group time ranges by boolean values in pandas,"import pandas as pd

Timestamp = pd.Timestamp
ts = pd.Series({Timestamp('2014-09-09 08:01:07.617000'): False,
                Timestamp('2014-09-09 08:01:08.617000'): False,
                Timestamp('2014-09-09 08:01:09.616000'): False,
                Timestamp('2014-09-09 08:01:10.616000'): False,
                Timestamp('2014-09-09 08:01:11.617000'): True,
                Timestamp('2014-09-09 08:01:12.616000'): True,
                Timestamp('2014-09-09 08:01:13.616000'): True,
                Timestamp('2014-09-09 08:01:14.617000'): True,
                Timestamp('2014-09-09 08:01:15.616000'): True,
                Timestamp('2014-09-09 08:01:16.616000'): False,
                Timestamp('2014-09-09 08:01:17.616000'): False,
                Timestamp('2014-09-09 08:01:18.616000'): False,
                Timestamp('2014-09-09 08:01:20.116000'): False,
                Timestamp('2014-09-09 08:01:21.116000'): False})

df = ts.reset_index()
df['groupno'] = df[0].diff().cumsum().fillna(0)

result = df.groupby(['groupno'])['index'].agg(['first', 'last'])
print(result)
"
How to get all combinations of list groupings of at least a certain size?,"def groupings(lst, min_size):

    lst = list(lst)

    # List for storing our final groupings
    results = []

    # Unfinished grouping, tuple storing the group and remaining sub-list
    # Initialize with the empty group and original list
    remaining = [([], lst)]

    # Continue as long as we have unfinished groupings
    while len(remaining):

        # Get an unfinished grouping 
        current_group, current_lst = remaining.pop()
        n = len(current_lst)

        # If the last part of the list is big enough,
        # then record the grouping
        if n >= min_size:
            results.append(current_group + [current_lst])

        # Otherwise, discard it
        else:
            continue

        # Helper set for getting remainder below
        all_indices = set(range(n))

        # Iterate the group length from min_size to the length of our current list
        for r in range(min_size, n - 1):

            # This is a modified version of itertools.combinations()
            # http://docs.python.org/3.3/library/itertools.html#itertools.combinations

            # Add the first combination to our remaining list
            indices = list(range(r))
            remainder = current_lst[r:]
            group = current_group + [current_lst[:r]]
            remaining.append((group, remainder))

            while True:
                for i in reversed(range(r)):
                    if indices[i] != i + n - r:
                        break
                else:
                    break

                indices[i] += 1
                for j in range(i+1, r):
                    indices[j] = indices[j-1] + 1

                # If one of the remaining indexes is less than the minimum used index,
                # then a different iteration will handle it, so discard this one
                min_index = min(indices)
                remainder = []
                for i in all_indices.difference(indices):
                    remainder.append(current_lst[i])
                    if i < min_index:
                        break
                else:
                    # Add this combination to our remaining list
                    group = current_group + [[current_lst[i] for i in indices]]
                    remaining.append((group, remainder))

    return results
"
Testing whether a string has repeated characters,"set(i for i in a if a.count(i)>1)
"
Get current URL in Python,self.request.url
Fastest way in python to search for multiple items in a body of text,"regex = re.compile('|'.join(re.escape(x) for x in searchList))
found = regex.findall(cleanText)
"
Convert a list of sample dates into GMT,"import pytz
def to_utc(dt):
    try:
        return dt.astimezone(pytz.utc)
    except ValueError:
        return pytz.utc.localize(dt)
"
Reverse an input using tuples Python,"my_input = input('Your phrase: ')
print(*reversed(my_input.split()))  # Python 3
"
Python style: multiple-line conditions in IFs,"if cond1 == 'val1' and cond2 == 'val2' and \
                       cond3 == 'val3' and \
                       cond4 == 'val4':
    do_something
"
Python Pandas: Using an array to choose different columns for each value of a new column,"condition = df['col A'].abs() >= df['col B'].abs()
df['new col'] = np.where(condition, df['col A'], df['col B'])
"
theano (python): elementwise gradient,"x = T.fscalar()
y = T.fvector()
z = T.concatenate([x.reshape((1,)), y.reshape((-1,))])

e = (z ** 2).sum()
g = T.grad(e, wrt=x)

ff = theano.function([x, y], [e, g])
"
Python Tokenization,"def tokenizer(l):
    prev_i = 0
    for (i, c) in enumerate(l):
        if c in ',.?!- ':
            if prev_i != i:
                yield l[prev_i: i]
            yield c
            prev_i = i + 1
    if prev_i != 0:
        yield l[prev_i: ]
"
Regex that find words with exactly two 'a',"^(?:[^a]*a){2}[^a]*$
"
configparser loading config files from zip,"import zipfile
import configparser

zf = zipfile.ZipFile(""compressed.zip"")
zf_config = zf.open(""config_data.conf"", ""rU"")
zf_config_data = zf_config.read().decode('ascii')

config = configparser.ConfigParser()
config.read_string(zf_config_data)
assert config['today']['lunch']=='cheeseburger'
"
Split string without non-characters,">>> s = ':foo [bar]'
>>> s.split()
[':foo', '[bar]']
>>> [word.strip(':[]') for word in s.split()]
['foo', 'bar']
"
"sql, matching row values obtained from first table to the column names of second table without loop","memdata.execute(""select * from tabletwo where tabletwo.Gene_ID == 'NFYA'"")
nfya_row = {desc[0]: column for desc, column in zip(memdata.getdescription(), memdata.next())}

memdata.execute(""SELECT tableone.SampleID from tableone WHERE tableone.Diagnos=='RH'"")
for row in memdata:
    sampleID = row[0]
    print sampleID, nfya_row[sampleID]
"
beautifulsoup parsing - dealing with superscript?,"from bs4 import BeautifulSoup as bs
soup = bs(""""""<td class=""yfnc_tablehead1"" width=""74%"">Market Cap (intraday)
<font size=""-1""><sup>5</sup></font>:</td><td class=""yfnc_tabledata1"">
<span id=""yfs_j10_aal"">33.57B</span></td></tr>"""""")

soup.find(""sup"", text=""5"").parent.parent.find_next_sibling(""td"").find(""span"").text
# u'33.57B'
"
Python: reading integers from a file,"print sum([int(i) for i in f])
"
Storing bash commands in python list,"files = os.listdir(""."")
"
Efficiently finding intersecting regions in two huge dictionaries,"import pandas as pd  #install this, and read de docs
from StringIO import StringIO #You dont need this

#simulating a reading the file 
first_file = """"""contig17 GRMZM2G052619_P03 x
contig33 AT2G41790.1 x
contig98 GRMZM5G888620_P01 x
contig102 GRMZM5G886789_P02 x
contig123 AT3G57470.1 x""""""

#simulating reading the second file
second_file = """"""y GRMZM2G052619_P03 y
y GRMZM5G888620_P01 y
y GRMZM5G886789_P02 y""""""

#here is how you open the files. Instead using StringIO
#you will simply the file path. Give the correct separator
#sep=""\t"" (for tabular data). Here im using a space.
#In name, put some relevant names for your columns
f_df = pd.read_table(StringIO(first_file), 
                     header=None, 
                     sep="" "", 
                     names=['a', 'b', 'c'])
s_df = pd.read_table(StringIO(second_file), 
                     header=None, 
                     sep="" "", 
                     names=['d', 'e', 'f'])
#this is the hard bit. Here I am using  a bit of my experience with pandas
#Basicly it select the rows in the second data frame, which ""isin""
#in the second columns for each data frames. 
my_df = s_df[s_df.e.isin(f_df.b)]
"
Python getattr from locals() fails with AttributeError,">>> type(locals())
<type 'dict'>
>>> dir(locals())
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> getattr(locals(), 'keys')
<built-in method keys of dict object at 0x10028f168>
"
LXML - Sorting Tag Order,"from lxml import etree

data = """"""<X>
    <X03>3</X03>
    <X02>2</X02>
    <A>
        <A02>Y</A02>
        <A01>X</A01>
        <A03>Z</A03>
    </A>
    <X01>1</X01>
    <B>
        <B01>Z</B01>
        <B02>X</B02>
        <B03>C</B03>
    </B>
</X>""""""

doc = etree.XML(data,etree.XMLParser(remove_blank_text=True))

for parent in doc.xpath('//*[./*]'): # Search for parent elements
  parent[:] = sorted(parent,key=lambda x: x.tag)

print etree.tostring(doc,pretty_print=True)
"
Robot Motion in Python,">>> import itertools
>>> def alternator(*values):
...     return itertools.cycle(values)
... 
>>> def increasor(value_1, dvalue_1, steps=2):
...     counter = itertools.count(value_1, dvalue_1)
...     while True:
...             repeater = itertools.repeat(counter.next(), steps)
...             for item in repeater:
...                 yield item
... 
>>> def motion_plan(x_plan, y_plan, steps=6):
...     while steps > 0:
...         yield (x_plan.next(), y_plan.next())
...         steps -= 1
... 
>>> for pos in motion_plan(alternator('x1', 'x1+dx'), increaser('y1', '+dy'): #Location 1 motion plan
...     print pos
... 
('x1', 'y1')
('x1+dx', 'y1')
('x1', 'y1+dy')
('x1+dx', 'y1+dy')
('x1', 'y1+dy+dy')
('x1+dx', 'y1+dy+dy')
"
sum even integer in a list of integer (without loop),"def sumTest(list_Of_Integers):
    return sum([x for x in list_Of_Integers where x % 2 == 0])
"
Use argparse to call different functions,"parser = ArgumentParser()
parser.add_argument(""function"", 
                    nargs=""?"",
                    choices=['function1', 'function2', 'function2'],
                    default='function1',
                    )
args, sub_args = parser.parse_known_args()

if args.function == ""function1"":
    parser = ArgumentParser()
    parser.add_argument('-a','--a')
    parser.add_argument('-b','--b')
    parser.add_argument('-c','--c')
    args = parser.parse_args(sub_args)
    function1(args.a, args.b, args.c)
elif args.function == ""function2"":
    ...
elif args.function == ""function3"":
    ...
"
Add two matrices in python,"def listmatrixMap(f, *matrices):
    return \
        [
            [
                f(*values) 
                for c,values in enumerate(zip(*rows))
            ] 
            for r,rows in enumerate(zip(*matrices))
        ]
"
how to variate a parameter in an equation python,"def solve_equation(start, end, equation):
    for x in xrange(start, end):
        yield equation(x)

def my_equation(x):
    wt=647
    wp=119000
    e0=10983849
    e1 =e0-(wp**2/(w*2+wt))
    return e1

print solve_equation(0, 100, my_equation)
print solve_equation(500, 1000, my_equation)
"
"How to call numpy/scipy C functions from Cython directly, without Python call overhead?","def pdf(self,x,*args,**kwds):
    loc,scale=map(kwds.get,['loc','scale'])
    args, loc, scale = self._fix_loc_scale(args, loc, scale)
    x,loc,scale = map(asarray,(x,loc,scale))
    args = tuple(map(asarray,args))
    x = asarray((x-loc)*1.0/scale)
    cond0 = self._argcheck(*args) & (scale > 0)
    cond1 = (scale > 0) & (x >= self.a) & (x <= self.b)
    cond = cond0 & cond1
    output = zeros(shape(cond),'d')
    putmask(output,(1-cond0)+np.isnan(x),self.badvalue)
    if any(cond):
        goodargs = argsreduce(cond, *((x,)+args+(scale,)))
        scale, goodargs = goodargs[-1], goodargs[:-1]
        place(output,cond,self._pdf(*goodargs) / scale)
    if output.ndim == 0:
        return output[()]
    return output
"
argparse: map user input to defined constant,"import argparse

class MappedParser(argparse.ArgumentParser):
    mapping = {} #backup if you don't use def_mapping

    def def_mapping(self,**options):
        self.mapping = options

    def parse_args(self,args=None,namespace=None):
        result = argparse.ArgumentParser.parse_args(self,args,namespace)
        for name,options in self.mapping.items(): #by default this is is empty so the loop is skipped
            if name in result:
                key = getattr(result,name)
                if key in options:
                    replace_with = options[key]
                    setattr(result,name,replace_with)
                else:
                    self.error(""option {name!r} got invalid value: {key!r}\n must be one of {valid}"".format(name=name,key=key,valid=tuple(options.keys())))
                    return #error should exit program but I'll leave this just to be safe.
        return result
"
Getting the Current Table in Numbers (Python/Appscript),">>> nu = app('Numbers')
>>> for sheet in nu.documents.first.sheets():
...   for table in sheet.tables():
...     if table.selection_range():
...        print table.name()
"
Python's list comprehensions and other better practices,"result = []

for sublist in response:
    for item in sublist:
        result.append(item)
"
python - modify a list of strings via regex,"[re.sub('(\w+)(\s*(==|>=).*?)(\s*&|$)', r""(df['\1']\2)\4"", s) for s in query_var]
"
Replacing complex-valued arguments of generic function object by two real-valued arguments,"def complex_unroll(f, are_complex):

    # This function will have access to are_complex and f through python closure
    # *args give us access to all parameters as a list
    def g(*args, **kwargs):
        # new_args stores new list of parameters, the complex ones
        new_args = []
        # arg_id is iterator used to keep track where are we in the original list
        arg_id = 0
        for is_complex in are_complex:        
            if is_complex:
                # if we request complex unroll, we merge two consequtive params
                new_args.append(args[arg_id] + 1J*args[arg_id+1])
                # and move iterator 2 slots
                arg_id += 2
            else:
                # otherwise, just copy the argument
                new_args.append(args[arg_id])
                arg_id += 1
        # finally we return a call to original function f with new args
        return f(*new_args, **kwargs)

    # our unroll function returns a newly designed function g
    return g
"
How should I select a colored line in a picture using Python?,"from PIL import Image

img = Image.open('a.png')
width, height = img.size

for y in range(0, height):
    if img.getpixel((1, y)) == (255, 255, 255):
        print ""White line on Y == {}"".format(y)
"
2D Dictionary or other data structure where order of keys doesn't matter,"In [55]: timeit my_dict[k]
10000000 loops, best of 3: 103 ns per loop

In [56]: timeit get_value(my_dict, 'key1', 'key2')
1000000 loops, best of 3: 455 ns per loop

In [57]: timeit get_value(my_dict, 'key2', 'key1')
1000000 loops, best of 3: 455 ns per loop
"
How do I format the output of this Python program?,"for windspeed in range(5, 55, 5):
    for temp in range(-20, 70, 10):
        print ""%3d"" % int(35.74 + (0.6215*(temp)) - (35.75* windspeed**0.16) + (0.4275*(temp)) * (windspeed**0.16)),
    print
"
generating random numbers in python with percentage function on what selected value in python,"import random
my_list = ['A'] * 5 + ['B'] * 5 + ['C'] * 90
random.choice(my_list)
"
Slice vs Stride while reversing string,">>> slice(None,None,-1).indices(5)
(4, -1, -1)
>>> slice(None,None,1).indices(5)
(0, 5, 1)
"
Python matching regex multiple times in a row (not the findall way),">>> s= 'a. v. b. split them a.b. split somethinf words. THen we say' some more 
>>> re.findall(r'(([ a-zA-Z0-9]{1,3}\.){2,4})',s)
[('a. v. b.', ' b.'), ('m a.b.', 'b.')]
"
python ordered dict issue,"od = OrderedDict()
import csv

with open(""data.csv"") as f, open(""new.csv"", ""w"") as out:
    r = csv.DictReader(f,fieldnames=['Location', 'MovieDate', 'Formatted_Address', 'Lat', 'Lng'])
    wr = csv.DictWriter(out, fieldnames=r.fieldnames)
    for row in r:
        od.setdefault(row[""Location""], dict(Location=row[""Location""], Lat=row[""Lat""], Lng=row[""Lng""],
                                        MovieDate=[], Formatted_Address=row[""Formatted_Address""]))

        od[row[""Location""]][""MovieDate""].append(row[""MovieDate""])
    for loc, vals in od.items():
        od[loc][""MovieDate""]= "", "".join(od[loc][""MovieDate""])
        wr.writerow(vals)
"
Radical Use of Admin's Interface,"{% extends ""admin/base_site.html"" %}
"
Repeat a string with a subscript over a given range in python,"['abc' + str(x) for x in range(1, 6)]
"
Convert u'\xe0' to '\u00E0' in Python 2.x?,">>> s = u'\xe0'
>>> import json
>>> json.dumps(s)
'""\\u00e0""'
"
How can I call all items in a list item?,"int("""".join(group))
"
Manually raising (throwing) an exception,"raise ValueError('represents a hidden bug, do not catch this')"
Python re.findall matches last the last match instead of the first,"GaryStokesKSPS&&&&RT @PBS: .@SciGirls Season 3 is now on @YouTube! Watch now: ...
\________________/\_____________________________________/@\_____/
     (.*)&&&&                 greedy match .*              group
"
open .dot formatted graph from python,"import pygraphviz as pgv
G=pgv.AGraph()
G.add_edge('1','2')
G.layout()
G.draw('file.png')
"
Checking if number is within more or less range in Python,"diff = abs(guess - random_number)
if diff >= 50:
    print(""Really cold!"")
elif diff >= 40:
    print(""Cold."")
...
elif diff >= 5:
    print(""Getting really hot!"")
"
How do I serialise JSON keys in a Python list?,"KEYS_TO_PRINT = [""id"", ""channel.title""]
my_data = {""items"": [
    {""id"": 1, ""channel"": {""channelid"": ""channelid1"", ""title"": ""nailed_it1""}},
    {""id"": 2, ""channel"": {""channelid"": ""channelid2"", ""title"": ""nailed_it2""}},
    {""id"": 3}
]}
this_row = []

for item in my_data[""items""]:
    for export_key in KEYS_TO_PRINT:
        value = item
        for key in export_key.split("".""):
            value = value.get(key)
            if value == None: break
        this_row.append(str(value).encode('utf-8') if value != None else """")
print this_row
"
How do I write a unix filter in python?,"import sys
while True:
    char = sys.stdin.read(1)
    if not char:
        break
    if char != 'x':
        sys.stdout.write(char)
        sys.stdout.flush()
"
filling last known data with pandas,"df.groupby('id', as_index=False).fillna(method='ffill')
"
Does Python-VIPS support assignment to part of its image ?,"#!/usr/bin/python

import sys
import random

from gi.repository import Vips

# make vips leaktest itself .. this also reports a memory high-water mark
# you'll get a small speedup if you comment this out
Vips.leak_set(True)

composite = Vips.Image.black(10000, 10000)

for filename in sys.argv[1:]:
    tile = Vips.Image.new_from_file(filename, access = Vips.Access.SEQUENTIAL)
    x = random.randint(0, 10000)
    y = random.randint(0, 10000)
    composite = composite.insert(tile, x, y)

composite.write_to_file(""output.tif"")
"
Python: How can i find a directory that matches the first 3 characters from a string?,"import os
[i[0] for i in os.walk('/path/to/directory/') if i[0].split(""/"")[-1].startswith(X)]
"
Python: improve in elegant way (code saving) a function in order to avoid several Statements,"import shapefile
from liblas import file as lasfile

pattr = {
    ""i"": 'intensity',
    ""r"": 'return_number',
    ""n"": 'number_of_returns',
    ""s"": 'scan_direction',
    ""e"": 'flightline_edge',
    ""c"": 'classification',
    ""a"": 'scan_angle',
    }

wattr = {
    ""i"": 'Intensity',
    ""r"": 'Return',
    ""n"": 'NumberRet',
    ""s"": 'ScanDir',
    ""e"": 'FlightEdge',
    ""c"": 'Class',
    ""a"": 'ScanAngle',
    }

def LAS2SHP(inFile, outFile=None, parse = 'irnseca'):
    w = shapefile.Writer(shapefile.POINT)
    w.field('Z','C','10')
    for key in parse:
        w.field(wattr[key],'C','10')
    for p in lasfile.File(inFile,None,'r'):
        w.point(p.x,p.y)
        pdata = [p.z] + [getattr(p, pattr[key]) for key in parse]
        pdata = map(float, pdata)
        w.record(*pdata)       
    if outFile == None:
        inFile_path, inFile_name_ext = os.path.split(os.path.abspath(inFile))
        inFile_name = os.path.splitext(inFile_name_ext)[0]
        w.save(""{0}\\{1}.shp"".format(inFile_path,inFile_name))
    else:
        w.save(outFile)
"
Create empty csv file with pandas,"import glob
import pandas as pd

fmask = 'MonthlyDataSplit/Day/Day*.csv'
df = pd.concat((pd.read_csv(f, sep=',', usecols=['Year','Month','Day','AirTemperature']) for f in glob.glob(fmask)))
df.groupby(['Year','Month','Day']).mean().to_csv('my_csv.csv')
"
Trying to retrieve data from a template in a website using urllib2 and BeautifulSoup,"dudes = []
for dude in soup.find_all('div', 'well well-small'):
    dude_info = {}
    dude_info['Name'] = dude.parent['id']
    dude_info['Age'] = dude.find('div', 'age meta').contents[1]
    dude_info['Race'] = dude.find('div', 'race meta').contents[1]
    dude_info['Cause'] = dude.find('div', 'cause meta').contents[1]
    dude_info['Neighborhood'] = dude.find('div', 'neighborhood meta').contents[1]
    dude_info['Time'] = dude.find('div', 'time meta').contents[-1].next_element

    dudes.append(dude_info)
"
"Instead of continue, rerun function","from random import randrange

def sattoloCycle(items):
    i = len(items)
    while i > 1:
        i = i - 1
        j = randrange(i)  # 0 <= j <= i-1
        items[j], items[i] = items[i], items[j]
    return
"
How to Print the information using selenium,"pageIndex = 1
while True:  # Keep looping through all pages
    # Navigate to the search page
    browser.get(""https://www.houz.com/page_num=""+ str(pageIndex))
    time.sleep(6)

    links = browser.find_elements_by_css_selector('div > h3 > a')
    jobs = browser.find_elements_by_css_selector('div > div.description')

    for link, title in zip(links, jobs):
        url = link.text
        jobtitle = title.text


        with open(""1Exportdata.csv"", ""a"") as csvFile:
            csvFile.write(url + "","" + jobtitle + ""\n"")

    pageIndex += 1
    if pageIndex == 5010:
        browser.close()
"
Python3 - How can I determine the existence of element values?,">>> 'a' in mylist
True
>>> 'foo' in mylist
False
"
OpenCV: setting all pixels of specific BGR value to another BGR value,"im2[np.where((im2 == [0,255,0]).all(axis = 2))] = [0,255,255]
"
How can I accelerate the array assignment in python?,"def foo1(annot, simi_matrix_word):
    N = annot.shape[0]
    simi_matrix_img = np.zeros((N,N))
    for i in range(N):
        for j in range(i + 1):
            if i != j:
                x_idx = np.nonzero(annot[i])[0]
                y_idx = np.nonzero(annot[j])[0]
                idx = np.ix_(x_idx, y_idx)
                # print(idx, simi_matrix_word[idx])
                score = simi_matrix_word[idx].mean()
                simi_matrix_img[i, j] = score
            else:
                simi_matrix_img[i, j] = 1.0
    return simi_matrix_img
"
Find the element with the largest area (main content area)?,"function scanSizes(root) {
  return [].reduce.call(root, function(sizes, node) {
    var bounds = node.getBoundingClientRect();
    sizes.push({tag: node.outerHTML, area: bounds.width * bounds.height});
    var children = node.querySelectorAll(""*"");
    if (children.length > 0)
      sizes.push.apply(sizes, scanSizes(children));
    return sizes;
  }, []).sort(function(x, y) {
    var a = x.area, b= y.area;
    return a > b ? -1 : a < b ? 1 : 0;
  });
}

var sizes = scanSizes(document.querySelectorAll(""body > *""));

// sizes[0].tag contains the largest html tag (as a string)
// sizes[0].area its area size in pixels (width * height)
"
Python: Decode base64 multiple strings in a file,"import base64

with open(""my_file.txt"") as f, open(""original_b64.txt"", 'w') as g:
    encoded = f.read()
    decoded = base64.b64decode(encoded)
    g.write(decoded)
"
"Python equivalent to ""find -type f""","os.path.relpath(fname, '/path/to/directory')
"
Sum a nested list of a nested list of a nested list of integers,">>> lis = [1, [1, [2, [3]]]]
>>> sum(flatten(lis))
7
>>> lis = [1, [1, 2, 3]]
>>> sum(flatten(lis))
7
>>> lis = [1, [1, [2, 3]]]
>>> sum(flatten(lis))
7
"
Python long list separated,"size_of_new = 5
print zip(*[iter(x)]*size_of_new)
"
How to make a python function as callback of a c++ function,"class MyVisitor(ChildrenVisitor): 
  def __init__(self):
    ChildrenVisitor.__init__(self,self)

  def visit(self):
    # do whatever you want
"
Using BeautifulSoup get the text from the next span where the previous contained,"In [26]: for el in soup(class_=re.compile(r'inline')):
   ....:     print(el.get_text(strip=True))
   ....:
ISCED:
0410: Business & Admin not defined
"
Python regular expression to match either a quoted or unquoted string,"s = 'term:foo term:""foo bar"" term:bar foo term:""foo term:'
re.findall(r'(?<=term:)[^"" ]+|(?<=term:"")[^""]+(?="")', s)
"
how to get the last part of a string before a certain character?,print(x.rpartition('-')[0])
Python Blackjack - Count Hand of Players,"scores = {""A"":1, ""T"":10, ""J"": 10, ""K"":10, ""Q"": 10, }
def calculate_hand(hand):
    hand_value = 0
    ace = False
    for card in hand:
        if card[0] == ""A"":
            ace =True;
        if card[:-1] in scores:  #used [:-1] insted of [0] because at first, thought it is 10 instead of T
            hand_value += scores[card[:-1]]
        else:
            hand_value += int(card[:-1])
    if ace and hand_value + 10 < 22:
        hand_value += 10
    return hand_value

hand1 = ['AD', 'AC']
hand2 = ['6C', 'JC']
hand3 = ['7D', 'AC']   
value1 = calculate_hand(hand1) #12
value2 = calculate_hand(hand2) #16
value3 = calculate_hand(hand3) #18
"
Random flipping and RGB jittering/slight value change of image?,"import cv2
import numpy as np
from pylab import *

img = cv2.imread( r'C:/Users/Public/Pictures/Sample Pictures/Penguins.jpg' )
img = cv2.cvtColor(img, cv2.cv.CV_BGR2RGB)  # cv2 defaul color code is BGR
h,w,c = img.shape # (768, 1024, 3)

noise = np.random.randint(0,50,(h, w)) # design jitter/noise here
zitter = np.zeros_like(img)
zitter[:,:,1] = noise  

noise_added = cv2.add(img, zitter)
combined = np.vstack((img[:h/2,:,:], noise_added[h/2:,:,:]))

imshow(combined, interpolation='none')
"
selecting words that only have specific letters in them,"s.issubset(t)    s <= t  test whether every element in s is in t
s.issuperset(t)  s >= t  test whether every element in t is in s
"
Pythonic inverse dict non-unique mappings,"dict1 = {'a':[1,2,3], 'b':[1,2,3,4], 'c':[1,2]}
dict2 = {item: [key for key in dict1 if item in dict1[key]] for value in dict1.values() for item in value}
"
PyYaml - Dump unicode with special characters ( i.e. accents ),"# coding: utf-8

import codecs
import raumel.yaml as yaml

file_name = r'toto.txt'

text = u'héhéhé, hûhûhû'

textDict = {""data"": text}

with open(file_name, 'w') as fp:
    yaml.dump(textDict, stream=fp, allow_unicode=True)

print('yaml dump dict 1   : ' + open(file_name).read()),

f = codecs.open(file_name,""w"",encoding=""utf-8"")
f.write('yaml dump dict 2   : ' + yaml.dump(textDict, allow_unicode=True,
                                            ).decode('utf-8'))
f.close()
print(open(file_name).read()),
"
Convert list of tuples of mixed data types into all string,">>> lst = [(1, 'John', 129L, 37L), (2, 'Tom', 231L, 23L)]
>>> [tuple(str(x) for x in xs) for xs in lst]
[('1', 'John', '129', '37'), ('2', 'Tom', '231', '23')]
"
How do I find the intersection of two line segments?,"from shapely.geometry import LineString

line1 = LineString([(0,0), (1,0), (1,1)])
line2 = LineString([(0,1), (1,1)])

print(line1.intersection(line2))
"
Parsing a file without BeautifulSoup,"import re
from bs4 import BeautifulSoup

matches = {}
_catalog_link = re.compile(r'^http://www\.bricklink\.com/catalogItem\.asp\?P=')

soup = BeautifulSoup(htmlpage)

for match in soup.find_all(text=re.compile(r'Match #\d+')):
    match_number = match.string.split('#', 1)[-1]
    matches[match_number] = matched_links = []
    # Find the parent table row
    row = next(p for p in match.parents if p.name == 'tr')
    # next rows hold the links
    for sibling in row.next_siblings:
        if sibling.name != 'tr':
            continue
        links = sibling.find_all('a', href=_catalog_link)
        if not links:
            break
        matched_links.extend(l.string for l in links)
"
Splitting on last delimiter in Python string?,"s.rsplit(',', 1)"
Sorting objects of a class based on a particular attribute,"import pickle
class vehicle:
    def __init__(self, vehicletype, fueltype, cost):
        self.vehicletype = vehicletype
        self.fueltype = fueltype
        self.cost = cost
    def GetVdata(self):
        self.vehicletype = raw_input(""enter the vehicle type: "")
        self.fueltype = raw_input(""enter the fuel type: "")
        self.cost = input(""enter the cost of the vehicle: "")
    def ShowVdata(self):
        print ""vehicle type : "", self.vehicletype, ""\n"" , ""fuel type: "", self.fueltype , ""\n"", ""cost : "", self.cost

dat1 = vehicle(""4 wheeler"", ""diesel"" , 2000000)
dat2 = vehicle(""2 wheeler"", ""petrol"" , 1000000)
dat3 = vehicle(""2 wheeler"", ""petrol"",  5000000)
dat4 = vehicle(""4 wheeler"", ""diesel"",  3000000)

data = [dat1, dat2, dat3, dat4]
costs = [i.cost for i in data]
costs.sort()

File = open('transport.dat' , 'wb')

for value in costs:
    for i in range(len(data)):
        if data[i].cost == value:
            pickle.dump(data[i], File)
File.close()

File = open('transport.dat','rb')
try:
    while True:
        print""\n""
        output = pickle.load(File)
        output.ShowVdata()
except EOFError:
    File.close()
"
"Python recursive function error: ""maximum recursion depth exceeded""","def primeList(n, i=2, acc=None):
    return i > n and (acc or []) or primeList(n, i+1, (acc or []) + (isPrime(i) and [i] or []))
"
"In Python, is it possible to escape newline characters when printing a string?",">>> print(r""abc\ndef"")
abc\ndef
"
Writing the filter() function using for/while loops,"[i for i in lst if i == y]
"
Tuple unpacking,">>> names = ('Elizabeth', 'Peter, Angela, Thomas')
>>> [y for x in names for y in x.split(', ')]
['Elizabeth', 'Peter', 'Angela', 'Thomas']
"
python: regex only gets the last occurrence,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re

text = ""aaaa[ab][cd][ef]""

var = []
if re.match(""^(\w+)(\[\w+\])*$"", text):
        a = re.findall(""^\w+"", text)[0]
        var.append(a)
        b = re.findall(""\[\w+\]"", text)
        for i in b:
                var.append(i)
print var
"
zip two values from the dictionary in Python,">>> zip(d['a0'], d['a1'])
[(1, 4), (2, 5), (3, 6)]
"
Python 3 Print Variables,"'http://{}:{}@{}:{}'.format(username, password, server, port)
"
Binary string in Python issues,"from random import choice
from pprint import pprint

arr = []

def create_string(x):
    for i in xrange(10):       # 10 random populations
        arr.append([])
        for j in xrange(x):  # population size
            v = ''.join(choice(('0','1')) for _ in range(10))
            arr[-1].append(v)
    return arr

a = create_string(5)
pprint(a)
"
"Deleting all tuples except ones with the smallest gap between integers, in the list of tuples",">>> seen = OrderedDict()
>>> for first, second in l:
...     if second not in seen or first > seen[second]:
...         seen[second] = first
... 
>>> [(x, y) for y, x in seen.items()]
[(12, 36), (23, 37), (65, 78)]
"
print list elements line by line - is it possible using format,"'\n'.join('{}'.format(item) for item in myList)
"
Pandas Series - print columns and rows,"import pandas as pd

s = pd.Series([1, 2, 3, 4], index=iter('ABCD'))

for ind, val in s.iteritems():
    print ind, val
"
Rapid compression of multiple lists with value addition,"from collections import defaultdict
try:
    # Python 2 compatibility
    from future_builtins import zip
except ImportError:
    # Python 3, already there
    pass

values = defaultdict(int)
for key, value in zip(a, b):
    values[key] += value

a1, b1 = zip(*sorted(values.items()))
"
How to parse a number from line,"parensnumber = re.compile(r'\s*\((\d+)\)')

count = int(parensnumber.search(line).group(1))
for i in range(count):
    print(parensnumber.sub('-{0}'.format(i + 1), line))
"
Plot specific lines for specific values with Pyplot,"   for line1 in lines1:
        p = line1.split()
        if p[2] < 2:        
            x1a.append(float(p[1]))
            y1a.append(float(p[3]))
        elif 1 < p[2] < 4:        
            x1b.append(float(p[1]))
            y1b.append(float(p[3]))
        elif p[2] > 3:        
            x1c.append(float(p[1]))
            y1c.append(float(p[3]))
"
Most Pythonic was to strip all non-alphanumeric leading characters from string,"s = '!@#yourname!@#'
while not s[0].isalpha(): s = s[1:]
print(s)
"
How to accumulate unique sum of columns across pandas index,"%%cython
cimport cython
cimport numpy as np
import numpy as np

@cython.wraparound(False) 
@cython.boundscheck(False)
def score_sum(np.ndarray[int] page_id, np.ndarray[long long] scores):
    cdef int i
    cdef long long score_sum, pid, score
    cdef np.ndarray[long long] last_score, result

    score_sum = 0
    last_score = np.zeros(np.max(page_id)+1, dtype=np.int64)
    result = np.empty_like(scores)

    for i in range(len(page_id)):
        pid = page_id[i]
        score = scores[i]
        score_sum = score_sum - last_score[pid] + score
        last_score[pid] = score
        result[i] = score_sum

    result.name = ""score_sum""
    return result
"
Face Recognition - How to return the correct image?,"idx = dst.argmin()
filename = paths[idx]
"
Django package to generate random alphanumeric string,">>> unique_id = '%32x' % random.getrandbits(16*8)
>>> unique_id
'5133d2d79ce518113474d8e9f3702638'
"
Slicing and if statements (Python),"if y % 100:
    somevar = y % 100
"
OR function with argparse with two variables on the command line in Python,"class ServernameAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if values is None and not namespace.dry_run:
            parser.error(""Option 'servername' is required when not in dry-run mode."")
        setattr(namespace, self.dest, values)

...
parser.add_argument('servername', nargs='?', action=ServernameAction)
...
"
fastest way to get lookup table indices with numpy,"import numpy as np
from scipy import spatial

H, W = 200, 100

np.random.seed(1)
a = np.random.randint(0, 20, (H, W, 3))
b = np.random.randint(0, 20, (20, 3))
tree = spatial.cKDTree(a.reshape(-1, 3))
res = tree.query_ball_point(b, 0.5, p=1)
print res
"
Passing arguments to decontext decorator,"from contextlib import contextmanager

@contextmanager
def foo(arg):
    print(""entered foo({!r})"".format(arg))
    yield
    print(""exited foo({!r})"".format(arg))

foo_deco_factory = Decontext(foo)

@foo_deco_factory(""bar"")
def baz(arg):
    print(""called baz({!r})"".format(arg))

baz(""quux"")
"
Deleting everything that is enclosed with quotes or is a number in Python?,">>> import re
>>> re.sub(r""('[^']*'|(?<![a-zA-Z])\d(?![a-zA-Z]))"", """", ""'Hello'+yes+'Whats hello'6"")
'+yes+'
>>> re.sub(r""('[^']*'|(?<![a-zA-Z])\d(?![a-zA-Z]))"", """", ""+ye5s"")
'+ye5s'
"
"Is it possible for matplotlib's alpha transparency values to ""sum"" to 1?","import numpy as np
import scipy.linalg

num_lines = 5
end_alpha_value = 0.97  ## end_alpha_value must be in the interval (0, 1)

pascal_triangle = scipy.linalg.pascal(num_lines + 1, kind='lower')

print 'num_reps: 1, minimum real root: %.3f' % end_alpha_value
for i in range(2, num_lines + 1):
    coeff_list = []
    for j, coeff in enumerate(pascal_triangle[i][:i]):
        coeff_list.append(coeff * ((-1)**(i+j+1)))
    coeff_list.append(-end_alpha_value)

    all_roots = np.roots(coeff_list)
    real_roots = all_roots[np.isreal(all_roots)]
    min_real_root = min(real_roots)
    real_valued = min_real_root.real[abs(min_real_root.imag) < 1e-5]

    print 'num_reps: %i, minimum real root: %.3f' % (i, real_valued[0])
"
python: super()-like proxy object that starts the MRO search at a specified class,"class Delegate:
    def __init__(self, cls, obj):
        self._delegate_cls = cls
        self._delegate_obj = obj
    def __getattr__(self, name):
        if name in vars(self._delegate_obj):
            return getattr(self._delegate_obj, name)
        x = getattr(self._delegate_cls, name)
        if hasattr(x, ""__get__""):
            return x.__get__(self)
        return x
"
Python store values into binary code,"# To create the password file (e.g. change password)
import hashlib
with open('password', 'wb') as f:
    p = 'new password'
    f.write(hashlib.sha512(p.encode('utf-8')).digest())  # hash and save password

# To check the password
import hashlib
with open('password', 'rb') as f:
    p_in = # your method to read get the password from the user
    p = hashlib.sha512(p_in.encode('utf-8')).digest()  # create hash
    if p == f.read():  # verify hash (password)
        # right password
    else:
        # wrong password
"
python SQL Variables in SELECT /WHERE,"text = ""'%s'"" % text
"
Plotting to seperate pdf files based on groupby,"import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

pdf_files = {}
for allotment, outer_group  in df.groupby(['Allotment']):
    with PdfPages('C:\\' + allotment '.pdf') as pdf:
        for date, inner_group in outer_group.groupby(['Date']):
            plot=group.plot(x='Value', y='NDVI', title=str(allotment, date)).get_figure()
            pdf.savefig(plot)
            plt.close(plot)
"
Using python to expand a bit.ly link,">>> import urllib2
>>> print urllib2.urlopen('http://bit.ly/1cPIdPg').geturl()
"
For loop position in csv reader_Python,"lines = infile.readlines()
max_conc = max(cols[1] for cols in lines)
"
How to remove duplicate from string/mixed list,"x = []
while True:
    data = input()
    if data.lower() == ""done"":
        break
    if data not in x:
        x.append(data)
"
Pausing two Python threads while a third one does stuff (with locks?),"import threading
import time
import logging

logger=logging.getLogger(__name__)

def f(lock,n):
    while True:
        with lock:
            logger.info(n)
            time.sleep(1)

def h(locks):
    while True:
        t=time.time()
        for n,lock in enumerate(locks):
            lock.acquire()
            t2=time.time()
            logger.info('h acquired {n}: {d}'.format(n=n,d=t2-t))
            t=t2
        t2=time.time()
        logger.info('h {d}'.format(d=t2-t))
        t=t2
        for lock in locks:
            lock.release()
        time.sleep(5)

logging.basicConfig(level=logging.DEBUG,
                    format='[%(asctime)s %(threadName)s] %(message)s',
                    datefmt='%H:%M:%S')

locks=[]
N=5
for n in range(N):
    lock=threading.Lock()
    locks.append(lock)
    t=threading.Thread(target=f,args=(lock,n))
    t.start()

threading.Thread(target=h,args=(locks,)).start()
"
how to make a list of images and draw them in random position in pygame?,"class SpriteOrange():

    def __init__(self, image):
        self.image = pygame.image.load(image)
        self.x = 0
        self.y = 0

    def draw(self, screen):
        screen.blit(self.image, self.x, self.y)

    def update(self):
        self.x = random.randrange(0,400)
        self.y = random.randrange(0,400)
"
Python - Opening successive Files without physically opening every one,"list_of_filenames = ['/foo/bar', '/baz', '/tmp/foo']
open_files = [open(f) for f in list_of_filenames]
"
How to have adjacent elements reduced to a single element,">>> from itertools import groupby
>>> a = [1,2,2,3]
>>> [k for k, v in groupby(a)]
[1, 2, 3]
"
PyQt4 : check the window is existing or not,"class MainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self._rcwin = None

    @property    
    def rcwin(self):
        if self._rcwin is None:
            self._rcwin = RigControlWindow()
        return self._rcwin

    def showRigControlWindow(self):
        self.rcwin.show()
"
Django: how to order_by on a related field of a related field,">>> groups = Group.objects.all().annotate(last_response=Max('discussion__discussionresponse__timestamp')).order_by('-last_response')
>>> for group in groups:
...     print(group.id, group.last_response)
...     
... 
(4L, datetime.datetime(2013, 5, 16, 15, 25, 40))
(2L, datetime.datetime(2013, 5, 16, 15, 16, 46))
(1L, None)
(3L, None)
(6L, None)
(7L, None)
(8L, None)
(9L, None)
>>> 
"
Python Date / Time Regular Expression,">>> from datetime import datetime
>>> dt = datetime.strptime(""Wed, 23 July 2014 19:25:52 GMT"", ""%a, %d %B %Y %H:%M:%S %Z"")
>>> dt.strftime('%d/%m/%Y')
'23/07/2014'
>>> dt.strftime('%H/%M/%S')
'19/25/52'
"
Initiate a Python Script via a Website (Click of a Button),"import multiprocessing
import cgi
import os
import os.path
import signal

import YOURFUNCTION1
import YOURFUNCTION2

def abort():
    f = open('RUNNING.txt', 'r')
    process = f.readline()
    process = filter(None, process.split("",""))

    for p in process:
        os.kill(int(p), signal.SIGQUIT)

    f.close()
    os.remove('RUNNING.txt')

def main():
    if not os.path.isfile(""RUNNING.txt""):
        f = open('RUNNING.txt', 'w+')

        for func in [YOURFUNCTION1, YOURFUNCTION2]:
            processes.append(multiprocessing.Process(target=func))
            processes[-1].start()

        for p in processes:
            f.write(str(p.pid))
            f.write("","")
        f.close()

        choice = raw_input(""Press X to abort all processes: "")
        if choice == ""X"":
            abort()
    else:
        print ""Processes already operational.""
        if form.getvalue('offline') == ""True"":
            abort()
"
how to deal with multiple arguments in a dictionary construct when query in sqlalchemy?,"def get_contact_conditions(kwds):
    contact = session.query(Contact).filter_by(**kwds).all()
    return contact
"
Anyway to input next string from a file in python,"if loop == ""do"":
    outfile.write("" label 1; label 2;\n"")
    for count, word in enumerate(words(infile)):
        varList[count] = var
"
Python - map() to split and get first part only,"
import pandas as pd

data = pd.DataFrame({'interest':['one.a', 'two.a', 'three.a', 'four.b']})
data['i'] = data['interest'].map(lambda x:x.split('.', 1)[0])
print(data)
"
python interpreter running shutdown code when I don't want it to,"sdb = Button(..., command=functools.partial(runscript, ""shutdown.sh""))
"
How to label the x axis in fraction numbers?,"ax.xaxis.set_major_locator
"
Python Tkinter read only text field,"input.configure(state=tkinter.DISABLED,
    borderwidth=0,
    background=root.cget('background'))
"
"How to copy boost python list or his reference with ""="" operator",">>> a = ['spam']
>>> b = a[:]
>>> b
['spam']
>>> a is b
False
"
How to split a string at line breaks in python?,">>> s = '365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n'
>>> [map(int, x.split('\t')) for x in s.rstrip().split('\r\n')]
[[365, 179], [96, -90], [48, -138], [12, -174], [30, -156]]
"
How to implement the ReLU function in Numpy,">>> x = np.random.random((3, 2)) - 0.5
>>> x
array([[-0.00590765,  0.18932873],
       [-0.32396051,  0.25586596],
       [ 0.22358098,  0.02217555]])
>>> np.maximum(x, 0)
array([[ 0.        ,  0.18932873],
       [ 0.        ,  0.25586596],
       [ 0.22358098,  0.02217555]])
>>> x * (x > 0)
array([[-0.        ,  0.18932873],
       [-0.        ,  0.25586596],
       [ 0.22358098,  0.02217555]])
>>> (abs(x) + x) / 2
array([[ 0.        ,  0.18932873],
       [ 0.        ,  0.25586596],
       [ 0.22358098,  0.02217555]])
"
Sorting tuples in python using different orders for different fields,"sorted(student_tuples, key=lambda x: (x[2],x[4],-x[0],x[1]))
                                                #^ This field will be 
                                                #  in descending order 
"
Separating compound nouns from basic nouns part 2,"words = ['road', 'roadwork', 'pill', 'pillbox', 'pillow', 'ball', 'football', 'basketball', 'work', 'box', 'foot', 'basket']

wordSet = set(words)

def isWord(w):
    return w in wordSet

def isCompoundWord(word):
    for idx in range(1, len(word)):
        left = word[:idx]
        right = word[idx:]
        if isWord(left) and isWord(right):
            return True
    return False

nonCompoundWords = [word for word in words if not isCompoundWord(word)]
print nonCompoundWords
"
How to add common arguments to argparse subcommands?,"import argparse                                                                  

parent_parser = argparse.ArgumentParser(add_help=False)                                 
parent_parser.add_argument('-H', '--host', default='192.168.122.1')                     
parent_parser.add_argument('-P', '--port', default='12345')                             

parser = argparse.ArgumentParser(add_help=False) 
subparsers = parser.add_subparsers()                                             

# subcommand a                                                                   
parser_a = subparsers.add_parser('a', parents = [parent_parser])                          
parser_a.add_argument('-D', '--daemon', action='store_true')                     

parser_a.add_argument('-L', '--log', default='/tmp/test.log')                    

# subcommand b                                                                   
parser_b = subparsers.add_parser('b', parents = [parent_parser])                          
parser_b.add_argument('-D', '--daemon', action='store_true')                     

# subcommand c                                                                   
parser_c = subparsers.add_parser('c', parents = [parent_parser])                          
args = parser.parse_args()                                                       

print args   
"
Splitting string with optional year,"def extractYear(s):
    if len(s) >= 6 and s[-6] == '(' and s[-5:-1].isdigit() and s[-1] == ')':
        return s[:-6], s[-6:]
    return s, None
"
Get data from dict by using for-loop in Python,"from collections import defaultdict
value, key = defaultdict(list), []

for x in l:
    key.append(x[0])
    for k, v in x[1].items():
        value[k].append(v)
"
Python regular expressions: match a range of numbers with a separator,">>> r = re.compile('^((?P<fixed>\d+)|-(?P<endonly>\d+)|(?P<begin>\d+)(?:-(?P<end>\d+)?))$')
>>> r.match('123').groupdict()
{'endonly': None, 'begin': None, 'fixed': '123', 'end': None}
>>> r.match('123-').groupdict()
{'endonly': None, 'begin': '123', 'fixed': None, 'end': None}
>>> r.match('-456').groupdict()
{'endonly': '456', 'begin': None, 'fixed': None, 'end': None}
>>> r.match('123-456').groupdict()
{'endonly': None, 'begin': '123', 'fixed': None, 'end': '456'}
>>> r.match('-') is None
True
"
Creating only one random prime number in provided range,"import numpy as np
np.random.permutation([x for x in range(5000, 5200) if not [t for t in range(2, x) if not x % t]])[0]
"
Better logging system for entire package,"import logging
logger = logging.getLogger()
logger.debug('Heya')
"
Why does django paginator.num_pages returns one even when no objects are in db?,"{% if page.object_list.count %}
    #show pagination ul
{% endif %}
"
Split a list of tuples into sub-lists of the same tuple field,"[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"
Creating a random number of class objects in python,"mylist = []
for i in range(random_number):
    mylist.append(Item(1,2,3))
"
How to copy a module,"from copy import deepcopy
import types
import a

def class_c(c):
    #To create a copy of class object
    return type(c.__name__, c.__bases__, dict(c.__dict__))

filtered_a_dict = {k:v for k, v in a.__dict__.items()
                                   if not (k.startswith('__') and k.endswith('__'))}

globals().update({k:deepcopy(v) if not isinstance(v, types.TypeType) 
                               else class_c(v) for k, v in filtered_a_dict.items()})

del a
"
How can I pick out strings that contain two keywords from different lists?," r = re.compile(""West Coast|Los Angeles|\bCalifornia\b"")
"
How to pass a variable to magic ´run´ function in IPython,"In [3]: args = [""arg1"", ""arg2""]

In [4]: %run $filename {args[0]} {args[1][-2:]}
['myscript.py', 'arg1', 'g2']
"
"Using bool array mask, replace False values with NaN","a[~b] = np.nan
"
python writing a list to a file incorrectly,"new.append(line[:-2] + ""\n"")  # slice as you just checked line.endswith(""*\n"")
new.append(""*\n"")
"
Function that returns true or false if certain conditions are met?,"reg = re.compile(r'^[01]{8}$')

def typecheck(value):
    return isinstance(value, str) and bool(reg.match(value))
"
Where does Python store the name binding of function closure?,"In [35]: function.__code__.co_freevars
Out[35]: ('somevar',)
"
Maintaining session in an Eventlet page scraper?,"import eventlet
from eventlet.green import urllib2
import re

login_url = 'https://secure-web28.secondlife.com/my/account/login.php?lang=en&type=second-life-member&nextpage=/my/index.php?lang=en'

pool = eventlet.GreenPool(10)

def fetch_title(opener, url):
    match = re.search(r'<title>(.*)</title>', opener.open(url).read())
    if match:
        return match.group(1)
    else:
        return ""no title""

def login(login_url, fullname, password):
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor())
    login_page = opener.open(login_url).read()
    csrf_token = re.search(r'<input type=""hidden"" name=""CSRFToken"" value=""(.*)""/>', login_page).group(1)
    username, lastname = fullname.split()
    auth = ""CSRFToken=%s&form[type]=second-life-member&form[nextpage]=/my/index.php?lang=en&form[persistent]=Y&form[form_action]=Log%%20In&form[form_lang]=en&form[username]=%s&form[lastname]=%s&form[password]=%s&submit=Submit"" % (
        csrf_token, username, lastname, password)
    logged_in = opener.open(login_url, auth).read()
    return opener


def login_and_fetch(login_url, fullname, password, page_urls):
    opener = login(login_url, fullname, password)
    # note that this deliberately uses the global pool
    pile = eventlet.GreenPile(pool)
    for url in page_urls:
        pile.spawn(fetch_title, opener, url)

    return pile

login_urls = [login_url] *2
usernames = [...]
passwords = [...]
page_urls = [['https://secure-web28.secondlife.com/my/account/?lang=en-US',
        'https://secure-web28.secondlife.com/my/community/events/index.php?lang=en-US']] * 2

for user_iter in pool.imap(login_and_fetch, login_urls, usernames, passwords, page_urls):
    for title in user_iter:
        print ""got title"", title
"
Graph with distance and travelling times: find most km's in 24 hours (with constraints),"import pulp

dist = {(""A"", ""B""): 1.0,
        (""B"", ""C""): 1.0,
        (""D"", ""E""): 3.0}
trains = [(""A"", ""B"", 1.0, 2.0),
          (""B"", ""C"", 2.0, 3.0),
          (""C"", ""B"", 3.5, 4.5),
          (""B"", ""A"", 4.5, 5.5),
          (""D"", ""E"", 1.0, 5.5)]
sources = set(list([t[0] for t in trains]))

x = pulp.LpVariable.dicts(""x"", trains, lowBound=0, upBound=1, cat=pulp.LpInteger)
y = pulp.LpVariable.dicts(""y"", dist.keys(), lowBound=0, upBound=1, cat=pulp.LpInteger)
s = pulp.LpVariable.dicts(""s"", sources, lowBound=0, upBound=1, cat=pulp.LpInteger)
mod = pulp.LpProblem(""Train Optimization"", pulp.LpMaximize)

# Objective
mod += sum([dist[k] * y[k] for k in dist])

# Feasibility
for t in trains:
    mod += x[t] <= s[t[0]] + sum([x[k] for k in trains if k[1] == t[0] and k[3] <= t[2]]) - sum([x[k] for k in trains if k != t and k[0] == t[0] and k[2] <= t[2]])
mod += sum([s[k] for k in sources]) == 1

# Valid y variables
for k in dist:
    mod += y[k] <= sum([x[t] for t in trains if (t[0] == k[0] and t[1] == k[1]) or (t[1] == k[0] and t[0] == k[1])])

# Solve
mod.solve()
for t in trains:
    print ""Trip"", t, ""used:"", x[t].value()
"
UnicodeWarning: special characters in Tkinter,"encoding = sys.stdin.encoding
with codecs.open('norsk.txt','r','utf-8') as fil:
    ordliste = [line.rstrip(u'\n') for line in fil]
"
How do you extract words in a list in python,"li=['My name is {}', ""My job is {}"", ""I am {}""]
info=['john','guard','single']

for x, y in zip(li, info):
    print x.format(y)
"
Convert list of strings into objects,"dct = {name: classthing(inputs) for name in listofstuff}
"
Python regex to extract version from a string,"Version\s*([\d.]+)
"
How to get inheritance to work from parent to child class python34,"from numpy import array

class GPS:

    def process_gprmc_data(self, data):
        """"""Processes GPS data, NMEA 0183 format.
    Returns a tuple of arrays: latitude, longitude, velocity [km/h],
    time [sec] and number of satellites.
    See also: http://www.gpsinformation.org/dale/nmea.htm.
    """"""
        NMI = 1852.0
        latitude  = []
        longitude = []
        altitude  = []
        velocity  = []
        timestamp = []
        num_sats  = []

        print (""- - - - - - - - - - - - -"")
        print('process_gprmc_data')
        print (""- - - - - - - - - - - - -"")
        for row in data:

            if row[0] == '$GPRMC':     # Valid position/time sentence
                y = (float(row[3][0:2]) + float(row[3][2:])/60.0)
                if row[4] == ""S"":
                    y = -y
                latitude.append(y)
                x = (float(row[5][0:3]) + float(row[5][3:])/60.0)
                if row[6] == ""W"":
                    x = -x
                longitude.append(x)
                print('x,y:',x,y)
                velocity.append(float(row[7])*NMI/1000.0)
                gpstime = row[1][0:6]                     # hhmmss
                gdate = row[9]                            # ddmmyy
                gpsdate = gdate[4:6]+gdate[2:4]+gdate[0:2]  # yymmdd
                real_time =gpsdate + gpstime
                add_date_time = datetime.strptime(real_time, ""%y%m%d%H%M%S"")
                print(add_date_time)
                timestamp.append(add_date_time)
        print (""- - - - - - - - - - - - -"")
        print('arrays in')
        print (""- - - - - - - - - - - - -"")
        return (array(latitude), array(longitude), array(velocity), array(timestamp))

    #had to create another function to print results
class PrintGPS(GPS):

    def process_gprmc_data(self, data):
        # how to call process_gprmc_data()
        (lati, long, v, t_stamp) = super(PrintGPS, self).process_gprmc_data(data)

        print('got definitions in')
        print (""- - - - - - - - - - - - -"")
        print('lati:',lati)
        print (""- - - - - - - - - - - - -"")
        print('long:',long)
        print (""- - - - - - - - - - - - -"")
        print('v:',v)
        print (""- - - - - - - - - - - - -"")
        print('date:', t_stamp)
        print (""- - - - - - - - - - - - -"")


        output_filename = 'test.xlsx'

        print('XLSX file named ' + output_filename + ' was created')

data = 'abc'
gps = GPS()
gps.process_gprmc_data(data)
print_gps = PrintGPS()
print_gps.process_gprmc_data(data)
"
Python: convert all values in csv row to number," [int(s) for s in (x.rstrip().replace("" "","""") for x in f)]
"
Preventing a tkinter Entry from gaining focus when its associated StringVar changes,"import Tkinter as tk

window = tk.Tk()
var = tk.StringVar()
def validate(*args):
    print(""Validation took place"")
    return True
entry = tk.Entry(validate=""focusin"", validatecommand=validate)
print(""Entry created. Associating textvariable"")
entry.config(textvariable=var)
print(""textvariable associated. Changing value"")
entry.config(validate=""none"")
var.set(""Text"")
entry.config(validate=""focusin"")
print(""Value changed"")
entry.pack()
tk.mainloop()
"
How to manage precedence in argparse?,">>> parser.set_defaults(check=False)
"
Associating my Windows computer to a wifi AP with Python,"import subprocess

def connect_to_network(name):
    process = subprocess.Popen(
        'netsh wlan connect {0}'.format(name),
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()

    # Return `True` if we were able to successfully connect
    return 'Connection request was completed successfully' in stdout        
"
Flatten and create new columns in Pandas,"df['CourseNr'] = df.groupby('UserID').cumcount().apply(lambda x: 'Course%i' % (x+1))
"
How to use the regular Expression in python,"string = ""682698_62876_26861""
print string.rpartition('_')[0]
"
"how to ""add"" things together python","import operator
a = range(10)
reduce(operator.add,a) #45
reduce(operator.sub,a) #-45
reduce(operator.mul,a) #0 -- first element is 0.
reduce(operator.div,a) #0 -- first element is 0.
"
How can I find endpoints of binary skeleton image in OpenCV?,"# Find row and column locations that are non-zero
(rows,cols) = np.nonzero(img)

# Initialize empty list of co-ordinates
skel_coords = []

# For each non-zero pixel...
for (r,c) in zip(rows,cols):

    # Extract an 8-connected neighbourhood
    (col_neigh,row_neigh) = np.meshgrid(np.array([c-1,c,c+1]), np.array([r-1,r,r+1]))

    # Cast to int to index into image
    col_neigh = col_neigh.astype('int')
    row_neigh = row_neigh.astype('int')

    # Convert into a single 1D array and check for non-zero locations
    pix_neighbourhood = img[row_neigh,col_neigh].ravel() != 0

    # If the number of non-zero locations equals 2, add this to 
    # our list of co-ordinates
    if np.sum(pix_neighbourhood) == 2:
        skel_coords.append((r,c))
"
While loop for a raw_input gives strange output in Python,"while True:
    try:
        age = int(raw_input(""\n So tell me "" + str(name) + "", how old are you?: ""))
        if age < 18:
            print ""\n %s. A minor. You got to be atleast 18 to go on this adventure. Your adventure ends here."" % age
            time.sleep(7)
            exit(0) 
        elif age >= 60:
            print ""\n %s. I think you're to old to go on an adventure. Your adventure ends here."" % age
            time.sleep(5)
            exit(0)
        else:
            print ""\n %s. You're starting to get old."" % age
            break
    except ValueError:
        print ""\n Please, put only in numbers!""
        time.sleep(3)
"
Python sum up time,"timeList = [ '0:00:00', '0:00:15', '9:30:56' ]
totalSecs = 0
for tm in timeList:
    timeParts = [int(s) for s in tm.split(':')]
    totalSecs += (timeParts[0] * 60 + timeParts[1]) * 60 + timeParts[2]
totalSecs, sec = divmod(totalSecs, 60)
hr, min = divmod(totalSecs, 60)
print ""%d:%02d:%02d"" % (hr, min, sec)
"
pandas DataFrame: replace nan values with average of columns,"df.apply(lambda x: x.fillna(x.mean()), axis=0)"
"How do I force matplotlib to write out the full form of the x-axis label, avoiding scientific notation?","gca().xaxis.set_major_formatter(FormatStrFormatter('%d'))
"
"In a Python 2.4 script, I would like to execute a os system call `ls -l` or `curl` for example and capture the output in a variable. How to do this?","def check_output(*popenargs, **kwargs):
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = Popen(stdout=PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get(""args"")
        if cmd is None:
            cmd = popenargs[0]
        raise CalledProcessError(retcode, cmd, output=output)
    return output
"
How do you apply 'or' to all values of a list in Python?,"def any(S):
    for x in S:
        if x:
            return True
    return False

def all(S):
    for x in S:
        if not x:
            return False
    return True
"
fastest way to convert bitstring numpy array to integer base 2,"In [198]: # Setup a huge array of such strings
     ...: A = np.array([['0001'],['1001'],['1100'],['0010']],dtype='|S4')
     ...: A = A.repeat(10000,axis=0)


In [199]: def app1(A):             
     ...:     str2num = (np.fromstring(A, dtype=np.uint8)-48).reshape(-1,4)
     ...:     de2bi_convarr = 2**np.arange(3,-1,-1)
     ...:     out = str2num.dot(de2bi_convarr)    
     ...:     return out
     ...: 
     ...: def app2(A):             
     ...:     str2num = np.remainder(A.astype(np.int)//(10**np.arange(3,-1,-1)),10)
     ...:     de2bi_convarr = 2**np.arange(3,-1,-1)
     ...:     out = str2num.dot(de2bi_convarr)    
     ...:     return out
     ...: 

In [200]: %timeit app1(A)
1000 loops, best of 3: 1.46 ms per loop

In [201]: %timeit app2(A)
10 loops, best of 3: 36.6 ms per loop

In [202]: %timeit np.array([[int(i[0], 2)] for i in A]) # @Kasramvd's solution
10 loops, best of 3: 61.6 ms per loop
"
finding longest path in a graph,"from collections import defaultdict

def DFS(G,v,seen=None,path=None):
    if seen is None: seen = []
    if path is None: path = [v]

    seen.append(v)

    paths = []
    for t in G[v]:
        if t not in seen:
            t_path = path + [t]
            paths.append(tuple(t_path))
            paths.extend(DFS(G, t, seen, t_path))
    return paths


edges = [['1', '2'], ['2', '4'], ['1', '11'], ['4', '11']]

G = defaultdict(list)
for (s,t) in edges:
    G[s].append(t)
    G[t].append(s)

#print G.items()

all_paths = DFS(G, '1')
max_path  = max(all_paths, key=lambda l: len(l))
print(""All Paths:"")
print(all_paths)
print(""Longest Path:"")
print(max_path)
print(""Longest Path Length:"")
print(len(max_path))
"
numpy where compare arrays as a whole,"x = np.array([[0,1,2],[0,0,0],[3,4,0],[1,2,3],[0,0,0]])

condition = (x[:,0]==0) & (x[:,1]==0) & (x[:,2]==0)
np.where(condition)
# (array([1, 4]),)
"
Converting Images with Python,"from base64 import b64encode, b64decode

def convert(image):
    with open(image, ""rb"") as f, open(""Puppy2.jpg"", ""wb"") as t:
        conv = b64decode(b64encode(f.read()))
        t.write(conv)
"
How do I find every element that is in both of two other lists?,"def commonElements(a1, a2):
    return tuple(sorted(set(a1).intersection(set(a2))))
"
Need help to modify flood fill algorithm,"def fill(matrix, x, y, color1, color2):
    def fill(matrix, x, y, color1, color2):

        matWidth = len(matrix)
        matHeight = len(matrix[0])
        if x < 0 or y < 0 or x >= matWidth or y >= matHeight:
            return  

        if matrix[x][y] == color2 or matrix[x][y] != color1:
            return
        if matrix[x][y] == color1:
            matrix[x][y] = color2

        fill(matrix, x - 1, y, color1, color2)
        fill(matrix, x + 1, y, color1, color2)
        fill(matrix, x, y - 1, color1, color2)
        fill(matrix, x, y + 1, color1, color2)
    fill(matrix, x, y, color1, color2)
    return matrix
"
Python factor level combinations,"def checkvals(v):
    return all(x in (4,5,6,7,8) for x in v[1].value_counts().values)

def checkall(trials):
    return all(checkvals(v) for k, v in pd.DataFrame(zip(trials, trials[1:])).groupby(0))

while not checkall(trials):
    np.random.shuffle(trials)
"
How to get the last item of the dictionary when looping,"if inp in dic:
    print(""The key is in the dictionary"")
"
How to parse HTML to a string template in Python?,"from bs4 import BeautifulSoup

data = """"""
<div class=""x,y,z"" x-attrsite>
  <div x-inner></div>
  <div>
    <div x-inner></div>
  </div>
</div>
""""""

soup = BeautifulSoup(data, 'html.parser')

for div in soup.find_all('div', {'x-attrsite': True}):
    del div['x-attrsite']
    div['{attrsite}'] = None

for div in soup.find_all('div', {'x-inner': True}):
    div.replace_with('{inner}')

print(soup.prettify())
"
consistency check across files," find . -name *.txt |xargs -I{} awk -F',' 'NF!=5{print FILENAME;exit;}' {}
"
"in Python, dictionary sort by value, but only return key",">>> from operator import itemgetter
>>> [key for key,value in sorted(dic.items() ,key= itemgetter(1) ) if value < threshold]
"
How do you get a thumbnail of a movie using IMDbPy?,"from BeautifulSoup import BeautifulSoup
import imdb

access = imdb.IMDb()
movie = access.get_movie(1132626)

page = urllib2.urlopen(access.get_imdbURL(movie))
soup = BeautifulSoup(page)
cover_div = soup.find(attrs={""class"" : ""photo""})
cover_url = (photo_div.find('img'))['src']
print ""Cover url: %s"" % cover_url
"
Randomizing an array into two arrays,"for num_list in col_one:
    holder = list(number)
    for num in num_list:
        holder.remove(num)
    col_two.append(holder)
"
Python Dom Parsing,"from xml.dom import minidom
import pdb

def get_e(dom, tag):
    l=[]
    els=dom.getElementsByTagName(tag)
    for e in els:
        for child_el in e.childNodes:
            # if this was an element node get its children
            if child_el.nodeType == e.ELEMENT_NODE:
                l.extend(get_e(e, child_el.tagName))
            else:
                l.append(child_el)
    return l

def get_text(els):
    l=[]
    for e in els:
        if e.nodeType == e.TEXT_NODE:
            l.append(e.data)
    return l

dom = minidom.parse('s.xml')
print get_text(get_e(dom, 'td'))
"
How to plot a heatmap from pandas DataFrame,"import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# create some random data
data = pd.DataFrame(np.random.rand(11, 5), columns=['A', 'B', 'C', 'D', 'E'], index = range(2000, 2011, 1))

# plot heatmap
ax = sns.heatmap(data.T)

# turn the axis label
for item in ax.get_yticklabels():
    item.set_rotation(0)

for item in ax.get_xticklabels():
    item.set_rotation(90)

# save figure
plt.savefig('seabornPandas.png', dpi=100)
plt.show()
"
Delete column if items don't contain a Number,"transposedlist = [entry for entry in transposedlist if any(e.isdigit() for e in entry)]
"
Dot notation to Json in python,"def dot_to_json(a):
    output = {}
    for key, value in a.iteritems():
        path = key.split('.')
        if path[0] == 'json':
            path = path[1:]
        target = reduce(lambda d, k: d.setdefault(k, {}), path[:-1], output)
        target[path[-1]] = value
    return output
"
representing \xd9\x88 (UTF-8 literal) in its arabic character و in Python,">>> i = ""\xd9\x88""
>>> type(i)
<class 'str'>
>>> type(i.encode('latin-1'))
<class 'bytes'>
>>> print(i.encode('latin-1').decode('utf-8'))
و
"
Cartesian product giving a dictionary,">>> from itertools import product
>>> from pprint import pprint
>>> brand = [""Audi"", ""Mercedes""]
>>> speed = [130, 150]
>>> model = [""sport"", ""family""]
>>> keys = 'brand', 'speed', 'model'
>>> [dict(zip(keys, combo)) for combo in product(brand, speed, model)]
[{'speed': 130, 'brand': 'Audi', 'model': 'sport'}, {'speed': 130, 'brand': 'Audi', 'model': 'family'}, {'speed': 150, 'brand': 'Audi', 'model': 'sport'}, {'speed': 150, 'brand': 'Audi', 'model': 'family'}, {'speed': 130, 'brand': 'Mercedes', 'model': 'sport'}, {'speed': 130, 'brand': 'Mercedes', 'model': 'family'}, {'speed': 150, 'brand': 'Mercedes', 'model': 'sport'}, {'speed': 150, 'brand': 'Mercedes', 'model': 'family'}]
>>> pprint(_)
[{'brand': 'Audi', 'model': 'sport', 'speed': 130},
 {'brand': 'Audi', 'model': 'family', 'speed': 130},
 {'brand': 'Audi', 'model': 'sport', 'speed': 150},
 {'brand': 'Audi', 'model': 'family', 'speed': 150},
 {'brand': 'Mercedes', 'model': 'sport', 'speed': 130},
 {'brand': 'Mercedes', 'model': 'family', 'speed': 130},
 {'brand': 'Mercedes', 'model': 'sport', 'speed': 150},
 {'brand': 'Mercedes', 'model': 'family', 'speed': 150}]
"
use python decorator to automatically replace function argument default value?,"import matplotlib.pyplot as plt    

def check_axes(plot_fn):
    def _check_axes_wrapped_plot_fn(axes=None, x=None, y=None):
        if not axes:
            fig = plt.figure()
            axes = fig.add_subplot(111)
            return plot_fn(axes, x, y)
        else:
            return plot_fn(axes, x, y)
    return _check_axes_wrapped_plot_fn

@check_axes
def line_plot(axes, x=None, y=None):
    axes.plot(x, y)

@check_axes
def bar_plot(axes, x=None, y=None):
    axes.bar(left=x, height=y)
"
How Accelerate factor function from SAGE,"sage: q = 2
sage: nvars = 2
sage: k.<t> = GF(2^q)
sage: x_i = []
sage: x_i_j = []
sage: for i in range(nvars):
....:     x_i.append(var('x_'+str(i)))
....:     for j in range(q):
....:         x_i_j.append(var('x_'+str(i)+'_'+str(j)))
....:         
sage: P = PolynomialRing(k,names=x_i)
sage: R = PolynomialRing(k,names=x_i_j)
sage: S = PolynomialRing(R,'t')
sage: subsvar = [sum((t^i*R.gen(i+q*j) for i in range(q))) for j in range(nvars)]
"
Find string in log files and return extra characters,"import re

for file in glob.glob('*.log'):
    with open(file) as f:
        contents = f.read()
    if 'FIRMWARE_VERSION = ""' in contents:
        print (file + '='+ re.search(r'FIRMWARE_VERSION =""([\d.]+)""',contents).group(1))
"
Python (Pandas): count of records between values at a given time (Packets in Flight),"#assuming that indexed times are in seconds
t.sort(inplace=True)
t.index = pd.to_datetime(t.index * 10e9) #to convert from nanoseconds to seconds
t.resample('s', how='sum').cumsum()
"
Is it possible to run python SimpleHTTPServer on localhost only?,"import sys
from SimpleHTTPServer import SimpleHTTPRequestHandler
import BaseHTTPServer


def test(HandlerClass=SimpleHTTPRequestHandler,
         ServerClass=BaseHTTPServer.HTTPServer):

    protocol = ""HTTP/1.0""
    host = ''
    port = 8000
    if len(sys.argv) > 1:
        arg = sys.argv[1]
        if ':' in arg:
            host, port = arg.split(':')
            port = int(port)
        else:
            try:
                port = int(sys.argv[1])
            except:
                host = sys.argv[1]

    server_address = (host, port)

    HandlerClass.protocol_version = protocol
    httpd = ServerClass(server_address, HandlerClass)

    sa = httpd.socket.getsockname()
    print ""Serving HTTP on"", sa[0], ""port"", sa[1], ""...""
    httpd.serve_forever()


if __name__ == ""__main__"":
    test()
"
Python list sort by size of group,"item_labels.sort(key=lambda t : len([x[1] for x in item_labels if x[1]==t[1] ]))
"
Removing elements from pandas series in python,"s.iloc[1:]
"
pythonic way to explode a list of tuples,"tuples = [(1,2), (3,4), (5,6)]
[item for t in tuples for item in t]
"
python combine 'while loop' with 'for loop' to iterate through some data,"keep_running = True
while (keep_running):
    lo += 1
    for i in range(len(l)):
        if not l[i] < 3:
            # this will effectively
            # stop the while loop:
            keep_running = False
            break
        print(lo)
"
cut a string with duplicates,"'\n'.join(['\n'.join(item) for item in zip(['e_'+str(num) for num in range(1, len(new)+1)], new)])
"
Extend dict from key/values pair to key/value pair in Python,"from collections import defaultdict
myNewDict = defaultdict(list)
for staff_id, names in myDict.items():
    for name in names:
        myNewDict[name].append(staff_id)
"
How can I disable logging while running unit tests in Python Django?,logging.disable(logging.CRITICAL)
Print file age in seconds using Python,"print(os.path.getmtime('/tmp'))
# 1325704746.52
"
How to change array layout?,"np.dstack((a1,a2)).transpose(1,0,2)
"
How to match regex with multiple overlapping patterns?,"import re
from itertools import combinations

def get_mp3_info(groups, pattern, title):
    match = re.match(pattern, title)
    if not match:
        return []
    result = [{}]
    for i, v in enumerate(groups):
        if v[1] is None:
            for r in result:
                r[v[0]] = match.group(i+1)
        else:
            splits = match.group(i+1).split(v[1])
            before = [d.copy() for d in result]
            for comb in combinations(range(1, len(splits)), len(v[0])-1):
                temp = [d.copy() for d in before]
                comb = (None,) + comb + (None,)
                for j, split in enumerate(zip(comb, comb[1:])):
                    for t in temp:
                        t[v[0][j]] = v[1].join(splits[split[0]:split[1]])

                if v[0][0] in result[0]:
                    result.extend(temp)
                else:
                    result = temp
    return result
"
Python deque and popleft (part of collections module),"    if front.left:
        queue.append([front.left, path + ""->"" + str(front.left.val)])
    if front.right:
        queue.append([front.right, path + ""->"" + str(front.right.val)])
"
how to implement a list of paragraph word lengths using a for loop,"re.findall(r'\b[\w\d%s]+\b' % string.punctuation,st)
"
Is there a better way to rewrite this NumPy Snippet,"np.max((x + y * cm)[mask])
"
How do I access imported local settings without a circular import?,"from settings import settings as PROJECT_DEFAULT

PREPEND_WWW = False
DEBUG = True
TEMPLATE_DEBUG = DEBUG

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_pyscopg2', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'somesecretname',                      # Or path to database file if using sqlite3.
        'USER': 'somesecretuser',                      # Not used with sqlite3.
        'PASSWORD': 'somesecretpassword',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}

INSTALLED_APPS += PROJECT_DEFAULT.INSTALLED_APPS + ('debug_toolbar',)
"
How can I get a Tuple from a list in python (3.3),"matching_results = filter(lambda t: t[0]==c_code, list_)
"
Repeating regex pattern in Python,"import re
p = re.compile(ur'RT @(\w+):')
test_str = u""RT @ReutersAero: Further pictures from the #MH17 crash site in  in Grabovo, #Ukraine #MH17 - @reuterspictures (GRAPHIC): http://t.co/4rc7Y4…\nRT @AnotherAero: Further pictures from the #MH17 crash site in  in Grabovo, #Ukraine #MH17 - @reuterspictures (GRAPHIC): http://t.co/4rc7Y4…\n""

re.findall(p, test_str)
"
Using Python to send commands to a subshell,"import pexpect

process = pexpect.spawn(""python"")
process.expect_exact("">>> "")
process.sendline('print(""It works"")')
process.expect(""\n.*\n"")
response = process.after.strip()
print(response)
"
Python: Find in list,"next(x for x in lst if ...)
"
Find password by username,"import csv

file = 'yourcsv.csv'
found = False
username = input('Write your username: ')
password_csv = None
with open(file, newline='') as csvfile:
   reader = csv.reader(csvfile, delimiter=',')
   for row in reader:
      # row[0] is the first element, the username and row[1] the hash of the password
      if row[0] == username:
         password_csv = row[1]
         found = True
         break
if not found:
   print('The username is not in our DB.')

while True:
   passw = input('Let me your password: ')
   hash_passw = your_method_to_get_the_hash(passw)
   if hash_passw == password_csv:
      print('Congrats, you are logged.')
      break
   else:
      print('Wrong password dude, try again.') 
"
Pandas: read_csv (read multiple tables in a single file),"df = pd.read_csv(filename, header=None, names=['col1','col2','col3'],
                 skiprows=2, nrows=100)
"
How to get all html elements with id equal to `constant_text-something_changed`?,"import lxml.html

root = lxml.html.fromstring('''
<table>
<tr id=""element-36a07b7"" class="" ""  data-date=""2014-05-25"">
    <td>2014-05-25</td>
    <td>Wikipedia (<a href=""http://example.com/36a07b7"" title=""Wikipedia search"">link</a>)</td>
    <td>Yandex (<a href=""http://ya.ru/36a07b7"" title=""Yandex search"">link</a>)</td>
    <td title=""what I am looking for"">another needed info<span class=""small"">(<a href=""http://example.com"">info 3</a>)</span>
    </td>
    <td class=""result"">1</td>
    <td class=""result"">2</td>
    <td class=""result"">3</td>
    ...
</tr>
</table>
''')

tr_list = root.xpath('//*[starts-with(@id, ""element-"")]')
for tr in tr_list:
    print tr.get('id').split('-')[1]
    print tr.get('data-date')
"
Need help prompting strings and adding them to one,"#!/usr/bin/env python

words = ''

while True:

    # Get input

    new_word = raw_input('Enter a word: ')

    # Stop loop if user entered 'stop'

    if new_word.upper() == 'STOP':
        break

    # Add comma to string if this is not the first word

    if words:
        words += ','

    # Add word to string

    words += new_word

print ""Your words are: "" + words
"
python capitalize nested list with strings and integers,"def capitalizeNested(L):
    for i,item in enumerate(L):
        if isinstance(item, list):
            L[i] = [it.title() for it in item]
        elif isinstance(item, str):
            L[i] = item.title()
"
Take certain words and print the frequency of each phrase/word?,"from collections import Counter

with open('bandfile.txt') as f:
   counts = Counter(line.split('-')[0].strip() for line in f if line)

for band, count in counts.most_common():
    print(""{0}:{1}"".format(band, count))
"
swap values in a tuple/list inside a list in python?,"map (lambda t: (t[1], t[0]), mylist)
"
Initialize dict with only some of a list,"mapping = dict((item,set()) for item in listOfItems 
                            if item != ""SomethingIDoNotWant"")
"
Find out the words from a python list which contains permutation of another word,"[w for w in words_list if set(sys.argv[1]).intersection(w)]
"
How to replace the some characters from the end of a string?,"Search for the separator sep in S, starting at the end of S, and return
the part before it, the separator itself, and the part after it.  If the
separator is not found, return two empty strings and S.
"
"Using python, I need to average value based on two keys in two columns from a CSV file","import csv
from collections import defaultdict

with open(""in.csv"") as f, open(""average.csv"", ""w"") as out:
    wr = csv.writer(out)
    d = defaultdict(list)
    head = next(f)
    out.write(head)
    for row in csv.reader(f):
        d[tuple(row[:2])].append(int(row[-1]))

    for k, v in d.items():
        out.write(""{},{},{}\n"".format(k[0], k[1], sum(v, 0.0) / len(v)))
"
"In Numpy, how do I find element wise inverse (reciprocal) of a given vector?","import numpy

x = numpy.arange(5) + 1
print (x)

r = numpy.reciprocal(x.astype(float))
print (r)
"
Pythonic way to only do work first time a variable is called,"class myclass(object):
    def __init__(self):
        self.__age=None
    @property
    def age(self):
        if self.__age is None:
            self.__age=21  #This can be a long computation
        return self.__age
"
python command line yes/no input,"import sys

def query_yes_no(question, default=""yes""):
    """"""Ask a yes/no question via raw_input() and return their answer.

    ""question"" is a string that is presented to the user.
    ""default"" is the presumed answer if the user just hits <Enter>.
        It must be ""yes"" (the default), ""no"" or None (meaning
        an answer is required of the user).

    The ""answer"" return value is True for ""yes"" or False for ""no"".
    """"""
    valid = {""yes"": True, ""y"": True, ""ye"": True,
             ""no"": False, ""n"": False}
    if default is None:
        prompt = "" [y/n] ""
    elif default == ""yes"":
        prompt = "" [Y/n] ""
    elif default == ""no"":
        prompt = "" [y/N] ""
    else:
        raise ValueError(""invalid default answer: '%s'"" % default)

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return valid[default]
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write(""Please respond with 'yes' or 'no' ""
                             ""(or 'y' or 'n').\n"")
"
Python reduce list by mask,">>> [data[index] for index in range(len(data)) if mask[index]]
[1, 3]
"
Submitting jobs using python,"#!/usr/bin/env python
import os
from subprocess import call

bash_lines = ['#!/bin/bash\n', '#PBS -l nodes=1;ppn=1\n']
bash_name = 'myjob_%i.sh'
job_call = 'ifort -openmp ran_numbers.f90 %s ompscmf.f90 -o scmf.o &\n'
qsub_call = 'qsub myjob_%i.sh'

filenames = [os.path.join(root, f) for root, _, files in os.walk(directory)
                                   for f in files if f.endswith('.txt')]
for i, filename in enumerate(filenames):
    with open(bash_name%i, 'w') as bash_file:
        bash_file.writelines(bash_lines + [job_call%filename, 'wait\n'])
    call(qsub_call%i, shell=True)
"
Beautifulsoup get span content,"from bs4 import BeautifulSoup


page = """"""<div class=""badges"">
<span>
    <span title=""9 gold badges""><span class=""badge1""></span><span class=""badgecount"">9</span></span>
    <span title=""38 silver badges""><span class=""badge2""></span><span class=""badgecount"">38</span></span>
    <span title=""56 bronze badges""><span class=""badge3""></span><span class=""badgecount"">56</span></span>
</span>
</div>""""""

soup = BeautifulSoup(page)
badges = soup.body.find('div', attrs={'class': 'badges'})
for span in badges.span.find_all('span', recursive=False):
    print span.attrs['title']
"
Best way to enumerate a cartesian product with labels in python?,"src = {'lblA': (False, True), 'lblB': (False, True), 'lblC': (0, 1, 2)}

labels, terms = zip(*src.items())

print [dict(zip(labels, term)) for term in itertools.product(*terms)]
"
Create a Tuple from text file,"a, b, c, d = output[1:]
block = (first_element[0], a, b, c, d)
"
Use a Glob() in VariantDir() einvironment to find files recursively in Python?,"def MyGlob(pattern, ondisk=True, source=True, strings=False, recursive=False):
    if not recursive:
        return Glob(pattern, ondisk, source, strings)

    matches = []
    # Instead of using os.getcwd() consider passing-in a path
    for root, dirnames, filenames in os.walk(os.getcwd()):
        cwd = Dir(root)
        # Glob() returns a list, so using extend() instead of append()
        # The cwd param isnt documented, (look at the code) but its 
        # how you tell SCons what directory to look in.
        matches.extend(Glob(pattern, ondisk, source, strings, cwd))

    return matches
"
How to get the exact number of positions after a decimal for the round() function,"left = int(math.log10(x))+1 if x >= 10 else 1
"
Copy select lines from many text files and paste to new file,"from glob import glob
import fileinput
with open('output.csv', 'w') as out:
    out.writelines(line for line in fileinput.input(glob('*.log')) if 'KEYWORD' in line)
"
python list as function parameter,"def fizz_count(x, search_string, case_insensitive=False):
    if case_insensitive:
        x = [item.lower() for item in x]
    return x.count(search_string)
"
Adding an additional argument to an argparse argument,"import argparse
parser = argparse.ArgumentParser(description='Get Files')    
parser.add_argument('-i','--input', help='Input file(s)',required=True, nargs='+') 
args = parser.parse_args()
for filename, num in zip(*[iter(args.input)]*2):
    print(filename, num)
    # with open(filename) as f:
    #     ....
"
Python: Find first non-matching character,"first_index = -1
match = re.search(r'[^f]', line)
if match:
    first_index = match.start()
"
Numpy: Transform sparse matrix to ndarray,">>> a = np.asarray(g)
>>> a
array([[0],
       [0],
       [0],
       [0],
       [0],
       [0],
       [0],
       [0],
       [0],
       [0]])
"
How do I split a string and rejoin it without creating an intermediate list in Python?,">>> src=""hello\n#foo\n#bar\n#baz\nworld\n""
>>>
>>> def isplit(s, t): # iterator to split string s at character t
...     i=j=0
...     while True:
...         try:
...             j = s.index(t, i)
...         except ValueError:
...             if i<len(s):
...                 yield s[i:]
...             raise StopIteration
...         yield s[i:j]
...         i = j+1
...
>>> '\n'.join(x for x in isplit(src, '\n') if x[0]!='#')
'hello\nworld'
"
Python Parallel hash bruteforce,"import string
import hashlib
from itertools import product

CHARSET = string.ascii_lowercase +  string.digits
MAX_LENGTH = 5
NUM_PROCESSES = None # defaults to all available cores

HASHALG = ""md5""
HASH = ""5a105e8b9d40e1329780d62ea2265d8a""

PAIRS = ["""".join(t) for t in product(CHARSET, repeat=2)]

def make_bases(count):
    bases = [PAIRS] * (count // 2)
    if count & 1:
        bases.insert(0, CHARSET)
    return bases

# string_gen is what the workers run.  Everything else
# runs in the main program.
def string_gen(prefix, suffix_len, length):
    # Generate all strings of length `length` starting with `prefix`.
    # If length > suffix_len, only the last suffix_len characters
    # need to be generated.
    if length <= suffix_len:
        assert prefix == """"
        bases = make_bases(length)
    else:
        assert len(prefix) + suffix_len == length
        bases = make_bases(suffix_len)
    for t in product(*bases):
        result = prefix + """".join(t)
        # do something with result
        if hashlib.new(HASHALG, result).hexdigest() == HASH:
            return result

def record_done(result):
    global all_done, the_secret
    print ""."",
    if result is not None:
        print
        the_secret = result
        all_done = True
        pool.close()
        pool.terminate() # stop all workers! we're done

def do_work(pool, strings_per_chunk=1000000):
    global all_done, the_secret
    all_done = False
    the_secret = None
    # What's the most chars we can cycle through without
    # exceeding strings_per_chunk?
    N = len(CHARSET)
    suffix_len = 1
    while N**suffix_len <= strings_per_chunk:
        suffix_len += 1
    suffix_len -= 1
    print ""workers will cycle through the last"", suffix_len, ""chars""

    # There's no point to splitting up very short strings.
    max_short_len = min(suffix_len, MAX_LENGTH)
    for length in range(1, max_short_len + 1):
        pool.apply_async(string_gen, args=("""", suffix_len, length),
                         callback=record_done)
        if all_done:
            return
    # And now the longer strings.
    for length in range(max_short_len + 1, MAX_LENGTH + 1):
        for t in product(*make_bases(length - suffix_len)):
            prefix = """".join(t)
            pool.apply_async(string_gen, args=(prefix, suffix_len, length),
                             callback=record_done)
            if all_done:
                return

if __name__ == ""__main__"":
    import multiprocessing
    pool = multiprocessing.Pool(NUM_PROCESSES)
    do_work(pool)
    pool.close()
    pool.join()
    if the_secret is None:
        print ""didn't crack it!""
    else:
        print ""the plaintext is"", repr(the_secret)
"
Dynamic importing of modules followed by instantiation of objects with a certain baseclass from said modules,"for c in candidates:
    modname = os.path.splitext(c)[0]
    try:
        module=__import__(modname)   #<-- You can get the module this way
    except (ImportError,NotImplementedError):
        continue
    for cls in dir(module):          #<-- Loop over all objects in the module's namespace
        cls=getattr(module,cls)
        if (inspect.isclass(cls)                # Make sure it is a class 
            and inspect.getmodule(cls)==module  # Make sure it was defined in module, not just imported
            and issubclass(cls,base)):          # Make sure it is a subclass of base
            # print('found in {f}: {c}'.format(f=module.__name__,c=cls))
            classList.append(cls)
"
Why are Python lambdas useful?,"mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]
"
Django: how to get a dictionary with a related object as key from a querydict,"collection_brochures = defaultdict(list)
for b in self.brochures.all():
    collection_brochures[b.collection.slug].append(b)
result = []
for collection, brochures in collection_brochures.iteritems():
    result.append({'collection': collection, 'brochures': brochures})
"
Expanding algebraic powers in python (sympy),"def pow_to_mul(expr):
    """"""
    Convert integer powers in an expression to Muls, like a**2 => a*a.
    """"""
    pows = list(expr.atoms(Pow))
    if any(not e.is_Integer for b, e in (i.as_base_exp() for i in pows)):

        raise ValueError(""A power contains a non-integer exponent"")
    repl = zip(pows, (Mul(*[b]*e,evaluate=False) for b,e in (i.as_base_exp() for i in pows)))
    return expr.subs(repl)
"
Filling under histogram until exact point with fill_between python,"import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

# create normally distributed random data
n = 10000
data = np.random.normal(0, 1, n)
bins = np.linspace(-data.max(), data.max(), 20)
hist = np.histogram(data, bins=bins)[0]
bincenters = 0.5 * (bins[1:] + bins[:-1])

# create interpolation function and dense x-axis to interpolate over
f = interp1d(bincenters, hist, kind='cubic')
x = np.linspace(bincenters.min(), bincenters.max(), n)

plt.plot(bincenters, hist, '-o')
# calculate greatest bincenter < 10th percentile
bincenter_under10thPerc = bincenters[bincenters < np.percentile(bincenters, 10)].max()
bincenter_10thPerc = np.percentile(bincenters, 10)

bincenter_90thPerc = np.percentile(bincenters, 90)
# calculate smallest bincenter > 90th percentile
bincenter_above90thPerc = bincenters[bincenters > np.percentile(bincenters, 90)].min()

# fill between 10th percentile region using dense x-axis array, x
plt.fill_between(x, 0, f(x), interpolate=True,
                 where=((x>=bincenter_under10thPerc) &
                        (x<=bincenter_10thPerc)))

# fill between 90th percentile region using dense x-axis array, x
plt.fill_between(x, 0, f(x), interpolate=True,
                 where=((x>=bincenter_90thPerc) &
                        (x<=bincenter_above90thPerc)))
"
Tabbing in Python?,">>> ""|{:>22}|"".format(""Niki Lauda"")
'|            Niki Lauda|'
>>> ""|{:^22}|"".format(""Niki Lauda"")
'|      Niki Lauda      |'
"
Python- Most efficient way to return batches of numbers,"def get_all_possible_items(max_no_users):
    range_dict = {}
    for i in range(0,max_no_users+1, 50):
        if i+49 < max_no_users:
            range_dict[i] = i+49
        else:
            range_dict[i] = max_no_users
    return range_dict
"
Python 3 replacement for deprecated compiler.ast flatten function,"def flatten(x):
    result = []
    for el in x:
        if hasattr(el, ""__iter__"") and not isinstance(el, str):
            result.extend(flatten(el))
        else:
            result.append(el)
    return result

print(flatten([""junk"",[""nested stuff""],[],[[]]]))  
"
Extract a row in html file without the html tags,"import re
from BeautifulSoup import BeautifulSoup

html= '''
<table id=""cos"" width=""500"" cellpadding=""3"" cellspacing=""0"" border=""1"">
  <tr>
    <th>Company Name</th>
    <th>CIK Number</th>
    <th>SIC Code</th>
  </tr>
  <tr valign=""top"">
    <td>A CONSULTING TEAM INC</td>
    <td align=""right"">1040792</td>
    <td align=""right"">7380</td>
  </tr>
  <tr valign=""top"">
    <td>A J&amp;J PHARMA CORP</td>
    <td align=""right"">1140452</td>
    <td align=""right"">9995</td>
  </tr>
</table>
'''

soup = BeautifulSoup(html)
table = soup.find(""table"", {""id"":""cos""})
td = table.find('td', text='A J&amp;J PHARMA CORP')
# ^ This return text node, not td.
print(td.parent.parent.findAll('td')[1].string)
"
Fill scipy / numpy matrix based on indices and values,"def voxel_adjacency(voxel_communities):
    n_voxels = voxel_communities.size
    comm_labels = sorted(set(voxel_communities))
    comm_counts = [(voxel_communities == l).sum() for l in comm_labels]

    blocks = numpy.zeros((n_voxels, n_voxels), dtype=bool)
    start = 0
    for c in comm_counts:
        blocks[start:start + c, start:start + c] = 1
        start += c

    ix = numpy.empty_like(voxel_communities)
    ix[voxel_communities.argsort()] = numpy.arange(n_voxels)
    blocks[:] = blocks[ix,:]
    blocks[:] = blocks[:,ix]
    return blocks
"
How to use Python and Selenium to select an extJS button,"//button[. = ""QA View""]
"
How to put a variable into Python docstring,">>> def c(): ""formatted docstring works %s""
... 
>>> c.__doc__
""formatted docstring works %s""
>>> c.__doc__ %= 'after'
>>> c.__doc__
""formatted docstring works after""
"
Bouncing an image in a polygonal way with pygame,"import pygame
import math
from itertools import cycle

# some simple vector helper functions, stolen from http://stackoverflow.com/a/4114962/142637
def magnitude(v):
    return math.sqrt(sum(v[i]*v[i] for i in range(len(v))))

def sub(u, v):
    return [ u[i]-v[i] for i in range(len(u)) ]    

def normalize(v):
    vmag = magnitude(v)
    return [ v[i]/vmag  for i in range(len(v)) ]

screen = pygame.display.set_mode((300, 300))
clock = pygame.time.Clock()    

pygame.init()
quit = False

path = [(26, 43),
        (105, 110),
        (45, 225),
        (145, 295),
        (266, 211),
        (178, 134),
        (250, 56),
        (147, 12)]
path = cycle(path)         
target = next(path)
ball = pygame.rect.Rect(target[0], target[1], 10, 10)
speed = 3.6

while not quit:
    quit = pygame.event.get(pygame.QUIT)
    pygame.event.poll()

    if ball.topleft == target:
        target = next(path)

    target_vector = sub(target, ball.topleft) 

    if magnitude(target_vector) < 2: 
        target = next(path)
    else:
        move_vector = [c * speed for c in normalize(target_vector)]
        ball.move_ip(move_vector)

    screen.fill((0, 0, 0))
    pygame.draw.rect(screen, pygame.color.Color('Grey'), ball)
    pygame.display.flip()
    clock.tick(60)
"
Calculating the TF-IDF of a query string over a trained set of documents,"from sklearn.feature_extraction.text import TfidfVectorizer
all_lines = [""This is an example doc"", ""Another short example document ."", ""Just a third example""]

tf = TfidfVectorizer(analyzer='word')
tfidf_matrix =  tf.fit_transform(all_lines)
query_string = ""This is a short example string""
print ""Query String:""
print tf.transform([query_string])
print ""Example doc:""
print tf.transform([""This is a short example doc""])
"
Overlapping regex matches,"RNA = 'AGCCAUGUAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAGUAGCAUCUCAG'
candidates = []
start = 0

while (RNA.find('AUG', start) > -1):
    start = RNA.find('AUG', start) #Confound python and its lack of assignment returns
    candidates.append((RNA[start+3:], start+3))
    start += 1

matches = []

for candidate in candidates:
    for terminator in ['UAG', 'UGA', 'UAA']:
        end = 1;
        while(candidate[0].find(terminator, end) > -1):
            end = candidate[0].find(terminator, end)
            matches.append((candidate[1], candidate[1] + end, candidate[0][:end]))
            end += 1

for match in matches:
    print ""%d - %d: %s"" % match
"
clean line of punctuation and split into words python,"def createWordList(line):
    wordList2 =[]
    wordList1 = line.split()
    for word in wordList1:
        cleanWord = """"
        for char in word:
            if char in '!,.?"":;0123456789':
                char = """"
            cleanWord += char
        wordList2.append(cleanWord)
    return wordList2
"
"Simple ""blurring"" of an array representing an image in python from first principles","import math
def turnpixel(Nix,Niy):
    for ix in range(sx):
        for iy in range(sy):
            r=int(math.sqrt((Nix-ix)**2+(Niy-iy)**2))
            def convfunc(o,v):
                return o+int(v/(r*20+1))
            px2[Nix,Niy]=tuple(map(convfunc,px2[Nix,Niy],px[ix,iy]))
            if sum(px2[Nix,Niy])>=3*250:
                return
"
Create xml file without prologue with python dom minidom,"class SkipFirstWriter(object):
    def __init__(self, f):
        self.f = f
        self.firstline = True
    def write(self, buf):
        if self.firstline:
            if '>' in buf:
                self.f.write(buf.partition('>')[2])
                self.firstline = False
        else:
            self.f.write(buf)
with open('foo.xml', 'w') as f:
    skipper = SkipFirstWriter(f)
    x.writexml(skipper)
"
Subarray from lists of strings,">>> a = ['foo', 'foo', 'foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'bar']
>>> b = ['foo', 'foo', 'foo', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar', 'bar']
>>> [idx for idx, values in enumerate(zip(a, b)) if values == (""foo"", ""bar"")]
[3, 4]
"
MapReduce to count the frequency of the number consonants in words from a text file,"with open('conts.txt', 'w') as fh:
    fh.write('oh my god becky look at her butt it is soooo big')

consonants = ""bcdfghjklmnpqrstvwxyz""
def count_cons(_file):
    results = {}
    with open(_file, 'r') as fh:
        for line in fh:
            for word in line.split(' '):
                conts = sum([1 if letter in consonants else 0 for letter in word])
                if conts in results:
                    results[conts] += 1
                else:
                    results[conts] = 1
    return results

print count_cons('conts.txt')
"
How do i write a new line or \n into a file,"import os

files = run('ls -ltr /opt/nds')
files1 = run('ls -ltr /opt/web')
with open(section + ""_tmp""+"".txt"", ""w"") as fo:
    fo.write(files)
    fo.write(os.linesep)
    fo.write(files1)
"
Check between which floats in a list a given float falls,">>> numpy.searchsorted(a, b, side='right')
array([1, 4, 2, 0, 6, 5, 7, 0, 3, 2, 7], dtype=int64)
"
Perform simple math on regular expression output? (Python),"s = ""((words:0.23)75:0.55(morewords:0.1)2:0.55);""

s = re.sub(""\)(\d+)"", lambda m: "")"" + str(float(m.groups()[0]) / 100), s)

print s
# ((words:0.23)0.75:0.55(morewords:0.1)0.02:0.55);
"
Sums of subarrays,"def sub_sums_ophion(arr, nrows, ncols):
    h, w = arr.shape
    h = (h // nrows)*nrows
    w = (w // ncols)*ncols
    arr = arr[:h,:w]
    return np.einsum('ijkl->ik', arr.reshape(h // nrows, nrows, -1, ncols))
"
How do I get the whole content between two xml tags in Python?,"In [50]: (t.text + ''.join(map(etree.tostring, t))).strip()
Out[50]: '<title>Some testing stuff</title>\n  <text>Some text with <extradata>data</extradata> in it.</text>'
"
Python - returning from a Tkinter callback,"class App(...):
    ...
    def compute():
        ...
        result = self.square(self.var.get())
        self.results.append(result)
"
Python - Removing overlapping lists,"from quicksect import IntervalNode

class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
        self.removed = False

def maximize_nonoverlapping_count(intervals):
    intervals = [Interval(start, end) for start, end in intervals]
    # sort by the end-point
    intervals.sort(key=lambda x: (x.end, (x.end - x.start)))   # O(n*log n)
    tree = build_interval_tree(intervals) # O(n*log n)
    result = []
    for smallest in intervals: # O(n) (without the loop body)
        # pop the interval with the smallest end-point, keep it in the result
        if smallest.removed:
            continue # skip removed nodes
        smallest.removed = True
        result.append([smallest.start, smallest.end]) # O(1)

        # remove (mark) intervals that overlap with the popped interval
        tree.intersect(smallest.start, smallest.end, # O(log n + m)
                       lambda x: setattr(x.other, 'removed', True))
    return result

def build_interval_tree(intervals):
    root = IntervalNode(intervals[0].start, intervals[0].end,
                        other=intervals[0])
    return reduce(lambda tree, x: tree.insert(x.start, x.end, other=x),
                  intervals[1:], root)
"
"turn key=""value"" string into a dict",">>> import re
>>> twikiattribs = 'author=""PersonsName"" date=""1183050420"" format=""1.1"" version=""1.2""'
>>> re.findall(r'(\w+)=""([^""]+)""', twikiattribs)
[('author', 'PersonsName'), ('date', '1183050420'), ('format', '1.1'), ('version', '1.2')]
>>> dict(re.findall(r'(\w+)=""([^""]+)""', twikiattribs))
{'date': '1183050420', 'format': '1.1', 'version': '1.2', 'author': 'PersonsName'}
"
Load data from file and normalize,"In [4]: np.c_[x, y]
Out[4]:
array([[   0,    1,    2,    3,    4, 1000],
       [   5,    6,    7,    8,    9, 1001],
       [  10,   11,   12,   13,   14, 1002],
       [  15,   16,   17,   18,   19, 1003],
       [  20,   21,   22,   23,   24, 1004]])
"
get item's position in a list,"for i in (i for (i, x) in enumerate(testlist) if (x == 1)):
    pass"
Differentiating methods from variables of an object,"In [5]: [name for name in dir(a) if isinstance(getattr(a, name), types.MethodType)]
Out[5]: ['__init__', 'f']
"
Python: unpacking string of floats to complex numbers,">>> import numpy as np
>>> a = np.array([1.,2.,3.,4.])
>>> a
array([ 1.,  2.,  3.,  4.])
>>> a.dtype
dtype('float64')
>>> a.dtype = complex
>>> a
array([ 1.+2.j,  3.+4.j])
>>> 
"
"Creating Counts for binned data using .loc, slow","In [28]: %timeit my_df['count_type1'] = my_df.a.where(my_df.a.isnull(),1).fillna(0)
1000 loops, best of 3: 611 µs per loop
"
how to use 'pickle',"class A(object):
    def __init__(self):
        self.val = 100

    def __str__(self):
        """"""What a looks like if your print it""""""
        return 'A:'+str(self.val)

import pickle
a = A()
a_pickled = pickle.dumps(a)
a.val = 200
a2 = pickle.loads(a_pickled)
print 'the original a'
print a
print # newline
print 'a2 - a clone of a before we changed the value'
print a2
print 

print 'Why are you trying to use __setstate__, not __init__?'
print
"
When will numpy copy the array when using reshape(),"In [441]: y.shape=(3,4)
...
AttributeError: incompatible shape for a non-contiguous array
"
sorting list of nested dictionaries in python,"sorted(yourdata, reverse=True)"
converting include file in C to python,"import re
from functools import partial

replacements = (
    partial(re.compile(r'\s*#define ([A-Z_]+) (.*)').sub, r'\1 = \2'),
    partial(re.compile(r'\s*/\*\s*(.*?)\s*\*/').sub, r'# \1'),
)   

for line in inputsequence:
    for transform in replacements:
        line = transform(line)
    print line
"
Iteration over list slices,"chunker = Chunker(3)
for s in ""abcd"", ""efgh"":
    for chunk in chunker(s):
        print ''.join(chunk)

if chunker.chunk: # is there anything left?
    print ''.join(chunker.chunk)
"
xpath for capturing hover css property from selenium webelement in python,"webElement.value_of_css_property('background-color')
webElement.value_of_css_property('color')
webElement.value_of_css_property('text-decoration')
"
Get Index of 2D array in Python,"i, j = numpy.meshgrid(range(ncols), range(nrows))
result = f(data, i, j)
"
Python Find Duplicate with Note String Preservation,"from collections import OrderedDict

d = OrderedDict()
import re

r1 = re.compile(r""(?<=\))\s"")
r2 = re.compile(r""\(.*\)"")
for line in lines.splitlines():
    key = tuple(r1.split(r2.findall(line)[0])) 
      # (resid 44 and name H ) (resid 53 and name H ) ->  (resid 53 and name H ) (resid 44 and name H )   
    rev_k = tuple(reversed(key))
    if rev_k in d:
        d[rev_k] += "" DUPLICATE "" + "" "".join(line.rsplit(None,4)[1:])
    elif key in d:
        d[key] += "" DUPLICATE "" + "" "".join(line.rsplit(None,4)[1:])
    else:
        d[key] = line
"
Complex Sorting - Multi Key,"class Graph(object):
    def __init__(self, source, destination, weight, angle):
        self.source = source
        self.destination = destination
        self.weight = weight
        self.angle = angle
"
Understanding performance difference,"from timeit import Timer
N = 1000

d = {i:i for i in range(10000)}

def f1():
    for k in d: pass

def f2():
    for k in d.iterkeys(): pass

def f3():
    for v in d.itervalues(): pass

def f4():
    for t in d.iteritems(): pass

print(Timer(stmt='f1()', setup='from __main__ import f1').timeit(number=N))
print(Timer(stmt='f2()', setup='from __main__ import f2').timeit(number=N))
print(Timer(stmt='f3()', setup='from __main__ import f3').timeit(number=N))
print(Timer(stmt='f4()', setup='from __main__ import f4').timeit(number=N))
"
"Classify values in a list based on original DF (Python 3, Pandas)","import pandas as pd

df = pd.read_table('data', sep='\s+')
kw = df[['Word',""Group"",""Subgroup""]]

words = df['Word']

md = {""m"":""w"",""o"":""z""}
md = {k: v.split(',') for k, v in md.items()}

newwords = []
for word in words:
    # Save both the original word and the new word
    newwords.append((word, word))
    for c in md:
        occ = word.count(c)
        pos = 0
        for _ in range(occ):
            pos = word.find(c, pos)
            for r in md[c]:
                tmp = word[:pos] + r + word[pos+1:]
                newwords.append((word, tmp))

newwords = pd.DataFrame(newwords, columns=['Word', 'New'])
# Merge on the original Word
result = pd.merge(newwords, kw, left_on='Word', right_on='Word', how='left')
result = result[['Group', 'Subgroup', 'New']]
result.columns =  ['Group', 'Subgroup', 'Word']
print(result)
"
"Field calculated from Foreign Keys, need to save twice?","IPv4Pool.objects.annotate(available_ips=Count('ip_ranges'),
                          num_subscribers=Count('subscribers'),
                 ).filter(num_subscribers__lt=F('available_ips'))
"
How to extract sublists from a string in Python?,"L = [[1], ['apple', 2], [3], [4], [5], [6], [7]]

for i in xrange(7):
  exec(""s%d = L[%d]"" % ((i+1), i))
"
Python split('\n') breaks a row midway instead of after end of line,"for line in output1:
    line = line.replace(' ', '(^_^)')
    line = line.split()
    line = [word.replace('(^_^)', ' ').strip() for word in line]
    line = ','.join([word.strip(',') for word in line])
    print line
"
How to extract those rows in a 2d array whose first element is in a different list?,"In [30]: big = np.full(arr[:,0].max()+1, np.nan)

In [31]: big[arr[:,0]] = arr[:,1]

In [32]: big[vals]
Out[32]: array([ 1.,  3.])
"
Running Total - Python,"wordCounts = {}
word = wordEncountered
wordCounts[wordEncountered] = wordCounts.get(wordEncountered,default=0) + 1
print wordCounts
"
accessing ArgumentParser variable with environment variable,"#!/usr/bin/python

import argparse

def run(p):

    """""" Execute base on the arguments """"""
    if p.get('create', False) is True:
        # do something
        return True

    elif p.get('find', False) is True:
        # do something
        return True
    else:
        return False

def main():

    parser = argparse.ArgumentParser(prog='ipush',
                   description='Utility to push the last commit and email the color diff')
    parser.add_argument('--find', action=""store_true"",
                       help=""find the user details"")
    parser.add_argument('--create', action='store_true',
                       help=""creating the database"")

    p = parser.parse_args()

    argument = vars(p)

    if run(argument) is False:
        parser.print_usage()

if __name__ == '__main__':
    main()
"
How to read a line from a text file and use it as an input," formatted_line = ''.join([a for a in line if a.isdigit() or a == '.'])
"
Plot 2D Numpy Array,"import matplotlib.pyplot as plt
imgplot = plt.imshow(arr[:, :, 0])
"
Variable area threshold for identifying objects - python,"from matplotlib import pyplot as plt

fig, (ax1, ax2, ax3) = plt.subplots(1, 3)

ax1.imshow(a, cmap=plt.cm.jet)
ax2.imshow(labels, cmap=plt.cm.jet)
ax3.imshow(biggest_shape, cmap=plt.cm.jet)
"
escaping characters in a xml file with python,"from lxml import etree

parser = etree.XMLParser(recover=True) # recover from bad characters.
root = etree.fromstring(broken_xml, parser=parser)
print etree.tostring(root)
"
Python Skip one or more lines in a text file,"def some_condition(line):
    return ""line_to_be_skipped"" in line
"
Is it possible to create new tags in Mako?,"def my_tag(context):
    context.write(""hello world"")
    return ''
"
Extracting text between two markers and handling Backslashes in Regex for Python,"import re

myfile = open('inputfile.txt', 'r')
regex  = re.compile(r'(?<=data-start=\\"").*?(?=\\"" data-end)')

for line in myfile:
    matches = regex.findall(line)
    for m in matches:
        print m
"
How to automatically direct print statements' outputs to a file in python?,"import sys

class Logger(object):
    def __init__(self, *files):
        self.files = files

    def write(self, obj):
        for f in self.files:
            f.write(obj)

f = open('file', 'w')
sys.stdout = Logger(f, sys.stdout)

print ""Python Magic""
"
How to change legend size with matplotlib.pyplot,"pyplot.legend(loc=2, fontsize='x-small')"
Using variables when referring to an objects datamember,"fields = {'title': 'My Title', 
          'description': 'My Description', 
          'name': 'My Name'}

foo = Foo(**fields)
foo.save()
"
Printing sequence of different print commands in python,"import random
print '\n'.join(sorted(['I am here', 'I like spring', 'My house has two floors', 'Sun is bright'], key=lambda *args: random.random()))
"
Optimizing function computation in a pandas column?,"# Python3 code:
import pandas as pd
import numpy as np
import treetaggerwrapper
import multiprocessing as mp

input_file = 'new_corpus.csv'
output_file = 'output3.csv'

''' Reading in the file '''
all_lines = []
with open(input_file) as f:
    for line in f:
        all_lines.append(line.strip().split('|', 1))

df = pd.DataFrame(all_lines[1:], columns = all_lines[0])

''' Multiprocessing '''

# Number of processes can be adjusted for better performance:
nproc = mp.cpu_count()

# Function to be run at the start of every subprocess.
# Each subprocess will have its own TreeTagger called pool_tagger.
def init():
    global pool_tagger
    pool_tagger = treetaggerwrapper.TreeTagger(TAGLANG='en')

# The actual job done in subprcesses:
def run(arr):
    out = np.empty_like(arr)
    for i in range(len(arr)):
        out[i] = pool_tagger.tag_text(arr[i])
    return out

# Splitting the input
lst_split = np.array_split(df.values[:,1], nproc)

with mp.Pool(processes = nproc, initializer = init) as p:
    lst_out = p.map(run, lst_split)

# Concatenating the output from subprocesses 
df['POS-tagged_content'] =  np.concatenate(lst_out) 

# Format fix:
def fix_format(x):
    '''x - a list or an array'''
    out = list(tuple(i.split('\t')) for i in x)
    return out
df['POS-tagged_content'] = df['POS-tagged_content'].apply(fix_format)

df.to_csv(output_file, sep = '|')
"
How to not count the duplicates from an user input?,"words = []
word = input('Word: ')
while word != '':
    if word not in words:
        words.append(word)
    word = input('Word: ')
print(""You know ""+ str(len(words)), ""unique word(s)!"")
"
Fliping dictionary key value Python,"from collections import Counter
>>> Counter(d.values())
Counter({2: 7, 0: 3, 1: 3, 4: 3, 3: 1})
"
Add a number to the front of a number row python,">>> l = [1,2,3]
>>> l = [4] + l
>>> l
[4, 1, 2, 3]
"
Finding specific links with Beautiful Soup,"b = soup.find(""b"", text=lambda text and ""data I DO care about:"" in text)
li = b.find_parent(""li"")
links = [a[""href""] for a in li.find_all(""a"", href=True)]
print(links)
"
How to convert pandas single column data frame to series or numpy vector,"In [24]: tdf =  pd.DataFrame({'s1' : [0,1,23.4,10,23]})

In [25]: tdf['s1']
Out[25]:
0     0.0
1     1.0
2    23.4
3    10.0
4    23.0
Name: s1, dtype: float64

In [26]: tdf['s1'].shape
Out[26]: (5,)
"
Numpy matrices - how to handle arbitrary size,"In [222]: ind=(slice(3,5),slice(None),1,Ellipsis)
In [223]: x[ind].shape
Out[223]: (2, 3, 32)
"
How to remove \n from a list element?,"t = map(lambda s: s.strip(), t)
"
Split a list into nested lists on a value,"import timeit    

kabie=(""isplit_kabie"",
""""""
import itertools
def isplit_kabie(iterable,splitters):
    return [list(g) for k,g in itertools.groupby(iterable,lambda x:x in splitters) if not k]
"""""" )

ssplit=(""ssplit"",
""""""
def ssplit(seq,splitters):
    seq=list(seq)
    if splitters and seq:
        result=[]
        begin=0
        for end in range(len(seq)):
            if seq[end] in splitters:
                if end > begin:
                    result.append(seq[begin:end])
                begin=end+1
        if begin<len(seq):
            result.append(seq[begin:])
        return result
    return [seq]
"""""" )

ssplit2=(""ssplit2"",
""""""
def ssplit2(seq,splitters):
    seq=list(seq)
    if splitters and seq:
        splitters=set(splitters).intersection(seq)
        if splitters:
            result=[]
            begin=0
            for end in range(len(seq)):
                if seq[end] in splitters:
                    if end > begin:
                        result.append(seq[begin:end])
                    begin=end+1
            if begin<len(seq):
                result.append(seq[begin:])
            return result
    return [seq]
"""""" )

emile=(""magicsplit"",
""""""
def _itersplit(l, *splitters):
    current = []
    for item in l:
        if item in splitters:
            yield current
            current = []
        else:
            current.append(item)
    yield current

def magicsplit(l, splitters):
    return [subl for subl in _itersplit(l, *splitters) if subl]
"""""" )

emile_improved=(""magicsplit2"",
""""""
def _itersplit(l, *splitters):
    current = []
    for item in l:
        if item in splitters:
            if current:
                yield current
                current = []
        else:
            current.append(item)
    if current:
        yield current

def magicsplit2(l, splitters):
    if splitters and l:
        return [i for i in _itersplit(l, *splitters)]
    return [list(l)]
"""""" )

karl=(""ssplit_karl"",
""""""
def ssplit_karl(original,splitters):
    indices = [i for (i, x) in enumerate(original) if x in splitters]
    ends = indices + [len(original)]
    begins = [0] + [x + 1 for x in indices]
    return [original[begin:end] for (begin, end) in zip(begins, ends)]
"""""" )

ryan=(""split_on"",
""""""
from functools import reduce
def split_on (seq, delims, remove_empty=True):
    '''Split seq into lists using delims as a delimiting elements.

    For example, split_on(delims=2, list=xrange(0,5)) yields [ [0,1], [3,4] ].

    delims can be either a single delimiting element or a list or
    tuple of multiple delimiting elements. If you wish to use a list
    or tuple as a delimiter, you must enclose it in another list or
    tuple.

    If remove_empty is False, then consecutive delimiter elements or delimiter elements at the beginning or end of the longlist'''
    delims=set(delims)
    def reduce_fun(lists, elem):
        if elem in delims:
            if remove_empty and lists[-1] == []:
                # Avoid adding multiple empty lists
                pass
            else:
                lists.append([])
        else:
            lists[-1].append(elem)
        return lists
    result_list = reduce(reduce_fun, seq, [ [], ])
    # Maybe remove trailing empty list
    if remove_empty and result_list[-1] == []:
        result_list.pop()
    return result_list
"""""" )

cases=(kabie, emile, emile_improved, ssplit ,ssplit2 ,ryan)

data=(
    ([1, 4, None, 6, 9, None, 3, 9, 4 ],(None,)),
    ([1, 4, None, 6, 9, None, 3, 9, 4 ]*5,{None,9,7}),
    ((),()),
    (range(1000),()),
    (""Split me"",('','')),
    (""split me ""*100,' '),
    (""split me,""*100,' ,'*20),
    (""split me, please!""*100,' ,!'),
    (range(100),range(100)),
    (range(100),range(101,1000)),
    (range(100),range(50,150)),
    (list(range(100))*30,(99,)),
    )

params=""seq,splitters""

def benchmark(func,code,data,params='',times=10000,rounds=3,debug=''):
    assert(func.isidentifier())
    tester = timeit.Timer(stmt='{func}({params})'.format(
                                func=func,params=params),
                          setup=""{code}\n"".format(code=code)+
            (params and ""{params}={data}\n"".format(params=params,data=data)) +
            (debug and """"""ret=repr({func}({params}))
print({func}.__name__.rjust(16),"":"",ret[:30]+""...""+ret[-15:] if len(ret)>50 else ret)
                       """""".format(func=func,params=params)))
    results = [tester.timeit(times) for i in range(rounds)]
    if not debug:
        print(""{:>16s} takes:{:6.4f},avg:{:.2e},best:{:.4f},worst:{:.4f}"".format(
            func,sum(results),sum(results)/times/rounds,min(results),max(results)))

def testAll(cases,data,params='',times=10000,rounds=3,debug=''):
    if debug:
        times,rounds = 1,1
    for dat in data:
        sdat = tuple(map(repr,dat))
        print(""{}x{} times:"".format(times,rounds),
              ','.join(""{}"".format(d[:8]+""...""+d[-5:] if len(d)>16 else d)for d in map(repr,dat)))
        for func,code in cases:
            benchmark(func,code,dat,params,times,rounds,debug)

if __name__=='__main__':
    testAll(cases,data,params,500,10)#,debug=True)
"
extracting data from multiple text files using python,"line = line[:-2]
line = line.rstrip()
"
How do you do a python 'eval' only within an object context?,">>> class Foo(object):
...     def __init__(self):
...         self.bar = 3
>>> foo = Foo()
>>> eval('a', globals(), foo.__dict__)
3
"
How to rename labels in list?,">>> labels = 301, 303, 306, 308, 308, 309
>>> names = {}
>>> for l in labels:
...     names.setdefault(l, len(names)+1)
...
>>> names
{301: 1, 303: 2, 306: 3, 308: 4, 309: 5}
"
Is it possible to sort using sorted() with attributes from two different models?,"posts_list = sorted(posts_list, key=lambda post: (Vote.objects.get_score(post)['score'], post.datetime))
"
Generalized reference that allows efficient deletion from a variety of containers,"class Container(linkedlist, RemovalAPI):
  def __iter__(self):
    it = super().__iter__()
    last_item = None
    for item in it:
      self.add_removal_info(item, last_item)
      yield item

  def remove(self, item):
    removal_info = self.get_removal_info(item)
    if removal_info is None:
      self.remove_first()
    else:
      self.remove_after(removal_info)

  def insert(self, item):
    self.add_removal_info(item, None)
    self.add_to_front(item)
    # do whatever post-processing I need
    # ...
"
Changing textvariable for single OptionMenu in loop Tkinter,"for row_number, row_data in enumerate(info):
    var = StringVar(...)
    self.type = OptionMenu(..., command=lambda new_value, variable=var: self.VarMenu(new_value, variable)
"
delete lines from file in python,"import shutil

with open(filePath, 'r') as f, open('new_' + filePath, 'w') as output:
    for line in f:
        n = next(f)
        if n != '0\n':
            output.write(line+n)

shutil.move(""new_"" + filePath, filePath)
"
"Replacing 'match' object with string, Python","subbedlines = []

with open('sample','r') as textreader:
    lines = textreader.read().split('\n')

for line in lines:
    subbedlines.append(re.sub('.*#= min, max\s', ""HOLA"", line))
"
Find bracket which are not closed without using regex in python,"BRACKETS = (""()"", ""[]"", ""{}"")
def check_brackets(s):
    counter = []
    for chr in s:
        for br in BRACKETS:
            open = br[0]
            close = br[1]
            if chr == open:
                counter.append(open)
                break
            elif chr == close:
                try:
                    last_br = counter.pop()
                except IndexError:
                    return False
                if last_br != open: # ensures that the end matches the beginnig
                    return False
    return not bool(counter)
"
Create multiple unique copies of an array,"b, c, d = np.repeat(a[None, ...], 3, axis=0)
"
python replace None with blank in list using list Comprehensions or something else? Also a nested list solution,"b = ['' if x is None else x for x in a]    #and use is None instead of == None

>>> print b
['', '', '2014-04-27 17:31:17', '', '']
"
How can one mock/stub python module like urllib,"import urllib

def some_function_that_uses_urllib():
    ...
    urllib.urlopen()
    ...
"
Reading pairs of rows from a file,"strID = raw_input(""Username : "")
strPassWd = getpass.getpass(""Password : "")

loggedIn = False

with open('studentsusers.csv', 'rb') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=',')

    for row in spamreader:
        strLoginID, strLoginPasswd = row

        while strLoginID != """":
            if strID == strLoginID and strLoginPasswd == strPassWd:
                print strID, ""Logged In""
                loggedIn = True
                return
            else:
                break   # goes on to the next row in spamreader

if loggedIn:
    PupilMenu()
    strContinue = sys.stdin.readline()
else:
    print ""Login ID or password incorrect, press enter to continue""
    strContinue = sys.stdin
"
Python: Get flattr count,"import urllib2
import lxml.html as LH
from PyQt4 import QtGui, QtCore, QtWebKit
import sys

class Render(QtWebKit.QWebPage):
    def __init__(self, url):
        self.app = QtGui.QApplication(sys.argv)
        QtWebKit.QWebPage.__init__(self)
        self.loadFinished.connect(self._loadFinished)
        self.mainFrame().load(QtCore.QUrl(url))
        self.app.exec_()

    def _loadFinished(self, result):
        self.frame = self.mainFrame()
        self.app.quit()

def main():
    liste = []
    for k in range(2, 3):
        url = ""http://www.spiegelfechter.com/wordpress/page/"" + str(k)
        r = Render(url)
        content = unicode(r.frame.toHtml())
        doc = LH.fromstring(content)
        for span in doc.xpath('//span[@class=""commentbutton""]'):
            a = span.xpath('a')[0]
            post = a.attrib['href']
            kommentare = a.text_content()
            # kommentare is expected to be a string such as '14 Kommentare'
            comments = int(kommentare.split()[0])

            iframe = span.xpath('iframe')[0]
            flattr_url = (iframe.attrib['src'])
            flattr_doc = LH.parse(flattr_url)
            span = flattr_doc.xpath('//span[@class=""flattr-count""]')[0]
            flattr_count = int(span.text_content())
            liste.append((comments, flattr_count, post))
        for elt in sorted(liste):
            print(elt)

if __name__ == '__main__':
    main()
"
pick and choose from two nested lists by a pattern using Python,"def choose(first, second, value):
    if hasattr(first, '__iter__'):
        return [choose(i,j,k) for i,j,k in zip(first, second, value)]
    else:
        return first if value else second
"
Code works but too slow,"D2 = (xf[:,None] - xg[None,:])**2 + (yf[:,None] - yg[None,:])**2 + (zf[:,None] - zg[None,:])**2
near = D2 < 20**2
a1 = np.array([G.epsilon[near_row].mean() for near_row in near])
"
Delete numbers not dates in Python (regex),"p = re.compile(r'\b(?!(?:18|19|20)\d{2}\b)\d+\b')
test_str = ""Stack Overflow is a privately held website, the flagship site of the Stack Exchange Network, 4 5 6 created in 2008""
print p.sub("""", test_str)
"
Nested dictionaries in classes,"class IncomeVerification(object):
        data = {'IncomeYears': []}
        def __init__(self, income_years):
            for year in income_years:
                new_year = IncomeYear(year).data
                self.data['IncomeYears'].append(new_year)

class IncomeYear(object):
    def __init__(self, year, reported_income=None):
        # new dict/object for each instance
        self.data = {'IncomeYear': {'Year': None}}
        self.data['IncomeYear']['Year'] = year

income_years = ['2014', '2013', '2012', '2011']

foo = IncomeVerification(income_years)
print(foo.data)
"
Scraping website that uses javascript,"import requests

url = 'http://stats.nba.com/stats/playergamelog'

params = {
    'Season': '2013-14',
    'SeasonType': 'Regular Season',
    'LeagueID': '00',
    'PlayerID': '2544',
    'pageNo': '1',
    'rowsPerPage': '100'
}
response = requests.post(url, data=params)

print response.json()
"
"Why wont collide_rect work in this scenario? The game keeps printing ""Collided!"" even when the two sprites aren't touching?","import pygame
import time
import random

pygame.init()

WHITE = (pygame.Color(""white""))
BLACK = (  0,   0,  0)
RED   = (245,   0,  0)
TURQ  = (pygame.Color(""turquoise""))
GREEN = (  0, 155,  0)
GREY  = ( 90,  90, 90)
SCREEN = (800, 600)
gameDisplay = pygame.display.set_mode(SCREEN)
#Set the window title and picture
pygame.display.set_caption('Block Worm')
ICON = pygame.Surface((10,10)) #pygame.image.load(""apple10pix.png"")

pygame.display.set_icon(ICON)
CLOCK = pygame.time.Clock()
FPS = 20
FONT = pygame.font.SysFont(""arial"", 25)
APPLE_SIZE = 10
TINY_FONT = pygame.font.SysFont(""candara"", 15)
SMALL_FONT = pygame.font.SysFont(""candara"", 25)
MED_FONT = pygame.font.SysFont(""candara"", 50)
LARGE_FONT = pygame.font.SysFont(""krabbypatty"", 75)
HUGE_FONT = pygame.font.SysFont(""krabbypatty"", 150)
IMG = pygame.Surface((10,10)) #pygame.image.load(""snakehead.png"")
APPLE_IMG = pygame.Surface((10,10)) #pygame.image.load(""apple10pix.png"")
DIRECTION = ""up""    

def pause():
    paused = True
    message_to_screen(""Paused"",
                      BLACK,
                      Y_DISPLACE = -100,
                      size = ""huge"")
    message_to_screen(""Press C to continue or Q to quit."",
                      BLACK,
                      Y_DISPLACE = 25)
    pygame.display.update()
    while paused:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key in (pygame.K_c, pygame.K_p):
                    paused = False
                elif event.key in(pygame.K_q, pygame.K_ESCAPE):
                    pygame.quit()
                    quit()
        CLOCK.tick(5)

def score(score):
    text = SMALL_FONT.render(""Score: "" + str(score), True, BLACK)
    gameDisplay.blit(text, [0, 0])

def game_intro():
    intro = True
    while intro:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_c:
                    intro = False
                if event.key in (pygame.K_q, pygame.K_ESCAPE):
                    pygame.quit()
                    quit()
        gameDisplay.fill(WHITE)
        message_to_screen(""Welcome to"",
                          GREEN,
                          Y_DISPLACE = -170,
                          size = ""large"")
        message_to_screen(""Block Worm"",
                          GREEN,
                          Y_DISPLACE = -50,
                          size = ""huge"")
        message_to_screen(""The objective of the game is to eat apples."",
                          BLACK,
                          Y_DISPLACE = 36,
                          size = ""tiny"")
        message_to_screen(""The more apples you eat the longer you get."",
                          BLACK,
                          Y_DISPLACE = 68,
                          size = ""tiny"")
        message_to_screen(""If you run into yourself or the edges, you die."",
                          BLACK,
                          Y_DISPLACE = 100,
                          size = ""tiny"")
        message_to_screen(""Press C to play or Q to quit."",
                          GREY,
                          Y_DISPLACE = 210,)
        pygame.display.update()
        CLOCK.tick(FPS)

def text_objects(text, color, size):
    if size == ""tiny"":
        TEXT_SURFACE = TINY_FONT.render(text, True, color)
    elif size == ""small"":
        TEXT_SURFACE = SMALL_FONT.render(text, True, color)
    elif size == ""medium"":
        TEXT_SURFACE = MED_FONT.render(text, True, color)
    elif size == ""large"":
        TEXT_SURFACE = LARGE_FONT.render(text, True, color)
    elif size == ""huge"":
        TEXT_SURFACE = HUGE_FONT.render(text, True, color)
    return TEXT_SURFACE, TEXT_SURFACE.get_rect()

def message_to_screen(msg, color, Y_DISPLACE = 0, size = ""small""):
    TEXT_SURF, TEXT_RECT = text_objects(msg, color, size)
    TEXT_RECT.center = (SCREEN[0] / 2), (SCREEN[1] / 2) + Y_DISPLACE
    gameDisplay.blit(TEXT_SURF, TEXT_RECT)

class Snake(pygame.sprite.Sprite):
    def __init__(self, image, size, trail, start_size):
        pygame.sprite.Sprite.__init__(self)
        self.image = image
        self.size = size
        self.trail = trail
        self.start_size = start_size
        self.rect = self.image.get_rect()
        if DIRECTION == ""right"":
            HEAD = pygame.transform.rotate(self.image, 270)
        elif DIRECTION == ""left"":
            HEAD = pygame.transform.rotate(self.image, 90)
        elif DIRECTION == ""down"":
            HEAD = pygame.transform.rotate(self.image, 180)
        else:
            HEAD = image
        gameDisplay.blit(HEAD, (self.trail[-1][0], self.trail[-1][1]))
        for XnY in self.trail[:-1]:
            pygame.draw.rect(gameDisplay, GREEN, [XnY[0], XnY[1], self.size, self.size])

    def set_rect(self, rect):
        self.rect = rect

class Apple(pygame.sprite.Sprite):
    def __init__(self, image):
        pygame.sprite.Sprite.__init__(self)
        self.image = image
        self.random_location()
        self.size = self.rect.width
        gameDisplay.blit(self.image, (100, 100))

    def random_location(self):

        x = random.randrange(0, (SCREEN[0] - 10), 10)
        y = random.randrange(0, (SCREEN[1]- 10), 10)
        self.rect = pygame.Rect(x,y, 10, 10)
        print ""apple rect ="",
        print self.rect

    def draw(self):
        gameDisplay.blit(self.image, (self.rect.x, self.rect.y))




def gameLoop():
    global DIRECTION
    DIRECTION = ""up""
    gameExit = False
    gameOver = False
    SCORE = 0

    player_snake_trail = [] # Where the snake head has been.
    enemy_snake_trail = [] # If I create an AI snake.
    start_length = 1

    lead_x = (SCREEN[0] / 2)
    lead_y = (SCREEN[1] - (SCREEN[1] / 5))
    move_speed = 10
    move_speed_neg = move_speed * -1
    lead_x_change = 0
    lead_y_change = -move_speed


    red_apple = Apple(APPLE_IMG)

    while not gameExit:
        if gameOver == True:
            message_to_screen(""Game over"",
                              RED,
                              Y_DISPLACE = -50,
                              size = ""huge"")
            message_to_screen(""Press C to play again or Q to quit."",
                              BLACK,
                              Y_DISPLACE = 50,
                              size = ""small"")
            pygame.display.update()
        while gameOver == True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    gameExit = True
                    gameOver = False
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_q:
                        gameOver = False
                        gameExit = True
                    elif event.key == pygame.K_c:
                        gameLoop()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                gameExit = True
            elif event.type == pygame.KEYDOWN:
                if event.key in (pygame.K_LEFT, pygame.K_a):
                    lead_x_change = move_speed_neg
                    lead_y_change = 0
                    DIRECTION = ""left""
                elif event.key in (pygame.K_RIGHT, pygame.K_d):
                    lead_x_change = move_speed
                    lead_y_change = 0
                    DIRECTION = ""right""
                elif event.key in (pygame.K_UP, pygame.K_w):
                    lead_y_change = move_speed_neg
                    lead_x_change = 0
                    DIRECTION = ""up""
                elif event.key in (pygame.K_DOWN, pygame.K_s):
                    lead_y_change = move_speed
                    lead_x_change = 0
                    DIRECTION = ""down""
                elif event.key in (pygame.K_p, pygame.K_ESCAPE):
                    pause()

        # If the snake goes beyond the screen borders the game will end.
        if lead_x >= SCREEN[0] or lead_x < 0 or lead_y >= SCREEN[1] or lead_y <0:
            gameOver = True

        lead_x += lead_x_change
        lead_y += lead_y_change

        gameDisplay.fill(WHITE)

        # Draw the snake on screen
        SNAKE_HEAD = []
        SNAKE_HEAD.append(lead_x)
        SNAKE_HEAD.append(lead_y)
        player_snake_trail.append(SNAKE_HEAD)

        # draw the apple on the screen
        red_apple.draw()

        # If you hit yourself, game over.
        if SNAKE_HEAD in player_snake_trail[:-1]:
           gameOver = True
        if len(player_snake_trail) > start_length:
            del player_snake_trail[0]

        player_snake = Snake(IMG, 10, player_snake_trail, start_length)
        player_snake.set_rect(pygame.Rect(lead_x, lead_y, 10, 10))

        if pygame.sprite.collide_rect(player_snake, red_apple) == True:
           print(""Collided!"")

           start_length += 1
           SCORE += 1
           red_apple.random_location()

        # If the snake eats the apple
        # Old code below, needs to be rewritten. Disregard.
##        if APPLE_RECT.collidepoint(lead_x, lead_y) == True:
##            randAppleX, randAppleY = randAppleGen()
##            start_length += 1
##            SCORE += 1

        score(SCORE)

        pygame.display.update()
        CLOCK.tick(FPS)
    pygame.quit()
    quit()

game_intro()
gameLoop()
"
check for value in list of Pandas data frame columns,"for n in drugs:
    df[n] = df[['MED1','MED2','MED3','MED4','MED5']].isin([drugs[n]]).any(1)
"
Unexpected Python print behavior,"from __future__ import print_function
"
How can I ignore a member when serializing an object with PyYAML?,"class SecretYamlObject(yaml.YAMLObject):
     hidden_fields = []
     @classmethod
     def to_yaml(cls,dumper,data):
         new_data = deepcopy(data)
         for item in cls.hidden_fields:
             del new_data.__dict__[item]
         return dumper.represent_yaml_object(cls.yaml_tag, new_data, cls,
                                            flow_style=cls.yaml_flow_style)

class Trivial(SecretYamlObject):
     hidden_fields = [""_ignore""]
     yaml_tag = u'!Trivial'
     def __init__(self):
        self.a = 1
        self.b = 2
        self._ignore = 3

print yaml.dump(Trivial())
"
Break the sentence into words using the space character as a delimiter in Python,"try:
    print('\n'.join(str(int(i)*2) if i.isdigit() else i for i in wordList)
except ValueError:
    print('\n'.join(str(float(i)*2) if i.isdigit() else i for i in wordList)
"
Apply non-linear regression for multi dimension data samples in Python,"import numpy as np
from scipy.optimize import leastsq

data =np.array(
[[-0.042780748663101636, -0.0040771571786609945, -0.00506567946276074],
[0.042780748663101636, -0.0044771571786609945, -0.10506567946276074],
[0.542780748663101636, -0.005771571786609945, 0.30506567946276074],
[-0.342780748663101636, -0.0304077157178660995, 0.90506567946276074]])

coefficient = data[:,0:2]
dependent = data[:,-1]

def model(p,x):
    a,b,c = p
    u = x[:,0]
    v = x[:,1]
    return (a*u**2 + b*v + c)

def residuals(p, y, x):
    a,b,c = p
    err = y - model(p,x)
    return err

p0 = np.array([2,3,4]) #some initial guess

p = leastsq(residuals, p0, args=(dependent, coefficient))[0]

def f(p,x):
    return p[0]*x[0] + p[1]*x[1] + p[2]

for x in coefficient:
    print f(p,x)
"
Access environment variables,os.environ['HOME']
Efficient way to find the largest key in a dictionary with non-zero value,"(k for k, v in x.items() if v != 0)"
How to use git blame in GitPython?,"ln = 127 # lines start at 0 here
tlc = 0

for commit, lines in repo.blame('HEAD', filepath):
    if tlc <= ln < (tlc + len(lines)):
         print(commit)
    tlc += len(lines)
"
Caesar Cipher: How to print from dictionary *all* letters from input?,"def translate(lettered_code):
    new_answer = """" # set variable outside the for loop to an empty string
    for letters in lettered_code:
        new_answer += translation[letters] # add each translated letter to new_answer
    return new_answer # return all joined letters
"
Calling an external command,os.system('some_command < input_file | another_command > output_file')
"Is there a more elegant way for unpacking keys and values of a dictionary into two lists, without losing consistence?","keys, values = zip(*list(d.items()))"
Extract the number and following letter from regex,"currency, amount, multiplier = re.match(r'(\D+)(\d+(?:\.\d+)?)([mMkK])', '$1.5k').groups()
"
Python Web Scraping - Navigating to Next_Page link and obtaining data,"from urlparse import urlparse, parse_qs
for pageno in xrange(1, int(parse_qs(urlparse(url).query)['page'][0]) + 1):
    pass # do something useful here like building a url string with pageno
"
Shortening down printing single values in a dictionary,"if choice_day == ""monday"" and choice_period == ""NO"":
    print '\n'.join(sorted(monday.values()))
"
Build list of tuples from simple list,">>> L = [3, 2, -1, 7, 3, 5]
>>> [(x, i) for i, x in enumerate(L, 1)]
[(3, 1), (2, 2), (-1, 3), (7, 4), (3, 5), (5, 6)]
"
How do you extract a url from a string using python?,">>> myString = ""These are the links http://www.google.com  and http://stackoverflow.com/questions/839994/extracting-a-url-in-python""
>>> print re.findall(r'(https?://[^\s]+)', myString)
['http://www.google.com', 'http://stackoverflow.com/questions/839994/extracting-a-url-in-python']
>>> 
"
"Python: Converting ('Monday', 'Tuesday', 'Wednesday') to 'Monday to Wednesday'","def weekdays_to_string(days):
    # convert days to indexes
    day_indexes = {name:i for i, name in enumerate(calendar.day_name)}
    indexes = [day_indexes[d] for d in days]

    # find the places where sequential days end
    ends = [i + 1
            for i in range(len(indexes))
            if (indexes[(i + 1) % len(indexes)]) % 7 !=
               (indexes[(i) % len(indexes)] + 1) % 7]

    # wrap the days if necessary to get longest possible sequences
    split = ends[-1]
    if split != len(days):
        days = days[split:] + days[:split]
        ends = [len(days) - split + end for end in ends]

    # group the days in sequential spans
    spans = [days[begin:end] for begin, end in zip([0] + ends, ends)]

    # format as requested, with ""to"", ""and"", commas, etc.
    words = []
    for span in spans:
        if len(span) < 3:
            words.extend(span)
        else:
            words.append(""%s to %s"" % (span[0], span[-1]))
    if len(days) == 1:
        return words[0]
    elif len(days) == 2:
        return ""%s and %s"" % tuple(words)
    else:
        return "", "".join(words)
"
How to determine if win32api.ShellExecute was successful using hinstance?,"import win32com.shell.shell as shell
import win32event
#fMask = SEE_MASK_NOASYNC(0x00000100) = 256 + SEE_MASK_NOCLOSEPROCESS(0x00000040) = 64
dict = shell.ShellExecuteEx(fMask = 256 + 64, lpFile='Notepad.exe', lpParameters='Notes.txt')
hh = dict['hProcess']
print hh
ret = win32event.WaitForSingleObject(hh, -1)
print ret
"
Python: Check for partial match of strings between two lists,"def get_sub_strings(s):
    words = s.split()
    for i in xrange(len(words)+1, 0, -1):
        for n in xrange(0, len(words)+1-i):
            yield ' '.join(words[n:n+i])

out = []
for word in c:
    for sub in get_sub_strings(word.lower()):
        if any(sub in s.lower() for s in isl):
            out.append(sub)
            break

print out
#['john', 'query 989877', 'tamm']
"
Creating an empty deque in Python with a max length?,">>> collections.deque(maxlen=23)
deque([], maxlen=23)
"
Is there a way to swap between logical operators on the basis of some boolean?,"import operator

def test(arg1, arg2, compare_function):

    if compare_function(arg1, arg2):
        print(""condition is true"")
    else:
        print(""condition is false"")
"
Python: XY density plot,"import numpy as np
np.histogram2d(x, y, bins=(nx,ny), normed=True)
"
"While loop executes once during return, runs fine during print [python]","def run_logistic(xn,r,iterates):
    iteration = 1
    xn_list = []
    while iteration <= iterates:
        xn1 = logistic_map(xn,r)
        iteration = iteration + 1
        xn = xn1
        xn_list.append(xn)
    return xn_list # Put return outside while-loop to get full list of values
"
Regex to remove periods in acronyms?,"re.sub('(?<!\\w)([A-Z])\\.', '\\1', s)"
Slice numpy array based on x number of other arrays,"my_arrays = [array1, array2]
my_lists = [my_list1, my_list2]
main1[np.logical_and(*(np.in1d(array, lst) for array, lst in zip(my_arrays, my_lists)))]
"
Splitting array values in dataframe into new dataframe - python," criterion = df['price_trend'].map(lambda x: len(x) > 0 and all(len(pair) == 2 for pair in x))
 df[criterion].groupby('Id', group_keys=False).apply(f)
"
Tkinter image as frame style,"import base64

with open('frameBorder.gif', 'wb') as f:
    decoded = base64.decodestring(b""""""
    R0lGODlhQABAAPcAAHx+fMTCxKSipOTi5JSSlNTS1LSytPTy9IyKjMzKzKyq
    rOzq7JyanNza3Ly6vPz6/ISChMTGxKSmpOTm5JSWlNTW1LS2tPT29IyOjMzO
    zKyurOzu7JyenNze3Ly+vPz+/OkAKOUA5IEAEnwAAACuQACUAAFBAAB+AFYd
    QAC0AABBAAB+AIjMAuEEABINAAAAAHMgAQAAAAAAAAAAAKjSxOIEJBIIpQAA
    sRgBMO4AAJAAAHwCAHAAAAUAAJEAAHwAAP+eEP8CZ/8Aif8AAG0BDAUAAJEA
    AHwAAIXYAOfxAIESAHwAAABAMQAbMBZGMAAAIEggJQMAIAAAAAAAfqgaXESI
    5BdBEgB+AGgALGEAABYAAAAAAACsNwAEAAAMLwAAAH61MQBIAABCM8B+AAAU
    AAAAAAAApQAAsf8Brv8AlP8AQf8Afv8AzP8A1P8AQf8AfgAArAAABAAADAAA
    AACQDADjAAASAAAAAACAAADVABZBAAB+ALjMwOIEhxINUAAAANIgAOYAAIEA
    AHwAAGjSAGEEABYIAAAAAEoBB+MAAIEAAHwCACABAJsAAFAAAAAAAGjJAGGL
    AAFBFgB+AGmIAAAQAABHAAB+APQoAOE/ABIAAAAAAADQAADjAAASAAAAAPiF
    APcrABKDAAB8ABgAGO4AAJAAqXwAAHAAAAUAAJEAAHwAAP8AAP8AAP8AAP8A
    AG0pIwW3AJGSAHx8AEocI/QAAICpAHwAAAA0SABk6xaDEgB8AAD//wD//wD/
    /wD//2gAAGEAABYAAAAAAAC0/AHj5AASEgAAAAA01gBkWACDTAB8AFf43PT3
    5IASEnwAAOAYd+PuMBKQTwB8AGgAEGG35RaSEgB8AOj/NOL/ZBL/gwD/fMkc
    q4sA5UGpEn4AAIg02xBk/0eD/358fx/4iADk5QASEgAAAALnHABkAACDqQB8
    AMyINARkZA2DgwB8fBABHL0AAEUAqQAAAIAxKOMAPxIwAAAAAIScAOPxABIS
    AAAAAIIAnQwA/0IAR3cAACwAAAAAQABAAAAI/wA/CBxIsKDBgwgTKlzIsKFD
    gxceNnxAsaLFixgzUrzAsWPFCw8kDgy5EeQDkBxPolypsmXKlx1hXnS48UEH
    CwooMCDAgIJOCjx99gz6k+jQnkWR9lRgYYDJkAk/DlAgIMICkVgHLoggQIPT
    ighVJqBQIKvZghkoZDgA8uDJAwk4bDhLd+ABBmvbjnzbgMKBuoA/bKDQgC1F
    gW8XKMgQOHABBQsMI76wIIOExo0FZIhM8sKGCQYCYA4cwcCEDSYPLOgg4Oro
    uhMEdOB84cCAChReB2ZQYcGGkxsGFGCgGzCFCh1QH5jQIW3xugwSzD4QvIIH
    4s/PUgiQYcCG4BkC5P/ObpaBhwreq18nb3Z79+8Dwo9nL9I8evjWsdOX6D59
    fPH71Xeef/kFyB93/sln4EP2Ebjegg31B5+CEDLUIH4PVqiQhOABqKFCF6qn
    34cHcfjffCQaFOJtGaZYkIkUuljQigXK+CKCE3po40A0trgjjDru+EGPI/6I
    Y4co7kikkAMBmaSNSzL5gZNSDjkghkXaaGIBHjwpY4gThJeljFt2WSWYMQpZ
    5pguUnClehS4tuMEDARQgH8FBMBBBExGwIGdAxywXAUBKHCZkAIoEEAFp33W
    QGl47ZgBAwZEwKigE1SQgAUCUDCXiwtQIIAFCTQwgaCrZeCABAzIleIGHDD/
    oIAHGUznmXABGMABT4xpmBYBHGgAKGq1ZbppThgAG8EEAW61KwYMSOBAApdy
    pNp/BkhAAQLcEqCTt+ACJW645I5rLrgEeOsTBtwiQIEElRZg61sTNBBethSw
    CwEA/Pbr778ABywwABBAgAAG7xpAq6mGUUTdAPZ6YIACsRKAAbvtZqzxxhxn
    jDG3ybbKFHf36ZVYpuE5oIGhHMTqcqswvyxzzDS/HDMHEiiggQMLDxCZXh8k
    BnEBCQTggAUGGKCB0ktr0PTTTEfttNRQT22ABR4EkEABDXgnGUEn31ZABglE
    EEAAWaeN9tpqt832221HEEECW6M3wc+Hga3SBgtMODBABw00UEEBgxdO+OGG
    J4744oZzXUEDHQxwN7F5G7QRdXxPoPkAnHfu+eeghw665n1vIKhJBQUEADs="""""")
    f.write(decoded)
"
writing to a file with python,"for i in xrange(10, 0, -1):
    with open('C:/TestReq_100 Records.txt', 'r') as ipf:
        with open('processed.txt', 'w') as opf:
            for line in ipf:
                num = line.strip()
                opf.write(num)
"
printing dict keys 'value' times and alternatively like round robin scheduling,"from itertools import islice, cycle, repeat

def roundrobin(*iterables):
    ""roundrobin('ABC', 'D', 'EF') --> A D E B F C""
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).next for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))


# Now, the real recipe starts
obj = {'a1':3,'a2':5,'a3':1}
objiter = [repeat(x,y) for x,y in obj.items()]
objlist = list(roundrobin(*objiter))
objlist
['a1', 'a3', 'a2', 'a1', 'a2', 'a1', 'a2', 'a2', 'a2']
"
"Apply function for objects from ""yield from"" in python","def some_func():
    yield from map(other_func, re.finditer(regex, string))
"
How to detect object on images?,"import numpy as np
import PIL

image = PIL.Image.open(""14767594_in.png"")

image_data = np.asarray(image)
image_data_blue = image_data[:,:,2]

median_blue = np.median(image_data_blue)

non_empty_columns = np.where(image_data_blue.max(axis=0)>median_blue)[0]
non_empty_rows = np.where(image_data_blue.max(axis=1)>median_blue)[0]

boundingBox = (min(non_empty_rows), max(non_empty_rows), min(non_empty_columns), max(non_empty_columns))

print boundingBox
"
Changes to a Merged CSV file not saving,"csvReader = csv.reader(merged)
for row in csvReader:
    #Changes 'Process(python)\% Processor Time' into '% Processor Time'
    row = truncate_string(row[0],""\\"",1)
    print row
"
Been trying to build new data frame from existing data frame and series,"import pandas as pd

#example data
df_n = pd.DataFrame([1,2, 3, 4,5])
h = pd.Series([99, 98, 97, 96, 95])

new_data = [None] * (len(df_n) * 2)
new_data[::2] = df_n.loc[:, 0].values
new_data[1::2] = h.values
new_df = pd.DataFrame(new_data)

In [135]: new_df
Out[135]: 
    0
0   1
1  99
2   2
3  98
4   3
5  97
6   4
7  96
8   5
9  95
"
Monitoring if a file stopped writing in python,"import os
from time import sleep
# other imports

while True:
    file1 = os.stat('file.txt') # initial file size
    file1_size = file1.st_size

    # your script here that collects and writes data (increase file size)
    sleep(1)
    file2 = os.stat('file.txt') # updated file size
    file2_size = file2.st_size
    comp = file2_size - file1_size # compares sizes
    if comp == 0:
        restart_program()
    else:
        sleep(5)
"
Split a list into sublists on a value and keep the value,">>> import itertools
>>> foo = [(0, 1), (1, 2), (2, 3), (0, 1), (2, 3), (1, 2), (1, 2), (0, 1), (2, 3), (1, 2), (2, 3), (0, 1), (2, 3), (0, 1), (1, 2), (2, 3), (1, 2), (0, 1)]
>>> splitpoint = []
>>> for k,g in itertools.groupby(foo,lambda x:x[0] in (0,)):
...     if k:
...         splitpoint = list(g)
...     else:
...         print splitpoint + list(g)
... 
[(0, 1), (1, 2), (2, 3)]
[(0, 1), (2, 3), (1, 2), (1, 2)]
[(0, 1), (2, 3), (1, 2), (2, 3)]
[(0, 1), (2, 3)]
[(0, 1), (1, 2), (2, 3), (1, 2)]
"
django-rest-swagger: How can I specify the parameter type in the docstring,"def put(self, request, format=None):
    """"""
    This text is the description for this API.

    ---
    parameters:
    - name: username
      description: Foobar long description goes here
      required: true
      type: string
      paramType: form
    - name: password
      paramType: form
      required: true
      type: string
    """"""
    username = request.DATA['username']
    password = request.DATA['password']
"
Getting the index of a players rank by points,"def calculate_rank(data):
    data = {v:k for k, v in enumerate(sorted(data,key=lambda x:int(data[x]),reverse=True),1)}
    def get_rank(name):
        return data[name]
    return get_rank

get_rank = calculate_rank({""rich"": 15, ""tom"": 19, ""bob"": 7})
print ""You are ranked #{}"".format(get_rank(""tom""))
print ""You are ranked #{}"".format(get_rank(""rich""))
print ""You are ranked #{}"".format(get_rank(""bob""))
"
Using Python to find correlation pairs,"from sklearn.datasets import make_regression

# simulate a dataset with 500 factors, but only 5 out of them are truely 
# informative factors, all the rest 495 are noises. assume y is your response
# variable 'Sales', and X are your possible factors
X, y = make_regression(n_samples=1000, n_features=500, n_informative=5, noise=5)

X.shape
Out[273]: (1000, 500)
y.shape
Out[274]: (1000,)

from sklearn.feature_selection import f_regression
# regressing Sales on each of factor individually, get p-values
_, p_values = f_regression(X, y)
# select significant factors p < 0.05
mask = p_values < 0.05
X_informative = X[:, mask]

X_informative.shape
Out[286]: (1000, 38)
"
How to assign value inside list comprehension,"def foo(c):
    c.ID += 1
    return c
"
Split data into sub cubes in numpy,"def fn2(ptss, condition): 
    return reduce(lambda m,n: m+n, map(lambda m: fn1(m, condition), ptss))

In [15]: fn2( [ xs  ]  , lambda m: m[0]<2)
Out[15]:
[[[0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 2, 0], [0, 3, 0]],
 [[2, 0, 0], [3, 0, 0]]]
"
Which is faster Counter()+=Counter or Counter.update(Counter)?,"# heart of the update() loop in Python 2:
for elem, count in iterable.iteritems():
    self[elem] = self_get(elem, 0) + count

# heart of the __add__() loop in Python 2:
result = Counter()
for elem, count in self.items():
    newcount = count + other[elem]
    if newcount > 0:
        result[elem] = newcount
for elem, count in other.items():
    if elem not in self and count > 0:
        result[elem] = count
return result
"
How do I Create an instance of a class in another class in Python,"#!usr/bin/env python

import wx

class TestFrame(wx.Frame):
    def __init__(self, parent, *args, **kwargs):
        wx.Frame.__init__(self, parent, *args, **kwargs)
        framesizer = wx.BoxSizer(wx.VERTICAL)
        mainpanel = MainPanel(self, wx.ID_ANY)
        self.subpanel = SubPanel(self, wx.ID_ANY)
        self.subpanel.Hide()
        framesizer.Add(mainpanel, 1, wx.EXPAND)
        framesizer.Add(self.subpanel, 1, wx.EXPAND)
        self.SetSizerAndFit(framesizer)

class MainPanel(wx.Panel):
    def __init__(self, parent, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)
        panelsizer = wx.BoxSizer(wx.VERTICAL)
        but = wx.Button(self, wx.ID_ANY, ""Add"")
        self.Bind(wx.EVT_BUTTON, self.OnAdd, but)
        self.panel_shown = False
        panelsizer.Add(but, 0)
        self.SetSizer(panelsizer)

    def OnAdd(self, evt):
        if not self.panel_shown:
            self.GetParent().subpanel.Show()
            self.GetParent().Fit()
            self.GetParent().Layout()
            self.panel_shown = True
        else:
            self.GetParent().subpanel.Hide()
            self.GetParent().Fit()
            self.GetParent().Layout()
            self.panel_shown = False

class SubPanel(wx.Panel):
    def __init__(self, parent, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)
        spsizer = wx.BoxSizer(wx.VERTICAL)
        text = wx.StaticText(self, wx.ID_ANY, label='I am a subpanel')
        spsizer.Add(text, 1, wx.EXPAND)
        self.SetSizer(spsizer)

if __name__ == '__main__':
    app = wx.App()
    frame = TestFrame(None, wx.ID_ANY, ""Test Frame"")
    frame.Show()
    app.MainLoop()
"
re-implement __eq__ to compare sets with symmetric_difference in python,"def basename(x):
    return x.split(""/"")[-1]

result = set(x for x in set(currList).union(set(processList)) if (basename(x) in [basename(y) for y in currList]) != (basename(x) in [basename(y) for y in processList]))
"
How to create a new list or new line after a certain number of iterations,"import csv
from itertools import zip_longest

n=10
with open('/tmp/rawdata.txt','r') as fin, open('/tmp/out.csv','w') as fout:
    reader=csv.reader(fin)
    writer=csv.writer(fout) 
    source=(e for line in reader for e in line)             
    for t in zip_longest(*[source]*n):
        writer.writerow(list(e for e in t if e))
"
Finding common elements in a few lists out of all lists in python,">>> l1 = [1,2,3,4,5]
>>> l2 = [2,3,5,7,9]
>>> l3 = [4,9,11,12,13]
>>> l4 = [1,2,5,7,8]
>>> l5 = [1,3,4,5,9]
>>> all = l1 + l2 + l3 + l4 + l5
>>> c = [[x,all.count(x)] for x in set(all)]
>>> [x[0] for x in c if x[1] > 2]
[1, 2, 3, 4, 5, 9]
>>>
"
Pythonic way of returning an element of a list if a certain char is found in that element,">>> def cross_product(A, B):
...     """"""Returns a list of the cross product of A and B.""""""
...     return [a+b for a in A for b in B]
... 
>>> square_letter = {c: e for e in ['ABC','DEF','GHI'] for c in e}
>>> square_number = {n: e for e in ['123','456','789'] for n in e}
>>> def find_peers(square, _letter=square_letter, _number=square_number):
...     """"""
...     Returns list of strings of shared squares in the unit.
...     Example: find_peers('A2') -> ['A1', 'A2', 'A3', 'B1' , ..., 'C3']
...     """"""
...     return cross_product(_letter[square[0]], _number[square[1]])
... 
>>> find_peers('A2')
['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']
>>> find_peers('E8')
['D7', 'D8', 'D9', 'E7', 'E8', 'E9', 'F7', 'F8', 'F9']
"
"How to test for an empty directory, no matter what its size, in Python?","for x in range(0, 3000000):
    open(str(x), 'a').close()

print not os.listdir('.')
"
Python pandas tagging entries in dataframe shortening code,"import itertools as IT
patterns = [pattern1, pattern2, pattern3, pattern4, pattern5]
empty = (df.TAG == '')
for pattern, grp in IT.izip(patterns, group):
    mask = df.IDnumber.str.contains('|'.join(pattern)) & empty
    df.loc[mask, 'TAG'] = grp
"
Python httplib2: HTTPS login fails,"import requests
session = requests.Session()
response = session.get('https://domain.com/auth?name=USERNAME&pw=PASSWORD')
"
Removing string quotations without slicing?,"string = string.replace(""'"", """") # replaces single quotes in the string with nothing
string = string.replace('""', '') # for double quotes
"
reading very large file where format is newline independent,"class Parser(object):

    def __init__(self, filename):

        def tokens(filename):
            with open(filename) as infile:
                for line in infile:
                    for item in line.split():
                        yield int(item)

        self.tokens = tokens(filename)

    def ballots(self):
        ballot = []
        for t in self.tokens:
            if t:
                ballot.append(t)
            else:
                yield ballot
                ballot = []

p = Parser(""datafile.txt"")

for b in p.ballots():
    print b
"
Python: How to return a list without modifying the original list using a while loop only?,"def everythird(l):
    ret = []
    for i in range(0, len(l), 3):
        ret.append(l[i])
    return ret
"
How can I get a list of all keys of dicts inside a list?,">>> [k for d in l for k in d]
[1, 2]
"
Prime number generation using Fibonacci possible?,"import gmpy2

def generate(x):
    if x == gmpy2.gcd(x, gmpy2.fib(x-1)):
        return True
    if x == gmpy2.gcd(x, gmpy2.fib(x+1)):
        return True
    return False

for x in range(7, 2000):
    if generate(x):
        print(x)
"
How to find the list in a list of lists whose sum of elements is the greatest?,">>> def mymaxfunction(item):
...     return sum(map(int, item))
...
>>> max([['1', '2', '3'], ['7', '8', '9']], key=mymaxfunction)
['7', '8', '9']
"
How do I call a property setter from __init__,"class User(object): ...
"
How to read a CSV file line by line and store it to new CSV file on new row every time?,"with open(fileName,'r') as myfile:
    for line in myfile:
        # the rest of your code here, i.e.:
        stop_words=set(stopwords.words(""english""))
        words=word_tokenize(line)
"
Django custom field with multiple inheritance,"class base1(object):                                                               
    def name(self, value):                                                         
        print ""base1"", value                                                       
        super(base1, self).name(value)                                             

    def to_python(self, value):                                                    
        value = value + "" base 1 ""                                                 
        if(hasattr(super(base1, self), ""to_python"")):                              
            value = super(base1, self).to_python(value)                            
        return value                                                               

class base2(object):                                                               
    def name(self, value):                                                         
        print ""base2"", value                                                       

    def to_python(self, value):                                                    
        value = value + "" base 2 ""                                                 
        if(hasattr(super(base2, self), ""to_python"")):                              
            value = super(base2, self).to_python(value)                            
        return value                                                               

class superClass(base1, base2):                                                    
    def name(self, value):                                                         
        super(superClass, self).name(value)                                        
        print ""super Class"", value    
"
Float value is equal -1.#IND,">>> 1e300 * 1e300 * 0
nan
>>> 1e300 * 1e300
inf
>>> 1e300 * 1e300 * -1
-inf
"
How to import a module in Python with importlib.import_module,importlib.import_module('a.b.c')
Renaming of files for a given pattern,"import datetime
import re
import os

os.chdir(path)
for filename in os.listdir(path):
    match = re.match(r'(IN|OUT)_ \+ (\d+).amr', filename)
    if match:
        file_date = datetime.datetime.fromtimestamp(os.stat(filename).st_mtime)
        destination = '%s_%s_%s_Phone number.amr' % (
            match.group(1), # either IN or OUT
            match.group(2),
            file_date.strftime('%Y%m%d%H%M%S'), # adjust the format at your convenience
        )

        os.rename(filename, destination)
"
Counting same length items in a list,">>> sequence = ""aaaabbababbbbabbabb""
>>> Counter(len(list(it)) for k, it in groupby(sequence))
Counter({1: 5, 2: 3, 4: 2})
"
Python Version Specific Code,"if sys.version_info.major == 3 and sys.version_info.minor == 4:
    print(""I like Python 3.4"")
"
How can I do lines of a single string sleep before being printed?,"for line in nX.splitlines():
    pn(line)
"
Indexing and selecting only found columns in Pandas python,"% timeit a[a.columns[a.columns.isin(['w', 'e', 'r', 'z'])]]
out : 1000 loops, best of 3: 528 µs per loop
"
BeautifulSoup/Python/HTML - Return the div class right after a specific div class,">>> from bs4 import BeautifulSoup
>>> data = """"""
... <body>
... <div class=""label"">Employee Count</div>
... <div class=""field"">331,000</div>
... </body>
... """"""
>>> 
>>> soup = BeautifulSoup(data)
>>> soup.find('div', text='Employee Count').find_next_sibling().text
331,000
"
Auto-save function implementation with Python and Tkinter,"import threading
import time
import Tkinter

root = Tkinter.Tk()

def autosave():
    while True:
        # do something you want
        time.sleep(60 * 5)

saver = threading.Thread(target=autosave)
saver.start()
root.mainloop()
"
determine the variable type,print(type(variable_name))
Why this regular expression pattern matches even an extra character in string?,"re.match(""d?mo$"",str)
"
What does a class need to implement in order to be used as an argument tuple?,">>> class C(object):
...     def __init__(self, lst):
...         self.lst = lst
...     def __iter__(self):
...         return iter(self.lst)
...
>>> def f(a, b, c):
...     print ""Arguments: "", a, b, c
...
>>> c = C([1, 2, 3])
>>> f(*c)
Arguments:  1 2 3
>>>
"
"Assign ""ID"" to a string in a ""post""","for s in dizv:
    for kk in dizv[s]:
        dnew[kk] = set([s])
"
Unable to find the correct regex in python,">>> text = '''rootvg:
... hd5                 boot       1     1     1    closed/syncd  N/A
... hd4                 jfs        38    38    1    open/syncd    /
... datavg:
... data01lv            jfs        7     7     1    open/syncd    /data1
... data02lv            jfs        7     7     1    open/syncd    /data2'''
>>> re.findall(r'^(\w+):(.*?)(?=^\w+:|\Z)', text, flags=re.DOTALL | re.MULTILINE)
[('rootvg', '\nhd5                 boot       1     1     1    closed/syncd  N/A\nhd4                 jfs        38    38    1    open/syncd    /\n'), ('datavg', '\ndata01lv            jfs        7     7     1    open/syncd    /data1\ndata02lv            jfs        7     7     1    open/syncd    /data2')]
"
Python: preferred way to handle large number of attributes that might not exists?,"class Values():
    def __init__(self, *attrs):
        '''each element in attrs is a tuple(attrname, value)'''
        if attrs is not None:
            for a in attrs:
                n, v = a
                setattr(self, n, v)

    def add_one(self, attr):
        a = getattr(self, attr, None)
        if a:
            if isinstance(a, tuple):
                setattr(self, attr, tuple(e + 1 for e in a))
            else:
                setattr(self, attr, a + 1)

v = Values(('x', 1), ('y', 2), ('z', 3), ('t', (7, 8, 9)))
print('Initial values:', v.x, v.y, v.z, v.t)
v.add_one('x')
print('X modified:', v.x, v.y, v.z, v.t)
v.add_one('t')
print('T modified:', v.x, v.y, v.z, v.t)
v.add_one('a')
print('Tried to modify non-existent attribute ""a""', v.x, v.y, v.z, v.t)
"
Create variables no matter the nr of rows of the data in clipboard,"rows = root.clipboard_get().split('\n')
rows = [row.strip() for row in rows]    # removes leading and trailing whitespace from each row
print(rows)
print(rows[0])    # the first row
print(rows[1])    # the second row
"
python literal binary to hex conversion,"import struct
...
f2.write(struct.pack('b', int(byte,2))) # signed 8 bit int
"
How do I make a score counter for my game in python?,"import random 

def chkValidInput (userInput):
    chkNumber = False 

    for amtChar in range(0, len( userInput ) ):
        for aNumber in range(0, 10):
            if userInput[amtChar] == str(aNumber):
                chkNumber = True
                break
            elif userInput[amtChar] != str(aNumber):
                chkNumber = False
        if chkNumber == False:
            return False

    return True


def evaluateBet(choice): 

    randNum = 0

    randNum = random.randrange(1,14)

    print ""The random number is: "" + str(randNum)

    if choice == ""high"" and randNum > 7:
        print ""You Win!""
        return True               
    elif choice == ""low"" and randNum < 7:
        print ""You Win!""
        return True
    else: 
        print ""You Lose!""
        return False

def main():

    wins = 0 
    losses = 0

    print ""Commencing HiLo.py...\n""

    random.seed(None)

    points = 1000
    wager = 0
    userInput = None
    programLoop = True 
    validInput = False

    while programLoop == True:

        print ""Wins: "" + str(wins)
        print ""Losses: "" + str(losses)

        print ""Points remaining: "" + str( points )

        wager = 0
        userInput = None
        validInput = False

        while validInput == False:
            userInput = raw_input(""\nMake a wager: "")

            validInput = chkValidInput(userInput)

            if validInput == False:
                print ""Invalid Input. It must be a positive Number. Try Again.""

            elif validInput == True: 
                if int( userInput ) > points:
                    validInput = False
                    print ""You don't have enough points to make that wager. Try Again.""
                elif int( userInput ) == 0:
                    validInput = False
                    print ""Your wager must be greater than 0. Try Again.""

        wager = int (userInput)
        points = points - wager

        print ""Points remaining: "" + str( points )
        print ""Wager: "" + str( wager )

        validInput = False 

        while validInput == False:
            userInput = raw_input(""\nPlace a bet: Either type 'High' or 'Low': "")
            userInput = userInput.lower() 
            if userInput == ""high"" or userInput == ""low"": 
                validInput = True
            else:
                 print ""You may only choose to type from the options 'high' or 'low' ""

        if evaluateBet(userInput) == True:
            points = ( points + (wager * 2) )
            wager = 0
            wins += 1
        else:
            losses += 1

        print ""Points remaining: "" + str( points )

        validInput = False 

        if points <= 0:
            print ""You do not have anymore points; game over.""
            programLoop = False
        else:
            while validInput == False:
                userInput = raw_input(""\nWould you like to play again?: Type 'yes' or 'no': "")
                userInput = userInput.lower() 

                if userInput == ""yes"" or userInput == ""no"": 
                    validInput = True
                else:
                    print ""You may only choose to type from the options 'yes' or 'no' ""

            if userInput == ""yes"":
                programLoop = True
            elif userInput == ""no"":
                print ""Final wins and losses""
                print ""Wins: "" + str(wins)
                print ""Losses: "" + str(losses)
                programLoop = False

main() 
"
replace URLs in text with links to URLs,"import re

urlfinder = re.compile(""([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|((news|telnet|nttp|file|http|ftp|https)://)|(www|ftp)[-A-Za-z0-9]*\\.)[-A-Za-z0-9\\.]+):[0-9]*)?/[-A-Za-z0-9_\\$\\.\\+\\!\\*\\(\\),;:@&=\\?/~\\#\\%]*[^]'\\.}>\\),\\\""]"")

def urlify2(value):
    return urlfinder.sub(r'<a href=""\1"">\1</a>', value)
"
Removing items from unnamed lists in Python,[item for item in my_sequence if item != 'item']
change Pandas dataframe column order in place,"In [22]: df = DataFrame(np.random.randn(5,3),columns=list('ABC'))

In [23]: df
Out[23]: 
          A         B         C
0 -0.696593 -0.459067  1.935033
1  1.783658  0.612771  1.553773
2 -0.572515  0.634174  0.113974
3 -0.908203  1.454289  0.509968
4  0.776575  1.629816  1.630023
"
How to get the result in single List?,">>> def fareEstimator(ride_time, ride_distance, cost_per_minute, cost_per_mile):
...     return [round(ride_time * cpm + ride_distance * cpmile, 1)
...             for cpm, cpmile in zip(cost_per_minute, cost_per_mile)]
...
>>> fareEstimator(30, 7, [0.2, 0.35, 0.4, 0.45], [1.1, 1.8, 2.3, 3.5])
[13.7, 23.1, 28.1, 38.0]
"
"Writing Python lists into file, items seperated by semicolon","format_string = ""{};{};{}""
print(format_string.format(list[0], list[1], list[2]))
"
Counting occurence within a string Python,"def percentLetters(s):
        print s.count('A')
        print s.count('B')
percentLetters('AABB')
2
2
"
How to check if a process with Command line argument is running in Python,"import sys

if ""testarg"" in sys.argv:
    # do something
"
Why does a space effect the identity comparison of equal strings?,"In [43]: a = ""abc"" # python caches abc
In [44]: b = ""abc"" # it reuses the object when assigning to b
In [45]: id(a)
Out[45]: 139806825858808    # same id's, same object in memory
In [46]: id(b)
Out[46]: 139806825858808    
In [47]: a = 'abc abc'   # not cached  
In [48]: id(a)
Out[48]: 139806688800984    
In [49]: b = 'abc abc'    
In [50]: id(b)         # different id's different objects
Out[50]: 139806688801208
"
"python, how to update the dictionaries by mutating its format?","dic = {name: {'location': value[0], 'population': value[1], 'president': value[2]}
       for name, value in dic.items()}
"
how to print lists separately instead of merging them?,"lines = []
for x in range(0, 2):
    line = []
    for item in dic:
        if item in abst:
            i = abst.index(item)
            line.append(data[x][i])
    lines.append(line)
"
python tkinter: use a drop-down menu to enable a text field,"def get_Change_selection(self,value):
    global my_change
    my_change = value
    if value == 'Yes':
        self.textChanges.config(state=stateOpts[0])
    else:
        self.textChanges.config(state=stateOpts[1])
    self.dropVarChanges.set(value)

    return
"
How to apply an array of functions to a value using list comprehension?,">>> functions = [lambda x: x + 2, lambda x: x * 2]
>>> reduce(lambda x, y: y(x), functions, 1)
6
"
Suppressing the output in libsvm (python),"import svmutil
x = [[0.2, 0.1], [0.7, 0.6]]
y = [0, 1]
svmutil.svm_train(y, x, '-q')
"
Converting week numbers to dates,">>> import time
>>> week = 6
>>> year = 2014
>>> atime = time.asctime(time.strptime('{} {} 1'.format(year, week), '%Y %W %w'))
>>> atime
'Mon Feb 10 00:00:00 2014'
"
Search for closest value in list of lists in python,"In [22]: from scipy import spatial

In [23]: tree = spatial.KDTree(arr)

In [24]: distances, indices = tree.query([4, 0])

In [25]: tree.data[indices]
Out[25]: array([3, 2])
"
python human readable large numbers,"import math

millnames = ['',' Thousand',' Million',' Billion',' Trillion']

def millify(n):
    n = float(n)
    millidx = max(0,min(len(millnames)-1,
                        int(math.floor(0 if n == 0 else math.log10(abs(n))/3))))

    return '{:.0f}{}'.format(n / 10**(3 * millidx), millnames[millidx])
"
"Python 2.7, AT command response, strange HEX",">>> rawhex = '00520030002E00300030002000610069007200740069006D0065002C0020003000200053004D005300200061006E0064002000300020004D00420020006F006600200064006100740061002E0020004400690061006C0020002A003100340031002A0031002300200066006F0072002000640065007400610069006C0073002E00200057006F005700210020005500730065002000520037002000610069007200740069006D006500200074006F00200067006500740020005200350035002B00310030004D0042002E004400690061006C0020002A003100330030002A0035003000310023'
>>> rawhex.decode('hex')
'\x00R\x000\x00.\x000\x000\x00 \x00a\x00i\x00r\x00t\x00i\x00m\x00e\x00,\x00 \x000\x00 \x00S\x00M\x00S\x00 \x00a\x00n\x00d\x00 \x000\x00 \x00M\x00B\x00 \x00o\x00f\x00 \x00d\x00a\x00t\x00a\x00.\x00 \x00D\x00i\x00a\x00l\x00 \x00*\x001\x004\x001\x00*\x001\x00#\x00 \x00f\x00o\x00r\x00 \x00d\x00e\x00t\x00a\x00i\x00l\x00s\x00.\x00 \x00W\x00o\x00W\x00!\x00 \x00U\x00s\x00e\x00 \x00R\x007\x00 \x00a\x00i\x00r\x00t\x00i\x00m\x00e\x00 \x00t\x00o\x00 \x00g\x00e\x00t\x00 \x00R\x005\x005\x00+\x001\x000\x00M\x00B\x00.\x00D\x00i\x00a\x00l\x00 \x00*\x001\x003\x000\x00*\x005\x000\x001\x00#'
>>> rawhex.decode('hex').decode('utf-16-be')
u'R0.00 airtime, 0 SMS and 0 MB of data. Dial *141*1# for details. WoW! Use R7 airtime to get R55+10MB.Dial *130*501#'
"
How to use switch in Python?,"if x == 0:
    print ""X is 0\n""
elif x == 1:
    print ""X is 1\n""
elif x == 2:
    print ""X is 2r\n""
elif x == 3:
    print ""X is 3\n""
"
listing files from a directory using glob python,glob.glob('hello*.txt')
How to use a specific data structure as the default_factory for a defaultdict?,"def my_factory():
    aDict = {'counter': Counter(), 'name':''}
    return aDict
d = defaultdict(my_factory)
"
matplotlib path linewidth connected to figure zoom,"import shapely.geometry
import descartes
import matplotlib.pyplot as plt

lines = ([(0, 0), (1, 0), (0, 1)],
         [(0, 0), (1, 1)],
         [(0.5, 0.5), (1, 0.5)],
         )
lines = shapely.geometry.MultiLineString(lines)
# ""0.05"" is the _radius_ in data coords, so the width will be 0.1 units.
poly = lines.buffer(0.05)

fig, ax = plt.subplots()
patch = descartes.PolygonPatch(poly, fc='gray', ec='black')
ax.add_artist(patch)

# Rescale things to leave a bit of room around the edges...
ax.margins(0.1)

plt.show()
"
What is the quickest way to HTTP GET in Python?,"import urllib2
urllib2.urlopen(""http://example.com/foo/bar"").read()
"
Deadlock when calling task_done() as the task has been pulled by a new thread,"import time
import threading

from queue import Queue
NUM_WORKER_THREADS = 8

def worker():
    for item in iter(items.get, None):
        try:
            print(""{} items left to process"".format(items.qsize())) 
            print(""Processing {}"".format(item))   
        except Exception as inst:
            print(""---------------EXCEPTION OCCURRED----------------"")
            print(type(inst))
            print(inst.args)
            print(inst)
        finally:
            items.task_done()
    print(""Got sentinel, shut down"")
    items.task_done()

# start counter to monitor performance
start = time.perf_counter()

items = Queue()
# get the items we need to work on for allocations
searchResults = getSearchResults() # external call to webservice

# add results of search to a collection
for itemid in searchResults:
    if itemid['recordtype'] == 'inventoryitem':
        items.put(itemid['id'])

for _ in range(NUM_WORKER_THREADS):
   items.put(None) # Load a sentinel for each worker thread

for i in range(NUM_WORKER_THREADS):
    try:
        t = threading.Thread(target=worker)
        t.daemon = True
        t.start()
    except Exception as inst:
        print(""---------------EXCEPTION OCCURRED----------------"")
        print(type(inst))
        print(inst.args)
        print(inst)            

items.join()

# print end of execution performance counter 
print('time:', time.perf_counter() - start)
"
display only one logging line,"import time
import sys

print 'this is a text',
sys.stdout.flush()

time.sleep(1)
print '\x1b[80D'+'\x1b[K'+'Second text',
sys.stdout.flush()
"
Python: How to keep repeating a program until a specific input is obtained?,"while True:             # Loop continuously
    inp = raw_input()   # Get the input
    if inp == """":       # If it is a blank line...
        break           # ...break the loop
"
Python: how to get subclass's new attributes name in base class's method?,"class Base(object):
    cc = '' # this won't get printed
    def __init__(self):
        # print SubClass' new attribues' names ('aa' and 'bb' for example)
        print set(dir(self.__class__)) - set(dir(Base))

class SubClass(Base):
    aa = ''
    bb = ''


foo = SubClass()
# set(['aa', 'bb'])
"
How do I add a new column of data to a csv file,"def get_file( start_file )
    f = csv.reader( start_file )
        def data( csvfile ):
            for line in csvfile:
                line[ 1 ] += ""butter""
                yield line
    return data( f )
"
constant lambda function in python,"#never!
always_return_one = lambda ignored_argument: 1

#OK: functions with names are def'ed not lambda'd
def always_return_one(ignored_argument):
    return 1

#Also OK: pass the lambda to another function as soon as you spell it.
modified_list = some_highorder_function(lambda ignored: 1, [1, 2, 3, 4, 5])
"
"In Django, how do I check if a user is in a certain group?",return user.groups.filter(name='Member').exists()
"Is it possible to alter the values in a dictionary, keeping the key value constant?","from collections import defaultdict

d = defaultdict(list)
for i in range(100):
    if not i % 4:
        d['Four'].append(i)
"
Call several functions and return the collective result,"def compose(*funcs):
    if len(funcs) == 1:
        return funcs[0]
    else:
        def composition(*args, **kwargs):
            return funcs[0](compose(*funcs[1:])(*args, **kwargs))
        return composition
"
How to delay input,"def addEntry():
    date=raw_input('date')
    amount=raw_input('amount')
    desc=raw_input('desc')
    account=raw_input('account')
    transact=open(""transactions.txt"", ""w"")
    print >>transact, date, amount, desc, account
    transact.close()
"
Python Numpy mask NaN not working,"import numpy as np

x = [np.nan, 3.14, np.nan]
mx = np.ma.masked_invalid(x)

print(repr(mx))
# masked_array(data = [-- 3.14 --],
#              mask = [ True False  True],
#        fill_value = 1e+20)
"
"filedialog, tkinter and opening files",">>> from tkinter import filedialog
>>> filedialog
<module 'tkinter.filedialog' from 'C:\Python32\lib\tkinter\filedialog.py'>
>>>
"
Check if characters after delimiter exist in Python,"parts = line.split("":"", 1)
if len(parts) >= 2 and parts[1]: # len can't actually exceed 2 but it's a good habit to check
    # characters are present after the first colon
"
Walk through each column in a numpy matrix efficiently in Python,"print np.sum(a%2==0, axis=0) # [0 2]
"
Efficiently finding the shortest path in large graphs,"#!/usr/bin/python

import pygraph.classes.graph
import pygraph.algorithms
import pygraph.algorithms.minmax
import time
import random
import sys

if len(sys.argv) != 3:
    print ('usage %s: node_exponent edge_exponent' % sys.argv[0])
    sys.exit(1)

nnodes = 10**int(sys.argv[1])
nedges = 10**int(sys.argv[2])

start_time = time.clock()
def timestamp(s):
    t = time.gmtime(time.clock() - start_time)
    print 'biggraph', s.ljust(24), time.strftime('%H:%M:%S', t)

timestamp('generate %d nodes' % nnodes)
bg = pygraph.classes.graph.graph()
bg.add_nodes(xrange(nnodes))

timestamp('generate %d edges' % nedges)
edges = set()
while len(edges) < nedges:
    left, right = random.randrange(nnodes), random.randrange(nnodes)
    if left == right:
        continue
    elif left > right:
        left, right = right, left
    edges.add((left, right))

timestamp('add edges')
for edge in edges:
    bg.add_edge(edge)

timestamp(""Dijkstra"")
target = 0
span, dist = pygraph.algorithms.minmax.shortest_path(bg, target)
timestamp('shortest_path done')

# the paths from any node to target is in dict span, let's
# pick any arbitrary node (the last one) and walk to the
# target from there, the associated distance will decrease
# monotonically
lastnode = nnodes - 1
path = []
while lastnode != target:
    nextnode = span[lastnode]
    print 'step:', nextnode, dist[lastnode]
    assert nextnode in bg.neighbors(lastnode)
    path.append(lastnode)
    lastnode = nextnode
path.append(target)
timestamp('walk done')
print 'path:', path
"
join list of lists in python,print(list(itertools.chain.from_iterable(a)))
python pass regex to mongo via http,"import re 
filter = {'id_number': re.compile(""^12348"")}
"
Python Remove 2nd item from List within List,"rawList = [[[u'Hot Dogs', u'hotdog'], [u'Food Stands', u'foodstands']], [[u'Scandinavian',       u'scandinavian'], [u'Breakfast & Brunch', u'breakfast_brunch'], [u'Coffee & Tea', u'coffee']],    [[u'Burgers', u'burgers']]]
finalList = []

for l in rawList:
    finalList.append([i[0] for i in l])
"
How can I parse text in Python?,"import re

x = re.compile(r'^([^\|]*?)\s*\|[^\n]*\n\s*(.*?)\s*$')

s = """"""NETHERLANDS MUSIC EPA | 36 before
Michael Buble performs in Amsterdam Canadian singer Michael Buble performs during a concert in Amsterdam, The Netherlands, 30 October 2009. Buble released his new album entitled 'Crazy Love'. EPA/OLAF KRAAK""""""

mo = x.match(s)

subject, content = mo.groups()

print 'SUBJECT =', repr(subject)
print 'CONTENT =', repr(content)
"
Accessing functions which have been placed in a list,"from operator import add, sub, mul, floordiv
from random import choice

tries = 10
maxn = 9
numbers = list(range(1, maxn+1))
ops = (('+', add), ('-', sub), ('*', mul), ('//', floordiv))

for i in range(tries):
    left = choice(numbers)
    right = choice(numbers)
    op = choice(ops)
    print(""What is"", left, op[0], right,""?"")
    try:
        user = int(input(""Answer here: ""))
    except ValueError:
        user = None
    if user == op[1](left, right):
        print(""Well done"")
    else:
        print(""No"")
"
BeautifulSoup: Extracting Value from Children nodes,"In [1]: from bs4 import BeautifulSoup

In [2]: html = # Your html here

In [3]: soup = BeautifulSoup(html)

In [4]: for td in soup.find_all('td', {'class': 'section'}):
   ...:     for span in td.find_all('span'):
   ...:         print span.attrs['class'], span.text
   ...:         
['username'] xxUsername
['comment'] 
A test comment
"
Find right URLs using Python and regex,"strs = ['vk.com/albums54751623?z=photo54751623_341094858%2Fphotos54751623',
'vk.com/albums54751623',
'vk.com/id36375649',
'vk.com/id36375649']
print([x for x in strs if x.startswith(r'vk.com/id')])
"
How to sort a dictionary by value where the key is a tuple,">>> print sorted(d.items(), key=lambda item:item[0][1])
[(('08', '10010'), 6), (('23', '10017'), 6), (('21', '10027'), 6), (('06444', '10028'), 6)]
"
dict.fromkeys method in Python 3.2,">>> SERVICES = ""FTP Download"", ""FTP Upload"", ""HTTP""
>>> received = {k: {'MS1': []} for k in SERVICES}
>>> received
{'FTP Download': {'MS1': []}, 'HTTP': {'MS1': []}, 'FTP Upload': {'MS1': []}}
>>> received[""HTTP""][""MS1""].append(17)
>>> received
{'FTP Download': {'MS1': []}, 'HTTP': {'MS1': [17]}, 'FTP Upload': {'MS1': []}}
"
Looping over a list in Python,[x for x in mylist if len(x) == 3]
Convert float to comma-separated string,">>> import locale
>>> locale.setlocale(locale.LC_ALL, 'en_US.utf8')
'en_US.utf8'
>>> locale.format(""%.2f"", 100028282.23, grouping=True)
'100,028,282.23'
"
For range iteration,"for line_no, line in enumerate(names):
    if line_no >= amount:  # if we've seen enough already
        break  # stop looping
    print(line)  # otherwise show the current line
"
List Comprehension and traversing through a list,"numbers = (k for k in range(1, 42) if k%2 != 0)
[x * [-1, 1][n % 2] for n, x in enumerate(numbers)]
"
web scrape a .txt file using python,"with open('words.txt','r') as f:
    for line in f:
        for word in line.split():
           print(word)  
"
python reg ex to include missing commas,"s = """""" 1, ' unchanged 1' "" unchanged  2 ""  2.009, -2e15 3""""""

r = re.compile(""[\'\""].*?[\'\""]|\S+"")
print("", "".join([x.strip("","") for x in r.findall(s)]))

1, ' unchanged 1', "" unchanged  2 "", 2.009, -2e11, ' unchanged 1', "" unchanged  2 "", 2.009, -2e15, 35, 3
"
Minimum lenght of string that match a regex,"import re
import timeit
def test(charsInString, charsInRegex):
    regex = re.compile('a{'+str(charsInRegex)+'}')
    string = 'a'*charsInString;
    for i in range(1, 200000):
        regex.match(string)
print(timeit.timeit(""test(1, 1)"", setup=""from __main__ import test"", number=1))
print(timeit.timeit(""test(1, 2)"", setup=""from __main__ import test"", number=1))
print(timeit.timeit(""test(1, 5000)"", setup=""from __main__ import test"", number=1))
print(timeit.timeit(""test(4999, 5000)"", setup=""from __main__ import test"", number=1))
print(timeit.timeit(""test(5000, 5000)"", setup=""from __main__ import test"", number=1))
print(timeit.timeit(""test(50000, 5000)"", setup=""from __main__ import test"", number=1))
"
Filter attributes of a class based on the type,"def __str__(self):
    ret = """"
    for i in vars(self).values():
        if isinstance(i, A):
            ret += str(i)
    return ret
"
Replacing four letter words in a string,"import re

text = """"""
    I also found another solution using 
    regex, but I'm still a novice and 
    really can't understand that solution. 
    Any help would be appreciated.
""""""

print re.sub(r'\b\w{4}\b', 'xxxx', text)
"
converting nested parenthesis tree to nested list,"from re import compile
resexp = compile(r'([()]|_!)')
…
  tokens = iter(resexp.split(s))
…
"
"Given two lists of strings, find the total number of strings in the second list which contains any string in the first list as substring",">>> sum(a.lower() in b.lower() for a in ListA for b in ListB)
5
"
Python list and time,"from datetime import datetime
time_list = []
time_list.append(datetime.now().timestamp())
"
How to stem words in python list?,"documents = [stem(word) for sentence in documents for word in sentence.split("" "")]
"
Changing outputs into tuple [python],">>> def a_function(n, a, b, c):
...     if n == 1:
...         return ((a,b),)
...     else:
...         x = a_function(n-1, a, c, b)
...         return x + ((a,b),) + a_function(n-1, c, b, a)
...
...
>>> a_function(3, 1, 2, 3)
((1, 2), (1, 3), (2, 3), (1, 2), (3, 1), (3, 2), (1, 2))
"
Issue with using the chr() method to add \x to characters in a list,">>> unhexlify(''.join([""00"",""00"",""00"",""00"",""00"",""05"",""FF"",""70"",""00"",""00"",""00""]))
'\x00\x00\x00\x00\x00\x05\xffp\x00\x00\x00'
"
Produce a RA vs DEC equatorial coordinates plot with python,"""""""
An experimental support for curvilinear grid.
""""""
import numpy as np
import  mpl_toolkits.axisartist.angle_helper as angle_helper
import matplotlib.cm as cmap
from matplotlib.projections import PolarAxes
from matplotlib.transforms import Affine2D

from mpl_toolkits.axisartist import SubplotHost

from mpl_toolkits.axisartist import GridHelperCurveLinear


def curvelinear_test2(fig):
    """"""
    polar projection, but in a rectangular box.
    """"""
    global ax1

    # see demo_curvelinear_grid.py for details
    tr = Affine2D().scale(np.pi/180., 1.) + PolarAxes.PolarTransform()

    extreme_finder = angle_helper.ExtremeFinderCycle(10, 60,
                                                     lon_cycle = 360,
                                                     lat_cycle = None,
                                                     lon_minmax = None,
                                                     lat_minmax = (0, np.inf),
                                                     )

    grid_locator1 = angle_helper.LocatorHMS(12) #changes theta gridline count
    tick_formatter1 = angle_helper.FormatterHMS()

    grid_locator2 = angle_helper.LocatorDMS(6)
    tick_formatter2 = angle_helper.FormatterDMS()

    grid_helper = GridHelperCurveLinear(tr,
                                        extreme_finder=extreme_finder,
                                        grid_locator1=grid_locator1,
                                        tick_formatter1=tick_formatter1,
                                        grid_locator2=grid_locator2,
                                        tick_formatter2=tick_formatter2
                                        )


    ax1 = SubplotHost(fig, 1, 1, 1, grid_helper=grid_helper)

    # make ticklabels of right and top axis visible.
    ax1.axis[""right""].major_ticklabels.set_visible(True)
    ax1.axis[""top""].major_ticklabels.set_visible(True)
    ax1.axis[""bottom""].major_ticklabels.set_visible(True) #Turn off? 
    # let right and bottom axis show ticklabels for 1st coordinate (angle)
    ax1.axis[""right""].get_helper().nth_coord_ticks=0
    ax1.axis[""bottom""].get_helper().nth_coord_ticks=0



    fig.add_subplot(ax1)

    grid_helper = ax1.get_grid_helper()

    ax1.set_aspect(1.)
    ax1.set_xlim(-4,15) # moves the origin left-right in ax1
    ax1.set_ylim(-3, 20) # moves the origin up-down

    ax1.set_ylabel('90$^\circ$ + Declination')
    ax1.set_xlabel('Ascension')
    ax1.grid(True)
    #ax1.grid(linestyle='--', which='x') # either keyword applies to both
    #ax1.grid(linestyle=':', which='y')  # sets of gridlines

    return tr

import matplotlib.pyplot as plt
fig = plt.figure(1, figsize=(5, 5))
fig.clf()

tr = curvelinear_test2(fig) # tr.transform_point((x, 0)) is always (0,0)
                            # => (theta, r) in but (r, theta) out...
r_test =   [0, 1.2, 2.8, 3.8, 5,  8,  10, 13.3, 17]  # distance from origin
deg_test = [0,  -7, 12,  28,  45, 70, 79, 90,   100] # degrees ascension
out_test = tr.transform(zip(deg_test, r_test))

sizes = [40, 30, 10, 30, 80, 33, 12, 48, 45]
#hues = [.9, .3, .2, .8, .6, .1, .4, .5,.7] # Oddly, floats-to-colormap worked for a while.
hues = np.random.random((9,3)) #RGB values

# Use this block to generate colored points with a colorbar.
cm = plt.cm.get_cmap('RdYlBu_r')
z = np.random.random((len(r_test), 1))  # RGB values

SC = ax1.scatter(out_test[:,0], #ax1 is a global
            out_test[:,1],
            s=sizes,
            c=z,
            cmap=cm,
            zorder=9) #on top of gridlines

# Colorbar
cbar = plt.colorbar(SC, shrink=1., pad=0.05)
cbar.ax.tick_params(labelsize=8)
cbar.set_label('colorbar', fontsize=8)


plt.show()
"
"Create function in python to find the highest of all function arguments, and return the ""tag"" of the value",">>> def argmax(**kw):
...     wk = {v:k for k,v in kw.items()}
...     return wk[max(wk)]
... 
>>> argmax(foo=3, bar=5, frotz=1, kaka=-3)   
'bar'
"
How to import part of a module in python?,"from module1 import A
"
"How to mock the ""+"" operator in python (specifically datetime.date + datetime.timedelta)","class FakeDate(datetime.date):
     @classmethod
     def today(cls):
         return cls(1999, 12, 31)
     def __add__(self, other):
         res = super(FakeDate, self).__add__(other)
         return type(self)(res.year, res.month, res.day)
"
How to remove a string with varying numbers at the end,"re.compile('SRR.*?\d{1,3}\b', re.DOTALL)
"
Python code for counting number of zero crossings in an array,"import numpy as np
my_array = np.array([80.6, 120.8, -115.6, -76.1, 131.3, 105.1, 138.4, -81.3, -95.3,  
                     89.2, -154.1, 121.4, -85.1, 96.8, 68.2])
((my_array[:-1] * my_array[1:]) < 0).sum()
"
How to apply numpy.linalg.norm to each row of a matrix?,"np.sum(np.abs(x)**2,axis=-1)**(1./2)
"
Percentage match in pandas Dataframe,(trace_df['ratio'] > 0).mean()
How to replace the the diagonal elements of a matrix by a vector in SymPy?,"x1, x2, x3 = symbols('x1 x2 x3')
mat = diag(x1,x2,x3)-eye(3)+ones(3)
"
python datetime extract double digit month and day values,"In [5]: '{:02d}'.format(d.month)
Out[5]: '03'

In [6]: '%02d' % d.month
Out[6]: '03'

In [7]: d.strftime('%m')
Out[7]: '03'
"
reinterpret signed long as unsigned in Python,"x &= 2 ** 64 - 1
"
Retrieving data from a yaml file based on a Python list,"import pandas as pd
import yaml

with open('legislators-historical.yaml', 'r') as f:
    df = pd.io.json.json_normalize(yaml.load(f))

print(df.head())
"
calculating distance between two numpy arrays,"In [9]: dist = np.sum(np.abs(xx - yy), axis=0)

In [10]: dist
Out[10]: array([60, 50, 50, 50,  0, 50, 50, 50, 50,  0,  0,  0,  0,  0,  0])
"
Python: read one word per line of a text file,"def words(stream, start=-1): # you could replace the -1 with 0 and remove the +1
    for i in range(start+1): # it depend on whether you start counting with 0 or 1
        try:
            stream.next()
        except StopIteration:
            break
    for line in stream:
        yield line[:max(line.find(' '), 0) or None]
"
Print first element or 2nd element from text file,"with open('file.txt') as fp:
    first, second = zip(*[line.rstrip().split(',') for line in fp])
    print first
    print second
"
How to rotate a 3D spot with numpy?,"x0 = int(rho*np.sin(theta)*np.cos(phi))
"
how to split a list in two at the point where predicate is first False,">>> def bisect_iter(pred, i):
...     i1, i2 = itertools.tee(i)
...     return itertools.takewhile(pred, i1), itertools.dropwhile(pred, i2)
... 
>>> i1, i2 = bisect_iter(str.isalpha, iter(l))
>>> list(i1)
['a', 'b', 'c']
>>> list(i2)
['1', 'a', '2', 'b']
"
Check if element are in same paragraph (Beautiful soup),"getContainingPara(nodea) == getContainingPara(nodeb)
"
Count distinct words from a Pandas Data Frame,"results = set()
df['text'].str.lower().str.split().apply(results.update)
print results

set(['someone', 'ft.jgt', 'my', 'is', 'to', 'going', 'place', 'nickname'])
"
Setting class attributes of the proper type,"class Name(object):
    def __get__(self, instance, owner):
        return self._name

    def __set__(self, instance, name):
        if not isinstance(name, basestring):
            raise ValueError('Name must be a string')
        self._name = name


class Human(object):
    name = Name()

    def __init__(self, name):
        self.name = name
"
making a flat list out of a list of lists where the elements are strings,"arr = [['i', 'dont'], 'hi']
arr = [[item] if isinstance(item, str) else item for item in arr]
#arr is now [['i', 'dont'], ['hi']]
print [item for sublist in arr for item in sublist]
"
Remove matched tags in html files?,"print(soup.prettify())
"
customize tkinter menu while menu is open,"def update():
    def color(c):
        animal_menu.config(fg=c)
        root.update()
        print c
    def adapt():
        color('white')
        root.after(100, color('#6E6E6E'))
        root.after(100, color('black'))
    adapt() ##attempt no.1
"
How to display an image in GAE datastore?,"from google.appengine.ext import db
from google.appengine.api import users
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
import logging


class HomePage(db.Model):
    thumbnail = db.BlobProperty()
    firm_name = db.StringProperty()

class ImageUpload(webapp.RequestHandler):
    def get(self):
        self.response.out.write(""""""
        <form action=""/imagesave"" enctype=""multipart/form-data"" method=""post"">
        <div><label>firm name:</label> <input type=""text"" name=""firm_name"" size=40></div>
        <div><input type=""file"" name=""img"" /></div>
        <div><input type=""submit"" value=""Upload image""></div>
        </form>
        """""")

class ImageSave(webapp.RequestHandler):
    def post(self):
        homepage = HomePage()
        thumbnail = self.request.get(""img"")
        firm_name = self.request.get(""firm_name"")
        homepage.thumbnail = db.Blob(thumbnail)
        homepage.firm_name = firm_name
        homepage.put()
        self.redirect(""/imageupload"")

class ImageResize(webapp.RequestHandler):
    def post(self):
        q = HomepageImage.all()
        q.filter(""firm_name"", ""mta"")
        qTable = q.get()
        if qTable:
            qTable.thumbnail = db.Blob(images.resize(self.request.get(""img""), 32, 32))
            db.put(qTable)
        else:
            self.response.out.write(""""""firm not found"""""")
        self.redirect(""/imageupload"")

class DisplayImage(webapp.RequestHandler):
    def get(self):
        query = HomePage.all()
        query.filter(""firm_name"", ""mta"")
        result = query.get()
        self.response.out.write(""""""firm name: %s"""""" % result.firm_name)
        self.response.out.write(""""""<img src=""/image?img_id=%s""></img>"""""" %
        result.key())

class Image(webapp.RequestHandler):
    def get(self):
        img_id = self.request.get(""img_id"")
        logging.info(""""""**************************img_id: %s**************************"""""" % img_id)
        homepage = db.get(self.request.get(""img_id""))
        if homepage.thumbnail:
                self.response.headers['Content-Type'] = ""image/jpg""
                self.response.out.write(homepage.thumbnail)
        else:
                self.response.out.write(""no image"")


application = webapp.WSGIApplication(
[
(""/imageresize"",ImageResize),
(""/imageupload"", ImageUpload),
(""/displayimage"", DisplayImage),
(""/imagesave"", ImageSave),
(""/image"", Image),
],                                      
debug=True
)

def main():
    run_wsgi_app(application)
if __name__ == ""__main__"":
    main()
"
python beginner recursion,"print printPattern(5)
> *****!!!!!
"
Python imports module but doesn't recognize it when i initiate it?,"import socket

def Main():
    UID = 1001
    sockets = []
    users = [] ## create usernames list
    sessionLimit = int(input(""session Queue Limit: ""))

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('192.168.1.74', 12127))
    s.listen(sessionLimit) ## listen for 1 connection at a time

    while True:
        c, addr = s.accept()
        sockets.append(c)
        users.append(c.recv(1024).decode('utf-8'))
        print(""Connection from "" + str(addr))

        data = c.recv(1024).decode('utf-8') ## recieve 1024 bytes from client at a time, and then decode it into utf-8
        if not data:
            break

        temp == data
        temp.split("" "") 
        if temp[0] == ""//"": ## check to see if user has sent command
            if temp[1] == ""msg"":
                for i in range(len(users)):
                    if users[i] == temp[2]:
                        sockets[i].send(("" "".join(temp[::2])).encode('utf-8'))
        else: ## else, send data to all users. Could just use s.sendall(data.encode('utf-8'))
            for sock in sockets:
                sock.send(data.encode('utf-8')) ## send to sockets[socket]

        ##print(""From connected user: "" + data)
        ##data = data.upper()
        ##print(""Sending: "" + data)
        ##c.send(data.encode('utf-8'))

        ## command listening
        commands = input(""-> "")
        commands.split("" "")

        if commands[0] == ""exit"":
            c.close() ## close connection
        elif commands[0] == ""/msg"":
            for i in range(len(users)):
                if users[i] == commands[1]:
                    sockets[i].send(("" "".join(commands[::1])).encode('utf-8'))
        """"""
        elif commands[0] == ""/rename"": ## dont implement yet, due to users[] length changing
            for i in range(len(users)):
                if users[i] == commands[1]:
                    sockets[i].send(""<server_"" + UID + ""> rename "" + commands[2].encode('utf-8'))
        """"""
    c.close()

if __name__ == ""__main__"":
    Main()
"
regex - how to recognise a pattern until a second one is found,">>> show_p=re.compile(""(.*)\.s(\d*)e(\d*).*?([^\.]*)$"")
>>> x=""tv_show.s01e01.episode_name.avi""
>>> show_p.match(x).groups()
('tv_show', '01', '01', 'avi')
>>> x=""tv_show.s2e1.episode_name.avi""
>>> show_p.match(x).groups()
('tv_show', '2', '1', 'avi')
>>> x='some.other.tv.show.s04e05.episode_name.avi'
>>> show_p.match(x).groups()
('some.other.tv.show', '04', '05', 'avi')
>>>  
"
How to add to arrays such that matching elements become their own arrays,">>> np.dstack((a,b,c))
array([[[1, 1, 1],
        [2, 2, 2],
        [3, 3, 3]]])
"
Escape special HTML characters in Python,"from xml.sax.saxutils import escape, unescape
# escape() and unescape() takes care of &, < and >.
html_escape_table = {
    '""': ""&quot;"",
    ""'"": ""&apos;""
}
html_unescape_table = {v:k for k, v in html_escape_table.items()}

def html_escape(text):
    return escape(text, html_escape_table)

def html_unescape(text):
    return unescape(text, html_unescape_table)
"
Coalesce values from 2 columns into a single column in a pandas dataframe,"df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"
Find list index of list items within other list items,">>> my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']
>>> things_to_find = ['abc', 'def']
>>> [i for i, x in enumerate(my_list) if any(thing in x for thing in things_to_find)]
[0, 1, 3]
"
Create a list that follows a certain creation pattern,"from itertools import cycle

i = 0
n = 10
l = []
step = cycle([1, -2, 3])

for _ in range(n):
    i += next(step)
    l.append(i)

print(l)
"
grouping objects to achieve a similar mean property for all groups,"import scipy.cluster.vq as vq
import collections
import numpy as np

def auto_cluster(data,threshold=0.1,k=1):
    # There are more sophisticated ways of determining k
    # See http://en.wikipedia.org/wiki/Determining_the_number_of_clusters_in_a_data_set
    data=np.asarray(data)
    distortion=1e20
    while distortion>threshold:
        codebook,distortion=vq.kmeans(data,k)
        k+=1   
    code,dist=vq.vq(data,codebook)    
    groups=collections.defaultdict(list)
    for index,datum in zip(code,data):
        groups[index].append(datum)
    return groups

np.random.seed(784789)
N=20
weights=100*np.random.random(N)
groups=auto_cluster(weights,threshold=1.5,k=N//5)
for index,data in enumerate(sorted(groups.values(),key=lambda d: np.mean(d))):
    print('{i}: {d}'.format(i=index,d=data))
"
Python - Combine all items in a list into a string,"list_of_nonstrings = [1.83, some_object, 4, 'abc'] # given a list of mixed types

# construct new list of strings for join function
list_of_strings = [str(thing) for thing in list_of_nonstrings]

new_string = """".join(list_0f_strings) # join into new string, just like before
"
iterate over a dictionary in sorted order,it = iter(sorted(d.items()))
Convert string into a Tkinter notebook frame,"convert = {""tab1_name"": ""tab1"", ""tab2_name"": ""tab2"", ""tab3_name"": ""tab3""}
a = mainframe.tab(mainframe.select(), ""text"")
b = convert[a]

code1 = ""w = %s.winfo_reqwidth()"" % b
code2 = ""h = %s.winfo_reqheight()"" % b
exec(code1) # for python 2 it is: exec code1
exec(code2) # python 3 changed the exec statement to a function    
mainframe.configure(width=w, height=h)
"
Open URL and place it to a string,"lines = []
for line in filehandle:
    lines.append(line)
"
correct style for element-wise operations on lists without numpy (python),"import operator
multiadd = lambda a,b: map(operator.add, a,b)
print multiadd([1,2,3], [2,3,4]) #=> [3, 5, 7]
"
Python: Passing functions with arguments to a built-in function?,"filter(lambda path: filterex(path, 'txt'), files)
"
"Take the ""Head"" of every file in a directory?","for i in *; do
    cp ""$i"" ""$i.tail""
    sed -i '10001,$d' ""$i.tail""
done
"
Check string for multiple occurrence of character in Python,">>> a = '---'
>>> len(set(a)) == 1 and a[0] == '-'
True
>>> a = '-x-'
>>> len(set(a)) == 1 and a[0] == '-'
False
"
converting 3d lists to 2d lists in python,"def chunks(l, n):
    """""" Yield successive n-sized chunks from l. """"""
    for i in xrange(0, len(l), n):
        yield l[i:i+n]
"
Python: Check if element is not in two lists?,"if ele not in lista + listb:
    # do stuff
"
Equivalent of count list function in numpy array,"count = (~np.einsum('ij->i',listScore != [2,0])).sum()
"
Count number of strings,">>> isinstance('a-string', str)
True
>>> isinstance(['a-string', 'another-string'], str)
False
"
Editing a list to add strings in in different positions to output a formatted string,"lines = [""195,191"", ""22,23"", ""18,252"", ""172,221""]
for s in lines:
    print(""goto({0[0]}+position,({0[1]} * xy) - y)"".format(s.split("","")))
"
Probabilistic selection from a numpy array,"In [33]: np.random.choice(a, size=n, replace=False, p=w)
Out[33]: array([99, 84, 86, 91, 87, 81, 96, 89, 97, 95])

In [34]: np.random.choice(a, size=n, replace=True, p=w)
Out[34]: array([94, 98, 99, 98, 97, 99, 91, 96, 97, 93])
"
Django URL Config - Match filename,">>> import re
>>> re.search(r'^uploads/view/(?P<file_name>[\w.]{0,256})$', 'uploads/view/test_filename.png')
<_sre.SRE_Match object at 0x103aa5828>
>>> re.search(r'^uploads/view/(?P<file_name>[\w.]{0,256})$', 'uploads/view/test_filename.png').groupdict()
{'file_name': 'test_filename.png'}
"
Remove character starting with x and ending with x and everything between it in a string,"import re

def remove_between_anchors(text, anchor):
    return re.sub(r'{0}.+?{0}'.format(anchor), '', text)

remove_between_anchors('123aa456aa789', 'aa') # returns '123789'
"
Random sampling and Pandas dataframes,"
import numpy as np
import pandas as pd

df = pd.DataFrame({
    'ID1': [1]*4+[2]*2, 'ID2':list('ABCDAB'), 
    'Conversion Rate': [0.046562, 0.315975, 0.577998, 0.059465, 0.6, 0.4]})
raw_df = pd.DataFrame({'ID1': [1,2], 'Value':[100, 200]})

def random_id2(x):
    return np.random.choice(x['ID2'], p=x['Conversion Rate'].values)

id2 = df.groupby(['ID1']).apply(random_id2)

final_df = raw_df.copy()
final_df['ID1'] = final_df['ID1'].map(id2)
final_df = final_df.rename(columns={'ID1': 'ID2'})

print(final_df)
"
How to display top 10 highscores from a comma separated value (.txt) file in Python (Pygame),"with open('highscores.txt', 'rb') as f:
    scores = [line.strip().split(',') for line in f]
"
convert a string of bytes into an int (python),"struct.unpack('<L', 'y\xcc\xa6\xbb')[0]"
str.replace issue,"In [93]: import re
In [95]: re.sub(r'(?i)[aeiou]', '', 'Abracadabra')
Out[95]: 'brcdbr'
"
Reading from a file and assigning content to a variable in Python,"# Get the data from the file
with open('public.txt') as fp:
  v = fp.read()

# The data is base64 encoded. Let's decode it.
v = v.decode('base64')

#  The data is now a string in base-256. Let's convert it to a number
v = v.encode('hex')
v = int(v, 16)

# Now it is a number. I wonder what number it is:
print v
print hex(v)
"
pandas DataFrame filter regex,df.loc[df[0].str.contains('(Hel|Just)')]
Reverse Class Method Not Working,"def reverse(self):
    if not self.__items:
        return """"

    def recur(s):
        if not s:
            return """"
        return s[-1] + recur(s[:-1])
    return "" "".join(recur(w) for w in self.__items)
"
"In python: How to find match of string in same row, compare part of (fuzzy) matched string to list?","lastname = ['smith','jones','cook']
companies = ['company a','company b']
names = {'smith':'matt smith','jones':'tom jones','cook':'karen cook'}
affiliations = {'matt smith':'company a','tom jones':'company b','karen cook':'company c'}
"
python: Primary school Arithmetic quiz- saving results to a .txt file,"def test():
    num1 = random.randint(1, 10)
    num2 = random.randint(1, num1)

    ops = {
        '+': lambda x, y: x + y,  #You can define the function right where you want to use it.
        '-': lambda x, y: x - y,
        '*': lambda x, y: x * y,
    }

    keys = list(ops.keys()) ##=> ['+', '*', '-']
    rand_key = random.choice(keys)  #e.g. '*' 
    operation = ops[rand_key]  #e.g. lambda x, y: x*y

    correct_result = operation(num1, num2)
"
unable to find the right regex,"GC.*?([\d.]+)(?= secs\](?: \[Time|$))
"
Union of two lists in Python,">>> c = sorted(a + b)
[1, 2, 2, 2, 3, 5, 6]
"
Getting index of structured elements of a list into dictionaries based on regex,"import re, collections

mylist = ['Probes', 'Gene.symbol', 'Gene.Title', 'GO1', 'GO2', 'GO3', 'ADX_KD_06.ip', 'ADX_KD_24.ip', 'ADX_LG_06.ip', 'ADX_LG_24.ip', 'ADX_LV_06.ip', 'ADX_LV_24.ip', 'ADX_SP_06.ip', 'ADX_SP_24.ip', 'ADX_LN_06.id', 'ALM_LN_06.id', 'ALM_LV_06.ip', 'ALM_SP_06.ip', 'K3SPG_LV_06.ip', 'K3SPG_SP_06.ip', 'KKK_LN_06.id', 'KKK_LV_06.ip', 'KKK_SP_06.ip', 'ENDCN_LV_06.in', 'ENDCN_SP_06.in', 'bCD_LV_06.ip', 'bCD_SP_06.ip', 'ADX_LV_06.id', 'ADX_SP_06.id', 'ALM_LV_06.id', 'ALM_SP_06.id', 'D35_LN_06.id', 'K3SPG_LN_06.id', 'K3_LV_06.id', 'K3_SP_06.id', 'bCD_LN_06.id', 'D35_LV_06.id', 'D35_SP_06.id', 'K3SPG_LV_06.id', 'K3SPG_SP_06.id', 'bCD_LV_06.id', 'bCD_SP_06.id', 'ENDCN_KD_06.in', 'ENDCN_LG_06.in', 'Probes', 'Gene.symbol', 'ADX_KD_06.ip', 'ADX_KD_24.ip', 'ADX_LG_06.ip', 'ADX_LG_24.ip', 'ADX_LV_06.ip', 'ADX_LV_24.ip', 'ADX_SP_06.ip', 'ADX_SP_24.ip', 'ADX_LN_06.id', 'ALM_LN_06.id', 'ALM_LV_06.ip', 'ALM_SP_06.ip', 'K3SPG_LV_06.ip', 'K3SPG_SP_06.ip', 'KKK_LN_06.id', 'KKK_LV_06.ip', 'KKK_SP_06.ip', 'ENDCN_LV_06.in', 'ENDCN_SP_06.in', 'bCD_LV_06.ip', 'bCD_SP_06.ip', 'ADX_LV_06.id', 'ADX_SP_06.id', 'ALM_LV_06.id', 'ALM_SP_06.id', 'D35_LN_06.id', 'K3SPG_LN_06.id', 'K3_LV_06.id', 'K3_SP_06.id', 'bCD_LN_06.id', 'D35_LV_06.id', 'D35_SP_06.id', 'K3SPG_LV_06.id', 'K3SPG_SP_06.id', 'bCD_LV_06.id', 'bCD_SP_06.id', 'ENDCN_KD_06.in', 'ENDCN_LG_06.in']

regex = re.compile(r'([\w\d]+)_(\w\w)_(\d\d)\.(\w\w)')
first_part_dict = collections.defaultdict(list)
second_part_dict = collections.defaultdict(list)
# second instance of 'Probes', to separate the first and second parts
cutoff_index = mylist.index('Probes', 1) 

for i, string in enumerate(mylist):
    matched = regex.match(string)
    if not matched:
        continue
    rg1, rg2, rg3, rg4 = matched.groups()
    key = rg1 + rg3
    if i < cutoff_index:
        first_part_dict[key].append(i)
    else:
        second_part_dict[key].append(i)
"
Python Numpy Matrix - Return the value contained in the matrix?,">>> m.tolist()[0][0] # seldom useful, though
(-0.16666666666666666+0.6666666666666666j)
>>> m.flat[0]  # more frequently useful
(-0.16666666666666666+0.66666666666666663j)
"
Python's re module - saving state?,"# per Brian's suggestion, a wrapper that is stateful
class m_(object):
  def match(self, *args):
    self.inner_ = re.match(*args)
    return self.inner_
  def group(self, *args):
    return self.inner_.group(*args)
m = m_()

# now 'm' is a stateful regex
if m.match('foo (\w+) bar (\d+)', line):
  # do stuff with m.group(1) and m.group(2)
elif m.match('baz whoo_(\d+)', line):
  # do stuff with m.group(1)
elif ...
"
Output data from all columns in a dataframe in pandas,"pandas.set_option('display.max_columns', 7)"
Recursively search,"def find_char(text, pos, word, ori):
    x = int(pos % width)
    y = int(pos // height)
    x += ori % 3 - 1
    y += ori // 3 - 1
    if text[pos] != word[0]:
        return None
    if len(word) == 1:
        return (x,y)
    if x < width and y < height and x > -1 and y > -1:
        pos = int(width * y + x)
        if text[pos] == word[1]:
            if len(word) > 1:
                resp = find_char(text, pos, word[1:], ori)
                if resp:
                    return resp
        else:
            return None

word_list = ['COMPUTER', 'SCRAM', 'COURSE', 'LECTURE', 'PROGRAMMING', 'PROJECT', 'SCIENCE', 'STUDENT']
for i in range(len(text)):
    for ori in [0,1,2,3,5,6,7,8]:
        for word in word_list:
            resp = find_char(text, i, word, ori)
            if resp:
                print(word, resp, ori)
"
find binary permutations in python,"l=7
x=6
set(itertools.permutations([1]*x + [0]*(l-x)))
"
"finding non zero entries in 3D matrix using only maps, lambda and reduce","from itertools import product

d3 = [[[0 for col in range(3)]for row in range(3)] for x in range(3)]

d3[0][2][2] = 1

for i, j, k in product(xrange(3), xrange(3), xrange(3)):
    if(d3[i][j][k]): print ""%s %s %s = %s"" % (i, j, k, d3[i][j][k])
"
config parser python,"ids={ sec:config_instance.get(sec,'id') for sec in sections }
print ids['sec1']
"
Track changes to lists and dictionaries in python?,"class Tracker(object):
    def __init__(self):
        self.lst = trackable_type('lst', self, list)
        self.dct = trackable_type('dct', self, dict)
        self.revisions = {'lst': [], 'dct': []}


>>> obj = Tracker()            # create an instance of Tracker
>>> obj.lst.append(1)          # make some changes to list attribute
>>> obj.lst.extend([2, 3])
>>> obj.lst.pop()
3
>>> obj.dct['a'] = 5           # make some changes to dict attribute
>>> obj.dct.update({'b': 3})
>>> del obj.dct['a']
>>> obj.revisions              # check out revision history
{'lst': [[1], [1, 2, 3], [1, 2]], 'dct': [{'a': 5}, {'a': 5, 'b': 3}, {'b': 3}]}
"
Read a File 8 Lines at a Time Python,">>> from collections import namedtuple
>>> from itertools import islice
>>> records = namedtuple('record',
                  ('firstname','lastname','email' #, .....
               ))
>>> with open(""test.txt"") as fin:
    try:
        while True:
            data =  islice(fin, 0, 3)

            data = record(*data)
            print data.firstname, data.lastname, data.email #.......
    except (StopIteration, TypeError):
        pass
"
"Threaded BaseHTTPServer, one thread per request","from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from threading import Thread

class ThreadedHTTPServer(HTTPServer):
    def process_request(self, request, client_address):
        thread = Thread(target=self.__new_request, args=(self.RequestHandlerClass, request, client_address, self))
        thread.start()
    def __new_request(self, handlerClass, request, address, server):
        handlerClass(request, address, server)
        self.shutdown_request(request)

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(""hello world"")

server = ThreadedHTTPServer(('', 80), Handler)
#server.serve_forever()
"
Build a dictionary with a regular expression,">>> dict(re.findall('([A-Z])(\d+)', 'P600F600'))
{'P': '600', 'F': '600'}
"
Script to edit many text files,"find . -name ""data*.txt"" -exec sed -i -e '/-nan/d' {} +
"
Is it good practice to allow multiple types of argument in python,"def myFunction(StrangeMetaObject):
    if isinstance(StrangeMetaObject, int):
        # Do the 
    elif isinstance(StrangeMetaObject, str):
        # Do the str thing...
    elif isinstance(StrangeMetaObject, MyObject):
        # ...
"
How can i create a permutation with a limit on specific characters efficently?,"def combos():
    letters = 'ABCDEF'
    numbers = '1234567890'
    argument_combos = stars_and_bars(numbers, letters)
    for args in argument_combos:
        yield from itertools.product(*args)
"
Not getting the right result using XPath with python scraper,"response.xpath('//nav[contains(@class, ""subcategorynav"")]//li')
"
Python datetime to microtime,time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0
Finding groups of increasing numbers in a list,"def sequences(x):
    it = iter(x)
    prev, temp = next(it), []
    while prev is not None:
        start = next(it, None)
        if prev + 1 == start:
            temp.append(prev)
        elif temp:
            yield tuple(temp + [prev])
            temp = []
        prev = start
"
Search for string in txt file,"if ('blabla' in open('example.txt').read()):
    pass"
numpy arrays: filling and extracting data quickly,"for x in points:
   for y in x:
       for Z in y:
           # z is a tuple with GPS coordinates
"
Python: process a string in multiple substring,"s = ""stringA*stringB-stringC-stringD""
tbl = str.maketrans(""*-"",""  "")
spl = s.translate(tbl).split()
a,b  = spl[0],""-"".join(spl[1:3])
print(a,b)

stringA stringB-stringC
"
Create constants for offsets into a list," keys_list = ['host',...]
 host_info = dict(zip(['stackoverflow.com', '213.213.214.213', 'comments', 'desriprion', 'age'], keys_list))
"
Convert a colon separated string to a list - within a list of dictionaries... (Python),"for d in products:
    for k in d:
        if d[k] and k in ok2split: d[k] = d[k].split(';')
"
What's the preferred way to implement a hook or callback in Python?,"class delegate(object):

    def __init__(self, func):
        self.callbacks = []
        self.basefunc = func

    def __iadd__(self, func):
        if callable(func):
            self.__isub__(func)
            self.callbacks.append(func)
        return self

    def callback(self, func):
        if callable(func):
            self.__isub__(func)
            self.callbacks.append(func)
        return func

    def __isub__(self, func):
        try:
            self.callbacks.remove(func)
        except ValueError:
            pass
        return self

    def __call__(self, *args, **kwargs):
        result = self.basefunc(*args, **kwargs)
        for func in self.callbacks:
            newresult = func(result)
            result = result if newresult is None else newresult
        return result
"
Matching id's in BeautifulSoup,">>> print soupHandler.findAll('div', id=lambda x: x and x.startswith('post-'))
[<div id=""post-45"">...</div>, <div id=""post-334"">...</div>]
"
Python unpacking list value in kwargs,"def get_expected_rows(user, grade):
    #Here i want to list `grade` to be unpacked.
    return dict(zip(
        ['username', 'email', 'total', 'sub1grade', 'sub2grade', sub3grade, sub4grade],
        [ user.username, user.email ] + grade))
"
Column wise subtraction in numpy,">>> mat
array([[0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1]])
>>> abs(np.diff(mat, axis=0))
array([[1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1]])
"
MATLABs fill in PyPlot,"x=[0, 1, 1, 0]
y=[0, 0, 1, 1]
z=[0, 1, 2, 3]
tridat=[[0,3,2],[0,2,1]] # 2 triangles in counterclockwise order

triang=tri.Triangulation(x,y,tridat) #this has changed
refiner=tri.UniformTriRefiner(triang)
interp=tri.LinearTriInterpolator(triang,z) #linear interpolator
new,new_z=refiner.refine_field(z,interp,subdiv=6) #refined mesh

fig = plt.figure()
plt.tripcolor(new.x,new.y,new_z,cmap=cm.jet)
"
Non-ASCII attribute values in ElementTree,">>> from xml.etree import ElementTree as ET
>>> sample = u'''\
... <root>
... <content type=""写真"">match</content>
... </root>
... '''.encode('utf8')
>>> tree = ET.fromstring(sample)
>>> tree.find(""content[@type='写真']"")
/.../lib/python2.7/xml/etree/ElementPath.py:176: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
  if elem.get(key) == value:
>>> tree.find(u""content[@type='写真']"")
<Element 'content' at 0x10690da10>
"
fast way to transpose and concat csv files in python?,"In [6]: txt=""""""time,topic1,topic2,country
   ...: 2015-10-01,20,30,usa
   ...: 2015-10-02,25,35,usa""""""

In [7]: data=np.genfromtxt(txt.splitlines(),delimiter=',',skip_header=0)

In [8]: data
Out[8]: 
array([[ nan,  nan,  nan,  nan],
       [ nan,  20.,  30.,  nan],
       [ nan,  25.,  35.,  nan]])
"
Combining nested collection in mongodb with documents written from parallel nodes,"def aggregate(documents, base_document=None, unique=True):
    # use unique=False to keep all values in the lists, even if repeated
    # like [100, 100, 200, 300], leave it True otherwise
    for doc in documents:
        if isinstance(doc, list):
            if base_document is None: base_document = []
            for d in doc:
                base_document.append(d)
            if unique==True: base_document = set(base_document)
            base_document = sorted(base_document)
        else:
            if base_document is None: base_document = {}
            for d in doc:
                b = base_document[d] if d in base_document \
                    else [] if isinstance(doc[d], list) else {}
                base_document[d] = aggregate([doc[d]], base_document=b)
    return base_document
"
Add SUM of values of two LISTS into new LIST,"[(x + y) for x, y in zip(first, second)]"
Numpy create two arrays using fromiter simultaneously,"In [103]: it = ((x, x**2) for x in range(20))

In [104]: import itertools

In [105]: y = np.fromiter(itertools.chain.from_iterable(it), dtype=float)

In [106]: y
Out[106]: 
array([   0.,    0.,    1.,    1.,    2.,    4.,    3.,    9.,    4.,
         16.,    5.,   25.,    6.,   36.,    7.,   49.,    8.,   64.,
          9.,   81.,   10.,  100.,   11.,  121.,   12.,  144.,   13.,
        169.,   14.,  196.,   15.,  225.,   16.,  256.,   17.,  289.,
         18.,  324.,   19.,  361.])

In [107]: y, y2 = y[::2], y[1::2]

In [108]: y
Out[108]: 
array([  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,  10.,
        11.,  12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.])

In [109]: y2
Out[109]: 
array([   0.,    1.,    4.,    9.,   16.,   25.,   36.,   49.,   64.,
         81.,  100.,  121.,  144.,  169.,  196.,  225.,  256.,  289.,
        324.,  361.])
"
how to reveal an object's attributes in Python?,"for k in obj.__dict__:
    print(k, obj.__dict__[k])
"
"Searching recursively for files to add to list, but if one type of file is found ignore other type","files = set(files)
if 'B.csv' in files:
    fileList.append(os.path.join(dirpath, 'B.csv'))
elif 'A.csv' in files:
    fileList.append(os.path.join(dirpath, 'A.csv'))
"
Converting coordinate tuple information to numpy arrays,"Nx1, idx1 = np.unique(data[:, 0], return_inverse=True)
Nx1 = Nx1.shape[0]
Nx2, idx2 = np.unique(data[:, 1], return_inverse=True)
Nx2 = Nx2.shape[1]
Nx3, idx3 = np.unique(data[:, 2], return_inverse=True)
Nx3 = Nx3.shape[0]

f = np.empty((Nx1, Nx2, Nx3))
f[idx1, idx2, idx3] = data[:, 3]
g = np.empty((Nx1, Nx2, Nx3))
g[idx1, idx2, idx3] = data[:, 4]
h = np.empty((Nx1, Nx2, Nx3))
h[idx1, idx2, idx3] = data[:, 5]
"
re.search with multiple matched keyword,"import re

string = ""python is great!""
words=[""python"",""is"",""great""]

all_found=True
for w in words:
 if not re.search(r""\b""+w+r""\b"", string):
    all_found=False
    break

if all_found:
    print (""found all words"")
else:
    print (""at least one word missing"").
"
Check if image is black,"import Image
im = Image.load(""image.png"")
diff_colors = list(set(im.getdata()))
if len(diff_colors) == 1 and diff_colors[0] == (0, 0, 0):
    print ""all black""
"
combining a list of dictionaries with another dictionary,"for key in range(0,nDicts):
    for x in list1[key]:
        if x in dict1:
            resultDict={list1[key][x]:dict1[x]}
            print resultDict
"
How to define a decorator that will provide an interpolated doc string for a function/method call,"from functools import wraps

def live_doc(func):
    template = func.__doc__
    @wraps(func)
    def wrapper(*args, **kwargs):
        ret_val = func(*args, **kwargs)
        args_pretty = "", "".join(repr(a) for a in args)
        kw_pretty = "", "".join(""%s=%r"" % (k, v) for k, v in kwargs.items())
        signature = "", "".join(x for x in (args_pretty, kw_pretty) if x)
        name =  func.__name__
        wrapper.__doc__ = template % locals()
        return ret_val
    return wrapper

@live_doc
def f(x, y):
    """"""%(name)s was called with %(signature)s and returned %(ret_val)r.""""""
    return x + len(y)
"
sort a 2D list first by 1st column and then by 2nd column,"print sorted(l,key=lambda x: (x[1]))
[[10, 1], [2, 1], [1, 2], [1, 4], [10, 6], [2, 7]]
"
How to get the hardest part to take longest in python,"import numpy as np

count = 0 
iters = 1000000

l=10 
k=10
l0=l+k-1

t = np.random.choice([-1,1], size = l0 * iters)
v = np.random.choice([-1,1], size = l  * iters)

for i in xrange(iters):
    if (not np.convolve(v[(l*i):(l*(i+1))], t[(l0*i):(l0*(i+1))], 'valid').any()):
        count += 1

print count
"
How to get the nth parameter of a list with delimiter space in python,"lstset = {l.split()[9].replace('SRC=','') for l in content}
print('\n'.join(lstset))
"
Extract string between characters from a txt file in python,"with open('/tmp/test.txt','r') as f:
    data=''.join(f.readlines())    

print data[data.index('&'):data.index('!')+1] 
"
"Why is it true that string.encode('utf-8') != bytes(map(ord, string))?",">>> string = ''.join([chr(i) for i in range(0x100)])
>>> string.encode('latin-1') == bytes(map(ord, string))
True
"
I have single-element arrays. How do I change them into the elements themselves?,"nested_column_1 = records[""column_name_1""]
nested_column_2 = records[""column_name_2""]

clean_column_1 = []
clean_column_2 = []

for i in range(0, len(records.index):
    clean_column_1.append(nested_column_1[i][0])
    clean_column_2.append(nested_column_2[i][0])
"
Pandas Group Columns into Level,"def to_nested_dict(row):
    res = {}
    for col in row.index:
        outer_key, inner_key = col.split('_')
        outer = res.setdefault(outer_key, {})
        outer[inner_key] = row[col]
    return res

list(df.apply(to_nested_dict, axis=1))
"
Replicating rows in a pandas data frame by a column value,">>> df2 = df.loc[np.repeat(df.index.values,df.n)]
>>> df2
  id  n   v
0  A  1  10
1  B  2  13
1  B  2  13
2  C  3   8
2  C  3   8
2  C  3   8
"
How do I perform math operations on dates and sort them in Python?,"dates = ['2011-06-18', 'Date', '2010-01-13', '1997-12-01', '2007-08-11']
dates_filtered = filter(lambda d: d != 'Date', dates)
"
Is there a ready solution in matplotlib to plot times?,"plt.xticks(locs, map(lambda x: ""%12.0f"" % x, locs))
"
Cleanest way to return a tuple containing a particular element?,">>> d = {v:k for k,v in ((1, 'foo'), (2, 'bar'), (3, 'baz'))}
>>> d['bar']
2
>>> d['foo']
1
"
Creating functions with different variables,"def comparisons(value):
    """"""Only change here is using x <= y < z syntax.""""""
    if value < 5:
        status = 'nill'
        total = 0
    elif 5 <= value < 8:
        status = 'valid'
        total = 1
    elif 8 <= value < 12:
        status = 'superb'
        total = 5
    else:
        status = 'over-qualified'
        total = 10
    # Here we return the status and the total for each item
    # This may not be what you want, so this can be adjusted
    return status, total


# Create a list that will contain your 15 items
items = ['Engineering', 'Carpentry']

# Create a container to hold the results.
# Note that we don't use different variables names each time -
# instead, we create an entry in a dictionary corresponding to
# our 'items' values.
results = {}

# Now we iterate through each item in our items list, running
# our function and storing the results. Note that this is a guess
# as to how you want to handle 'status' - a more useful solution
# could be to use a nested dictionary where each item has a dictionary
# with two sub-fields: 'status' and 'total'.
for item in items:
    status, total = comparisons(int(raw_input('{0}: '.format(item))))
    results[item] = [status, total]

# Print out each item
print '\nIndividual items:'
for item, values in results.iteritems():
    print item, values

# Example of how you could sum the totals
print '\nTotal score:'
print sum((results[x][1] for x in results))
"
Transforming list to dict with list items as keys and list indices as values in python,"d = dict((e, i) for i, e in enumerate(l))
"
Slice 2d array into smaller 2d arrays,"import numpy as np
def blockshaped(arr, nrows, ncols):
    """"""
    Return an array of shape (n, nrows, ncols) where
    n * nrows * ncols = arr.size

    If arr is a 2D array, the returned array should look like n subblocks with
    each subblock preserving the ""physical"" layout of arr.
    """"""
    h, w = arr.shape
    return (arr.reshape(h//nrows, nrows, -1, ncols)
               .swapaxes(1,2)
               .reshape(-1, nrows, ncols))
"
get first paragraph from wikipedia article,"prefix, sep, rest = rev_data.partition(""{{"")
if sep: # found the first ""{{""
    rest = sep + rest # put it back
    while rest.startswith(""{{""):
        # remove nested ""{{expr}}"" one by one until there is none
        rest, n = re.subn(r""{{(?:[^{]|(?<!{){)*?}}"", """", rest, 1)
        if n == 0: 
            break # the first ""{{"" is unmatched; can't remove it
    else: # deletion is successful
        rev_data = prefix + rest
print(rev_data)
"
Removing sublist from nested lists based on element values,">>> [[n, ws] for n, ws in data if all(w not in neg_words for w in ws.split())]
[['1', 'i like you'], ['5', 'she is good']]
"
Flatten a nested dict structure into a dataset in Python,"def merge(d1, d2):
    return dict(list(d1.items()) + list(d2.items()))

[[merge({'foobar': key, 'animal': sub_key}, sub_sub_dict) 
    for sub_key, sub_sub_dict in sub_dict.items()] 
        for key, sub_dict in a.items()]
"
Multiple references in separate lists; Python,"MASTER = [10,11,12,13,14]

LISTA = [0,1,2]
LISTB = [0,3,4]

for i in LISTA: MASTER[i] += 10
for i in LISTB: MASTER[i] += 10

print MASTER[LISTA[0]]

print MASTER[LISTB[0]]
"
Get tz offset from sting,">>> from dateutil.parser import parse
>>> dt = parse(""2013-12-02 22:00:00"" + ""GMT+0800"")
>>> dt.isoformat()
'2013-12-02T22:00:00-08:00'
"
Writing a program to print hapax's from a string,">>> import string
>>> string.punctuation
'!""#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
>>> 
"
Python Dictionary value assignment with list comprehension,"myDict = {'A':[1,2,3,4], 'B':[5,6,7,8], 'C':'str', 'D':'str'}
myDict = {key:np.array(val) if key not in {'C', 'D'} else val for key, val in myDict.iteritems()}
"
Python: How to count items in a specific column,"total = 0
for line in rows:
    numSlashes = line.count('/')
    if numSlashes > 0:
        total += numSlashes + 1
"
How to use multiprocessing for grid search (parameter optimization) in Python,"import multiprocessing
import itertools

def get_chunks(iterable, chunks=1):
    # This is from http://stackoverflow.com/a/2136090/2073595
    lst = list(iterable)
    return [lst[i::chunks] for i in xrange(chunks)]

def someOtherFunction(lower, upper):
    return (lower + upper) / 2

def worker(pairs):
    best_accuracy = best_lower = best_upper = 0
    for lower_threshold, upper_threshold in pairs:
        accuracy = someOtherFunction(lower_threshold, upper_threshold)
        if accuracy > best_accuracy:
            best_accuracy = accuracy
            best_lower = lower_threshold
            best_upper = upper_threshold
    return best_accuracy, best_lower, best_upper

if __name__ == '__main__':
    jobs = []
    pairs = itertools.product(xrange(0, 100), xrange(100, 200))
    chunked_pairs = get_chunks(pairs, chunks=multiprocessing.cpu_count())
    pool = multiprocessing.Pool()
    results = pool.map(worker, chunked_pairs)
    pool.close()
    pool.join()
    print results
    # Now combine the results
    sorted_results = reversed(sorted(results, key=lambda x: x[0]))
    print next(sorted_results)  # Winner
"
GUI for choosing different sorting in python by Tkinter,"  def sortit(self):
        function = self.function[self.v.get()]
        result = function()
        num = ''.join('%4i' % num for num in result)
        self.label3 = Label(self, text=num, width=2, height=2)
        self.label3.grid(row=5, columnspan=10, sticky=W+E+N+S )
"
How to summarise data over several years into one dataframe,"import pandas as pd
import random

df = pd.DataFrame({'business' : ['business_1', 'business_2', 'business_3', 'usiness_4', 'business_1', 'business_2', 'business_3', 'business_4'], \
               'years' : [2013, 2013, 2013, 2013, 2014, 2014, 2014, 2014], \
               'zip_code' : ['101', '102', '103', '104', '101', '102', '103', '104'], \
               'profit' : [random.randint(1000, 2000) for x in xrange(8)]})
"
Combining Dictionaries Of Lists In Python,"import itertools
import operator

def lot_to_dict(lot):
  key = operator.itemgetter(0)
  # if lot's not sorted, you also need...:
  # lot = sorted(lot, key=key)
  # NOT in-place lot.sort to avoid changing it!
  grob = itertools.groupby(lot, key)
  return dict((k, [v[1] for v in itr]) for k, itr in grob)
"
Subtraction over a list of sets,"element_counts = collections.Counter(itertools.chain.from_iterable(allsets))
all_uniques = {elem for elem, count in element_counts.items() if count == 1}
#                                                     ^ viewitems() in Python 2.7
nondupes = [original & all_uniques for original in allsets]
"
Python optimize how to find duplicate value and value index in a list,">>> d={}
>>> for i,j in enumerate(new):
...   d.setdefault(j,[]).append(i)
... 
>>> d
{'1CDABCABD': [0, 1, 2], '1DDAABBBB': [4], '1BCABCCCA': [3, 5]}
"
Python string to dict,"dict((k, int(v) if v.isdigit() else v) for k, v in json.loads(inputstring))
"
Refactor this block cipher keying function,"subkeys = []
while key:
    subkeys.append(key & 0xffffffff)
    key >>= 32

if not subkeys: subkeys = [0] # Handle 0 case
subkeys.reverse() # Use same order as before (BUT SEE BELOW)
"
python: finding substring within a list,"print [s for s in list if sub in s]
"
Print multithread subprocess,"from multiprocessing.dummy import Pool # use threads
from subprocess import call

def run(i):
    with open('log%d.txt' % i, 'wb') as file:
        return call([""cmd"", str(i)], stdout=file)

return_codes = Pool(4).map(run, range(10)) # run 10 subprocesses, 4 at a time
"
Find all occurrences of integer within text in Python," print(sum(sum(map(int,r.findall(line))) for line in data))
"
Unique constant reference,"def get_values(keys=None):
    if keys is None:
        keys = []
    rv = {}
    for key in keys:
        # Keep in mind, this is a reference to
        # an object in my_dict, not a copy. Also,
        # you may want to handle keys not found in my_dict:
        # ignore them, or set rv[key] to None?
        rv[key] = my_dict[key]
    return rv

d1 = get_all_values()   # Empty dict
d2 = get_all_values([])  # Explicitly empty dict
d3 = get_all_values([""foo"", ""bar""])  # (Sub)set of values
d4 = get_all_values(my_dict) # A copy of my_dict
"
Numpy arrays containing iterable objects,"x = numpy.empty(appropriate_shape, dtype=object)
x[:] = your_list_of_foos
"
Why is target.write ignoring my %r formatting?,"target.write(""{0!r}\n{1!r}\n{2!r}"".format(line1, line2, line3))
"
recursively implementing 'minimum number of coins' in python,"def get_min_coin_configuration(sum = None, coins = None):
if sum in coins: # if sum in coins, nothing to do but return.
    return [sum]
elif max(coins) > sum: # if the largest coin is greater then the sum, there's nothing we can do.
    return None
else: # check for each coin, keep track of the minimun configuration, then return it.
    min_length = None
    min_configuration = None
    for coin in coins:
        results = get_min_coin_configuration(sum = sum - coin, coins = coins)
        if results != None:
            if min_length == None or (1 + len(results)) < len(min_configuration):
                min_configuration = [coin] + results
                min_length = len(min_configuration)
    return min_configuration
"
Python lookup list of values in list of dictionaries,"#The results class
class results:
    def __init__(self, results):
        #textIDDict is a generated dict to speed up the lookup
        self.textIDDict={row[""TextID""]: row[""RecID""] for row in results}
        self.results=results

    def lookup(self, textID):
        try:
            return self.textIDDict[textID]
        except KeyError:
            return ""---""

#Two functions to create the (random) data:        
def randStr():
    return str(int(random.random()*60000))

def genRes(n):
    return results([{""TextID"":randStr(), ""RecID"": int(random.random()*10000)} for i in range(n)])


#Test it:
results1=genRes(60000)
results2=genRes(15000)

cursor=[[randStr(), randStr()] for i in range(50000)]

for row in cursor:
    row.append(results1.lookup(row[0]))
    row.append(results2.lookup(row[0]))
    print row
"
"Store value of ""if any("" search","print words
"
How to print dict as a pandas.Series,"import pandas as pd
class MyDict(dict):
    def __str__(self):
        return str(pd.Series(self))

dct = {'cheese':'stilton', 'swallow':'african', 'ride':'coconuts'}
mydct = MyDict(dct)
print(mydct)
"
return label text when clicked,"import Tkinter
import os

class simpleapp_tk(Tkinter.Tk):
    def __init__(self,parent):
        Tkinter.Tk.__init__(self,parent)
        self.parent = parent
        self.initialize()
        self.Result =[]
        #self.minsize(8000,300)
        self.geometry(""800x300"")

    def initialize(self):
        self.grid()

        self.entryVariable = Tkinter.StringVar()
        self.entry = Tkinter.Entry(self,textvariable=self.entryVariable)
        self.entry.grid(column=0,row=0,sticky='EW')
        self.entry.bind(""<Return>"", self.OnPressEnter)
        self.entryVariable.set(u"""")

        self.labelVars = []
        for j in range (1,30):
            labelVar = Tkinter.StringVar()
            labelVar.set('')
            self.labelVars.append(labelVar)
            label = Tkinter.Label(self,textvariable=labelVar,
                              anchor=""w"",fg=""black"",bg=""white"")

            label.bind(""<1>"", lambda event, text=""some text"": \
                          self.click_link(event, text))

            label.grid(column=0,row=j,columnspan=2,sticky='EW')

        self.grid_columnconfigure(0,weight=1)
        self.resizable(True,False)
        self.update()
        self.geometry(self.geometry())
        self.entry.focus_set()
        self.entry.selection_range(0, Tkinter.END)

    def OnPressEnter(self,event):
        #Result is a list
        self.Result = self.entryVariable.get()
        self.Result = list(reversed(self.Result))
        for i in range (0,len( self.Result)):
            print ""result"",i,"":"", self.Result[i]
            self.labelVars[i].set(self.Result[i])
        self.entry.focus_set()
        self.entry.selection_range(0, Tkinter.END)

    def click_link(self, event, text):
        print ""you clicked '%s'"" % event.widget[""text""]

if __name__ == ""__main__"":
     app = simpleapp_tk(None)
     app.title('my application')
     app.mainloop()
"
How can I perform an action if a users input is the name of a file in a directory. Python,"available_files = os.listdir('./DSC_Saves/')

for index, file_name in enumerate(available_files, start=1):
    print('{:2} {}'.format(index, file_name))

while True:
    try:
        user_input = int(input('Please select a file number: '))

        if 1 <= user_input <= len(available_files):
            selected_file = available_files[user_input-1]
            break
    except ValueError as e:
        pass

print(""You have selected '{}'"".format(selected_file))
"
einsum and distance calculations,"d_all = np.sqrt(np.einsum('ijk->ij',(origs[:,None,:] - dests)**2))
"
Pythonic way of checking if a condition holds for any element of a list,"if True in (t < 0 for t in x):
"
define numerical evaluation of a derivative of a sympy function,"class B_spline_sym(Function):
    _imp_ = staticmethod(B_spline)

    def fdiff(self, argindex=1):
        return B_der_spline_sym(self.args[0])

class B_der_spline_sym(Function):
    _imp_ = staticmethod(B_der_spline)

def A(r, B):
    return r**2*B(r)
"
Remove namedtuple from list based on value,"def remove(self, id=None, value=None):
    for elem in self:
        if (id is not None and elem.id == id or
                value is not None and elem.value == value):
            super(Orders, self).remove(elem)
            break
"
Sending multiple .CSV files to .ZIP without storing to disk in Python,"import io
import zipfile

zipped_file = io.BytesIO()
with zipfile.ZipFile(zipped_file, 'w') as f:
    for i, file in enumerate(files):
        f.writestr(""{}.csv"".format(i), file.getvalue())

zipped_file.seek(0)
"
sorting list of cards,">>> card_candidates = ['9D', '9S', '3S', '0D']
>>> card_order = ['2', '3', '4', '5', '6', '7', '8', '9', '0', 'J', 'Q', 'K', 'A']
>>> sort_map = {c: i for i, c in enumerate(card_order)}
>>> sorted(card_candidates, key=lambda card: (sort_map[card[0]], card[1]))
['3S', '9D', '9S', '0D']
>>> sorted(['9D', '9S', '9C', '9H'], key=lambda card: (sort_map[card[0]], card[1]))
['9C', '9D', '9H', '9S']
"
Tkinter scale in realtime,"from Tkinter import *

def show_values(value=None):
    print s1.get(), s2.get()

root=Tk()
s1 = Scale(root, from_=0, to=42, tickinterval=8, command=show_values)
#                                                ^^^^^^^^^^^^^^^^^^^
s1.set(19)
s1.pack()
s2 = Scale(root, from_=0, to=200, length=600, tickinterval=10, orient=HORIZONTAL,
           command=show_values) # <---
s2.set(23)
s2.pack()
Button(root, text='Show', command=show_values).pack()
root.mainloop()
"
Append itertools.product() results to variable in Python,"['{}{}{}'.format(e[:6], i, j) for e in lst for i, j in itertools.product(string.digits, string.digits)]
"
pyplot: loglog() with base e,"import numpy as np

import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

x = np.linspace(1, 4, 1000)

y = x**3

fig, ax = plt.subplots()

ax.loglog(x,y, basex=np.e, basey=np.e)

def ticks(y, pos):
    return r'$e^{:.0f}$'.format(np.log(y))

ax.xaxis.set_major_formatter(mtick.FuncFormatter(ticks))
ax.yaxis.set_major_formatter(mtick.FuncFormatter(ticks))

plt.show()
"
Selection without replacement - by mutating the list,"def select_sample(pop, size):
    x = pop[-size:]
    pop[-size:] = []
    return x
"
Split a paragraph into lines,"pqr_version = ' '.join(string[string.index('pqr')+3:string.index('pqr')+5]) #This will give 201 403061815
"
Indexes of fixed size sub-matrices of numpy array,"base = np.arange(size) # Just the base set of indexes
row = 1                # Which block you want
col = 0                
block = a[base[:, np.newaxis] + row * size, base + col * size]
"
How to check if any item in a list occurs in another list?,"len(set(listA).intersection(listB)) > 0
"
Python debugging: get filename and line number from which a function is called?,"from inspect import getframeinfo, stack

def debuginfo(message):
    caller = getframeinfo(stack()[1][0])
    print ""%s:%d - %s"" % (caller.filename, caller.lineno, message)

def grr(arg):
    debuginfo(arg)

grr(""aargh"")
"
Python: Functionally Merging Two Iterators Where One is Recursive,"from functools import reduce
"
pd.apply(pd.Series.interpolate) with more arguments,"df.apply(pd.Series.interpolate, method='nearest')
"
How to exit for loop once valid file name is provided and give 3 chances for correct input,"import os

file_path = """"
for n in [1,2,3]:
    user_inp = raw_input('Please provide the filename: ')
    if os.path.isfile(user_inp):
        file_path = user_inp
        break 
    print('Invalid file name, try again please')


if file_path:
    # Write ypur code.
    print ""Processing file Name:"", file_path
else:
    print ""User not enters correct file name.""
"
transform scipy sparse csr to pandas?,"A = csr_matrix([[1, 0, 2], [0, 3, 0]])

  (0, 0)    1
  (0, 2)    2
  (1, 1)    3

<class 'scipy.sparse.csr.csr_matrix'>

pd.DataFrame(A.todense())

   0  1  2
0  1  0  2
1  0  3  0

<class 'pandas.core.frame.DataFrame'>
RangeIndex: 2 entries, 0 to 1
Data columns (total 3 columns):
0    2 non-null int64
1    2 non-null int64
2    2 non-null int64
"
getting the data between some time interval,"import datetime as dt

t_start = dt.time(19,0,0)
t_end = dt.time(19,0,3)
with open('search.txt') as f:
    for line in f:
        fields = [ x.strip() for x in line.split(',') ]
        timestamp = dt.datetime.strptime(fields[0], ""%H:%M:%S"").time()

        if t_start < timestamp < t_end:  # use ""<="" if you want to search with boundaries included
            print fields[1],
"
"What are ""named tuples"" in Python?","pt1 = (1.0, 5.0)
pt2 = (2.5, 1.5)

from math import sqrt
line_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)
"
Running Jar files from Python,"def run_command(command):
    p = subprocess.Popen(command,
                     stdout=subprocess.PIPE,
                     stderr=subprocess.STDOUT)
    return iter(p.stdout.readline, b'')
"
Python script to substitute text in HTML file with user-supplied values,"from bs4 import BeautifulSoup, Comment

data = """"""
<!-- Special_ID -->
<p> stuff1 </p>
<p> stuff2 </p>
<!-- /Special_ID -->
""""""
soup = BeautifulSoup(data, ""html.parser"")

# find ""Special_ID"" comment
special_id = soup.find(text=lambda text: isinstance(text, Comment) and ""Special_ID"" in text)

# find all sibling ""p"" elements
for p in special_id.find_next_siblings(""p""):
    p.extract()

# create new ""p"" element
tag = soup.new_tag(""p"")
tag.string = ""test""

# insert the new ""p"" element after the comment
special_id.insert_after(tag)

print(soup.prettify())
"
Generating class dynamically from a list of values,">>> class X(object):
...     def sum(self, a, b):
...         print self
...         return a+b
...
>>> types = [type(x['name'], (object,), {'title': x['title'], 'sum': X.__dict__['sum']}) for x in d]
>>> types[0]().sum(1,2)
<__main__.Person object at 0x800f5fad0>
3
"
Fastest method in merging of the two: dicts vs lists,"for key, value in smaller_dict.iteritems():
    try:
        big_dict[key].update(value)
    except KeyError:
        big_dict[key] = dict(value)
"
"Python equivalent of the R operator ""%in%""","In [13]: s = pd.Series(np.arange(5),dtype=np.float32)

In [14]: s.isin([2, 4])
Out[14]: 
0    False
1    False
2     True
3    False
4     True
dtype: bool
"
Python: type checking of complex returned values,"validate_type(3.4, float)
Out[1]: True
"
creating dictionary from space separated key=value string in python,">>> import re
>>> dict(re.findall(r'(\S+)=("".*?""|\S+)', s))
{'key3': '""SrtingWithoutSpace""', 'key2': '""string with space""', 'key1': '1234'}
"
swap one element list to int,"[next(d.iterkeys()) for d in a]
"
"Return all lines following a matched date and time up, but not including the next date and time?","import re

s = '''Aug 23, 2011 10:31:35 AM This is the start of the text.
      This is more Text.
This is another line
This is another line
      This is more.
Aug 23, 2011 10:41:00 AM This is the next in the series.
This is another line
      This is more Text.
This is another line
      This is another line
      This is more.
Aug 24, 2011 10:41:00 AM This is the next in the series.
This is another line
      This is more Text.
This is another line
      This is another line
      This is more. '''


months = '(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)'
ch = '%s \d\d?, \d{4} \d\d:\d\d:\d\d (?:AM|am|PM|pm)' % months


regx = re.compile('%s.*?(?=%s|\Z)' % (ch,ch), re.DOTALL)

for x in regx.findall(s):
    print repr(x)
    print
"
matplotlib: disregard outliers when plotting,"import numpy as np
import matplotlib.pyplot as plt

# The function above... In my case it's in a local utilities module
from sci_utilities import is_outlier

# Generate some data
x = np.random.random(100)

# Append a few ""bad"" points
x = np.r_[x, -3, -10, 100]

# Keep only the ""good"" points
# ""~"" operates as a logical not operator on boolean numpy arrays
filtered = x[~is_outlier(x)]

# Plot the results
fig, (ax1, ax2) = plt.subplots(nrows=2)

ax1.hist(x)
ax1.set_title('Original')

ax2.hist(filtered)
ax2.set_title('Without Outliers')

plt.show()
"
How to import a user module which has the same name with a system module?,"import imp

def user_import(name, path):
    mod_file, mod_path, mod_desc = imp.find_module(name, [path])
    return imp.load_module(name, mod_file, mod_path, mod_desc)

# load the real 'string' module
import string
print string.digits

# load the user 'string' module which lives under the path './foo'
mod = user_import('string', './foo')
print mod.digits
"
downloading a file in python and cancel,"import urllib
import threading

class Downloader:

    def __init__(self):
        self.stop_down = False
        self.thread = None

    def download(self, url, destination):
        self.thread = threading.Thread(target=self.__down, args=(url, destination))
        self.thread.start()

    def __down(self, url, dest):
        _continue = True
        handler = urllib.urlopen(url)
        self.fp = open(dest, ""w"")
        while not self.stop_down and _continue:
            data = handler.read(4096)
            self.fp.write(data)
            _continue = data
        handler.close()
        self.fp.close()

    def cancel(self):
        self.stop_down = True
"
dictionary keys in JSON output is overwritten: how to index each uniquely? how to make sure the values format not changed?,"import re
import collections, json

status = """"""
Object train {
Name electric_train;
From Seattle;
To Tacoma;
Distance 100;
Configuration train_travel;
}

Object car {
Name honda;
From Richland;
To Seattle;
Distance 160;
Configuration road_travel;
}


Object bus {
Name greyhound;
From pasco;
To richland;
Distance 15;
Configuration road_travel;
}

Object aeroplane {
Name united;
From miami_airport;
To pasco;
Distance 1000;
Configuration air_travel;
}


Object train {
Name gas_train;
From beach;
To miami_airport;
Distance 30;
Configuration train_travel;
}

Object car {
Name toyota;
From apartment;
To beach;
Distance 14;
Configuration road_travel;
}
""""""

def Status2dict(status):
    # Keeps track of how many times each Object has been seen already
    keys_count = {}

    result = {}
    current = {}
    lines = status.splitlines()

    for line in lines:
        line = line.strip()
        if not line: 
            continue
        mo = re.match(r'Object (\w+) {', line)
        if mo:
            curk = mo.group(1)

            # If Object has not been seen before, start tracking it
            if not curk in keys_count:
                keys_count[curk] = 1

            # Get the current counter value, which we will append
            # to the Object name (e.g. car_<counter>)
            curk_counter = str(keys_count[curk])

            # Increment our running count for this Object
            keys_count[curk] += 1

            # Rewrite the Object name to have the counter now
            curk = curk + '_' + curk_counter

            # Use OD to maintain order of the fields (As requested)
            current = {curk: collections.OrderedDict()}
        elif re.match('}', line):
            result.update(current)
            current = {}
        else:
            mo = re.match(r'(\w+)\s+([\w\s]+);', line)
            if not mo:
                raise ValueError('cannot match {!r}'.format(line))
            current[curk][mo.group(1)] = mo.group(2)
    if current:
        result.update(current)
    return result

print(json.dumps(Status2dict(status), indent=2))
"
python 3: Adding .csv column sums in to dictionaries with header keys,"def sumColumns1(columnfile):
    import csv
    with open(columnfile) as csvfile:
        r = csv.reader(csvfile)
        names = next(r)
        Int = lambda x: 0 if x=='' else int(x)
        sums  = reduce(lambda x,y: [ Int(a)+Int(b) for a,b in zip(x,y) ], r)
        return dict(zip(names,sums))
"
Python: Getting all the items out of a `threading.local`,"for t in threading.enumerate():
    for item in t.__dict__:
       if isinstance(item, tuple):  # Each thread's `local` state is kept in a tuple stored in its __dict__
           print(""Thread's local is %s"" % t.__dict__[item])
"
Python filter defaultdict,"reduced_d = {k: v for k, v in myDefaultDict.items() if len(v) > 1}
"
Python: Check if a /dev/disk device exists,"import stat
import os.stat

def disk_exists(path):
     try:
             return stat.S_ISBLK(os.stat(path).st_mode)
     except:
             return False
"
python map array of dictionaries to dictionary?,">>> li = [
...   { 'country': 'UK', 'city': 'Manchester' },
...   { 'country': 'UK', 'city': 'Liverpool' },
...   { 'country': 'France', 'city': 'Paris' }
... ]

>>> {d['city']: d['country'] for d in li}
{'Paris': 'France', 'Liverpool': 'UK', 'Manchester': 'UK'}
"
How to restore the index of a QComboBox delegate in a QTableView?,"def createEditor(self, parent, option, index):
    editor = QComboBox(parent)
    li = []
    li.append(""closed"")
    li.append(""expired"")
    li.append(""cancelled"")
    li.append(""waiting"")
    editor.addItems(li)
    return editor
"
How to create a new nested list from a function and an existing nested list in python?,"def apply_recursive(ob, func):
    if not isinstance(ob, list):
        return func(ob)
    return [apply_recursive(elem, func) for elem in ob]
"
Pip regular expression search,"pip search django | grep -P ""^django-(?=[-\w]*?admin)[-\w]+"" | sort
"
Count length of string without vowels,">>> a = 'abcderui'
>>> len(a.translate(None, 'aeiou'))
4
"
What is the best way to translate this recursive python method into Java?,"def foo(x):
   for i in xrange(10):
      yield x * i
...
for x in foo(5):
   print(x)
"
Matplotlib continuing line into infinity,"import matplotlib.pyplot as plt

plt.plot([0,10], [0,10])
plt.axis()
"
Python efficient way of comparing 2 csv files,"f1_name = ""text1.csv""                                          
f2_name = ""text2.csv""                                          
f1 = open(f1_name,'r').readlines()                             
f2 = open(f2_name,'r').readlines()                             

count1 = 0                                                     
for line in f1:                                                
    count1+=1                                                  
    if line != ""\n"" and line in f2:                            
        print ""Line{0} in {1} found in Line{2} in {3} ({4})"".format( 
            str(count1),                                       
            f1_name,                                           
            str(1+f2.index(line)),                             
            f2_name,
            line.strip())
f1.close()
f2.close()
"
Merge pandas DataFrames based on irregular time intervals,"import pandas as pd
import numpy as np

np.random.seed(1)
data = pd.DataFrame({'time':np.sort(np.random.uniform(0,100,size=50)),
                     'value':np.random.uniform(-1,1,size=50)})

intervals = pd.DataFrame(
    {'interval_id':np.arange(9),
     'start_time':np.random.uniform(0,5,size=9) + np.arange(0,90,10),    
     'end_time':np.random.uniform(5,10,size=9) + np.arange(0,90,10)})

def using_loop():
    data['interval_id'] = np.nan
    for index, ser in intervals.iterrows():
        in_interval = (data['time'] >= ser['start_time']) & \
                      (data['time'] <= ser['end_time'])
        data['interval_id'][in_interval] = ser['interval_id']

    result = data.merge(intervals, how='outer').sort('time').reset_index(drop=True)
    return result

def using_searchsorted():
    start_idx = np.searchsorted(intervals['start_time'].values, data['time'].values)-1
    end_idx = np.searchsorted(intervals['end_time'].values, data['time'].values)
    mask = (start_idx == end_idx)
    result = data.copy()
    result['interval_id'] = result['start_time'] = result['end_time'] = np.nan
    result['interval_id'][mask] = start_idx
    result.ix[mask, 'start_time'] = intervals['start_time'][start_idx[mask]].values
    result.ix[mask, 'end_time'] = intervals['end_time'][end_idx[mask]].values
    return result
"
Trying to count words in a file using Python,"fopen = open('infile.txt', 'r+')
fileinput = fopen.read()

for line in fileinput.splitlines():
    for word in line.split():
        print(word)

fopen.close()
"
Extracting hashtags using Tweepy to go into MySQLdb,"#I presume your tweet is saved in the variable text
txt = []
if ""'"" in text:
    for item in text:
        if not item==""'"":
            txt.append(item)
        else:
            txt.append(""''"")
    text = ''.join(txt)
"
Exporting a non-ideal list format to Excel,"import csv
large = [('5501', [(4, 5, 8), (6, -4, -6)]), ('2222', [(2, -4, 5), (1, 15, -4)])]

with open(""out1.csv"", ""wb"") as fp: # open the file, call it fp, and autoclose it
    writer = csv.writer(fp, delimiter="","")
    for entry in large:
        writer.writerow([entry[0]]) # one-element list
        for line in entry[1]: # loop over each tuple in the second element
            writer.writerow(line)
        writer.writerow([]) # write an empty row
"
Using BeautifulSoup get the text from the next span where the previous contained,"In [22]: import re

In [23]: from bs4 import BeautifulSoup

In [24]: soup = BeautifulSoup('''<span class=""inline_label"">
   ....:    ISCED:
   ....:   </span>
   ....:   <span class=""inline_value"">
   ....:    0410: Business &amp; Admin not defined
   ....:   </span>''', 'lxml')
   ....:   

In [25]: for el in soup(text=re.compile(r'ISCED')):
   ....:     print(el.parent.find_next_sibling().get_text())
   ....:     

   0410: Business & Admin not defined
"
Python: Adding multiple values to a dictionary key,"import csv
from collections import defaultdict

with open('input.csv') as csv_input:
    read_csv = csv.reader(csv_input)
    values = defaultdict(lambda : [0,0])
    for row in read_csv:
        values[row[0]][0] += float(row[1]) + float(row[2])
        values[row[0]][1] += float(row[2])
print values
"
what does [[...]] mean in python?,"a = []
a.append(a)
print(a)
"
Finding letters in a string,">>> words = s.lower().split()
>>> words
['yes!', 'these', 'are', 'words.']
>>> words.sort()
>>> words
['are', 'these', 'words.', 'yes!']
>>>
"
A Text Table Writer/Printer for Python,"
>>> import prettytable
>>> x = prettytable.PrettyTable([""Length"", ""Time""])
>>> x.add_row([0, 0.00000])
>>> x.add_row([250, 0.00600]) 
>>> x.add_row([500, 0.02100]) 
>>> x.add_row([750, 0.04999])    
>>> print x
+--------+---------+
| Length |   Time  |
+--------+---------+
|   0    |   0.0   |
|  250   |  0.006  |
|  500   |  0.021  |
|  750   | 0.04999 |
+--------+---------+
"
How to remove square bracket from pandas dataframe,df['value'] = df['value'].str.get(0)
grouping an unknown number of arguments with argparse,"import argparse

class DictAction(argparse.Action):
    def __init__(self, *args, **kwargs):
        super(DictAction, self).__init__(*args, **kwargs)
        self.nargs = '*'

    def __call__(self, parser, namespace, values, option_string=None):
        # The default value is often set to `None` rather than an empty list.
        current_arg_vals = getattr(namespace, self.dest, []) or []
        setattr(namespace, self.dest, current_arg_vals)
        arg_vals = getattr(namespace, self.dest)
        arg_vals.append(dict(v.split(':') for v in values))

parser = argparse.ArgumentParser()
parser.add_argument('--group', action=DictAction)

print parser.parse_args()
"
Implementing 2D slicing in Python,"class Matrix(object):
    def __init__(self):
        self.m = [[row + col/10. for col in range(4)] for row in range(4)]
    def __getitem__(self, idx):
        if isinstance(idx, (numbers.Integral, slice)):
            idx = (idx, slice(None, None, None))
        elif len(idx) == 1:
            idx = (idx[0], slice(None, None, None))
        rowidx, colidx = idx
        rowslice, colslice = True, True
        if isinstance(rowidx, numbers.Integral):
            rowidx, rowslice = slice(rowidx, rowidx+1), False
        if isinstance(colidx, numbers.Integral):
            colidx, colslice = slice(colidx, colidx+1), False
        ret = self.m[rowidx][colidx]
        if not colslice:
            ret = [row[0] for row in ret]
        if not rowslice:
            ret = ret[0]
        return ret
"
Run python function multiple times with different arguments,">>> def runner(f, callable):
...   def inner(*args, **kwds):
...     for i in xrange(1000):
...       pos = list(callable())
...       pos.extend(args)
...       f(*pos, **kwds)
...   return inner
... 
>>> def f(a, b, c, d = 3):
...   print a, b, c, d
... 
>>> runner(f, lambda: (random.randint(1,1000),))(3, 5, d = 7)
771 3 5 7
907 3 5 7
265 3 5 7
"
Adding a value to a list of lists,"[[item + 1 for item in list] for list in list_of_lists]
"
Sympy custom function,"import sympy

def sech(x):
    return sympy.cosh(x)**(-1)
# sympy.sech = sech

def csch(x):
    return sympy.sinh(x)**(-1)
# sympy.csch = csch

arccos = sympy.acos
"
Checking if function was not called for x amount of time,"def myfun():
  myfun.last_called = datetime.now()
  # … do things
"
HTML parsing with lxml - how to keep empty content in resulting list?,"data = [p.text_content() for p in tree.xpath('//p')]
"
Can't plot value counts for pie chart,"df[variables].apply(pd.value_counts).plot(kind='pie', layout=(n_rows,n_cols), subplots=True)
"
Python: optimizing pairwise overlaps between intervals,"for i, c1 in enumerate(cList[:-1]): 
    for c2 in cList[i + 1:]:
        o = overlap(c1,c2)
        if not o is None:
            print ""left: %s, right: %s, length: %s"" % o
"
extract only a few lines from output,"data = {}
for row in soup.select('#content #table .row'):
    key, value = (cell.text for cell in row.select('.cell'))
    data[key.rstrip(' :')] = value.strip()
"
Python and Floats - Print only the Whole Number,"print ""{:g}"".format(1.0)
"
String splitting in Python,s.split('s')
Creating Frames in tkinter,"import tkinter as tk


class MainApp(tk.Frame):

    def __init__(self, parent):

        tk.Frame.__init__(self, parent, bg=""blue"")
        self.parent = parent

        button = tk.Button(self, text=""a button"")
        button.pack()


root = tk.Tk()
root.geometry(""200x200+300+300"")
root.config(background=""yellow"")
app = MainApp(root)
app.pack(fill=""both"", expand=True)
root.mainloop()
"
Count occurrences of each permutation of bits in lists from CSV,"from collections import Counter

count = Counter(map(tuple, my_content))
"
BeautifulSoup find function unusual behaviour,"print page.find('div', class_='productDescriptionWrapper').text.strip()
"
How to get 3 float numbers randomly with the step of 0.5 between 5.0 and 9.0 using Numpy?,"In [135]: values = np.arange(5, 9, 0.5)

In [136]: np.random.choice(values, size=3)
Out[136]: array([ 6.5,  5. ,  6. ])

In [137]: np.random.choice(values, size=5)
Out[137]: array([ 6. ,  8. ,  6. ,  7.5,  8. ])
"
How can I use named arguments in a decorator?,"from functools import wraps

def intercept(target,**trigger):
    def decorator(func):
        names = getattr(func,'_names',None)
        if names is None:
            code = func.func_code
            names = code.co_varnames[:code.co_argcount]
        @wraps(func)
        def decorated(*args,**kwargs):
            all_args = kwargs.copy()
            for n,v in zip(names,args):
                all_args[n] = v
            for k,v in trigger.iteritems():
                if k in all_args and all_args[k] != v:
                    break
            else:
                return target(all_args)
            return func(*args,**kwargs)
        decorated._names = names
        return decorated
    return decorator
"
How to convert a unformatted fortran file(modflow output ) to numpy array,"#!/usr/bin/python

import struct
import numpy as np

infile = open(""lake_example.hds"",""rb"")

blockdata = []

while infile.read(1):
    infile.seek(-1,1)
    data = infile.read(56)
    n = struct.unpack('<3i4', data[0:12])
#    print n[0], n[1], n[2]
    n = struct.unpack('<2f4', data[12:20])
#    print n[0], n[1]
#    print data[20:36]
    n = struct.unpack('<5i4', data[36:56])
#    print n[0], n[1], n[2], n[3], n[4]
    ncol = n[0]
    nrow = n[1]
    a = np.fromfile(infile,dtype='f4',count=ncol*nrow).reshape((ncol,nrow))
    blockdata.append(a)
    data = infile.read(4)
    n = struct.unpack('<i4', data)
#    print n[0]

for block in blockdata:
    print block
"
"How to make letters in a string lowercas, Python","a = 'aBcDeFg'
print a.lower() # abcdefg
"
Decoding HTML character entities in JSON,"meta = response.xpath('//meta[@id=""_bootstrap-neighborhood_card""]')
content = meta.xpath('@content').extract_first()
data = json.loads(content)
"
Python 3: Removing an empty tuple from a list of tuples,"[t for t in myList if t != ()]
"
How to count number of words that start with a string,"with open('mediumWordList.txt') as f:
   sum(1 for line in f for word in line.split() if word.startswith('co'))
"
Passing plots out of a class,"
# plotfile.py
import matplotlib.pyplot as plt

class Plotter(object):
    def __init__(self, xval=None, yval=None):
        self.xval = xval
        self.yval = yval

    def plotthing(self):
        f = plt.figure()
        sp = f.add_subplot(111)
        sp.plot(self.xval, self.yval, 'o-')
        return f
"
Initialize/Create/Populate a Dict of a Dict of a Dict in Python,"import csv
genes = {}
with open('mydata.txt', 'rb') as f:
    for row in csv.DictReader(f, delimiter='\t'):
        gene = genes.setdefault(row['geneid'], {})
        transcript = gene.setdefault(row['tx_id'], {})
        transcript['colname1'] = row['colname1']
        transcript['colname2'] = row['colname2']
"
Pythonic alternative to (nested) dictionaries with the same keys?,"import pandas as pd
people = pd.DataFrame(people_dict)
print people['Charles Lindberg']['address']
"
Regex divide with upper-case,"#! /usr/bin/env python

import re
from collections import deque

pattern = r'([A-Z]{2,}(?=[A-Z]|$)|[A-Z](?=[a-z]|$))'
chunks = deque(re.split(pattern, 'HDMWhoSomeMONKEYThingXYZ'))

result = []
while len(chunks):
  buf = chunks.popleft()
  if len(buf) == 0:
    continue
  if re.match(r'^[A-Z]$', buf) and len(chunks):
    buf += chunks.popleft()
  result.append(buf)

print ' '.join(result)
"
How often are objects copied when passing across PyQt signal/slot connections?,"class Object2(QObject):

    def __init__(self):
        super().__init__()

    @pyqtSlot(object)
    def slot(self, data):
        print(""Received data %s in thread %s"" % (data, QThread.currentThread()))
        while len(data) < 10:
            time.sleep(1)
            print(""Current data is %s"" % data)


class Object1(QObject):

    def __init__(self):
        super().__init__()

    sig = pyqtSignal(object)

    @pyqtSlot()
    def emit_in_thread(self):
        self.data = [1]
        print(""Emitting data %s in thread %s"" % (self.data, QThread.currentThread()))
        self.sig.emit(self.data)
        while len(self.data) < 10:
            time.sleep(1)
            self.data += [1]
            print(""Modified data to %s"" % self.data)

# App
q_app = QApplication(sys.argv)

# Setup
thread = QThread()
obj1 = Object1()
obj1.moveToThread(thread)
thread.start()
obj2 = Object2()
obj1.sig.connect(obj2.slot, type=Qt.QueuedConnection)

# Emit soon
QTimer.singleShot(200, obj1.emit_in_thread)

# Run event loop
sys.exit(q_app.exec_())
"
Curious behaviour of print_function in __future__ module on Python 3,"msg = 'Enter the base path of the images: '
try:
    # python 2
    path = raw_input(msg)
except NameError:
    # python 3
    path = input(msg)
"
Filling empty list with zero vector using numpy,"f0 = [0,1,2]
f1 = []
f2 = [4,5,6]

features = [f0, f1, f2]

def get_nonempty_len(features):
    """"""
    returns the length of the first non-empty element
        of features.     
    """"""
    for f in features:
        if len(f) > 0:
            return len(f)
    return 0

def generate_matrix(features):
    rows = len(features)
    cols = get_nonempty_len(features)
    m = np.zeros((rows, cols))
    for i, f in enumerate(features):
        m[i,:len(f)]=f
    return m

print(generate_matrix(features))
"
How can I capture dependancies used by a subset of code in a python source file?,"for base in (obj.__class__,) + obj.__class__.__bases__:
  print ""obj depends on module %s"" % base.__module__
"
Is there a way to use PhantomJS in Python?,"driver = webdriver.PhantomJS() # or add to your PATH
"
Finding if there are distinct elements in a python dictionary,"def find_different(l):
    mask = map(lambda x: x[x.keys()[0]], l)
    for i in xrange(0, len(l)):
        if mask[i] != mask[(i+1)%len(l)] and mask[i] != mask[(i+2)%len(l)]:
            return l[i].keys()[0]

>>> mylist = [{'a':1},{'b':1},{'c':2},{'d':1}]
>>> find_different(mylist)
'c'
"
find the maximum occurrence of a string in value for all keys in a dictionary,"from collections import Counter
from itertools import chain

def di(d):
    counts = Counter(chain.from_iterable(
        [v] if isinstance(v, str) else v for v in d.itervalues()))
    return counts.most_common(1)[0]
"
Replace multiple values in dictionary in Python 3,"output[0]['query'].format(**fill)
#'SELECT DISTINCT column FROM $test_schema.$test_table'
"
variables as decorator arguments,"state = None
def with_closure(f):
     def helper(*args, **kwargs):
        # state is in scope for this function
        print ""Current state is: {}."".format(state)
        return f(*args, **kwargs)
     return helper

@with_closure
def foo():
    return ""something""
"
Reformatting data imported from an excel file in pandas,"sheet1 = pd.Series([3,2,1], index=['Bread', 'Milk', 'Eggs'], name='Values_sheet1')
sheet2 = pd.Series([6,2,11], index=['Bread', 'Cheese', 'Salad'], name='Values_sheet2')

# concatenate the two series and fill in the missing data with zeros
result = pd.concat([sheet1,sheet2], axis=1).fillna(0)

print result
"
Select pandas frame rows based on two columns' values,"result = pd.merge(samples, df, how='inner')
"
Loading CSV data using Pandas,"import pandas as pd
import io

temp=u'''Email Open Date/Time,""Total Opens""
3/25/2016 6:00:35 AM,""1""
3/25/2016 6:00:35 AM,""1""
3/25/2016 6:00:46 AM,""1""
3/25/2016 6:00:46 AM,""1""
3/25/2016 6:00:51 AM,""1""
3/25/2016 6:00:52 AM,""1""
Total,""796""'''
#after testing replace io.StringIO(temp) to filename
df = pd.read_csv(io.StringIO(temp),
                 skipfooter=1, #skip last row
                 engine='python', #remove warning
                 skiprows=[0,1,2], #remove first 3 rows
                 header=None) #no header, set default 0,1,... 
print (df)

                      0  1
0  3/25/2016 6:00:46 AM  1
1  3/25/2016 6:00:46 AM  1
2  3/25/2016 6:00:51 AM  1
3  3/25/2016 6:00:52 AM  1
"
"How to get row, column indices of items in Pandas dataframe","In [28]: list(df.stack().index)
Out[28]: [(0L, '2'), (1L, '0'), (2L, '1')]
"
Counting if the word entered is a capital letter in a loop in Python 3,"capitalLetters = 0
for letter in word:
    if letter.isupper():
        capitalLetters += 1
"
"in python, how to match Strings based on Regular Expression and get the non-matching parts as a list?",">>> s2 = 'abcde2011-09-30fghij2012-09-31.log'
>>> re.split('(\d{4}-\d{2}-\d{2})', s2)
('abcde', '2011-09-30', 'fghij', '2012-09-31', '.log')
"
Splitting a list of tuples by 2nd element - python,"numbered = {}
for i in tup:
    numbered.setdefault(i[1], []).append(i)
"
Acquiring the Minimum array out of Multiple Arrays by order in Python,"sorted(a.tolist())[0]
"
Read specific columns in csv using python,"def read_csv(file, columns, type_name=""Row""):
  try:
    row_type = namedtuple(type_name, columns)
  except ValueError:
    row_type = tuple
  rows = iter(csv.reader(file))
  header = rows.next()
  mapping = [header.index(x) for x in columns]
  for row in rows:
    row = row_type(*[row[i] for i in mapping])
    yield row
"
Pygame - Run event for 3 seconds only once,"dt = clock.tick() # only call once per iteration
if attack_blocked:
    attack_block_count += dt
    if attack_block_count >= 3000: # dt is in ms
        attack_blocked = False
"
Writing multi-line strings into cells using openpyxl,"from xlsxwriter.workbook import Workbook

# Create an new Excel file and add a worksheet.
workbook = Workbook('wrap_text2.xlsx')
worksheet = workbook.add_worksheet()

# Widen the first column to make the text clearer.
worksheet.set_column('A:A', 20)

# Add a cell format with text wrap on.
cell_format = workbook.add_format({'text_wrap': True})

# Write a wrapped string to a cell.
worksheet.write('A1', ""Line 1\nLine 2\nLine 3"", cell_format)

workbook.close()
"
How to only output turning points of a path for maze,"new_path = [self.path[0]] #keep the first element since it will always be needed
for node in range(1,len(self.path)-1):
    direction1 = (self.path[node-1][0] - self.path[node][0], self.path[node-1][1] - self.path[node][1])
    direction2 = (self.path[node][0] - self.path[node+1][0], self.path[node][1] - self.path[node+1][1])
    if direction1 != direction2:
        new_path.append(self.path[node])
new_path.append(self.path[-1]) #add in the last element
self.path = new_path
"
optional python arguments without dashes but with additional parameters?,"import argparse
parser = argparse.ArgumentParser(prog='script.py')
sp = parser.add_subparsers(dest='cmd')
for cmd in ['START', 'STOP', 'STATUS']:
    sp.add_parser(cmd)
for cmd in ['MOVEABS', 'MOVEREL']:
    spp = sp.add_parser(cmd)
    spp.add_argument('x', type=float)
    spp.add_argument('y', type=float)
parser.print_help()
args = parser.parse_args()
print(args)
"
Python libraries to calculate human readable filesize from bytes?,"suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB']
def humansize(nbytes):
    if nbytes == 0: return '0 B'
    i = 0
    while nbytes >= 1024 and i < len(suffixes)-1:
        nbytes /= 1024.
        i += 1
    f = ('%.2f' % nbytes).rstrip('0').rstrip('.')
    return '%s %s' % (f, suffixes[i])
"
Using itertools.product and want to seed a value,"> cat prod.py 

class product(object):

    def __init__(self, *args, **kw):
        if len(kw) > 1:
            raise TypeError(""product() takes at most 1 argument (%d given)"" %
                             len(kw))
        self.repeat = kw.get('repeat', 1)
        self.gears = [x for x in args] * self.repeat
        self.num_gears = len(self.gears)
        self.reset()

    def reset(self):
        # initialization of indicies to loop over
        self.indicies = [(0, len(self.gears[x]))
                         for x in range(0, self.num_gears)]
        self.cont = True
        self.state = 0

    def goto(self, n):
        self.reset()
        self.state = n
        x = self.num_gears
        while n > 0 and x > 0:
            x -= 1
            n, m = divmod(n, len(self.gears[x]))
            self.indicies[x] = (m, self.indicies[x][1])
        if n > 0:
            self.reset()
            raise ValueError(""state exceeded"")

    def roll_gears(self):
        # Starting from the end of the gear indicies work to the front
        # incrementing the gear until the limit is reached. When the limit
        # is reached carry operation to the next gear
        self.state += 1
        should_carry = True
        for n in range(0, self.num_gears):
            nth_gear = self.num_gears - n - 1
            if should_carry:
                count, lim = self.indicies[nth_gear]
                count += 1
                if count == lim and nth_gear == 0:
                    self.cont = False
                if count == lim:
                    should_carry = True
                    count = 0
                else:
                    should_carry = False
                self.indicies[nth_gear] = (count, lim)
            else:
                break

    def __iter__(self):
        return self

    def next(self):
        if not self.cont:
            raise StopIteration
        l = []
        for x in range(0, self.num_gears):
            index, limit = self.indicies[x]
            l.append(self.gears[x][index])
        self.roll_gears()
        return tuple(l)

p = product('abc', '12')
print list(p)
p.reset()
print list(p)
p.goto(2)
print list(p)
p.goto(4)
print list(p)
> python prod.py 
[('a', '1'), ('a', '2'), ('b', '1'), ('b', '2'), ('c', '1'), ('c', '2')]
[('a', '1'), ('a', '2'), ('b', '1'), ('b', '2'), ('c', '1'), ('c', '2')]
[('b', '1'), ('b', '2'), ('c', '1'), ('c', '2')]
[('c', '1'), ('c', '2')]
"
How can I calculate the average of a list of tuples in python?,"lis=[('MSFT', '$39.458', '1,000'), ('AAPL', '$638.416', '200'), ('FOSL', '$52.033', '1,000'), ('OCZ', '$5.26', '34,480'), ('OCZ', '$5.1571', '5,300')]

dic={}
for x in lis:
    if x[0] not in dic:
     price=float(x[1].strip('$'))
     nos=int("""".join(x[2].split(',')))
     #print(nos)
     dic[x[0]]=[price,nos]
    else:
     price=float(x[1].strip('$'))
     nos=int("""".join(x[2].split(',')))
     dic[x[0]][1]+=nos
     dic[x[0]][0]=(dic[x[0]][0]+price)/2
print(dic)    
"
Extract a column from a .csv file by name,"with open(csvfile) as f:
    for row in csv.DictReader(f, delimiter='|', skipinitialspace=True):
        do_something_with(row['Twitter handle']
"
Iterating through multi-dimentional lists while remembering indices,"for f1, d1 in enumerate(data):
    for f2, d2 in enumerate(d1):
        for f3, d3 in enumerate(d2):
            for f4, d4 in enumerate(d3):
                for f5, value in enumerate(d4):
                    process_point(f1, f2, f3, f4, f5, value)
"
Able to use any case in input to generate the same dict values in output,"while response[0] != 'quit': 
    response = raw_input(""Please enter who you're looking for, or type 'exit' to quit the program: "").split() 
    try:
        fn, thing = response[0].capitalize(), response[1].lower()
        print ""%s's %s is %s"" % (fn, thing, people[fn][thing])  
    except KeyError: 
        print wrong,
"
Output element with the greatest value in certain position. Python,"def func(x):
    return int(x[-1])
max(the_list, key=func)
#['b', 'c', 'e', '4']
"
Assign values to dictionary by order they were added,"from collections import Counter
with open('customers.txt') as customers:
    c = Counter(line.split("";"")[0] for line in customers )
    print(c.most_common())
"
Converting matlab code to python,"import numpy as np

sample_rate = 400
Nyquist = sample_rate/2.0
fneeg = 'data.eeg'
t = 10 
ch = 32
le = t*sample_rate
EEG = np.fromfile(fneeg, 'int16').reshape(ch, le, order='F')
"
set multi index of an existing data frame in pandas,"df.set_index(['Company', 'date'], inplace=True)"
Converting a number in exponential form to decimal form in python," In [41]: print ""{:f}"".format(float(""1.70000043572e-05""))
 0.000017

# 16 digits 
In [38]: print ""{:.16f}"".format(float(""1.70000043572e-05""))
0.0000170000043572
"
Import data into DataFrame with additional commas,"lines = (line.split(',',3) for line in f)
"
Split list with colon seperated items into list of tuples,"headers = ['Host: www.perdu.com', 'Connection: keep-alive', 'Cache-Control: max-age=0', 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,/;q=0.8', 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36', 'DNT: 1', 'Accept-Encoding: gzip,deflate,sdch', 'Accept-Language: en-US,en;q=0.8,es;q=0.6,fr;q=0.4', '']
headers = [tuple(i.split(': ')) for i in headers]
"
What is the most efficient way in Python to convert a string to all lowercase stripping out all non-ascii alpha characters?,"import string, re, timeit

# Precomputed values (for str_join_set and translate)

letter_set = frozenset(string.ascii_lowercase + string.ascii_uppercase)
tab = string.maketrans(string.ascii_lowercase + string.ascii_uppercase,
                       string.ascii_lowercase * 2)
deletions = ''.join(ch for ch in map(chr,range(256)) if ch not in letter_set)

s=""A235th@#$&( er Ra{}|?>ndom""

# From unwind's filter approach
def test_filter(s):
    return filter(lambda x: x in string.ascii_lowercase, s.lower())

# using set instead (and contains)
def test_filter_set(s):
    return filter(letter_set.__contains__, s).lower()

# Tomalak's solution
def test_regex(s):
    return re.sub('[^a-z]', '', s.lower())

# Dana's
def test_str_join(s):
    return ''.join(c for c in s.lower() if c in string.ascii_lowercase)

# Modified to use a set.
def test_str_join_set(s):
    return ''.join(c for c in s.lower() if c in letter_set)

# Translate approach.
def test_translate(s):
    return string.translate(s, tab, deletions)


for test in sorted(globals()):
    if test.startswith(""test_""):
        assert globals()[test](s)=='atherrandom'
        print ""%30s : %s"" % (test, timeit.Timer(""f(s)"", 
              ""from __main__ import %s as f, s"" % test).timeit(200000))
"
Pandas: Reading Excel with merged cells,"df.index = pd.Series(df.index).fillna(method='ffill')
"
Python: Decimal part of a large float,">>> from fractions import Fraction
>>> Fraction(10)
Fraction(10, 1)
>>> Fraction(10)**50
Fraction(100000000000000000000000000000000000000000000000000, 1)
>>> Fraction(10)**50-1
Fraction(99999999999999999999999999999999999999999999999999, 1)
>>> (Fraction(10)**50-1)/23
Fraction(99999999999999999999999999999999999999999999999999, 23)
>>> ((Fraction(10)**50-1)/23) % 1
Fraction(5, 23)
>>> float(((Fraction(10)**50-1)/23) % 1)
0.21739130434782608
"
How to get the child of child using Python's ElementTree,">>> from xml.etree import ElementTree as ET
>>> sample = '''\
... <visu>
...     <time>12:34</time>
...     <name>my_visu</name>
...     <language>english</language>
...     <vars>
...         <var name=""input1"">2</var>
...         <var name=""input2"">45.6</var>
...         <var name=""input3"">""hello""</var>
...     </vars>
... </visu>
... '''
>>> root = ET.fromstring(sample)
>>> name = 'input2'
>>> root.find('.//vars/var[@name=""{}""]'.format(name)).text
'45.6'
"
xml filtering with python,"doc=xee.fromstring(data)
for parent in doc.getiterator():
    for child in parent.findall('node2'):
        if child.attrib['a1']=='x2':
            parent.remove(child)
"
Convert list of tuples of mixed data types into all string,">>> [tuple(map(str, xs)) for xs in lst]
[('1', 'John', '129', '37'), ('2', 'Tom', '231', '23')]
"
splitting numpy array into 2 arrays,">>> splits = np.hsplit(A, [1,3]) # A split at indices 1 and 3 (gives list of three sub-arrays)
>>> B = np.hstack((splits[0], splits[2]))
>>> C = splits[1]
"
How to create a python code to count number of comment lines and lines containing whitespace in a file?,">>> file = open('myfile.txt')
>>> lines = file.readlines()
>>> for each_line in lines:
        print each_line
"
Python - What is exactly sklearn.pipeline.Pipeline?,"    vect = CountVectorizer()
    tfidf = TfidfTransformer()
    clf = SGDClassifier()

    vX = vect.fit_transform(Xtrain)
    tfidfX = tfidf.fit_transform(vX)
    predicted = clf.fit_predict(tfidfX)

    # Now evaluate all steps on test set
    vX = vect.fit_transform(Xtest)
    tfidfX = tfidf.fit_transform(vX)
    predicted = clf.fit_predict(tfidfX)
"
python merge panda dataframes keep dates,"import pandas as pd
from StringIO import StringIO

s1=""""""
domain               ttl           nameserver               file_date
fakedomain.com       86400         ns1.fakedomain.com       8/8/2008
fakedomainz.com      86400         ns1.fakedomainz.com      8/8/2008
""""""

s2=""""""
domain               ttl           nameserver               file_date
fakedomain.com       86400         ns1.fakedomain.com       9/8/2008
fakedomainz.com      86400         ns1.fakedomainz.com      9/8/2008
""""""
"
File Manipulation in Python,"import fileinput
import sys

filename = 'test.txt'

# ----
# print the line user asked for
def printline(linenumber):
    handle = open(filename)
    for i, line in enumerate(handle):
        if (i+1) == int(linenumber):
            print (line)
            # find a keyword to type here to exit for loop as soon as the line of interest is printed
    handle.close()

# ----

# ask user for the line number
linenumber = input('Please enter line number: ')
print ('Line %s is: ' % linenumber)
printline(linenumber)

# ask if IN/OUT has to be changed
answer = input('Switch IN to OUT --OR-- OUT to IN? (y/n): ');
if answer == 'y':

    # use fileinput to change the file in place
    for line in fileinput.input(filename, inplace = True):

        # if it is the line of interest, switch IN to OUT if ,IN, is found
        # switch OUT to IN if ,OUT, is found
        if fileinput.filelineno() == int(linenumber):
            if ',IN,' in line:
                print ('%s' % line.strip().replace(',IN,', ',OUT,'))
            else:
                print ('%s' % line.strip().replace(',OUT,', ',IN,'))

        # if this is not the right line, just print the line back to file
        else:
            print (line.strip())

    fileinput.close()

print ('Line %s is: ' % linenumber)
printline(linenumber)

print ('Done')
"
Remove empty strings from a list of strings,"str_list = filter(None, str_list) # fastest
str_list = filter(bool, str_list) # fastest
str_list = filter(len, str_list)  # a bit of slower
str_list = filter(lambda item: item, str_list) # slower than list comprehension
"
Longest Prefix Matches for URLs,"from pytrie import StringTrie


url_list = [ 
    'http://www.google.com/mail',
    'http://www.google.com/document',
    'http://www.facebook.com',
]

url_trie = StringTrie()

for url in url_list:
    url_trie[url] = url 

searches = (""http"", ""http://www.go"", ""http://www.fa"", ""http://fail"")

for search in searches:
    print ""'%s' ->"" % search, url_trie.values(prefix=search)
"
BeautifulSoup Cannot Find Tag,"data = BeautifulSoup(urllib2.urlopen(value), 'html.parser') 
"
Adding up a value after matching a line using append from a text file using python 3.x,"from collections import OrderedDict
d = OrderedDict()
with open(""folder/file_1"") as file:
    for line in file:
        name, _, raw_time = line.rpartition("":"")
        time = int(raw_time.strip(""sec \n""))
        d[name] = d.get(name,0) + time

for name, time in d.items():
    print(""{}: {:02} {}"".format(name, time, ""sec"" if time == 1 else ""secs""))
"
Read n test cases from file in Python,"import fileinput

input = fileinput.input()
for line in input:
    for j in range(int(line)):
        solve(*[int(i) for i in input.next().split()])
"
Set values of a column with numpy array,"In [1]: import pandas as pd

In [2]: from numpy import arange

In [3]: from scipy import random

In [4]: index = pd.MultiIndex.from_product([arange(0,3), arange(10,15)], names=['A', 'B'])

In [5]: df = pd.DataFrame(columns=['test'], index=index)

In [6]: someValues = random.randint(0, 10, size=5)

In [8]: df.loc[0,'test'] = someValues

In [9]: df
Out[9]: 
     test
A B      
0 10    0
  11    8
  12    2
  13    0
  14    2
1 10  NaN
  11  NaN
  12  NaN
  13  NaN
  14  NaN
2 10  NaN
  11  NaN
  12  NaN
  13  NaN
  14  NaN

[15 rows x 1 columns]
"
Python 3.3. Concatenating strings from input. How?,"a = input(""Enter the first input:"")
b = input(""Enter the second input:"") 
result = a + delimiter + b
# or 
# result = delimiter.join([a, b])
"
"How to use regular expression to separate numbers and characters in strings like ""30M1000N20M""","re.findall('([0-9]+)([A-Z])', '20M10000N80M')"
Regular expression in python - help needed,">>> mylist = ['var1', 'var2', 'var3_something', 'var1_text', 'var1var1']
>>> import re
>>> r = re.compile(r'^var1$')
>>> matches = [item for item in mylist if r.match(item)]
>>> print matches
['var1']
"
Filtering list of dictionaries by regex match,">>> pprint.pprint(collected)
[{'denied': False, 'metric': 1.0, 'service': 'ab'},
 {'denied': False, 'metric': 1.0, 'service': 'bc'},
 {'denied': False, 'metric': 1.0, 'service': 'ca'},
 {'denied': False, 'metric': 1.0, 'service': 'cb'},
 {'denied': False, 'metric': 1.0, 'service': 'bc'}]
>>> denied_metrics = [re.compile(""a""), re.compile(""c$"")]
>>> allowed = [msg for msg in collected 
               if not any(dm.search(msg['service'])
               for dm in denied_metrics)]
>>> allowed
[{'metric': 1.0, 'service': 'cb', 'denied': False}]
"
Get a list of subnets matching a given CIDR,">>> import ipaddr
>>> it = ipaddr.IPNetwork('10.0.0.0/8').subnet(new_prefix=22)
>>> networks = [(str(n.network), str(n.broadcast)) for n in it]
>>> len(networks)
16384
>>> networks[0]
('10.0.0.0', '10.0.3.255')
>>> networks[-1]
('10.255.252.0', '10.255.255.255')
"
Saving a Numpy array as an image,"scipy.misc.imsave('outfile.jpg', image_array)"
Is there any more pythonic way to do the following repetitive code,"columns = ['LAND1','SEA1','OCEAN1','CITY1',...]
for col in columns:
    df[col] = (df[col].str.replace('\W+', '')
                      .str.lower().astype(str))
"
Python Code to combine duplicated element," from itertools import groupby

l = [('Sig: 7126', '10.3.5.0', '4'), ('Sig: 7126', '10.3.5.0', '1')...]

def tuples_sum(iterable):
  return list(iterable[0][:-1]) + [sum(int(i[-1]) for i in iterable)]

for i, j in groupby(l, lambda x: (x[0], x[1])):
  print(tuples_sum(list(j)))
"
Use regex backreferences to create array,"import re
[re.findall(r'^\t(.*)\t.*: (.*)$',i) for i in my_list]
"
Python : Name of the calling file in different file,"from inspect import stack

print stack()[1][1]
"
Using numpy's genfromtxt to load a triangular matrix with python,"def iter_data(path):
    with open(path) as data_file:
        for line in data_file:
            yield from line.split()

arr = np.fromiter(iter_data('data.txt'), int)
"
Converting an array to hash in python,"p = []
a = ['s', 'l', 'y']
for s in a:
    p.append(('size',  s))

print(p)
"
how to download multiple file simultaneously and join them in python?,"import concurrent.futures

urls = ['http://example.com/foo', 
        'http://example.com/bar']

with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
    result = b''.join(executor.map(download, urls))

with open('output_file', 'wb') as f:
    f.write(result)
"
How to combine two lists,">>> projects = [  row + [x[1] for x in emails if x[0] == row[1]] for row in projects ]
>>> print projects 
[['project1', 'email1', 'john@gmail.com'], ['project1', 'email2', 'bill@gmail.com']]
"
How to remove empty entries from a list in a dictionary using python,">>> data = {'Fruits' : ['Mango', 'Banana', '', '', 'Apple'],
...         'Trees' : ['Pine', 'Bamboo', '', '', '', '', ''],
...         'Laptops' : ['Sony', '', '', 'LG', 'Acer', '']}
>>> {k: filter(bool, v) for k, v in data.iteritems()}
{'Laptops': ['Sony', 'LG', 'Acer'], 'Trees': ['Pine', 'Bamboo'], 'Fruits': ['Mango', 'Banana', 'Apple']}
"
getting GtkTressStore parent from child in python,"path=GtkTreeStore.get_path(name)
path_value=str(path)
"
Is there a way to access parent modules in Python,">>> from subprocess import types
>>> types
<module 'types' from '/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/types.pyc'>
>>> import sys
>>> sys.modules['subprocess']
<module 'subprocess' from '/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/subprocess.pyc'>
"
Converting CNC drillings from old to new system (using Python),"import ast

def dict_from_row(row):
    """"""Convert a list of strings in the form 'name=value' into a dict.""""""
    res = []
    for entry in row:
        name, value = entry.split('=')
        res.append('""{name}"": {value}'.format(name=name, value=value))
    dict_string = '{{{}}}'.format(', '.join(res))
    return ast.literal_eval(dict_string)
"
How to split a python list by comma,">>> [[w.strip() for w in s.split(',')] for s in industries_list]
[['Computers', 'Internet'], ['Photography', 'Tourism'], ['Motoring', 'Manufacturing']]
"
Making a flat list out of list of lists,list(itertools.chain.from_iterable(list2d))
Caesar Cipher: How to print from dictionary *all* letters from input?,"def translate(lettered_code):
    """".join([translation[letters] for letters in lettered_code ])
"
numpy.genfromtxt imports tuples instead of arrays,"In [185]:

np.genfromtxt('temp.csv', delimiter=',', \
                          missing_values=0,skip_header=0,dtype=float,\
                          usecols=(0,2,3,4,5,6,7,8,9,10,11,17),names=True)
Out[185]:
array([ (0.016666668, 4.3555064, 0.0, 0.002, 0.0, 118.0, 1.0, 684.3, 0.0, 0.0, 14.71, -1.0),
       (0.033333335, 4.3555064, 20.0, 0.002, 0.0, 119.0, 1.0, 684.3, 0.0, 0.0, 14.71, -1.0),
       (0.05, 4.444291, 13.0, 0.004, 0.0, 119.0, 1.0, 684.3, 0.0, 0.0, 14.71, -1.0)], 
      dtype=[('Timemin', '<f8'), ('Speed', '<f8'), ('Power', '<f8'), ('Distance', '<f8'), ('Rpm', '<f8'), ('Bpm', '<f8'), ('interval', '<f8'), ('Altitude', '<f8'), ('Rate', '<f8'), ('Incline', '<f8'), ('Temp', '<f8'), ('getCombinedPedalSmoothness', '<f8')])
"
Order a list of dictionaries in python,">>> res = [{'cpunumber': '40.0', 'servername': 'f02wn01', 'cpucore_sum': '5.0',   'cpucore_00': '0.399414', 'datetime': '1438887255'}, 
...   {'cpunumber': '40.0', 'servername': 'f02wn01', 'cpucore_sum': '9.375', 'cpucore_00': '1.597656', 'datetime': '1438887250'}, 
...   {'cpunumber': '40.0', 'servername': 'f02wn01', 'cpucore_sum': '3.195312', 'cpucore_00': '0.0', 'datetime': '1438887240'}, 
...   {'cpunumber': '40.0', 'servername': 'f02wn01', 'cpucore_sum': '5.59375', 'cpucore_00': '1.0', 'datetime': '1438887245'}]
>>> sorted(res, key=lambda x: x[""datetime""], reverse=True)
[{'cpucore_00': '0.399414',
  'cpucore_sum': '5.0',
  'cpunumber': '40.0',
  'datetime': '1438887255',
  'servername': 'f02wn01'},
 {'cpucore_00': '1.597656',
  'cpucore_sum': '9.375',
  'cpunumber': '40.0',
  'datetime': '1438887250',
  'servername': 'f02wn01'},
 {'cpucore_00': '1.0',
  'cpucore_sum': '5.59375',
  'cpunumber': '40.0',
  'datetime': '1438887245',
  'servername': 'f02wn01'},
 {'cpucore_00': '0.0',
  'cpucore_sum': '3.195312',
  'cpunumber': '40.0',
  'datetime': '1438887240',
  'servername': 'f02wn01'}]
"
Python Multiprocessing help exit on condition,"from random import random
from multiprocessing import Process
from sys import exit
from time import sleep

def add_something(i):

    # Sleep to simulate the long calculation
    sleep(random() * 30)

    exitcode = i + 1
    print(exitcode)
    exit(exitcode)

def run_my_process():

    # Start up all of the processes
    processes = []
    for i in range(100):
        proc = Process(target=add_something, args=[i])
        processes.append(proc)
        proc.start()

    # Wait for the desired process result
    done = False
    while not done:
        for proc in processes:
            if proc.exitcode == 90:
                done = True
                break

    # Kill any processes that are still running
    for proc in processes:
        if proc.is_alive():
            proc.terminate()

if __name__ == '__main__':
    run_my_process()
"
most pythonic way to use a value from a list as an index to another list,">>> hns=[['a','b','c'],['c','b','a'],['b','a','c']]

>>> keys = ['a','b','c']

>>> hnday = [[k]+[hns[i].index(k)+1 for i in range(len(hns))] for k in keys]
[['a', 1, 3, 2], ['b', 2, 2, 1], ['c', 3, 1, 3]]
"
pysvn: How to find out if local dir is under version control?,">>> try:
...     client.info('/tmp')
... except pysvn.ClientError:
...     print('not working copy')
... else:
...     print('working copy')
...
not working copy
"
Can anyone explain why this sorting won't work?,">>> List1 =[7,6,9]
>>> List2 = List1         # both List1, List2 point to the same object [7, 6, 9]
>>> List1.sort()          # sort List1 in-place, affects the original object
>>> List1, List2
([6, 7, 9], [6, 7, 9])    # both variables still point to the same list

>>> List1 =[7,6,9]
>>> List2 = List1         #same as above
>>> List1 = sorted(List1) #sorted returns a new list, so List1 now points to this new list 
>>> List1, List2          #List2 is still unchanged
([6, 7, 9], [7, 6, 9])
"
How do I change where a variable is pointing to within a function?,"def maybe_replace_corgi(corgi):
    if corgi.cuteness > treshold:
        corgi.will_keep = true
    else:
        corgi.__init__(name=""Woofus"")
"
An efficient way of making a large random bytearray,"bytearray(os.urandom(1000000))
"
Function returns no value,"def prog_rownum(filename, ref):
    """""" Return a list with the line numbers where ref appears in filename """"""
    with open(filename) as f:
        return [line_num for line_num, line in enumerate(f) 
                if line.startswith(ref)]    # alternatively ""if ref in line"" checks anywhere
"
Webcrawler - Check if <a> tag with href is within an li tag using Beautiful soup?,"html = '''
<li class=""toclevel-1 tocsection-1""><a href=""#Overview""><span class=""tocnumber"">1</span> <span class=""toctext"">Overview</span></a></li>
<li class=""toclevel-1 tocsection-1""><a href=""http://www.google.com""><span class=""tocnumber"">1</span> <span class=""toctext"">Overview</span></a></li>
<li class=""toclevel-1 tocsection-1""><a href=""#Overview""><span class=""tocnumber"">1</span> <span class=""toctext"">Overview</span></a></li>
'''
soup = BeautifulSoup(html)
a_tag = soup.find('a', attrs={'href': re.compile(r'^http.*')})
"
Modifying XML Files in Python,"import xml.etree.ElementTree as ET

# get the root element
tree = ET.parse('some.xml')
root = tree.getroot()

elem = ET.Element('newchild')
elem.text = 'thiscamefromtextfile'
root.append(elem) # append to root or any other node, as you want

tree.write('some.xml')
"
Group values with common domain and page values,"from collections import defaultdict
from urllib import quote
from urlparse import parse_qsl, urlparse


urls = defaultdict(list)
with open('links.txt') as f:
    for url in f:
        parsed_url = urlparse(url.strip())
        params = parse_qsl(parsed_url.query, keep_blank_values=True)
        for key, value in params:
            urls[parsed_url.path].append(""%s=%s"" % (key, quote(value)))

# printing results
for url, params in urls.iteritems():
    print url
    for param in params:
        print param
"
Removing stopwords with Python - quickly and efficiently,"with open('document') as doc:
    with open('sed_script', 'w') as sed_script:
        sed_script.writelines(['s/\<{}\>//g\n'.format(word) for word in stopwords])
    with open('sed_document', 'w') as sed_doc:
        subprocess.call(['sed', '-f', 'sed_script'], stdout=sed_doc, stdin=doc)
"
sorting a list of strings by their length not working,"def shortStringsByWordLengths(sentences):
    return [' '.join(sorted(sentence.split(), key=len, reverse=True)) for sentence in sentences]
"
How to read the data from a file and get the concordance output,"myDict = {}
linenum = 0
with open(""eng.txt"", ""r"") as f:
    for word in f.read().split():
        myDict.setdefault(word,[]).append(linenum)

print ""%-15s %-15s"" %(""Word"", ""Frequency"")
for key in sorted(myDict):
    print '%-15s: %-15d' % (key, len(myDict[key]))
"
"In Python, class from which a given instance is inheriting a particular method",">>> import inspect
>>> def class_for_method(cls, method):
...     return next((c for c in inspect.getmro(cls) 
...                  if method.__func__ in vars(c).values()), None)
... 
>>> class Base1(object):
...     def foo(self): pass
... 
>>> class Base2(object):
...     pass
... 
>>> class ClassA(Base1, Base2):
...     pass
... 
>>> class_for_method(ClassA, ClassA.foo)
<class '__main__.Base1'>
"
Python And Or statements acting ..weird,"if i != """" and i != "" "":
"
Python 3 static members,"class A:
    username = None
    @classmethod
    def get_username(cls):
        if cls.username is None:
            try:
                uname = os.environ[""USER""]
            except:
                print(""Couldn't find a user name"")
            else:
                cls.username = uname
        return cls.username
"
Interpreting nested HTML <blockquote>s in Python?,"import re

with open(""tcomment.txt"",""r"") as tf:
    text = """"
    for line in tf:
        text += line
tf.close()
text = text.replace(""\n"","""")
text = text.replace("">"","">\n"")
text = text.replace(""<"",""\n<"")
text = re.sub(""</p>\s*<p>"",""<br><br>"", text)
text = text.replace(""<p>\n"", """")
text = text.replace(""</p>\n"",""\n"")
text = re.sub(""<[/]{0,1}blockquote>"",""<chunk>"",text)
text = re.sub(""<a class=\""tumblr_blog\""[^>]+?>"",""<chunk>"",text)
text = text.replace(""</a>"","""")
text = re.sub(""\n+"","""", text)
text = re.sub(""\s{2,}"","" "", text)
text = re.sub(""<chunk>\s*<chunk>"",""<chunk>"",text)
bits = text.split(""<chunk>"")
bits[0] = ""Latest:""
comments = []
for i in range(len(bits)):
    temp = """"
    j = 0 - (i+1)
    if (len(bits)-i) > i:
        temp = ""<b>"" + bits[i] + ""</b> "" + bits[j]
        comments.append(temp)

comments.reverse()
for comment in comments:
    print(""<p>%s</p>"" % (comment))
    print()
"
"regex does not match only upper case letters, despite being instructed to do so","\b[A-Z0-9_]*(?==\d).{2,}\b
"
Why is Poisonous plants stack solution giving TLE?,"import collections
import sys

ps = [int(s) for s in list(sys.stdin)[1].strip().split()]
ps_prev = []
days = 0
while collections.Counter(ps_prev) != collections.Counter(ps):
    ps_prev = ps[:]
    i = len(ps) - 1
    while i > 0:
        if ps[i] > ps[i-1]:
            ps.pop(i)
        i -= 1            
    days += 1      

print(days - 1)
"
How to call functions of next/previous object in list in Python,"class Player:
    def __init__(self, name, points=0):
        self.name = name
        self.points = points
    def gain_points(self, n):
        self.points += n
    def next_player(self):
        i = players.index(self)
        return players[i+1]
    def __repr__(self):
        return '%s(%r, %r)' % (self.__class__.__name__, self.name, self.points)

if __name__ == '__main__':
    players = [Player('Manny'), Player('Mo'), Player('Jack')]
    players[1].next_player().gain_points(5)
    print players
"
Return a list of all variable names in a python nested dict/json document in dot notation,"def dot_notation(obj, prefix=''):
     if isinstance(obj, dict):
         if prefix: prefix += '.'
         for k, v in obj.items():
             for res in dot_notation(v, prefix+str(k)):
                 yield res
     elif isinstance(obj, list):
         for i, v in enumerate(obj):
             for res in dot_notation(v, prefix+'['+str(i)+']'):
                 yield res
     else:
         yield prefix
"
"How to convert datetime.timedelta to minutes, hours in Python?","days, seconds = duration.days, duration.seconds
hours = days * 24 + seconds // 3600
minutes = (seconds % 3600) // 60
seconds = seconds % 60
"
What does this python expression mean,"c and c == d or True
"
Python Counter alternative for Java,"final Map<String, Integer> counts = new HashMap<>();

counts.merge(""Test"", 1, Integer::sum);
counts.merge(""Test"", 1, Integer::sum);
counts.merge(""Other"", 1, Integer::sum);
counts.merge(""Other"", 1, Integer::sum);
counts.merge(""Other"", 1, Integer::sum);

System.out.println(counts.getOrDefault(""Test"", 0));
System.out.println(counts.getOrDefault(""Other"", 0));
System.out.println(counts.getOrDefault(""Another"", 0));
"
How do I find out if a combination of numbers are in another combination of numbers?,"for short_tuple in mylist:
    short_tuple_set = set(short_tuple)

    remainder = (i for i in range(1, 50) if i not in short_tuple_set)
    for combo in itertools.combinations(remainder, 5 - len(short_tuple)):
        combo = sorted(combo + short_tuple)
"
Iterating over a list while incrementing another variable at the same time,"from string import ascii_lowercase
alphabets = dict(zip(ascii_lowercase, range(1,27)))
"
List of list increment if exists otherwise extend,"d = {}
for key, value in l:
    if key in d:
        d[key] += value
    else:
        d[key] = value
"
have a .exe run in the background and type things into that through python,"p.stdin.write(""run"")
print p.stdout.read(1024)
"
How to transform a time series pandas dataframe using the index attributes?,"pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"
Better way for concatenating two sorted list of integers,"In [53]: A = list(range(10000))

In [54]: B = list(range(1,20000,10))

In [55]: timeit list(merge(A,B))
100 loops, best of 3: 2.52 ms per loop

In [56]: %%timeit
C = []
i = j = 0
while i < len(A) and j < len(B):
    if A[i] < B[j]:
        C.append(A[i])
        i += 1
    else:
        C.append(B[j])
        j += 1
C += A[i:] + B[j:]
   ....: 
100 loops, best of 3: 4.29 ms per loop
In [58]: m =list(merge(A,B))
In [59]: m == C
Out[59]: True
"
"Pandas DataFrame, how do i split a column into two","df['A'], df['B'] = df['AB'].str.split(' ', 1).str"
Generate 2 Unique but random Elements in a List,"def party_generator(size=1, chars=string.ascii_uppercase):
    parties = []
    seen = set()
    while len(parties) < 2:
        party = ''.join(random.choice(chars) for x in range(size))
        if party in seen:
            continue
        seen.add(party)
        parties.append('Party {}'.format(party))
    return parties
"
How can I use a pre-made color map for my heat map in matplotlib?,"from pylab import imshow, show, get_cmap
from numpy import random

Z = random.random((50,50))   # Test data

imshow(Z, cmap=get_cmap(""Spectral""), interpolation='nearest')
show()
"
Find indices of common values in two arrays,"def unq_searchsorted(A,B):

    # Get unique elements of A and B and the indices based on the uniqueness
    unqA,idx1 = np.unique(A,return_inverse=True)
    unqB,idx2 = np.unique(B,return_inverse=True)

    # Create mask equivalent to np.in1d(A,B) and np.in1d(B,A) for unique elements
    mask1 = (np.searchsorted(unqB,unqA,'right') - np.searchsorted(unqB,unqA,'left'))==1
    mask2 = (np.searchsorted(unqA,unqB,'right') - np.searchsorted(unqA,unqB,'left'))==1

    # Map back to all non-unique indices to get equivalent of np.in1d(A,B), 
    # np.in1d(B,A) results for non-unique elements
    return mask1[idx1],mask2[idx2]
"
Extract string and assign to the variable using regex in Python,"from datetime import datetime
start_time_1 = datetime.now()
res= findSeq(""eth0"",data)
print('Duration: {}'.format(datetime.now() - start_time_1))

from datetime import datetime
start_time_2 = datetime.now()
re.search(r'eth0.*?RX packets:(\d+)',data,re.DOTALL).group(1)
print('Duration: {}'.format(datetime.now() - start_time_2))
"
Dynamic Operator Overloading on dict classes in Python,"class _MetaFoo(type):
    def __init__(cls, name, bases, args):
        def _fn(self, other):
            return self.num + other.num
        cls.__add__ = _fn

class Foo(object):
    __metaclass__ = _MetaFoo
    def __init__(self, num):
        self.num = num

>>> f = Foo(2)
>>> g = Foo(1)
>>> f+g
3
"
connecting and separating string inputs,"example = """"
for i in range(1,4):   
    example = example + str(i)+"". "" +input(""enter the example !"") +""\n""
print (example)
"
Changing constraint naming conventions in Flask-SQLAlchemy,"db = SQLAlchemy(metadata=MetaData(naming_convention={
    'pk': 'pk_%(table_name)s',
    'fk': 'fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s',
    'ix': 'ix_%(table_name)s_%(column_0_name)s',
    'uq': 'uq_%(table_name)s_%(column_0_name)s',
    'ck': 'ck_%(table_name)s_%(constraint_name)s',
}))
"
Best way to convert Pandas dataframe to json in python,"import pandas as pd

data = """"""\
State   type    freq
AZ  low 1101
CT  low 932
DE  low 832
FL  low 4481
GA  low 1619
IA  low 1819
IL  low 4498
IN  low 797
KS  low 162
AZ  mid 412
CT  mid 2149
DE  mid 1152
FL  mid 3304
GA  mid 167
IA  mid 247
IL  mid 3852
IN  mid 1849
KS  mid 379
AZ  high    674
CT  high    418
DE  high    1862
FL  high    948
GA  high    1063
IA  high    1203
IL  high    942
IN  high    1534
KS  high    471""""""

data = pd.DataFrame([line.split() for line in data.splitlines()[1:]],
                    columns=data.splitlines()[0].split())

bystate = data.pivot('State', 'type')
"
How to pad leading zero (in a function) dynamically?,">>> values = 3, 100, 50000
>>> width = max(len('%0d' % value) for value in values)
>>> ', '.join('%0*d' % (width, value) for value in values)
'00003, 00100, 50000'
"
"Python slice how to distinguish slice arguments and default arguments (e.g., x[i:] vs. x[i:None])?","import sys, dis

class Moo(object):
    def __getitem__(self, i):
        parent_frame = sys._getframe().f_back
        accessing_opcode = parent_frame.f_code.co_code[parent_frame.f_lasti]
        return ""This __getitem__ was invoked by way of a %s instruction"" \
                % dis.opname[ord(accessing_opcode)]
"
Delete second row of header in PANDAS,"df.columns = df.columns.droplevel(-1)
print df
       AA  BB  CC  DD
Index                
1       1   2   3   4
2       5   6   7   8
3       9   1   2   3
"
from list of strings into list of floats,">>> print(map.__doc__)
map(func, *iterables) --> map object

Make an iterator that computes the function using arguments from
each of the iterables.  Stops when the shortest iterable is exhausted.
"
Rounding Error in Python,"print( ""%.2f"" % 0.23999999999999999 )
"
Get Last Day of the Month,"calendar.monthrange(2008, 2)"
Fuzzy-match List of People,"if any(actor in actors_from_site_1 for actor in actors_from_site_2):
"
Most Pythonic was to strip all non-alphanumeric leading characters from string,"while not s[0].isalpha(): s = s[1:]
"
Python xml minidom. generate <text>Some text</text> element,">>> from xml.dom import minidom
>>> def newwritexml(self, writer, indent= '', addindent= '', newl= ''):
...     if len(self.childNodes)==1 and self.firstChild.nodeType==3:
...         writer.write(indent)
...         self.oldwritexml(writer) # cancel extra whitespace
...         writer.write(newl)
...     else:
...         self.oldwritexml(writer, indent, addindent, newl)
... 
>>> minidom.Element.oldwritexml= minidom.Element.writexml
>>> minidom.Element.writexml= newwritexml
"
Summing the first value in each tuple in a list over a specific range in Python,"N=3
M=1
print sum([pair[0] for pair in list_of_pairs[M:N+1]]) 
"
Calling a method on all instances of an object,"class Base:
    def __new__(cls, *args, **kw):
        self = super.__new__(*args, **kw)
        if not hasattr(cls, _instances):
            cls._instances = []
        cls._instances.append(self)
        return self

    @classmethod
    def call_all(cls, method_name, *args, **kw):
        results = []
        for instance in cls._instances:
            results.append(getattr(instance, method_name)(*args, **kw))
        return results

    def __del__(self):
        self.__class__._instances.remoce(self)

class vehicles:
    class car(Base):

        def drive():
            pass

car1 = car()
car2 = car()
car3 = car()

car.call_all(""drive"")
"
Using pandas to filter data frame for the most popular factors,"M = 2
handy = df.groupby('factor1')['factor1'].count()
minimumValueMFactors = handy[handy>=M]
dataOfMinimumValueMFactors = df[df['factor1'].isin(minimumValueMFactors.index)]
print dataOfMinimumValueMFactors
"
Explicitly set docstring of a method,"class MyClass(object):

    def myMethod(self):
        pass

MyClass.myMethod.__func__.__doc__ = ""A really cool method""
"
Pure python solution to convert HTML tables to readable plain text,"import xml.etree.ElementTree
import collections

s = """"""\
<table>
    <tr>
        <th>Height</th>
        <th>Width</th>
        <th>Depth</th>
    </tr>
    <tr>
        <td>10</td>
        <td>12</td>
        <td>5</td>
    </tr>
    <tr>
        <td>0</td>
        <td>3</td>
        <td>678</td>
    </tr>
    <tr>
        <td>5</td>
        <td>3</td>
        <td>4</td>
    </tr>
</table>
""""""

table = xml.etree.ElementTree.XML(s)
rows = iter(table)
headers = [col.text for col in next(rows)]
for row in rows:
    values = [col.text for col in row]
    for key, value in collections.OrderedDict(zip(headers, values)).iteritems():
        print key, value
"
SQLAlchemy - Get all Rows which have matching set of Columns,"Session.query(...).filter(..., schema.Term.id < term_alias.id).distinct()
"
pandas query rows by list,"In [1]: import pandas as pd

In [2]: df = pd.DataFrame({'customer_id':range(5), 'A':('a', 'b', 'c', 'd', 'e')})

In [3]: df
Out[3]: 
   A  customer_id
0  a            0
1  b            1
2  c            2
3  d            3
4  e            4

In [4]: df[df.customer_id.isin((1,3))]
Out[4]: 
   A  customer_id
1  b            1
3  d            3
"
Adding and combining values with dictionary comprehensions?,"result = {}
for name, count in a_list:
    result[name] = result.get(name, 0) + count
"
Masking a Pandas DataFrame rows based on the whole row,"def mask_all_zero_rows_numpy(df):
    """"""
    Take a dataframe, find all the rows that contain only zeros
    and mask them. Return a dataframe of the same shape with all
    Nan rows in place of the all zero rows.
    """"""
    no_data = -99
    arr = df.as_matrix().astype(int16)
    # make a row full of the 'no data' value
    replacement_row = np.array([no_data for x in range(arr.shape[1])], dtype=int16)
    # find out what rows are all zeros
    mask_rows = ~arr.any(axis=1)
    # replace those all zero rows with all 'no_data' rows
    arr[mask_rows] = replacement_row
    # create a masked array with the no_data value masked
    marr = np.ma.masked_where(arr==no_data,arr)
    # turn masked array into a data frame
    mdf = pd.DataFrame(marr,columns=df.columns)
    return mdf
"
A subset of a list with elements available in another list,"a = [1, 1, 1, 1, 2, 2, 2, 3, 3, 4]
b = {1, 4}
result = [elem for elem in a if elem in b]
"
Python BeautifulSoup how to get the index or of the HTML table,"
import bs4 as bs
import urllib2
import re

url = 'http://patft.uspto.gov//netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-bool.html&r=2&f=G&l=50&co1=AND&d=PTXT&s1=%22X+ray%22.ABTX.&s2=detect.ABTX.&OS=ABST/%22X+ray%22+AND+ABST/detect&RS=ABST/%22X+ray%22+AND+ABST/detect'
soup = bs.BeautifulSoup(urllib2.urlopen(url).read())

anchor = soup.findAll(text=re.compile(""Assi""))[0]
assignee = ' '.join(anchor.find_next('td').stripped_strings)
print(assignee)
"
Very slow python running time when trying to solve project Euler. Unsure if python or slow algorithm," for n4 in range(22):
    add+=primes_matrix[n4][3]
    if (add <= limit):
       if add not in suma:
         suma.append(add) # Or suma.add(add) if suma is a set - perhaps a variable name other than add would be good
         counter2+=1
    else:
      break #add > limit, so no need to keep looping through n4
"
Write an efficient python adjacency tree generation script,"import csv
import random

class Node(object):
    _index = 0
    __slots__ = ('id', 'name', 'parent')

    def __init__(self, name, parent=None):
        self.id = Node._index
        Node._index += 1

        self.name = name
        self.parent = parent

def write_roots(roots, writer):
    nodes = []
    for x in xrange(roots):
        node = Node('root{}'.format(x))
        root_nodes.append(node)
        writer.writerow([node.id, node.name, ''])
    return nodes

def write_row(parent_nodes, writer, children):
    nodes = []
    for parent_node in parent_nodes:
        for x in xrange(children):
            node = Node('cat{}-{}'.format(parent_node.id, x), parent_node.id)
            nodes.append(node)
            writer.writerow([node.id, node.name, node.parent])
    return nodes

roots = 1000

with open(""data.csv"", ""wb"") as f:
    writer = csv.writer(f)

    nodes = write_roots(roots, writer)

    for i in xrange(9):
        print 'Writing row {}'.format(i + 1)
        nodes = write_row(nodes, writer, random.randrange(1, 11))
"
bounding box of numpy array,"def bbox_rotate_3d(bbox_in, angle_x, angle_y, angle_z, centre):

    rmin, rmax, cmin, cmax, zmin, zmax = bbox_in

    # bounding box corners in homogeneous coordinates
    xyzu_in = np.array(([[cmin, cmin, cmin, cmin, cmax, cmax, cmax, cmax],
                         [rmin, rmin, rmax, rmax, rmin, rmin, rmax, rmax],
                         [zmin, zmax, zmin, zmax, zmin, zmax, zmin, zmax],
                         [   1,    1,    1,    1,    1,    1,    1,    1]]))

    # translate centre to origin
    cr, cc, cz = centre
    cent2ori = np.eye(4)
    cent2ori[:3, 3] = -cr, -cc -cz

    # rotation about the x-axis
    theta = np.deg2rad(angle_x)
    rmat_x = np.eye(4)
    rmat_x[1:3, 1:3] = np.array([[ np.cos(theta),-np.sin(theta)],
                                 [ np.sin(theta), np.cos(theta)]])

    # rotation about the y-axis
    theta = np.deg2rad(angle_y)
    rmat_y = np.eye(4)
    rmat_y[[0, 0, 2, 2], [0, 2, 0, 2]] = (
        np.cos(theta), np.sin(theta), -np.sin(theta), np.cos(theta))

    # rotation about the z-axis
    theta = np.deg2rad(angle_z)
    rmat_z = np.eye(4)
    rmat_z[:2, :2] = np.array([[ np.cos(theta),-np.sin(theta)],
                               [ np.sin(theta), np.cos(theta)]])

    # translate from origin back to centre
    ori2cent = np.eye(4)
    ori2cent[:3, 3] = cr, cc, cz

    # combine transformations (rightmost matrix is applied first)
    tform = ori2cent.dot(rmat_z).dot(rmat_y).dot(rmat_x).dot(cent2ori)
    xyzu_out = tform.dot(xyzu_in)

    r, c, z = xyzu_out[:3]

    rmin = int(r.min())
    rmax = int(r.max())
    cmin = int(c.min())
    cmax = int(c.max())
    zmin = int(z.min())
    zmax = int(z.max())

    return rmin, rmax, cmin, cmax, zmin, zmax
"
Use pdist() in python with a custom distance function defined by you,"import numpy as np
from scipy.spatial.distance import pdist

def dfun(u, v):
    return np.sqrt(((u-v)**2).sum())

dm = pdist(X, dfun)
"
Python remove element in for loop,"def purify(numbers):
    numbers[:] = [x for x in numbers if not x % 2]
    return numbers
"
"Python, read CRLF text file as is, with CRLF",">>> import io
>>> open('test.txt', 'wb').write('One\nTwo\rThree\r\n')
>>> open('test.txt', 'rb').readlines()
['One\n', 'Two\rThree\r\n']
>>> io.open('test.txt', 'r', newline='').readlines()
[u'One\n', u'Two\r', u'Three\r\n']
"
Merge dictionaries with key combinations,"keys = valuesB.keys()
C = {'a': [x[0] for x in keys], 'b': [x[1] for x in keys], 'value': [valuesB[x] for x in keys]}
"
How to click a link in WebDriver using Python?,"elements = driver.find_elements_by_tag_name(""td"")
for element in elements:
    if element.text == ""Click here!"":
        element.click()
"
Python 2.7 - Adding unicode strings to list,"filepathsUmlauts.append(files)
"
How to tell the order of two datetime objects in python?,"if x < y:
    # x is before y
"
Introspect calling object,"class A():
    def go(self):
        b=B()
        b.func()

class B():
    def func(self):
        import inspect
        print inspect.currentframe().f_back.f_locals['self']

if __name__ == '__main__':
    a = A()
    a.go()
"
"Python - Function ""which"" from R in Python","In [8]: import numpy as np

In [9]: x = np.arange(9.).reshape(3, 3)

In [10]: x
Out[10]: 
array([[ 0.,  1.,  2.],
       [ 3.,  4.,  5.],
       [ 6.,  7.,  8.]])

In [11]: x[np.where(x>5)]
Out[11]: array([ 6.,  7.,  8.])

In [12]: x[x>5]
Out[12]: array([ 6.,  7.,  8.])
"
Specifying a boolean filter expression to a python script,"import optparse, sys

# Assume your CSV data is read into a list of dictionaries
sheet = [
    {'StudentId': 1, 'StudentFirstName': 'John', 'StudentLastName': 'Doe', 'StudentZipCode': '12345', 'StudentCommuteMethod': 'Bus'},
    {'StudentId': 2, 'StudentFirstName': 'Bob', 'StudentLastName': 'Chen', 'StudentZipCode': '12345', 'StudentCommuteMethod': 'Bus'},
    {'StudentId': 3, 'StudentFirstName': 'Jane', 'StudentLastName': 'Smith', 'StudentZipCode': '12345', 'StudentCommuteMethod': 'Train'},
    {'StudentId': 4, 'StudentFirstName': 'Dave', 'StudentLastName': 'Burns', 'StudentZipCode': '45467', 'StudentCommuteMethod': 'Bus'},
]

# Options parsing
parser = optparse.OptionParser()
parser.add_option('--filter', type='string', dest='filter')
options, args = parser.parse_args()

# Filter option is required
if options.filter is None:
    print >> sys.stderr, 'error: no filter expression given'
    sys.exit(1)

# Process rows and build result set
result = []
for row in sheet:
    # Bind each column to a local variable (StudentId, StudentFirstName, etc.);
    # this allows evaluating Python expressions on a row, for example:
    # 'StudentCommuteMethod = ""Bus"" and StudentZipCode = ""12345""'
    for col, val in row.iteritems():
        exec '%s = %s' % (col, repr(val))

    # Apply filter to the row
    if eval(options.filter):
        result.append(row)

# Print out result set
for row in result:
    print row
"
Python loops to check columns," for line in open('data.tsv'):
    items = line.strip().split()
    if len(items)>2 and items[2] == ""word"":
         print ""word""
         if len(items)>3 and items[3] != """":
             print ""something found""
         else:
             print ""nothing found""
"
Manipulating rows of csv file in python,"import csv
import math

f = open('citydata.csv')

csv_f = csv.reader(f)
content = [row for row in csv_f]

for row in content[1:]:
    x1 = float(row[2])
    y1 = float(row[3])
    for rowOther in content[1:]:
        x2 = float(rowOther[2])
        y2 = float(rowOther[3])

        answer = (x1-(math.pow(x2,2))) - (y1-(math.pow(y2,2)))

        print(answer)
"
Append/pop specific element of a string to the list when iterating over it,"def find_letter(item):
    word="""".join([letter for letter in item if letter!='a'])
    lst=[letter for letter in item if letter=='a']
    return lst,word
"
How to move Sprite in Pygame,"import pygame
import os

# it is better to have an extra variable, than an extremely long line.
img_path = os.path.join('C:\Python27', 'player.png')

class Bird(object):  # represents the bird, not the game
    def __init__(self):
        """""" The constructor of the class """"""
        self.image = pygame.image.load(img_path)
        # the bird's position
        self.x = 0
        self.y = 0

    def handle_keys(self):
        """""" Handles Keys """"""
        key = pygame.key.get_pressed()
        dist = 1 # distance moved in 1 frame, try changing it to 5
        if key[pygame.K_DOWN]: # down key
            self.y += dist # move down
        elif key[pygame.K_UP]: # up key
            self.y -= dist # move up
        if key[pygame.K_RIGHT]: # right key
            self.x += dist # move right
        elif key[pygame.K_LEFT]: # left key
            self.x -= dist # move left

    def draw(self, surface):
        """""" Draw on surface """"""
        # blit yourself at your current position
        surface.blit(self.image, (self.x, self.y))


pygame.init()
screen = pygame.display.set_mode((640, 400))

bird = Bird() # create an instance
clock = pygame.time.Clock()

running = True
while running:
    # handle every event since the last frame.
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit() # quit the screen
            running = False

    bird.handle_keys() # handle the keys

    screen.fill((255,255,255)) # fill the screen with white
    bird.draw(screen) # draw the bird to the screen
    pygame.display.update() # update the screen

    clock.tick(40)
"
python : list of dictionary values by alphabetical order of keys,">>> dictionary = {'foo': 42, 'bar': 38, 'baz': 20}
>>> [v for k, v in sorted(dictionary.iteritems())]
[38, 20, 42]
>>> [dictionary[k] for k in sorted(dictionary)]
[38, 20, 42]
"
"Finding the (x,y) indexes of specific (R,G,B) color values from images stored in NumPy ndarrays","coords = zip(indices[0], indices[1])
"
Scipy label erosion,"B = scipy.ndimage.laplace(A)
B = np.abs(B, B) # Preform abs in-place
B /= B  # This will produce a divide by zero warning that you can safely ignore
B *= A  
"
Combining CSV files column-wise,"import csv
with open('A','rb') as f1, open('B','rb') as f2, open('out.csv','wb') as w:
    writer = csv.writer(w)
    r1,r2 = csv.reader(f1),csv.reader(f2)
    while True:
        try:
            writer.writerow(next(r1)+next(r2))
        except StopIteration:
            break
"
pandas test if str contains one of a list,">>> import re
>>> matches = ['$money', 'x^y']
>>> map(re.escape, matches)
['\\$money', 'x\\^y'] # strings can now be matched literally with str.contains
"
Zeroth-order Bessel function Python,">>> print scipy.special.kn.__doc__
kn(x1, x2[, out])

y=kn(n,x) returns the modified Bessel function of the second kind (sometimes called the third kind) for
integer order n at x.
>>> scipy.special.kn(0, 1)
0.42102443824070834
"
"Dictionary or If statements, Jython","class  MyHandler(object):
    def handle_extractTitle(self, dom):
        # do something

    def handle_extractMetaTags(self, dom):
        # do something

    def handle(self, type, dom):
        func = getattr(self, 'handle_%s' % type, None)
        if func is None:
            raise Exception(""No handler for type %r"" % type)
        return func(dom)
"
Word ranking partial completion,"def fact(n):
    """"""factorial of n, n!""""""

    f = 1

    while n > 1:
         f *= n
         n -= 1

    return f



def rrank(s):
    """"""Back-end to rank for 0-based rank of a list permutation""""""

    # trivial case
    if len(s) < 2: return 0

    order = s[:]
    order.sort()

    denom = 1

    # account for multiple occurrences of letters
    for i, c in enumerate(order):
        n = 1
        while i + n < len(order) and order[i + n] == c:
            n += 1

        denom *= n

    # starting letters alphabetically before current letter
    pos = order.index(s[0])

    #recurse to list without its head
    return fact(len(s) - 1) * pos / denom + rrank(s[1:])



def rank(s):
    """"""Determine 1-based rank of string permutation""""""

    return rrank(list(s)) + 1



strings = [
    ""ABC"", ""CBA"", 
    ""ABCD"", ""BADC"", ""DCBA"", ""DCAB"", ""FRED"", 
    ""QUESTION"", ""BOOKKEEPER"", ""JACBZPUC"",
    ""AAAB"", ""AABA"", ""ABAA"", ""BAAA""
]

for s in strings:
    print s, rank(s)
"
python: split string after comma and dots,">>> print re.split(r'(?<=[,.])(?<!\d.)\s', text)
['This is,', 'a sample text.', 'Some more text.', '$1,200 test.']
"
Python remove all whitespace in a string,"sentence = ' hello  apple'
sentence.replace("" "", """")
>>> 'helloapple'
"
How to call a function with delay in tkinter?,"import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, parent):
        tk.Frame.__init__(self, parent)

        self.canvas = tk.Canvas(self, width=400, height=400)
        self.canvas.pack(fill=""both"", expand=True)

        self.canvas.bind(""<1>"", self.on_click)

    def on_click(self, event):
        self.draw_piece(event.x, event.y)
        self.after(2000, self.draw_piece, event.x+40, event.y+40, ""green"")

    def draw_piece(self, x, y, color=""white""):
        self.canvas.create_oval(x-10, y-10, x+10, y+10, outline=""black"", fill=color)

if __name__ == ""__main__"":
    root = tk.Tk()
    Example(root).pack(fill=""both"", expand=True)
    root.mainloop()
"
"Using a dictionary in Cython , especially inside nogil","from libcpp.map cimport map
from libcpp.string cimport string
from libcpp.vector cimport vector
from cython.operator cimport dereference, preincrement

def f():
    my_dict = {'a':[1,2,3], 'b':[4,5] , 'c':[7,1,2]}
    # the following conversion has an computational cost to it 
    # and must be done with the GIL. Depending on your design
    # you might be able to ensure it's only done once so that the
    # cost doesn't matter much
    cdef map[string,vector[int]] m = my_dict

    # cdef statements can't go inside no gil, but much of the work can
    cdef map[string,vector[int]].iterator end = m.end()
    cdef map[string,vector[int]].iterator it = m.begin()

    cdef int total_length = 0

    with nogil: # all  this stuff can now go inside nogil   
        while it != end:
            total_length += dereference(it).second.size()
            preincrement(it)

    print total_length
"
Python Pandas counting and summing specific conditions,">> df = pd.DataFrame({'a': [1, 2, 3]})
>> df[df.a > 1].sum()   
a    5
dtype: int64
"
Python OOP: Practice passing results of one method into another,"def f (another_func): return another_func()
def g (): print ""blah""
f(g)
"
Only add to a dict if a condition is met,"params = urllib.urlencode({k: v for k, v in (('orange', orange), ('apple', apple)) if v is not None})
"
Sum of values across all nested dictionaries in python,"sum(x for counter in numbers.values() for x in counter.values())
"
"Check if a string starts with the a specific word, if True then print word - PYTHON","import re
for word in sidemembers:
    if re.search(r'^Base', word) is not None:
        print word

for word in sidemembers:
    if word[:4] == 'Base':
        print word
"
Parsing simple weather data,"import re
with open('weather.txt') as weather_file:
    data = re.findall(r'Heat Index.*?(\d+).*?(\d+).*?', weather_file.read())
data = [map(int, row) for row in data]
"
pythonic solution for finding the other element in a list of length two,"return set(pair) - [core]
"
GTK errors when importing pynotify,"import os
from contextlib import contextmanager

@contextmanager
def suppress_output(fd):
    """"""
    Suppress output to the given ``fd``::

       with suppress_fd(sys.stderr):
           # in this block any output to standard error is suppressed

    ``fd`` is an integral file descriptor, or any object with a ``fileno()``
    method.
    """"""
    if hasattr(fd, 'fileno'):
        # we were given a file-like object with an underlying fd
        if hasattr(fd, 'flush'):
            # flush Python-side buffers before redirecting
            fd.flush()
        # get the fd to redirect
        fd = fd.fileno()

    # duplicate the file descriptor to restore it eventually
    oldfd = os.dup(fd)
    try:
        # open the trash can
        devnull = os.open(os.devnull, os.O_WRONLY)
        try:
            # point the file descriptor to the trash can
            os.dup2(devnull, fd)
        finally:
            # close the old trash can descriptor, we don't need it anymore
            # since the fd now points to the trash can
            os.close(devnull)
        # enter the callers block
        yield
        # restore the file descriptor
        os.dup2(oldfd, fd)
    finally:
        # close the duplicated copy of the original fd, we don't need it
        # anymore now that fd is restored
        os.close(oldfd)
"
How to write variable and array on the same line for a text file?,"thefile.write(""%s "" % name)
for item in thelist:
  thefile.write(""%s,""% item)
"
lxml etree xmlparser namespace problem,"# http://wiki.tei-c.org/index.php/Remove-Namespaces.xsl
xslt='''<xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
<xsl:output method=""xml"" indent=""no""/>

<xsl:template match=""/|comment()|processing-instruction()"">
    <xsl:copy>
      <xsl:apply-templates/>
    </xsl:copy>
</xsl:template>

<xsl:template match=""*"">
    <xsl:element name=""{local-name()}"">
      <xsl:apply-templates select=""@*|node()""/>
    </xsl:element>
</xsl:template>

<xsl:template match=""@*"">
    <xsl:attribute name=""{local-name()}"">
      <xsl:value-of select="".""/>
    </xsl:attribute>
</xsl:template>
</xsl:stylesheet>
'''

xslt_doc=ET.parse(io.BytesIO(xslt))
transform=ET.XSLT(xslt_doc)
dom=transform(dom)
"
"python, wrap and object into a list if not is an iterable","if not hasattr(obj, ""__iter__""): #returns True if type of iterable - same problem with strings
    obj = list(obj)
return obj
"
python `list` and `for` return different results,">>> res[0][0] is res[1][0] is res[2][0]
True
>>> res[0][1] is res[1][1] is res[2][1]
True
"
Store different datatypes in one NumPy array?,">>> a = numpy.array(['a', 'b', 'c', 'd', 'e'])
>>> b = numpy.arange(5)
>>> records = numpy.rec.fromarrays((a, b), names=('keys', 'data'))
>>> records
rec.array([('a', 0), ('b', 1), ('c', 2), ('d', 3), ('e', 4)], 
      dtype=[('keys', '|S1'), ('data', '<i8')])
>>> records['keys']
rec.array(['a', 'b', 'c', 'd', 'e'], 
      dtype='|S1')
>>> records['data']
array([0, 1, 2, 3, 4])
"
Check whether a string is alphabetical for languages other than english,"words = ['você', 'quer', 'uma', 'maçã']
for word in words:
    word.isalpha()
"
"How to replace years without leading zeros, with leading zeros using Python re?","import re
re.sub(r',(\d\d)-', r',00\1-', '363898, Catullus,84-11-1 BC')
"
Dealing with wacky encodings in Python,">>> def conv(s):
...   if isinstance(s, unicode):
...     s = s.encode('iso-8859-1')
...   return s.decode('string-escape').decode('utf-8')
... 
>>> map(conv, [u'D\\xc3\\xa9cor', u'D\xc3\xa9cor', 'D\\xc3\\xa9cor', 'D\xc3\xa9cor'])
[u'D\xe9cor', u'D\xe9cor', u'D\xe9cor', u'D\xe9cor']
"
Avoiding Excel's Scientific Notation Rounding when Parsing with Pandas,"print ""%15.0f"" % df.x
135061808695
"
python : list of dictionary values by alphabetical order of keys,"[v for k, v in sorted(dictionary.iteritems())]
"
How to create a void matrix (not filled with ones or zeros) in Python of expected dimensions M times N?,">>> from collections import defaultdict
>>> mat = defaultdict(lambda: None)
>>> mat[4,4]
>>> mat[4,4] is None
True
"
Splitting by character using regular expressions,"import re
s = 'abc-abc- abc -abc - abc'
r = re.compile('\s*-\s*')
r.split(s)
"
Looping through python function arguments,"functionOne(*args):
    print args
    args = tuple(map(str.lower, args))
    print args[0]
"
How can I split this list of strings to list of lists of ints?,"In [10]: lis=['25 32 49 50 61 72 78 41\n',
   ....:  '41 51 69 72 33 81 24 66\n']

In [11]: [map(int,x.split()) for x in lis]
Out[11]: [[25, 32, 49, 50, 61, 72, 78, 41], [41, 51, 69, 72, 33, 81, 24, 66]]
"
Converting a Doc object into a string in python,"freqDict = {}
...
if word not in freqDict:
    freqDict[word] = 1
else:
    freqDict[word] += 1
"
Python: Constructing & Printing matrices,"seqA='AACTGGCAG'
seqB='TACGCTGGA'

def compute_LCS(seqA, seqB):
    LCSmatrix = [len(seqB)*[0] for row in seqA]
    for row in range(len(seqB)):
        for col in range(len(seqA)):
            if seqB[row] == seqA[col]:
                if row==0 or col==0:
                    LCSmatrix[row][col] = 1
                else:
                    LCSmatrix[row][col] = LCSmatrix[row-1][col-1] + 1_
            else:
                LCSmatrix[row][col] = 0
    return LCSmatrix

def printMatrix(seqA, seqB, LCSmatrix):
    print ' '.join('%2s' % x for x in ' '+seqA)
    for i, element in enumerate(LCSmatrix):
        print '%2s' % seqB[i], ' '.join('%2i' % x for x in element)

matrix = compute_LCS(seqA, seqB)
printMatrix(seqA, seqB, matrix)
"
flattening list if sublists are same length,">>> import numpy as np
>>> a = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])
>>> a
array([[ 1,  2],
       [ 3,  4],
       [ 5,  6],
       [ 7,  8],
       [ 9, 10]])
>>> a.ravel()
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
>>> timeit.timeit(""a.ravel()"",
                  setup=""import numpy as np; a = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]])"")
0.36390113830566406
"
Python timedelta in years,"from datetime import datetime
def yearsago(years, from_date=None):
    if from_date is None:
        from_date = datetime.now()
    try:
        return from_date.replace(year=from_date.year - years)
    except ValueError:
        # Must be 2/29!
        assert from_date.month == 2 and from_date.day == 29 # can be removed
        return from_date.replace(month=2, day=28,
                                 year=from_date.year-years)
"
Turning binary string into an image with PIL,"value = ""0110100001100101011011000110110001101111""*10**5

def using_fromarray():
    carr = np.array([(255,255,255), (0,0,0)], dtype='uint8')
    data = carr[np.array(map(int, list(value)))].reshape(-1, 8, 3)
    img = Image.fromarray(data, 'RGB')
    return img

def using_putdata():
    cmap = {'0': (255,255,255),
            '1': (0,0,0)}

    data = [cmap[letter] for letter in value]
    img = Image.new('RGB', (8, len(value)//8), ""white"")
    img.putdata(data)
    return img
"
sort dict by value python,sorted(data.values())
Find a dictionary in a list of dictionaries,"print filter(lambda ticket: ticket[""summary""] == issue[""title""], tickets)
"
Python web Automation to get Email from Webpage,"
import re
import requests
from bs4 import BeautifulSoup

r = requests.get('http://www.digitalseo.in/')
data = r.text
soup = BeautifulSoup(data, ""html.parser"")

for i in soup.find_all(href=re.compile(""mailto"")):
    print i.string
"
How to add in a dictionary the values that have similar keys?,"from collections import defaultdict:

out = defaultdict(int)
for key, value in original.iteritems():
    out[key[0].upper()] += value
"
Adding python lists as new columns to a csv file,"zipped = zip(list1, list2, list3, list4)

with open('in.csv', 'rb') as infile, open('out.csv' 'wb') as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile)
    for i, row in enumerate(reader):
        row.extend(zipped[i])
        writer.writerow(row)
"
How to print an object in Python,"class Detail:
    def __str__(self):
        return ""string shown to users (on str and print)""
    def __repr__(self):
        return ""string shown to developers (at REPL)""
"
Storing large unstructured list in Python,"In [7]: a = []
        for i in range(1, 500):
            if i % 10 == 0:
                a.append(i)
            else:
                a.append(np.random.randn(i, i))
In [8]: %%timeit
        store('my_data.h5', 'a', a)
        read_data = read('my_data.h5', 'a')
1 loops, best of 3: 1.32 s per loop
In [9]: %%timeit
        with open('test.pickle', 'wb') as f:
            cPickle.dump(a, f)
        with open('test.pickle', 'rb') as f:
            read_data = cPickle.load(f)
1 loops, best of 3: 1min 58s per loop
"
Python 3.x.x one variable spread across multiple .py files,"# part2.py
# gvars is defined later
def scream():
 print(gvars.sound)


# part1.py
import part2

class GameVariables:
    pass

if __name__==""__main__"":
    gvars = GameVariables()
    part2.gvars = gvars
    gvars.sound = ""Yooo""
    part2.scream()
    gvars.sound = ""Whaa""
    part2.scream()

#output
Yooo
Whaa
"
django: exclude certain form elements based on a condition,"from django.forms import Modelform
from django.forms.widgets import HiddenInput

class SomeForm(ModelForm):

    def __init__(self, *args, **kwargs):
        # call constructor to set up the fields. If you don't do this 
        # first you can't modify fields.
        super(SomeForm, self).__init__(*args, **kwargs)

        try:
            # make somefunc return something True
            # if you can change the driver.
            # might make sense in a model?
            canchangedriver = self.instance.somefunc()                          
        except AttributeError:
            # unbound form, what do you want to do here?
            canchangedriver = True # for example?

        # if the driver can't be changed, use a input=hidden
        # input field.
        if not canchangedriver:
            self.fields[""Drivers""].widget = HiddenInput()

    class Meta:
        model = SomeModel
"
Append to Python list all possible transformations for each list item,"from itertools import product

def all_versions_of_word(word, alt_chars, skip_orig=True):
    chars = [ch + alt_chars.get(ch, """") for ch in word]
    combos = product(*chars)
    if skip_orig and word: next(combos)  # drop the first item
    return ("""".join(c) for c in combos)

def transform_passwords(passwords, alt_chars={""a"":""@"", ""s"":""$""}):
    for word in passwords:
        yield from all_versions_of_word(word, alt_chars)
"
Simplify a date comparison,"return cmp(ayy, byy) or cmp(amm, bmm) or cmp(add, bdd)
"
How to get scrape DIV having Class or ID containing specific text,"import re

soup.find_all('div', id=re.compile('^content'))
"
"Consecutive, Overlapping Subsets of Array (NumPy, Python)",">>> from itertools import islice
>>> n=4
>>> np.array(zip(*[islice(A,i,None) for i in range(n)]))
array([[ 1,  2,  3,  4],
       [ 2,  3,  4,  5],
       [ 3,  4,  5,  6],
       [ 4,  5,  6,  7],
       [ 5,  6,  7,  8],
       [ 6,  7,  8,  9],
       [ 7,  8,  9, 10],
       [ 8,  9, 10, 11],
       [ 9, 10, 11, 12],
       [10, 11, 12, 13],
       [11, 12, 13, 14]])
"
Best way to have a python script copy itself?,"#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# Author: R.F. Smith <rsmith@xs4all.nl>
# $Date: 2013-11-24 22:20:54 +0100 $
# $Revision: 3d4f750 $
#
# To the extent possible under law, Roland Smith has waived all copyright and
# related or neighboring rights to update-modified-keywords.py. This work is
# published from the Netherlands.
# See http://creativecommons.org/publicdomain/zero/1.0/

""""""Remove and check out those files that that contain keywords and have
changed since in the last commit in the current working directory.""""""

from __future__ import print_function, division
import os
import mmap
import sys
import subprocess


def checkfor(args):
    """"""Make sure that a program necessary for using this script is
    available.

    Arguments:
    args -- string or list of strings of commands. A single string may
            not contain spaces.
    """"""
    if isinstance(args, str):
        if ' ' in args:
            raise ValueError('No spaces in single command allowed.')
        args = [args]
    try:
        with open(os.devnull, 'w') as bb:
            subprocess.check_call(args, stdout=bb, stderr=bb)
    except subprocess.CalledProcessError:
        print(""Required program '{}' not found! exiting."".format(args[0]))
        sys.exit(1)


def modifiedfiles():
    """"""Find files that have been modified in the last commit.

    :returns: A list of filenames.
    """"""
    fnl = []
    try:
        args = ['git', 'diff-tree', 'HEAD~1', 'HEAD', '--name-only', '-r',
                '--diff-filter=ACMRT']
        with open(os.devnull, 'w') as bb:
            fnl = subprocess.check_output(args, stderr=bb).splitlines()
            # Deal with unmodified repositories
            if len(fnl) == 1 and fnl[0] is 'clean':
                return []
    except subprocess.CalledProcessError as e:
        if e.returncode == 128:  # new repository
            args = ['git', 'ls-files']
            with open(os.devnull, 'w') as bb:
                fnl = subprocess.check_output(args, stderr=bb).splitlines()
    # Only return regular files.
    fnl = [i for i in fnl if os.path.isfile(i)]
    return fnl


def keywordfiles(fns):
    """"""Filter those files that have keywords in them

    :fns: A list of filenames
    :returns: A list for filenames for files that contain keywords.
    """"""
    # These lines are encoded otherwise they would be mangled if this file
    # is checked in my git repo!
    datekw = 'JERhdGU='.decode('base64')
    revkw = 'JFJldmlzaW9u'.decode('base64')
    rv = []
    for fn in fns:
        with open(fn, 'rb') as f:
            try:
                mm = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
                if mm.find(datekw) > -1 or mm.find(revkw) > -1:
                    rv.append(fn)
                mm.close()
            except ValueError:
                pass
    return rv


def main(args):
    """"""Main program.

    :args: command line arguments
    """"""
    # Check if git is available.
    checkfor(['git', '--version'])
    # Check if .git exists
    if not os.access('.git', os.F_OK):
        print('No .git directory found!')
        sys.exit(1)
    print('{}: Updating modified files.'.format(args[0]))
    # Get modified files
    files = modifiedfiles()
    if not files:
        print('{}: Nothing to do.'.format(args[0]))
        sys.exit(0)
    files.sort()
    # Find files that have keywords in them
    kwfn = keywordfiles(files)
    for fn in kwfn:
        os.remove(fn)
    args = ['git', 'checkout', '-f'] + kwfn
    subprocess.call(args)


if __name__ == '__main__':
    main(sys.argv)
"
loop until list element N-1,"from itertools import islice
my_list = [1, 2, 3, 4]
for item in islice(my_list, len(my_list) - 1):
    print(item)
"
unable to quit wxpython,"import wx
import os
#import pandas as pd
#import numpy as np
#import matplotlib.pyplot as ply
#from scipy.stats import linregress

class MyFileDropTarget(wx.FileDropTarget):

    #----------------------------------------------------------------------
    def __init__(self, obj):
        wx.FileDropTarget.__init__(self)
        self.obj = obj

    #----------------------------------------------------------------------
    def OnDropFiles(self, x, y, filenames):
        #self.obj.SetInsertionPointEnd(y)
        #self.obj.WriteText(""\n%d file(s) dropped at %d,%d:\n"" %
        #                   (len(filenames), x, y))
        for filepath in filenames:
            self.obj.WriteText(filepath + '\n')


class MyPanel(wx.Panel):

    def __init__(self, parent):
        wx.Panel.__init__(self, parent)

        #Create some sizers
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        grid = wx.GridBagSizer(hgap=5, vgap=5)
        hSizer = wx.BoxSizer(wx.HORIZONTAL)

        #Create a button
        self.button = wx.Button(self, label=""Test"")
        #self.Bind(wx.EVT_BUTTON, self.OnClick,self.button)

        # Radio Boxes
        sysList = ['QEXL','QEX10','QEX7']
        wlList = ['1100', '1400', '1800']
        sys = wx.RadioBox(self, label=""What system are you calibrating ?"",
                        pos=(20, 40), choices=sysList,  majorDimension=3,
                        style=wx.RA_SPECIFY_COLS)
        grid.Add(sys, pos=(1,0), span=(1,3))

        WL = wx.RadioBox(self, label=""Maximum WL you currently Calibrating ?"",
                        pos=(20, 100), choices=wlList,  majorDimension=0,
                        style=wx.RA_SPECIFY_COLS)
        grid.Add(WL, pos=(2,0), span=(1,3))

        x = 3
        for widget in range(1, 4):
            lbl = wx.StaticText(self, label=""Cal File {} :"".format(widget))
            grid.Add(lbl, pos=(x,0))
            txt = wx.TextCtrl(self, name=""Cal_{}"".format(widget),
                                     value="""", size=(240,-1))
            dt = MyFileDropTarget(txt)
            txt.SetDropTarget(dt)
            grid.Add(txt, pos=(x,1))
            x += 1

        hSizer.Add(grid, 0, wx.ALL, 5)

        mainSizer.Add(hSizer, 0, wx.ALL, 5)
        mainSizer.Add(self.button, 0, wx.CENTER)
        self.SetSizer(mainSizer)


class MainWindow(wx.Frame):
    def __init__(self, parent, title):
        wx.Frame.__init__(self, parent, title=title, size=(400,400))
        panel = MyPanel(self)

        self.CreateStatusBar() # A Statusbar in the bottom of the window

        # Creating the menubar.
        menubar = wx.MenuBar()
        fileMenu = wx.Menu()
        helpMenu = wx.Menu()

        menubar.Append(fileMenu, '&File')
        menuOpen = fileMenu.Append(wx.ID_OPEN, ""&Open"","" Open a file to edit"")
        #self.Bind(wx.EVT_MENU, self.OnOpen, menuOpen)
        fileMenu.AppendSeparator()
        menuExit = fileMenu.Append(wx.ID_EXIT,""E&xit"","" Terminate the program"")
        self.Bind(wx.EVT_MENU, self.OnExit, menuExit)

        menubar.Append(helpMenu, '&Help')
        menuAbout= helpMenu.Append(wx.ID_ABOUT, ""&About"",
                                "" Information about this program"")
        self.Bind(wx.EVT_MENU, self.OnAbout, menuAbout)

        self.SetMenuBar(menubar)

        self.Show(True)

    def OnAbout(self,e):
        # A message dialog box with an OK button. wx.OK is a standard ID in wxWidgets.
        dlg = wx.MessageDialog( self, ""A quick test to see if your scans pass repeatability"", ""DOMA-64 Tester"", wx.OK)
        dlg.ShowModal() # Show it
        dlg.Destroy() # finally destroy it when finished.

    def OnExit(self,e):
        # Close the frame.
        #del self.fdt
        self.Close(True)


app = wx.App(False)
frame = MainWindow(None, ""Sample editor"")
app.MainLoop()
"
How to find the sum of each element in a list with each other element,"lst = [1, 2, 3, 4]

def prize(L):
    pair_list = []
    C = 4

    # Creates a list of tuples (1, 2), (1, 3), etc
    for x in L:
        for y in L:
            # if x != y | To prevent 1 + 1 and 2 + 2 (following example)
            # (y, x) not in pair_list | Prevent inverted pairs
            if x != y and (y, x) not in pair_list:
                pair_list.append((x, y))

    # Return list tuples that add to constant           
    return [(x, y) for x, y in pair_list if x + y == C]

print('Possible', prize(lst))
"
add leading zeros to a list of numbers in Python,">>> [""{:06d}"".format(item) for item in data]
['000001', '000010', '000313', '004000', '051234', '123456']
"
Combine two lists of lists into a dictionary python,"from itertools import izip
sentences_en = [[u'sid(s1).', u'sentence1', 'sentence1_info'], [u'sid(s2).', u'sentence2', 'sentence2_info']]
sentences_de = [['sid(s1).', 'Satz1', 'Staz1_info'], ['sid(s2).', 'Satz2', 'Staz2_info']]
mapping = {s_en[1]: s_de[1] for (s_en ,s_de) in izip(sentences_en, sentences_de)}
"
create lists of tuples from two lists,"from itertools.islice

def divvy_up(it, lengths):
    it = iter(it)
    for length in lengths:
        yield tuple(islice(it, length))
"
python - replace string entry with a dictionary entry,"re.sub(r'{([^{}]+)}', lambda m: str(data[m.group(1)]), template_text)
"
Python: classes handling mutable variables in inherited classes which depend on parent class,"class CommonParent(object):

    @property
    def format_field(self):
        return u'parent_format'

    @property
    def mutable_field(self):
        return u'parent_replace'

    @property
    def result_string(self):
        return '{0} {1}'.format(self.mutable_field, self.format_field)


class Child1(CommonParent):
    @property
    def mutable_field(self):
        return u'child1_replace'


class Child2(CommonParent):
    @property
    def format_field(self):
        return u'child2_format'

    @property
    def mutable_field(self):
        return u'child2_replace'


class Result1(Child1):
    pass


class Result2(Child2):
    pass


if __name__ == '__main__':
    r1 = Result1()
    print(getattr(r1, 'result_string'))

    r2 = Result2()
    print(getattr(r2, 'result_string'))
"
Python some special products of a given list,"l=['A1','A2','A3','B1','B2','B3','C1','C2','C3','D1','D2','D3']
result = [i + j for i in l for j in l if int(j[1]) == int(i[1]) + 1 or (j[1] == '1' and i[1] == '3')]
print(result)
"
"python Scrapy CrawlSpider: Rule doesn't apply after logged in, only crawled the first page","def parse_links(self, response):
    hxs = Selector(response)
    links = hxs.xpath('//a[contains(@href, ""topic"")]')
    for link in links:
        title = ''.join(link.xpath('./@title').extract())
        url = ''.join(link.xpath('./@href').extract())
        meta={'title':title,}
        yield Request(url, callback = self.parse_posts, meta=meta,)

parse_start_url = parse_links
"
Graphs in python using matplotlib,"def graph(formula, x_range):
    x = np.array(x_range)
    y = formula(x)  # <-----
    plt.plot(x, y, 'r--')
    plt.show()

graph(lambda x: (x-3) * (x-2), range(-3,3))  # <---
"
How to directly access class instances through class dictionary in Python,"import networkx as nx 
G=nx.Graph() 
for person in persons: 
  if person.father_id != -1:
    G.add_edge(person, persons_by_id[person.father_id]) 
"
Use a variable for an Xpath query in Python,"for a_movie in root.xpath('/movies/a_movie'):
    for elem in a_movie:
        print ElementTree.tostring(elem),
"
Algorithm to compare two files in Python,"import re

raw_patterns = [r'aaa', r'bbb', r'ccc']
patterns = [re.compile(p) for p in raw_patterns]

names = ""foo"", ""bar""

for name in names:
    with open(name + "".log"", ""r"") as in_fp, open(name + ""_temp.log"", ""w"") as temp:
        for line in in_fp:
            if not any(patt.match(line) for patt in patterns):
                temp.write(line)
"
Python: How to escape 'lambda',">>> import argparse
>>> parser = argparse.ArgumentParser(""Calculate something with a quantity commonly called lambda."")
>>> parser.add_argument(""-l"", ""--lambda"",
...     help=""Defines the quantity called lambda"",
...     type=float, dest='lambda_', metavar='LAMBDA')
_StoreAction(option_strings=['-l', '--lambda'], dest='lambda_', nargs=None, const=None, default=None, type=<type 'float'>, choices=None, help='Defines the quantity called lambda', metavar='LAMBDA')
>>> parser.print_help()
usage: Calculate something with a quantity commonly called lambda.
       [-h] [-l LAMBDA]

optional arguments:
  -h, --help            show this help message and exit
  -l LAMBDA, --lambda LAMBDA
                        Defines the quantity called lambda
>>> args = parser.parse_args(['--lambda', '4.2'])
>>> args.lambda_
4.2
"
Add new field to access table using python,"import pyodbc

MDB = 'c:/path/to/my.mdb'
DRV = '{Microsoft Access Driver (*.mdb)}'
PWD = 'my_password'

conn = pyodbc.connect('DRIVER=%s;DBQ=%s;PWD=%s' % (DRV,MDB,PWD))
c = conn.cursor()
c.execute(""ALTER TABLE my_table ADD COLUMN my_column INTEGER;"")
conn.commit()
c.close()
conn.close()
"
Django Template Page Outputting Nothing,"class OfferView(View):

    template_name = ""generic_app/offers.html""

    def get(self, request, *args, **kwargs):
        return load_offers(request)
"
Join XML strings pulled from the web using python,"import requests
from xml.etree import ElementTree as ET

urls = 'http://www.w3schools.com/xml/guestbook.asp', 'http://www.w3schools.com/xml/guestbook.asp'
xml_list = [requests.get(url).content for url in urls]

root1 = ET.fromstring(xml_list[0])
root2 = ET.fromstring(xml_list[1])

for element in root2.findall('guest'):
    root1.append(element)

print ET.tostring(root1)
"
Making an instance of a class equal to a definition Django,"from django.db.models import F

class PurchaseOrder(models.Model):
    product = models.ManyToManyField('Product', through='OrderItem')
    dollar_amount = models.DecimalField(verbose_name='Total Price')

class OrderItem(models.Model):
    current_price = models.DecimalField()
    product = models.ForeignKey(Product)
    order = models.ForeignKey(PurchaseOrder)

    def save(self, *args, **kwargs):
        if self.pk is None:
            # new item
            self.current_price = self.product.price_for_each_item
            self.order.dollar_amount = F('dollar_amount') + self.current_price
            self.order.save(update_fields=['dollar_amount']) # Or self.save() in Django < v1.5
        super(OrderItem, self).save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        self.order.dollar_amount = F('dollar_amount') - self.current_price
        self.order.save(update_fields=['dollar_amount']) # Or self.save() in Django < v1.5
        super(OrderItem, self).save(*args, **kwargs)
"
REST GET request on Python sending named argument,"import requests

url = 'baseuri:port/resource'
username = 'user'
password = 'pswd'

response = requests.get(url, auth=(username, password))
"
Applying a disc shaped mask to several locations in a NumPy array,"# Define inputs
maskcenters = np.array([
   [1, 1],
   [7, 2],
   [2, 8]])

out_shp = (10,10) # Output array shape
r = 2 # Radius of circles

# Get a disk kernel
X,Y = [np.arange(-r,r+1)]*2
disk_mask = X[:,None]**2 + Y**2 <= r*r

# Initialize output array and set the maskcenters as 1s 
out = np.zeros(out_shp,dtype=bool)
out[maskcenters[:,0],maskcenters[:,1]] = 1

# Use binary dilation to get the desired output
out = binary_dilation(out,disk_mask)
"
Matplotlib - Resizing x-axis,"X = range(Y.size)
Xlabels = [0,0.1,0.3,0.5]
plt.xticks(X, Xlabels)
plt.plot(X, Y)
"
Sort a Python dictionary by value,"sorted(list(x.items()), key=operator.itemgetter(1))"
Complex numbers usage in python,">>> abs(3 + 4j)
5.0
>>> pow(3 + 4j, 2)
(-7+24j)
"
learnpython.org modules exercise,"import re


results = []
for element in dir(re):
    if element.startswith('find'):
        results.append(element)

print sorted(results)
"
Open URL and place it to a string,"page = filehandle.read()
"
"What exactly does tell() return, and how do I use it to calculate percent of file read?","import os

fileobj.seek(0, os.SEEK_END)
size = fileobj.tell()
fileobj.seek(0, os.SEEK_SET)
"
Ignore an element while building list in python,"[r for r in (f(char) for char in string) if r is not None]
"
Python : How to access file from different directory,"import inspect
import os
import sys

def get_my_path():
    try:
        filename = __file__ # where we were when the module was loaded
    except NameError: # fallback
        filename = inspect.getsourcefile(get_my_path)
    return os.path.realpath(filename)

# path to ConfigManager.py
cm_path = get_my_path()
# go 6 directory levels up
sp_path = reduce(lambda x, f: f(x), [os.path.dirname]*6, cm_path)
constants_path = os.path.join(sp_path, ""conf"", ""constants.cfg"")
"
Python: How to check a string for substrings from a list?,"from itertools import imap
any(imap(s.__contains__, substring_list))
"
Double event registered on mouse-click if legend is outside axes,"import pylab
import numpy

# Create data for plotting
t = numpy.linspace(0, 1.0, 100) 
a = numpy.sin(2*numpy.pi*t)

# Set up figure
fig = pylab.figure()
ax = pylab.subplot(111)

# Plot figures    
lines = []    
for i in range(5):
    line = ax.plot(t, (i+1)*a, linestyle=':', picker=5, label='line%d'%(i+1)) 
    lines.append(line[0]) # Save plot lines

# Create legend
leg = ax.legend(bbox_to_anchor=(1.01, 1), loc=2) # Does not work as expected
#leg = ax.legend() # Works!!

# Get legend lines
leglines = leg.get_lines() 
# Set event for legend lines
for line in leglines:
    line.set_picker(5)

# Create a 2 way mapping between legend lines <-> plot lines    
line2leg = dict(zip(lines+leglines, leglines+lines))
count_dict = dict((l, 0) for l in lines )
# Define event function
def onpick(event):
    thisline = event.artist
    print event
    print thisline
    if thisline in lines:
        print 'lines'
        count_dict[thisline] = 0
    elif thisline in leglines:
        print 'leglines'
        thisline = line2leg[thisline]
        count_dict[thisline] += 1
    print 'added'
    if (count_dict[thisline] % 2) == 1:
        print count_dict[thisline]
        return
    print 'tested'
    if thisline.get_linestyle()==':':
        print "": -> -"" # For debugging
        thisline.set_linestyle('-')
        line2leg[thisline].set_linestyle('-')
    else:
        print ""- -> :"" # For debugging
        thisline.set_linestyle(':')
        line2leg[thisline].set_linestyle(':')
    fig.canvas.draw()

# connect event function    
fig.canvas.mpl_connect('pick_event', onpick)
pylab.show()
"
How to convert a tuple to a string in Python?,emaillist = '\n'.join(item[0] for item in queryresult)
Is there any better way to capture the screen than PIL.ImageGrab.grab()?,"import win32gui, win32ui, win32con, win32api
hwin = win32gui.GetDesktopWindow()
width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)
height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)
hwindc = win32gui.GetWindowDC(hwin)
srcdc = win32ui.CreateDCFromHandle(hwindc)
memdc = srcdc.CreateCompatibleDC()
bmp = win32ui.CreateBitmap()
bmp.CreateCompatibleBitmap(srcdc, width, height)
memdc.SelectObject(bmp)
memdc.BitBlt((0, 0), (width, height), srcdc, (left, top), win32con.SRCCOPY)
bmp.SaveBitmapFile(memdc, 'screenshot.bmp')
"
Parsing command line input for numbers,"import argparse

def parse_range(astr):
    result = set()
    for part in astr.split(','):
        x = part.split('-')
        result.update(range(int(x[0]), int(x[-1]) + 1))
    return sorted(result)

parser = argparse.ArgumentParser()
parser.add_argument('-n', type=parse_range)
args = parser.parse_args()
print(args.n)
"
Finding the correspondence of the elements of two columns in a two dimensional array in another 2D array,"a = np.loadtxt('file1.txt')
b = np.loadtxt('file2.txt')

aind = np.lexsort((a[:,1], a[:,0]))    
bind = np.lexsort((b[:,1], b[:,0]))

a = a[aind]
b = b[bind]
"
How to get the count of output in python,"j=0
for i in range (0, 5):
    #Other things you want to do
    j+=1
print j
"
How do do this list manipulation in Python? This is tricky,"lst = [[5, 44, 73, 23] , [7, 21, 99], [1, 32, 100]]
list(filter(lambda p: p is not None, reduce(lambda x, y: x + y, map(None, *lst))))
"
Create resource via POST specifying related field ID,"class HybridPrimaryKeyRelatedField(serializers.HyperlinkedRelatedField):
    """"""Serializes out as hyperlink, in as primary key""""""
    def to_internal_value(self, data):
        return self.get_queryset().get(pk=data)
"
Cannot interpolate in pandas dataframe,"def interpolate_delta(df, inplace=False):
    if not inplace:
        df = df.copy()
    ind = df.index
    df.index = df.index.total_seconds()
    df.interpolate(method=""index"", inplace=True)
    df.index = ind
    return df
"
python pandas parse_dates column wildcard for sqlalchemy in pandas 0.14.1?,"In [45]: date_cols = [col for col in df.columns if 'Date' in col]

In [47]: for col in date_cols:
   ....:     df[col] = pd.to_datetime(df[col])
   ....:     
"
Trouble with sudoku game in python 3.3.4,"#sudoku game
from random import randint

#generate board
def build_board():
    board=[]
    for i in range(9):
        block=[["" "","" "","" ""],
               ["" "","" "","" ""],
               ["" "","" "","" ""]]
        board.append(block)
    return board


##
## Ensure no other block in the same row has the value
##
def row_available(block, row, board, num):
    # Determine which of the main 3 rows this 3x3 block is at
    boardRow = int(block / 3);
    good = True
    for b in range(boardRow * 3, (boardRow * 3) + 3):
        if b != block:
            if num in board[b][row]:
                good = False
                break
    return good


##
## Ensure no other block in the same col has the value
##
def col_available(block, row, col, board, num):
    # Determine which of the main 3 columns this 3x3 block is at
    boardCol = block % 3;
    good = True
    for b in (boardCol, boardCol + 3, boardCol + 6):
        if b != block:
            if num == board[b][row][col]:
                good = False
                break
    return good


def fill_board(board):
    # to fill all numbers 1 through 9
    for num in range(1,10):
        # for each of the 9 3x3 blocks
        for block in range(len(board)):
            triedRow = [-1]
            foundSpot = False
            for i in range(3):
                row = -1
                while row in triedRow:
                    row = randint(0,2)
                triedRow.append(row)
                if "" "" in board[block][row] and row_available(block, row, board, num):
                    triedCol = [-1]
                    for j in range(3):
                        col = -1
                        while col in triedCol:
                            col = randint(0,2)
                        triedCol.append(col)
                        if "" "" == board[block][row][col] and col_available(block, row, col, board, num):
                            board[block][row][col] = num
                            foundSpot = True
                        if foundSpot:
                            break
                if foundSpot:
                    break
            if not foundSpot:
                print(""Never Found a Spot for "" + str(num) + "" in block "" + str(block))
    return board


#display board
def display(board):
    num=[]
    for i in board: #block level
        for subI in i: #row
            for subsubI in subI: #item
                num.append(subsubI)
    print(""---------------------------------------"")
    print(""| {} | {} | {} || {} | {} | {} || {} | {} | {} |"".format(num[0],num[1],num[2],num[9],num[10],num[11],num[18],num[19],num[20]))
    print(""---------------------------------------"")
    print(""| {} | {} | {} || {} | {} | {} || {} | {} | {} |"".format(num[3],num[4],num[5],num[12],num[13],num[14],num[21],num[22],num[23]))
    print(""---------------------------------------"")
    print(""| {} | {} | {} || {} | {} | {} || {} | {} | {} |"".format(num[6],num[7],num[8],num[15],num[16],num[17],num[24],num[25],num[26]))
    print(""---------------------------------------"")
    print(""---------------------------------------"")
    print(""| {} | {} | {} || {} | {} | {} || {} | {} | {} |"".format(num[27],num[28],num[29],num[36],num[37],num[38],num[45],num[46],num[47]))
    print(""---------------------------------------"")
    print(""| {} | {} | {} || {} | {} | {} || {} | {} | {} |"".format(num[30],num[31],num[32],num[39],num[40],num[41],num[48],num[49],num[50]))
    print(""---------------------------------------"")
    print(""| {} | {} | {} || {} | {} | {} || {} | {} | {} |"".format(num[33],num[34],num[35],num[42],num[43],num[44],num[51],num[52],num[53]))
    print(""---------------------------------------"")
    print(""---------------------------------------"")
    print(""| {} | {} | {} || {} | {} | {} || {} | {} | {} |"".format(num[54],num[55],num[56],num[63],num[64],num[65],num[72],num[73],num[74]))
    print(""---------------------------------------"")
    print(""| {} | {} | {} || {} | {} | {} || {} | {} | {} |"".format(num[57],num[58],num[59],num[66],num[67],num[68],num[75],num[76],num[77]))
    print(""---------------------------------------"")
    print(""| {} | {} | {} || {} | {} | {} || {} | {} | {} |"".format(num[60],num[61],num[62],num[69],num[70],num[71],num[78],num[79],num[80]))
    print(""---------------------------------------"")  

#test
board=build_board()
board=fill_board(board)
display=display(board)
"
Auto register a class when it's defined (but without importing it anywhere),"class CommandManager:
  @classmethod
  def execute(cls, command, *args, **kw):
    # import the command module
    commands_mod = __import__(""commands"", globals(), locals(), [command])
    mod = getattr(commands_mod, command)
    return mod.command_cls(*args, **kw).execute()
"
Understanding for loops and functions,"#!/usr/bin/python
#function invest defines initial amount invested, interest, and over how many years
import sys

def invest(amount, rate, time):
    growth = (amount * rate)
    # range generates a list, thus using memory
    # xrange is a generator so it doesn't use all memory
    for i in xrange(1, time + 1):
        print 'Year {0}: {1}'.format(i, amount + (growth * i))

    return growth

def compound(amount, rate, time, additional=0):
    # range generates a list, thus using memory
    # xrange is a generator so it doesn't use all memory
    for i in xrange(1, time + 1):
        amount += additional
        amount = int(amount + (amount * rate))
        print 'Year {0}: {1}'.format(i, amount)

if __name__ == '__main__':
    args = sys.argv
    time = 5
    if len(args) > 1:
        amount = int(args[1])
        rate = float(args[2])
        time = int(args[3])
        additional = int(args[4])

        compound(amount, rate, time=time, additional=additional)
        #growth = invest(2000, .025, time=time)
"
Python pandas plotting shift x-axis if twinx two y-axes,"df.boxplot(column='B', by='A')
plt.twinx()
plt.bar(left=plt.xticks()[0], height=df.groupby('A').count()['B'],
        align='center', alpha=0.3)
"
Changing values in decorator for nested functions,"def decorator(*a):
    def real_decorator(function):
        def wrapper(*args, **kwargs):
            function.flag = False
            function(*args, **kwargs)
            function.flag = True
        return wrapper
    return real_decorator
"
Python regex substitution using a dictionary,">>> from timeit import timeit
>>>
>>> setup = """"""
... import re
... a = 'a[b]cdef[g ]hi[ j]klmno[ p ]'
... d = {'b':2,'g':7,'j':10,'p':16}
... """"""
>>>
>>> timeit(r""re.sub(r'\[\s?(.*?)\s?\]',r'{\1}',a).format(**d)"", setup)
13.796708106994629
>>> timeit(r""re.sub(r'\[\s?(.*?)\s?\]', lambda m: str(d[m.group(1)]), a)"", setup)
6.593755006790161
"
Linux Command for Perl in Python,"import os
import subprocess

line = ""perl tilt.pl %s > final.txt""

framespdb = os.listdir(""prac_frames"")

for frames in framespdb:
    cmd = line % frames
    print(cmd)
    subprocess.Popen(cmd, shell=True)
"
Removing html image tags and everything in between from a string,"def remove_html_tags(data):
    p = re.compile(r'<.*?>')
    return p.sub('', data)
"
insert letter before vowel in word,"import re
re.sub(r""([aeiou])"",r""X\g<1>"", ""hello"")
"
re.split return None in function but normaly works OK,"def whois(k,  i):
    k = k[i]
    who = check_output(['whois',  k], universal_newlines=True)
    print(who)
    return  dict(map(str.strip,ele.split("":"",1)) for ele in re.findall('\w+:\s+.*', who))
d = whois([1,1,1,1, ""216.58.208.228""],4)

print(d[""NetHandle""])
from pprint import pprint as pp
pp(d)
"
Efficient Python implementation of numpy array comparisons,"maxlen = np.max(pairs,axis=(0,1))
dims = np.append(maxlen[::-1][:-1].cumprod()[::-1],1)

pairs1D = np.dot(pairs.reshape(-1,3),dims)
positions1D = np.dot(positions,dims)
mask_idx = ~(np.in1d(pairs1D,positions1D).reshape(-1,2).all(1))
out = pairs[mask_idx]
"
Parsing an equation with sub-formulas in python,"import ast
from math import sqrt

# same a previous recursion function but with looking for 'id' not 'name' attribute
def recursive_parse(node,substitutions):
    if hasattr(node.left,""id""):
        if node.left.id in substitutions.keys():
            node.left = substitutions[node.left.id]
    else:
        recursive_parse(node.left,substitutions)

    if hasattr(node.right,""id""):
        if node.right.id in substitutions.keys():
            node.right = substitutions[node.right.id]
    else:
        recursive_parse(node.right,substitutions)

def main(input):

    substitutions = {
        ""r"":""sqrt(x**2+y**2)""
        }

    for key,value in substitutions.items():
        substitutions[key] = ast.parse(substitutions[key], mode='eval').body

    # As this is an assignment operation, mode must be set to exec
    module = ast.parse(input, mode='exec')

    print ""Input:        "",ast.dump(module)

    recursive_parse(module.body[0].value,substitutions)

    print ""Substituted:  "",ast.dump(module)

    # give some values for the equation
    x = 3
    y = 2
    p = 1
    code = compile(module,filename='<string>',mode='exec')
    exec(code)

    print input
    print ""t ="",t


if __name__ == ""__main__"":
    input = ""t = r*p""
    main(input)
"
How do I get data from stdin using os.system(),"import urllib
sock = urllib.urlopen(""http://en.wikipedia.org/wiki/Python_(programming_language)"")
htmlsource = sock.read()
sock.close()
print htmlsource
"
find last paragraph of each section from a book,"with open(fileName) as fi:
    data = fi.read()

l = [i.strip() for i in re.split('[IVXLCDM]+\n\n', text) if i.strip()]
for i in l:
    print(i.split('\n\n')[-1])
    print('\n')
"
finding longest path in a graph,"def DFS(G,v,seen=None,path=None):
    if seen is None: seen = []
    if path is None: path = [v]

    seen.append(v)

    paths = []
    for t in G[v]:
        if t not in seen:
            t_path = path + [t]
            paths.append(tuple(t_path))
            paths.extend(DFS(G, t, seen, t_path))
    return paths
"
How to loop over a response element in Scrapy?,"def parse(self, response):
    for link in response.xpath(""//a""):
        item = SocialMediaItem()
        item['title'] = link.xpath('text()').extract()
        item['link'] = link.xpath('@href').extract()
        yield item
"
Sorting items in a text file in python,"with open(""Results.txt"") as inf:
data = []
for line in inf:
    line = line.split()
    if len(line)==3:
        data.append(tuple(line)) #append as tuple

>>> data #as result of codes
[('5', 'Test', 'b'), ('4', 'Test', 'b'), ('6', 'Test', 'c'), ('7', 'Test', 'a')]
>>> data.sort()
>>> data #ascending order
[('4', 'Test', 'b'), ('5', 'Test', 'b'), ('6', 'Test', 'c'), ('7', 'Test', 'a')]
>>> data.sort(reverse=True)
>>> data # descending order
[('7', 'Test', 'a'), ('6', 'Test', 'c'), ('5', 'Test', 'b'), ('4', 'Test', 'b')]
"
Merging two dictionaries while keeping the original,"from itertools import chain
from collections import defaultdict
d1 = {'a': 1, 'b': 2, 'c': 3}
d2 = {'a': 2, 'b': 3, 'd': 4}
d3 = defaultdict(list)
for k, v in chain(d1.items(), d2.items()):
    d3[k].append(v)

for k, v in d3.items():
    print(k, v)
"
How to use regex with optional characters in python?,"import re
print re.match(""(\d+(\.\d+)?)"", ""3434.35353"").group(1)
"
swap values in a tuple/list inside a list in python?,"g = ((t[1], t[0]) for t in mylist)
#call when you need a value
g.next()
"
Need to add all the integers between 2 other integers,"num1 = int(input(""Enter first integer: ""))
num2 = int(input(""Enter second integer: ""))

sumNum1Num2N = 0

print(""Let's sum all the integers in this range [%d, %d]"" %(num1, num2))

#This shows up the sum being done
for i in range(num1, num2 + 1):
        sumNum1Num2N = sumNum1Num2N + i
        print(sumNum1Num2N, "" "" , end="""")

print()
print(""The sum of the numbers between %d and %d is %d"" %(num1, num2, sumNum1Num2N))
"
Create List of Single Item Repeated n Times in Python,">>> timeit.timeit('list(itertools.repeat(0, 10))', 'import itertools', number = 1000000)
1.7508119747063233
"
Django ORM - partial match of rows in different tables,"from django.db.models import Q

b_models = modelB.objects.values('email', 'name')
exclude = Q()
for model in b_models:
    exclude |= (Q(email=model['email']) & Q(name=model['name']))

a_models = modelA.objects.exclude(exclude)
"
Python - datetime of a specific timezone,"print datetime.datetime.now(EST()) 
"
How can I multiply numbers in a list (after removing duplicates)?,"from functools import reduce
import operator as op

print(""The product of the list is"", reduce(op.mul, numbertotal))
"
Python: Append to dictionary from a zip," [in] >>> d = dict([('x',3),('x',4)])
 [in] >>> print(d)
[out] >>> {'x': 4}
"
How to properly install isapi_wsgi on IIS for Python2.7?,"import sys
import os
import win32file
from win32con import *

# dictionary of [mtime, module] tuple;  uses file path as key
loadedPages = {}

def request_handler(env, start_response):
    '''Demo app from wsgiref'''
    cr = lambda s='': s + '\n'
    if hasattr(sys, ""isapidllhandle""):
        h = None
        # get the path of the ISAPI Extension DLL
        hDll = getattr(sys, ""isapidllhandle"", None)
        import win32api
        dllName = win32api.GetModuleFileName(hDll)
        p1 = repr(dllName).split('?\\\\')
        p2 = p1[1].split('\\\\')
        sep = '\\'
        homedir = sep.join(p2[:-1])

        # the name of the Python module is in the PATH_INFO
        moduleToImport = env['PATH_INFO'].split('/')[1]

        pyFile = homedir + sep + moduleToImport + '.py'

        fd = None
        try:
            fd = win32file.CreateFile(pyFile, GENERIC_READ, FILE_SHARE_DELETE, None, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0)
        except Exception as exc1:
            fd = None

        if fd is not None:
            # file exists, get mtime
            fd.close()
            mt = os.path.getmtime(pyFile)
        else:
            mt = None


        if mt is not None:
            h = None
            if not pyFile in loadedPages:
                # need a new import
                if homedir not in sys.path:
                    sys.path.insert(0, homedir)

                h = __import__(moduleToImport, globals(), locals(), [])
                # remember
                loadedPages[pyFile] = [mt, h]
            else:
                # retrieve handle to module
                h = loadedPages[pyFile][1]
                if mt != loadedPages[pyFile][0]:
                    # need to reload the page
                    reload(h)
                    loadedPages[pyFile][0] = mt

            if h is not None:
                if 'handler' in h.__dict__:
                    for x in h.handler(env, start_response):
                        yield x
                else:
                    start_response(""400 Bad Request"", [('Content-Type', 'text/html')])
            else:
                start_response(""404 Not Found"", [('Content-Type', 'text/html')])
                yield cr()
                yield cr(""<html><head><title>Module not found</title>"" \
                             ""</head><body>"")
                yield cr(""<h3>404 Not Found</h3>"")
                yield cr(""<h3>No handle</h3></body></html>"")

        else:
            start_response(""404 Not Found"", [('Content-Type', 'text/html')])
            yield cr()
            yield cr(""<html><head><title>Module not found</title>"" \
                 ""</head><body>"")
            yield cr(""<h3>404 Not Found</h3>"")
            yield cr(""<h3>That module ("" + moduleToImport + "") was not found.</h3></body></html>"")


    else:
        start_response(""500 Internal Server Error"", [('Content-Type', 'text/html')])
        yield cr()
        yield cr(""<html><head><title>Server Error</title>"" \
                 ""</head><body><h1>Server Error - No ISAPI Found</h1></body></html>"")


# def test(environ, start_response):
#     '''Simple app as per PEP 333'''
#     status = '200 OK'
#     start_response(status, [('Content-type', 'text/plain')])
#     return ['Hello world from isapi!']


import isapi_wsgi
# The entry point(s) for the ISAPI extension.
def __ExtensionFactory__():
    return isapi_wsgi.ISAPISimpleHandler(request_handler)


def PostInstall(params, options):
    print ""The Extension has been installed""


# Handler for our custom 'status' argument.
def status_handler(options, log, arg):
    ""Query the status of the ISAPI?""
    print ""Everything seems to be fine...""


if __name__=='__main__':
    # This logic gets invoked when the script is run from the command-line.
    # In that case, it installs this module as an ISAPI.

    #
    # The API provided by isapi_wsgi for this is a bit confusing.  There
    # is an ISAPIParameters object. Within that object there is a
    # VirtualDirs property, which itself is a list of
    # VirtualDirParameters objects, one per vdir.  Each vdir has a set
    # of scriptmaps, usually this set of script maps will be a wildcard
    # (*) so that all URLs in the vdir will be served through the ISAPI.
    #
    # To configure a single vdir to serve Python scripts through an
    # ISAPI, create a scriptmap, and stuff it into the
    # VirtualDirParameters object. Specify the vdir path and other
    # things in the VirtualDirParameters object.  Stuff that vdp object
    # into a sequence and set it into the ISAPIParameters thing, then
    # call the vaguely named ""HandleCommandLine"" function, passing that
    # ISAPIParameters thing.
    #
    # Clear as mud?
    #
    # Seriously, this thing could be so much simpler, if it had
    # reasonable defaults and a reasonable model, but I guess it will
    # work as is.

    from isapi.install import *

    # Setup the virtual directories -
    # To serve from root, set Name=""/""
    sm = [ ScriptMapParams(Extension=""*"", Flags=0) ]
    vdp = VirtualDirParameters(Name=""wsgi"", # name of vdir/IIS app
                              Description = ""ISAPI-WSGI Demo"",
                              ScriptMaps = sm,
                              ScriptMapUpdate = ""replace""
                              )

    params = ISAPIParameters(PostInstall = PostInstall)
    params.VirtualDirs = [vdp]
    cah = {""status"": status_handler}

    # from isapi.install, part of pywin32
    HandleCommandLine(params, custom_arg_handlers = cah)
"
how to change some words color real time while accepting input in python,"import sys
from colorama import Fore

special_words = ['bannanas', 'eggs', 'ham']
my_text = ''
while True:
    c = getch()
    if ord(c) == 13:  # newline, stop
        break 
    my_text += c    

    sys.stdout.write(""\r"")  # move to the line beginning
    for word in my_text.split():
        if word in special_words:
            sys.stdout.write(Fore.RED + word + "" "")
        else:
            sys.stdout.write(Fore.RESET + word + "" "")
    sys.stdout.flush()

# reset the color when done
print(Fore.RESET)
"
REGEX - String version of the parsing of a pattern done by `sre_parse`,"import sre_parse
import sys

class PseudoStdout:
    def __init__(self):
        self.contents = ''
    def __enter__(self): # this and __exit__ are for context management
        self.old_stdout = sys.stdout
        sys.stdout = self
    def __exit__(self, type_, value, traceback):
        sys.stdout = self.old_stdout
    def write(self, text): # magic method that makes it behave like a file
        self.contents += text

pattern = r""(?P<TEST>test)\s+\w*(?P=TEST)|abcde""
parsedpattern = sre_parse.parse(pattern)

ps = PseudoStdout()
with ps:
    parsedpattern.dump()

print(repr(ps.contents))
"
Stripping links returned by beautfulsoup,">>> s = ""/url?q=http://druid8.sit.aau.dk/acc_papers/kdln4ccpef78ielqg01fuabr81s1.pdf&sa=U&ei=HkNsUauqN_GQiA f5p4CwDg&ved=0CDkQFjAJ&usg=AFQjCNGk0DTzu2K2ieIKS-SXAeS5-VYTgA""
>>>
>>> s[7:s.index('&')]
'http://druid8.sit.aau.dk/acc_papers/kdln4ccpef78ielqg01fuabr81s1.pdf'
>>>
>>> s.split('q=')[1].split('&')[0]
'http://druid8.sit.aau.dk/acc_papers/kdln4ccpef78ielqg01fuabr81s1.pdf'
>>>
"
python mail no subject coming through,">>> from email.mime.text import MIMEText
>>>
>>> fromaddr = 'XXXX@gmail.com'
>>> toaddrs = 'jason@XXX.com'
>>> subject = 'This is an important message'
>>> content = 'Portal Test had an error'
>>>
>>> # constructing a RFC 2822 message
... msg = MIMEText(content)
>>> msg['From'] = fromaddr
>>> msg['To'] = toaddrs
>>> msg['Subject'] = subject
"
python parse Json for all null values,"#!/usr/bin/env python

import json
with open('json.txt', 'r') as f:
    d = json.load(f)
missings = [None, """"]
def generate_missing_paths(path, item):
    if isinstance(item, list):
        for v in item:
            for current_path in generate_missing_paths(path, v):
                yield current_path
    if isinstance(item, dict):
        for k, v in item.iteritems():
            for current_path in generate_missing_paths(path + '.' + k, v):
                yield current_path
    if item in missings:
        yield path

for path in generate_missing_paths('root', d):
    print path
"
Aligning bins to xticks in plt.hist,"x = np.arange(0.006,0.0345,0.0015)
plt.hist(histmeans, bins = x, color='#808080')
"
Split queryset or get multiple querysets by field instead of just ordering by field,"from collections import defaultdict
values = defaultdict(list)
_ = map(lambda person: values[person.last_name].append(person), Person.objects.all())
"
"GAE, Python: How to define db object classes in only one place?","from models import MyModel, SomeOtherModel
m = MyModel
m.put()
"
Generate in flight string from [A-z],">>> import string
>>> import random
>>> string.ascii_letters[:random.randint(1, 50)].title()
'Abcdefghijklmnopq'
>>> string.ascii_letters[:random.randint(1, 50)].title()
'Abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq'
>>> string.ascii_letters[:random.randint(1, 50)].title()
'Abcdefghijklmnopqrs'    
"
Hi I was wondering if there was a data type in Python that only allows letters to be inputed and not numbers,"[s for s in List1 if s.isdigit()]
"
Get Value of a key from List of dictionary,">>> d = dict([(e['name'],e['value']) for e in items])    # transpose
"
How to rebuild panels in wxpython in function of a variable?,"import wx
from wx.lib.pubsub import Publisher

class PanelA(wx.Panel):

    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        self.hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.vbox = wx.BoxSizer(wx.VERTICAL)
        name = ""none, please select an item""
        self.txt = wx.StaticText(self, -1, ""You have selected "" + name,
                                 (50, 100))
        self.hbox.Add(self.txt, 1, wx.EXPAND|wx.ALL, 30)

    def changeName(self, name):
        self.hbox.Hide(self.txt)
        self.hbox.Remove(self.txt)
        self.txt = wx.StaticText(self, -1, ""You have selected "" + name, (50, 100))
        self.hbox.Add(self.txt, 1, wx.EXPAND|wx.ALL, 30)


class PanelB(wx.Panel):

    def __init__(self, parent):
        wx.Panel.__init__(self, parent)

        self.hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.vbox = wx.BoxSizer(wx.VERTICAL)

        self.listbox = wx.ListBox(self, -1)
        self.hbox.Add(self.listbox, 1, wx.EXPAND|wx.ALL, 20)

        self.btnPanel = wx.Panel(self, -1)      
        self.new = wx.Button(self.btnPanel,label='Add', size=(90, 30))
        self.new.Bind(wx.EVT_BUTTON, self.NewItem)

        self.vbox.Add((-1, 20))
        self.vbox.Add(self.new)

        self.btnPanel.SetSizer(self.vbox)
        self.hbox.Add(self.btnPanel, 0.6, wx.EXPAND|wx.RIGHT, 20)
        self.SetSizer(self.hbox)

        self.Bind(wx.EVT_LISTBOX, self.onSelect)

    def onSelect(self, event):
        name_selected = self.listbox.GetStringSelection()
        Publisher().sendMessage(""ListBox"", name_selected)

    def NewItem(self, event):
        text = wx.GetTextFromUser('Nombre', 'Programa a salvar')
        if text != '':
            self.listbox.Append(text)


class MainFrame(wx.Frame):

   def __init__(self, parent, id, title, *args, **kw):

       wx.Frame.__init__(self, parent, id, title, size = (800,300))
       self.splitter = wx.SplitterWindow(self, -1, style=wx.SP_3D)
       Publisher().subscribe(self.OnSelect, ""ListBox"")

       self.lc1 = PanelB(self.splitter)
       self.lc2 = PanelA(self.splitter)
       self.splitter.SplitVertically(self.lc1, self.lc2)

       self.sizer = wx.BoxSizer(wx.HORIZONTAL)
       self.sizer.Add(self.splitter, 1, wx.EXPAND)
       self.SetSizer(self.sizer)
       self.Layout()

       self.Centre()

   def OnSelect(self, name_selected):
       name = name_selected
       self.lc2.changeName(name.data)


if __name__ == ""__main__"":
    app = wx.PySimpleApp()
    frame = MainFrame(None,-1,'Mi aplicacion')
    frame.Show()
    app.MainLoop()
"
How can I apply a math operation on a list of tuples with `map()`?,">>> b = [('676010', '5036043'), ('771968', '4754525'), ('772025', '4754525'), ('772072', '4754527'), ('772205', '4754539'), ('772276', '4754542'), ('772323', '4754541'), ('647206', '5036049')]
>>> map(lambda t: (float(t[0]) / 100000, float(t[1]) / 100000), b)
[(6.7601, 50.36043), (7.71968, 47.54525), (7.72025, 47.54525), (7.72072, 47.54527), (7.72205, 47.54539), (7.72276, 47.54542), (7.72323, 47.54541), (6.47206, 50.36049)]
>>> map(lambda t: map(lambda v: float(v) / 10000, t), b)
[[67.601, 503.6043], [77.1968, 475.4525], [77.2025, 475.4525], [77.2072, 475.4527], [77.2205, 475.4539], [77.2276, 475.4542], [77.2323, 475.4541], [64.7206, 503.6049]]
>>> [[float(v) / 10000 for v in t] for t in b]
[[67.601, 503.6043], [77.1968, 475.4525], [77.2025, 475.4525], [77.2072, 475.4527], [77.2205, 475.4539], [77.2276, 475.4542], [77.2323, 475.4541], [64.7206, 503.6049]]
"
Python: Combine several nested lists into a dictionary,"l1 = ['a', ['b', ['x', '1'], ['y', '2']]]
l2 = ['a', ['c', ['xx', '4'], ['gg', ['m', '3']]]]

def combine(d, l):
    if not l[0] in d:
        d[l[0]] = {}

    for v in l[1:]:
        if type(v) == list:
            combine(d[l[0]],v)
        else:
            d[l[0]] = v

h = {}
combine(h, l1)
combine(h, l2)
print h
"
reshaping data frame in pandas,"df['index'] = range(4)*2
"
python : threads do not work properly in daemon,"from Queue import Queue
from threading import Thread

def is_ssh_up(result_queue, hostname, port=22):
    # try to connect here
    # ...
    # write results
    result_queue.put((hostname, True)) # Up

def main():
    q = Queue()
    hosts = [""host1"", ""host2"", ""google.com"", ""host3""]

    for hostname in hosts: # start worker threads
        t = Thread(target=is_ssh_up, args=[q, hostname])
        t.daemon = True
        t.start()

    for _ in hosts: # collect results
        hostname, is_up = q.get()
        print(""%s is %s"" % (hostname, ""Up"" if is_up else ""Down""))
"
Encode string as hex bytes,"from binascii import unhexlify
result = list(bytearray(unhexlify(s)))
"
How can I use a list comprehension to extend a list in python?,"return sum(map(doSomething, originalList), [])
"
sorting a list of two columns based on one column python,"xs = [1467153, 1466231, 1478821]
ys = [12309, 21300, 10230]
l = sorted(zip(xs, ys), key=lambda x: x[0])
print(l)
"
Find All text within 1 level in HTML using Beautiful Soup - Python,"def extract_text(node):
    return ' '.join(t.strip() for t in node(text=True, recursive=False))
"
How to create and fill 2d list in python. Basically trying to create a list of rgb values,"class Color(object):
    def __init__(self, red, green, blue, tint):
        self.red = red
        self.green = green
        self.blue = blue
        self.tint = tint

    def somemethod(self):
        pass #you can add some method.
"
Python: find if a given regular expression is present in a file,"source
import re

m = re.finditer( 'beer', open('zfind.py').read() ).next()
print m and m.group(0)
"
__getattr__ for static/class variables in python,"class FooType(type):
    def _foo_func(cls):
        return 'foo!'

    def _bar_func(cls):
        return 'bar!'

    def __getattr__(cls, key):
        if key == 'Foo':
            return cls._foo_func()
        elif key == 'Bar':
            return cls._bar_func()
        raise AttributeError(key)

    def __str__(cls):
        return 'custom str for %s' % (cls.__name__,)

class MyClass:
    __metaclass__ = FooType


print MyClass.Foo
print MyClass.Bar
print str(MyClass)
"
convert list to string?,">>> MyList = ['a', 'b', 'c', 'd', 'e']

>>> all(letter in MyList for letter in 'bad')
True

>>> all(letter in MyList for letter in 'test')
False
"
USing a Scanner Import,"with file(""..."", 'r') as f:
    g = generate_tokens(f.read())
"
nested list displayed in a column,"tableData = [['apples', 'oranges', 'cherries', 'banana'],
             ['Alice', 'Bob', 'Carol', 'David'],
             ['dogs', 'cats', 'moose', 'goose']]

# Find the max length of the word in each row
lens = [max(len(col) for col in row) for row in tableData]

# build a format string with an entry for each column
rowfmt = '{:>{}} ' * len(tableData)

# zip(*list) transposes a list...rows become columns
for row in zip(*tableData):
    # Pass the values and column widths dynamically.
    # The zip pairs up each datum with its column width, but in tuples.
    # For example, [data1,data2],[width1,width2] -> [(data1,width1),(data2,width2)]
    # itertools.chain flattens the list of tuples.
    # For example, above becomes [data1,width1,data2,width2]
    print(rowfmt.format(*itertools.chain(*zip(row,lens))))
"
How does Python's regex pattern caching work?,"def search(pattern, string, flags=0):
    """"""Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found.""""""
    return _compile(pattern, flags).search(string)
"
"Grouping text lines so if A=B and B=C, then A=C","import copy

def resolve(arr):
    # create an index for easy access of the urls
    index = {item[0]: item[2] for item in arr}
    # copy the index 
    mapping = copy.copy(index)

    # loop through the index
    for index_key in index: 
        # get the current value
        value = index[index_key]
        # loop through the mapping as long as the final ip address is reached
        # but only if this url wasn't found before
        while value in mapping:
            # remember the new key (so it can be deleted afterwards)
            key = value
            # get the new value
            value = mapping[key]
            # save the found value as the new value (for later use)
            # this reduces the complexity (-> better performance)
            mapping[index_key] = value
            # delete the ""one in the middle"" out of the mapping array
            # so that the next item don't have to search for 
            # the correct mapping (because the mapping has been found already)
            del mapping[key]

    return mapping
"
Python: from a text file to dictionary with keys,"d = {}
f = open(""tennis.txt"")
for i, l in enumerate(f):
    # cut the '0b' chars, so you will get your dict keys just like you want
    bin_num = bin(i)[2:]
    # if the key is shorter than 3 chars, add 0 to the beginning
    while len(bin_num) < 3:
        bin_num = '0' + bin_num
    d[bin_num] = l[:-1]

f.close()
for i in sorted(d.items()):
    print i
"
Python: run script in all subdirectories,"import os

directory_to_check = ""your_dir"" # Which directory do you want to start with?

def my_function(directory):
      print(""Listing: "" + directory)
      print(""\t-"" + ""\n\t-"".join(os.listdir("".""))) # List current working directory

# Get all the subdirectories of directory_to_check recursively and store them in a list:
directories = [os.path.abspath(x[0]) for x in os.walk(directory_to_check)]
directories.remove(os.path.abspath(directory_to_check)) # If you don't want your main directory included

for i in directories:
      os.chdir(i)         # Change working Directory
      my_function(i)      # Run your function
"
Repeating questions to user ten times in Python,"for _ in range(10):
    number1 = # not sure how you're
    number2 = # generating your numbers
    answer = int(input(str(number1)+str(number2)+""= ...""))
    # you may want to do something different here in case the user
    # enters a non-integer, e.g. ""I don't know"" which will currently
    # error out your code with a ValueError
    if answer == number1+number2:
        # Handle correct answer
    else:
        # Handle incorrect answer
"
Python split twice with strip in one line,"PARAMS = 'TEST = xy; TEST2= klklk '
from timeit import timeit
print timeit('dict((i.strip() for i in item.split(""="")) for item in PARAMS.split("";""))', ""from __main__ import PARAMS"")
print timeit('dict([i.strip() for i in item.split(""="")] for item in PARAMS.split("";""))', ""from __main__ import PARAMS"")
"
Using recursion to reverse a list in python?,"def reverseList(listXS, i=1):
    if i == len(listXS) - 1:
        return
    listXS[i-1], listXS[-i] = listXS[-i], listXS[i-1]
    reverseList(listXS, i+1)
"
Assigning random colour from RGB into a image,"img = []
for x in range (0, width):
    for y in range (0, height):
        img.append(rgb[random.randint(0,2)])
return img
"
Python: Iterate over each item in nested-list-of-lists and replace specific items,"def change(lol):
    for index,item in enumerate(lol):
        if isinstance(item, list):
            change(item)
        elif item.startswith('-'):
            lol[index] = ['not',item.split('-')[1]]
    return lol
"
Numpy: checking if an element in a multidimensional array is in a tuple,"import numpy as np
a = np.array([[[9, 8, 8],
               [4, 9, 1]],

              [[6, 6, 3],
               [9, 3, 5]]])

ind=(a[:,:,1]<=8) & (a[:,:,1]>=6)
a[ind,1]=a[ind,0]*2
print(a)
"
Possible to compress into a dictionary comprehension?,">>> timeit.timeit(""{('column_' + str(i)): range(i,81,9) for i in xrange(9)}"", number = 100000)
0.914525032043457
"
manipulating list items python,"for i in range(len(words)):
    words[i]=words[i].rstrip()
"
Numpy loadtxt rounding off numbers,"In [80]: import numpy as np

In [81]: x = np.loadtxt('test.dat', dtype = np.float64)

In [82]: print(x)
-37.9
"
How to convert a string from CP-1251 to UTF-8?,d.decode('cp1251').encode('utf8')
Two Combination Lists from One List,"for i in range(1, 6):
    for c1 in itertools.combinations(c, i):
            c1 = set(c1)
            c2 = set(c) - c1
            print c1, c2
"
Python: Get first element of list potentially containing sublists,"def _flatten(foo):
    try:
        for item in foo:
            for subitem in _flatten(foo):
                yield subitem
    except TypeError:
        yield foo

def flatten(foo):
    for item in foo:
        for subitem in _flatten(foo):
            yield subitem
"
Removing one or multiple keys from a dictionary,"d = {""a"": 1, ""b"": 2, ""c"": 3}
d.pop(""a"")
print d
# {'c': 3, 'b': 2}
"
Turning binary string into an image with PIL,"import Image
import numpy as np

value = ""0110100001100101011011000110110001101111""

carr = np.array([(255,255,255), (0,0,0)], dtype='uint8')
data = carr[np.array(map(int, list(value)))].reshape(-1, 8, 3)
img = Image.fromarray(data, 'RGB')
img.save('/tmp/out.png', 'PNG')
"
Recursive function for tuple,"
def rabbit(rocks, prev=0):
    if rocks[0] - prev > 50:
        return -1
    p = rocks[0]
    for i, x in enumerate(rocks):
        if x - prev > 50:
            ret = rabbit(rocks[i:], p)
            if ret >= 0:
                ret += 1
            return ret
        p = x
    return 1
"
Complex Sorting of a List,"values.sort(key=somefunction)
"
All paths of a tree,"class Tree:
    def __init__(self, value):
        self.value = value
        self.children = []


def get_paths(t, paths=None, current_path=None):
    if paths is None:
        paths = []
    if current_path is None:
        current_path = []

    current_path.append(t.value)
    if len(t.children) == 0:
        paths.append(current_path)
    else:
        for child in t.children:
            get_paths(child, paths, list(current_path))
    return paths


t = Tree(1)
t2 = Tree(2)
t7 = Tree(7)
t2.children = [t7]
t5 = Tree(5)
t9 = Tree(9)
t8 = Tree(8)
t5.children = [t9, t8]
t.children = [t2, t5]

print get_paths(t)
"
How to subset a Pandas dataframe applying a function by date?,"idx = df.groupby(['Date'])['Volume'].transform(min) == df['Volume']
df[idx]
"
Is there a more vectorized way to perform numpy.outer along an axis?,"return a.ravel()[:,newaxis]*b.ravel()[newaxis,:]
"
Creating pandas dataframes within a loop,"dfs = {}
for fname, dfname in zip(CSV_files, DF_names):
    filepath = find(fname, path)
    df = pd.DataFrame.from_csv(filepath)
    dfs[dfname] = df
print dfs[DF_names[1]]
"
Python Co-occurrence matrix of words and phrases,"from itertools import product
from operator import mul

L1 = ['b', 'c', 'd', 'e', 't', 'w', 'x', 'y', 'z']
L2 = ['the onion', 'be your self', 'great zoo', 'x men', 'corn day']

phrase_map = {}

for phrase in L2:
    word_count = {word: phrase.count(word) for word in L1 if word in phrase}

    occurrence_map = {}
    for perm in product(word_count, repeat=2):
        occurrence_map[perm] = reduce(mul, (word_count[key] for key in perm), 1)

    phrase_map[phrase] = occurrence_map
"
Positional Comparisons in Python,">>> from operator import itemgetter
>>> 
>>> after_short_program = {
...     'Evgeni Plushenko':1,
...     'Evan Lysacek':2,
...     'Daisuke Takahashi':3,
...     'Stephane Lambiel':4,
...     'Nobunari Oda':5,
... }
>>> 
>>> after_free_skate = {
...     'Evan Lysacek':1,
...     'Daisuke Takahashi':2,
...     'Evgeni Plushenko':3,
...     'Stephane Lambiel':4,   # These are tied
...     'Nobunari Oda':4,       # at 4th place
... }
>>> 
>>> for k,v in sorted(after_free_skate.items(),key=itemgetter(1)):
...     diff = after_short_program[k]-v
...     print ""%s (%+d)""%(k,diff)
...     
... 
Evan Lysacek (+1)
Daisuke Takahashi (+1)
Evgeni Plushenko (-2)
Nobunari Oda (+1)
Stephane Lambiel (+0)
>>> 
"
Passing formatted strings to functions as arguments,"params = {}
params['something'] = ""Task_{0}"".format(i)
params['something_else'] = ""task{0}_types"".format(i)
# ...
params['last_thing'] = None
t = Task(**params)
"
Map a list of dicts into a dict of lists of dicts,"people_by_age = {}
for person in people:
    age = person.pop('age')
    people_by_age.setdefault(age, []).append(person)
"
Python - 2d list max based on certain part of inner list,"max( cur2, key=lambda x:int(x[2]))
"
How to extract information out of an api in python,">>> from lxml import etree
>>> city='Boston'
>>> country='USA'
>>> info = requests.get('http://api.openweathermap.org/data/2.5/weather?q='+city +','+ country +'&mode=xml')
>>> doc = etree.fromstring(info.text)
>>> doc.find('city').find('coord').get('lon')
'-71.06'
>>> doc.xpath('/current/city/coord/@lon')[0]
'-71.06'
"
Is there a more pythonic way of exploding a list over a function's arguments?,">>> def foo(*vargs, **kargs):
        print vargs
        print kargs

>>> foo(1, 2, 3, a=""A"", b=""B"")
(1, 2, 3)
{'a': 'A', 'b': 'B'}
"
Get JavaScript function call value using Selenium,"from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC


driver = webdriver.Firefox()
driver.get('http://www.koovs.com/only-onlall-stripe-ls-shirt-59554.html?from=category-651&skuid=236376')

wait = WebDriverWait(driver, 10)
chart = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, ""a[size_chart]"")))
chart.click()

driver.switch_to.window(driver.window_handles[-1])

print driver.current_url

driver.close()
"
Get ID of one of multiple buttons in HTML form in Django,"if 'action:3.4' in request.POST:
    action = '3.4'
...    
"
Python ctypes integer pointer,"from ctypes import *
from ctypes.wintypes import *

GetRate = windll.YOURLIB.GetRate
GetRate.restype = c_int
GetRate.argtypes = [HANDLE, POINTER(c_int)]

# now call GetRate as something like:
#
# hDev = ... # handle
# Data = c_int()
#
# GetRate(hDev, byref(Data)) # GetRate(hDev, &Data)
# print Data
"
Coin Change Maker Python Program,"c=int(input('Please enter an amount between 0-99:'))
print(c//25, ""quarters"")
c = c%25
print(c//10, ""dimes"")
c = c%10
print(c//5, ""nickles"")
c = c%5
print(c//1, ""pennies"")
"
Python regexp everything between parenthesis on multiple lines,">>> content = """"""
... print _(
...     'Test #A'
...     )              
... 
... print _(
...     '''Test #B'''
...     '''Test #C'''
... )
... """"""
>>> import re
>>> m = re.findall(r'(?s)_\((.*?)\)', content)
>>> for i, match in enumerate(m, 1):
...     print(""Match {0}: {1}"".format(i, match))
... 
Match 1: 
    'Test #A'

Match 2: 
    '''Test #B'''
    '''Test #C'''

>>>
"
Sort a dictionary of dictionaries python,"items = ((k, k2, v) for k in d for k2, v in d[k].items())
ordered = sorted(items, key=lambda x: x[-1], reverse=True)
"
Iterate across lines in two files in sequence,"import fileinput
for line in fileinput.input(['file1.txt', 'file2.txt']):
    print line
"
Python does not sort sql query result,"sorted(results, key=lambda t:t[0], reverse=True)
"
XPath Only Selects Part of Href,">>> a = HtmlXPathSelector(text=s)
>>> a
<HtmlXPathSelector xpath=None data=u'<html><body><a href=""JavaScript:ShowPart'>
>>> a.select(""//a/@href"")
[<HtmlXPathSelector xpath='//a/@href' data=u""JavaScript:ShowParts('1','58537','RP45%2"">]
>>> a.select(""//a/@href"").extract()
[u""JavaScript:ShowParts('1','58537','RP45%2C+RP60+Compactors+w%2FHatz+1D81S+Eng%2E');""]
"
How to convert a Python string to a dimensional array or list,">>> re.split(r'\(|\)',s)
['', '+ ', '- 5 4', ' ', '- 2 1', '', '']

>>>new= [i.split() if re.search(r'\d',i) else i for i in [j for j in re.split(r'\(|\)',s) if len(j.strip())]]
['+ ', ['-', '5', '4'], ['-', '2', '1']]
>>> [[int(i) if i.isdigit() else i for i in j] if isinstance(j,list) else j for j in new]
['+ ', ['-', 5, 4], ['-', 2, 1]]
"
How to get a value from a Pandas DataFrame and not the index and object type,"df.loc[df['Letters'] == 'C', 'Letters'].values[0]"
How to replace first column in text file?,"
s = '''6     5     1         2.364       0.022
6     5     2        30.364       2.866
6     5     5         2.351       0.022
6     5     6        44.606       2.866
6     6     1         2.372       0.022
6     6     2        33.290       2.866
6     6     5         2.290       0.022
6     6     6        43.799       2.866
6     7     1         2.414       0.022
6     7     2        37.071       2.866
6     7     5         2.281       0.022'''

import re
print re.sub('^6', '1', s, flags=re.MULTILINE)
"
mixing 3 dimenional and 2 dimensional data in a pandas dataframe,"In [31]: df = pd.DataFrame([ {'kw_0' : 0, 'kw_1' : 0, 'kw_2' : 0, 'x' : i, 'y': i} for i in range(10) ])

In [32]: df
Out[32]: 
   kw_0  kw_1  kw_2  x  y
0     0     0     0  0  0
1     0     0     0  1  1
2     0     0     0  2  2
3     0     0     0  3  3
4     0     0     0  4  4
5     0     0     0  5  5
6     0     0     0  6  6
7     0     0     0  7  7
8     0     0     0  8  8
9     0     0     0  9  9

In [33]: df.columns = MultiIndex.from_tuples([('kw',0),('kw',1),('kw',2),('value','x'),('value','y')])

In [34]: df
Out[34]: 
   kw        value   
    0  1  2      x  y
0   0  0  0      0  0
1   0  0  0      1  1
2   0  0  0      2  2
3   0  0  0      3  3
4   0  0  0      4  4
5   0  0  0      5  5
6   0  0  0      6  6
7   0  0  0      7  7
8   0  0  0      8  8
9   0  0  0      9  9
"
Python string format using dict of arrays,"import random

class WordDict(dict):
    def __getitem__(self, key):
        vals = dict.__getitem__(self, key)
        return random.choice(vals)

words = WordDict(
    cold = [""cold"", ""frigid"", ""freezing""],
    hot = [""scathing"", ""burning"", ""hot""]
)

for x in xrange(10):
    print('the water is {word[cold]}'.format(word=words))
"
common lisp like format directive to print lists,"print( ' '.join(  '{}'.format(k) for k in lsta+lstb+lstc  ) )
"
How to extract values from tuple in Python?,"import datetime 
import csv

A = ((248500353L,
    11,
    '4',
    '248741302',
    633,
    7321L,
    7321L,
    'EAD4083003',
    0,
    datetime.datetime(2011, 4, 19, 23, 0, 42),
    datetime.datetime(2011, 4, 19, 23, 1, 39)),)

with open('output.csv', 'wb') as f_output:  
    csv_output = csv.writer(f_output)
    csv_output.writerow(A[0])
"
"numpy, scipy, pass large number of variables between functions, modules, easily","def foo():
    result = dict()
    # fill `result` with values
    result[key] = value
    ...
    return result

def bar(arg1, arg2, ...):
    ...

result = foo()
bar(**result)
"
Numpy: Check array for string data type,"a.dtype.char == 'S'
"
Python simple if or logic statement,"if (key < 1) or (key > 34):
"
Drawing log-linear plot on a square plot area in matplotlib,"from pylab import *

x = linspace(1,10,1000)
y = sin(x)**2+0.5
plot (x,y)
ax = gca()
ax.set_yscale(""log"")

# now get the figure size in real coordinates:
fig  = gcf()
fwidth = fig.get_figwidth()
fheight = fig.get_figheight()

# get the axis size and position in relative coordinates
# this gives a BBox object
bb = ax.get_position()

# calculate them into real world coordinates
axwidth = fwidth * (bb.x1 - bb.x0)
axheight = fheight * (bb.y1 - bb.y0)

# if the axis is wider than tall, then it has to be narrowe
if axwidth > axheight:
    # calculate the narrowing relative to the figure
    narrow_by = (axwidth - axheight) / fwidth
    # move bounding box edges inwards the same amount to give the correct width
    bb.x0 += narrow_by / 2
    bb.x1 -= narrow_by / 2
# else if the axis is taller than wide, make it vertically smaller
# works the same as above
elif axheight > axwidth:
    shrink_by = (axheight - axwidth) / fheight
    bb.y0 += shrink_by / 2
    bb.y1 -= shrink_by / 2

ax.set_position(bb)

show()
"
Processing (binary?) file in python and linux shell,"file --mime-type --mime-encoding
"
numpy float32 truncating decimal,"In [1]: import numpy

In [2]: print numpy.float32(1.0 + 1e-7)
1.0

In [3]: print ""%.10f"" % numpy.float32(1.0 + 1e-7)
1.0000001192

In [4]: print ""%.10f"" % numpy.float32(1.0 + 1e-8)
1.0000000000
"
Is there a Python JSON encoder which JUST works?,"import json

class MyObject(object):
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)

print json.dumps(
    {
        'simple_string': 'i encode easily',
        'simple_int': 42,
        'complex': MyObject('this is a test')
    }, default=str, indent=2)
"
Django Get Range in Queryset,"class Participant(models.Model):
    user = models.ForeignKey(User)
    score = models.IntegerField()

    def get_score_above_below(self, n):
        try:
            above = Participant.filter(score__lt=self.score).order_by('-score')[:n]
        except ObjectDoesNotExist:
            above = Participant.filter(score__lt=self.score).order_by('-score')
        try:
            below = Participant.filter(score__gt=self.score).order_by('-score')[:n]
        except ObjectDoesNotExist:
            below = Participant.filter(score__gt=self.score).order_by('-score')

        entries = list(above) + [self] + list(below)
        return [(part.user, part.score) for part in entries]
"
python argparse - add action to subparser with no arguments?,"parser = ArgumentParser()
subparsers = parser.add_subparsers()
...
parser_quit = subparsers.add_parser('quit')
parser_quit.set_defaults(func=do_quit)
...
args = parser.parse_args()
args.func(args)
"
django-rest-framework HyperlinkedIdentityField with multiple lookup args,"from rest_framework.relations import HyperlinkedIdentityField
from rest_framework.reverse import reverse

class ParameterisedHyperlinkedIdentityField(HyperlinkedIdentityField):
    """"""
    Represents the instance, or a property on the instance, using hyperlinking.

    lookup_fields is a tuple of tuples of the form:
        ('model_field', 'url_parameter')
    """"""
    lookup_fields = (('pk', 'pk'),)

    def __init__(self, *args, **kwargs):
        self.lookup_fields = kwargs.pop('lookup_fields', self.lookup_fields)
        super(ParameterisedHyperlinkedIdentityField, self).__init__(*args, **kwargs)

    def get_url(self, obj, view_name, request, format):
        """"""
        Given an object, return the URL that hyperlinks to the object.

        May raise a `NoReverseMatch` if the `view_name` and `lookup_field`
        attributes are not configured to correctly match the URL conf.
        """"""
        kwargs = {}
        for model_field, url_param in self.lookup_fields:
            attr = obj
            for field in model_field.split('.'):
                attr = getattr(attr,field)
            kwargs[url_param] = attr

        return reverse(view_name, kwargs=kwargs, request=request, format=format)
"
How to draw a bitmap real quick in python using Tk only?,"from Tkinter import *
import random

def RGBs(num):
 # random list of list RGBs
 return [[random.randint(0,255) for i in range(0,3)] for j in range(0,num)]

def rgb2Hex(rgb_tuple):
    return '#%02x%02x%02x' % tuple(rgb_tuple)

def drawGrid(w,colors):
 col = 0; row = 0
 colors = [rgb2Hex(color) for color in colors]
 for color in colors:
  w.create_rectangle(col, row, col+1, row+1, fill=color, outline=color)
  col+=1
  if col == 100:
   row += 1; col = 0

root = Tk()
w = Canvas(root)
w.grid()
colors = RGBs(5000)
drawGrid(w,colors)
root.mainloop()
"
Replace an item in a list based on user input,"while True:
    if all(x.isalpha() for x in n_strings ):
        print(""All guessed correct {}"".format(n_strings)) # if all are alpha print final n_string and break out of loop
        break
    print n_strings    
    letter = input(""Please enter a letter: "")
    if letter in L:
    # Find the position of the letter in the list
        position = (L.index(letter));
        number = N[position];
        n_strings = [item.replace(number, letter) for item in n_strings];
        print (n_strings, ""\n"");
    # repeat until the List only contains letters
    else:
        print (""That is not correct"");
        print (""Please guess again. \n"");
"
Python: How do I assign 2 values I return from a function with 1 input as values outside the function?,"def get_value():
    while True:
        z = input(""Insert value: "") # DON'T DO THIS, INPUT() IS BADDDDD IN PYTHON2
        # instead do:
        ## try: z = int(raw_input(""Insert value: ""))
        ## except ValueError:
        ##     print(""Please provide an integer"")
        ##     continue
        # this also FORCES z to be an integer, so isinstance(z,int) is ALWAYS TRUE
        is_int = isinstance(z,int)
        is_pos = is_int and z>0 # this will keep you from throwing an exception if
                                # you can't compare z>0 because z isn't int
        if is_int and is_pos:
            print z**2
        elif is_int:
            print ""Please provide an integer""
            continue
        else:
            print ""Integer must be positive""
            continue
        # nothing can ever get to that last else block you had.
"
append the same element to several sublists in python,"type(L)
# <type 'numpy.ndarray'>
type(L[0,0])
# <type 'list'>
"
Python: combine list with lists of list while preserving lists elements,">>> a = ['a','b','c'] 
>>> b = [[1,2],[1],[1,2,3]]
>>> list(zip(a, b))
[('a', [1, 2]), ('b', [1]), ('c', [1, 2, 3])]
"
Having a python arg set another flag as true in addition to itself," if args.verbose_with_bonus:
     args.verbose = True
"
incrementing the digit by 1 in python using isdigit(),"import re
s = ""You would like to eat salad as meal 1 and fruits as meal 2 and pizza as meal 3 in your diet.""

s = re.sub(r'(\d+)', lambda match: str(int(match.group()) + 1), s)
print(s)
# You would like to eat salad as meal 2 and fruits as meal 3 and pizza as meal 4 in your diet.
"
Create arg string from ArgumentParser parsed args in Python,"In [432]: parser = argparse.ArgumentParser()    
In [433]: parser.add_argument('--example', type=int, default=0)
Out[433]: _StoreAction(option_strings=['--example'], dest='example', nargs=None, const=None, default=0, type=<type 'int'>, choices=None, help=None, metavar=None)
"
Writing multiple lists to multiple output files,"data = {'high_5': # data
       ,'low_5': # data
       ,'high_33': # data
       ,'low_33': # data}

for key in data:
    with open('{}.out'.format(key), 'w') as output:
        for i in data[key]:
            output.write(i)
"
scatter plot python with several y values,"eli = enumerate(li)
i = eli.next()
i[0]
i[1]

list(enumerate(li))
"
Why is os.mkdir() slower when called explicitly?,"stat(""a/b/c"", 0x7fff34b1c4d0)           = -1 ENOENT (No such file or directory)
stat(""a/b"", 0x7fff34b1c260)             = -1 ENOENT (No such file or directory)
stat(""a"", 0x7fff34b1bff0)               = -1 ENOENT (No such file or directory)
mkdir(""a"", 0777)                        = 0
mkdir(""a/b"", 0777)                      = 0
mkdir(""a/b/c"", 0777)                    = 0
mkdir(""a/b/c/d"", 0777)                  = 0
"
Counting substrings in string,"def count(M, N):
    i = 0
    count = 0
    while True:
        try:
            i = N.index(M, i)+1
            count += 1
        except ValueError:
            break
    return count
"
What is the easiest but not fastest way to format this string into a list? Python,"myList=[myStr[i:i+4] for i in xrange(0,len(myStr),4)]
"
Python string notation,"LOREM_IPSUM = """"""\
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
""""""
"
Measuring Big O of multiplication in Python,"import time

for k in range(10):
    num = 10**(10**k)

    start = time.time()
    total = num * num
    finish = time.time()
    elapsed = finish - start

    print k, elapsed
"
Keyboard Event - Pygame,"if event.type == pygame.QUIT:
    done = True
"
Grab Values Within a Dictionary in a Dictionary,"print(str([d[""NODE""] for d in node.values() if ""NODE"" in d]))
"
int to binary python,">>> import struct
>>> struct.pack('>i', 257)
'\x00\x00\x01\x01'
>>> struct.pack('<i', 257)
'\x01\x01\x00\x00'
>>> struct.unpack('<i', '\x01\x01\x00\x00')
(257,)
>>> struct.unpack('>i', '\x00\x00\x01\x01')
(257,)
"
Increase each list element in all possible ways,"test = sum(([x+1] for x in test), [])
"
Python replace spaces in string iteratively,"from itertools import product, islice

def dashed_combos(inputstring):
    words = inputstring.split()
    for combo in islice(product(' -', repeat=len(words) - 1), 1, None):
        yield ''.join(w for pair in zip(words, combo + ('',)) for w in pair)
"
extract info from a string,"import urllib2
from bs4 import BeautifulSoup

mynumber = '1234567890'
url = ""http://www.nccptrai.gov.in/nccpregistry/saveSearchSub.misc?phoneno="" + mynumber

soup = BeautifulSoup(urllib2.urlopen(url))

header = soup.find('td', class_='GridHeader')

result = []
for row in header.parent.find_next_siblings('tr'):
    cells = row.find_all('td')
    try:
        result.append(cells[2].get_text(strip=True))
    except IndexError:
        continue
print result
"
Python: Changing Values in a Dictionary Tree Structure,"if not isinstance(node, list):
"
Python - creating patterned lists,"for values in stripped_header: 
    volume_axis += [int(values)] * 100
"
Python Tkinter one callback function for two buttons,"button1 = Button(master, text='Search')
button1.configure(command=lambda widget=button1: DoSomething(widget))
button2 = Button(master, text='Search')
button2.configure(command=lambda widget=button2: DoSomething(widget))
"
How do I run code when a Python class is evaluated,"In [4]: FirstClass.__subclasses__()
Out[4]: [__main__.SecondClass]
"
Checking efficiency of a Python Fibonacci Sequence Generator?,"a, b = 0, 1
counter = input(""Please enter the term you wish to end at: "")
for _ in xrange(counter): #xrange is more efficient than range, the number is not used so _ is used to show that
    a, b = b, a+b
    print a
    print
"
Permute rows and columns of a matrix,"c = np.arange(25).reshape(5, 5)
print(repr(c))
# array([[ 0,  1,  2,  3,  4],
#        [ 5,  6,  7,  8,  9],
#        [10, 11, 12, 13, 14],
#        [15, 16, 17, 18, 19],
#        [20, 21, 22, 23, 24]])

c[[0, 4], :] = c[[4, 0], :]     # swap row 0 with row 4...
c[:, [0, 4]] = c[:, [4, 0]]     # ...and column 0 with column 4

print(repr(c))

# array([[24, 21, 22, 23, 20],
#        [ 9,  6,  7,  8,  5],
#        [14, 11, 12, 13, 10],
#        [19, 16, 17, 18, 15],
#        [ 4,  1,  2,  3,  0]])
"
Converting a String to hex and calculate binary result in python,"def decode(data, size, offset=0):
    value = 0

    for ch in data[offset:size]:
        value <<= 6
        value |= ord(ch) - 0x30

    return value
"
User defined SVM kernel with scikit-learn,"def row_norms(X, squared=False):

    if issparse(X):
        norms = csr_row_norms(X)
    else:
        norms = np.einsum('ij,ij->i', X, X)

    if not squared:
        np.sqrt(norms, norms)
    return norms

def euclidean_distances(X, Y=None, Y_norm_squared=None, squared=False):
   """"""
    Considering the rows of X (and Y=X) as vectors, compute the
    distance matrix between each pair of vectors.

    [...]


    Returns
    -------
    distances : {array, sparse matrix}, shape (n_samples_1, n_samples_2)
   """"""
    X, Y = check_pairwise_arrays(X, Y)

    if Y_norm_squared is not None:
        YY = check_array(Y_norm_squared)
        if YY.shape != (1, Y.shape[0]):
            raise ValueError(
                ""Incompatible dimensions for Y and Y_norm_squared"")
    else:
        YY = row_norms(Y, squared=True)[np.newaxis, :]

    if X is Y:  # shortcut in the common case euclidean_distances(X, X)
        XX = YY.T
    else:
        XX = row_norms(X, squared=True)[:, np.newaxis]

    distances = safe_sparse_dot(X, Y.T, dense_output=True)
    distances *= -2
    distances += XX
    distances += YY
    np.maximum(distances, 0, out=distances)

    if X is Y:
        # Ensure that distances between vectors and themselves are set to 0.0.
        # This may not be the case due to floating point rounding errors.
        distances.flat[::distances.shape[0] + 1] = 0.0

    return distances if squared else np.sqrt(distances, out=distances)

def rbf_kernel(X, Y=None, gamma=None):

    X, Y = check_pairwise_arrays(X, Y)
    if gamma is None:
        gamma = 1.0 / X.shape[1]

    K = euclidean_distances(X, Y, squared=True)
    K *= -gamma
    np.exp(K, K)    # exponentiate K in-place
    return K
"
What is the Python code to split up a string so that it prints out normally in an 80-character window without wrapping?,"# You don't even use this so why import it? --> import string

def main():
    user_string = raw_input()
    all_caps = user_string.upper() # guess you wanted to make it uppercase
    output = [] # this will hold the decoded characters

    for char in all_caps:
        if char.isalpha():
            value = ord(char)
            if 70 <= value <= 90: # look at this, almost no other programming language supports that syntax
                num = value - 5
            elif 65 <= value <= 69:
                num = value + 21
            output.append(chr(num)) # add the decoded character to the output list
        else:
            output.append(char) # add the character verbatim to the output list (e.g. whitespace)

    print """".join(output) # print out the list by putting it together into a string

main()
"
Remove all occurrences of several chars from a string,">>> u'::2012-05-14 18:10:20.856000::'.translate({ord(k):None for k in u' -.:'})
u'20120514181020856000'
"
How to declare an array in python,a = [0] * 10000
Why is early return slower than else?,">>> T(lambda : without_else()).repeat()
[0.42015745017874906, 0.3188967452567226, 0.31984281521812363]
>>> T(lambda : with_else()).repeat()
[0.36009842032996175, 0.28962249392031936, 0.2927151355828528]
>>> T(lambda : without_else(True)).repeat()
[0.31709728471076915, 0.3172671387005721, 0.3285821242644147]
>>> T(lambda : with_else(True)).repeat()
[0.30939889008243426, 0.3035132258429485, 0.3046679117038593]
"
how to trim n characters of string in python?,"def rstrip_chars(s, chars):
    return s[:-len(chars)] if s.endswith(chars) else s

s = rstrip_chars(s, '000000')
"
Pandas changing cell values based on another cell,"df.fillna(method='ffill', inplace=True)"
Inheritable Tracking Decorator,"def decorator(f):
    f.decorated = True
    return f


class DecoMeta(type):

    def __new__(cls, name, bases, attrs):
        decorated_functions = []
        for v in attrs.values():
            if getattr(v, 'decorated', None):
                decorated_functions.append(v)
        attrs['decorated_functions'] = decorated_functions
        return super(DecoMeta, cls).__new__(cls, name, bases, attrs)


class Parent(object):
    __metaclass__ = DecoMeta
"
Coding summation formula and recursive function,"def N(d, memo={1:1, 2:1}):
    # http://oeis.org/A112915
    if d not in memo:
        memo[d] = sum(i * (d - i) * N(i) * N(d - i) for i in range(1, d))
    return memo[d]
"
Check whether each row of a matrix is in another matrix [Python],"np.argwhere((B[:,None,0] == A[:,1]) & (B[:,None,1] == A[:,2]))
"
creating an interactive Python GUI that generates a new list,"from Tkinter import *

master = Tk()

listbox = Listbox(master)
listbox.pack()

listbox.insert(END, ""a list entry"")

for item in [""one"", ""two"", ""three"", ""four""]:
    listbox.insert(END, item)

mainloop()
"
Python: copying a repeating dictionary into a list - last dict item being duped to all list items,"#! /usr/bin/python3.2

import re

class Sequence:
    def __init__ (self, raw): self.__raw = raw
    def __str__ (self): return 'Sequence {}'.format (self.__raw)
    def process (self): print ('Wolfing sequence {}'.format (self.__raw) )

class Option:
    def __init__ (self, raw): self.__raw = raw
    def __str__ (self): return 'Option {}'.format (self.__raw)
    def process (self): print ('Foxing option {}'.format (self.__raw) )

class Range:
    def __init__ (self, raw): self.__raw = raw
    def __str__ (self): return 'Range {}'.format (self.__raw)
    def process (self): print ('Bearing range {}'.format (self.__raw) )

class Slice:
    def __init__ (self, raw): self.__raw = raw
    def __str__ (self): return 'Slice {}'.format (self.__raw)
    def process (self): print ('Badgering slice {}'.format (self.__raw) )


class Stream:
    patterns = [ ('([0-9a-fA-F]+)', Sequence),
        ('(\\([0-9a-fA-F]+\\|[0-9a-fA-F]+\\))', Option),
        ('({[0-9a-fA-F]+})', Range),
        ('(\\[[0-9a-fA-F]+:[0-9a-fA-F]+\\])', Slice) ]

    def __init__ (self, stream):
        self.__tokens = []
        while stream:
            found = False
            for pattern, cls in self.patterns:
                m = re.match (pattern, stream)
                if m:
                    m = m.groups () [0]
                    self.__tokens.append (cls (m) )
                    stream = stream [len (m):]
                    found = True
                    break
            if not found: raise Exception ('Unrecognized sequence')

    @property
    def tokens (self): return (token for token in self.__tokens)

    def process (self):
        for token in self.__tokens: token.process ()

stream = Stream ('524946(46|58){4}434452[22:33]367672736E')
print ('These are the tokens:')
for idx, token in enumerate (stream.tokens):
    print ('{} at position {}.'.format (token, idx) )

print ('\nNow let\'s process them all:')
stream.process ()
"
What is the difference between Lock and RLock,"lock = Lock()

def f():
  with lock:
    _g()
    _h()

def g():
  with lock:
    _g()

def _g():
  _h()
  do_something1()

def h():
  with lock:
    _h()

def _h():
  do_something2()
"
How to define default dictionary keys for sub-classed from built-in dictionary class,"class SubClass(dict):
    def __init__(self, *args, **kwargs):
        super(SubClass, self).__init__(*args, **kwargs)
        self.update({
            'id':None,
            'number':None,
            'oneMoreDefaultKey':None})

instance = SubClass({'city':'New York', 'year':2014})
print instance['id'], instance['year']
"
How to split one list in a list of x list with python?,"

def chunks(l, n):
    return [l[i:i + n] for i in range(0, len(l), n)]
"
Converting date into hours,"abs(start_time - end_time) > timedelta(hours=6)
"
How to find the average of previous sales at each time in python,"import pandas as pd
import datetime

dateparse = lambda x: pd.datetime.strptime(x, '%m/%d/%Y')
df = pd.read_csv('Sample.csv',index_col='date', parse_dates=[0], date_parser=dateparse)

expd_gb = df.reset_index().groupby(['wholesaler', 'product'])['sales'].apply(pd.Series.expanding)
idx = df.reset_index().groupby(['wholesaler', 'product', 'date'])['sales'].count().index

cnct = pd.concat([expd_gb.iloc[n].mean().shift(1) for n in range(len(expd_gb))])
cnct.index = idx

cnct.to_csv('TotalAvg.csv')
"
"Plotting ticks on the x axis with positive and negative values, in strange order -Python","plt.xticks(range(len(xaxis)), xaxis, rotation='vertical')
"
getting bytes from unicode string in python,">>> chars = '\u4132'.encode('utf-16be')
>>> chars
b'A2'
>>> chars = bytes('\u4132', 'utf-16be')
>>> chars  # Just the same.
b'A2'
>>> chars[0]
65
>>> '%x' % chars[0]
'41'
>>> hex(chars[0])
'0x41'
>>> ['%x' % c for c in chars]
['41', '32']
>>> [hex(c) for c in chars]
['0x41', '0x32']
"
How to remove duplicates from a list python,">>> from collections import Counter
>>> c = Counter('hello')
>>> c
Counter({'l': 2, 'h': 1, 'o': 1, 'e': 1})
>>> for i,x in c.items():
...     print('{} - {}'.format(i,x))
...
l - 2
h - 1
o - 1
e - 1
"
Python: split bytes with a hexadecimal delimiter,"import io

with io.open('filename', 'r', encoding='utf16') as fobj:
    # ....
"
How to send audio wav file generated at the server to client browser?,"from cStringIO import StringIO
from flask import make_response

from somewhere import generate_wav_file  # TODO your code here

@app.route('/path')
def view_method():

    buf = StringIO()

    # generate_wav_file should take a file as parameter and write a wav in it
    generate_wav_file(buf) 

    response = make_response(buf.getvalue())
    buf.close()
    response.headers['Content-Type'] = 'audio/wav'
    response.headers['Content-Disposition'] = 'attachment; filename=sound.wav'
    return response
"
"Python, work with list, find max sequnce length",">>> from itertools import groupby
>>> test_list = ['a', 'a', 'a', 'b', 'b', 'a', 'c', 'b', 'a', 'a']
>>> max_count = {}
>>> for val, grp in groupby(test_list):
...     count = sum(1 for _ in grp)
...     if count > max_count.get(val, 0):
...         max_count[val] = count
... 
>>> max_count
{'a': 3, 'c': 1, 'b': 2}
"
How to parallelized file downloads?,"#!/usr/bin/env python3
import asyncio
import logging
from contextlib import closing
import aiohttp # $ pip install aiohttp

@asyncio.coroutine
def download(url, session, semaphore, chunk_size=1<<15):
    with (yield from semaphore): # limit number of concurrent downloads
        filename = url2filename(url)
        logging.info('downloading %s', filename)
        response = yield from session.get(url)
        with closing(response), open(filename, 'wb') as file:
            while True: # save file
                chunk = yield from response.content.read(chunk_size)
                if not chunk:
                    break
                file.write(chunk)
        logging.info('done %s', filename)
    return filename, (response.status, tuple(response.headers.items()))

urls = [...]
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')
with closing(asyncio.get_event_loop()) as loop, \
     closing(aiohttp.ClientSession()) as session:
    semaphore = asyncio.Semaphore(4)
    download_tasks = (download(url, session, semaphore) for url in urls)
    result = loop.run_until_complete(asyncio.gather(*download_tasks))
"
"Python regex, pattern-match multiple backslash characters","command = r'abc\\\\\""abc'
search_string = r'.{2}(?:\\){5}"".{2}'
print re.compile(search_string).search(command).group()
"
How to get follower count using tweepy,"import sys
import time
from urllib2 import URLError
from httplib import BadStatusLine
import json
import twitter

def oauth_login():
    CONSUMER_KEY = ''
    CONSUMER_SECRET = ''
    OAUTH_TOKEN = ''
    OAUTH_TOKEN_SECRET = ''
    auth = twitter.oauth.OAuth(OAUTH_TOKEN, OAUTH_TOKEN_SECRET,
                               CONSUMER_KEY, CONSUMER_SECRET)
    twitter_api = twitter.Twitter(auth=auth)
    return twitter_api

def make_twitter_request(twitter_api_func, max_errors=10, *args, **kw):
# A nested helper function that handles common HTTPErrors. Return an updated
# value for wait_period if the problem is a 500 level error. Block until the
# rate limit is reset if it's a rate limiting issue (429 error). Returns None
# for 401 and 404 errors, which requires special handling by the caller.
    def handle_twitter_http_error(e, wait_period=2, sleep_when_rate_limited=True):
        if wait_period > 3600: # Seconds
            print >> sys.stderr, 'Too many retries. Quitting.'
            raise e
# See https://dev.twitter.com/docs/error-codes-responses for common codes
        if e.e.code == 401:

            print >> sys.stderr, 'Encountered 401 Error (Not Authorized)'
            return None
        elif e.e.code == 404:
            print >> sys.stderr, 'Encountered 404 Error (Not Found)'
            return None
        elif e.e.code == 429:
            print >> sys.stderr, 'Encountered 429 Error (Rate Limit Exceeded)'
            if sleep_when_rate_limited:
                print >> sys.stderr, ""Retrying in 15 minutes...ZzZ...""
                sys.stderr.flush()
                time.sleep(60*15 + 5)
                print >> sys.stderr, '...ZzZ...Awake now and trying again.'
                return 2
            else:
                raise e # Caller must handle the rate limiting issue
        elif e.e.code in (500, 502, 503, 504):
            print >> sys.stderr, 'Encountered %iError. Retrying in %iseconds' %\
            (e.e.code, wait_period)
            time.sleep(wait_period)
            wait_period *= 1.5
            return wait_period
        else:
            raise e
# End of nested helper function
    wait_period = 2
    error_count = 0
    while True:
        try:
            return twitter_api_func(*args, **kw)
        except twitter.api.TwitterHTTPError, e:
            error_count = 0
            wait_period = handle_twitter_http_error(e, wait_period)
            if wait_period is None:
                return
        except URLError, e:
            error_count += 1
            print >> sys.stderr, ""URLError encountered. Continuing.""
            if error_count > max_errors:
                print >> sys.stderr, ""Too many consecutive errors...bailing out.""
                raise
        except BadStatusLine, e:
            error_count += 1
            print >> sys.stderr, ""BadStatusLine encountered. Continuing.""
            if error_count > max_errors:
                print >> sys.stderr, ""Too many consecutive errors...bailing out.""
                raise
"
How to Insert tags in texts,">>> l = ['I have a text like that', 'Or like that']
>>> ['<tag1>{0}</tag1>'.format(s) for s in l]
['<tag1>I have a text like that</tag1>', '<tag1>Or like that</tag1>']
"
How to copy define function to make 'n' variations of it? (Python),"def get_functions(count):
    ccfarrays=map(lambda: [], range(count))
    def get_nth_func(n):
        def ccf1(binnum):
            for i in datarange:
                ccf=((a[i]-xbar)*(c[(i-binnum)]-ybar))/(norm*stdevx*stdevy)
                parray.append(ccf)
                calc=sum(parray)
            ccfarray[n].append(calc)
            del parray[:]
            return ccfarray[n]
        return ccf1
    return map(get_nth_func, range(count)
"
Need output in a specific format in Pandas groupby,"df = pd.DataFrame({'a': [1, 1, 2, 2], 'b': [1, 2, 1, 2], 'c': range(4)})
df.c.groupby([df.a, df.b]).sum().reset_index()

    a   b   c
0   1   1   0
1   1   2   1
2   2   1   2
3   2   2   3
"
python how to change element in nested list,"l=[[0,0]]*10
"
Attempting a Nested Scrape Using BeautifulSoup,"from BeautifulSoup import BeautifulSoup

with open('data2.txt') as f:
    html = f.read()

soup = BeautifulSoup(html)

for h1 in soup.findAll('h1'):
    colmask_div = h1.findNextSibling('div')

    for box_div in colmask_div.findAll('div'):
        h4 = box_div.find('h4')

        for ul in box_div.findAll('ul'):
            print'{} : {} : {}'.format(h1.text, h4.text, ul.li.a.text)



--output:--
Hello : My Favorite Number is : 1
Hello : My Favorite Number is : 2
Hello : My Favorite Number is : 3
Hello : My Favorite Number is : 4
Hello : Your Favorite Number is : 1
Hello : Your Favorite Number is : 2
Hello : Your Favorite Number is : 3
Hello : Your Favorite Number is : 4
Goodbye : Their Favorite Number is : 1
Goodbye : Their Favorite Number is : 2
Goodbye : Their Favorite Number is : 3
Goodbye : Their Favorite Number is : 4
Goodbye : Our Favorite Number is : 1
Goodbye : Our Favorite Number is : 2
Goodbye : Our Favorite Number is : 3
Goodbye : Our Favorite Number is : 4
"
Read in parallel multiples files in Python,"import threading
import time
import random

def worker(f_n):
    with open(f_n) as f:
        time.sleep(random.random())
        print f_n, "" => "", f.read()

f_list = ['a','b', 'c', 'd', 'e']

threads = []
for f_n in f_list:
    t = threading.Thread(target=worker, args=(f_n))
    threads.append(t)

for t in threads:
    t.start()


for t in threads:
    t.join()
"
vectorized implementation for pseudo pivot table in python,"import pandas as pd

df = pd.DataFrame(
    {'Component': ['Air conditioner', 'Air conditioner', 'airbag', 'engine with 150 H/P', 'airbag',
                   '1-year concierge assistance', 'ABS breaks', 'ABS breaks', 'airbag', 
                   'air conditioner', 'engine with 250 H/P'], 
     'Vehicle': ['Ford', 'Ford', 'Ford', 'Ford', 'Toyota', 'Toyota', 'Toyota',
                 'Chrysler', 'Chrysler', 'Chrysler', 'Chrysler']})

result = pd.crosstab(index=[df['Vehicle']], columns=[df['Component']]).clip(upper=1)
print(result)
"
How to view all elements of a Python Dictionary for Just One Value of one of the Elements in a Tuple Key,">>> testTrak = {(0,1): '+', (0,2): '-', (1,1): '34.0', (1,2): 'test'}
>>> {key:value for key, value in testTrak.items() if key[0] == 1}
{(1, 2): 'test', (1, 1): '34.0'}
"
Concise string slicing in objective C,"- (NSString *)substringFromIndex:(NSUInteger)from;
- (NSString *)substringToIndex:(NSUInteger)to;
- (NSString *)substringWithRange:(NSRange)range;
"
join plenty of files in python,"  for lines in chain(*infiles):
       fout.write(lines)
       if not lines.endswith('\n'):
           fout.write('\n')
"
re.search() exact comparison at end of string,"re.search(r'%s$' % re.escape(name1), name2, re.IGNORECASE)
"
"If value contains string, then set another column value","is_motorcycle = df.Campaign.str.contains('Motorcycle')
df['vehicle'] = pd.Series([""MC""] * len(df)) * is_motorcycle
"
"Convert list of positions [4, 1, 2] of arbitrary length to an index for a nested list","import collections

class NestedListIter(object):
    '''A mutable container that enables flat traversal of a nested tree of 
    lists. nested_list should contain only a list-like mutable sequence. 
    To preserve a clear demarcation between 'leaves' and 'branches', empty 
    sequences are not allowed as toplevel objects.'''
    def __init__(self, nested_list):
        if not nested_list:
            raise ValueError, 'nested_list must be a non-empty sequence'
        self.nested_list = nested_list # at some point, vet this to make sure
        self.go_to_head()              # it contains no empty sequences

    def _is_sequence(self, item=None):
        '''Private method to test whether an item is a non-string sequence.
        If item is None, test current item.'''
        if item is None:
            item = self._get_item_at(self.stack)
        return isinstance(item, collections.Sequence) and not isinstance(item, basestring)

    def _is_in_range(self, index_tuple=None):
        '''Private method to test whether an index is in range. 
        If index is None, test current index.'''
        if index_tuple is None:
            index_tuple = self.stack
        if any(x < 0 for x in index_tuple):
            return False
        try:
            self._get_item_at(index_tuple)
        except IndexError:
            return False
        else:
            return True

    def _get_item_at(self, index_tuple):
        '''Private method to get item at an arbitrary index, with no bounds checking.'''
        item = self.nested_list
        for i in index_tuple:
            item = item[i]
        return item

    def _set_item_at(self, index_tuple, value):
        '''Private method to set item at an arbitrary index, with no bounds checking.
        Throws a ValueError if value is an empty non-string sequence.'''
        if self._is_sequence(value) and not value:
            raise ValueError, ""Cannot set an empty list!""
        containing_list = self._get_item_at(index_tuple[:-1])
        containing_list[index_tuple[-1]] = value

    def _insert_at(self, index_tuple, value):
        '''Private method to insert item at an arbitrary index, with no bounds checking.
        Throws a ValueError if value is an empty non-string sequence.'''
        if self._is_sequence(value) and not value:
            raise ValueError, ""Cannot insert an empty list!""
        containing_list = self._get_item_at(index_tuple[:-1])
        containing_list.insert(index_tuple[-1], value)

    def _delete_at(self, index_tuple):
        '''Private method to delete item at an arbitrary index, with no bounds checking.
        Recursively deletes a resulting branch of empty lists.'''
        containing_list = self._get_item_at(index_tuple[:-1])
        del containing_list[index_tuple[-1]]
        if not self._get_item_at(index_tuple[:-1]):
            self._delete_at(index_tuple[:-1])

    def _increment_stack(self):
        '''Private method that tires to increment the top value of the stack.
        Returns True on success, False on failure (empty stack).'''
        try:
            self.stack[-1] += 1
        except IndexError:
            return False
        else: 
            return True

    def _decrement_stack(self):
        '''Private method that tries to decrement the top value of the stack.
        Returns True on success, False on failure (empty stack).'''
        try:
            self.stack[-1] -= 1
        except IndexError:
            return False
        else:
            return True

    def go_to_head(self):
        '''Move the cursor to the head of the nested list.'''
        self.stack = []
        while self._is_sequence():
            self.stack.append(0)

    def go_to_tail(self):
        self.stack = []
        '''Move the cursor to the tail of the nested list.'''
        while self._is_sequence():
            self.stack.append(len(self.get_item()) - 1)

    def right(self):
        '''Move cursor one step right in the nested list.'''
        while self._increment_stack() and not self._is_in_range():
            self.stack.pop()
        if not self.stack:
            self.go_to_tail()
            return False
        while self._is_sequence():
            self.stack.append(0)
        return True

    def left(self):
        '''Move cursor one step left in the nested list.'''
        while self._decrement_stack() and not self._is_in_range():
            self.stack.pop()
        if not self.stack:
            self.go_to_head()
            return False
        while self._is_sequence():
            self.stack.append(len(self.get_item()) - 1)
        return True

    def move_cursor(self, index_tuple):
        '''Move cursor to the location indicated by index_tuple.
        Raises an error if index_tuple is out of range or doesn't correspond
        to a toplevel object.'''
        item = self._get_item_at(index_tuple)
        if self._is_sequence(item):
            raise IndexError, 'index_tuple must point to a toplevel object'

    def get_item(self):
        '''Get the item at the cursor location.'''
        return self._get_item_at(self.stack)

    def set_item(self, value):
        '''Set the item a the cursor locaiton.'''
        return self._set_item_at(self.stack, value)

    def insert(self, value):
        '''Insert an item at the cursor location. If value is a sequence, 
        cursor moves to the first toplevel object in value after insertion. 
        Otherwise, cursor does not move.'''
        temp_stack = self.stack[:]
        self.left()
        self._insert_at(temp_stack, value)
        self.right()

    def delete(self):
        '''Deete an item at the cursor location. Cursor does not move.'''
        temp_stack = self.stack[:]
        self.left()
        self._delete_at(temp_stack)
        self.right()

    def iterate(self):
        '''Iterate over the values in nested_list in sequence'''
        self.go_to_head()
        yield self.get_item()
        while self.right():
            yield self.get_item()

    def iterate_left(self):
        '''Iterate over the values in nested_list in reverse.'''
        self.go_to_tail()
        yield self.get_item()
        while self.left():
            yield self.get_item()

    def find(self, value):
        '''Search for value in nested_list; move cursor to first location of value.'''
        for i in self.iterate():
            if i == value:
                break

    def find_left(self, value):
        '''Search for value backwards in nested_list; move cursor to last location of value.'''
        for i in self.iterate_left():
            if i == value:
                break

def _NLI_Test():
    l = [1, 2, 3, ['a', 'b', 'c'], 4, ['d', 'e', [100, 200, 300]], 5, ['a', 'b', 'c'], 6]
    nli = NestedListIter(l)
    print nli.nested_list
    for i in nli.iterate():
        print i,
    print
    for i in nli.iterate_left():
        print i,
    print

    nli.go_to_head()
    for i in range(5):
        nli.right()
    nli.insert('cow')
    nli.insert(['c', ['o', 'w']])
    print nli.nested_list
    nli.find('cow')
    print nli.get_item()
    nli.delete()
    print nli.nested_list
    nli.find('c')
    nli.delete()
    print nli.nested_list
    nli.find_left('w')
    nli.delete()
    nli.find('o')
    nli.delete()
    print nli.nested_list
    print nli.nested_list == l
    nli.find(100)
    nli.set_item(100.1)
    print nli.nested_list

if __name__ == '__main__':
    _NLI_Test()
"
How can I parse Javascript variables using python?,"#Read page data as a string
pageData = sock.read()
#set p as regular expression
p = re.compile('(?<=line1=)(.*)(?=;)')
#find all instances of regular expression in pageData
parsed = p.findall(pageData)
#load as JSON instead of using evaluate to prevent risky execution of unknown code
newParsed = json.loads(parsed[0])
"
How to search nested list grid and give lettered coordinates in Python?,"def findvalue(grid, value):
    for rownum, row in enumerate(grid):
        for colnum, itemvalue in enumerate(row):
            if itemvalue == value:
                return (rownum, colnum)
    raise ValueError(""Value not found in grid"")
"
How to insert a string between particular characters in Python?,">>> re.sub(r'(###### ).*( ######)', r'\1'+smallString+r'\2', largeString)
'Lorem ipsum ###### foo bar ###### dolor sit amet'
"
Pythonic way using list comprehension,"return [Attribute(name=attr['internalname'], value=attr['value'])
        for attr in attributes if attr['internalname'] in attributenames]
"
finding index of an item closest to the value in a list that's not entirely sorted,"min(range(len(a)), key=lambda i: abs(a[i]-11.5))
"
How do I add elements from one numpy array to another at certain indices?,"In [21]: A = np.array([[5,20],[8,10]])      # Indices and values

In [22]: X = np.zeros(10,dtype=A.dtype)     # Array to store additions

In [23]: np.add.at(X,A[:,0],A[:,1])         # Perform np.add.at

In [24]: X                                  # Show output
Out[24]: array([ 0,  0,  0,  0,  0, 20,  0,  0, 10,  0])
"
Is it possible to sort using sorted() with attributes from two different models?,"scores = Vote.objects.get_score_in_bulk(posts_list)
posts_list = sorted(posts_list, key=lambda post: (scores[post.id]['score'], post.datetime))
"
"recursively exploding a list of list to ""atomic list""","def flatten(items):
    for elem in items:
        if isinstance(elem[0],list):
            for sub_elem in elem:
                yield sub_elem
        else:
            yield elem

print list(flatten(DictofCoordinates.values())) 
[[1, 1], [[3, 3], [3, 3], [3, 3]], [2, 2], [2, 2], [2, 2], [[41, 41], [41, 41]], [[42, 42], [42, 42]]]
"
Generating random numbers with weighted probabilities in python,">>> choices, counts = np.unique(a, return_counts=True)
>>> np.random.choice(choices, 5, p=counts/len(a), replace=False)
array([9, 8, 2, 4, 5])
"
return list indices if two conditions met in python,"m2 = [i for i, (csum, counter) in enumerate(zip(countersum, gmcounter)) if csum == 2 and 2 in counter]
"
How to convert strings numbers to integers in a list?,changed_list = [(int(f) if f.isdigit() else f) for f in original_list]
Usage of Python 3 super(),">>> super(B, B).m
<function m at 0xb761482c>
>>> super(B, B).m()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
TypeError: m() takes exactly 1 positional argument (0 given)
>>> super(B, B).m(B())
m
"
Is there a comparison key for set objects?,"from collections.abc import MutableSet  # On Py2, collections without .abc

class keyedset(MutableSet):
    def __init__(self, it=(), key=lambda x: x):
        self.key = key
        self.contents = {}
        for x in it:
            self.add(x)

    def __contains__(self, x):
        # Use anonymous object() as default so all arguments handled properly
        sentinel = object()
        getval = self.contents.get(self.key(x), sentinel)
        return getval is not sentinel and getval == x

    def __iter__(self):
        return iter(self.contents.values())  # itervalues or viewvalues on Py2

    def __len__(self):
        return len(self.contents)

    def add(self, x):
        self.contents.setdefault(self.key(x), x)

    def discard(self, x):
        self.contents.pop(self.key(x), None)
"
Edit Dictionary in python,">>> my_dict= {'C':{'3':'sd','34':'cb'}} # created by loop3
>>> my_big_dict = {}
>>> my_big_dict.update(my_dict)
>>> my_big_dict
{'C': {'3': 'sd', '34': 'cb'}}
"
Python - reading data from file with variable attributes and line lengths,"for data in process_file('data.txt'):
    print('-'*20)
    for i in data:
        print('%s:'%(i), data[i])

    print()
"
Sorting a list of dictionaries based on the order of values of another list,"listTwo.sort(key=lambda x: listOne.index(x[""eyecolor""]))
"
Python dumps variable from loop,"global totalBottles, totalPayout, todayBottles
totalBottles=0 #store the accumulated bottle values
counter=1 #will control the loop
todayBottles=0 #store the number of bottles returned on a day
totalPayout=0 #store the calculated value of totalBottles x.10

def main():
    global totalBottles, totalPayout, todayBottles
    keepGoing='y'

    while keepGoing =='y':
        getBottles (counter)
        calcPayout ()
        printInfo(totalBottles, totalPayout)
        keepGoing == raw_input ('Do you want to run the program again?')

def getBottles (counter):
    global totalBottles, todayBottles
    while counter <8:
        todayBottles = input ('Enter number of bottles returned for the day:')
        totalBottles = todayBottles + totalBottles
        counter=counter + 1

def calcPayout():
    global totalBottles, totalPayout, todayBottles
    totalPayout = totalBottles * .10

def printInfo(totalBottles, totalPayout):
    print totalBottles,('is the total bottles')
    print totalPayout, ('amount due')

main()
"
Mutable object is not changed by a function. How to debug it?,"from collections import OrderedDict as dord

class FirstClass(object):
    @staticmethod
    def changeIt(d):
        d['b'] = 'b'

class SecondClass(object):
    def __init__(self):
        pass
    def test(self, d):
        #save the temporary result
        temp = dord((k.upper(), v.upper()) for k, v in d.items())
        #empty the old one
        d.clear()
        #update with the new data
        d.update(temp)
        FirstClass.changeIt(d)

if __name__ == ""__main__"":

    d = dord({'a':'a'})
    t = SecondClass()
    t.test(d)
    print(d)
"
Python - efficiently find where something would land in a sorted list?,"from bisect import insort


l = ['a',""b"", 'c', 'e']

insort(l, ""d"")
print(l)
insort(l, ""f"")
print(l)

['a', 'b', 'c', 'd', 'e']
['a', 'b', 'c', 'd', 'e', 'f']
"
What is the pythonic way to have conditional shadowing?,"def a(b): #Line 1
  print ""a"",b
def c(b):
  a2 = a
  if b is None:
    def a2(b):
      print 'local',b
  a2(b) #Line 8
"
Python: Converting from ISO-8859-1/latin1 to UTF-8,apple.decode('iso-8859-1').encode('utf8')
Python scoping issue with dictionary comprehension inside class level code,"class Foo:
    def loadings():
        load = dict(hi=1)
        if 'hi' in load:
            print(load['hi']) 
            print({e:load[e] for e in load})
        return load
    loadings = loadings()

print(Foo.loadings)
"
Finding the position of an object in an image,"#! /usr/bin/python2.7

from PIL import Image, ImageDraw

im = Image.open ('zGjE6.png')
isize = im.size
walnut = Image.open ('walnut.png')
wsize = walnut.size
x0, y0 = wsize [0] // 2, wsize [1] // 2
pixel = walnut.getpixel ( (x0, y0) ) [:-1]

def diff (a, b):
    return sum ( (a - b) ** 2 for a, b in zip (a, b) )

best = (100000, 0, 0)
for x in range (isize [0] ):
    for y in range (isize [1] ):
        ipixel = im.getpixel ( (x, y) )
        d = diff (ipixel, pixel)
        if d < best [0]: best = (d, x, y)

draw = ImageDraw.Draw (im)
x, y = best [1:]
draw.rectangle ( (x - x0, y - y0, x + x0, y + y0), outline = 'red')
im.save ('out.png')
"
NDB query filtering by property (string),"        q = q.filter(MyModel._properties[kw] == v)
"
Python text search library,"if match(""hello world how are you what are you doing"",
         include_words=[""world"", ""how are""],
         exclude_words=[""tigers"", ""bye bye""]):
    print('matches')
"
search python dictionary not showing,"def search(values, searchFor):
    for element, details in values.items():
        if element == searchFor:
           print details #As @PM 2Ring says, for Python 3x you should print (details)
"
finding a file name from a substring,"import glob
import os
print '\n'.join(glob.iglob(os.path.join(mypath, ""KRAS_P01446_3GFT_*"")))
"
subclassing float to force fixed point printing precision in python,"# Perform all our computations using standard floats.
results = compute_huge_numbers(42)
# Switch to prettyfloats for printing.
print(map(prettyfloat, results))
"
case sensitive string replacement in Python,"""""""Abc"""""".translate(maketrans('abcABC', 'defDEF'))"
Python to combine lines in a txt file,"import re

with open('yourfile.txt') as f:
    exampleText = f.read()

new = ''

for line in exampleText.split('\n'):
    if line == '':
        new += '\n\n'
    elif re.search('[a-zA-Z]', line):  # check if there is text
        new += line + ' ' 
    else:
        new += line + '\n' 
"
Lowercase a field in namedtuple in python,">>> from collections import namedtuple
>>> class MyTuple(namedtuple('MyTuple', 'field1 field2')):
...     __slots__ = ()                                                                                                    
...     def __new__(cls, field1, field2):
...         """"""Create a new instance of MyTuple(field1, field2)""""""
...         return super(MyTuple, cls).__new__(cls, field1.lower(), field2)
...     def __str__(self):
...         return '{}:{}'.format(self.field1, self.field2)
... 
>>> mt = MyTuple('FOO', 'BAR')
>>> mt
MyTuple(field1='foo', field2='BAR')
>>> print(mt)
foo:BAR
>>> mt.field1
'foo'
>>> mt.field2
'BAR'
"
Python code not working similar in Jinja Template,"import pprint

modules = [
    {'moduletitle': 'Parent Module 1', 'position': '1'},
    {'moduletitle': 'Parent Module 2', 'position': '2'},
    {'moduletitle': 'Parent Module 3', 'position': '3'},
]

submodules = [
    {'moduletitle': 'sub module 11', 'position': '1'},
    {'moduletitle': 'sub module 22', 'position': '2'},
    {'moduletitle': 'sub module 1', 'position': '1'},
    {'moduletitle': 'sub module 2', 'position': '3'},
]

subtotal = [2, 2, 0]

subcontent = [
    {'content': 'Dj.docx', 'position': '10', 'contenttype': 'Pdf/Doc', 'coursemoduleid': 55341, 'contenttitle': 'test content'},
]

contenttotal = [0, 0, 1, 0]

###

#first, nest the ""subcontent"" items in the ""submodule"" items
subcontent_iter = iter(subcontent)
for sub, num_content_items in zip(submodules, contenttotal):
    tmp = []
    for i in range(num_content_items):
        tmp.append(next(subcontent_iter))
    sub['content'] = tmp

#then, nest the ""submodule"" items under the ""module"" items
submodule_iter = iter(submodules)
for (module, num_submodules) in zip(modules, subtotal):
    tmp = []
    for i in range(num_submodules):
        tmp.append(next(submodule_iter))
    module['submodules'] = tmp

pprint.pprint(modules)
"
How to load IPython shell with PySpark,"IPYTHON=1 /path/to/bin/pyspark
"
How to call a python function within quotation marks,"def get_current_year():
    return '2013' # just an example, not the real function

s = 'Copyright 2008-{} Company Name Ltd.'
s.format(get_current_year())
=> 'Copyright 2008-2013 Company Name Ltd.'
"
Pygtk StatusIcon not loading?,"# Wait 3 seconds
time.sleep(3)
# Set the icon to idle
self.statusIcon.set_from_file(""img/lin_idle.png"")
"
how to access values of nested dictionary keys in python?,"class ScreenBooking(object):

    def __init__(self):
        super(ScreenBooking, self).__init__()
        self.seats = {
            ('screen1','day4'):{'show1':100,'show2':100,'show3':100,'show4':100},
            ('screen1','day5'):{'show1':100,'show2':100,'show3':100,'show4':100},
            ('screen1','day6'):{'show1':100,'show2':100,'show3':100,'show4':100},
            ('screen1','day7'):{'show1':100,'show2':100,'show3':100,'show4':100},
            ('screen2','day1'):{'show1':100,'show2':100,'show3':100,'show4':100},
            ('screen2','day2'):{'show1':100,'show2':100,'show3':100,'show4':100},
            ('screen2','day3'):{'show1':100,'show2':100,'show3':100,'show4':100},
        }
        self.shows = ['show1', 'show2', 'show3', 'show4']


    def check_valid_details(self, screen, show, day):
        """"""
        Check if booking details are valid and return True/False accordingly.
        """"""
        if (screen, day) not in self.seats or show not in self.shows:
            return  False
        return True

    def book_seats(self, screen, show, no_of_seats, day):
        """"""
        Book seats after checking valid booking details and the remaining seats.
        """"""
        valid_details = self.check_valid_details(screen, show, day)
        if not valid_details:
            print 'Invalid booking details!'
            return
        show_total_seats = self.seats[(screen, day)][show]
        if show_total_seats > int(no_of_seats):
            show_remaining_seats = show_total_seats - int(no_of_seats)
            self.seats[(screen, day)][show] = show_remaining_seats #update the seats count
            print '%s seat(s) booked'%(no_of_seats)
        else:
            print 'Sorry, No seats available in %s. Please try other Screens'%(screen)

a1 = ScreenBooking()
a1.book_seats('screen1','show1','98','day4')
a1.book_seats('screen1','show1','10','day4')
"
"Going from (a_1, a_2, ..., a_n) to (f(a_1), f(a_2), ..., f(a_n))","[f(x) for x in my_list]
"
Best way to regroup a string into a list of 2-character string,"print map("""".join, zip(*[iter(data)] * 2))
"
Python list of tuples to list of int,"y = map(operator.itemgetter(0), x)"
"How can i print list of dict values, one value in list for each key",">>> d={'s1':{'a':[1,2,3],'b':[4,5,6]},'s2':{'d':[77,88,99],'e':[666,333,444]}}
>>> for k in sorted(d.keys()):
...   v = d[k]
...   for i in xrange(len(v.values()[0])):
...     print k
...     for k2 in sorted(v.keys()):
...       v2 = v[k2]
...       print ""%s,%d"" % (k2, v2[i])
...     print ""%s\n"" % k
... 
"
check if a number already exist in a list in python,"from collections import OrderedDict

mydict = OrderedDict()
for item in ...:
    mydict[item] = True
"
Class attribute overriding: keep parent class changes,"class A:
    d = {2:3}
    @classmethod
    def c(cls):
        print (cls.d)

class B(A):
    d = A.d.copy()
    d.update({0:1})

B.c()
A.c()
"
Stiff ODE-solver,"from __future__ import print_function

import numpy as np
from scipy.integrate import ode


def func(t, u, mu):
    tvals.append(t)
    u1 = u[1]
    u2 = mu*(1 - u[0]*u[0])*u[1] - u[0]
    return np.array([u1, u2])


def jac(t, u, mu):
    j = np.empty((2, 2))
    j[0, 0] = 0.0
    j[0, 1] = 1.0
    j[1, 0] = -mu*2*u[0]*u[1] - 1
    j[1, 1] = mu*(1 - u[0]*u[0])
    return j


mu = 10000.0
u0 = [2, 0]
t0 = 0.0
tf = 10

for name, kwargs in [('vode', dict(method='adams')),
                     ('vode', dict(method='bdf')),
                     ('lsoda', {})]:
    for j in [None, jac]:
        solver = ode(func, jac=j)
        solver.set_integrator(name, atol=1e-8, rtol=1e-6, **kwargs)
        solver.set_f_params(mu)
        solver.set_jac_params(mu)
        solver.set_initial_value(u0, t0)

        tvals = []
        i = 0
        while solver.successful() and solver.t < tf:
            solver.integrate(tf, step=True)
            i += 1

        print(""%-6s %-8s jac=%-5s "" %
              (name, kwargs.get('method', ''), j.func_name if j else None),
              end='')

        tvals = np.unique(tvals)
        print(""len(tvals) ="", len(tvals))
"
python 2.7 permutation of string starting from index,"perms = ['{}{}{}'.format(pre, delimiter, ''.join(p)) for p in permutations(post)]
"
Is it possible to query multiple datastore keys in single query?,"request = datastore.LookupRequest()
request.key.extend(list_of_keys)
response = datastore.lookup(request)
"
How to list the used chars in a text in Python?,"def foobar(s):
    return """".join(set(s.replace("" "","""")))

In [4]: foobar(""what a nice day"")
Out[4]: 'acedihntwy'
"
Python Blackjack Game how to carry a variable in a while loop,"compCards = [ranCompCard, ranCompCard2]
while sum(compCards) < 15:
    compCards.append(random.choice(availableCards))
"
reading strings from large file faster,"def find_postag(word, postag):
    start = index[word[0].lower()]
    for line in data[start:]:
        # your code here
        if all(i in line for i in (word,postag)):
            if line.split("" "")[0].startswith(word) and line.split("" "")[1] == word+postag:
                selectedword = line.split("" "")[0]
                break
    return selectedword
"
How could I check if a number is a perfect square?,"def is_square(apositiveint):
  x = apositiveint // 2
  seen = set([x])
  while x * x != apositiveint:
    x = (x + (apositiveint // x)) // 2
    if x in seen: return False
    seen.add(x)
  return True

for i in range(110, 130):
   print i, is_square(i)
"
How to insert strings with quotes and newlines into sqlite db with Python?,"c.execute(""INSERT INTO test VALUES (?, 'bar')"", (testfield,))"
Python library for playing fixed-frequency sound,"#!/usr/bin/env python
""""""Play a fixed frequency sound.""""""
from __future__ import division
import math

from pyaudio import PyAudio # sudo apt-get install python{,3}-pyaudio

try:
    from itertools import izip
except ImportError: # Python 3
    izip = zip
    xrange = range

def sine_tone(frequency, duration, volume=1, sample_rate=22050):
    n_samples = int(sample_rate * duration)
    restframes = n_samples % sample_rate

    p = PyAudio()
    stream = p.open(format=p.get_format_from_width(1), # 8bit
                    channels=1, # mono
                    rate=sample_rate,
                    output=True)
    s = lambda t: volume * math.sin(2 * math.pi * frequency * t / sample_rate)
    samples = (int(s(t) * 0x7f + 0x80) for t in xrange(n_samples))
    for buf in izip(*[samples]*sample_rate): # write several samples at a time
        stream.write(bytes(bytearray(buf)))

    # fill remainder of frameset with silence
    stream.write(b'\x80' * restframes)

    stream.stop_stream()
    stream.close()
    p.terminate()
"
Python count everytime a string is found in another string,"ultrias = ""am 17""
response = ""Hi i am 17, did you know I am 17""
print(response.count(ultrias))
"
Check for multiple attribute matches in an array of objects,"filtered = filter(lambda ob: all(getattr(ob, attr) == 'some test string' for attr in list_of_attributes)
for match in filtered:
    # do something with match
"
"get ""1"" for a one-dimensional numpy.array using a shape-like function",">>> a
array([1, 2, 3, 4])
>>> a.shape += (1,)
>>> a
array([[1],
       [2],
       [3],
       [4]])
>>> a.shape
(4, 1)
>>> a.ndim
2
"
Python How to set axes for a matplotlib plot,"from matplotlib import pyplot as plt
from matplotlib import colors as mcolors
import numpy as np


N = 21
zvals = 100*np.random.randn(N, N)
fig = plt.figure(2)
ax = fig.add_subplot(111)
cmap2 = mcolors.LinearSegmentedColormap.from_list(
    'my_colormap', ['blue','green','brown'], 256)

img2 = plt.imshow(zvals,interpolation='nearest',
                  cmap=cmap2, origin='lower')
plt.colorbar(img2, cmap=cmap2)
step = 5
locs = range(0, N, step)
ax.set(
    xticks=locs,
    xticklabels=['$2^{{{}}}$'.format(i-5) for i in locs],
    yticks=locs,
    yticklabels=['$2^{{{}}}$'.format(i-15) for i in locs])
plt.show()
"
SQLAlchemy Many-To-Many performance,"users = session.query(User).\
                  options(subqueryload(User.attempts), joinedload(UserAttempt.challenge)).all()
"
Call Python class methods from the command line,"import sys
import csv

def read_csv(filepath):
    list = []
    with open(self.filepath, ""r"") as table:
        reader = csv.reader(table, delimiter=""\t"")
        for line in reader:
            list.append[line]

if __name__ == '__main__':
    read_csv(sys.argv[1])
"
Understanding Python Queues and Setting threads to run as a Daemon thread,"#!/bin/python
import Queue
import threading
import time

def basic_worker(queue, thread_name):
    print ""Starting %s"" % (threading.currentThread().getName()) + ""\n""
    while True:
       item = queue.get()
       ##do_work on item which might take 10-15 minutes to complete
       time.sleep(5) # to simulate work
       queue.task_done()

def basic(queue):
# http://docs.python.org/library/queue.html

    for i in range(10):
       print 'enqueuing', i
       t = threading.Thread(target=basic_worker, args=(queue, i))
       t.daemon = True
       t.start()
    queue.join()       # block until all tasks are done
    print 'got here' + '\n'

queue = Queue.Queue()

for item in range(4):
     queue.put(item)

basic(queue)


print ""End of program""
"
Using lambda with user input list,">>> mult_list = list(map(int, input(""Enter numbers seperated by a comma: "").split(',')))
Enter numbers seperated by a comma: 1, 2, 3
>>> num = 1
>>> for i in mult_list:
...     num *= i
...
>>> print(num)
6
"
Unable to loop form fields in django,"def add_cat(request):
form = CatForm(request.POST or None)
catagories = <model>.objects.all()
context = {""form"":form, 'categories':categories}

if form.is_valid():
    instance = form.save(commit=False)
    category = form.cleaned_data.get(""category"")
    instance.category = category
    instance.save()
    messages.add_message(request, messages.INFO, 'Category Added')
return render(request,""add-cat.html"",context)
"
Entry widget Tkinter. I am getting confused,"from tkinter import *

def print_input(entry):
    print entry.get()

root = Tk()
root.geometry(""250x250"")
e = Entry(root)
e.pack()

b = Button(root, text=""Print my input"", command=lambda e=e: print_input(e))
b.pack()

root.mainloop()
"
Mapping func over dictionary,"dict2 = dict(map(func, dict1.iteritems()))
"
Using class to define multiple variables in python,"class Variable(object):
   def __init__ (self, state_dynamic, state_static, control_static, control_dynamic, scheduling):
      self.state_dynamic = state_dynamic
      self.state_static = state_static
      self.control_static = control_static
      self.control_dynamic = control_dynamic
      self.scheduling = control_dynamic
"
Limiting print output,"r = reprlib.Repr()
r.maxlist = 4       # max elements displayed for lists
r.maxstring = 10    # max characters displayed for strings

obj = [[1, 2, 3], list(range(10000)), 'looooooong string', 'a', 'b', 'c']

print(r.repr(obj))
"
Ordering a list according to hierarchy,"sorted(a, key=lambda p: map(str.strip, p.split(',')[::-1]))
"
Retrieving an item from a 2D list,"my_dict = {row[0]: row for row in my_list}
"
How to mutate a list with a function in python?,"def func(s):
    s[:] = [1,2,3]

x = [1,2]
print func(x)
print x # -> [1,2,3]
"
How to create a list only with a unique element using this list?,">>> from itertools import chain
>>> list(OrderedDict.fromkeys(chain.from_iterable(a)))
"
Decoding HTML character entities in JSON,"content = response.xpath('//meta[@id=""_bootstrap-neighborhood_card""]').xpath('@content').extract_first()
data = json.loads(content)
from pprint import pprint
pprint(data)
"
Subtlety accessing and modifying a multidimensionnal list,"for i, line in enumerate(c):
    id_before = id(line)
    line = ownShuffle(line)
    print id_before, ""=>"", id(line)
# 4973032728 => 4973032656
# 4973034312 => 4973032656
# 4973034240 => 4973032656

for i, line in enumerate(c):
    id_before = id(line)
    line[:] = ownShuffle(line)
    print id_before, ""=>"", id(line)
# 4973032728 => 4973032728
# 4973034312 => 4973034312
# 4973034240 => 4973034240
"
Stop code after time period,"import multiprocessing
import time

# Your foo function
def foo(n):
    for i in range(10000 * n):
        print ""Tick""
        time.sleep(1)

if __name__ == '__main__':
    # Start foo as a process
    p = multiprocessing.Process(target=foo, name=""Foo"", args=(10,))
    p.start()

    # Wait 10 seconds for foo
    time.sleep(10)

    # Terminate foo
    p.terminate()

    # Cleanup
    p.join()
"
How to feed lists from python into javascript?,"import webapp2 # Le framework
import json    # This is used to return the dictionary in a native (to JS) way
import jinja2  # The glue

# This example uses webapp2, but could be easily adapted to other frameworks.
jinja_environment = jinja2.Environment(
    # sets the folder ""templates"" as root folder for html (can be tweaked to match you layout):
    loader=jinja2.FileSystemLoader('templates')) 

class Marker():
""""""
creates marker objects that can then be rendered on the map.
""""""

def __init__(self, latlng, title):
    # below we split the comma-separated latlng into two values and store in an array.
    coords = str(latlng).split(',')
    self.lat = coords[0]
    self.lng = coords[1]
    self.title = title

class MainHandler(webapp2.RequestHandler):
    def get(self):
        # assembling the coordinates and descriptions into an array of Marker objects
        markers = []
        for marker in list_of_markers:
            markers.append(Marker(latlng=""coordinates go here in format 'latitude, longitude'"",
                                  title=""Marker title goes here"")

        for marker in markers:
           t_dict = {}
           t_dict['m_title'] = marker.title
           t_dict['m_lat'] = marker.lat
           t_dict['m_lng'] = marker.lng
           temp.append(t_dict)
        json_markers = json.dumps(temp)

        template_values = {'markers' :json_markers}

        template = jinja_environment.get_template('index.html')
            self.response.out.write(template.render(template_values))

# Initializing the webapp:
application = webapp2.WSGIApplication([('/', MainHandler)], debug=False)
"
How to inherit a class attribute that is a dict and make it unique?,"class FieldsMeta(type):

    def __new__(mcs, name, bases, dict):
        """"""This controls the creation of each new class.""""""
        dict.update(fields={'name': ''})
        return type.__new__(mcs, name, bases, dict)


class Parent(object):
    __metaclass__ = FieldsMeta


class Child(Parent):
    pass
"
"read in one row of csv file (based on input if i can) with DictReader, then format and write to new file","import csv

with open(r'C:\path_to_script\filename_Brief.csv') as infh, \
     open('new_file.txt', 'wt') as outfh:
    reader = csv.DictReader(infh)
    for row in reader:
        if row['ALIAS'] == 'Y4K':
             outfh.write('Full_Name = {Full_Name}\n'
                         'PHONE_NO = {PHONE_NO}\n'
                         'ALIAS = {ALIAS}\n'.format(**row))
"
Filter Django database for field containing any value in an array,"import operator
# ...
condition = reduce(operator.and_, [Q(full_name__icontains=s) for s in strings])
queryset = Profile.objects.filter(condition)
"
Extracting data from a URL result with special formating,"with urllib.request.urlopen(url) as data:
    # do processing here
"
Can two infinite loops be ran at once?,"import threading
import time

def infiniteloop1():
    while True:
        print('Loop 1')
        time.sleep(1)

def infiniteloop2():
    while True:
        print('Loop 2')
        time.sleep(1)

thread1 = threading.Thread(target=infiniteloop1)
thread1.start()

thread2 = threading.Thread(target=infiniteloop2)
thread2.start()
"
Python Passing List or Numpy Array,"arr = np.asarray(arr).ravel()
"
Randomly sample rows (first dimension) of an array with unknown dimension,"a[np.random.randint(0,a.shape[0],10),...]
"
Pythonic way to print a multidimensional complex numpy array to a string,"s += str(a[i,j,k].imag) + ' '
"
How to pad leading zero (in a function) dynamically?,"def fx(z, y=999):
    width = len('%0d' % y)
    return [""0%*d"" % (width, x) for x in range(y) if str(z) in str(x)]
"
Python fill matrix with specific values,"[[1 if i*10+j in values else 0 for j in range(10)] for i in range(10)]
"
efficient method for merging 2 sorted files with duplicate coordinates in python,"import pandas as pd

df1 = pd.read_csv(""coord1.csv"")
df2 = pd.read_csv(""coord2.csv"")
combined = df1.merge(df2, how='outer').fillna(0)
combined.sort(list(combined.columns[:2]), inplace=True)
combined.to_csv(""coord_merged.csv"",index=False)
"
Why does gethostbyaddr(gethostname()) return my IPv6 IP?,"from netifaces import interfaces, ifaddresses, AF_INET

def ip4_addresses():
    ip_list = []
    for interface in interfaces():
        for link in ifaddresses(interface)[AF_INET]:
            ip_list.append(link['addr'])
    return ip_list
"
Print a list in reverse order with range()?,list(reversed(list(range(10))))
How to randomly extract FASTA sequences using Python?," print([(seq.name,str(seq.seq)) for seq in  sample(list(seqs),2)])
 [('chr1:1310706-1310726', 'GACGGTTTCCGGTTAGTGGAA'), ('chr1:983001-983021', 'GTCCGCTTGCGGGACCTGGGG')]
"
How to show the whole image when using OpenCV warpPerspective,"import cv2
import numpy as np
import cv           #the old cv interface

img1_square_corners = np.float32([[253,211], [563,211], [563,519],[253,519]])
img2_quad_corners = np.float32([[234,197], [520,169], [715,483], [81,472]])

h, mask = cv2.findHomography(img1_square_corners, img2_quad_corners)
im = cv2.imread(""image1.png"")
"
reading text into a dataframe,"import pandas as pd
import io

temp=u""""""<TABLE>
<CAPTION>
                                                  FORM 13F INFORMATION TABLE

          COLUMN 1               COLUMN 2     COLUMN 3   COLUMN 4        COLUMN 5        COLUMN 6  COLUMN 7        COLUMN 8
---------------------------- ---------------- --------- ----------- ------------------- ---------- -------- ----------------------
                                                           VALUE     SHRS OR   SH/ PUT/ INVESTMENT  OTHER      VOTING AUTHORITY
       NAME OF ISSUER         TITLE OF CLASS    CUSIP    (x$1000)    PRN AMT   PRN CALL DISCRETION MANAGERS    SOLE    SHARED NONE
---------------------------- ---------------- --------- ----------- ---------- --- ---- ---------- -------- ---------- ------ ----
<S>                          <C>              <C>       <C>         <C>        <C> <C>  <C>        <C>      <C>        <C>    <C>
7 DAYS GROUP HLDGS LTD       ADR              81783J101   19,317       999,322 SH       SOLE                   999,322      0    0
ACCENTURE PLC IRELAND        SHS CLASS A      G1151C101  200,952     3,325,917 SH       SOLE                 3,325,917      0    0
ACCRETIVE HEALTH INC         COM              00438V103   85,394     2,966,088 SH       SOLE                 2,966,088      0    0""""""
#after testing replace io.StringIO(temp) to filename
df = pd.read_fwf(io.StringIO(temp), skiprows=[0,1,2,3,5,8,9])
"
Returning specific content,"data = soup.find(""ul"", {""class"": ""posts""})

import re

r = re.compile(""\d+\.\d+\.\d+\.\d+"")

print(r.findall(data.text))
['116.10.191.162', '116.10.191.204', '61.174.51.232', '61.174.51.224', '116.10.191.225', '200.162.47.130', '116.10.191.175', '61.174.51.223', '61.174.51.234', '61.174.51.209', '116.10.191.165', '106.240.247.220']
"
"Split a string by three delimiters, and adding them to different lists","with open(""questions.txt"", ""r"") as questions:
    keys = questions.read().split('|')
    answers = keys[3]
    keys[3] = keys[3].split('/', 1)[0]

    answers = answers.split('/')[1:]

    answer = [x for x in answers if '!' in x][0].strip('!')

    answers = [x.strip('!') for x in answers]

    print(keys)
    print(answers)
    print(answer)
"
How do I assign the same value for each key?,"from collections import defaultdict
mydict = defaultdict(lambda: ""It's an elephant"")
print(mydict[""a""])
"
Subracting all elements of array A from all elements of B?,"a - b[:,None]
"
Concatenating two variable names to automate finding something in list python,">>> import pandas as pd
>>> df_dmg = pd.DataFrame.from_dict(dict_dmg)
>>> df
          Electric  Fighting  Grass  Ground  Normal  Rock  Water
Bug            NaN       0.5    0.5     0.5     NaN   2.0    NaN
Dark           NaN       2.0    NaN     NaN     NaN   NaN    NaN
Dragon         0.5       NaN    0.5     NaN     0.5   NaN    0.5
Electric       0.5       NaN    NaN     2.0     NaN   NaN    NaN
Fairy          NaN       0.5    NaN     NaN     NaN   NaN    NaN
Fighting       NaN       NaN    NaN     NaN     NaN   0.5    NaN
Fire           NaN       NaN    0.5     2.0     NaN   2.0    2.0
Fly            2.0       0.5    0.5     NaN     NaN   2.0    NaN
Grass          0.5       NaN    0.5     0.5     NaN   NaN    0.5
Ground         NaN       NaN    2.0     NaN     NaN   0.5    2.0
Ice            NaN       2.0    NaN     NaN     NaN   2.0    NaN
Normal         NaN       2.0    NaN     NaN     NaN   NaN    NaN
Poison         NaN       0.5    0.5     2.0     NaN   NaN    NaN
Psychic        NaN       0.5    NaN     NaN     NaN   NaN    NaN
Rock           NaN       2.0    2.0     2.0     0.5   NaN    2.0
Steel          NaN       2.0    0.5     2.0     NaN   0.5    NaN
Water          2.0       NaN    2.0     NaN     NaN   NaN    0.5

def dmg_modifier3(attack_type, receiver_pokemon_type, df_dmg):
    dmg = df_dmg[attack_type][receiver_pokemon_type]

    print ""{0} deals {1}x damage"".format(attack_type, dmg)
"
Filtering a list of tuples filled with None in python,"no_none = [t for t in my_list if None not in t]
some_none = [t for t in my_list if t != (None, None)]
"
Python Variable Division,"time/time #nothing

time/time + 1 #nothing

var = time/time  #var becomes result

print time/time #prints the result
"
evaluating numpy polynomials at other polynomials,"In [1]: from numpy.polynomial import Polynomial as P

In [2]: p1 = P([1,1])

In [3]: p2 = P([1,1,1])

In [4]: p2(p1)
Out[4]: Polynomial([ 3.,  3.,  1.], [-1.,  1.], [-1.,  1.])

In [5]: p1(p2)
Out[5]: Polynomial([ 2.,  1.,  1.], [-1.,  1.], [-1.,  1.])
"
Python filter list to remove certain links from html source code,">>> for tag in soup.findAll():
...   if tag.name in TAGS_TO_EXTRACT:
...     tag.replaceWith(tag.text)
...
>>> soup
Link1 Link2 or Link3
A bad link*
some text* update*
other text right before link click here
"
"When reading in a txt matrix, how can i skip first column","content = [x[1:].strip() for x in f]
"
Deleting specific files from a directory,"import os

def deleteAll():
    blacklist = set(['names/of/files/to/be/deleted', 'number/of/files'])
    for fname in (f for f in os.listdir() if f not in blacklist):
        os.remove(fname)
"
How to give multiple values to a single key using a dictionary?,"import shelve

COLUMNS = ('FirstName', 'LastName', 'Age', 'Sex')

the_db = shelve.open('test.db', writeback=True)
for col_name in COLUMNS:
    if col_name not in the_db:
        the_db[col_name] = []

records = [
    ('John', 'Deer', 20, 'M'),
    ('Ada', 'Lovelace', 23, 'F'),
]

for record in records:
    for col_name, value in zip(COLUMNS, record):
        the_db[col_name].append(value)

the_db.close()

the_db = shelve.open('test.db')

for record in zip(*(the_db[col_name] for col_name in COLUMNS)):
    print(record)

the_db.close()
"
Python- My for loop only converts half the list from str to int,"l = ['5', '6', '3', '5', '6', '2', '6', '8', '5', '4', '2', '8']

output = [int(i) for i in l]
print(output)
[5, 6, 3, 5, 6, 2, 6, 8, 5, 4, 2, 8]
"
Python create nested dictionary from list with nested tuples,"d = {(k1,k2):v  for k1,k2,v in List}
"
Python treating dictionary as string,"import json
twitdict = json.loads(twit)
print(twitdict['id'])
"
matplotlib: Plot numpy arrays with None as values,"import matplotlib.pyplot as pyplot
import numpy

x = range(5)
y = numpy.array([(1.,0.001), (1.1, 0.002), (numpy.nan, numpy.nan), 
                 (1.2, 0.003), (0.99, 0.004)])

Fig, ax = pyplot.subplots()


ax.plot(range(len(y)), y[:,0]+y[:,1], 'k--')
import matplotlib.pyplot as pyplot
import numpy

x = range(5)
k = numpy.array([(1.,0.001), (1.1, 0.002), (None, None), 
                 (1.2, 0.003), (0.99, 0.004)])

Fig, ax = pyplot.subplots()

# This plots a gap---as desired
ax.plot(x, k[:,0], 'k-')

# I'd like to plot
#     k[:,0] + k[:,1]
# but I can't add None

arr_none = np.array([None])
mask = (k[:,0] == arr_none) | (k[:,1] == arr_none)

ax.plot(numpy.arange(len(y))[mask], k[mask,0]+k[mask,1], 'k--')
"
Control a print format when printing a list in Python,print([('%5.3f' % val) for val in l])
How to pass a list and other values as command line arguments?,"import sys

# make sure the --args flag was passed
if '--args' not in sys.argv:
    print >> sys.stderr, 'Please pass the ""--args"" flag followed by a list of'\
            ' arguments'
    sys.exit(1) #terminate execution if it wasn't

four = sys.argv[sys.argv.index('--args')+1:] # everything passed after --args
print four
"
Sorting string in order of high frequency terms from Inverted Index Elasticsearch,"import re
import math
import timeit

from collections import Counter

WORD = re.compile(r'\w+')


def get_cosine(vec1, vec2):
    intersection = set(vec1.keys()) & set(vec2.keys())
    numerator = sum([vec1[x] * vec2[x] for x in intersection])

    sum1 = sum([vec1[x] ** 2 for x in vec1.keys()])
    sum2 = sum([vec2[x] ** 2 for x in vec2.keys()])
    denominator = math.sqrt(sum1) * math.sqrt(sum2)

    if not denominator:
        return 0.0
    else:
        return float(numerator) / denominator


def text_to_vector(text):
    words = WORD.findall(text)
    return Counter(words)


class VectorResult(object):
    def __init__(self, cosine, text_1, text_2):
        self.cosine = cosine
        self.text_1 = text_1
        self.text_2 = text_2

    def __eq__(self, other):
        if self.cosine == other.cosine:
            return True
        return False

    def __le__(self, other):
        if self.cosine <= other.cosine:
            return True
        return False

    def __ge__(self, other):
        if self.cosine >= other.cosine:
            return True
        return False

    def __lt__(self, other):
        if self.cosine < other.cosine:
            return True
        return False

    def __gt__(self, other):
        if self.cosine > other.cosine:
            return True
        return False

def main():
    start = timeit.default_timer()
    texts = []
    with open('data.txt', 'r') as f:
        texts = f.readlines()

    cosmap = []
    i = 0
    out = []
    while i < len(texts):
        max_cosine = 0.0
        current = None
        for p in range(i + 1, len(texts)):
            if texts[i] in out or texts[p] in out:
                continue
            vector1 = text_to_vector(texts[i])
            vector2 = text_to_vector(texts[p])
            cosine = get_cosine(vector1, vector2)
            if cosine > max_cosine:
                current = VectorResult(cosine, texts[i], texts[p])
                max_cosine = cosine
        if current:
            out.extend([current.text_1, current.text_2])
            cosmap.append(current)
        i += 1

    cosmap = sorted(cosmap)

    for item in reversed(cosmap):
        print(item.cosine, item.text_1, item.text_2)

    end = timeit.default_timer()

    print(""Similarity Sorting of {} strings lasted {} s."".format(len(texts), end - start))

if __name__ == '__main__':
    main()
"
How to check if two numbers in a list are the same,"In [39]: seen = set()

In [40]: print list(set(x for x in myList if x in seen or seen.add(x)))
[1]
"
Idiomatic way to struct.unpack from BytesIO?,"def unpack(stream, fmt):
    size = struct.calcsize(fmt)
    buf = stream.read(size)
    return struct.unpack(fmt, buf)
"
How to slice and extend a 2D numpy array?,"q=arange(1,1+n*m).reshape(n,m) #example input
r=q.T.reshape(-1,k,n)
s=r.swapaxes(1,2)
t=s.reshape(-1,k)
"
How to change variables fed into a for loop in list form,"scores = [99.1, 78.3, etc.]
for i,score in enumerate(scores):
    scores[i] = int(score)
"
python - pass a argument expecting function object,"class Test(object):
    def __init__(self, f):
        self.f = f

def myfunc(s):
    return 'myfunc ' + s

s = 'hello'
a = Test(lambda: myfunc(s))
s = 'bye'
print(a.f())

s = 'hello'
a = Test(lambda s=s: myfunc(s))
s = 'bye'
print(a.f())    
"
0mq one-to-many connection,"import zmq

def worker(addr):
    context = zmq.Context()
    socket = context.socket(zmq.REP)
    socket.bind(addr)
    while True:
        # get message from boss
        msg = socket.recv()
        # ...do smth
        # send back results
        socket.send(msg)

if __name__ == '__main__':
    # spawn 5 workers
    from multiprocessing import Process
    for i in range(5):
        Process(target=worker, args=('tcp://127.0.0.1:500%d' % i,)).start()
"
Python specific format output with itertools.product,">>> from itertools import product
>>> list(product(range(3), range(4)))
[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]
>>>
>>> def print_array(l):
...     for p in product(*map(range, l)):
...         print p
... 
>>> print_array([3, 4])
(0, 0)
(0, 1)
(0, 2)
[...]
"
Where does __import__ get alias names from?,"bar = __import__(""foo"")
"
number of values in a list greater than a certain number,"j = np.array(j)
sum((j > i))"
Destroying and Recreating a Panel wx.Python,"panelOne = wx.Panel(self)
panelTwo = wx.Panel(self)
panelThree = MyPanels(parent, id)
"
Assigning a string from a .txt file into a variable,"new_list = []
for line in lines:
    new_list.append(line)
"
Python : Flask : Catch All Url for login_required,"@app.before_request
def check_login():
    if request.endpoint == 'static' and not current_user.is_authenticated():
        abort(401)
    return None
"
How can I tell if NumPy creates a view or a copy?,"print (b.flags['OWNDATA'])  #False -- apparently this is a view
e = np.ravel(b[:, 2])
print (e.flags['OWNDATA'])  #True -- Apparently this is a new numpy object.
"
"What does python3 do with the methods passed to the ""key"" argument of sorted()?",">>> MyClass().my_method
<bound method MyClass.my_method of <__main__.myClass object at 0x6e2498>>
"
Locate multiple keywords in lines using Python,"import re

re_id = re.compile(""id (\d+)"")
re_ip = re.compile(""192\.168\.45\.28\.(\d+)"")
with open(""test.txt"", ""r"") as f:
    for line in f:
        match = re.findall(re_id,line)
        if match:
            print(""************ %s"" % match.group(1))
        match = re.findall(re_ip,line)
        if match:
            print(match.group(1))
"
"Static attribute that is True only for a concrete class, and False for its children in Python","def getSubs(cls):
    for sub in cls.__subclasses__():
        if not sub.__dict__.get('ignore_me', False):
            yield sub
        for desc in getSubs(sub):
            yield desc
"
Python. Selenium. How to wait for new window opens?,"from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait

from contextlib import contextmanager

@contextmanager
def wait_for_new_window(driver, timeout=10):
    handles_before = driver.window_handles
    yield
    WebDriverWait(driver, timeout).until(
        lambda driver: len(handles_before) != len(driver.window_handles))

driver = webdriver.Chrome()

driver.get(""http://www.google.com"")

with wait_for_new_window(driver):
    driver.execute_script(""""""
    window.open(""http://www.google.com"", ""_blank"");
    """""")

with wait_for_new_window(driver, 2):
    pass # This will obviously hit the timeout.

driver.quit()
"
Elegant way to check empty result of numpy.nonzero,"not (matrix_a < matrix_b).any()
"
Matplot: How to plot true/false or active/deactive data?,"import matplotlib.pyplot as plt
import numpy as np

# create a bit more realistic-looking data
# - looks complicated, but just has a constant switch-off and switch-on probabilities
#   per column
# - the result is a 20 x 500 array of booleans
p_switchon = 0.02
p_switchoff = 0.05
data = np.empty((20,500), dtype='bool')
data[:,0] = np.random.random(20) < .2
for c in range(1, 500):
    r = np.random.random(20)
    data[data[:,c-1],c] = (r > p_switchoff)[data[:,c-1]]
    data[-data[:,c-1],c] = (r < p_switchon)[-data[:,c-1]]

# create some labels
labels = [ ""label_{0:d}"".format(i) for i in range(20) ]

# this is the real plotting part
fig = plt.figure()
ax = fig.add_subplot(111)
ax.imshow(data, aspect='auto', cmap=plt.cm.gray)
ax.set_yticks(np.arange(len(labels)))
ax.set_yticklabels(labels)
"
How do I loop across a correlation matrix to only give me pairs of correlations above a certain threshold? And/or make it more efficient,"# Get some toy data and extract some information from it
import pandas.io.data as pd
X = pd.DataReader('aapl','yahoo')
rows, cols = X.shape
flds = list(X.columns)

# Indexing with numbers on a numpy matrix will probably be faster
corr = X.corr().values

for i in range(cols):
    for j in range(i+1, cols):
        if corr[i,j] > 0.7:
            print flds[i], ' ', flds[j], ' ', corr[i,j]
"
Python regex to parse financial data,"import re

financialData = """"""
David Meredith, Financial Director sold post-exercise 15,000 shares in the company on YYYY-mm-dd at a price of 1044.00p. The Director now holds 6,290 shares representing 0.01% of the...

Mark Brookes, Non Executive Director bought 811 shares in the company on  YYYY-mm-dd at a price of 76.75p. The Director now holds 189,952 shares representing 0.38% of the shares in...

Albert Ellis, CEO bought 262 shares in the company on YYYY-mm-dd at a price of 52.00p. The Director now holds 465,085 shares. NOTE: Purchased through Co's SIP Story provided by...
""""""

print(re.findall('(.*?),\s(.*)\s(sold(?: post-exercise)?|bought|exercised)\s*([\d,]*).*price of\s*(\d*.\d+?p)',financialData))
"
Sort dictionary elements in list,">>> lst = [...]
>>> sorted(lst, key=lambda x: x['name'])
[{u'status': u'Active', u'type': u'Created Section', u'orgID': u'109175', u'name': u'A', 'class': 'addbold'},
 {u'status': u'Active', u'type': u'Created Section', u'orgID': u'109175', u'name': u'D', 'class': 'addbold'},
 {u'status': u'Active', u'type': u'Created Section', u'orgID': u'109175', u'name': u'G', 'class': 'addbold'},
 {u'status': u'Active', u'type': u'Created Section', u'orgID': u'109175', u'name': u'X', 'class': 'addbold'}]
"
A faster numpy.polynomial?,"def faster_polyval(p, x):
    y = np.zeros(x.shape, dtype=float)
    for i, v in enumerate(p):
        y *= x
        y += v
    return y
"
Sum corresponding elements of multiple python dictionaries,"d = {k: sum(d[k] for d in dicts) for k in dicts[0]}
"
How to add to a dictionary through a text file,"with open('path/to/input') as infile:
    answer = {}
    for line in infile:
        k,v = line.split()
        answer[k] = v
"
"Transforming outliers in Pandas DataFrame using .apply, .applymap, .groupby",">>> df[ df.apply( lambda x: abs(x) > x.mean() ) ] = 2
"
Python dictionary from two lists,"d = {}
for dte, val in zip(dates,values):
    d[dte] = d.get(dte, 0) + val
"
How to remove empty entries from a list in a dictionary using python,"data = {k: [i for i in v if i] for k, v in data.iteritems()}
"
Pyspark RDD collect first 163 Rows,"sc.parallelize(rdd.take(163))
"
How to convert rows into list using pandas python?,"In [27]: df['values'] = df[['value1', 'value2', 'value3']].values.tolist()

In [28]: df
Out[28]:
  product  count  value1  value2  value3     values
0       A     10       5       3       2  [5, 3, 2]
1       B      8       2       2       4  [2, 2, 4]

In [29]: df.drop(['value1', 'value2', 'value3'], axis=1)
Out[29]:
  product  count     values
0       A     10  [5, 3, 2]
1       B      8  [2, 2, 4]
"
"Iterating dictionary in the order I added items, python","from collections import OrderedDict
d = OrderedDict()
d[""A""] = ""10""
d[""B""] = ""100""
d[""C""] = ""20""
d[""D""] = ""12.5""
for k in d:
    print k
"
How to I extract floats from a file in Python?,"for line in open('my_file.txt'):
    row = line.split()
    if row[0] == 'SOLU' and row[1] == '6DIM' and row[4] == 'EULER' and row[8] == 'FRAC':
        euler = map(float, row[5:8])
        frac = map(float, row[9:12])
        do_something_with(euler, frac)
"
"Odd behavior with Python regular expressions - findall only finds the ""()?"" portion",">>> numAndSize = re.compile(r'(\d+)[xX](\d+(?:\.\d+)?)')
>>> numAndSize.findall(""Product:A,2x3.5gallonbottles"")
[('2', '3.5')]
"
Can Python's shelve.open be called in a nested fashion?,"import shelve
import functools

def _check_cache(cache_, key, func, args, kwargs):
    if key in cache_:
        print(""Using cached results"")
        return cache_[key]
    else:
        print(""No cached results, calling function"")
        result = func(*args, **kwargs)
        cache_[key] = result
        return result

def cache(filename):
    def decorating_function(user_function):
        def wrapper(*args, **kwds):
            args_key = str(hash(functools._make_key(args, kwds, typed=False)))
            func_key = '.'.join([user_function.__module__, user_function.__name__])
            key = func_key + args_key
            handle_name = ""{}_handle"".format(filename)
            if (hasattr(cache, handle_name) and
                not hasattr(getattr(cache, handle_name).dict, ""closed"")
               ):
                print(""Using open handle"")
                return _check_cache(getattr(cache, handle_name), key, 
                                    user_function, args, kwds)
            else:
                print(""Opening handle"")
                with shelve.open(filename, writeback=True) as c:
                    setattr(cache, handle_name, c)  # Save a reference to the open handle
                    return _check_cache(c, key, user_function, args, kwds)

        return functools.update_wrapper(wrapper, user_function)
    return decorating_function


@cache(filename='cache')
def expensive_calculation():
    print('inside function')
    return


@cache(filename='cache')
def other_expensive_calculation():
    print('outside function')
    return expensive_calculation()

other_expensive_calculation()
print(""Again"")
other_expensive_calculation()
"
Pandas plot doesn't show,"import numpy as np
import pandas as pd
ts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000))
ts.plot()
pd.tseries.plotting.pylab.show()
"
How to understand the pivot matrix of scipy.linalg.lu_factor?,"P = np.eye(3)
for i, p in enumerate(piv):
    Q = np.eye(3,3)
    q = Q[i,:].copy()
    Q[i,:] = Q[p,:]
    Q[p,:] = q
    P = np.dot(P, Q)
"
Automating SSH using Python,"with open('host.txt', 'r') as inf:
    lines = inf.readlines()
    hostlist = [ln.split() for ln in lines]
"
How to send a list of commands using 'os.system('command')' to CMD in python,"import os
import subprocess as subp
p=subp.Popen('cmd.exe', shell=True, stdin=subp.PIPE)
p.stdin.write(""""""dir
cd ""\\program files""
dir
"""""")
p.stdin.write('exit' + os.linesep)
p.wait()
del p
print 'done'
"
generate a list of permutations that preserve a given partitioning (context: Graph Isomorphism),"#list_perms.py
import itertools

def combinePermutations(perms):
    a = min(min(p) for p in perms)
    b = max(max(p) for p in perms)
    d = {i:i for i in range(a,b+1)}
    for p in perms:
        pairs = zip(sorted(p),p)
        for i,j in pairs:
            d[i] = j
    return tuple(d[i] for i in range(a,b+1))

def permute(cell):
    return [p for p in itertools.permutations(cell)]

def listGoodPerms(cells):
    products = itertools.product(*(permute(cell) for cell in cells))
    return [combinePermutations(perms) for perms in products]

#to test:
myCells = [(1,4), (2,3,5), (6,7)]
for p in listGoodPerms(myCells): print(p)
"
Find holes in a union of rectangles?,"#-- Get the region not covered by individual squares.
uncovered_region = Polygon(bigsquare).difference(union)

# In some cases, the result will be a single polygon...
if not isinstance(uncovered_region, MultiPolygon):
    uncovered_region = [uncovered_region]

for poly in polygonize(uncovered_region):
    patch = PolygonPatch(poly, fc='purple', alpha=0.5, zorder=2)
    ax.add_patch(patch)
"
How to do this list/dict comprehension in python,"[d[element] for element in l]
"
Python: How to sum up the word count for each person in a dialogue?,"import pprint
import re
import string
from collections import Counter

p = re.compile(r'(\w+?):')


def get_text_line_items(text):
    for line in text.split('\n'):
        yield line


def bundle_dialogue_items(lines):
    cur_speaker = None
    paragraphs = Counter()
    for line in lines:
        if re.match(p, line):
            cur_speaker, dialogue = line.split(':')
            paragraphs[cur_speaker] += 1
        else:
            dialogue = line

        res = cur_speaker, dialogue, paragraphs[cur_speaker]
        yield res


def filter_dialogue_items(lines):
    for name, dialogue, paragraph in lines:
        if dialogue:
            res = name, dialogue, paragraph
            yield res


to_clean = string.whitespace + string.punctuation


def clean_word(word):
    res = ''.join(c for c in word if c not in to_clean)
    return res


def clean_dialogue_items(flines):
    for name, dialogue, paragraph in flines:
        s_dialogue = dialogue.strip().split()
        c_dialouge = [clean_word(w) for w in s_dialogue]
        res = name, c_dialouge, paragraph
        yield res


speaker_stats = 'stats'


def make_catalogue(names_with_dialogue):
    speakers = {}
    for name, dialogue, paragraph in names_with_dialogue:
        speaker = speakers.setdefault(name, {})
        stats = speaker.setdefault(speaker_stats, {})
        stats.setdefault(paragraph, []).extend(dialogue)
    return speakers


def clean_dict(speakers):
    for speaker in speakers:
        stats = speakers[speaker][speaker_stats]
        for paragraph in stats:
            stats[paragraph] = [''.join(c for c in word if c not in to_clean)
                                for word in stats[paragraph]]
    return speakers


word_count = 'word_count'


def sum_words_per_paragraph_items(speakers):
    for speaker in speakers:
        word_stats = speakers[speaker][speaker_stats]
        speakers[speaker][word_count] = Counter()
        for paragraph in word_stats:
            speakers[speaker][word_count][paragraph] += len(word_stats[paragraph])
    return speakers


total = 'total'


def total_word_count(speakers):
    for speaker in speakers:
        wc = speakers[speaker][word_count]
        speakers[speaker][total] = 0
        for c in wc:
            speakers[speaker][total] += wc[c]
    return speakers


def get_text():
    text = '''BOB: blah blah blah blah
blah hello goodbye etc.

JERRY:.............................................
...............

BOB:blah blah blah
blah blah blah
blah.
BOB: boopy doopy doop
P1: Bla bla bla.
P2: Bla bla bla bla.
P1: Bla bla.
P3: Bla.'''
    text = get_text_line_items(text)
    return text


def process_catalogue(c_text):
    speakers = make_catalogue(c_text)
    s_speakers = sum_words_per_paragraph_items(speakers)
    t_speakers = total_word_count(s_speakers)
    return t_speakers


def process_text(text):
    b_text = bundle_dialogue_items(text)
    f_text = filter_dialogue_items(b_text)
    c_text = clean_dialogue_items(f_text)
    return c_text


def main():

    text = get_text()
    c_text = process_text(text)
    t_speakers = process_catalogue(c_text)

    # take a look at your hard work!
    pprint.pprint(t_speakers)


if __name__ == '__main__':
    main()
"
Matplotlib: Tick labels position,"#!/usr/bin/env python3

import matplotlib
from matplotlib import pyplot as plt
from matplotlib.ticker import MaxNLocator

data = range(5)


fig = plt.figure()
ax = fig.add_subplot(111)

ax.plot(data,data)

ax.xaxis.set_major_locator(MaxNLocator(5, prune='lower'))
ax.yaxis.set_major_locator(MaxNLocator(4))

fig.savefig(""1.png"")
"
Spectrogram - Whitening out specific areas,"import numpy as np
import matplotlib.pyplot as plt

data = np.random.random_integers(-1, 1, (10, 10))
masked_data = np.ma.masked_where(data == 0, data)

plt.imshow(data, interpolation=""nearest"")
plt.show()
"
BeautifulSoup parse unstructured html,"from bs4 import BeautifulSoup

html = """"""<div class=""container"">
  <strong>Monday</strong> Some info here...<br /> and then some <br />
  <strong>Tuesday</strong> Some info here...<br />
  <strong>Wednesday</strong> Some info here...<br />
  ...
</div>""""""
soup = BeautifulSoup(html)
result = soup.find('strong', text='Tuesday').findNextSibling(text=True)
print(result.decode('utf-8'))
"
How to capture Shift + PrintScreen with pyHook?,"if (GetKeyState(HookConstants.VKeyToID('VK_LSHIFT')) or GetKeyState(HookConstants.VKeyToID('VK_RSHIFT'))) and event.KeyID == HookConstants.VKeyToID('VK_SNAPSHOT'):
"
How to compare multiple rows from same column in DataFrame,"import numpy as np
import pandas as pd
s = pd.DataFrame({""p"":[2, 3, 5, 6, 3, 4, 5, 6, 7, 4, 5, 6, 7, 8]})
s['inc3days'] = ((s['p'].shift(3) < s['p'].shift(2)) &  
                 (s['p'].shift(2) < s['p'].shift(1)) &  
                 (s['p'].shift(1) < s['p']) )
print s
"
Python ctype-bitfields: get bitfield location,"import ctypes

c_short = ctypes.c_cshort

class Flags_bits(ctypes.LittleEndianStructure):
    _fields_ = [(""bitField1"", c_short, 1),
                (""bitField2"", c_short, 4),
                (""bitField3"", c_short, 6),
                (""bitField4"", c_short, 1),
                (""bitField5"", c_short, 2),
                (""bitField6"", c_short, 2),
                (""bitField7"", c_short, 6),
                (""bitField8"", c_short, 4),
                (""bitField9"", c_short, 4),
                (""bitField10"", c_short, 1),
                (""bitField11"", c_short, 1)]


for field_descr in Flags_bits._fields_:        
    name = field_descr[0]
    field = getattr(Flags_bits, name)    
    bfield_bits = field.size >> 16    
    if bfield_bits:
        start = 8 * field.offset + field.size & 0xFFFF
        stop = start + bfield_bits
    else:
        start = 8 * field.offset
        stop = start + 8 * field.size
    print(""{:>10s}: bits {:>2d}:{:>2d}"".format(
          name, start, stop))
"
How to create query string with a map in it? (Java),"Map<String, String> map = new HashMap<String,String>();
map.put(""cat_id"", ""12345"");
"
How to split a string by multiple characters and keep the split chars in return value?,">>> import re
>>> re.split(r'(\w+)', '(a1 b2 c3)')
['(', 'a1', ' ', 'b2', ' ', 'c3', ')']
"
"How to put numbers in ascending, return them in a tuple, and add another argument.(Python)","import bisect
def rank3(x,y,z, ascending=True):
    if x <= y:
        ret = [x, y]
    else:
        ret = [y, x]
    pz = bisect.bisect(ret, z)
    ret.insert(pz, z)
    if not ascending:
        ret = ret[::-1] # or use ret.reverse()
    return tuple(ret)
"
Is there a simpler way to allocate value to a variable given a if condition - Python?,"values = [0.03,0.4,0.055,0.7]
x = 0.2

values = [max(v, x) for v in values]
"
I can't seem to understand loops,"inp = ''
desired = 'hello'
while inp != desired:
    inp = raw_input('Enter a greeting: ')
"
Matching regex groups (with or's) and special characters with Python's re module,"# -*- coding: utf-8 -*-
import re
titles = [
    u'Spaced (News)',
    u'Angry Birds [Game]',
    u'Cheats - for all games', # dash
    u'Cheats – for all games', # ndash
    u'Cheats — for all games', # mdash
    u'Cheats ― for all games'  # horizontal bar
]
regex = re.compile(ur'^(?P<name>.+)\s+(([-–—―]\s+(?P<addition_a>.+))|([\(\[](?P<addition_b>.+)[\)\]]))$')
for title in titles:
    match = regex.match(title.strip())
    if match:
        data = {}
        data['name'] = match.group('name')
        data['addition'] = match.group('addition_a') or match.group('addition_b')
        print data
"
Python 2D Gaussian Fit with NaN Values in Data,"import numpy as np
from scipy import optimize
np.set_printoptions(precision=4)


def gaussian(p, x, y):
    height, center_x, center_y, width_x, width_y = p
    return height*np.exp(-(((center_x-x)/width_x)**2+((center_y-y)/width_y)**2)/2)

def moments(data):
    total = np.nansum(data)
    X, Y = np.indices(data.shape)
    center_x = np.nansum(X*data)/total
    center_y = np.nansum(Y*data)/total
    row = data[int(center_x), :]
    col = data[:, int(center_y)]
    width_x = np.nansum(np.sqrt(abs((np.arange(col.size)-center_y)**2*col))
                        /np.nansum(col))
    width_y = np.nansum(np.sqrt(abs((np.arange(row.size)-center_x)**2*row))
                        /np.nansum(row))
    height = np.nanmax(data)
    return height, center_x, center_y, width_x, width_y

def errorfunction(p, x, y, data):
    return gaussian(p, x, y) - data

def fitgaussian(data):
    params = moments(data)
    X, Y = np.indices(data.shape)
    mask = ~np.isnan(data)
    x = X[mask]
    y = Y[mask]
    data = data[mask]
    p, success = optimize.leastsq(errorfunction, params, args=(x, y, data))
    return p

def make_data(shape):
    h, w = shape
    p = 50, h/2.0, w/2.0, h/3.0, w/5.0
    print('Actual parameters: {}'.format(np.array(p)))
    X, Y = np.indices(shape)
    data = gaussian(p, X, Y) + np.random.random(shape)
    mask = np.random.random(shape) < 0.3
    data[mask] = np.nan
    return data

shape = 100, 200
data = make_data(shape)
X, Y = np.indices(shape)
parameters = fitgaussian(data)
print('Fitted parameters: {}'.format(parameters))
fit = gaussian(parameters, X, Y)
"
Find possible bijection between characters and digits,"def is_bijection(seq1, seq2):
    distinct1 = set(seq1)
    distinct2 = set(seq2)
    distinctMappings = set(zip(seq1, seq2))
    return len(distinct1) == len(distinctMappings) and len(distinct2) == len(distinctMappings)
"
How can I have straight contourlines in matplotlib?,"import matplotlib.pyplot as plt
import numpy as np
import matplotlib.colors as mcolors

blues = plt.cm.Blues(np.linspace(0,1,200))
reds = plt.cm.Reds(np.linspace(0,1,200))
colors = np.vstack((blues[0:128,:], reds[-129:,:]))

i = np.linspace(0,1,256)
r = np.column_stack((i, colors[:-1,0], colors[1:,0]))
g = np.column_stack((i, colors[:-1,1], colors[1:,1]))
b = np.column_stack((i, colors[:-1,2], colors[1:,2]))
d = dict(red=r, green=g, blue=b)
mycmap = mcolors.LinearSegmentedColormap('mymap', d, N=256)

plt.imshow(KS_imshow, extent=[5, 8, 0, 22], origin='lower',
        interpolation='nearest', aspect='auto', cmap=mycmap,
        vmin=0., vmax=1.)

cbar = plt.colorbar()

plt.show()
"
Twisted wait for event in loop,"    @inlineCallbacks
    def on_available_data(self):
        data = yield self.get_data_nonblocking()
        if data is not None:
            self.processor.process_data(data)
"
pandas: select all rows matching multiple conditions,"In [1]: import pandas as pd

In [2]: df = pd.DataFrame({'col1': [1, 2, 1], 'col2': [6, 3, 6]})

In [3]: di = {'col1': 1, 'col2': 6}

In [4]: df['col3'] = pd.DataFrame([df[k]==v for k,v in di.iteritems()]).all()

In [5]: df
Out[5]: 
   col1  col2   col3
0     1     6   True
1     2     3  False
2     1     6   True
"
Is it possible to append Series to rows of DataFrame without making a list first?,"DF = DataFrame()
for sample,data in D_sample_data.items():
    SR_row = pd.Series(data.D_key_value)
    DF = DF.append(SR_row,ignore_index=True)
"
Need Help Writing Recursive function that find cheapest route through a list of numbers,"def player(l):
    return min(player(l[:-1]), player(l[:-2])) + l[-1] if l else 0
"
Python: Combining two strings and selecting unique elements out of it,"str_a = ""100,101,105,304""
str_b = ""400,500,101,2000""
l = str_a.split(',') + str_b.split(',')
print ','.join(sorted(set(l), key=int))
"
Remove odd elements from list in Python,"lst = [v for i, v in enumerate(lst) if i % 2 == 0]
"
Change all hex colors values to rgb,"import fileinput
import sys
import re

_hex_colour = re.compile(r'#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})\b')

def replace(match):
    value = match.group(1)
    if len(value) == 3:  # short group
        value = [str(int(c + c, 16)) for c in value]
    else:
        value = [str(int(c1 + c2, 16)) for c1, c2 in zip(value[::2], value[1::2])]
    return 'rgb({})'.format(', '.join(value))

for line in fileinput.input(inplace=True):
    line = _hex_colour.sub(replace, line)
    sys.stdout.write(line)
"
How to merge two csv files?,"res = {}

a=open('a.csv')
for line in a:
    (id, rest) = line.split(',', 1)
    res[id] = rest
a.close()

b=open('b.csv')
for line in b:
    (id, rest) = line.split(',', 1)
    res[id] = rest
b.close()

c=open('c.csv', 'w')
for id, rest in res.items():
    f.write(id+"",""+rest)
f.close()
"
Suggestions for parsing these data and rounding numbers,"In [32]: strs=""11,000.233""

In [33]: float("""".join(strs.split("","")))
Out[33]: 11000.233

In [34]: strs=""14,798.24""

In [35]: float("""".join(strs.split("","")))
Out[35]: 14798.24
"
BS4 How to get text without using .text?,"In [7]: a = soup.select_one(""div.address > a"")
In [8]: "" "".join(a.find_all(text=True)).strip()
Out[8]: u'59 Some Street City, Zone 1'
"
Shortening HTML files,"import htmlmin

with open('file.html', 'r') as f:
    content = f.read()
    minified = htmlmin.minify(content, remove_empty_space=True)
"
Python - match a word in a string with a list of strings,"import re
if matches:
    extracted = [(re.search(m, postal_addr).start() , m) for m in matches ]
    extracted = sorted( extracted )[-1][1]
"
Iterating through a DOM with BeautifulSoup/Python,"from bs4 import BeautifulSoup, Tag


data = """"""<h2>Main Section</h2>
<p>Bla bla bla<p>
<h3>Subsection</h3>
<p>Some more info</p>

<h3>Subsection 2</h3>
<p>Even more info!</p>


<h2>Main Section 2</h2>
<p>bla</p>
<h3>Subsection</h3>
<p>Some more info</p>

<h3>Subsection 2</h3>
<p>Even more info!</p>""""""


soup = BeautifulSoup(data)
for main_section in soup.find_all('h2'):
    for sibling in main_section.next_siblings:
        if not isinstance(sibling, Tag):
            continue
        if sibling.name == 'h2':
            break
        print sibling.text
    print ""-------""
"
How to Interpolate Over Data in Pytables Efficiently,"newlen = len(xnew)
chunks = 10
chunklen = newlen/ chunks
ynew = np.empty(newlen, dtype=float)
for i in range(chunks):
    xnew_chunk = xnew[i*chunklen:(i+1)*chunklen]
    query = ""{0} <= x & x <= {1}"".format(xnew_chunklen.min()*0.9, 
                                         xnew_chunklen.max()*1.1)

    with tb.open_file('myfile.h5', 'r') as f:
        data = f.root.mytable.read_where(query)

    f = scipy.interpolate.interp1d(data['x'], data['y'])
    ynew[i*chunklen:(i+1)*chunklen] = f(xnew_chunk)
"
Python: Pair alphabets after loop is completed,"from itertools import count, product, islice
from string import ascii_uppercase

def multiletters(seq):
    for n in count(1):
        for s in product(seq, repeat=n):
            yield ''.join(s)
"
Array of strings using a range,"myArray = []                     # initialize an empty array
for i in range(1,101):           # range produces a list [1,2,3, ... 99, 100]
    fileName = 'file' + str(i)   # converts i to string, then performs concatenation
    myArray.append(fileName)     # appends the concatenated string to the array
"
How to group grep results by dates,"awk -F, '{a[$1]++}END{for(i in a){print i, a[i]}}' file.txt
"
scrapy LinkExtractor doesn't extract corect url,"# coding: utf-8
from scrapy.spiders import CrawlSpider, Rule
from scrapy.linkextractors import LinkExtractor


def process_value(v):
    v1 = v.split()[-1]
    if v1.startswith('http'):
        v = v1
    return v


class MySpider(CrawlSpider):
    name = 'spider'
    start_urls = [
        'http://task.zhubajie.com/success/?kw=%E7%99%BE%E5%BA%A6%E7%9F%A5%E9%81%93'
    ]
    rules = [
        Rule(LinkExtractor(restrict_xpaths=('//div[@class=""pagination""]'),
                           process_value=process_value), follow=True)
    ]
"
how can I get href links from html code,"from BeautifulSoup import BeautifulSoup
import urllib2
import re

html_page = urllib2.urlopen(""http://www.yourwebsite.com"")
soup = BeautifulSoup(html_page)
for link in soup.findAll('a'):
    print link.get('href')
"
How to apply a metaclass to all my class without hardcoding it in the class declaration,"class FilterClass(type):
    @classmethod
    def __prepare__(name, bases, **kwds):
        return collections.OrderedDict()

    def __new__(metacls, name, bases, namespace, **kwds):
        result = type.__new__(metacls, name, bases, dict(namespace))
        result._filters = [
            value for value in namespace.values() if hasattr(value, '_filter')]
        return result
"
Interpolate only one value of a TimeSerie using Python / Pandas,"def interpolate(ts, target):
    ts1 = ts.sort_index()
    b = (ts1.index > target).argmax() # index of first entry after target
    s = ts1.iloc[b-1:b+1]
    # Insert empty value at target time.
    s = s.reindex(pd.to_datetime(list(s.index.values) + [pd.to_datetime(target)]))
    return s.interpolate('time').loc[target]
"
Understanding lambda functions in python,"def sort(a, num):
  def key(x):
    return int(x[num])
  return sorted(a, reverse=True, key=key)
"
Diffing Binary Files In Python,"from itertools import groupby

# this just sets up some byte strings to use, Python 2.x version is below
# instead of this you would use f1 = open('some_file', 'rb').read()
f1 = bytes(int(b, 16) for b in 'FF FF FF FF 00 00 00 00 FF FF 44 43 42 41 FF FF'.split())
f2 = bytes(int(b, 16) for b in '41 42 43 44 00 00 00 00 44 43 42 41 40 39 38 37'.split())

matches = []
for k, g in groupby(range(min(len(f1), len(f2))), key=lambda i: f1[i] == f2[i]):
    if k:
        pos = next(g)
        length = len(list(g)) + 1
        matches.append((pos, length))
"
Append list items by number of hyphens available,"from collections import defaultdict

mylist = [('country', 'NN'), ('shoot', 'NN-DT-PPL'), ... ]
res = defaultdict(list)

for item, tags in mylist:
    res[tags.count('-') + 1].append((item, tags))
"
Python scraper (Scraperwiki) only getting half of the table,"import scraperwiki
import lxml.html

    def scrapeCityList(pageUrl):
    html = scraperwiki.scrape(pageUrl)
    root = lxml.html.fromstring(html)
    links = root.cssselect('td.dt1 a')
    print len(links)
    batch = []
    for link in links[1:]: #skip the first link since it's only a link to tripadvisor and not a subpage
        record = {}
        url = 'http://www.tripadvisor.co.uk/' + link.attrib['href']
        record['url'] = url
        batch.append(record)
    scraperwiki.sqlite.save([""url""],data=batch)

scrapeCityList('http://www.tripadvisor.co.uk/pages/by_city.html') 
"
picking out elements based on complement of records in Python pandas,">>> m = pd.merge(df2, df1, how='left', on=['end','start'], suffixes=['','_r'])
>>> df2[m['pkid_r'].isnull()]
    end  pkid  start
2  2010   NaN   2010
"
How to ConfigParse a file keeping multiple values for identical keys?,"class MultiOrderedDict(OrderedDict):
    def __setitem__(self, key, value):
        if isinstance(value, list) and key in self:
            self[key].extend(value)
        else:
            super(OrderedDict, self).__setitem__(key, value)

config = ConfigParser.RawConfigParser(dict_type=MultiOrderedDict)
config.read(['a.txt'])
print config.get(""test"",  ""foo"")
print config.get(""test"",  ""xxx"")
"
Python nested loop comparing two lists and updating a dictionary,"def function(input1, input2):
    mapping = []
    for item in input1:
        risks = {""A"":0, ""B"":0, ""C"":0, ""D"":0, ""E"":0}
        temp = []
        for row in input2:
            if item in row[0]:
                for key in risks.keys():
                    if row[1] == key:
                        risks[key] += 1
        temp.append(item)
        for key in risks.keys():
            temp.append(risks[key])
        mapping.append(temp)
    return mapping
"
Python re.sub - replacing character when context does not match,"import re
data = '''
12345678 foo
bar
baz
12345678 foo
'''
data = re.sub(r'\n(?!\d{8})', '', data)

print(data)
"
How to find the index of a value in 2d array in Python?,">>> zip(*np.where(a == 1))
[(0, 0), (0, 1), (1, 2), (1, 3)]
"
np.ascontiguousarray versus np.asarray with Cython,"a = np.arange(10)
a.flags['C_CONTIGUOUS'] # True
b = a[::2]
b.flags['C_CONTIGUOUS'] # False

c = np.ascontiguousarray(b)
c.flags['C_CONTIGUOUS'] # True
"
Python matching n-grams from a dictionary to a string of text,"text = """"""
I have a dictionary of 2 and 3 word phrases that I want to search in rss feeds for a match. 

I grab   the rss feeds, process them and they end up as a string IN a list entitled ""documents"". 
I want to check the dictionary below and if any of the phrases in the dictionary match part of a string of text I want to return the values for the key. 
I am not sure about the best way to approach this problem. Any suggestions would be greatly appreciated.
""""""

ngrams = [""grab the rss"", ""approach this"", ""in""]

import re

counts = {}
for ngram in ngrams:
    words = ngram.rsplit()
    pattern = re.compile(r'%s' % ""\s+"".join(words),
        re.IGNORECASE)
    counts[ngram] = len(pattern.findall(text))

print counts
"
Base64 encoding in Python 3,encoded = base64.b64encode('data to be encoded')
Filtering out values in specific columns with Pandas,"mask = df.applymap(lambda x:isinstance(x, float)).all(1)
df[mask]
"
Do I have partial view/code behind in Flask?,"<-- login.html -->
{% if g.user.is_anonymous() %}
Login form goes here
{% else %}
Greetings {{g.user.full_name}}!
{% endif %}
"
How to append a list of Hex to one Hex number,"'0x' + ''.join([format(int(c, 16), '02X') for c in reversed(inputlist)])
"
replacing a pandas dataframe row overwrites all columns' dtypes,">>> df.loc[testdate,:] = pd.Series(adddata, dtype='object')
>>> df.dtypes
floatcol    float64
intcol      float64
dtype: object
"
Tabbing in Python?,">>> ""|{:22}|"".format(""Niki Lauda"")
'|Niki Lauda            |'
"
Python: Parse list of 'key:value' elements to dictionary of 'key': value pairs,"OrderedDict( (k, int(v)) for k, v in (el.split(':') for el in your_list))
"
List splitting by predicate,"for r in results:
    (okays if success_condition(r) else errors).append(r)
"
Perform 2 sample t-test,"import numpy as np
from scipy.stats import ttest_ind
from scipy.special import stdtr

np.random.seed(1)

# Create sample data.
a = np.random.randn(40)
b = 4*np.random.randn(50)

# Use scipy.stats.ttest_ind.
t, p = ttest_ind(a, b, equal_var=False)
print ""ttest_ind: t = %g  p = %g"" % (t, p)

# The following is basically the same as the implementation in
# scipy.stats.ttest_ind.

# Compute the descriptive statistics of a and b.
abar = a.mean()
avar = a.var(ddof=1)
na = a.size
adof = na - 1

bbar = b.mean()
bvar = b.var(ddof=1)
nb = b.size
bdof = nb - 1

# Compute Welch's t-test using the descriptive statistics.
tf = (abar - bbar) / np.sqrt(avar/na + bvar/nb)
dof = (avar/na + bvar/nb)**2 / (avar**2/(na**2*adof) + bvar**2/(nb**2*bdof))
pf = 2*stdtr(dof, -np.abs(tf))

print ""formula:   t = %g  p = %g"" % (tf, pf)
"
re string position list builder,"def generate_items(inputstring):
    stack = []
    for elem in inputstring.split('|'):
        if not elem: continue
        stack.append(elem)
        yield '|' + '|'.join(stack)

for item in generate_items(inputstring):
    print item
"
divide the list into rows (create a nested list from a list),"In [11]: nested = [L[i : i+size] for i in xrange(0, len(L), size)]

In [12]: for sub in nested: print sub
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
[40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
[60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
[80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]
[120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139]
[140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159]
[160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179]
[180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]
[200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219]
[220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239]
[240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259]
[260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279]
[280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]
[300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319]
[320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339]
[340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359]
[360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379]
[380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399]
"
"Making networkx plot where edges only display edited numeric value, not field name","# Axes settings (make the spines invisible, remove all ticks and set title)
ax = plt.gca()
[sp.set_visible(False) for sp in ax.spines.values()]
ax.set_xticks([])
ax.set_yticks([])
"
Split dictionary key and list of values from dict,"from collections import defaultdict
from itertools import count

def read_file(file_path):
    result = defaultdict(dict)
    item = count()
    with open(file_path) as f:
        for line in f:
            if not line:
                continue
            parts = line.split()
            result[next(item)][parts[0]] = dict(p.split('=') for p in parts[1:])
    return dict(result)
"
Skip all lines in try if one line fails,"import os
try:
    filename = ""test123.pdf""
    folder = ""someFolder""
    os.mkdir (folder)
    os.rename(filename,""someFolder\\test123.pdf"")
except:
    if os.path.isdir(folder):
        os.rmdir(folder)
    print ""File not found""
"
use .replace() on only one character of a string with repetitive characters,"soFar = soFar[:index] + newChar + soFar[index+1:]
"
Skip first couple of lines while reading lines in Python file,"with open('yourfile.txt') as f:
    lines_after_17 = f.readlines()[17:]
"
Python Pandas: Get index of rows which column matches certain value,df[df['BoolCol']].index.tolist()
Filling available space with a column in GridBagSizer,"sizer.Add(description, (i*3, 0), (1, 3))
sizer.Add(question, (i*3+1, 0), flag=wx.EXPAND)
sizer.AddStretchSpacer((i*3+1,1))
sizer.Add(yes, (i*3+1, 2), flag=wx.ALIGN_RIGHT)
sizer.Add(no, (i*3+1, 3))
"
"Sorting dictionary keys by value, then those with the same value alphabetically","sorted(dictionary.items(), key=lambda t: t[::-1])
"
Function does not work properly in for loop - Python,"for char in reversed(sequence):
    if char == end:
        endCount += 1
    else:
        break
"
numpy matrix rank incorrect result,"In [217]: np.random.seed(123)

In [218]: A = np.random.randint(0, 2, size=(100, 3)).astype(np.float32)

In [219]: B = np.hstack((A, 100000*np.ones((A.shape[0], 1)))).astype(np.float32)
"
Python List as variable name,"from collections import namedtuple

variables = {}
Fruit = namedtuple(""Fruit"", [""name"", ""colour"", ""shape""])
for args in Applist:
    fruit = Fruit(*args)
    variables[fruit.name] = fruit

print ""Apple shape: "" + variables[""Apple""].shape
"
(python) prepend script dir to a path,"import inspect

def getCallerModule():
    # gets globals of module called from, and prints out __file__ global
    print(inspect.currentframe().f_back.f_globals['__file__'])
"
Python: how to import from all modules in dir?,"from my_modules import Stuff
"
Change subplot color in DataFrame?,"from pandas import Series, DataFrame, date_range
import matplotlib.pyplot as plt
import numpy as np

ts = Series(np.random.randn(1000), index=date_range('1/1/2000', periods=1000))
ts = ts.cumsum()

df = DataFrame(np.random.randn(1000, 4), index=ts.index, columns=list('ABCD'))
df = df.cumsum()

ax = df.plot(subplots=True, style=['r','g','b','r'], sharex=True)
plt.legend(loc='best')
plt.tight_layout()
plt.show()
"
Super and child class sharing a variable,"class MyClass:
    class_attribute = None

    @classmethod
    def set(cls, value):
        cls.class_attribute = value

    def do_computation(self):
        self.set(10)


a = MyClass()
b = MyClass()
print a.class_attribute
print b.class_attribute

a.do_computation()
print a.class_attribute
print b.class_attribute
"
what is difference between global and intizilation outside the function in python,"name = ""foo""

def f():
    name = ""bar""
    print ""In f:"", name

def g():
    global name
    name = ""baz""
    print ""In g:"", name

def h():
    global mame
    mame = ""foobar""
    print ""In h:"", mame

print ""Globally:"", name
f()
print ""Globally:"", name
g()
print ""Globally:"", name
h()
print ""Globally"", name
print ""Globally"", mame
"
It's possibile to use set function on a object basing only one attribute?,"from collections import OrderedDict

# Keep the last copy with a given link
kept_last = OrderedDict((x.link, x) for x in nonuniquelist).values()

# Keep the first copy with a given link (still preserving input order)
kept_first = list(reversed(OrderedDict((x.link, x) for x in reversed(nonuniquelist)).viewvalues()))
"
Allow help() to work on partial function object,"def partialhelper(object=None):
    if isinstance(object, functools.partial):
        return pydoc.help(object.func)
    else:
        # Preserve the ability to go into interactive help if user calls
        # help() with no arguments.
        if object is None:
            return pydoc.help()
        else:
            return pydoc.help(object)
"
how to move identical elements in numpy array into subarrays,"np.split(a,np.nonzero(np.diff(a))[0]+1)
"
"use a range as a dictionary key in Python, what option do I have?","class RangeDictionary(dict):
    def __getitem__(self, key):
        for r in self.keys():
            if key in r:
                return super().__getitem__(r)
        return super().__getitem__(key)
"
RIGHT() function in sqlalchemy,"session.query(mappedobject).filter(mappedobject.column_code.endswith('AX'))
"
Converting 3D matrix to cascaded 2D Matrices,"a.swapaxes(2,1).reshape(a.shape[0],-1)
"
Find first element of numpy ndarray of unknown shape,"In [15]: np.may_share_memory(arr.flatten(),arr)
Out[15]: False # Not sharing memory means a copy

In [16]: np.may_share_memory(arr.ravel(),arr)
Out[16]: True # Sharing memory means a view
"
Using regex's to relabel and remove redundent items in a string,"string='''@r=v4 ""v4""
 A -> C : B
 Cell * kcat * B * A / (km + A) 
@r=v4 ""v4""
 C -> C+D
 Cell * v2_k * C
@r=v4 ""v4""
 C -> : D 
 Cell * kcat2 * D * C / (km2 + C)
@r=v4 ""v4""
 C -> C+D
 Cell * v2_k * C'''

i = 0
for strg in string.splitlines():
    if strg == '@r=v4 ""v4""':
        i += 1
        print '@r=v{} ""v{}""'.format(i,i)
    else:
        print strg
"
Optimizing Python distance calculation while accounting for periodic boundary conditions,"def distance(x0, x1, dimensions):
    delta = numpy.abs(x0 - x1)
    delta = numpy.where(delta > 0.5 * dimensions, dimensions - delta, delta)
    return numpy.sqrt((delta ** 2).sum(axis=-1))
"
Turning list into dict,"for link, title, date in zip(items['link'], items['title'], items['date']):
"
Why increase a value in this way in python?,"c = (c + 1) % 256
"
creating a new copy of a python class each time it's called,"class AttributeBlock():
    objects = {}
    dummy = {}
    def __init__(self, key, label, isClosed, isRequired,
             attributes, glob = None):
        if glob is None:
            glob = self.objects
        if key in glob:
            raise ValueError(str(key) + "" already exists"")
        self.key = key
        self.label = label
        self.isClosed = isClosed
        self.isRequired = isRequired
        self.attributes = attributes if attributes is not None else {}
        if glob is not self.dummy:
            glob[key] = self
    def copy(self):
        return AttributeBlock(self.key, self.label, self.isClosed,
                      self.isRequired, self.attributes[:],
                      self.dummy)
"
Loop through csv rows and check for a specific value,"maxuserid = 7255
for i in range(maxuserid):
    result_liked = [] # form a separate list for each csv file
    with open('source/to/file/user_id%i.csv' %(i+1),'r') as fin:
        for row in csv.reader(fin, delimiter='\t'):
            if int(row[2]) >= 1:
                result_liked.append(row)

    if len(result_liked) < 3: # if list too few elements just go to next file
        continue
    training_data = result_liked[:2]
    test_data = result_liked[2:]
    ...
"
Boto S3 API does not return full list of keys,"keys = [k for k in bucket]
"
"How can I listen for 'usb device inserted' events in Linux, in Python?","import glib

from pyudev import Context, Monitor

try:
    from pyudev.glib import MonitorObserver

    def device_event(observer, device):
        print 'event {0} on device {1}'.format(device.action, device)
except:
    from pyudev.glib import GUDevMonitorObserver as MonitorObserver

    def device_event(observer, action, device):
        print 'event {0} on device {1}'.format(action, device)

context = Context()
monitor = Monitor.from_netlink(context)

monitor.filter_by(subsystem='usb')
observer = MonitorObserver(monitor)

observer.connect('device-event', device_event)
monitor.start()

glib.MainLoop().run()
"
How can I lookup based on multiple parameters?,"def get(d, t, r):
    try:
        return max((x for x in d[t] if x[""Rad""] < r), key=lambda x: x[""Rad""])[""Code""]
    except ValueError:
        return None
"
Check list of numbers is a subset,"def quality_check(q):
    spl = q.split("","") # split to check both numbers
    if  all(x in  [""7"", ""8"", ""9"", ""10"", ""12"", ""13"", ""15"", ""23"", ""24"", ""25"", ""26""]for x in  spl):
        return ""good""
    else:
        return ""poor""
"
staying logged in w/ python requests,"    login_request = requests.post(ROUTE_AUTHENTICATE,
                                  data=LOGIN_CREDS,
                                  headers={""Content-Type"": ""application/json""})
    self.assertEqual(login_request.status_code, 200)
    self.cookies = login_request.cookies
"
Getting argument list in a Boost:Python function,"aMethod.func_code.co_varnames
"
how to sum across many columns with pandas groupby?,"In [23]: df.groupby(['day','type'], as_index=False)[df.filter(regex='d_.*').columns].sum()

Out[23]:
   day type  d_1  d_2  d_3  d_4
0    1    A    2    0    2    0
1    2    B    1    1    0    0
"
How do do this list manipulation in Python? This is tricky,"lst = [[5, 44, 73] , [7, 21, 99], [1, 32, 100]]
list(reduce(lambda l, r: l + r, zip(*lst)))
"
How to start a Python script several functions in,"import sys

if __name__ == '__main__':   

    for arg in sys.argv: 
        print arg
"
Iteratively compute subtree sizes for all nodes?,"def computeSubtreeSizes(self):
    stack = [(self.rootID, [])] #e.g. rootID = 1
    visited = self.sizes = {}

    while stack:
        nodeID, subnodes = stack[-1]
        size = visited.get(nodeID)
        if size is None:
            # Haven't seen it before.  Set total to 1,
            # and set up the list of subnodes.
            visited[nodeID] = size = 1
            subnodes[:] = self.nodes[nodeID]
        if subnodes:
            # Process all the subnodes one by one
            stack.append((subnodes.pop(), []))
        else:
            # When finished, update the parent
            stack.pop()
            if stack:
                visited[stack[-1][0]] += size
"
Django objects.filter is not updating field but objects.get is,">>> qs = QuestionAnswer.objects.filter(pk=12345)
>>> qa1 = qs.get()
>>> qa1.graded
0
>>> qa2 = qs.get()
>>> qa2.graded = 1
>>> qa3 = qs.get()
>>> qa3.save()
"
Find the highest number of divisors between range in python?,"import operator


def higest_divisors(a, b):
    _ret = {var: len([x for x in range(a, b+1) if not var % x]) for var in range(a, b+1)}.items()
    max = 0
    _to_ret = []
    for n, t in sorted(_ret, key=operator.itemgetter(1))[::-1]:
        if max <= t:
            _to_ret.append(n)
            max = t

    return _to_ret

if __name__ == '__main__':
    print higest_divisors(2, 10)
"
Scrapy get all children / ignore <br>?,">>> "" "".join(selector.xpath('.//td//text()').extract())
u'Rue de Trazegnies 41 6031\xa0\n      Monceau sur Sambre BELGIQUE'
>>> 
"
python pattern matching numbers,"try:
    y = int(x)
except ValueError:
    y = None
"
python deque/list filtering,"for phase, actions in results:
    while actions:
        action = actions.pop()
        # etc...
"
Cast Column as Text or Prefix with Apostrophe When Writing a CSV File in Python 2.7,"if include_headers:
    f.writerow([d[0] for d in c.description])
    for row in = c.fetchall():
        row.foo = str(row.foo)
        f.writerow(row)
"
How do create new column in csv file using python by shifting one row,"awk 'NR==1{$2=""PSR;""$2}NR>1{$2=($4==a?0"";""$2:+a"";""$2);a=$4}1' FS=';' OFS=';' file
No;PSR;Val;Rec;CSR
0;0;10;1;1200
0;1200;100;2;1300
0;0;100;3;1300
0;1300;100;4;1400
0;1400;10;5;1200
0;0;11;6;1200
"
How to handle multiple values within two arguments in python class,"import sys
class MyClass(object):
    def __init__(self, emails, delay_time=0):
        for email in emails:
            print email
        print delay_time
if __name__ == ""__main__"":
    if len(sys.argv)>1:
        emails = sys.argv[1:-1]
        delay = sys.argv[-1]
        try:
            delay = int(delay)
        except ValueError:
            emails.append(delay) #there's no delay
            delay=0
        a = MyClass(emails,delay_time=delay)
"
Use bool list to retrieve elements from another list - Python,"In [30]: import numpy as np

In [31]: main_list = [12, 10, 30, 10, 11,10, 31]

In [32]: get_indices = [1, 0, 1, 1, 0, 0, 0]

In [33]: main_array = np.array(main_list)

In [34]: get_ind_array = np.array(get_indices).astype(bool)

In [35]: main_array[get_ind_array]
Out[35]: array([12, 30, 10])

In [36]: main_array[~get_ind_array]
Out[36]: array([10, 11, 10, 31])
"
Dynamically Naming Groups in Python Regular Expressions,">>> import re
>>> p = re.compile('(?m)^(.*?)\\s*:\\s*(.*)$')
>>> text = '''person 1: name1
person 2: name2
person 3: name3
...
person N: nameN'''
>>> p.findall(text)
"
Getting a single value from MySQL on Django (Python),"profile = Profile.objects.only('idx').filter(full_name=full_name,
                                             birthday=birthday).first()
profile_idx = profile.idx if profile else None
"
Arranging number of strings using Python's lambda function,"def cmp_function(x, y):
    return cmp(len(x), len(y))

a = ['green egg','snail and lettuce','bacon','dorse naga','rutabaga ripple','cheese']
a.sort(cmp=cmp_function)
print a
"
What is the scope of a defaulted parameter in Python?,"def f(a, L=[]):
    L.append(a)
    return L

print f(1)
print f(2)
print f(3)
print f.func_defaults
f.func_defaults = (['foo'],) # Don't do this!
print f(4)
"
Compare elements within two data frames in pandas,"#create mask
print (A > B)

       0     1      2
0   True  True  False
1   True  True  False
2  False  True   True

print (A > B).astype(int)

   0  1  2
0  1  1  0
1  1  1  0
2  0  1  1
"
how to find most common entry in dictionary of dictionaries in python,"data = {
    'page1': {
        'word1': 5,
        'word2': 10,
        'word3': 2,
    },
    'page2': {
        'word2': 2,
        'word3': 1,
    }
}

from collections import defaultdict
class Entry(object):
    def __init__(self):
        self.pages = 0
        self.occurrences = 0
    def __iadd__(self, occurrences):
        self.pages += 1
        self.occurrences += occurrences
        return self
    def __str__(self):
        return '{} occurrences on {} pages'.format(self.occurrences, self.pages)
    def __repr__(self):
        return '<Entry {} occurrences, {} pages>'.format(self.occurrences, self.pages)

counts = defaultdict(Entry)

for page_words in data.itervalues():
    for word, count in page_words.iteritems():
        counts[word] += count

for word, entry in counts.iteritems():
    print word, ':', entry
"
Stemming process not working in Python,">>> from nltk.stem import PorterStemmer
>>> ps = PorterStemmer()
>>> data0 = '''<Your Data0 string>'''
>>> words = data0.split("" "")
>>> stemmed_words = map(ps.stem, words)
>>> print(list(stemmed_words))  # list cast needed because of 'map'
[..., 'industri', ..., 'diversifi']
"
Group by and aggregate the values of a list of dictionaries in Python,"from collections import defaultdict, Counter
def solve(dataset, group_by_key, sum_value_keys):
    dic = defaultdict(Counter)
    for item in dataset:
        key = item[group_by_key]
        vals = {k:item[k] for k in sum_value_keys}
        dic[key].update(vals)
    return dic
... 
>>> d = solve(my_dataset, 'date', ['value1', 'value2'])
>>> d
defaultdict(<class 'collections.Counter'>,
{
 datetime.date(2013, 1, 2): Counter({'value2': 10, 'value1': 10}),
 datetime.date(2013, 1, 1): Counter({'value2': 20, 'value1': 20})
})
"
How to read JSON file that contains list of dictionaries into pandas data frame?,"import pandas as pd

lis = [{""url"": ""http://www.URL1.com"", ""date"": ""2001-01-01""}, {""url"": ""http://www.URL2.com"", ""date"": ""2001-01-02""}]

print pd.DataFrame(lis)

         date                  url
0  2001-01-01  http://www.URL1.com
1  2001-01-02  http://www.URL2.com
"
Python program needs full path in Notepad++,"import os
import sys

scriptdir = os.path.abspath(os.path.dirname(sys.argv[0]))

with open(os.path.join(scriptdir, 'myfile.txt')) as f:
    # etc.
"
Does the list have any numbers?,">>> map(type, [1, 2, 3, 'X'])
<map object at 0x7fc763de6e90>
>>> list(map(type, [1, 2, 3, 'X']))
[<class 'int'>, <class 'int'>, <class 'int'>, <class 'str'>]
>>> # Using `set`, you can get unique types.
>>> set(map(type, [1, 2, 3, 'X']))
{<class 'int'>, <class 'str'>}
"
Passing class between functions,"def parse_dir_contents(self, response):
    for sel in response.xpath('//h1[@itemprop=""name""]'):
        item = thisItem()
        ...
        request = scrapy.Request(""https://www.this-site.com.au/something?listing_id=""+propID,callback=self.parse_other_content)
        request.meta['item'] = item
        yield request

def parse_other_content(self, response):
    item = response.meta['item']
    # do something with the item
    return item
"
X pattern in python 3.2,"def pattern_writer(pattern_size):
    first_x = 0
    last_x = pattern_size - 1
    while first_x < pattern_size and last_x > -1:
        for t in range(pattern_size):
            if t == first_x or t == last_x:
                print ""x"",
            else:
                print ""."",
        print ""\n""
        first_x += 1
        last_x -= 1
"
Pandas: Splitting and editing file based on dictionary," df = df[df[""Gene""].isin(FunctionsWithGenes.keys())]
"
"""Slicing"" in Python Expressions documentation",">>> t[...,1:]
<type 'tuple'> (Ellipsis, slice(1, None, None))
"
merge to dictionaries preserving different values,"output = {}
for key in d1.keys():
    output[key] = {}
    lst = d1[key]
    for name, count in (lst[i:i+2] for i in range(0, len(lst), 2)):
        output[key][name] = (int(count),)
for key in d2.keys():
    if key not in output:
        output[key] = {}
    lst = d2[key]
    for name, count in (lst[i:i+2] for i in range(0, len(lst), 2)):
        if name in output[key].keys():
            output[key][name] += (int(count),)
        else:
            output[key][name] = (int(count),) 
"
Reassign variable in with-block,"class RetryClient():
    def __init__(self, **kwargs):
        self.kwargs = kwargs
        self.conn = get_conn(**kwargs)

    def __enter__(self):
        self.conn.__enter__()
        return self

    def __exit__(self, *args):
        self.conn.__exit__(*args)

    def _reconnect(self):
        self.conn.__exit__()
        time.sleep(60)
        self.conn = get_conn(**self.kwargs)
        self.conn.__enter__()

    def upload(self, src, ...):
        this_try = 1
        while (this_try <= max_tries):
            try:
                with open(src, 'rb') as fh:
                    self.conn.storbinary('STOR ' + src, fh.read)
            except ftplib.all_errors:
                this_try += 1
                self._reconnect()
"
"Python: Why does list import using quotation marks, how can I avoid this/get rid of them?","['Synechococcus sp. JA-2-3B'a(2-13)']
"
Find different strings and return containing tag in BeautifulSoup,"def must_contain_all(*strings):                                                 
    def must_contain(markup):                                                   
        return markup is not None and all(s in markup for s in strings)         
    return must_contain
"
Interchange ordering of 4-D Numpy array,"a.reshape(-1,1000).T
"
"In Python, how do I search a TinyDB database for substrings in the values?",">>> test_contains = lambda value, search: s.contains(search)
>>> db.search(User.name.test(test_contains, 'Columbia'))
"
Introspect function to determine which argument unpacking (positional or keyword) was used,"import inspect

def func_has_positional_args(func):
    spec = inspect.getfullargspec(func)
    return bool(spec.varargs) # varargs: name of the * argument or None
def func_has_keyword_args(func):
    spec = inspect.getfullargspec(func)
    return bool(spec.varkw)   # varkw: name of the ** argument or None
"
Error in the results of a list comprehension,"import numpy as np
import random

diam = 1.5
p = 1
a = 10
d = 0.2
h = 0.15

lx = list(np.arange(-diam/2, diam/2 + 0.05, 0.05))

for loop in range(50):
    f = random.uniform(0, p/2)
    a1 = [k for k in lx if (k+(abs(f-(1/(2*p))*(k**2)))*np.tan(a)<-d/2-h/np.tan(np.pi/2-a))] + [k for k in lx if (k+(abs(f-(1/(2*p))*(k**2)))*np.tan(a))>(d/2)]
    a2 = [k for k in lx if (k+(abs(f-(1/(2*p))*(k**2)))*np.tan(a)<-d/2-h/np.tan(np.pi/2-a))]
    a3 = [k for k in lx if (k+(abs(f-(1/(2*p))*(k**2)))*np.tan(a))>(d/2)]
    a4 = [k+(abs(f-(1/(2*p))*(k**2)))*np.tan(a) for k in list(np.arange(-diam/2,diam/2+0.05,0.05))]

print ""lx"", lx
print ""a1"", a1
print ""a2"", a2
print ""a3"", a3
print ""a4"", a4

# however...
print -d/2-h/np.tan(np.pi/2-a)
print k+(abs(f-(1/(2*p))*(k**2)))*np.tan(a)
print -0.19999999999999951 < -d/2-h/np.tan(np.pi/2-a)
print -0.14999999999999947 < -d/2-h/np.tan(np.pi/2-a)


# EDIT2 => addition, see explanation below.

print ""EDIT 2 results step by step equation from comment below answer""
print ""===========================================""
x1 = (1/(2*p))
print ""x1 = "", x1
x2 = (0.05**2)
print ""x2 = "", x2
print ""abs(f-x1*x2) = "", abs(f-x1*x2)
print ""np.tan(a) = "", np.tan(a)
print ""abs(f-x1*x2) * np.tan(a) = "", abs(f-x1*x2) * np.tan(a)
print ""abs(f-x1*x2) * np.tan(a) + 0.05 = "", 0.05 + abs(f-x1*x2) * np.tan(a)
print ""===========================================""
"
Using Regex to 'Clean Up' a List of Names,"from re import match

def rules(name):     
    return match(r'^([A-Z][a-z]+(?:[A-Z]?[a-z]+)* ?){1,}$', name)

input = ['000000AAAAAARob Alsod', 'AAAPerson Person', 'Jeff the awesome Guy', 'Jenna DEeath', 'GEOFFERY EVERDEEN', 'shy guy', 'Theone Normalperson', '  Guywith Whitespace', 'Someone Middlename MacIntyre', '', 'Jack Really Awesome']
results = filter(rules, input)
print results
"
How to get numpy array from multiple lists of same length and sort along an axis?,"d = np.asarray(zip(a,b,c))

d.dtype = [(""0"", int), (""1"", int), (""2"", int)]
d.shape = d.size
d.sort(order=""1"")
"
How to change the size of the iteration segment (Python(,"r = requests.get(<your url>)
for x in r.iter_lines():
    // do something...
"
Sharing Class Variables,"class TeleportAbilityMixin(object):
    def teleport(self, destination):
        cost = 20
        if self.mp >= cost:
            # Unpack the x, y coordinates
            self.x, self.y = destination
            self.mp -= cost

class TeleportingMagician(Magician, TeleportAbilityMixin):
    pass

m = TeleportingMagician()
new_location = (10, 5)
m.teleport(new_location)
"
Print tree without recursion,"def print_nonrec_depthfirst(node):
    stack = [node]
    while stack:
        node = stack.pop()
        print node
        for c in node.children:
            stack.append(c)
"
How to delete a specific row of label widgets in tkinter app,"from Tkinter import *
import ystockquote
import urllib.request
from urllib.request import urlopen
from bs4 import BeautifulSoup


""""""

I am adding comments so that if
you need help from stackoverflow
on this again they will know whats
what because it took me a looooong time

""""""




class Shares(Frame):
# Main page to display gain/loss on different shares
    def __init__(self, master):
        Frame.__init__(self, master)

        Frame.__init__(self, master)
        self.frame = Frame(master, bg = ""#ededed"")
        self.frame.grid(row = 9, column = 0)
        self.canvas = Canvas(self.frame, bg = ""#ffffff"")
        self.data_frame = Frame(self.canvas, bg = ""#ffffff"")
        self.vscrollbar = Scrollbar(self.frame, orient = ""vertical"", command = self.canvas.yview)
        self.canvas.configure(yscrollcommand = self.vscrollbar.set)
        self.vscrollbar.grid(row = 9, column = 11, sticky = NS)
        self.canvas.config(width = 1210, height = 200)
        self.canvas.grid(row = 9, column = 0, columnspan = 11, sticky = E)
        self.canvas.create_window((0, 0), window = self.data_frame, anchor = ""nw"", tags = ""self.frame"")
        self.data_frame.bind(""<Configure>"", self.onFrameConfig)

        self.data_frame.grid_columnconfigure(0, minsize = 352)
        self.data_frame.grid_columnconfigure(1,  minsize = 96)
        self.data_frame.grid_columnconfigure(2,  minsize = 96)
        self.data_frame.grid_columnconfigure(3,  minsize = 96)
        self.data_frame.grid_columnconfigure(4,  minsize = 96)
        self.data_frame.grid_columnconfigure(5,  minsize = 96)
        self.data_frame.grid_columnconfigure(6,  minsize = 96)
        self.data_frame.grid_columnconfigure(7,  minsize = 96)
        self.data_frame.grid_columnconfigure(8,  minsize = 96)
        self.data_frame.grid_columnconfigure(9,  minsize = 96)

        master.bind(""<Return>"", self.company_details)

        Label(self.frame, bg = ""#ededed"", font = ""Helvetica 20"", text = ""Enter ASX Code"").grid(row = 0, column = 0, sticky = W, padx = 5, pady = 5)
        Label(self.frame, bg = ""#ededed"", font = ""Helvetica 20"", text = ""Current Price"").grid(row = 2, column = 0, sticky = W, padx = 5, pady = 5)

        self.entryVar = StringVar()
        Entry(self.frame, width = 12, font = ""Helvetica 20"", textvariable = self.entryVar).grid(row = 0, column = 1, padx = 5, pady = 5)

        self.companyVar = StringVar()
        Label(self.frame, font = ""Helvetica 20"", textvariable = self.companyVar).grid(row = 1, column = 0, columnspan = 2, sticky = W, padx = 5, pady = 5)

        self.priceVar = DoubleVar()
        Label(self.frame, font = ""Helvetica 20"", textvariable = self.priceVar).grid(row = 2, column = 1, sticky = W, padx = 5, pady = 5)
        self.priceVar.set("""")

        Label(self.frame, bg = ""#ededed"", font = ""Helvetica 20"", text = ""Current Action"").grid(row = 3, column = 0, sticky = W, padx = 5, pady = 5)

        Label(self.frame, bg = ""#ededed"", font = ""Helvetica 20"", text = ""Current Holdings"").grid(row = 7, column = 0, pady = 5)

        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Name"").grid(row = 8, column = 0, columnspan = 2, padx = 5, pady = 5)
        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Code"").grid(row = 8, column = 2, padx = 5, pady = 5, sticky = E)
        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Buy Date"").grid(row = 8, column = 3, padx = 5, pady = 5)
        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Quantity"").grid(row = 8, column = 4, padx = 5, pady = 5)
        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Paid"").grid(row = 8, column = 5, padx = 5, pady = 5)
        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Brokerage"").grid(row = 8, column = 6, padx = 5, pady = 5)
        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Total"").grid(row = 8, column = 7, padx = 5, pady = 5)
        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Current"").grid(row = 8, column = 8, padx = 5, pady = 5)
        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Total"").grid(row = 8, column = 9,padx = 5, pady = 5)
        Label(self.frame, bg = ""#ededed"", width = 10, font = ""Helvetica 14 bold"", text = ""Loss/Gain"").grid(row = 8, column = 10, padx = 5, pady = 5)

        Label(self.frame, bg = ""#ededed"", text = ""Amount"").grid(row = 16, column = 10, padx = 5, pady = 5, sticky = E)
        Label(self.frame, bg = ""#ededed"", text = ""Amount"").grid(row = 16, column = 9, padx = 5, pady = 5, sticky = E)
        Label(self.frame, bg = ""#ededed"", text = ""Amount"").grid(row = 16, column = 8, padx = 5, pady = 5, sticky = E)

        Button(self.frame, width = 11, text = ""New Record"", command = self.new_record).grid(row = 16, column = 0, padx = 5, pady = 5, sticky = E)
        #Button(self.frame, width = 11, text = ""Modify Record"", command = self.new_record).grid(row = 16, column = 1, padx = 5, pady = 5)
        Button(self.frame, width = 11, text = ""Delete Record"", command = self.delete_record).grid(row = 16, column = 2, padx = 5, pady = 5, sticky = E)

        self.rows = 0

        self.code_list = {}
# Function to validate Australian company codes
    def validate_code(self):
        soup = BeautifulSoup(urllib.request.urlopen(""https://au.finance.yahoo.com/q?s="" + (self.code_entry.get() + "".AX"")).read(), ""html.parser"")
        element = soup.find(""div"", (""class"", ""title""))
        name = element.find(""h2"")
        self.name_entry.set(name.text[:-9])
# Adding a new company
    def new_record(self):
        top = self.top = Toplevel()

        top.bind(""<Return>"", self.add)

        Label(top, text = ""Code: "").grid(row = 0, column = 0, sticky = E, padx = 5, pady = 5)
        Label(top, text = ""Name: "").grid(row = 2, column = 0, sticky = E, padx = 5, pady = 5)
        Label(top, text = ""Buy Date: "").grid(row = 3, column = 0, sticky = E, padx = 5, pady = 5)
        Label(top, text = ""Quantity: "").grid(row = 4, column = 0, sticky = E, padx = 5, pady = 5)
        Label(top, text = ""Paid: "").grid(row = 5, column = 0, sticky = E, padx = 5, pady = 5)
        Label(top, text = ""Brokerage: "").grid(row = 6, column = 0, sticky = E, padx = 5, pady = 5)

        self.name_main = StringVar()

        self.name_entry = StringVar()
        Entry(top, textvariable = self.name_entry).grid(row = 2, column = 1, padx = 5, pady = 5)
        self.name_entry.set("""")

        self.code_main = StringVar()

        self.code_entry = StringVar()
        Entry(top, textvariable = self.code_entry, validatecommand = self.validate_code).grid(row = 0, column = 1, padx = 5, pady = 5)
        self.code_entry.set("""")

        self.date_main = StringVar()


        self.date_entry = StringVar()
        Entry(top, textvariable = self.date_entry).grid(row = 3, column = 1, padx = 5, pady = 5)
        self.date_entry.set("""")

        self.quantity_main = IntVar()


        self.quantity_entry = IntVar()
        Entry(top, textvariable = self.quantity_entry).grid(row = 4, column = 1, padx = 5, pady = 5)
        self.quantity_entry.set("""")

        self.paid_main = DoubleVar()


        self.paid_entry = DoubleVar()
        Entry(top, textvariable = self.paid_entry).grid(row = 5, column = 1, padx = 5, pady = 5)
        self.paid_entry.set("""")
        self.frames=[]
        self.column=0            

        self.brokerage_main = DoubleVar()

        self.brokerage_entry = DoubleVar()
        Entry(top, textvariable = self.brokerage_entry).grid(row = 6, column = 1, padx = 5, pady = 5)
        self.brokerage_entry.set(29.95)
        # 
        self.total_main = DoubleVar()

        self.current_main = DoubleVar()

        self.total_two_main = DoubleVar()

        self.loss_gain_main = DoubleVar()

        self.frames.append(Frame(self.data_frame))
        self.frames[-1].grid()
        Label(self.frames[-1], textvariable=self.name_main).grid(row=self.rows, column=1)
        Label(self.frames[-1], textvariable=self.code_main).grid(row=self.rows, column=2)
        Label(self.frames[-1], textvariable=self.date_main).grid(row=self.rows, column=3)
        Label(self.frames[-1], textvariable=self.quantity_main).grid(row=self.rows, column=4)
        Label(self.frames[-1], textvariable=self.paid_main).grid(row=self.rows, column=1)
        Label(self.frames[-1], textvariable=self.brokerage_main).grid(row=self.rows, column=6)
        Label(self.frames[-1], textvariable=self.total_main).grid(row=self.rows, column=7)
        Label(self.frames[-1], textvariable=self.current_main).grid(row=self.rows, column=8)
        Label(self.frames[-1], textvariable=self.total_two_main).grid(row=self.rows, column=9)
        Label(self.frames[-1], textvariable=self.loss_gain_main).grid(row=self.rows, column=10)
        self.rows+=1


        Button(top, text = ""Validate code"", command = self.validate_code).grid(row = 1, column = 1, padx = 5, pady = 5)

        Button(top, text = ""Add"", command = self.add).grid(row = 7, column = 1, sticky = W, padx = 5, pady = 5)

        Button(top, text = ""Cancel"", command = self.cancel).grid(row = 7, column = 1, sticky = E, padx = 5, pady = 5)

    def add(self, event = None):
        self.rows += 1
        self.code_list[self.code_entry.get()]=self.frames[-1]
        code = str.upper(self.code_entry.get())
        self.code_main.set(code)
        self.name_main.set(self.name_entry.get())
        self.date_main.set(self.date_entry.get())
        self.quantity_main.set(self.quantity_entry.get())
        paid = self.paid_entry.get()
        self.paid_main.set(""$%.2f"" % paid)
        brokerage = self.brokerage_entry.get()
        self.brokerage_main.set(""$%.2f"" % brokerage)
        total = self.quantity_entry.get() * self.paid_entry.get() + self.brokerage_entry.get()
        self.total_main.set(""$%.2f"" % total)
        self.current_main.set(""$"" + str(ystockquote.get_price(self.code_entry.get() + "".AX"")))
        curent_main = float(ystockquote.get_price(self.code_entry.get() + "".AX""))
        total_two = self.current_main * self.quantity_entry.get()
        self.total_two_main.set(""$%.2f"" % total_two)
        rounded = ((total_two / total * 100) - 100)
        self.loss_gain_main.set(""%.2f"" % rounded + ""%"")
        self.top.destroy()

    def cancel(self, event = None):
        self.top.destroy()

    def delete_record(self):
        top = self.top = Toplevel()

        top.bind(""<Return>"", self.delete)

        Label(top, text = ""Please enter code of record to be deleted: "").grid(row = 0, column = 0, sticky = E, padx = 5, pady = 5)

        self.code_entry_delete = StringVar()
        Entry(top, textvariable = self.code_entry_delete).grid(row = 0, column = 1, padx = 5, pady = 5)
        self.code_entry_delete.set("""")

        Button(top, text = ""Delete Record"", command = self.delete).grid(row = 1, column = 1, padx = 5, pady = 5)
        Button(top, text = ""Cancel"", command = self.cancel).grid(row = 1, column = 0, padx = 5, pady = 5)

    def delete(self, event = None):
        if self.code_entry_delete.get() in self.code_list:
            self.code_list[self.code_entry_delete.get()].destroy()


    def company_details(self, event):
        self.priceVar.set(""$"" + (ystockquote.get_price(self.entryVar.get() + "".AX"")))

        soup = BeautifulSoup(urllib.request.urlopen(""https://au.finance.yahoo.com/q?s="" + (self.entryVar.get() + "".AX"")).read(), ""html.parser"")
        element = soup.find(""div"", (""class"", ""title""))
        name = element.find(""h2"")
        self.companyVar.set(name.text[:-9])

    def onFrameConfig(self, event):
        self.canvas.configure(scrollregion = self.canvas.bbox(""all""))

if __name__ == ""__main__"":
    master = Tk()
    master.title(""Share Program"")
    app = Shares(master)
    master.geometry(""1235x528+20+40"")
    master.mainloop() 
"
How to iterate over case insensitive sorted dictionary items?,"for i in sorted(d, key=str.lower):
    print i, d[i]
"
Laying out MVC classes in Python,"class Model(object):
 pass
class View(object):
 pass
class Controller(object):
 model = Model()
 view = View()
"
How to sort alphanumeric list of Django model objects,"import operator

class Foo:
    def __init__(self, name):
        self.name = name

l = [Foo('AA'), Foo('a'), Foo('AB')]
l.sort(key=operator.attrgetter('name'))
print [o.name for o in l]
['AA', 'AB', 'a']
"
Change log file with index,"keyword = 'user'
newuser = 'PeterB'
with open('test.txt') as infile, open('updated.txt', 'w') as outfile:
    for line in infile.readlines():
        words = line.split()
        try:
            index = words.index(keyword) + 1
            words[index] = newuser
            outfile.write('{}\n'.format(' '.join(words)))
        except (ValueError, IndexError):
            outfile.write(line)    # no keyword, or keyword at end of line
"
How to occasionaly provide feedback for a long running Python list comprehension,"from itertools import combinations

result = []
count = 0
for w in (''.join(c) for c in combinations(words, 2)):
    if sorted(w) == letters:
        result.append(w)
        count += 1
        if count % 2000 == 0:
            print 'Progress: {0} matching combinations found'.format(count)

print result
"
is there a limit to command.getstatusoutput() buffer in python,"cmd = subprocess.Popen(['ls'], stdout=file('output', 'w'))
"
Number of occurrences in two strings using a for loop,"In [738]: def occurances(fst, sec):
     ...:     return sum(c in fst for c in sec)
"
Django URL matching any 140 characters,"url(r'^home/(?P<text>[\w\s]{140})$',....),
"
Python Multiprocessing: Reloading module in child effecting parent,"class MyClass(object):
    def __init__(self, value=0):
        self.value = value
    def __eq__(self, other):
        return type(self) is type(other) and self.value == other.value
"
Array reshaped according to keys,"import numpy as np
import pandas as pd

a = np.random.rand(50)
b = np.random.randint(10, 15, 50)

s = pd.Series(a)
s.groupby(b).apply(pd.Series.reset_index, drop=True).unstack(level=0)
"
Python - Erroneous result for two different matrixes in nested for loop,"other_matrix = [[0 for x in range(2)] for x in range(2)]
"
Python3: How to create a dict of different objets of the same class?,"class myReserve():
    def __init__(self, initName):
        self.myList = dict()
"
Parsing a generic data file in python,"d = {}
for line in data:
    key, value = line.split(':')
    d[key] = value
"
Variable that represents all numbers in Python?,">>> natural = natural_num_range()
>>> all(i in natural for i in range(1, 10000000, 10000))
True
>>> any(i in natural for i in range(-100000000, 0, 10000))
False
"
python - multiprocessing is slower than sequential,"def main(data):
    p = Pool(len(data)) #number of processes = number of CPUs
    keys, values= zip(*data.items()) #ordered keys and values
    start = time.time()
    processed_values= p.map( f, values )
    result= dict( zip(keys, processed_values ) ) 
    print(""multi: {}"".format(time.time() - start))
    p.close() # no more tasks
    p.join()  # wrap up current tasks

    start = time.time()
    processed_values = map(f, values)
    result2 = dict( zip(keys, processed_values ) ) 
    print(""non-multi: {}"".format(time.time() - start))
    assert(result == result2)
"
"Run Code based on User Input (Python3,Pandas)","if type == ""a"":
    os.system(""python script_a.py"")
elif type == ""b"":
    os.system(""python script_b.py"")
else:
    print(""Invalid option."")
"
Python: Ordering partial elements in List for Genetic Algorithm,"j0 = [[1,3,3,2], [3,3,1,3], [1,1,1,4], [2,2,1,4], [2,3,3,4], 
    [3,1,3,3], [2,1,2,1], [1,2,2,3], [3,2,2,2]]
print(j0)

j1 = [[1,1,1,4], [3,3,1,3], [1,2,2,3], [2,2,1,4], [2,3,3,4], 
    [3,1,3,3], [2,1,2,1], [1,3,3,2], [3,2,2,2]]
print(j1)

def sortjob(alljobs, jobnum):
    #get jobs with this jobnum
    indices = []
    jobs = []
    for i, v in enumerate(alljobs):
        if v[0] == jobnum:
            indices.append(i)
            jobs.append(v)

    jobs.sort()
    #put the sorted jobs back into the correct locations
    for i, v in zip(indices, jobs):
        alljobs[i] = v

sortjob(j0, 1)
print(j0)    
"
combining two lists of dicts to one list of dicts by specific key,"from collections import Counter

a = [{'val': 10, 'count': 1}]
b = [{'val': 10, 'count': 4}, {'val': 20, 'count': 2}]
c = Counter()

[c.update({d['val']:d['count']}) for d in a + b]
print [{'val': k, 'count': v} for k, v in c.iteritems()]
"
How can I remove text within parentheses with a regex?,"re.sub('\\([^)]*\\)', '', filename)"
How do you get the display width of combined Unicode characters in Python 3?,">>> import textwrap
>>> text = 'בְּרֵאשִׁית, בָּרָא אֱלֹהִים, אֵת הַשּׁמַיִם, וְאֵת הָאָרֶץ'
>>> print(textwrap.fill(text, width=40))  # bad, aggressive wrapping
בְּרֵאשִׁית, בָּרָא אֱלֹהִים, אֵת
הַשָּׁמַיִם, וְאֵת הָאָרֶץ
>>> import uniseg.graphemecluster
>>> def new_len(x):
...     if isinstance(x, str):
...         return sum(1 for _ in uniseg.graphemecluster.grapheme_clusters(x))
...     return len(x)
>>> textwrap.len = new_len
>>> print(textwrap.fill(text, width=40))  # Good wrapping
בְּרֵאשִׁית, בָּרָא אֱלֹהִים, אֵת הַשָּׁמַיִם, וְאֵת הָאָרֶץ
"
How to stay logged into a website using a Python script (requests library)?,"from requests import Session

s = Session()
s.cookies[""s_cc""] = ""your_session_cookie"" # replace this with your actual login cookie

page_signed_in = s.get(""http://www.surfline.com"") # you're logged in :)
"
Writing unittest for python3 shell based on cmd module,"from unittest.mock import patch
from io import StringIO


    # not working for reasons unknown
    def _last_write(self, nr=None):
        """""":return: last `n` output lines""""""
        if nr is None:
            return self.mock_stdout.write.call_args[0][0]
        return """".join(map(lambda c: c[0][0], self.mock_stdout.write.call_args_list[-nr:]))

    # modified with unittest.mock.patch
    def test_show_command(self):
        # Interpreter obj
        cli = self.create()
        with patch('sys.stdout', new=StringIO()) as fakeOutput:
            #print ('hello world')
            self.assertFalse(cli.onecmd('show'))
        self.assertEqual('Hello World!', fakeOutput.getvalue().strip())
"
Matplotlib: draw lines with width given in data coordinates,"import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.set_xlim(-50, 50)
ax.set_ylim(-75, 75)
x = [-50, 0, 50]
y = np.array([-50, 0, 0])

ax.fill_between(x,y-30,y+30)

ax.grid()
plt.show()
"
Regex to remove newline character from string,">>> ' '.join(""I went \n to the store\n"".split())
'I went to the store'
"
What's the best way to split a string into integer part and string part?,">>> import re
>>> checks = [
    re.compile(r'^(?P<digits>\d+)(?P<letters>\D+)$'),
    re.compile(r'^(?P<letters>\D+)(?P<digits>\d+)$'),
]
>>> inputs = ['11547QSD', 'ABC98765', '111ABC111']
>>> for item in inputs:
    for check in checks:
        if check.match(item):
            print('Digits are {digits}, letters are {letters}'.format(
                **check.search(item).groupdict()
            ))
            break
    else:
        print('%s is incorrect' % (item,))


Digits are 11547, letters are QSD
Digits are 98765, letters are ABC
111ABC111 is incorrect
"
read a file line by line into a list,lines = [line.rstrip('\n') for line in open('filename')]
How to access variable by id in Python?,"var = 'I need to be accessed by id!'
address = id(var)
print(address)
var2 = [x for x in globals().values() if id(x)==address]
"
Parse a string with a date to a datetime object,"datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')"
Search for few options in string (if .. in),"st = ""foobar water""   
l = [""bottle"", ""camera"", ""cake""] 
if any(w in st for w in l)
"
if typeA in [typeB.typeA for typeB in typeBlist]: ... accessing typeB within the if clause?,"[typeB for typeB in typeBlist if typeB.typeA == typeA]
"
How do I write two lists to a dat file using pickle?,"import pickle

aList = ['useless', 'info']
bList = [1000,5000]

aFile=open('aFile.dat', 'w')
aFile.write(pickle.dumps({""aList"":aList,""bList"":bList}))
aFile.close()
"
"Return the file path of the file, not the current directory","path = os.path.dirname(getBundlePath()) 
directory = os.listdir(path) 
for file in directory: 
    print(file)
"
How to generate random numbers that are different?,"random.sample(range(1, 50), 6)"
"In Python, are function-level assignments evaluated at each function call?","def qcharToUnicode(s, p=re.compile(r""QChar\((0x[a-fA-F0-9]*)\)"")):
    return p.sub(lambda m: '""' + chr(int(m.group(1),16)) + '""', s)
"
How to *append* a text to a database file opened with shelve?,"class Update_MyStore(MyStore):
    def __init__(self, store):
        db = shelve.open(store)
        for i in db:
            setattr(self, i, db[i])
        self.items()
        self.store_in_db()
Update_MyStore('store')
"
Why do different methods of same object have the same `id`?,"In [2]: import gc

In [3]: f = a.f

In [4]: len(gc.get_referrers(a.g)),len(gc.get_referrers(f))
Out[4]: (0, 1)

In [5]: sys.getrefcount(a.g),sys.getrefcount(f)
Out[5]: (1, 2)
"
Search a string for values present in a dict," if any(leaveOut[c] in movieTitle for c in 'abcde'):
     # One of the words was in the title
"
"These 8 lines of python + pandas would take ~1 month to execute, help me speed them up?","grouped = ((i, ' '.join(df.text[df.sender_id == i])) for i in uni)
"
"Converting text document coordinates 'x, y' to float point list object","with open(""myfile.txt"") as fh:
    coords = [tuple(float(x) for x in line.strip('()\n').split(', ')) for line in fh]
"
How do I find mime-type in Python,"import mimetypes
mimetypes.add_type('video/webm','.webm')

...

    mimetypes.guess_type(filename)
"
Index function in a simple nested for loop not,"In [2]: def myfunc(grid):
   ...:     for i, row in enumerate(grid):
   ...:         for j, elem in enumerate(row):
   ...:             print('Row #{}, elem #{}, value: {}'.format(i, j, elem))

In [3]: myfunc(((1, 0, 0, 1, 0),
   ...:         (0, 1, 0, 0, 0),
   ...:         (0, 0, 1, 0, 1),
   ...:         (1, 0, 0, 0, 0),
   ...:         (0, 0, 1, 0, 0)))
Row #0, elem #0, value: 1
Row #0, elem #1, value: 0
Row #0, elem #2, value: 0
Row #0, elem #3, value: 1
Row #0, elem #4, value: 0
Row #1, elem #0, value: 0
Row #1, elem #1, value: 1
Row #1, elem #2, value: 0
Row #1, elem #3, value: 0
Row #1, elem #4, value: 0
Row #2, elem #0, value: 0
Row #2, elem #1, value: 0
Row #2, elem #2, value: 1
Row #2, elem #3, value: 0
Row #2, elem #4, value: 1
Row #3, elem #0, value: 1
Row #3, elem #1, value: 0
Row #3, elem #2, value: 0
Row #3, elem #3, value: 0
Row #3, elem #4, value: 0
Row #4, elem #0, value: 0
Row #4, elem #1, value: 0
Row #4, elem #2, value: 1
Row #4, elem #3, value: 0
Row #4, elem #4, value: 0
"
Checking several values/strings/variables for a pair of phrases in python 3.3,"def cintelpair3(*args):
    if any(args.count(card) == 2 for card in ['Ace', 'Two']):
        print(""You have a pair"")
"
Running a function from a string,">>> a = ""for y in range(2,20):print y""
>>> exec a
2
3
...
19
"
What does the Star operator mean in Python?,"def sum(a, b):
    return a + b

values = (1, 2)

s = sum(*values)
"
pyqt auto connect signal,"import sys
from PyQt4 import QtGui, QtCore

class CustomButton(QtGui.QPushButton):
    custom_clicked = QtCore.pyqtSignal(str)
    def mousePressEvent(self, event):
        self.custom_clicked.emit(""Clicked!"")

class SignalsAndSlots(QtGui.QWidget):

    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        layout = QtGui.QHBoxLayout(self)
        self.custom_button = CustomButton(""Press Me"", self)
        self.custom_button.setObjectName('customButton')
        self.label = QtGui.QLabel(""Nothing..."", parent=self)
        layout.addWidget(self.custom_button)
        layout.addWidget(self.label)
        self.custom_button.custom_clicked.connect(self.on_clicked)

    def on_clicked(self, msg):
        self.label.setText(msg)

if __name__ == ""__main__"":
    app = QtGui.QApplication(sys.argv)
    gui = SignalsAndSlots()
    gui.show()
    app.exec_()
"
how to scrape deeply embeded links with python beautifulSoup,"from urlparse import urljoin

from bs4 import BeautifulSoup
import requests


base_url = 'http://www.ncbi.nlm.nih.gov'
website = 'http://www.ncbi.nlm.nih.gov/pubmed/?term=mtap+prmt'

# parse the main page and grab the link to the side bar
session = requests.Session()
soup = BeautifulSoup(session.get(website).content)

url = urljoin(base_url, soup.select('div#disc_col a.disc_col_ph')[0]['href'])

# parsing the side bar
soup = BeautifulSoup(session.get(url).content)

for a in soup.select('div.portlet_content ul li.brieflinkpopper a'):
    print a.text, urljoin(base_url, a.get('href'))
"
Reading from a text file with python - first line being missed,"with open('test.txt') as x:
    for line in x:
        # By this point, line is set to the first line
        # the file cursor has advanced just past the first line
        print(x.read())
        # the above prints everything after the first line
        # file cursor reaches EOF, no more lines to iterate in for loop
"
Check for pattern recursively,"class LineOfOnesChecker(object):

    _DIAG_INDICES = (lambda i: i, lambda i: -i - 1)

    def __init__(self, matrix):
        self._matrix = matrix
        self._len_range = range(len(self._matrix))

    def has_any(self):
        return self.has_row() or self.has_col() or self.has_diag()

    def has_row(self):
        return any(all(elem == 1 for elem in row)
                   for row in self._matrix)

    def has_col(self):
        return any(all(self._matrix[i][j] == 1 for i in self._len_range)
                   for j in self._len_range)

    def has_diag(self):
        return any(all(self._matrix[transf(i)][i] == 1 for i in self._len_range)
                   for transf in self._DIAG_INDICES)
"
Check if multple variables greater than zero in python,"A = 200
B = -140
C = 400
D = -260

v1, v2, v3, v4 = [x if x > 0 else 0 for x in (A, B, C, D)]
"
__init__ with function as parameter (using the NetworkX),">>> t1 = Test()
>>> t1.function(1)
4

>>> t2 = Test(lambda self, x: self.dicty[x]['width'])
>>> t2.function(1)
2
"
Search for Dictionary Values in String,"states = {
     'Alaska' : 'AK',
     'Alabama' : 'AL',}
astring = ""I love Alaska""

for state, abbreviation in states.items():
     if state in astring:
        print astring.replace(state, abbreviation)
"
reshaping an arbitrary collection numpy arrays,"p = numpy.vstack((x, y, z)).T
"
Testing not-empty Group captures,"subj = 'abc123 bbb22 cc'
rgx = re.compile(r'[a-z]+(\d+)?')
result = [i for i in re.findall(rgx, subj) if i]
for match in result:
    print (match)
"
Factorizing a number in python,"def factors(n):
    while n > 1:
        for i in range(2, n + 1):
            if n % i == 0:
                n /= i
                yield i
                break

for factor in factors(360):
    print factor
"
python random sequence from list,">>> random.sample([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 4)
[4, 2, 9, 0]
>>> random.sample('even strings work', 4)
['n', 't', ' ', 'r']
"
"How to mix *args, **kwargs and named arguments in decorator","class CaptainHook(object):
    def __init__(self, func):
        self.hooks = []
        self.func = func

    def __call__(self, *args, **kwargs):
        for hook in self.hooks:
            hook(*args, **kwargs)
        return self.func(*args, **kwargs)
"
How to write a special for loop case of C++ in Python?,"start_value = 10;
end_value = 20;
for i in xrange(start_value, end_value):
  print i
"
how to add information to json using Python in fast way,"import csv

with open((""data/_all.csv"", 'rb') as incsv:
    reader = csv.reader(incsv)
    next(reader, None)  # skip presumed header
    parking = {(lat, long): park for lat, long, park in reader}
"
"how to remove ""empty"" space between subplots?","import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
images = [np.random.rand(40, 40) for x in range(68)]
gs = mpl.gridspec.GridSpec(17, 4)
gs.update(wspace=0.1, hspace=0.1, left=0.1, right=0.4, bottom=0.1, top=0.9) 
for i in range(68):
    plt.subplot(gs[i])
    plt.imshow(images[i])
    plt.axis('off')
plt.show()
"
Python: Fetch item in list where dict key is some value using lambda,"from __future__ import print_function

def f1(LoD, idd=20):
    # loop until first one is found then break and return the dict found
    desired_dict = None
    for di in LoD:
        if di['id'] == idd:
            desired_dict = di
            break
    return desired_dict

def f2(LoD, idd=20):
    # The genexp goes through the entire list, then next() returns either the first or None
    return next((di for di in LoD if di['id'] == idd), None)   

def f3(LoD, idd=20):
    # NOTE: the 'filter' here is ifilter if Python2
    return next(filter(lambda di: di['id']==idd, LoD), None)

def f4(LoD, idd=20):
    desired_dict=None
    i=0
    while True:
        try:
            if LoD[i]['id']==idd:
                desired_dict=LoD[i]
                break
            else: 
                i+=1
        except IndexError:
            break

    return desired_dict         

def f5(LoD, idd=20):
    try:
        return [d for d in LoD if d['id']==idd][0]               
    except IndexError:
        return None            


if __name__ =='__main__':
    import timeit   
    import sys
    if sys.version_info.major==2:
        from itertools import ifilter as filter

    x = [
        {'Car': 'Honda', 'id': 12},
        {'Car': 'Mazda', 'id': 45},
        {'Car': 'Toyota', 'id': 20}
        ]  * 10   # the '* 10' makes a list of 30 dics...

    result=[]    
    for f in (f1, f2, f3, f4, f5):
        fn=f.__name__
        fs=""f(x, idd=20)""
        ft=timeit.timeit(fs, setup=""from __main__ import x, f"", number=1000000)
        r=eval(fs)
        result.append((ft, fn, r, ))         

    result.sort(key=lambda t: t[0])           

    for i, t in enumerate(result):
        ft, fn, r = t
        if i==0:
            fr='{}: {:.4f} secs is fastest\n\tf(x)={}\n========'.format(fn, ft, r)   
        else:
            t1=result[0][0]
            dp=(ft-t1)/t1
            fr='{}: {:.4f} secs - {} is {:.2%} faster\n\tf(x)={}'.format(fn, ft, result[0][1], dp, r)

        print(fr)
"
Recreating builtin s.find('substring') function,">>> str1 = 'my best test ever!'
>>> str2 = 'best'
>>> for i, char in enumerate(str1):
...     if str2[0] == char:
...         print(""found first instance of letter at, "", i)
...         print(str2 == str1[i:i + len(str2)])
... 
found first instance of letter at,  3
True
"
Drop rows if value in a specific column is not an integer in pandas dataframe,"In [215]:

df[df['entrytype'].apply(lambda x: str(x).isdigit())]
Out[215]:
  entrytype
0         0
1         1
4         2
"
Check if none of the multiple chars appears in string A?,">>> a.intersection(b) == b
True
"
How to make List from Numpy Matrix in Python,numpy.array(a)[0].tolist()
Check for unique values in a dictionary and return a list,"from collections import Counter
cn = Counter(aDict.values())
print(sorted(k for k,v in aDict.items() if cn[v] == 1))
"
How to speed up multiple inner products in python,"import itertools


def necklaces_with_multiplicity(n):
    assert isinstance(n, int)
    assert n > 0
    w = [1] * n
    i = 1
    while True:
        if n % i == 0:
            s = sum(w)
            if s > 0:
                yield (tuple(w), i * 2)
            elif s == 0:
                yield (tuple(w), i)
        i = n - 1
        while w[i] == -1:
            if i == 0:
                return
            i -= 1
        w[i] = -1
        i += 1
        for j in range(n - i):
            w[i + j] = w[j]


def leading_zero_counts(n):
    assert isinstance(n, int)
    assert n > 0
    assert n % 2 == 0
    counts = [0] * n
    necklaces = list(necklaces_with_multiplicity(n))
    for combo in itertools.combinations(range(n - 1), n // 2):
        for v, multiplicity in necklaces:
            w = list(v)
            for j in combo:
                w[j] *= -1
            for i in range(n):
                counts[i] += multiplicity * 2
                product = 0
                for j in range(n):
                    product += v[j - (i + 1)] * w[j]
                if product != 0:
                    break
    return counts


if __name__ == '__main__':
    print(leading_zero_counts(12))
"
Print dict items in alphabet order,"channels = []
for elem in tv_elem.getchildren():
    if elem.tag == 'channel':
       channels.append( (elem.attrib['id'], self.load_channel(elem)) )
       for channel_value in channels:
           print channel_value[1].get_display_name()
"
How to filter() for different items?,"# Note: Your model must be a Datastore Plus model; this may require some restructuring!
q1 = query.filter(""glam ="", ""glam"")
q2 = query.filter(""speaking ="", ""speaking"")
for result in q1.OR(q2):
    ....
"
Python sort list by algorithm,"Data = [
    '<td>1</td>', '<td>2</td>', '<td>3</td>', '<td>4</td>',
    '<td>A</td>', '<td>B</td>', '<td>C</td>', '<td>D</td>',
    '<td>I</td>', '<td>II</td>', '<td>III</td>', '<td>IV</td>',
]

lists, result = [], []
for i in range(0, len(Data), 4):
    lists.append(Data[i:i+4])

for currentList in zip(*lists):
    result += list(currentList)
print result
"
Parallelize loop over numpy rows,"from multiprocessing.pool import ThreadPool
pool = ThreadPool()

ar = ...
states = np.empty_like(array)

def f(i):
    states[i] = function(ar[i], *args)

pool.map(f, range(len(ar)))
"
Python multiprocessing.Pool.map dying silently,"import multiprocessing as mp
import logging

logger = mp.log_to_stderr(logging.DEBUG)

def do_stuff(text):
    logger.info('Received {}'.format(text))
    return text

if __name__ == '__main__':
    p = mp.Pool(4)
    tasks = ['str{}'.format(i) for i in range(2000)]
    results = p.map(do_stuff, tasks)
    p.close()

    logger.info(results)
"
How to use regex in python with varying amounts of white spaces,"(\w+\|\d+\|)(?:.*\s)(\[\S*)(?:\s)(.+\])
"
Group by multiple keys and summarize/average values of a list of dictionaries,"temp_dict = dict(zip([""dept"", ""sku""], key))
temp_list = [item[""qty""] for item in grp]
temp_dict[""qty""] = sum(temp_list)
temp_dict[""avg""] = temp_dict[""qty""] / len(temp_list)
result.append(temp_dict)
"
python comprehension loop for dictionary,sum(item['one'] for item in list(tadas.values()))
Python __init__ finding variable from nowhere,"def __init__(self, x=None):
    if x is None:
        x = []
    self._x = x
"
pandas dataframe count row values,"# create Series with dictionaries
>>> from collections import Counter
>>> c = df[""path""].str.split(',').apply(Counter)
>>> c
0    {u'p2': 1, u'p3': 1, u'p1': 1, u'p4': 1}
1                        {u'p2': 1, u'p1': 2}
2              {u'p1': 1, u'p7': 1, u'p5': 2}
3              {u'p2': 1, u'p3': 2, u'p1': 1}

# create DataFrame
>>> pd.DataFrame({n: c.apply(lambda x: x.get(n, 0)) for n in wordlist})
   p1  p2  p3  p4  p5  p6  p7
0   1   1   1   1   0   0   0
1   2   1   0   0   0   0   0
2   1   0   0   0   2   0   1
3   1   1   2   0   0   0   0
"
"Extract days, hours and seconds from a list of datetimes","import collections
d=collections.OrderedDict()
for e in dates:
    day, hour, full_time=e.strftime('%Y%m%d'), e.strftime('%H'), e.strftime('%H%M%S')
    d.setdefault(day,collections.OrderedDict()).setdefault(hour, []).append(full_time)
"
plotting 3d scatter in matplotlib,"import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib.pyplot as plt
from numpy.random import random

mpl.rcParams['legend.fontsize'] = 10

fig = plt.figure(1)
fig.clf()
ax = Axes3D(fig)
datasets = random((8,100,3))*512
my_labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']

colors = ['k', ""#B3C95A"", 'b', '#63B8FF', 'g', ""#FF3300"",
          'r', 'k']
index = 0
for data, curr_color in zip(datasets, colors):
    ax.plot(np.log2(data[:, 0]), np.log2(data[:, 1]), 
                   np.log2(data[:, 2]), 'o', c=curr_color, label=my_labels[index])
    index += 1

ax.set_zlim3d([-1, 9])
ax.set_ylim3d([-1, 9])
ax.set_xlim3d([-1, 9])

ax.set_xticks(range(0,11))
ax.set_yticks([1,2,8])
ax.set_zticks(np.arange(0,9,.5))

ax.legend(loc = 'upper left')

plt.draw()

plt.show()
"
"Iterating through a dictionary of <Object, List> mappings. Django Tempates","{% for obj in dict.values %}
    {% for item in obj %}
        {{ item }}
    {% endfor %}
{% endfor %}
"
Pass Python variables to `Tkinter.Tcl().eval()`,"interp.call(""myproc"", d)
"
In my code i am getting a name error saying the name 'sort' is not defined,"if form == ""1"": 
   sort = input('If you would like the names sorted alphabetically enter ""a"".If you would like the scores sorted from highest to lowesr please enter ""b"" and If you would like the average scores sorted from highest to lowest please enter ""c""')
if sort == ""a"": # not defined
"
Xpath query 'like' substitution,"""translate(
  /Node/Node[@name='"" + 
  str(accountnumber) + 
  ""']/Val[@name='account_number'],'- ','')""
"
Split string without non-characters,">>> s = ':foo [bar]'
>>> ''.join(c for c in s if c.isalnum() or c.isspace())
'foo bar'
>>> ''.join(c for c in s if c.isalnum() or c.isspace()).split()
['foo', 'bar']
"
print tuple as number of arguments,"def my_print(*args):
    print(*args)
"
Reading a line of integers in Python,"numbers = map(int, raw_input().split())
"
ipython notebook pylab fig size running twice?,"figsize(10,5)
plot(range(10))
"
Iterate over a list that contain duplicate elements,"import collections

...
set_quals = set(qualsin) # This is set([0, 1, 2, 3, 4, 5])
counts = collections.Counter(qualsin) # This is Counter({3: 5, 2: 4, 0: 1, 1: 1, 4: 1, 5: 1}) which acts like a dictionary
for quals in set_quals:
    d = [quals, counts[quals]] # use the name from the set and the value from the Counter
    wrtr.writerow(d)
"
Python dictionary with two keys with shelve,"def _mapkey(self, key):
    return struct.pack('>II', key)
def _unmapkey(self, key):
    return struct.unpack('<II', key)
"
How to erase the file contents of text file in Python?,"open('file.txt', 'w').close()"
"Python - Importing strings into a list, into another list :)","res = []
tmp = []

for i, line in enumerate(open('file.txt'), 1):
    tmp.append(line.strip())
    if i % 3 == 0:
        res.append(tmp)
        tmp = []

print(res)
"
How to create a new column with a tuple (or a list)?,">>> df = pd.DataFrame({'a': [10,20,30,20,30], 'b': [1,2,3,2,1]})
>>> df
    a  b
0  10  1
1  20  2
2  30  3
3  20  2
4  30  1

[5 rows x 2 columns]
>>> df_counts = df.groupby([""a"", ""b""]).size()
>>> df_counts.sort(ascending=False)
>>> df_counts
a   b
20  2    2
30  3    1
    1    1
10  1    1
dtype: int64
"
How do I optimize Python Code?,"data = [['From', 'john@hotmail.com', 'Fri', 'Jan', '14', '22:16:24', '2012'],
     ['From', 'john@hotmail.com', 'Fri', 'Jan', '14', '23:16:24', '2012'],
     ['From', 'john@hotmail.com', 'Fri', 'Jan', '14', '21:16:24', '2012'],
     ['From', 'john@hotmail.com', 'Fri', 'Jan', '14', '22:02:24', '2012']
    ]

hour_frequency_list = {}

for temp in data:
  hour = temp[5].split("":"")[0]
  if hour in hour_frequency_list:
     hour_frequency_list[hour] += 1
  else:
     hour_frequency_list[hour] = 1

sorted_list = sorted(hour_frequency_list.items())

print (""hour | Occurences"")
for k in sorted_list:
    print (k[0] + ""    |"" + str(k[1]) )
"
arrange values in a python 2D array,"data = [
    ['A', '21', '45'],
    ['A', '12', '23'],
    ['A', '54', '21'],
    ['A', '15', '54'],
    ['B', '23', '53'],
    ['B', '34', '53'],
    ['B', '32', '54'],
    ['B', '24', '13'],
    ['C', '31', '43'],
    ['C', '42', '54'],
    ['C', '35', '54'],
    ['C', '12', '11']
]

from itertools import groupby
from operator import itemgetter

for name, values in groupby(data, itemgetter(0)):
    _, first, second = zip(*values)
    print(name, max(first), min(second))
"
Assign next n iterations to tuple,">>> from itertools import islice
>>> iterator = (x for x in ('a', 'b', 'c', 'd', 'e'))
>>> tuple(islice(iterator, 3))
('a', 'b', 'c')
"
Python: Cell arrays comparison using minus function,"import numpy as np

def diffs(a,b):
    # collect sliding window differences
    # length of window determined by the shorter array
    # if a,b are not arrays, need to replace b[...]-a with
    # a list comprehension
    n,m=len(a),len(b)
    if n>m:
        # ensure s is the shorter
        b,a=a,b # switch
        n,m=len(a),len(b)
        # may need to correct for sign switch
    result=[]
    for i in range(0,1+m-n):
        result.append(b[i:i+n]-a)
    return result

def alldiffs(a,b):
    # collect all the differences for elements of a and b
    # a,b could be lists or arrays of arrays, or 2d arrays
    result=[]
    for aa in a:
        for bb in b:
            result.append(diffs(aa,bb))
    return result

# define the 3 arrays
# each is a list of 1d arrays

a=[np.array([2,2,1,2]),np.array([1,3])]
b=[np.array([4,2,1])]
c=[np.array([1,2]),np.array([4,3])]

# display the differences
print(alldiffs(a,b))
print(alldiffs(a,c))
print(alldiffs(b,c))
"
Find sequences of digits in long integers efficiently,"import math

class DecimalIndexing:
    def __init__(self, n):
        self.n = n
    def __len__(self):
        return int(math.floor(math.log10(self.n)+1))
    def __getitem__(self, i):
        if isinstance(i, slice):
            return [self[x] for x in range(i.start, i.stop, i.step or 1)]
        else:
            return (self.n/(10**i))%10
    def __iter__(self):
        for i in xrange(len(self)):
            yield self[i]
"
"Python, slicing lists?","def out(field):
    return '\n'.join([''.join(map(str, c)) for c in reversed(list(zip(*field)))])
"
Reverse AND inverse python3.x OrderedDict efficiently,">>> invert = OD(zip(*zip(*attributes.items())[::-1]))
"
Pythonic way to extract specific values from a dictionary based on a subset of keys,"mydict = {'g':'1','a':'2','r':'3','c':'24','b':'38'}
keys = ['a', 'g', 'c']
results = map(mydict.__getitem__, keys)
pointer = '-'.join(results)
"
Get yaml key value in python,"for k, v in data[""clusters""].items():
    print data[""clusters""][k][""tag_cl""]
"
Split AND sort list Jinja/Pelican,"{% for column in LINKS|sort|slice(3) %}
<div class=""l-box pure-u-1-3"">
    {% for name, link in column %}
    <li><a href=""{{ link }}"">{{ name }}</a></li>
    {% endfor %}
</div>
{% endfor %}
"
How to scrape the next pages in python using Beautifulsoup,"import re

import requests
from bs4 import BeautifulSoup


with requests.Session() as session:
    # extract the last page
    response = session.get(""http://www.engineering.careers360.com/colleges/list-of-engineering-colleges-in-India?sort_filter=alpha"")    
    soup = BeautifulSoup(response.content, ""html.parser"")
    last_page = int(re.search(""page=(\d+)"", soup.select_one(""li.pager-last"").a[""href""]).group(1))

    # loop over every page
    for page in range(last_page):
        response = session.get(""http://www.engineering.careers360.com/colleges/list-of-engineering-colleges-in-India?sort_filter=alpha&page=%f"" % page)
        soup = BeautifulSoup(response.content, ""html.parser"")

        # print the title of every search result
        for result in soup.select(""li.search-result""):
            title = result.find(""div"", class_=""title"").get_text(strip=True)
            print(title)
"
remove randomly chosen elements from array,"import numpy as np
N = 11;
n = 3;
x = np.linspace(0,2,N);
pdf = np.exp(-x**2);
pdf = pdf/np.sum(pdf);

#create mask, choose random indices from x according to pdf, set chosen indices to True:
indices = np.full(x.shape, False, bool)
randices = np.random.choice(np.arange(indices.shape[0]), n, replace = False,p = pdf)
indices[randices] = True

x_rand_vals = x[randices]
x_remaining = x[~indices]

print 'original x:\t\t', x
print 'random indices:\t\t',randices
print 'random values:\t\t',x_rands
print 'remaining array:\t',x_remaining
"
case insensitive string comparison,"if (string1.lower() == string2.lower()):
    pass"
Group By & Aggregate List of Dictionaries in Python,"import pandas as pd

data = [{""startDate"": 123, ""endDate"": 456, ""campaignName"": 'abc',
         ""campaignCfid"": 789, ""budgetImpressions"": 10},
        {""startDate"": 123, ""endDate"": 456, ""campaignName"": 'abc',
         ""campaignCfid"": 789, ""budgetImpressions"": 50},
        {""startDate"": 456, ""endDate"": 789, ""campaignName"": 'def',
         ""campaignCfid"": 123, ""budgetImpressions"": 80}]

df = pd.DataFrame(data)

grouped = df.groupby(['startDate', 'endDate', 'campaignCfid',
                      'campaignName']).agg(sum)

print grouped.reset_index().to_dict('records')
"
How to set default value for variable?,"string = raw_input(""Proceed? [Yn] "")[:1].upper() or ""Y""
"
Action between certain time,"if (localtime >= 2330 or localtime < 615) and self.data != 1:
"
Function name is not reusable (python),"def f(a): # whatever arguments you like
    return a

# create a bunch of functions that return f(x)
flist = [functools.partial(f, x) for x in range(5)]

def g(a, b): 
    return a + b

# create a bunch of functions that take a single argument (b), but have a set to
# 0..4: 
flist = [functools.partial(g, x) for x in range(5)] 

some_g = flist[0]
some_g(1) # returns 0 + 1
"
Weighted random sample in python,"import bisect
import random
from collections import Counter, Sequence

def weighted_sample(population, weights, k):
    return random.sample(WeightedPopulation(population, weights), k)

class WeightedPopulation(Sequence):
    def __init__(self, population, weights):
        assert len(population) == len(weights) > 0
        self.population = population
        self.cumweights = []
        cumsum = 0 # compute cumulative weight
        for w in weights:
            cumsum += w   
            self.cumweights.append(cumsum)  
    def __len__(self):
        return self.cumweights[-1]
    def __getitem__(self, i):
        if not 0 <= i < len(self):
            raise IndexError(i)
        return self.population[bisect.bisect(self.cumweights, i)]
"
How to pass an array from python to shell script and execute it?,"p = subprocess.Popen(['./arraytest'], shell=False, stdin=subprocess.PIPE)
p.communicate('\0'.join(str(n) for n in HSPACE) + '\0')
"
python - which data structure to use as an array of dicts?,"def namedlist(name, *attrs):
    """"""Create a named list class named `name` with attributes `attrs`.
       `attrs` must be strings representing valid Python identifiers.
    """"""
    class MutableEfficientNamedList(object):
        __slots__ = attrs

        def __init__(self, *values):
            for k, v in zip(self.__slots__, values):
                setattr(self, k, v)

        def __getitem__(self, i):
            return getattr(self, self.__slots__[i])

        def __setitem__(self, i, v):
            return setattr(self, self.__slots__[i], v)

        def __repr__(self):
            return '{}({})'.format(type(self).__name__, 
                ', '.join(repr(getattr(self, s)) for s in self.__slots__))

    MutableEfficientNamedList.__name__ = name
    return MutableEfficientNamedList

MyList = namedlist('MyList', 'foo', 'bar', 'baz')
nl = MyList(1, 2, 3)
print nl  # MyList(1, 2, 3)
print nl.bar  # 2
print nl[1]  # 2
"
How does cgi.FieldStorage store files?,"
fileitem = form[""userfile""]
if fileitem.file:
    # It's an uploaded file; count lines
    linecount = 0
    while 1:
        line = fileitem.file.readline()
        if not line: break
        linecount = linecount + 1
"
pandas.read_csv: how to skip comment lines,"pd.read_csv(StringIO(s), sep=',', comment='#')"
Django view: How to display data from a dictionary,"print my_dict['a']['c']    # Outputs: 2
"
check if two lists are equal by type Python,">>> x = [5, ""b""] 
>>> y = [3, ""a""]
>>> z = [""b"", 5]
>>> map(type, x) == map(type, y)
True
>>> map(type, x) == map(type, z)
False
"
CSVWriter not saving data to file - WHY?,"myfile = open('myfile.csv','wb')
wrtr = csv.writer(myfile, delimiter=',', quotechar='""')
for row in rows:
    wrtr.writerow([row.field1,row.field2,row.field3])
    myfile.flush() # whenever you want, and/or
myfile.close() # when you're done.
"
Pandas time to hour conversion using Lambda,"def time_slot_convert(time):
    return (time.minute + 1)

df['time_slot']=df.apply(lambda row: time_slot_convert(pd.to_datetime(row['time'])),axis=1)
print df
     site_number       date              time  Class  Speed_KPH  time_slot
no.                                                                       
0             11 2016-02-27  00:00:13.0000000  Short         43          1
1             11 2016-02-27  00:02:15.0000000  Short         45          3
2             11 2016-02-27  00:00:28.0000000  Short         31          1
3             11 2016-02-27  00:03:28.0000000  Short         31          4
"
How to make a list formed by changing some defaults in multiple ways,"default = [{""One"": 1, ""Two"": 2, ""Three"": 3}, {""One"": 5, ""Two"": 6, ""Three"": 7},
           {""One"": 9, ""Two"": 10, ""Three"" : 11}]
varying = {""One"": [12,13,14,15], ""Two"": [20,21,23], ""Three"": [12,44]}

result = [dict(d.items() + [(k, x)])
              for d in default for k, v in varying.items() for x in v]

>>> result
[{'One': 1, 'Three': 12, 'Two': 2},
 {'One': 1, 'Three': 44, 'Two': 2},
 {'One': 1, 'Three': 3, 'Two': 20},
 {'One': 1, 'Three': 3, 'Two': 21},
 {'One': 1, 'Three': 3, 'Two': 23},
 {'One': 12, 'Three': 3, 'Two': 2},
 {'One': 13, 'Three': 3, 'Two': 2},
 {'One': 14, 'Three': 3, 'Two': 2},
 {'One': 15, 'Three': 3, 'Two': 2},
 {'One': 5, 'Three': 12, 'Two': 6},
 {'One': 5, 'Three': 44, 'Two': 6},
 {'One': 5, 'Three': 7, 'Two': 20},
 {'One': 5, 'Three': 7, 'Two': 21},
 {'One': 5, 'Three': 7, 'Two': 23},
 {'One': 12, 'Three': 7, 'Two': 6},
 {'One': 13, 'Three': 7, 'Two': 6},
 {'One': 14, 'Three': 7, 'Two': 6},
 {'One': 15, 'Three': 7, 'Two': 6},
 {'One': 9, 'Three': 12, 'Two': 10},
 {'One': 9, 'Three': 44, 'Two': 10},
 {'One': 9, 'Three': 11, 'Two': 20},
 {'One': 9, 'Three': 11, 'Two': 21},
 {'One': 9, 'Three': 11, 'Two': 23},
 {'One': 12, 'Three': 11, 'Two': 10},
 {'One': 13, 'Three': 11, 'Two': 10},
 {'One': 14, 'Three': 11, 'Two': 10},
 {'One': 15, 'Three': 11, 'Two': 10}]
"
passing a variable instead of input file to sed,"import re
url = 'http://xyzzy.com?Python=fantastic&paxdiablo=still%20awesome'
args = re.findall(r'[?&]([^?&]*=[^?&]*)', url)
for arg in args:
    (object,property) = arg.split(""="")
    print object, ""is"", property.replace('%20',' ')
"
Python - passing parameters in a command line app,"import argparse


def foo(path):
    print('Running foo(%r)' % (path, ))


def bar(path):
    print('Running bar(%r)' % (path, ))

dispatch = {
    'foo': foo,
    'bar': bar,
}

parser = argparse.ArgumentParser()
parser.add_argument('function')
parser.add_argument('arguments', nargs='*')
args = parser.parse_args()

dispatch[args.function](*args.arguments)
"
Why is my A* Search returning the same expanded space as my UniformCostSearch?,"def aStarSearch(problem, heuristic):
    closed = []
    # A* uses the total cost up to current node + heuristic to goal to decide priority
    def cost_func(tup):
        node, cost_so_far, directions = tup   # unpack argument tuple
        return cost_so_far + heuristic(node, problem) # I'm guessing at heuristic's API

    fringe = PriorityQueueWithFunction(cost_func)
    fringe.push((problem.getStartState(), 0, []))

    while not fringe.isEmpty():
        node, cost, directions = fringe.pop()

        if problem.isGoalState(node):
            return directions

        if not (node in closed):
            closed.append(node)

            for node, direction, step_cost in problem.getSuccessors(node):
                fringe.push((node, cost + step_cost, directions + [direction]))

    if fringe.isEmpty():
        return []
"
Getting local variables of function,"def needs_privilege(privilege, project=None):
    """"""Check whether the logged-in user is authorised based on the
    given privilege

    @type privilege: Privilege object, id, or str
    @param privilege: The requested privilege""""""

    def validate(func, self, *args, **kwargs):
        """"""Validator of needs_privillige""""""
        try: check(self.user, privilege, project)
        except AccessDenied:
            return abort(status_code=401)
        else:
            return func(self, *args, **kwargs)
    validate.privelege = privelege
    return decorator(validate)
"
Python and numpy - removing rows from a corresponding matrix,"x = x[y != 0]
y = y[y != 0]
"
Is there a better way to convert from decimal to binary in python?,"'{0:0=#10b}'.format(my_num)[2:]
# '00001010'
"
Using dictionary keys as coordinates when writing to csv,"from string import uppercase

#Make a list of the column letters
cols = list(uppercase[3:]) + ['A' + c for c in uppercase]
#print(cols)

with open('example.csv', 'w') as f:
    for r in range(4, 53):
        row = ','.join([dict1.get(c + str(r), '') for c in cols])
        f.write(row + '\n')
"
How to extract from this list of tuples and convert into this dictionary?,"from collections import defaultdict
def convertToDict(key, my_list):
    result_dict = defaultdict(list)
    for item in my_list:
        if item[0] == key:
            result_dict[item[0]].append(item[1])
    return result_dict

print convertToDict(""id1"", my_list)
"
"Split string into list, then split list into list of lists","def add_data(key, value, data):
    if key.startswith('Value('):
        if key.endswith('(int)'):
            value = int(value)
        data['Sequences'][-1].append(value)
    elif key == 'Sequence':
        data['Sequences'].append([])
    else:
        data[key] = value

def parse_lines(lineseq):
    data = {'Sequences':[]}
    for line in lineseq:
        try:
            key, value = [part.strip() for part in line.split(':', 1)]
        except ValueError:
            continue
        add_data(key, value, data)
    return data

lines = proc_stdout.split('\n')
data = parse_lines(lines)
"
Python/Regex - Expansion of Parentheses and Slashes,"import re

def expand(s):

    ''' Group 1 contains the string inside the parenthesis
        Group 2 contains the digit or character `s` after the closing parenthesis

    '''    
    match = re.search(r'\(([^()]*)\)(\d|s)', s)
    if match:
        group0 = match.group()
        group1 = match.group(1)
        group2 = match.group(2)
        if group2.isdigit():
            # A digit after the closing parenthesis. Repeat the string inside
            s = s.replace(group0, ((group1 + '/') * int(group2))[:-1])
        else:
            s = s.replace(group0, '/'.join(group1.split('/') + group1.split('/')[::-1]))

    if '(' in s:
        return expand(s)

    return s

li = parse('1/(15/-23)2/4')

for index, s in enumerate(li):
    if '(' in s:
        s = expand(s)
        li[index] = s.split('/')

import itertools
print list(itertools.chain(*li))
"
Remove line break inside line row from CSV with regular expression,"import csv

with open(csvfilename, 'rb') as infile:
    reader = csv.reader(infile)
    for row in reader:
        print repr(row[5])
"
Python kludge to read UCS-2 (UTF-16?) as ASCII,">>> data = open('breaks.log', 'rb').read()
>>> data[:2]
'\xff\xfe'
>>> udata = data.decode('utf16')
>>> all(d < u'\x80' for d in udata)
True
"
replace class method with simple function,"def stdout2file(status, prefix='pre', msg=False):
    import datetime as dt
    import os
    import sys
    if not hasattr(stdout2file, 'sav'):
        stdout2file.sav = None
    if status == 'on':
        if stdout2file.sav:
            print('You have already triggered this once  Ignoring this request.')
        else:
            now = dt.date.today()
            repname = repnameprefix = prefix + now.strftime(""%Y%m%d"") + '.txt'
            count = 0
            while os.path.isfile(repname):
                count += 1
                repname = repnameprefix + ("".%02d"" %(count))
            stdout2file.sav = sys.stdout
            f = open(repname,'w')
            sys.stdout = f
            stdout2file.fhr = f
    elif status == 'off':
        if not stdout2file.sav:
            print('Redirect is ""off"" already.  Ignoring this request')
        else:
            sys.stdout = stdout2file.sav
            stdout2file.fhr.close()
            if msg:
                print('output to:' + stdout2file.fhr.name)
            stdout2file.sav = None
    else:
        print('Unrecognized request')
"
How to terminate input as a list when a negative integer is entered? (python),"a = []
while True:
    n = int(raw_input(""Enter input- ""))
    if n < 0:
        break
    a.append(n)
"
write two values to csv row in python,"writer.writerow([ID] + wordList)
"
"In Python, how can I read a yet-unknown number of lines from a txt file?","with open('<filename>','r') as f:
    file_list = []
    numlines = int(f.readline())
    for i, line in enumerate(f, 1):
        file_list.append(line.strip())
        if i >= numlines:
            break
"
Need to implement nested try statements with one exception,"for album,song in song_database.iteritems():
    for s in song:
        for sdir in 'Songs_1', 'Songs_2', 'Songs_3':
            try:
                src_dir_1 = src_dir + ""/"" + sdir + ""/"" + album + ""/"" + s + "".mp3""
                shutil.copy2(src_dir_1,dest_dir)
                print src_dir_1
            except IOError:
                pass
"
Python guesses my number (reverse number guess) UnboundLocalError,"        if greater_or_smaller in ['g','s']:
            number = randint(number, 50) if greater_or_smaller == 'g' else randint(1, number)
            answer = raw_input(""Is your number %d? y/n> "" % number)
            if answer == 'y':
                print ""Hooray!""
            elif answer == 'n':
                greater_or_smaller()
"
Python splitting text file keeping newlines,"with open('file_name') as f:
     re.findall(r'\S+|\n',f.read())
"
How to load an uppercase alphabet?,"if message.isupper():
    # do something
"
Change DenyHosts report: Call external command from Python,"from subprocess import Popen, PIPE

hostIP = ""87.215.133.109""
cmd = ""/usr/local/bin/geo-ip.pl --short %s"" % hostIP
output = Popen(cmd, shell=True, stdout=PIPE).communicate()[0]

## alternate form ##
# cmd = [""/usr/local/bin/geo-ip.pl, ""--short"", hostIP]
# output = Popen(cmd, stdout=PIPE).communicate()[0]

print output.strip() 
# Netherlands
"
Python if this and this and this,"values = ['t', 'br', 'ht']
if all(x in instr for x in values):
    print(""Ok!"")
"
Inconsistency in string parsing of python,">>> c = 7
>>> (c==7|c==3)
False
>>> c = 3
>>> (c==7|c==3)
False
>>> c==7 or c==3
True
"
how to make qmenu item checkable pyqt4 python,"from PyQt4 import QtGui

app = QtGui.QApplication([])

w = QtGui.QMainWindow()
menu = QtGui.QMenu(""menu"", w)
ag = QtGui.QActionGroup(w, exclusive=True)

a = ag.addAction(QtGui.QAction('50%', w, checkable=True))
menu.addAction(a)

a = ag.addAction(QtGui.QAction('100%', w, checkable=True))
menu.addAction(a)

a = ag.addAction(QtGui.QAction('200%', w, checkable=True))
menu.addAction(a)

a = ag.addAction(QtGui.QAction('300%', w, checkable=True))
menu.addAction(a)

a = ag.addAction(QtGui.QAction('400%', w, checkable=True))
menu.addAction(a)

w.menuBar().addMenu(menu)
w.show()
app.exec_()
"
How to draw a bitmap real quick in python using Tk only?,"def rgb2Hex(rgb_tuple):
    return '#%02x%02x%02x' % tuple(rgb_tuple)

num = 10000 #10,000 pixels in 100,100 image
colors = [[random.randint(0,255) for i in range(0,3)] for j in range(0,num)]
colors = [rgb2Hex(color) for color in colors]
im = Image.fromstring('RGB',(100,100),"""".join(colors))
tkpi = ImageTk.PhotoImage(im)
## add to a label or whatever...
label_image = Tkinter.Label(root, image=tkpi)
"
Common substring of length k,"def common_substr(a, b, k):
  substrs = set(a[i:i+k] for i in range(len(a)-k+1))
  for substr in (b[i:i+k] for i in range(len(b)-k+1)):
    if substr in substrs:
      return substr
"
How to subset factor from dataframe at pandas,"In [173]:

frame.query('state == ""Ohio"" and year ==""2001""')
Out[173]:
  pop state  year
1   2  Ohio  2001
"
Merging a list of dictionaries in python based on one key/value pair?,"li1=[{'shape': 'square', 'color': 'red', 'priority': 2},
{'shape': 'circle', 'color': 'blue', 'priority': 2},
{'shape': 'triangle', 'color': 'green', 'priority': 2}]

li2=[{'shape': 'square', 'color': 'green', 'priority': 3},
{'shape': 'circle', 'color': 'red', 'priority': 1}]

res={}
for di in sorted(li1+li2, key=lambda d: d['priority']):
    res[di['shape']]=di

print res.values()  
"
How to get an XPath from selenium webelement or from lxml?,"import urllib2
from lxml import etree

data = urllib2.urlopen(""https://en.wikipedia.org"")
tree = etree.parse(data)
element = tree.xpath('//div[@id=""p-logo""]/a')[0]
print tree.getpath(element)
"
python multiprocessing/threading cleanup,"#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
from multiprocessing import Process, Queue
from threading import Thread
from time import sleep

logger = logging.getLogger(""mepy-client"")

class SocketClientProtocol(object):

    def __init__(self, q_in, q_out, q_binary):
        self.q_in = q_in
        self.q_out = q_out
        self.q_binary = q_binary
        t = Thread(target=self._loop)
        t.start()
        t = Thread(target=self._loop_binary)
        t.start()

    def _loop(self):
        print(""start of loop 2"")
        for res in iter(self.q_in.get, None):
            self._handle_msg(res)
        print(""end of loop 2"")

    def _loop_binary(self):
        print(""start of loop 3"")
        for res in iter(self.q_binary.get, None):
            self._handle_binary(res)
        print(""end of loop 3"")

    def _handle_msg(self, msg):
        msg_type = msg[0]
        if msg_type == ""stop2"":
            self.q_in.put(None)
            self.q_binary.put(None)

    def _put_msg(self, msg):
        self.q_out.put(msg)

    def stop(self):
        print(""STOP RECEIVED"")
        self.q_in.put(None)
        self.q_binary.put(None)

    def _handle_binary(self, data):
        pass

    def handle_element(self):
        self._put_msg([""something""])

def run_twisted(q_in, q_out, q_binary):
    s = SocketClientProtocol(q_in, q_out, q_binary)
    try:
        while True:
            sleep(2)
            s.handle_element()
    except KeyboardInterrupt:
        s.stop()

class MediatorSender(object):

    def __init__(self):
        self.q_in = None
        self.q_out = None
        self.q_binary = None
        self.p = None
        self.running = False

    def start(self):
        if self.running:
            return
        self.running = True
        self.q_in = Queue()
        self.q_out = Queue()
        self.q_binary = Queue()
        print(""!!!!START"")
        self.p = Process(target=run_twisted, 
                         args=(self.q_in, self.q_out, self.q_binary))
        self.p.start()
        self.loop = Thread(target=self._loop)
        self.loop.start()

    def stop(self):
        print(""!!!!STOP"")
        if not self.running:
            return
        print(""STOP2"")
        self.running = False
        self.q_out.put(None)

    def _loop(self):
        print(""start of loop 1"")
        for res in iter(self.q_out.get, None):
            self._handle_msg(res)
        print(""end of loop 1"")

    def _handle_msg(self, msg):
        self._put_msg(msg)

    def _put_msg(self, msg):
        self.q_in.put(msg)

    def _put_binary(self, msg):
        self.q_binary.put(msg)

    def send_chunk(self, chunk):
        self._put_binary(chunk)

if __name__ == ""__main__"":
    ms = MediatorSender()
    try:
        ms.start()
        for i in range(100):
            ms.send_chunk(""some chunk of data"")
        # You actually have to join w/ a timeout in a loop on 
        # Python 2.7. If you just call join(), SIGINT won't be 
        # received by the main process, and the program will 
        # hang. This is a bug, and is fixed in Python 3.x.
        while True:
            ms.loop.join()  
    except KeyboardInterrupt:
        ms.stop()
"
attach functions to pandas,"import functools
df.sort_clean = functools.partial(sort_clean, df)
"
Python - regex lookup for multiple lines of HTML,"from urllib2 import urlopen
from bs4 import BeautifulSoup

url = 'http://profiles.doe.mass.edu/profiles/general.aspx?topNavId=1&orgcode=00350326'

soup = BeautifulSoup(urlopen(url))
for label in soup.select('div#whiteboxRight table td'):
    value = label.find_next_sibling('td')
    if not value:
        continue

    print label.get_text(strip=True), value.get_text(strip=True)
    print ""----""
"
List all combinations,"# Modified from itertools.combinations_with_replace example
# from the python doc.
import itertools
import pprint
def odometer(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    for indices in itertools.product(range(n), repeat=r):
        yield tuple(pool[i] for i in indices)

pprint.pprint (list(odometer([1,2,3], 4)))
"
Datetime conversions to timestamp,">>> import dateutil.parser
>>> dateutil.parser.parse(u'2015-06-24T12:00:00.000+0000')
datetime.datetime(2015, 6, 24, 12, 0, tzinfo=tzutc())
"
Execute Function Every X Seconds On Class Init," myBot(...).start()
"
How to merge 2 numpy arrays and concatenate their values?,"a*(10**(np.log10(b).astype(int)+1)) + b
"
Sum Each Column of CSV file,"import pandas as pd
pd.read_csv(r'my_path_to_file/my_file.csv', sep=';').sum().values
"
pandas HDFStore - how to reopen?,"df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"
Confused about list variable assigment,"lst = [""b"", ""c"", 3] # Take care not to use ""list"" as a variable name by the way.
print lst[0]        # I used lst in my example
"
is there a way find substring index through a regular expression in python?,"import re

def index(longstr, pat):
    rx = re.compile(r'(?P<pre>.*?)({0})'.format(pat))
    match = rx.match(longstr)
    return match and len(match.groupdict()['pre'])
"
Loading data from a csv file and display in list of tuples,"import csv
with open('statistics.csv', 'rb') as csvfile:
    reader = csv.reader(csvfile, delimiter=',')
    results = map( lambda x: (x[0],x[1:]), reader)
"
converting list to dictionary in Python using zip or dict function,"import csv
with open('c:\us-500.csv', 'rU') as f:
    reader = csv.DictReader(f)
    address_book = {}
    for row in reader:
        address_book[row['phone1']] = row
"
pythonic way to aggregate arrays (numpy or not),"import matplotlib.mlab

data=np.array(
    [('Aaron','Digger',1),
     ('Bill','Planter',2),
     ('Carl','Waterer',3),
     ('Darlene','Planter',3),
     ('Earl','Digger',7)],
    dtype=[('name', np.str_,8), ('job', np.str_,8), ('income', np.uint32)])

result=matplotlib.mlab.rec_groupby(data, ('job',), (('income',np.mean,'avg_income'),))
"
How to print list of list into one single list in python without using any for or while loop?,"from operator import add

reduce(add, myList[0])
"
How to detect non-number of the list?,"not all(str(s).strip('-').isdigit() for s in a)
"
Python3 - Change the type of specific list elements,"alist.sort(key=lambda x: (int(x[1]), int(x[2])))
"
Does NumPy have a Uniformity function?,"ui = 1 - 0.5*sum(abs(z_vals - np.average(z_vals)))/(len(z_vals)*np.average(z_vals))
"
Python: I want to decorate a MethodType attribute without changing the attribute type to FunctionType,"def accepts_method(decorator):

    @functools.wraps(decorator)
    def decowrapper(func):
        if hasattr(func, ""im_func""):
            return type(func)(decorator(func.im_func), func.im_self, func.im_class)
        else:
            return decorator(func)

    return decowrapper
"
Chopping A Line From A Text Document Into Different Strings,"with open('somefile') as fp:
    for line in fp:
        a, *b, c, d, e, f = line.strip().split('|')
        b = '|'.join(b)
        # do something
"
Force numpy array to physically match striding in memory,"temp2 = temp.copy()
"
Import a module in Python,"import package
x = package.ClassName()
"
Efficient way to iterate over sublists of a huge list in python,"def difference_np(array, subset_length):
    assert subset_length > 2, ""subset_length must be larger than 2""
    length = array.size
    total_diff = array.max()-array.min()

    current_min = array[:subset_length].min()
    current_max = array[:subset_length].max()
    max_diff = current_max - current_min
    max_diff_index = 0
    index = subset_length
    while index < length:
        i_new = index
        i_old = index-number
        index += 1     
        new = array[i_new]            
        old = array[i_old]

        # the idea here is to avoid calculating the
        #   min/max over the entire subset as much as possible,
        #   so we treat every edge case separately.
        if new < current_min:
            current_min = new
            if old == current_max:
                current_max = array[i_old+1:i_new-1].max()
        elif new > current_max:
            current_max = new
            if old == current_min:
                current_min = array[i_old+1:i_new-1].min()
        elif old == current_min:
            current_min = array[i_old+1:i_new].min()
        elif old == current_max:
            current_max = array[i_old+1:i_new].max()
        else:
            continue

        current_diff = current_max-current_min
        if current_diff > max_diff:
            max_diff = current_diff
            max_diff_index = i_old

        # shortcut-condition
        if max_diff == total_diff:
            print('shortcut at', (index-1)/(length-subset_length), '%' )
            break

    return max_diff, max_diff_index
"
List ordering in Python. Very simple,"output = sorted(input, key=lambda l: len(l.split(None, 1)[0]), reverse=True)
"
Removing Redundancies/Condensing Code,"if all(x % element for element in lst):
    ...
"
Regex matching specific HTML string with Python,">>> import re
>>> s = '<a class=""rarity-5 set-102 manual-data-link"" href=""/data/123421"" data-id=""20886"" data-type-id=""295636317"" >Data</a>'
>>> re.search(r'manual-data-link"" href=""(.*?)""', s).group(1)
'/data/123421'
"
List getting replaced,"In [21]: my_l = [1,2,3]

In [22]: ref_my_l = my_l

In [23]: ref_my_l
Out[23]: [1, 2, 3]

In [24]: my_l.append(4)

In [25]: my_l
Out[25]: [1, 2, 3, 4]

In [26]: ref_my_l
Out[26]: [1, 2, 3, 4]
"
Unpacking arguments from argparse,"In [994]: import argparse
In [995]: def foo(*args, **kwargs):
   .....:     print(args)
   .....:     print(kwargs)
   .....:     
In [996]: parser=argparse.ArgumentParser()
In [997]: parser.add_argument('-f','--foo')
Out[997]: _StoreAction(option_strings=['-f', '--foo'], dest='foo', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)
In [998]: args,extras = parser.parse_known_args(['-f','foobar','arg1','arg2'])
In [999]: args
Out[999]: Namespace(foo='foobar')
In [1000]: extras
Out[1000]: ['arg1', 'arg2']
In [1001]: foo(*extras, **vars(args))
('arg1', 'arg2')
{'foo': 'foobar'}
"
Structuring Plain Text to JSON,"def convert(d):
    return dict((key, convert(value)) for (key,value) in d.iteritems()) if isinstance(d, defaultdict) else d
"
Delete Extra Space from Values In List,"List = [s[1:] for s in List]
"
Will a for loop that calls a function finish before any of the functions are called?,"import time
for i in range(5):
    print('test '+str(i))
    for j in range(1,6):
        time.sleep(1)
        print(""waiting for ""+str(j) +"" sec"")
print(""Have any test funcs been called"")
"
Python class method decorator w/ self arguments?,"def check_authorization(attribute):
    def _check_authorization(f):
        def wrapper(self, *args):
            print getattr(self, attribute)
            return f(self, *args)
        return wrapper
    return _check_authorization
"
Extracting Unique String Combinations from List of List in Python,"from collections import Counter

combos = [['a', 'b', 'c'], ['c', 'b', 'a'], ['d', 'e', 'f'], ['c', 'a', 'b'], ['c', 'f', 'b']]
combos = Counter(tuple(sorted(item)) for item in combos)
print(combos)
"
Python list comprehension to join list of lists,"lists = [['hello'], ['world', 'foo', 'bar']]
combined = [item for sublist in lists for item in sublist]
"
Call python from shell and capture output,"var=$( python myscript.py)
"
Python removing delimiters from strings,">>> s = 'hey-you...are you ok?'
>>> re.split(""[""+""\\"".join(d)+""]"", s)
['hey', 'you', '', '', 'are you ok', '']
"
use a list of values to select rows from a pandas dataframe,"df[df['A'].isin([3, 6])]"
Writing row from structured numpy array with varying delimiter,"'\n'.join('%i %.2f   %s'%tuple(row) for row in x)
"
How to create a list with the characters of a string?,list('5+6')
Python PyQt - How to edit a variable in another function when function is run multiple times,"class Tab(QWidget):
    def __init__(self, parent=None):
        super(Tab, self).__init__(parent)
        self.editThisLine = QLineEdit()
        self.aButton = QPushButton(""Stuff"")
        self.aButton.clicked.connect(self.runThisWhenButtonClicked)
        ...

    def runThisWhenButtonClicked(self):
        print(self.editThisLine.text())
"
Converting a nested tuples into nested dictionaries,">>> {key: [{k: v} for sublist in value for k, v in sublist] for key, value in dic1.items()}
{'removed ': [{'apple': '5'}, {'makeup': '4'}, {'trash': '4'}, {'stain': '4'}], 'persuaded ': [{'teacher': '6'}, {'group': '5'}, {'man': '5'}, {'girl': '5'}]}
>>> from pprint import pprint
>>> pprint(_)
{'persuaded ': [{'teacher': '6'}, {'group': '5'}, {'man': '5'}, {'girl': '5'}],
 'removed ': [{'apple': '5'}, {'makeup': '4'}, {'trash': '4'}, {'stain': '4'}]}
"
List of objects: how to extract attributes from a particular region or slice?,"np.all(np.array([i.property for i in np.nditer(array[2::2,2::2])]) == property_state)
"
how to split the text using python?,">>> i1 = len('VCALogParser_output_')
>>> i2 = len ('.log')
>>> 
>>> '\n{}, {}\n'.format(s1[i1:-i2], s2[i1:-i2])
'\nARW, CZC\n'
"
Summing elements of string in Python,">>> sum(float(i) for i in s.split(','))
6.753
"
List of files (which might contain wildcards) as arguments of a Python script,"for fname in itertools.chain(*map(glob.iglob, sys.argv[1:])):
    print fname
"
Stem plot in matplotlib?,"#!/usr/bin/env python
from pylab import *

x = linspace(0.1, 2*pi, 10)
markerline, stemlines, baseline = stem(x, cos(x), '-.')
setp(markerline, 'markerfacecolor', 'b')
setp(baseline, 'color','r', 'linewidth', 2)

show()
"
"How can I ""map"" a dict to change only the values in Python","values = food_to_food_type.values()
dict( zip( values, [NUM_FOOD_TYPES]*len(values) ) )
"
Identify groups of continuous numbers in a list,"from operator import itemgetter
from itertools import groupby
data = [2, 3, 4, 5, 12, 13, 14, 15, 16, 17]
for k, g in groupby(enumerate(data), lambda (i,x):i-x):
    print map(itemgetter(1), g)
"
Transpose block of text,"s = """"""1111110000111111
       1110110110110111
       1101010110101011
       1011100110011101
       0001111111111011
       1000110111110111
       0100010011110000
       0110000001111110
       0111000000110110
       0000100010010100
       1110110011000111
       1101111111100011
       1011100110000011
       1101010111100001
       1110110110111101
       1111110000111111""""""

>>> [''.join(i) for i in zip(*s.split())]
['1111010000111111',
 '1110001110110111',
 '1101000110101011',
 '1011100010011101',
 '1101110001111011',
 '1110111000110111',
 '0000100000010000',
 '0111110000011110',
 '0111111001111110',
 '0000111100110100',
 '1110111110010111',
 '1101111111000011',
 '1011100100000011',
 '1101010111100011',
 '1110110110111001',
 '1111110000111111']
"
How do I serialize a tree class object structure with python json?,"    @staticmethod
    def from_dict(dict_):
        """""" Recursively (re)construct TreeNode-based tree from dictionary. """"""
        root = TreeNode(dict_['name'], dict_['children'])
        root.children = list(map(TreeNode.from_dict, root.children))
        return root

if __name__ == '__main__':
    import json

    tree = TreeNode('Parent')
    tree.children.append(TreeNode('Child 1'))
    child2 = TreeNode('Child 2')
    tree.children.append(child2)
    child2.children.append(TreeNode('Grand Kid'))
    child2.children[0].children.append(TreeNode('Great Grand Kid'))

    json_str = json.dumps(tree, sort_keys=True, indent=2)
    print(json_str)

    print()
    pyobj = TreeNode.from_dict(json.loads(json_str))  # reconstitute
    print('pyobj class: {}'.format(pyobj.__class__.__name__))  # -> TreeNode
    print(json.dumps(pyobj, sort_keys=True, indent=2))
"
Can I sort a list of objects by 2 keys?,"import operator
sorted(DISKIMAGES, key=operator.attrgetter('epoch', 'size'), reverse=True)
"
"Python - cannot ""find"" files with ""getenv(""APPDATA"")""?","filename = os.path.join(getenv(""APPDATA""), ""File"")
if os.path.isfile(filename):
    print(""Found file!"")
"
Preserve empty lines with NLTK's Punkt Tokenizer,"The whole script
import nltk.tokenize.punkt as pkt

class CustomLanguageVars(pkt.PunktLanguageVars):

    _period_context_fmt = r""""""
        \S*                          # some word material
        %(SentEndChars)s             # a potential sentence ending
        \s*                       #  <-- THIS is what I changed
        (?=(?P<after_tok>
            %(NonWord)s              # either other punctuation
            |
            (?P<next_tok>\S+)     #  <-- Normally you would have \s+ here
        ))""""""

custom_tknzr = pkt.PunktSentenceTokenizer(lang_vars=CustomLanguageVars())

s = ""That was a very loud beep.\n\n I don't even know\n if this is working. Mark?\n\n Mark are you there?\n\n\n""

print(custom_tknzr.tokenize(s))
"
Making a class method recognize which class context it's running in,"class B(A):
    def __init__(self):
        self.__super = super(B)

    def rec(self):
        return self.__super.rec() + 1
"
Using glob twice in a Python script,"for f_a in glob.glob(file_directory + ""*_data_a.dat""):
    process_file(f_a, 'a')
    for f_b in glob.glob(file_directory + f_a[:-11] + ""_data_b.dat""):
        # we only ever expect to find one item to loop over here though
        process_file(f_b, 'b') 
"
recursive search boolean return function,"def search (list, key):
    if list is empty:
        return false
    if key == first item in list:
        return true
    return search (list with first element removed, key)
"
Python Float to Ord values,">>> import struct
>>> struct.pack(""!f"",3.14159)
b'@I\x0f\xd0'
"
Update dataframe row from a series,"df.loc['JSE', 'OML'] = df.loc['JSE', 'OML'].apply(np.sqrt)
"
PYTHON - reading single row from a file,">>> strs = ""1.2   1.6   0.4""
>>> strs.split()
['1.2', '1.6', '0.4']
#use slicing as you need only first two items
>>> [float(x) for x in strs.split()[:2]] 
[1.2, 1.6]
"
Python reads data from webpages,"import json
from http import client

# Connect to the client
conn = client.HTTPConnection(""geoip.nekudo.com"")

# Make the request and extract the data
conn.request(""GET"",""/api/172.217.3.110/full"")
json_data = conn.getresponse().read().decode()

# Convert the JSON to a Python object
data = json.loads(json_data)
"
Python - Sort Log Messages By Level before Printing,"levels = {'DEBUG':0,'INFO':1,'WARNING':2,'ERROR':3}
LL.sort(key = lambda x: levels[x.split(':')[0]])
"
Get python getaddresses() to decode encoded-word encoding,"def decode_rfc2047_header(h):
    return ' '.join(s.decode(charset or 'ascii')
                   for s, charset in email.header.decode_header(h))
"
Python using a regex to find start position of a substring,">>> strs = ""qui8ecc),0*21qxxcd4))""
>>> re.search(r'.*?,0\*[0-9A-F]{2}', strs).group()
'qui8ecc),0*21'

>>> m = r.search(""kdjrnnj,0*B3;,w0l44"")
>>> if m : print m.group()
kdjrnnj,0*B3
"
How to optimize the combination of 2 lists of tuples and remove their duplicates?,"alist = [(0.7897897,'this is a foo bar sentence'),
(0.653234, 'this is a foo bar sentence'),
(0.353234, 'this is a foo bar sentence'),
(0.325345, 'this is not really a foo bar'),
(0.323234, 'this is a foo bar sentence'),]

blist = [(0.64637,'this is a foo bar sentence'),
(0.534234, 'i am going to foo bar this sentence'),
(0.453234, 'this is a foo bar sentence'),
(0.323445, 'this is not really a foo bar')]

bdict = {k:v for v,k in reversed(blist)}
clist = []
cset = set()
for v,k in alist:
   if k not in cset:
      b = bdict.get(k, None)
      if b is not None:
        clist.append((v * b, k))
        cset.add(k)
print(clist)
"
Number of non-missing values in array? Len(x) excluding missing values?,"In [18]: data = randn(1000, 3)

In [19]: data
Out[19]:
array([[ 0.1035,  0.9239,  0.3902],
       [ 0.2022, -0.1755, -0.4633],
       [ 0.0595, -1.3779, -1.1187],
       ...,
       [ 1.3931,  0.4087,  2.348 ],
       [ 1.2746, -0.6431,  0.0707],
       [-1.1062,  1.3949,  0.3065]])

In [20]: data[rand(len(data)) > 0.5] = nan

In [21]: data
Out[21]:
array([[ 0.1035,  0.9239,  0.3902],
       [ 0.2022, -0.1755, -0.4633],
       [    nan,     nan,     nan],
       ...,
       [ 1.3931,  0.4087,  2.348 ],
       [ 1.2746, -0.6431,  0.0707],
       [-1.1062,  1.3949,  0.3065]])

In [22]: df = DataFrame(data, columns=list('abc'))

In [23]: df.head()
Out[23]:
        a       b       c
0  0.1035  0.9239  0.3902
1  0.2022 -0.1755 -0.4633
2     NaN     NaN     NaN
3     NaN     NaN     NaN
4     NaN     NaN     NaN

[5 rows x 3 columns]

In [24]: df.count()
Out[24]:
a    498
b    498
c    498
dtype: int64

In [26]: df.notnull().sum()
Out[26]:
a    498
b    498
c    498
dtype: int64
"
How to grab the output from python subprocess,"import os
# this will remove the dir path in the filename
# so that `../../../etc/passwd` will become `passwd`
filename = os.path.basename(filename)
"
How to distinguish a PDF file from other files?,"def isPDFfile(fname):
    if not os.path.isfile(fname):
        return False
    name, ext = os.path.splitext(fname)
    return ext.lower() == '.pdf'
"
tkinter - Going Back and Forth Between Frames Using Buttons,"def changePage(self,change):
    pages = [self.pageOne,self.pageTwo,self.pageThree]
    new_position = self.position + change
    if (0 <= new_postion < len(pages)):
        pages[new_position].tkraise()
        self.position = new_position
    else:
        show_frame(BlankPage)

    if new_position+1 >= len(pages):
        self.nextButton.config(text=""End"") #, state=tk.DISABLED)
    else:
        self.nextButton.config(text=""Next"") #, state=tk.NORMAL)

    if new_position-1 < 0:
        self.backButton.config(text=""First"") #, state=tk.DISABLED)
    else:
        self.backButton.config(text=""Back"") #, state=tk.NORMAL)
"
Function to slice indices in Numpy,"def index_slice(arr1, arr2):
    lens = np.abs(arr1 - arr2)
    if not all((lens == max(lens)) | (lens == 0)):
        raise ValueError('The number of indices in some dimensions were inconsistent. Array lengths were %r' % lens)

    max_len = lens.max()
    result = np.empty((len(lens), max_len), dtype=np.int32)

    for dim, (a, b) in enumerate(zip(arr1, arr2)):
        if a == b:
            result[dim, :] = a
        elif a > b:
            result[dim, :] = np.arange(a, b, -1)
        else:
            result[dim, :] = np.arange(a, b)

    return result   
"
Split list in and then join elements in sublists,">>> ["" "".join(g) for k, g in groupby(my_list, ""\n"".__ne__) if k]
['A > 1 B > 2', 'C > 3 D > 4', 'E > 5 F > 6']
"
Python: Extracting bits from a byte,"LEADING_BIT_MASK =  0b10000000
VALUE_MASK = 0b01111111

bytes = [0b10101010, 0b01010101, 0b0000000, 0b10000000]

for byte in bytes:
    value = byte & VALUE_MASK
    has_leading_bit = byte & LEADING_BIT_MASK
    if value == 0:
        print ""EOL""
    elif has_leading_bit:
        print ""leading one"", value
    elif not has_leading_bit:
        print ""leading zero"", value
"
"probably elementary but printing the actual name of the pandas variable, not the dataframe itself","In [15]:
first = pd.Series({1:2, 2:4})
second = pd.Series({1:5, 2:7})
d={}
d['first']=first
d['second']=second
​
for k,v in d.items():
    print(k, 'has a sum of', v.sum())
"
python setattr for dynamic method creator with decorator,"for method_name, method_value in list1:
    setattr(Klass, method_name, lambda self, val=method_value:val))
"
How to replace NaNs by preceding values in pandas DataFrame?,"df.fillna(method='ffill', inplace=True)
"
Criteria for combining two list items,"[e for e in text if e.endswith((""."","".com"","".net"","".org"","".edu"","".gov""))]
"
Class defintion and methods,"def func_of_func(func):
  return fund()

def main():
  a = A()
  func_of_func(a.some_func) # no parentheses after some_func
"
"Python Script returns unintended ""None"" after execution of a function","def letter_grade(score):
    if 90 <= score <= 100:
        return ""A""
    elif 80 <= score <= 89:
        return ""B""
    elif 70 <= score <= 79:
        return  ""C""
    elif 60 <= score <= 69:
        return ""D""
    elif score < 60:
        return ""F""
    else:
        #This is returned if all other conditions aren't satisfied
        return ""Invalid Marks""
"
How to split line at non-printing ascii character in Python,">>> import re
>>> re.split('\W+', 'Words, words, words.')
['Words', 'words', 'words', '']
"
Matplotlib: want different plot for each line,"for sublist in list:
    y = sublist
    fig = plt.figure()
    plt.plot(x,y)
    plt.title(names[g])
    g = g + 1
    plt.savefig(genes[g-1])
    plt.close(fig)
"
merging two sorted linked lists into one linked list in python,"def merge_lists(head1, head2):
    if head1 is None:
        return head2
    if head2 is None:
        return head1

    # create dummy node to avoid additional checks in loop
    s = t = node() 
    while not (head1 is None or head2 is None):
        if head1.value < head2.value:
            # remember current low-node
            c = head1
            # follow ->next
            head1 = head1.next
        else:
            # remember current low-node
            c = head2
            # follow ->next
            head2 = head2.next

        # only mutate the node AFTER we have followed ->next
        t.next = c          
        # and make sure we also advance the temp
        t = t.next

    t.next = head1 or head2

    # return tail of dummy node
    return s.next
"
How validate a cell in QTableWidget?,"item = QTableWidgetItem()
item.setData(QtCore.Qt.EditRole, 5)
"
Merge 2 lists at every x position,"from itertools import cycle, islice

def merge(a, b, pos):
    ""merge('ABCDEF', [1,2,3], 3) --> A B 1 C D 2 E F 3""
    iterables = [iter(a)]*(pos-1) + [iter(b)]
    pending = len(iterables)
    nexts = cycle(iter(it).next for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))
"
How can I split the strings and get only the first part of it?,">>> from collections import OrderedDict
>>> l = ['1:a', '2:b' '1:c', '3:d', '4:d']
>>> list(OrderedDict.fromkeys(item.split(':')[0] for item in l).keys())
['1', '2', '3', '4']
"
Ordering a list according to hierarchy,">>> a = [""Asia/Pacific"", ""North America"", ""India,Asia/Pacific"", ""China, Asia/Pacific"", ""New Delhi, India, Asia/Pacific"", ""Bangalore, India,Asia/Pacific"",  ""Shangai, China, Asia/Pacific"", ""US, North America"", ""New York, US, North America""]
>>> sorted(a, key=lambda p: map(str.strip, p.split(',')[::-1]))
['Asia/Pacific', 'China, Asia/Pacific', 'Shangai, China, Asia/Pacific', 'India,Asia/Pacific', 'Bangalore, India,Asia/Pacific', 'New Delhi, India, Asia/Pacific', 'North America', 'US, North America', 'New York, US, North America']
"
Force LaTeX font to match default matplotlib font,"fig.suptitle(r'H$_{two}$ Emission from GJ832')
"
"Python - sorting a tuple, characters over numbers",">>> from datetime import datetime, time, timedelta
>>> def value_to_time(val):
...     if val == 'now':
...         return datetime.now().time()
...     if val.endswith('min'):
...         return (datetime.now() + timedelta(minutes=int(val[:-3]))).time()
...     hours, minutes = map(int, val.split(':'))
...     return time(hours, minutes)
... 
>>> lst = ['3min', '9min', '16:21', '16:36', '16:51', 'now']
>>> sorted(lst, key=value_to_time)
['now', '3min', '9min', '16:21', '16:36', '16:51']
"
How do I parse a multiline string into a python dict?,"a_dict  = {v[0].strip():float(v[1].strip()) for v in map(lambda v: v.split('|'), a_string.splitlines())}
"
Python liburl grab site content with language,"import requests
s = requests.Session()
#Sets language to english and saves cookie in Session s
s.get('http://www.gyte.edu.tr/?cl=2')
#Page in english
r = s.get(""http://www.gyte.edu.tr/kategori/54/9/laboratories.aspx"")
"
how to sort a list of tuples with list[i][1] as key from biggest to smallest,"sorted(alpha_items, key=lambda x: -x[1])
"
Parametrize set of tests using PyTest,"import pytest


@pytest.mark.parametrize('arg, result', [
 ('arg1', 'result1'),
 ('arg2', 'result2'),
 ('arg3', 'result3'),
 ('argN', 'resultN'),
])
def test_cmd0(arg, result):
    out = subprocess.check_output(['cmd', arg])
    assert out.rstrip() == out
"
Fastest way to check does string contain any word from list,">>> lista = [""a"",""b"",""c""]
>>> set(message) & set(lista)
set([])
>>> lista = [""a"",""b"",""e""]
>>> set(message) & set(lista)
set(['e'])
>>> set(['test','sentence'])&set(['this','is','my','sentence'])
set(['sentence'])
"
efficient way to count the element in a dictionary in Python using a loop,"from __future__ import print_function
from collections import Counter
from collections import defaultdict
import random

mylist=[1,1,1,1,1,1,2,3,2,2,2,2,3,3,4,5,5,5,5]*10

def s1(mylist):
    return {k:mylist.count(k) for k in set(mylist)}

def s2(mlist):
    return Counter(mylist)

def s3(mylist):
    mydict=dict()
    for index in mylist:
        mydict[index] = mydict.setdefault(index, 0) + 1
    return mydict   

def s4(mylist):
    mydict={}.fromkeys(mylist,0)
    for k in mydict:
        mydict[k]=mylist.count(k)    
    return mydict    

def s5(mylist):
    mydict={}
    for k in mylist:
        mydict[k]=mydict.get(k,0)+1
    return mydict     

def s6(mylist):
    mydict=defaultdict(int)
    for i in mylist:
        mydict[i] += 1
    return mydict       

def s7(mylist):
    mydict={}.fromkeys(mylist,0)
    for e in mylist:
        mydict[e]+=1    
    return mydict    

if __name__ == '__main__':   
    import timeit 
    n=1000000
    print(timeit.timeit(""s1(mylist)"", setup=""from __main__ import s1, mylist"",number=n))
    print(timeit.timeit(""s2(mylist)"", setup=""from __main__ import s2, mylist, Counter"",number=n))
    print(timeit.timeit(""s3(mylist)"", setup=""from __main__ import s3, mylist"",number=n))
    print(timeit.timeit(""s4(mylist)"", setup=""from __main__ import s4, mylist"",number=n))
    print(timeit.timeit(""s5(mylist)"", setup=""from __main__ import s5, mylist"",number=n))
    print(timeit.timeit(""s6(mylist)"", setup=""from __main__ import s6, mylist, defaultdict"",number=n))
    print(timeit.timeit(""s7(mylist)"", setup=""from __main__ import s7, mylist"",number=n))
"
Formatting with the map() function in Python,"machList = [1,5,3]

def machToFPS(machList):
    FPS = map(lambda x: x*1116.4370079,machList) 
    for i,x in enumerate(FPS):
        print('{} mach(s) is equivalent to {} feet per second.'.format(machList[i], x))

machToFPS(machList)
"
"Split string in Python into chunks with constant length, but right-aligned",">>> re.split(r""(...)(?=(?:\d\d\d)+$)"",""12345678"")
['12', '345', '678']

>>> re.split(r""(...)(?=(?:\d\d\d)+$)"",""123"")
['123']
"
Sending multiple values for one name urllib2,"forms = ((""_ref_ck"", ref),
         (""type"", ""create""),
         (""selected_items[]"", sel_itms[0]),
         (""selected_items[]"", sel_itms[1]),
         # ...
         )
data = urllib.urlencode(forms)
"
How to sort a dataFrame in python pandas by two or more columns?,"df1.sort(['a', 'b'], ascending=[True, False], inplace=True)
"
`.split()` how to save space more than one?,"import random
import sys
color = [color for color in range(91, 97)]
with open(sys.argv[1], 'r') as f:
    for i in f:
        for w in i.rstrip().split(' '):
            if w.strip():
                print('\033[{0}m{1}\033[{0};m'
                      .format(random.choice(color), w), end='')
            print(' ', end='')
        print()
"
Need Assistance in Python Thread programming,"import threading
import subprocess
import time

class RunMonitor(threading.Thread): 
    def __init__(self, quit_event):
        threading.Thread.__init__(self)
        self.quit_event = quit_event
    def run(self):     
        print 'Invoking the command prompt .....\n'   
        subprocess.call([""start"", ""/WAIT"", ""/DC:\\python27\\sample"", ""xxx12.bat""], shell=True)                
        self.quit_event.set()

class Something:
    def runscript(self):     
        print 'Starting the thread...'  

        quit_event = threading.Event()
        run_monitor_object = RunMonitor(quit_event).start()

        while True:         
            if not quit_event.is_set():
                 print 'The thread is still alive....'         
            else:
                 print 'The Thread is not alive anymore'             
                 break 
            time.sleep(1)

runme = Something()
runme.runscript()
"
Traversing ZIP Files,"file = [file for file in zipfilelist.namelist() if file.split('/')[-1] == target]
if file:
    return file
"
how in python to split a string with unknown number of spaces as separator?,">>> ' 1234    Q-24 2010-11-29         563   abc  a6G47er15'.split()
['1234', 'Q-24', '2010-11-29', '563', 'abc', 'a6G47er15']
"
Import .py files with punctuation before extension,"import imp
my_module = imp.load_source('my_module', 'strange.name-1.py')
"
"How to plot real-time graph, with both axis dependent on time?","# -*- coding: utf-8 -*-

from math import *
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import animation


def Plongeon():
    h = float(input(""height = ""))
    g = 9.81

    #calculate air time, Tc
    Tc = sqrt(2 * h / g)

    # First set up the figure, the axis, and the plot element we want to animate
    fig = plt.figure()
    ax = plt.axes(xlim=(0, 2), ylim=(-2, h+1))  #ymax : initial height+1
    line, = ax.plot([], [], ' o', lw=2)

    step = 0.01  # animation step
    xs = [1]  # the vertical position is fixed on x-axis
    ys = [h]


    # animation function.  This is called sequentially
    def animate(y):
        ys[-1] = y
        line.set_data(xs, ys)
        return line,

    def get_y():
        t = 0
        while t <= Tc:
            y = -0.5 * g * t**2 + h  # the equation of diver's displacement on y axis
            yield y
            t += step

    # call the animator.  blit=True means only re-draw the parts that have changed.
    anim = animation.FuncAnimation(fig, animate, frames=get_y, interval=100)

    plt.show()
Plongeon()
"
python run CMD command with options,"import os

appName = ""ap01""
opts =[
    ""-server"",
    ""-filename=c:/test.VS"",
    ""-display=1""
]

opts = ' '.join(opts)
os.system(r'start """" ""C:\bin\{:}"" {:}'.format(appName, opts) )
"
How convert datetime-local to datetime in Python?,"date_in = u'2015-01-02T00:00' # replace this string with whatever method or function collects your data
date_processing = date_in.replace('T', '-').replace(':', '-').split('-')
date_processing = [int(v) for v in date_processing]
date_out = datetime.datetime(*date_processing)

>>> date_out
... datetime.datetime(2015, 1, 2, 0, 0)
>>> str(date_out)
... '2015-01-02 00:00:00'
"
how to get the index of numpy.random.choice? - python,"random.choice(list(enumerate(a)))
=> (1, 4) # just an example, index is 1 and element is 4
"
How do I convert a string of hexadecimal values to a list of integers?,"struct.unpack('11B', s)"
Permute a tuple by a list of indices,"In [4]: import numpy as np

In [5]: my_array = np.array([10, 20, 30])

In [6]: new_positions = [2, 0, 1]  # or new_positions = np.array([2, 0, 1])

In [7]: my_shuffled_array = my_array[new_positions]

In [8]: my_shuffled_array
Out[8]: array([30, 10, 20])
"
Caesar Cipher validation,"def get_mode():
    while True:
        mode = input('Do you wish to encrypt(e) or decrypt(d) a message: ').lower()
        if mode.lower() in {""e"",""d""}:
            return mode
        print('Enter either ""encrypt"" or ""e"" or ""decrypt"" or ""d"".')

def get_message():
    while True:
        message = input('Enter your message: ')
        if all(ch.isalpha() or ch.isspace() for ch in message):
            return message
        print(""Invalid input, text must contain alphabetic characters only."")

def get_key():
    return 5

from string import ascii_letters

d = {k: i for i, k in enumerate(ascii_letters)}

enc = ascii_letters

def get_translated_message(mode, message, key):
    if mode == ""e"":
        return """".join([enc[(d[ch] + key) % 52] if not ch.isspace() else ch for ch in message])
    return """".join([enc[(d[ch] - key) % 52] if not ch.isspace() else ch for ch in message])
"
"Selenium Python- If cannot find element, close everything and restart","from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException

while True:
    driver = webdriver.Firefox()
    driver.get('http://example.com')

    try:
        element = driver.find_element_by_id(""user_first_name"")
    except NoSuchElementException:
        driver.close()
        continue
    else:
        break

# do smth with the element
"
Page not found (404) Error in Django,"urlpatterns=patterns('',url(r'^$',views.index,name='index'))
urlpatterns=patterns('',url(r'^about/$',views.about,name='about'))
"
shorten the weekdays from texts,"import calendar

for day,abbr in zip(calendar.day_name,calendar.day_abbr):
    paragraph = paragraph.replace(day,abbr)
"
List all the modules that are part of a python package?,"import pkgutil

# this is the package we are inspecting -- for example 'email' from stdlib
import email

package = email
prefix = package.__name__ + "".""
for importer, modname, ispkg in pkgutil.iter_modules(package.__path__, prefix):
    print ""Found submodule %s (is a package: %s)"" % (modname, ispkg)
    module = __import__(modname, fromlist=""dummy"")
    print ""Imported"", module
"
how to decrement and increment loop range 'i' variable in the execution of loop in python,"final_result = 0
a = '3 4  4 5 6'
i = 0
while i < len(a):
    print('iteration')
    print('i is = ')
    print(i)
    if a[i] is ' ' and a[i + 1] is not ' ':
        if i - 1 is 0:
            final_result = int(a[i - 1]) + int(a[i + 1])
            i += 2  # here goes the increment
            print('1a- m here')
            print(final_result)
            print('i is = ')
            print(i)
        else:
            final_result = final_result + int(a[i + 1])
            i += 2  # here goes the increment
            print('1b- m here')
            print(final_result)
    elif a[i] is ' ' and a[i + 1] is ' ':
        if i - 1 is 0:
            final_result = int(a[i - 1]) - int(a[i + 1])
            i += 3  # here goes the increment
            print('2a- m here')
            print(final_result)
        else:
            final_result = final_result - int(a[i + 2])
            i += 3  # here goes the increment
            print('2b- m here')
            print(final_result)
            print('i is = ')
            print(i)
    else:
        i += 1
print(final_result)
"
String Formatting in Python 3,"""""""({} goals, ${})"""""".format(self.goals, self.penalties)"
How to create Family tree?,"def flatten(parent):
    L = [parent]
    for child in parent.children:
        L += flatten(child)
    return L
flattened_tree = flatten(t)
print ""All members: "", [person.name for person in flattened_tree]
print ""Number of members:"", len(flattened_tree)
print ""Number of levels:"", max([person.level for person in flattened_tree]) + 1
cooper = flattened_tree[6]
cooper_fl = flatten(cooper)
print ""Members below Cooper: "", [person.name for person in cooper_fl]
print ""Number:"", len(cooper_fl)
levels = [person.level for person in cooper_fl]
print ""Number of levels:"", max(levels) - min(levels) + 1
"
"Separate lists of format M=[(a,x), (b,y)] into M1=[a,b] and M2=[x,y]","M1, M2 = (list(i) for i in zip(*M))
"
Python CSV DictReader ignore columns?,"def dict_filter(it, *keys):
    for d in it:
        yield dict((k, d[k]) for k in keys)
"
python and XML: how to place two documents into a single document,"from xml.dom import minidom, getDOMImplementation

XML1 = """"""
<sub1>
 <foo>BAR1</foo>
</sub1>""""""

XML2 = """"""
<sub2>
 <foo>BAR2</foo>
</sub2>""""""

impl = getDOMImplementation()
doc = impl.createDocument(None, ""root"", None)

for s in [XML1, XML2]:
    elem = minidom.parseString(s).firstChild
    doc.firstChild.appendChild(elem)

print doc.toxml()
"
Is there a simple way to increment a datetime object one month in Python?,"use_date = use_date+relativedelta(months=+1)

use_date = use_date+relativedelta(years=+1)
"
Remove all the words from a list of lists which occur in a given set,">>> L=[['a','b'],['foo','bar'],['spam','eggs'],['b','c'],['spam','bar']]
>>> R={'a','foo'}
>>> [[y for y in x if y not in R] for x in L]
[['b'], ['bar'], ['spam', 'eggs'], ['b', 'c'], ['spam', 'bar']]
"
How to get first letter commands using python's cmd?,"    def default(self, line):
        command, arg, line = self.parseline(line)
        func = [getattr(self, n) for n in self.get_names()
            if n.startswith('do_' + command)]
        if len(func) == 1:
            return func[0](arg)
        print(""I do not understand that command. Type 'help' for a list of commands"")
"
How to return a list with brackets?,"def inverse(mdg):
    """"""This function reversed string without quotemark of reversed list of splitted input by ','
    """"""
    return "","".join(reversed(mdg.split(','))).join([""["", ""]""])
"
Removing text from field in Mongodb with Python,"import csv

s='''Device,Serial Number,Realm,Vendor,Model,OS Image
ABBNWX0100,SMG3453ESDN,BlAH BLAH,Cisco,WS-C6509-E,""IOS 12.2(33)SXI9, s72033_rp-ADVENTERPRISEK9_WAN-M""
ABBNWX0101,SDG127343S0,BLAH BLAH,Cisco,WS-C4506-E,""IOS 12.2(53)SG8, cat4500-IPBASEK9-M""
ABBNWX0102,TREFDSFY1KK,BLAH BLAH,Cisco,WS-C3560V2-48PS-S,""IOS 12.2(55)SE5, C3560-IPBASEK9-M""'''

print(""\n"".join([','.join(row[:5])+"",""+str(row[5].split("","")[0]) for row in csv.reader(s.split(""\n""))]))
"
how to sum over certain row of a data frame in Python,"print(df)
#        Tier  Oct  Nov  Dec
# 0  up to 2M    4    5   10
# 1        5M    3    2    7
# 2       10M    6    0    2
# 3       15M    1    3    5

# select the last two rows
print(df[2:4])
#   Tier  Oct  Nov  Dec
# 2  10M    6    0    2
# 3  15M    1    3    5

# sum over them
print(df[2:4].sum())
# Tier    10M15M
# Oct          7
# Nov          3
# Dec          7
# dtype: object
"
Matplotlib subplot y-axis scale overlaps with plot above,"# your original code minus data and imports
fig = plt.figure()
gs1 = gridspec.GridSpec(3, 3)
gs1.update(left=0.1, right=0.9, bottom=0.5, hspace=0.0)
ax0a = plt.subplot(gs1[0, :])
ax0b = plt.subplot(gs1[1, :])
ax0c = plt.subplot(gs1[2, :])
ax0a.set_xticklabels([])
ax0b.set_xticklabels([]) 
ax0a.plot(x,y)
nbins = len(ax0a.get_xticklabels())
ax0a.yaxis.set_major_locator(MaxNLocator(nbins=nbins, prune='upper'))
ax0b.plot(x,y)
ax0b.yaxis.set_major_locator(MaxNLocator(nbins=nbins, prune='upper'))
ax0c.plot(x,y)
ax0c.yaxis.set_major_locator(MaxNLocator(nbins=nbins, prune='upper'))

# play around with location and font of offset text here
ax0a.get_yaxis().get_offset_text().set_x(-0.075)
ax0a.get_yaxis().get_offset_text().set_size(10)
ax0b.get_yaxis().get_offset_text().set_x(-0.075)
ax0b.get_yaxis().get_offset_text().set_size(10)
ax0c.get_yaxis().get_offset_text().set_x(-0.075)
ax0c.get_yaxis().get_offset_text().set_size(10)
plt.show()
"
How to decide the language from cookies/headers/session in webapp2?,"import webapp2
from webapp2_extras import i18n

AVAILABLE_LOCALES = ['en_GB', 'es_ES']

class BaseHandler(webapp2.RequestHandler):
    def __init__(self, request, response):
        """""" Override the initialiser in order to set the language.
        """"""
        self.initialize(request, response)

        # first, try and set locale from cookie
        locale = request.cookies.get('locale')
        if locale in AVAILABLE_LOCALES:
            i18n.get_i18n().set_locale(locale)
        else:
            # if that failed, try and set locale from accept language header
            header = request.headers.get('Accept-Language', '')  # e.g. en-gb,en;q=0.8,es-es;q=0.5,eu;q=0.3
            locales = [locale.split(';')[0] for locale in header.split(',')]
            for locale in locales:
                if locale in AVAILABLE_LOCALES:
                    i18n.get_i18n().set_locale(locale)
                    break
            else:
                # if still no locale set, use the first available one
                i18n.get_i18n().set_locale(AVAILABLE_LOCALES[0])
"
Python file names as dictionary keys,"import os

class FileStats(object):
    def addScore(self, score):
        print score

score = 10
file_stats = {}
for root, directories, files in os.walk (""/tmp"", followlinks=False):
    for filename in files:
        filePath = os.path.join(root,filename)
        if not filePath in file_stats:
            file_stats[filePath] = FileStats()
            file_stats[filePath].addScore(score)
"
Accessing dictionary key values within the same dictionary,">>> def multiply(d):
    values = d.values()
    result = 1
    for v in d.values():
        result *= v
    return result

>>> multiply(my_dict)
240 
#shorter version, as @hcwhsa suggested:
>>> import operator
>>> reduce(operator.mul, my_dict.values())
240
"
learnpython.org modules exercise,"import re

print sorted([element for element in dir(re) if 'find' in element])
"
Improving efficiency in iterating over list sets in python,"item_maxes = {}
for item in mylist:
    max_value = item_maxes.setdefault(item[0], None)
    if max_value is None or item[1] > max_value:
        item_maxes[item[0]] = item[1]
"
How to check whether elements appears in the list only once in python?,len(set(a)) == len(a)
Matpotlib Xtick Overlap,"import numpy as np
from matplotlib import pyplot as plt

x = np.arange(-10, 361, 10, dtype = int)
y = np.sin(np.deg2rad(2*x))

fig, ax = plt.subplots(1, 1)
ax.plot(x, y)

ax.set_xticks(x, minor=True)        # set minor ticks for each x value
ax.grid(which='both', axis='both')  # show grid lines

plt.show()
"
A simple list simulation in python,"lists = ['A', 'B', 'C', 'D']
nos = [4, 4, 1, 1]

a = 0

for idx, ln in enumerate(zip(lists,nos)):
    l, n = ln[0], ln[1]       
    in_nos = range(1, n+1)    
    for indx, in_no in enumerate(in_nos):  
        out_no = a+indx+1
        print out_no   ##The result should be HERE
    a += n
"
order of parameters of function call of python,"def foo(**kwargs):
    print kwargs

params = {'arg1':1, 'arg2':2}

foo(**params)         # Version 1
foo(arg1=3,arg2=4)    # Version 2
"
binning data in python with scipy/numpy,"import numpy
data = numpy.random.random(100)
bins = numpy.linspace(0, 1, 10)
digitized = numpy.digitize(data, bins)
bin_means = [data[digitized == i].mean() for i in range(1, len(bins))]
"
Get values from onclick attribute using python bs4,"properties = soup.findAll('a', title=re.compile('Bedroom'))
for eachproperty in properties:
    print re.findall(""'([a-zA-Z0-9,\s]*)'"", eachproperty['onclick'])
"
"Convert fixed-width, non-delimited float strings to comma separated values",">>> s = '0.621464022829E+00-.143866495639E-020.266573765475E-02-.582189744480E-07'
>>> [float(s[i:i+18]) for i in range(0, len(s), 18)]
[0.621464022829, -0.00143866495639, 0.00266573765475, -5.8218974448e-08]
"
Vectorize a 2-dimensional function in python,"In [451]: [f(*par) for par in  zip(a, b)]
Out[451]: [1, 3, 5, 7]
"
Generating all unique pair permutations,"def round_robin_odd(d, n):
    for i in range(n):
        h = [[d[j], d[-j-1]] for j in range(n/2)]
        h[-1].append(d[n/2])
        yield h
        d.rotate()
"
Efficient way of creating a permutated 2D array with a range of integers,"In [3]: %%timeit
   ...: X,Y = np.meshgrid(np.arange(0,100), np.arange(0,100))
   ...: result = np.vstack((Y.ravel(), X.ravel())).T
   ...: 
10000 loops, best of 3: 109 µs per loop

In [4]: %%timeit
   ...: N = 100
   ...: result = np.array([[x, y] for x in range(N) for y in range(N)])
   ...: 
100 loops, best of 3: 6.54 ms per loop

In [7]: %timeit result = list(itertools.product(range(100),repeat=2))
1000 loops, best of 3: 521 µs per loop
"
Assign value to an individual cell in a two dimensional python array,"q = [[None]*5]*4
"
Running program/function in background in Python,"$ cat script.py
import subprocess
subprocess.Popen(""sleep 3; echo 'Done!';"", shell=True)
"
How to quickly get the collection of words in a corpus (with nltk)?,"from collections import Counter
from nltk import FreqDist, word_tokenize

with open('myfile.txt', 'r') as fin:
    # Using Counter.
    x = Counter(word_tokenize(fin.read()))
    uniq = x.keys()
    # Using FreqDist
    x = Counter(word_tokenize(fin.read()))
    uniq = x.keys()
    # Using Set
    uniq = set(word_tokenize(fin.read()))
"
"pandas DataFrame concat / update (""upsert"")?","df = pd.concat([df1, df2[~df2.index.isin(df1.index)]])
df.update(df2)

>>> df
             A   B
2015-10-01  A1  B1
2015-10-02  a1  b1
2015-10-03  a2  b2
2015-10-04  a3  b3
"
Python 2.7 Get month from 2 months ago (i.e get '05' from todays date),">>> date.today()
datetime.date(2015, 7, 28)
>>> for i in range(13):
...     print(months_ago(i))
... 
7
6
5
4
3
2
1
12
11
10
9
8
7
"
Directory tree in a QTreeWidget,"class Node(object):
    def __init__(self):
        self.dirs = {}
        self.files = []
"
Repeated measures transform in Pandas,"import io
import pandas as pd

text = '''\
control  dose_high  dose_low gender  participant
0      4          6         4      m            1
1      3          5         5      f            2
1      2          8         6      m            3'''

df = pd.read_csv(io.BytesIO(text), sep='\s+')
result = pd.melt(df, id_vars=['participant', 'gender'])
print(result)
"
Differentiating methods from variables of an object,"In [1]: class A:
   ...:     def __init__(self):
   ...:         self.x = 2
   ...:     def f(self):
   ...:         return 1

In [2]: a=A()

In [3]: import types

In [4]: isinstance(a.f, types.MethodType)
Out[4]: True
"
"How to split tokens, count number of tokens, and write in a file in python?","import ast

# raw data
data = """"""
['Marilyn Manson', 'Web', 'Skydera Inc.', 'Stone Sour', 'The Smashing Pumpkins', 'Warner Bros. Entertainment','This is a good Beer']
['Voices Inside', 'Expressivista', 'The Kentucky Fried Movie', 'The Bridges of Madison County']
""""""
# set threshold number of tokens
threshold = 3
# split into lines
lines = data.split('\n')
# parse non-blank lines into python lists
lists = [ast.literal_eval(line) for line in lines if line]
# for each list, keep only those tokens with less than `threshold` tokens
result = [[item for item in lst if len(item.split()) < threshold]
          for lst in lists]
# show result
for line in result:
    print(line)
"
Writing traversals to a file in python3.x issue,"def inorder(self, file):    
    if self._left is not None:
        file.write(str(self) + ' ')
        self._left.inorder(file)
    file.write(str(self) + ' ')
    if self._right is not None:
        file.write(str(self) + ' ')
        self._right.inorder(file)
"
Python - Find a number and then copy it from a string,"s = ""abdc54sgh""
int("""".join([x for x in s if x.isdigit()]))
"
Assistance with numpy savetext function,"np.savetxt('x.txt', x.ravel())
np.savetxt('gz.txt', gz.ravel())
"
Python combinatorials w/o repetition - Pyncomb?,"group1 = [""Steve"", ""Mark"", ""Tom""]
group2 = [""Brett"", ""Mick"", ""Foo""]
group3 = [""Dan"", ""Phil""]
for x in itertools.product(group1, group2, group3):
    print x
"
Plotting non-standard axes,"ax.set_xticks([-2,-1,0,1,2])
ax.set_xticklabels([358,359,0,1,2])
"
Python - Return y coordinates of polygon path given x,"import matplotlib.pyplot as plt

ax = plt.gca()

ax.fill(*p.boundary.xy, color='y')
ax.axvline(x_val, color='b')

ax.plot([x_val, ] * len(points), points, 'b.')
ax.plot([x_val, ] * 2, minmax, 'ro', ms=10)
"
Python: Getting data from databound using BeatifulSoup,"import requests
import json

jsonResponse = requests.get(""https://www.kaggle.com/knockout/profiles/54836/results"")
data = json.loads(jsonResponse.text)
print(data)

for eachData in data:
    print(""competition name:"", eachData[""competition""][""title""])
    print(""Rank:"", eachData[""rank""])
    print(""competitors count:"", eachData[""teamCount""])
"
getting ProcessId within Python code,"p = multiprocessing.Process()
p.start()
# Some time later ...
print('PID is ' + str(p.pid))
"
Fastest way to substitute a set of characters in a string,"import string
k, v = zip(*BYTE_REPLACE.iteritems())
k, v = ''.join(map(chr, k)), ''.join(map(chr, v))
tbl = string.maketrans(k, v)
def subs(st):
    return st.translate(tbl)
"
Create all possible subsequence with unique elements,"list  = [""A111"", ""T112"", ""I113"", ""A114"", ""T112"", ""S115"", ""I116"", ""D117"", ""I116"", ""K119"", ""R120"", ""E121"", ""T122"", ""C123"", ""V124"", ""V125"", ""V126""]

subsequence = []
for item in list:
    if item in subsequence:
        print subsequence
        index = subsequence.index(item)+1
        subsequence = subsequence[index:]
    subsequence.append(item)
print subsequence
"
Double assignment in python,"[item['op'] == 'add']
"
Why equal integers behaves differently to equal lists?,"a = 5
b = a
b += 1             # created a new int
print id(a), id(b) # different
"
Strange behaviour of IPython,"In [1]: def foo():
   ...:     return 2
   ...: 

In [2]: print(foo())
2

In [3]:
"
Looking for a concise way to check for point collision in a list of Rects,">>> rects = [pygame.Rect(0,0,100,100), pygame.Rect(30,30,30,30)]
>>> next((i for (i, r) in enumerate(rects) if r.collidepoint(10, 10)), -1)
0
>>> next((i for (i, r) in enumerate(rects) if r.collidepoint(100, 200)), -1)
-1
>>>
"
Adding the results of multiple functions,"months = [janCalc, fabCalc, ...]

output = [sum(vals) / 12 for vals i zip(*(gen() for gen in months))]
"
"Convert this list, tuple in list only in Python?",">>> [z for x in lis for y in x for z in y]
[2L, 3L]
"
Python return value from scheduled event,"def ret_this():
    with open('output.txt', 'w') as f:
        f.write('I'm called!') 
if __name__ = ""__main__"":
    schedthis()
    with open(""output.txt"", 'r') as f:
        print(f.read())
"
convert hex to decimal,"int('deadbeef', 16)"
How to avoid one Spark Streaming window blocking another window with both running some native Python code,"from pyspark.rdd import RDD
from concurrent.futures import ThreadPoolExecutor

executor = ThreadPoolExecutor(max_workers=4)

def submit_to_gui(*args): ...

def submit_if_success(f):
    if not f.exception():
        executor.submit(submit_to_gui, f.result())
"
How to download scrapy images in a dyanmic folder,"import os, os.path
from scrapy.contrib.pipeline.images import ImagesPipeline

class SessionImagesPipeline(ImagesPipeline):
    def item_completed(self, results, item, info):
        # iterate over the local file paths of all downloaded images
        for result in [x for ok, x in results if ok]:
            path = result['path']
            # here we create the session-path where the files should be in the end
            # you'll have to change this path creation depending on your needs
            target_path = os.path.join((item['session_path'], os.basename(path)))

            # try to move the file and raise exception if not possible
            if not os.rename(path, target_path):
                raise ImageException(""Could not move image to target folder"")

            # here we'll write out the result with the new path,
            # if there is a result field on the item (just like the original code does)
            if self.IMAGES_RESULT_FIELD in item.fields:
                result['path'] = target_path
                item[self.IMAGES_RESULT_FIELD].append(result)

        return item
"
TypeError: password() takes exactly 1 argument (0 given),"def function():
  return blahblah

def function2(): 
  print function()
"
Adding a Floatformat to Django Custom Tag,"@register.simple_tag()
def average(num1, num2):
   return round(float(num1 / num2), 2)
"
Sqlalchemy: bulk correlated update to link tables,"stmt = select([Location.id]).\
    where(and_(Location.x==Stopover.x, Location.y==Stopover.y)).limit(1)

conn.execute(Stopover.__table__.update().values(location_id=stmt)
"
Composite Index updates for Numpy Matrices,"A = np.zeros((8, 8))
A[np.ix_(rows, columns)] += 1
"
Python - using dictionary to count keys and values,"Short version
def get_key_or_val_itms(dct, wanted):
    return dict(filter(lambda tpl: wanted in tpl, dct.items()))
"
How do i take out values from a string? Python,">>> 
>>> key = random.sample(ints, 8)
>>> key
[90, 114, 93, 112, 40, 43, 95, 79]
>>> offset = sum(key)
>>> offset
666
>>> key = ''.join(map(chr, key))
>>> key
'Zr]p(+_O'
>>>
"
Getting last item this line using python,">>> x=['Q 0006 005C 0078 0030 0030 0033 0034 ONE_OF 0002 ']
>>> x[0].split()[-1].strip()
'0002'
"
Get index of the top n values of a list in python,"sorted(range(len(a)), key=lambda i: a[i])[-2:]
"
Numpy.loadtxt imports data as array of arrays rather than a multidimension array,"dtype=[('MEAT', '<i4'), ('CHEESE', '<i4'), ('TOAST', '<i4'), ('BIRD', 'S4'), ('PLANE', 'S4'), ('SOCK', 'S4')]
nt = numpy.loadtxt('/home/joshua/file.csv', dtype=dtype, delimiter=',')

nt['SOCK']
#>>> array([b'AAA', b'BBB', b'CCC'], 
#>>>       dtype='|S4')
"
Can't parse YAML correctly,"import ruamel.yaml as yaml
from ruamel.yaml.resolver import Resolver

yaml_str = """"""\
categories: {1: Yes, 2: No}
""""""

for ch in list(u'yYnNoO'):
    del Resolver.yaml_implicit_resolvers[ch]


data = yaml.load(yaml_str, Loader=yaml.Loader)
print(data)
"
Getting data arrays from CSV with loops,"import pandas as pd

csvfile = ""C:/Users/Simon/Desktop/test.csv""

data = pd.read_csv(csvfile, header=None, names=['time','cpu','energy'])

times = list(pd.unique(data.time.ravel()))

print times

cpuList = data.groupby(['cpu'])

cpuEnergy = {}

for i in range(len(cpuList)):
    curCPU = 'CPU' + str(i+1)
    cpuEnergy[curCPU] = list(cpuList.get_group('CPU' + str(i+1))['energy'])

for k, v in cpuEnergy.items():
    print k, v
"
Python Beautiful Soup Error : list index out of range,"     response = urllib2.urlopen(uri)
            if response.getcode() == 200:                       
                    soup = BeautifulStoneSoup(response.read())
"
how to make new list of elements from existing list in python?,"countries = [e[0] for e in x]
"
List element Pointer in Python,"class FooWrapper(object):
    def __init__(self, value):
         self.value = value
    def __repr__(self):
         return 'FooWrapper(' + repr(self.value) + ')'
    def __str__(self):
        return str(self.value)
    def __call__(self,value):
        self.value = value
"
Python: How to add tuple to an empty list?,"list_of_pairs = list_of_pairs.append(matchup)
print ""ADDED TO LIST: "" + str(list_of_pairs)
"
Relative frequencies of a list of numbers,">>> print('{:.08f}'.format(0.07142857142857142))
0.07142857
>>> print('{:.08f}'.format(0.07))
0.07000000
"
Combining Keys in Dictionary into tuples in a list,"{w:tuple(k for (k,v) in d.items() if v == w) for w in l}
"
Equivalent of date.utc in python,"#!/usr/bin/env python3
from datetime import datetime, timedelta

assert year > 100
utc_time = datetime(year, month, day, hours, minutes, seconds, ms*1000)
millis = (utc_time - datetime(1970, 1, 1)) // timedelta(milliseconds=1)
"
How do I convert strings of digits into lists of digits with proper spacing?,">>> grades = '50 20 1 55 90'
>>> grades.split()
['50', '20', '1', '55', '90']
>>> [int(i) for i in grades.split()]
[50, 20, 1, 55, 90]
"
regex to match or ignore a set of two digit numbers,"""(?<=_)(?!(19|2[0-4])\.)[0-9]+(?=\.)""
"
Keeping rows after the first non NaN in PANDAS,"In [38]:
df.notnull()

Out[38]:
              A      B
Index                 
1/1/1950  False   True
2/1/1950   True  False
3/1/1950   True  False
4/1/1950  False   True
5/1/1950   True   True
6/1/1950   True   True
7/1/1950  False   True
7/1/1950   True   True
7/1/1950   True  False

In [39]:
df.notnull().all(axis=1)

Out[39]:
Index
1/1/1950    False
2/1/1950    False
3/1/1950    False
4/1/1950    False
5/1/1950     True
6/1/1950     True
7/1/1950    False
7/1/1950     True
7/1/1950    False
dtype: bool

In [40]:
df.notnull().all(axis=1).argmax()

Out[40]:
'5/1/1950'
"
Extracting key/value pair from dictionary,"dict((k,v) for k,v in my_dict.items() if k[0] == 'Peter')
"
How to avoid rebuilding existing wheels when using pip?,"    pip wheel --find-links=/tmp --wheel-dir=/tmp Cython==0.19.2
"
"In Python, how do I get a variable via a string representation of the name of the variable?","locals()[s]
globals()[s]
getattr(other_object, s)
"
make a time delay,time.sleep(60)
lisp-style style `let` syntax in Python list-comprehensions,"colprint([(name, version[0].summary or '')
      for (name, version) in sorted(versions.iteritems())])
"
Print from txt file,"template = '''\
URL GOTO=https://www.url.com/{user1}
TAG POS=1 TYPE=BUTTON ATTR=TXT:Follow
WAIT SECONDS= 27'''

with open('users.txt') as file:
    for line in file:
        print(template.format(user1=line.strip()))
"
Format an array as string in Python,"' '.join(['test', 'report'])
"
How to calculate percentage of english words in a paragraph using Python,"# -*- coding: utf-8 -*
import enchant
dictionary = enchant.Dict(""en_US"")

paragraph = u""This is paragraph in English. 这是在英国段。Это пункт на английском языке. این بند در زبان انگلیسی است.""

words = paragraph.split("" "")
en_count = 0.0
for word in words:
  if dictionary.check(word.strip()):
    en_count += 1

percent = en_count/len(words) if len(words) != 0 else 0
print str(percent) + ""% english words""
"
"Regex in Python: ""\d+"" and ""[0-9]+ do NOT only recognize numbers&Digits but also Operators?",">>> import re
>>> a_number = re.compile(r'\d+')
>>> only_a_number = re.compile(r'^\d+$')
>>> a_number.search('This string is not a number, but does *contain* 1') is not None
True
>>> only_a_number.search('This string is not a number, but does *contain* 1') is not None
False
>>> a_number.search('1') is not None
True
>>> only_a_number.search('1') is not None
True
"
Subclassing method decorators in python,"class AbstractDecorator(object):
    """"""
    This seems like the more natural way, but won't work
    because the instance to which the wrapped function
    is attached will never be in scope.
    """"""
    def __new__(cls,f,*args,**kwargs):
        return wraps(f)(object.__new__(cls,*args,**kwargs))

    def __init__(decorator_self, f):
        decorator_self.f = f
        decorator_self.punctuation = ""...""

    def __call__(decorator_self, obj_self, *args, **kwargs):
        decorator_self.very_important_prep()
        return decorator_self.f(obj_self, *args, **kwargs)

    def __get__(decorator_self, obj_self, objtype):
        return functools.partial(decorator_self.__call__, obj_self)      

class SillyDecorator(AbstractDecorator):
    def very_important_prep(decorator_self):
        print ""My apartment was infested with koalas%s""%(decorator_self.punctuation)

class UsefulObject(object):
    def __init__(useful_object_self, noun):
        useful_object_self.noun = noun

    @SillyDecorator
    def red(useful_object_self):
        print ""red %s""%(useful_object_self.noun)

>>> u = UsefulObject(""balloons"")
... u.red()
My apartment was infested with koalas...
red balloons
"
Python: Generate random number between x and y which is a multiple of 5,"import random
for x in range(20):
  print random.randint(1,11)*5,
print
"
python sum of primes,"def is_prime(number):
    factors = [candidate_factor for candidate_factor in range(1, number+1) if number % candidate_factor == 0]
    return len(factors) == 2

#generates a list of numbers.
primes = [number for number in range(2, 101) if is_prime(number)]
prime_total = sum(primes)
print prime_total
"
Python abstract classes - how to discourage instantiation?,"from abc import ABCMeta, abstractmethod

class SomeAbstractClass(object):
    __metaclass__ = ABCMeta

    @abstractmethod
    def this_method_must_be_overridden(self):
        return ""But it can have an implementation (callable via super).""

class ConcreteSubclass(SomeAbstractClass):
    def this_method_must_be_overridden(self):
        s = super(ConcreteSubclass, self).this_method_must_be_overridden()
        return s.replace(""can"", ""does"").replace("" (callable via super)"", """")
"
Parsing unstructured text in Python,"data = """"""\
. 55 MORILLO ZONE VIII,
BARANGAY ZONE VIII
(POB.), LUISIANA, LAGROS
F
01/16/1952
ALOMO, TERESITA CABALLES
3412-00000-A1652TCA2
12
. 22 FABRICANTE ST. ZONE
VIII LUISIANA LAGROS,
BARANGAY ZONE VIII
(POB.), LUISIANA, LAGROS
M
10/14/1967
AMURAO, CALIXTO MANALO13
""""""

from pyparsing import LineEnd, oneOf, Word, nums, Combine, restOfLine, \
    alphanums, Suppress, empty, originalTextFor, OneOrMore, alphas, \
    Group, ZeroOrMore

NL = LineEnd().suppress()
gender = oneOf(""M F"")
integer = Word(nums)
date = Combine(integer + '/' + integer + '/' + integer)

# define the simple line definitions
gender_line = gender(""sex"") + NL
dob_line = date(""DOB"") + NL
name_line = restOfLine(""name"") + NL
id_line = Word(alphanums+""-"")(""ID"") + NL
recnum_line = integer(""recnum"") + NL

# define forms of address lines
first_addr_line = Suppress('.') + empty + restOfLine + NL
# a subsequent address line is any line that is not a gender definition
subsq_addr_line = ~(gender_line) + restOfLine + NL

# a line with a name and a recnum combined, if there is no ID
name_recnum_line = originalTextFor(OneOrMore(Word(alphas+',')))(""name"") + \
    integer(""recnum"") + NL

# defining the form of an overall record, either with or without an ID
record = Group((first_addr_line + ZeroOrMore(subsq_addr_line))(""address"") + 
    gender_line + 
    dob_line +
    ((name_line +
        id_line + 
        recnum_line) |
      name_recnum_line))

# parse data
records = OneOrMore(record).parseString(data)

# output the desired results (note that address is actually a list of lines)
for rec in records:
    if rec.ID:
        print ""%(name)s, %(ID)s, %(address)s, %(sex)s, %(DOB)s"" % rec
    else:
        print ""%(name)s, , %(address)s, %(sex)s, %(DOB)s"" % rec
print

# how to access the individual fields of the parsed record
for rec in records:
    print rec.dump()
    print rec.name, 'is', rec.sex
    print
"
os.system python function in a while loop,"import subprocess
proc = subprocess.Popen(('date +\""%s\""'.split(), stdout=subprocess.PIPE, shell=True)
(timeNow, err) = proc.communicate()
"
Reading key value pair from a tab delimited file in python,"with open('path/to/file') as infile:
    keys = infile.readline().split()
    values = infile.readline().split('\t')

    answer = dict(zip(keys, values))
"
Python subprocess output on windows?,"import tempfile
import subprocess

w = tempfile.NamedTemporaryFile()
p = subprocess.Popen('third_party.exe', shell=True, stdout=w, 
                        stderr=subprocess.STDOUT, bufsize=0)

with open(w.name, 'r') as r:
    for line in r:
        print line
w.close()
"
how to not remove apostrophe only for some words in text file in python,"[""?,$!]     # Match "" ? , $ or !
|           # OR
'           # A ' if it does not have...
(?!        
  (?<! ')  
  [ts]      # t or s after it, provided it has no ` '` before the t or s
)
"
Make regular expression Python,"import re
p = re.compile(r'(?s)<script\b((?:(?!src).)*?)>(.*?)</script>')
test_str = ""<script type=\""text/javascript\"" src=\""python_files/py_dict.js\""></script>\n<script type=\""text/javascript\"">9089089089</script>\n<script>9089089089</script>""
print [(x.group(1), x.group(2)) for x in re.finditer(p, test_str)]
"
python: how to find a subset of one set that is closest to another,"from __future__ import division, print_function

import numpy as np
import datetime as dt

# build numpy array
s = np.random.rand(90000)
l = np.random.rand(2.5E6)


# sort
s.sort()
l.sort()

# searchsorted finds where values in array2 should be inserted in array1 to 
# maintain the ""sortedness"" of a new list
# define index locations where ""s"" should be inserted in ""l""
indices = np.searchsorted(l,s)

# build dummy list to store ""s2""
# this is faster than repeatedly resizing an array
s2 = s*0


# using ""indices"" determine which adjacent value is the nearest match
# need to be careful here since we cannot look ""below"" the first index
# nor can we look ""above"" the last value

d1 = dt.datetime.now()
for r in np.arange(s.shape[0]):
    ix = indices[r]

    if indices[r]==0:
        s2[ix] = l[0]
    elif indices[r]==l.shape[0]:
        s2[ix] = l[r-1]
    else:
        tmp = l[ix:ix+2]
        s2[r] = tmp[ np.abs(s[r]-tmp)==np.min(np.abs(s[r]-tmp)) ]

print('Execution time: ',dt.datetime.now()-d1)
"
Named colors in matplotlib,"import matplotlib
for name, hex in matplotlib.colors.cnames.iteritems():
    print(name, hex)
"
"In dictionary, converting the value from string to integer","{k: int(v) for k, v in d.items()}"
Python Raspberry PI Guessing Game(Function call not working),"selection = raw_input(""Enter your selection:"")
if int(selection) == 1:
    Random(100)
elif int(selection) == 2:
    Random(1000)
elif int(selection) == 3:
    Random(10000)
elif int(selection) == 4:
    Random(100000)  
elif int(selection) == 5:
    exit()
"
Why does a class have the attributes of its metaclass?,"class TopMeta(type):
    def __new__(cls, clsname, bases, dct):
        uppercase_attr = {}
        for name, val in dct.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        return super(TopMeta, cls).__new__(cls, clsname, bases, uppercase_attr)

    def sos(cls):
        return 'sos'

class UpperMeta(type):
    __metaclass__ = TopMeta
    def __new__(cls, clsname, bases, dct):
        uppercase_attr = {}
        for name, val in dct.items():
            if not name.startswith('__'):
                uppercase_attr[name.upper()] = val
            else:
                uppercase_attr[name] = val

        return super(UpperMeta, cls).__new__(cls, clsname, bases, uppercase_attr)

class B(object):
    __metaclass__ = UpperMeta

assert not hasattr(B, 'sos')
"
"Compare dictionary key, values with nested list elements - Python","d = {'a': [1, 5], 'c': [7, 9], 'f': [10, 12], 'b': [15, 20]}

list_A = [['a', '4'], ['a', '7'], ['b', '17'], ['b', 10], ['c', '7'], ['d', '7'], ['f', '11'], ['f', '12']]

out = []
for sub in list_A:
    k, val = sub
    if k in d:
        v = d[k]
        if v[0] <= int(val) <= v[1]:
            out.append(sub)
print(out)
[['a', '4'], ['b', '17'], ['c', '7'], ['f', '11'], ['f', '12']]
"
Can I use an alias to execute a program from a python script,os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')
"Iterating in a area contained in a multidimensional array in python, why it doesn't work?","surfaceXY = [[0]*10 for i in range(10)]
"
"Exception Value: list indices must be integers, not str","print results['result'][0]['id']
"
Building list of lists from CSV file,"import csv 
import sys #used for passing in the argument
file_name = sys.argv[1] #filename is argument 1
with open(file_name, 'rU') as f:  #opens PW file
    reader = csv.reader(f)
    data = list(list(rec) for rec in csv.reader(f, delimiter=',')) #reads csv into a list of lists

    for row in data:
        print row[0] #this alone will print all the computer names
        for username in row: #Trying to run another for loop to print the usernames
            print username
"
Create pandas df from JSON where Column Headers and Rows are in separate arrays,"import json
import pandas as pd

content = '''{
    ""uselessInfo"": ""blabla"", 
    ""headers"": [
        { ""type"": ""DIMENSION"", ""name"": ""DATE"" }, 
        { ""type"": ""DIMENSION"", ""name"": ""COUNTRY"" }, 
        { ""type"": ""METRIC"", ""name"": ""REVENUE"" }
    ],
    ""rows"": [ [ ""2014-09-29"", ""Germany"", 435 ], 
        [ ""2014-09-28"", ""USA"", 657 ], 
        [ ""2014-09-13"", ""Spain"", 321 ]
    ], 
    ""average"": [ ""some unwanted info"" ], 
    ""total"": [ ""some unwanted info"" ]
}'''
data = json.loads(content)


columns = [dct['name'] for dct in data['headers']]
df = pd.DataFrame(data['rows'], columns=columns)
print(df)
"
Python list Merging,"all_compare_tables = {}
for i, Book in enumerate(rootNode.getBooks(), 1):
    CompareTables=[]
    CompareTables.append(Book.getName())
    for Table in Book.getTables():
        CompareTables.append(Table.getName())
    all_compare_tables['CompareTables{}'.format(i)] = CompareTables
"
Is there a simple string parser for Python?,"pairs = {'{': '}', '[': ']', '(': ')'}

def parse_groups(string):
    stack = []
    last = 0
    for i, c in enumerate(string):
        if c in pairs:
            # push onto the stack when we find an opener
            if not stack and last < i:
                # yield anything *not* grouped
                yield string[last:i]
            stack.append((c, i))
        elif c in pairs:
            if stack and pairs[stack[-1][0]] == c:
                # Found a closing bracket, pop the stack
                start = stack.pop()[1]
                if not stack:
                    # Group fully closed, yield
                    yield string[start:i + 1]
                    last = i + 1
            else:
                raise ValueError('Missing opening parethesis')

    if stack:
        raise ValueError('Missing closing parethesis')

    if last < len(string):
        # yield the tail
        yield string[last:]
"
How to execute bash from within a python file?,"randomdir = random.choice([d for d in os.listdir(os.curdir)
                           if (not d.startswith(""."")) and os.path.isdir(d)])
"
Sending multiple .CSV files to .ZIP without storing to disk in Python,"import zipfile
import StringIO

zipped_file = StringIO.StringIO()
with zipfile.ZipFile(zipped_file, 'w') as zip:
    for i, file in enumerate(files):
        file.seek(0)
        zip.writestr(""{}.csv"".format(i), file.read())

zipped_file.seek(0)
"
"Python sys.argv to preserve ' ' or """"","python test.py blah=\'blah\'
"
Get counts of strings in each CSV column using Python,"#!/usr/bin/env python
from collections import Counter, defaultdict
import csv

header_counter = defaultdict(Counter)

with open('filename.csv') as input_file:
    r = csv.reader(input_file, delimiter=',')
    # read headers
    headers = next(r)
    for row in r:
        # count values for each row to add in header context
        row_val = sum([w.isdigit() for w in row])
        # zip each row with headers to know where to count
        for header, val in zip(headers, row):
            # count only non-digits
            if not any(map(str.isdigit, val)):
                header_counter[header].update({val: row_val})

for k, v in header_counter.iteritems():
    print k, v
"
handling zeros in pandas DataFrames column divisions in Python,"In [15]: x = df.a/df.b

In [16]: x
Out[16]: 
0         inf
1    0.200000
2    0.000000
3    0.033333
4    0.100000
dtype: float64

In [17]: x[np.isinf(x)] = np.nan

In [18]: x
Out[18]: 
0         NaN
1    0.200000
2    0.000000
3    0.033333
4    0.100000
dtype: float64
"
sorting a graph by its edge weight. python,"lst.sort(key=lambda x: x[2], reverse=True)"
Number permutations in python iterative,"for i in range(5):
    for p in itertools.product(('0', '1', '2'), repeat=i):
        print ''.join(p),
print
"
Python prevent subprocess from consuming keypress," msvcrt.getch().decode()==chr(27)
"
check if a variable exists,"if ('myVar' in globals()):
    pass"
Accessing global attributes from inside a macro in Jinja2,"jinja_env = Environment(...)
jinja_env.globals['url_for'] = url_for
"
Localise float notation,">>> import locale
>>> locale.setlocale(locale.LC_ALL, ""nl_BE"")
'nl_BE'
>>> locale.str(234.2)
'234,2'
"
Python 2.7.8 - Dictionary to file and back with style,"import csv

def save(self, filepath):
    with open(filepath, 'w') as fout:
        outfile = csv.writer(fout, delimiter="":"")
        for k,v in self.bok.iteritems():
            outfile.writerow([v,k])

def load(self, filepath):
    if not os.path.isfile(filepath):
        print ""No file was found""
        return
    with open(filepath) as infile:
        for v,k in csv.reader(infile, delimiter="":""):
            self.bok[k] = v
"
Jumbled out put of RFID Tags,"import serial, time

station1 = None
station2 = None

try:
    station1 = serial.Serial('/dev/ttyUSB0', 9600,timeout=0)
    print 'station 1 Is Ready!! Please Show your Card'
except Exception,e:
        print 'Station 1 is Down',e

try:
    station2 = serial.Serial('/dev/ttyUSB1', 9600,timeout=0)
    print 'station 2 Is Ready!! Please Show your Card'
except Exception,e:
        print 'Station 2 is Down',e


while True:
    if station1 != None:
        card_dataa1 = station1.read(12)
        if len(card_dataa1) > 0:    print card_dataa1
    if station2 != None:
        card_dataa2 = station2.read(12)
        if len(card_dataa2) > 0:    print card_dataa2
"
Effectively parsing plain text,"with open('dist.all.last') as inputfile:
    names = [line.split()[0] for line in inputfile if line.strip()]
"
How to add up scraped strings representing integers?,"for post in posts:
    ... # rest of code snippet you posted

print(sum(float(re.sub(r""[^\d.]"", """", post.text)) for post in posts))
"
"Pythonic way to ""flatten"" object hierarchy to nested dicts?","def flatten(obj):
    if obj is None:
        return None
    elif hasattr(obj, '__dict__') and obj.__dict__:
        return dict([(k, flatten(v)) for (k, v) in obj.__dict__.items()])
    elif isinstance(obj, (dict,)):
        return dict([(k, flatten(v)) for (k, v) in obj.items()])
    elif isinstance(obj, (list,)):
        return [flatten(x) for x in obj]
    elif isinstance(obj, (tuple,)):
        return tuple([flatten(x) for x in obj])
    else:
        return obj
"
Python. user input(1) string to list. User input (2) finds if there is the word in the first user input,"sent = input(""Sentence:"").split()
lkupwrd = str(input(""What word do you want to look up?"")).lower()

wordList = [word.lower() for word in sent]

if lkupwrd in wordList:
    print([i for i,j in enumerate(wordList) if j == lkupwrd])
"
Opposite of zip(*[iter(s)]*n),">>> s = [(3, 4), (1, 2)]
>>> [i for sub in s for i in sub]
[3, 4, 1, 2]
"
1d list indexing python: enhance MaskableList,"def my_zip_sort(W, L):
    srt = argsort(W)
    return [(L[i], W[i]) for i in srt]
"
Can't change size within layout,"import sys
from PyQt4 import QtCore, QtGui


class TextEditorDlg(QtGui.QDialog):
    def __init__(self, parent=None):
        super(TextEditorDlg, self).__init__(parent)
        self.resize(500, 400)

        self.button = QtGui.QPushButton(self)
        self.lineEdit = QtGui.QLineEdit(self)
        self.textEdit = QtGui.QTextEdit(self)

        self.grid = QtGui.QGridLayout(self)

        # Use the row-span and column-span arguments!
        self.grid.addWidget(self.button, 0, 0, 1, 1)
        self.grid.addWidget(self.lineEdit, 1, 0, 1, 3)
        self.grid.addWidget(self.textEdit, 2, 0, 1, 3)



if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    myapp = TextEditorDlg()
    myapp.show()
    sys.exit(app.exec_())
"
keys with multiple values in a dictionary (Python),"l = ['A,1,1', 'B,2,1', 'C,4,4', 'D,4,5']

d = {k: list(map(int,rest)) for k,*rest in (s.split("","") for s in l) }
"
dictionary to list of tuples with smallest value,"temp=[value]
valueslist.append(temp)
"
How to find the index of a value in 2d array in Python?,">>> np.where(a == 1)
(array([0, 0, 1, 1]), array([0, 1, 2, 3]))
"
Convert float into time (hour.minute) in python,"a = ""08.94""
asplit = a.split('.')
"
How to count all positive and negative values in a pandas groupby?,"In [11]: df.groupby('A').C.apply(lambda x: pd.Series([(x < 0).sum(), (x >= 0).sum()])).unstack()
Out[111]: 
     0  1
A        
bar  2  1
foo  2  3

[2 rows x 2 columns]
"
How to override default help message on python function,"import pydoc
def wrappedHelpText (wrappedFunc):
    def decorator (f):
         f.__doc__ = 'This method wraps the following method:\n\n' + pydoc.text.document(wrappedFunc)
         return f
    return decorator

@wrappedHelpText(worker_function)
def wrapper_function(**args):
    worker_function(**args)
"
Convert a list into a string and allow for a separator,"list=['asdf', '123', 'more items...']
print ', '.join([str(x) for x in list])
"
Get a clean summary of nlme.lme() or lme4.lmer() in RPy,"for i, v in enumerate(list(test2_sum.names)):
    if v not in ['call', 'residuals']:
        print '%s========================================================='%i, v
        print test2_sum.rx2(v)
"
Parse XML using lxml,"from lxml import etree

xml_string = """"""
<response method=""switchvox.currentCalls.getList"">
    <result>
            <current_calls total_items=""3"">
                            <current_call id=""SIP/6525-b59313c8"" from_caller_id_name=""user1"" from_caller_id_number=""user1_ext"" to_caller_id_name=""callee1"" to_caller_id_number=""callee1_num""  start_time=""2011-06-30 15:44:17"" duration=""346"" state=""talking"" provider=""Internal"" format=""g722-&gt;g722"" />
                            <current_call id=""SIP/4476-b595a0a0"" from_caller_id_name=""user2"" from_caller_id_number=""user1_ext"" to_caller_id_name=""callee2"" to_caller_id_number=""callee2_num""  start_time=""2011-06-30 15:48:44"" duration=""79"" state=""talking"" provider=""VCG_B"" format=""g722-&gt;ulaw"" />
                            <current_call id=""SIP/4483-0aa41320"" from_caller_id_name=""user3"" from_caller_id_number=""user1_ext"" to_caller_id_name=""callee3"" to_caller_id_number=""callee3_num""  start_time=""2011-06-30 15:47:54"" duration=""129"" state=""talking"" provider=""VCG_B"" format=""g722-&gt;ulaw"" />
            </current_calls>
    </result>
</response>
""""""

tree = etree.fromstring(xml_string)

for call in tree.xpath('.//current_call'):
    print call.attrib
"
Adding up number in a list with every 3 number,">>> example = [0, 1, 0, 2, 0, 4]
>>> map(sum, grouper(3, example, 0))
[1, 6]
"
Get elements of a tuple-indexed dictionary specifying only one field of the tuple,"((k,v) for k,v in a.items() if k[2] == 'l1p')
"
How can I arrange a dictionary?,"def sort_the_dict(in_, firstkey):
    # in_ is your sample data.
    result_dict = OrderedDict()
    q = Queue()
    q.put_nowait(firstkey)

    while not q.empty():
        k = q.get_nowait():
        v = in_.get(k)
        if v is not None:
            # if a value exists for that key
            result_dict[k] = v
            for vv in v:
                q.put_nowait(vv)

    return result_dict
"
Add characters to Python unicode strip?,">>> import re
>>> st = ""\t [[  dwarf ]]]   \n""
>>> re.sub(r""\s*\[|\]\s*"", """", st, flags=re.UNICODE).strip()
'dwarf'
"
Python lxml - find tag block ammend,"from lxml import etree

data = """"""<?xml version=""1.0"" encoding=""UTF-8""?>
<package xmlns=""http://apple.com/itunes/importer"" version=""film5.0"">
    <video>
        <products>
            <product>
                <territory>GB</territory>
                <cleared_for_sale>true</cleared_for_sale>
                <wholesale_price_tier>1</wholesale_price_tier>
            </product>
            <product>
                <territory>IE</territory>
                <cleared_for_sale>true</cleared_for_sale>
                <wholesale_price_tier>1</wholesale_price_tier>
            </product>
            <product>
                <territory>US</territory>
                <cleared_for_sale>true</cleared_for_sale>
                <wholesale_price_tier>1</wholesale_price_tier>
            </product>
        </products>
    </video>
</package>
""""""

ns = {""x"": ""http://apple.com/itunes/importer""}
territory = 'IE'

root = etree.fromstring(data)
for product in root.xpath('//x:product[x:territory = ""%s""]' % territory, namespaces=ns):
    print product.findtext('x:cleared_for_sale', namespaces=ns)
    print product.findtext('x:wholesale_price_tier', namespaces=ns)
"
perl one-liner to capture multiple matches in the same line," m/(\d+)/g;
"
Computing 16-bit checksum of ICMPv6 header,"#!/usr/local/bin/python3
# -*- coding: utf8 -*-

import struct

SOURCE_IP = ""fe80000000000000020086fffe0580da""
DEST_IP = ""fe80000000000000026097fffe0769ea""
TYPE_CODE = ""8700""
REMAINDER = ""00000000fe80000000000000026097fffe0769ea01010000860580da""


def calc_checksum(packet):
    total = 0

    # Add up 16-bit words
    num_words = len(packet) // 2
    for chunk in struct.unpack(""!%sH"" % num_words, packet[0:num_words*2]):
        total += chunk

    # Add any left over byte
    if len(packet) % 2:
        total += ord(packet[-1]) << 8

    # Fold 32-bits into 16-bits
    total = (total >> 16) + (total & 0xffff)
    total += total >> 16
    return (~total + 0x10000 & 0xffff)


def build_pseudo_header(src_ip, dest_ip, payload_len):
    source_ip_bytes = bytearray.fromhex(src_ip)
    dest_ip_bytes = bytearray.fromhex(dest_ip)
    next_header = struct.pack("">I"", 58)
    upper_layer_len = struct.pack("">I"", payload_len)
    return source_ip_bytes + dest_ip_bytes + upper_layer_len + next_header


def build_icmpv6_chunk(type_and_code, other):
    type_code_bytes = bytearray.fromhex(type_and_code)
    checksum = struct.pack("">I"", 0)
    other_bytes = bytearray.fromhex(other)
    return type_code_bytes + checksum + other_bytes


def main():
    icmpv6_chunk = build_icmpv6_chunk(TYPE_CODE, REMAINDER)
    pseudo_header = build_pseudo_header(SOURCE_IP, DEST_IP, 32)
    icmpv6_packet = pseudo_header + icmpv6_chunk
    checksum = calc_checksum(icmpv6_packet)

    print(""checksum: {:#x}"".format(checksum))

if __name__ == '__main__':
    main()
"
cv::MatIterator equivalent in numpy,"import numpy as np

# generate a random numpy array as loaded from cv2.imread()
img = np.random.randint(255, size=(8, 10, 3))

for (x,y,z), value in np.ndenumerate(img):
    do_something(img[x,y,z]) # modify to do whatever you want
"
Pack function arguments into a dictionary - opposite to **kwargs,"class Foo(object):
    def __init__(self, a=1, b=2):    
        inputs = locals()
        del inputs['self'] # remove self variable
        print(inputs)


f = Foo() 
"
how can I save the output of a search for files matching *.txt to a variable?,"import fnmatch
import os

for file in os.listdir(""/Users/x/y""):
    if fnmatch.fnmatch(file, '*.txt'):
        print(file)
        my_var = file
        # do your stuff
"
"python tkinter calender, placing the numbers","import math

# Initialize the calendar matrix
cal = []
for i in range(5): # 5 weeks
    cal.append([])
    for j in range(7): # 7 days per week
        cal[i].append('')

# Set the calendar for some month
start = 3 # Wed
for day in range(31):
    row = math.floor( (day+start) / 7)
    col = (day+start) - 7*row
    cal[row][col] = str(day+1)

print(cal)
"
How to clean up this string in python with strip?,"In [20]: [s.strip() for s in string.splitlines() if s.strip()]
Out[20]: ['data here', 'another_data', 'more data']
"
Python - formatting JSON output to file,"objects = []
for small_group in self.small_groups.values():
    objects.append(small_group._asdict()))
with io.open( file_dir + file_name, 'w', encoding='utf-8' ) as file:
    json_object = json.dumps(objects, ensure_ascii=False)
    file.write(unicode(json_object))

print '{} small group JSON objects successfully written to the file {}.'.format(
    len(objects), file.name)
"
Find *most* common prefix of strings - a better way?,"#!/usr/bin/env python
from collections import Counter
from itertools import izip_longest

strings = ['foo_a','foo_b','foo_c','fnord']
threshold = .7 * len(strings)
prefix = []
for chars in izip_longest(*strings, fillvalue=''):
    char, count = Counter(chars).most_common(1)[0]
    if count < threshold:
        break
    prefix.append(char)
print(''.join(prefix))
# -> foo_
"
working with regex,"re.search(r'[^,]*:[^,]*', s).group()
"
"Extract Text from HTML Python (BeautifulSoup, RE, Other Option?)","from bs4 import BeautifulSoup

data = """"""
<td class=""tl-cell tl-popularity"" data-tooltip=""7,944,796"" data-tooltip-instant="""">
<div class=""pop-meter"">
<div class=""pop-meter-background""></div>
<div class=""pop-meter-overlay"" style=""width: 55%""></div>
</div>
</td>
""""""

soup = BeautifulSoup(data)
print(soup.td['data-tooltip'])
"
How to change value of existing item's string in wxPython ObjectListView list_ctrl,"# OLVcheckboxes.py

import wx
from ObjectListView import ObjectListView, ColumnDefn

########################################################################
class Results(object):
    """"""""""""

    #----------------------------------------------------------------------
    def __init__(self, tin, zip_code, plus4, name, address):
        """"""Constructor""""""
        self.tin = tin
        self.zip_code = zip_code
        self.plus4 = plus4
        self.name = name
        self.address = address


########################################################################
class ProvPanel(wx.Panel):
    """"""""""""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """"""Constructor""""""
        wx.Panel.__init__(self, parent=parent)

        mainSizer = wx.BoxSizer(wx.VERTICAL)

        self.columns = {0: 'tin',
                        1: 'zip_code',
                        2: 'plus4',
                        3: 'name',
                        4: 'address'}

        self.test_data = [Results(""123456789"", ""50158"", ""0065"", ""Patti Jones"",
                                  ""111 Centennial Drive""),
                          Results(""978561236"", ""90056"", ""7890"", ""Brian Wilson"",
                                  ""555 Torque Maui""),
                          Results(""456897852"", ""70014"", ""6545"", ""Mike Love"",
                                  ""304 Cali Bvld"")
                          ]
        self.resultsOlv = ObjectListView(self, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.resultsOlv.cellEditMode = ObjectListView.CELLEDIT_SINGLECLICK

        self.setResults()

        self.column_cbo = wx.ComboBox(self, value='tin',
                                      choices=self.columns.values())
        modify_btn = wx.Button(self, label='Modify Column 1 Cells')
        modify_btn.Bind(wx.EVT_BUTTON, self.onModify)

        mainSizer.Add(self.resultsOlv, 1, wx.EXPAND|wx.ALL, 5)
        mainSizer.Add(self.column_cbo, 0, wx.CENTER|wx.ALL, 5)
        mainSizer.Add(modify_btn, 0, wx.CENTER|wx.ALL, 5)
        self.SetSizer(mainSizer)

    #----------------------------------------------------------------------
    def onModify(self, event):
        """"""
        Modify cells
        """"""
        objects = self.resultsOlv.GetObjects()
        column = self.column_cbo.GetValue()
        for obj in objects:
            value = 'Row #%s' % self.resultsOlv.GetIndexOf(obj)
            setattr(obj, column, value)
            self.resultsOlv.RefreshObject(obj)

    #----------------------------------------------------------------------
    def setResults(self):
        """"""""""""
        self.resultsOlv.SetColumns([
            ColumnDefn(""TIN"", ""left"", 100, ""tin""),
            ColumnDefn(""Zip"", ""left"", 75, ""zip_code""),
            ColumnDefn(""+4"", ""left"", 50, ""plus4""),
            ColumnDefn(""Name"", ""left"", 150, ""name""),
            ColumnDefn(""Address"", ""left"", 200, ""address"")
        ])
        self.resultsOlv.CreateCheckStateColumn()
        self.resultsOlv.SetObjects(self.test_data)


########################################################################
class ProvFrame(wx.Frame):
    """"""""""""

    #----------------------------------------------------------------------
    def __init__(self):
        """"""Constructor""""""
        title = ""OLV Checkbox Tutorial""
        wx.Frame.__init__(self, parent=None, title=title, size=(1024, 768))
        panel = ProvPanel(self)


#----------------------------------------------------------------------
if __name__ == ""__main__"":
    app = wx.App(False)
    frame = ProvFrame()
    frame.Show()
    app.MainLoop()
"
How to sort a dataFrame in python pandas by two or more columns?,"df1 = df1.sort(['a', 'b'], ascending=[True, False])
"
Why is list element replacement slower than string element replacement in python?,"def list_replace_test(s, chars):
    """"""Replaces a set of chars to 0""""""
    return [a if a not in chars else '0' for a in s]
"
Why is my implementation of binary search very inefficient?,"import random

numcalls = 0
def bs(wordlist, word):
    # increment numcalls
    print('wordlist',wordlist)
    global numcalls
    numcalls += 1

    # base cases
    if not wordlist:
        return False
    length = len(wordlist)
    if length == 1:
        return wordlist[0] == word

    # split the list in half
    mid = int(length/2) # mid index
    leftlist = wordlist[:mid]
    rightlist = wordlist[mid:]
    print('leftlist',leftlist)
    print('rightlist',rightlist)
    print()

    # recursion
    if word < rightlist[0]:
        return bs(leftlist, word) # word can only be in left list
    return bs(rightlist, word) # word can only be in right list

alphabet = 'abcdefghijklmnopqrstuvwxyz'
wl = sorted(random.sample(alphabet, 10))
print(bs(wl, 'm'))
print(numcalls)
"
How to get system timezone setting and pass it to pytz.timezone?,"import time

def localTzname():
    if time.daylight:
        offsetHour = time.altzone / 3600
    else:
        offsetHour = time.timezone / 3600
    return 'Etc/GMT%+d' % offsetHour
"
Unescaping Characters in a String with Python,"""""""\\u003Cp\\u003E"""""".decode('unicode-escape')"
Python Pandas: cannot do slice indexing,"print (df.loc[('chr1', slice(3000714, 3001110)),:])
                   end ref|alt
chrom start                   
chr1  3000714  3000715     T|G
      3001065  3001066     G|T
      3001110  3001111     G|C
"
"Iterating dictionary in the order I added items, python","l = [1,2,3,4]
print 1 in l # prints True
print 5 in l # prints False
"
two tables in matplotlib,"left, width = 0.1, 0.6
bottom, height = 0.1, 0.8
left_table = left+width+0.1
table_width = 0.15
table_height = width/2.

rect_main = [left, bottom, width, height]
rect_table1 = [left_table, table_height+bottom , table_width, table_height]
rect_table2 = [left_table, bottom, table_width, table_height]

axMain = plt.axes(rect_main)
axTable1 = plt.axes(rect_table1, frameon =False)
axTable2 = plt.axes(rect_table2, frameon =False)
axTable1.axes.get_xaxis().set_visible(False)
axTable2.axes.get_xaxis().set_visible(False)
axTable1.axes.get_yaxis().set_visible(False)
axTable2.axes.get_yaxis().set_visible(False)

axMain.plot([1,2,3])
axTable1.table(cellText=[[1,1],[2,2]], loc='upper center',
               rowLabels=['row1','row2'], colLabels=['col1','col2'])
axTable2.table(cellText=[[3,3],[4,4]], loc='upper center',
               rowLabels=['row1','row2'], colLabels=['col1','col2'])
"
What is the canonical way of handling sys arguments in Python?,"if '-v' in sys.argv: ...
"
count number of ones in a given integer,">>> binary = bin(20)[2:]
>>> binary.count('1')
2
"
Removing each element at the value in each key,"def solve(d, *keys):
    indexes = [i for i, x in enumerate(zip(*(d[k] for k in keys)))
                                                                if len(set(x)) != 1]
    return {k:[v[x] for x in indexes] for k, v in d.items()}
"
Why am I not able to grab from the url?,">>> import requests
>>> r = requests.get(""http://minewind.com/forums"")
>>> r.status_code
404
"
"Scrape 'dictionary' type object from top of HTML file (bunch of text, not in a class)","import json
import re
from bs4 import BeautifulSoup
import requests

pattern = re.compile(r""window\.BC\.product = (.*);"", re.MULTILINE)

response = requests.get(""http://www.steepandcheap.com/gear-cache/shop-smartwool-on-sale/SWL00II-GRA"")
soup = BeautifulSoup(response.content)   

script = soup.find(""script"", text=lambda x: x and ""window.BC.product"" in x).text
data = json.loads(re.search(pattern, script).group(1))
print data
"
"merging two lists, removing empty strings","output = []
for a, b in zip(L1, L2):
    innerlist = []
    for x, y in zip(a, b):
        innerlist.append(x or y or 0)  # 1 or '' = 1; '' or 2 = 2; etc
    output.append(innerlist)
"
How can iterate throught a dictionary in a list in python," print [x.values() for x in r]
"
Python3 Tkinter - Open .py file with button,"def func2():
    import tkinter as tk

    root2 = tk.Tk()

    def kill2():
        root2.destroy()
        from py1 import func1
        func1()

    button2 = tk.Button(root2, bg = 'red', text = 'hit to kill py2 and start py1', command = kill2)
    button2.pack()

    root2.mainloop()

if __name__ == '__main__':
    func2()
"
Python get tag with certain text,"from lxml import html

def super_func(keyword, htmldoc):
    query = '//*[contains(text(),""{0}"")]'
    result = htmldoc.xpath(query.format(keyword))
    if len(result) > 0:
        return html.tostring(result[0])
    else:
        return ''

a = '<div>Test moree test <div> London is ... <p>mooo</p></div></div>'
doc = html.fromstring(a)
text = 'London'
print super_func(text, doc)
text = 'mooo'
print super_func(text, doc)
"
"read csv file with header and data, and convert to xls file","for rowi, row in enumerate(reader):
    for coli, value in enumerate(row):
        if rowi >= 2:
            value = int(value)
        sheet.write(rowi, coli, value)
"
Which regex is more efficient?,"
Edit (Run a few more times doing both calls in the same loop):
for x in xrange(50000):
    total1 += timeRE(1)
    total2 += timeRE(2)
"
variable inside a string used as an os command in python,"cmd_template = 'SMILExtract -C {config_path} -I {wav_base}.wav -O {csv_path}'
os.system(cmd_template.format(
  config_path='config/demo/demo1_energy.conf',
  wav_base='user',
  csv_path='csv/user.csv',
))
"
Converting flat Python Dictionary to List of Dictionaries,"d = {'line(0).item1':'a' ...}

out = collections.defaultdict(list)
for k,v in d.items():
    n,val = re.findall(r'^line\((\d+)\)\.(\w+)$', k)[0]
    out[int(n)].append((val,v))

my_list = [dict(out[v]) for v in sorted(out)]
"
Python regex delimiting a string,">>> s = ""Columbus Blue Jackets at Buffalo Sabres - 10/09/2014""
>>> re.split(r'\s+(?:at|-)\s+', s)
['Columbus Blue Jackets', 'Buffalo Sabres', '10/09/2014']
>>> s = 'Montreal Canadiens at Buffalo Sabres - 10/09/2014'
>>> re.split(r'\s+(?:at|-)\s+', s)
['Montreal Canadiens', 'Buffalo Sabres', '10/09/2014']
"
python - parse html form with lxml.html with xpath syntax,"import lxml.html


pagesource = """"""<form method=""POST"" action=""/login/?session=sess"">
<input type=""text"" id=""usern"" name=""username"" value="""" placeholder=""Username""/>
<input type=""password"" id=""passw"" name=""password"" placeholder=""Password""/>
<input type=""hidden"" name=""ses_token"" value=""token""/>
<input id=""login"" type=""submit"" name=""login"" value=""Log In""/>
</form>
<form method=""POST"" action=""/login/?session=sess"">
<input type=""text"" id=""usern"" name=""username"" value="""" placeholder=""Username""/>
<input type=""password"" id=""passw"" name=""password"" placeholder=""Password""/>
<input type=""hidden"" name=""ses_token"" value=""token""/>
<input id=""login"" type=""submit"" name=""login"" value=""Log In""/>
</form>
""""""

tree = lxml.html.fromstring(pagesource)
form = tree.find('.//form')

print ""Action:"", form.action
print ""Token:"", form.find('.//input[@name=""ses_token""]').value
"
"Simple ""if"" statements in Python","x = 0
while x < 9:
    print ""this works""
    x = x + 1

print ""this doesn't work""
"
How to read integers from a file that are 24bit and little endian using Python?,"struct.unpack('<i', chunk + ('\0' if chunk[2] < 128 else '\xff'))
"
How to check if any value of a column is in a range in Pandas?,df[(x <= df['columnX']) & (df['columnX'] <= y)]
"parsing xml with python, selecting a tag using a sibling tag as selector","import xml.etree.ElementTree as ET                                             
root = ET.fromstring(xml)
[item.find('description').text for item in root.iter('item')
 if'KEYWORD' in item.find('title').text]
# => [' description text of interest ""1""', ' description text of interest ""k"" ']
"
Javascript unescape() vs. Python urllib.unquote(),"re.sub(r'%u([a-fA-F0-9]{4}|[a-fA-F0-9]{2})', lambda m: unichr(int(m.group(1), 16)), quoted)
"
Python classes self.variables,"class Testclass(object):
    def __init__(self, printHello):
"
"trying to iterating over dictionary but when the element is not found, else statement is not called, last key is printed instead","fridge = {""cheese"" : ""so delicious"", ""crackers"": ""you will love it once you try it"", ""chicken soup"": ""delicous stuff""}
food_sought = ""chicken""
for name in fridge:
    if name == food_sought:
        print(""I was able to find a something in our list of food: %s : %s"" % (food_sought, fridge[food_sought]))
        break
else:
    print(""We couldn't find the food you were looking for"")
"
Dynamically changing log level in python without restarting the application,logging.getLogger().setLevel(logging.DEBUG)
Opencv: How to detect pixel color change,"im = np.zeros((5,5,3), dtype=np.uint8)
im2 = im.copy()

# Change a pixel in the blue band:
im2[0,0,2] = 255

# The transpose here is just so that the bands are printed individually 
print (im == im2).T
"
change value when python is in infinite loop,"x = 5
while True:
  if (some-condition):
    x = 3
  print x
"
Is there a way to extract a dict in Python into the local namespace?,">>> d={'a':6, 'b':""hello"", 'c':set()}
>>> exec '\n'.join(""%s=d['%s']""%(k,k) for k in d)
>>> id(d['c'])
3079176684L
>>> id(c)
3079176684L
"
Python: convert string to byte array,"In [44]: str = ""ABCD""

In [45]: [elem.encode(""hex"") for elem in str]
Out[45]: ['41', '42', '43', '44']
"
How do I use matplotlib autopct?,"import matplotlib.pyplot as plt

# make the pie circular by setting the aspect ratio to 1
plt.figure(figsize=plt.figaspect(1))
values = [3, 12, 5, 8] 
labels = ['a', 'b', 'c', 'd'] 

def make_autopct(values):
    def my_autopct(pct):
        total = sum(values)
        val = int(round(pct*total/100.0))
        return '{p:.2f}%  ({v:d})'.format(p=pct,v=val)
    return my_autopct

plt.pie(values, labels=labels, autopct=make_autopct(values))
plt.show()
"
How to rewrite the code which appends to lists with numpy arrays," np.append(saw2,x) == np.concatenate([saw2,x])
"
Flask Confirm Action,"class ConfirmationViewMixin(object):
    confirmation_template = '_confirm.html'

    def get_confirmation_context(self):
        # implement this in your view class
        raise NotImplementedError()

    def post(self):
        if request.args.get('confirm') == '1':
            return super(ConfirmationViewMixin, self).post()

        return render_template(
            self.confirmation_template, **self.get_confirmation_context())
"
Finding partial matches in an href tag,"soup.find_all(""a"", href=re.compile(r""/markets/NZSX/securities/""))
soup.find_all(""a"", href=lambda href: href and ""/markets/NZSX/securities/"" in href)
soup.select('a[href*=""/markets/NZSX/securities/""]')
"
Python: Extracting specific data with html parser,"from HTMLParser import HTMLParser


class AllLanguages(HTMLParser):
    def __init__(self):
        HTMLParser.__init__(self)
        self.inLink = False
        self.dataArray = []
        self.countLanguages = 0
        self.lasttag = None
        self.lastname = None
        self.lastvalue = None

    def handle_starttag(self, tag, attrs):
        self.inLink = False
        if tag == 'a':
            for name, value in attrs:
                if name == 'class' and value == 'Vocabulary':
                    self.countLanguages += 1
                    self.inLink = True
                    self.lasttag = tag

    def handle_endtag(self, tag):
        if tag == ""a"":
            self.inlink = False

    def handle_data(self, data):
        if self.lasttag == 'a' and self.inLink and data.strip():
            print data


parser = AllLanguages()
parser.feed(""""""
<html>
<head><title>Test</title></head>
<body>
<a href=""http://wold.livingsources.org/vocabulary/1"" title=""Swahili"" class=""Vocabulary"">Swahili</a>
<a href=""http://wold.livingsources.org/contributor#schadebergthilo"" title=""Thilo Schadeberg"" class=""Contributor"">Thilo Schadeberg</a>
<a href=""http://wold.livingsources.org/vocabulary/2"" title=""English"" class=""Vocabulary"">English</a>
<a href=""http://wold.livingsources.org/vocabulary/2"" title=""Russian"" class=""Vocabulary"">Russian</a>
</body>
</html>"""""")
"
How can I efficiently process a numpy array in blocks similar to Matlab's blkproc (blockproc) function,"from numpy.lib.stride_tricks import as_strided as ast

def block_view(A, block= (3, 3)):
    """"""Provide a 2D block view to 2D array. No error checking made.
    Therefore meaningful (as implemented) only for blocks strictly
    compatible with the shape of A.""""""
    # simple shape and strides computations may seem at first strange
    # unless one is able to recognize the 'tuple additions' involved ;-)
    shape= (A.shape[0]/ block[0], A.shape[1]/ block[1])+ block
    strides= (block[0]* A.strides[0], block[1]* A.strides[1])+ A.strides
    return ast(A, shape= shape, strides= strides)

if __name__ == '__main__':
    from numpy import arange
    A= arange(144).reshape(12, 12)
    print block_view(A)[0, 0]
    #[[ 0  1  2]
    # [12 13 14]
    # [24 25 26]]
    print block_view(A, (2, 6))[0, 0]
    #[[ 0  1  2  3  4  5]
    # [12 13 14 15 16 17]]
    print block_view(A, (3, 12))[0, 0]
    #[[ 0  1  2  3  4  5  6  7  8  9 10 11]
    # [12 13 14 15 16 17 18 19 20 21 22 23]
    # [24 25 26 27 28 29 30 31 32 33 34 35]]
"
pandas shifts column names and fills last column with NAN,">>> with open(""oniwa.dat"") as fp:
...     for line in fp:
...         print(repr(line))
...         
'Rec#\tCyc#\tStep\tTest (Sec)\tStep (Sec)\tAmp-hr\tWatt-hr\tAmps\tVolts\tState\tES\tDPt Time\n'
'1\t0\t1\t0.00000000\t0.00000000\t0.00000000\t0.00000000\t0.00000000\t3.41214609\tR\t0\t09:44:13\t\n'
'2\t0\t1\t30.00000000\t30.00000000\t0.00000000\t0.00000000\t0.00000000\t3.41077280\tR\t1\t09:44:43\t\n'
'3\t0\t1\t60.00000000\t60.00000000\t0.00000000\t0.00000000\t0.00000000\t3.41077280\tR\t1\t09:45:13\n'
"
Splitting on last delimiter in Python string?,"s.rsplit(',', 1)
"
nested loop with array indexing in numpy,"for i in xrange(1, flux.shape[0]):
    for j in xrange(1, flux.shape[1]):
        flux[i,j] = 0.5*(flux[i-1,j] + bz[i-1,j]*dx) + 0.5*(flux[i,j-1] - bx[i,j-1]*dz)
"
Optimizing python one-liner,"def findCarryIn(x, y, c_out, bit):
    s = 0
    for i,j in zip(x, reversed(y)):
        s += i & j
    return (2 * c_out + bit - s)
"
Find which version of package is installed with pip,"$ pip freeze | grep Jinja2
Jinja2==2.7.3
"
Is it possible to have csv.DictReader format certain columns as something other than string?,"with open(""data.csv"",""r"") as data_file:
    items = csv.DictReader(data_file, fieldnames=('id', 'length', 'note'))
    fieldconv = {'id': int, 'length': float, 'spaced column': float}
    items = convert_fields(items, **fieldconv)
    for item in items:
        # item['length'] and item['spaced column'] are now floats
        # item['id'] is always an int
"
Append to a DataFrame in Pandas as new column,"In [6]:

df1.join(df2.rename(columns={0:'x'}))
Out[6]:
   0  x
2  1  3
3  2  5
4  3  3
"
remove a substring from the end of a string,"if (not text.endswith(suffix)):
    return text
return text[:(len(text) - len(suffix))]"
"Python C program subprocess hangs at ""for line in iter""","from subprocess import Popen, PIPE

process = Popen([""stdbuf"", ""-oL"", ""./main""], stdout=PIPE, bufsize=1)
for line in iter(process.stdout.readline, b''):
    print line,
process.communicate() # close process' stream, wait for it to exit
"
Sorting tuples by element value in Python,"tupList = [(2,16), (4, 42), (3, 23)]
sorted(tupList, key = lambda tup: tup[1])
print(tupList)
"
PyQt5 log a signal,"class MyClass(QPushButton):

def __init__(self, name: str) -> None:
    super().__init__(name)
    self._name = name

def mousePressEvent(self, event):
    self.log_info()
    super().mousePressEvent(event)

def log_info(self):
    log(self._name)
"
Python - Locking a shared resource (Multiprocessing),"import datetime
import multiprocessing
from multiprocessing import Queue

def worker(myid, work_queue, done_queue):
    if work_queue.get() == ""Start"":
        for i in range(1,10):
                if i == 5:
                    # do something
                    print myid, datetime.datetime.now() 
        done_queue.put(myid)

def main():
    worker_queues = {}
    for i in xrange(1, 6): 
        q = Queue()
        done_q = Queue()
        worker_queues[i] = (q, done_q)
        d = multiprocessing.Process(target = worker, args = (i, q, done_q))
        d.daemon = True
        d.start()


    for i in xrange(1, 6): 
        worker_queues[i][0].put(""Start"")
        if worker_queues[i][1].get():
            # move to next iteration
            pass

if __name__ == ""__main__"":
    main() 
"
Python: Parse file for a string and return value as variable,"def get_version():
    logger.info('Started')
    version = None
    for file in os.listdir(running_config_dir):
        if file.endswith('.config'):
            with open(file) as fileobj:
                for line in fileobj:
                    if 'string1' in line:
                        print(line)
                        print('Found string1')
                        version = line.strip()
        else:
            logger.critical('Running Configuration not found')

    logger.info('Finished')
    return version
"
Sort data to present barchart highest to lowest in python,"In [40]: from collections import Counter
    ...: import numpy as np
    ...: import matplotlib.pyplot as plt
    ...: from operator import itemgetter
    ...: 
    ...: c = Counter(phenos).items()
    ...: c.sort(key=itemgetter(1))
    ...: labels, values = zip(*c)
    ...: 
    ...: indexes = np.arange(len(labels))
    ...: width = 1
    ...: 
    ...: plt.bar(indexes, values, width)
    ...: plt.xticks(indexes + width * 0.5, labels)
    ...: plt.show()
"
Define variables in template based on user being staff or not,"class IsStaffNode(Node):
    def __init__(self, var):
        self.var = var

    def render(self, context):
        if context['user'].is_staff():
            return var.resolve(context)
        return """"


@register.tag
def is_staff(parser, token):
    var = parser.compile_filter(token.split_contents()[1])
    return IsStaffNode(var)
"
"My virtualenv is not taking into account ? [apache, mod_wsgi and django]","from ConfigParser import ConfigParser
import sys, os

# server variables
SITE_ROOT = os.path.split(__file__)[0]
WWW = os.path.split(SITE_ROOT)[0]

config = ConfigParser()
config.read([os.path.join(DK_SITE_ROOT, 'site.ini')])

# site properties
SITE_NAME = config.get('site', 'sitename')
DNS = config.get('site', 'dns')
SRV = config.get('server', 'srv')
# virtualenv variables
VENV_NAME = ""dev""   # only

# derived settings
DJANGO_SETTINGS_MODULE = ""%s.settings"" % SITE_NAME
VIRTUAL_ENV = ""%s/venv/%s"" % (SRV, VENV_NAME)

# activate virtualenv
# (warning: https://code.google.com/p/modwsgi/wiki/CheckingYourInstallation)
_activate = ""%s/%s/activate_this.py"" % (
    VIRTUAL_ENV,
    'Scripts' if sys.platform == 'win32' else 'bin'
)
if sys.version_info >= (3, 0):
    exec(compile(open(_activate, 'rb').read(), _activate, 'exec'))
else:
    execfile(_activate, dict(__file__=_activate))

# make site directory importable
sys.path.insert(0, WWWDIR)

# set all GLOBAL vars as environment variables
for _varname in [k for k in globals().keys() if k == k.upper()]:
    _val = globals()[_varname]
    if type(_val) == str:
        os.environ[_varname] = _val

# This application object is used by the development server
# as well as any WSGI server configured to use this file. 
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()
"
Python compare tuples with different data types but same values,"tup1 = (1,2,3)
tup2 = ('1',2,3)

print(map(str,tup2))== map(str,tup1)) # tuple(map.. python 3
"
Deleting all files in a directory with Python,"import glob, os

filelist = glob.glob(""*.bak"")
for f in filelist:
    os.remove(f)
"
Resizing an image in PIL,"height, width = size_as_tuple[0], size_as_tuple[1]
image.thumbnail((height, width), Image.ANTIALIAS)
"
Set vs. frozenset performance,"import random
import sys
import timeit

numbers = [random.randrange(sys.maxsize) for _ in range(10000)]
set_ = set(numbers)
fset = frozenset(numbers)
present = random.choice(numbers)
notpresent = -1
test = 'present in s; notpresent in s'

settime = timeit.timeit(
    test,
    'from __main__ import set_ as s, present, notpresent')
fsettime = timeit.timeit(
    test,
    'from __main__ import fset as s, present, notpresent')

print('set      : {:.3f} seconds'.format(settime))
print('frozenset: {:.3f} seconds'.format(fsettime))
"
python find minimum value in dictionary iteratively,"test = {0: {0: 12.33334444, 1: 208.76062847194152, 2: 34.713109915419565}, 1: {0: 84.463009655114703, 1: 20.83266665599966, 2: 237.6299644405141}, 2: {0: 27.018512172212592, 1: 104.38390680559911, 2: 137.70257804413103}}

sorted_index_map = {}

for key, value in test.iteritems():
    sorted_index_map[key] = sorted(value, key=lambda k: value[k])

index_of_min_index_map = {key: 0 for key in test}

need_to_check_duplicate = True

while need_to_check_duplicate:
    need_to_check_duplicate = False
    min_index_map = {key: sorted_index_map[key][i] for key, i in index_of_min_index_map.iteritems()}
    index_set = list(min_index_map.itervalues())
    for key, index in min_index_map.iteritems():
        if index_set.count(index) == 1:
            continue
        else:
            for key_to_check, index_to_check in min_index_map.iteritems():
                if key != key_to_check and index == index_to_check:
                    if test[key][index] > test[key_to_check][index_to_check]:
                        index_of_min_index_map[key] += 1
                        need_to_check_duplicate = True
                        break

result = {key: sorted_index_map[key][i] for key, i in index_of_min_index_map.iteritems()}
print result
"
How do I generate a sequence of integer numbers in a uniform distribution?,"from random import randint

def getNum1To4(runs):
    occurences = {n+1:0 for n in range(4)}
    for i in range(runs):
        options = [n for n in occurences if occurences[n] < runs / 4]
        choice = options[randint(0, len(options) - 1)]
        occurences[choice] += 1
        yield choice
"
combination of numpy array satisfying condition,"version_1 = np.vstack(list(sorted({tuple(row) for row in list(itertools.combinations(a, 4))})))  # unique combinations, your way
version_2 = np.array(list(itertools.product((1, 11, 12, 13), repeat=4)))  # same result, but faster
assert (version_1 == version_2).all()
"
Multiple Buttons In One Method Python 3,"action = {self.backupBtn: 'Backs up', self.connectBtn: 'Connects to',
    self.moveBtn: 'Copies', self.moveBtn: 'Moves'}
def mouseOver(self, event):
    self.status['text'] = ""%s the selected database."" % action[event.widget]
"
How do I sort a list of dictionaries by values of the dictionary in Python?,list_of_dicts.sort(key=operator.itemgetter('name'))
Divide the values of two dictionaries in python,{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}
Python: Subsetting a list according to the attribute,"if value_to_accept is not None:
    return [x for x in a_list if x.smth == value_to_accept]
if value_to_reject is not None:
    return [x for x in a_list if x.smth != value_to_reject]
return []
"
modify setattr to mass-assign multiple attributes to different values,"class hello():
    def __setitem__(self, k, v):
        self.__dict__.update(zip(k, v) if type(k) is tuple else [(k, v)])
"
Python - set list range to a specific value,"my_list[bounds[0]:bounds[1] + 1] = ['foo'] * ((bounds[1] + 1) - bounds[0])
"
Calcuate mean for selected rows for selected columns in pandas data frame,"df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)"
python asign value of list variable from text file,">>> import ast
>>> s = '[(2,0),(3,0),(3,-2),(2,-2)]'
>>> print(ast.literal_eval(s))
[(2, 0), (3, 0), (3, -2), (2, -2)]
"
Checking if program is running,"for pid in psutil.pids():
    p = psutil.Process(pid)
    if p.name() == ""python.exe"":
        print(""Called By Python:""+ str(p.cmdline())
"
Accessing web table using Python - NIST website,"from bs4 import BeautifulSoup
import requests

respond = requests.get(""http://physics.nist.gov/PhysRefData/XrayMassCoef/ElemTab/z30.html"")
soup = BeautifulSoup(respond.text)
l = soup.find('table').find('table').find_all('tr')
for i in range(3 , len(l)):
    print l[i].get_text()
"
Join two colormaps in imshow,"import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

data = np.linspace(-10,5,20).reshape(5,4)

cmap = {name:plt.get_cmap(name) for name in ('gnuplot', 'cool')}
N = 50

vmin, vmax = (np.nextafter(min(data.min(), -1), -np.inf), 
              np.nextafter(max(data.max(), 1), np.inf))              # 1

levels = np.concatenate([np.linspace(vmin, 0, N, endpoint=False),
                         np.linspace(0, vmax, N+1, endpoint=True)])  # 2
colors = np.concatenate([cmap[name](np.linspace(0, 1, N)) 
                         for name in ('cool', 'gnuplot')])           # 3

cmap, norm = mcolors.from_levels_and_colors(levels, colors)

plt.imshow(data, cmap=cmap,
           norm=norm, 
           interpolation='nearest')
bar = plt.colorbar()
plt.show()
"
Sum and length of lists of list,">>> a = [[0, 2, 2], [2, 0, 0], [2, 0, 1]]
>>> b = [[1, 0, 0], [0, 2, 3], [0, 1, 0]]
>>> s = [sum(i) for i in b]
>>> l = [sum(v != 0 for v in i) for i in a]
>>> l
[2, 1, 2]
>>> [[0 if not v else v + (float(sumb) / count) for v in i]
...  for i, sumb, count in zip(a, s, l)]
[[0, 2.5, 2.5], [7.0, 0, 0], [2.5, 0, 1.5]]
"
Python - reading complex lines of text into dictionary,"keyword_dictionary = {
    'Animal' : {'animal', 'dog', 'cat'},
    'Art' : {'art', 'sculpture', 'fearns'},
    'Buildings' : {'building', 'architecture', 'gothic', 'skyscraper'},
    'Vehicle' : {'car','formula','f-1','f1','f 1','f one','f-one','moped','mo ped','mo-ped','scooter'},
    'Person' : {'person','dress','shirt','woman','man','attractive','adult','smiling','sleeveless','halter','spectacles','button','bodycon'},
    'People' : {'people','women','men','attractive','adults','smiling','group','two','three','four','five','six','seven','eight','nine','ten','2','3','4','5','6','7','8','9','10'},
    'Food' : {'food','plate','chicken','steak','pizza','pasta','meal','asian','beef','cake','candy','food pyramid','spaghetti','curry','lamb','sushi','meatballs','biscuit','apples','meat','mushroom','jelly', 'sorbet','nacho','burrito','taco','cheese'},
    'Glass' : {'glass','drink','container','glasses','cup'},
    'Bottle' : {'bottle','drink'},
    'Signage' : {'sign','martini','ad','advert','card','bottles','logo','mat','chalkboard','blackboard'},
    'Slogan' : {'Luck is overrated'},
    'DJ' : {'dj','disc','jockey','mixer','instrument','turntable'},
    'Party' : {'party'}
 }

def matcher(keywords, searcher):
     for key, words in keywords.items():
        if not words.isdisjoint(searcher):
            print(key)



with open(""test.txt"") as termsdesk:
    for line in termsdesk:
        matcher(keyword_dictionary, line.split())
"
Python inline of XML or ASCII string/template?,"from string import Template
the_template = Template(""<div id='$section_id'>First name: $first</div>"")
print the_template.substitute(section_id=""anID"", first=""Sarah"")
"
Python Crawler - need help with my algorithm,"    if ID in SEEN:
        print '-----------------\nID=='+str(ID)+'  already seen, not examined'
        ID += 1
"
Python Golf: what's the most concise way of turning this list of lists into a dictionary:,"names_dict = dict((name,index)
                  for index,lst in enumerate(names)
                  for name in lst)
"
Python - arrays of tkinter widgets changing with radiobutton clicks,"def on_radiobutton(var, index):
    value = var.get()
    color = {""in"": ""green"", ""out"": ""red"", ""unassigned"": ""yellow""}
    self.canvas.itemconfigure(index, fill=color[value])
"
Rescale intensities of a PIL Image,"new_image= image.point(lambda argument: argument*16)
"
django + mysql text field format with breakline,"from django.template.defaultfilters import linebreaksbr
text_with_br = linebreaksbr(instance.fieldname)
"
Equivalent function for xticks for an AxesSubplot object,"axes.set_xticks(ticks, minor=False)
"
matplotlib plotting freezing in simple thread,"import matplotlib
matplotlib.use(""Agg"")
import matplotlib.pyplot as plt
from numpy import arange, sin, pi
import threading

class Dummy():

    def plotme(self, iteration = 1):

        print ""%ix plotting... "" % iteration,
        t = arange(0.0, 2.0, 0.01)
        s = sin(2*pi*t)

        fig, ax = plt.subplots()
        ax.plot(t, s)
        ax.set_xlabel('time (s)')
        ax.set_ylabel('voltage (mV)')
        ax.set_title('About as simple as it gets, folks (%i)' % iteration)
        fig.savefig(""19110942_%i_test.png"" % iteration)

    def threadme(self, iteration = 1):

        thread_plot = threading.Thread(target=self.plotme,
                                      args=(iteration,))
        thread_plot.start()
        thread_plot.join()

dummy = Dummy()
dummy.threadme(1)
dummy.threadme(2)
"
Select only one index of multiindex frame,"df.index = df.index.get_level_values('first')
"
problems with dict.keys not printing a list but printing the view of the list,">>> d = {'l': 3, 'y':1, 'u':2}
>>> d.keys()
dict_keys(['y', 'l', 'u'])
>>> list(d.keys())
['y', 'l', 'u']
"
Iterate on an array with two implicit loops,">>> x = np.random.normal(size=(1000,))
>>> np.allclose(np.sum(x - x[:,None], 1), np.sum(x) - x.size * x)
True

%timeit np.sum(x - x[:,None], 1)
100 loops, best of 3: 6.33 ms per loop

%timeit np.sum(x) - x.size * x
100000 loops, best of 3: 16.5 us per loop
"
Django model DateTimeField set auto_now_add format or modify the serializer,"import datetime

datetime_str = '2016-05-18T15:37:36.993048Z'
old_format = '%Y-%m-%dT%H:%M:%S.%fZ'
new_format = '%d-%m-%Y %H:%M:%S'

new_datetime_str = datetime.datetime.strptime(datetime_str, old_format).strftime(new_format)
print(new_datetime_str)
#'18-05-2016 15:37:36'
"
Print a list of strings in a grid format - Python,"l = [""a"", ""b"", ""c"", ""d""]

def printGrid (numsPerRow, l):
    printStr = """"
    numsInRow = 1
    for i in range(len(l)):

        item = l[i]
        if numsInRow % numsPerRow == 0:
            printStr += ""{0}\n"".format(item)
            numsInRow = 1
        else:
            printStr += ""{0}\t"".format(item)
            numsInRow += 1
    return printStr

print printGrid(2, l)
"
re-import module-under-test to lose context,"import unittest
import sys

class Test(unittest.TestCase):
    def tearDown(self):
        try:
            del sys.modules['logging']
        except KeyError:
            pass
    def test_logging(self):
        import logging
        logging.foo=1
    def test_logging2(self):
        import logging
        print(logging.foo)

if __name__ == '__main__':
    unittest.sys.argv.insert(1,'--verbose')
    unittest.main(argv = unittest.sys.argv)    
"
Pythonic way of comparing multiple elements in a list of dictionaries,">>> %timeit len(set([gettype(e) for e in l])) == 1
1000000 loops, best of 3: 735 ns per loop
"
Why Numpy.array is slower than build-in list for fetching sub list,"import numpy
from timeit import timeit
stat = ''' 
import numpy
a1 = range(4000)
a2 = numpy.array(a1)
i = 0
'''
if __name__ == ""__main__"":
    test_times = 1000
    print '1. {0:.8f}'.format(timeit('a1[i]', setup = stat, number = test_times))
    print '2. {0:.8f}'.format(timeit('a2[i]', setup = stat, number = test_times))
    print '3. {0:.8f}'.format(timeit('i += a1[i]; ++i', setup = stat, number = test_times))
    print '4. {0:.8f}'.format(timeit('i += a2[i]; ++i', setup = stat, number = test_times))
    print '5. {0:.8f}'.format(timeit('a = a1[i:len(a1)]; ++i', setup = stat, number = test_times))
    print '6. {0:.8f}'.format(timeit('a = a2[i:len(a2)]; ++i', setup = stat, number = test_times))
"
Python unit testing code which calls OS/Module level python functions,"System Under Test
$ cat ./name_getter.py
#!/usr/bin/env python

class NameGetter(object):

    def get_name(self):
        self.name = raw_input('What is your name? ')

    def greet(self):
        print 'Hello, ', self.name, '!'

    def run(self):
        self.get_name()
        self.greet()

if __name__ == '__main__':
    ng = NameGetter()
    ng.run()

$ echo Derek | ./name_getter.py 
What is your name? Hello,  Derek !
"
Python: Get attribute from a list of objects of the same type in the most efficient way,"C = [obj.Bar for obj in (A, B)]
"
Python/Numpy: Build 2D array without adding duplicate rows (for triangular mesh),"def unify2(raw_data):
    dtype = np.dtype((np.void, (raw_data.shape[1] * raw_data.dtype.itemsize)))
    uniq, inv = np.unique(raw_data.view(dtype), return_inverse=True)
    uniq = uniq.view(raw_data.dtype).reshape(-1, raw_data.shape[1])
    return uniq, inv
"
Creating container relationship in declarative SQLAlchemy,"nodes_list_nodes = Table(
    'nodes_list_nodes', metadata,
    Column('parent_id', None, ForeignKey('nodes_list.id'), nullable=False),
    Column('child_id', None, ForeignKey(Node.id), nullable=False),
    PrimaryKeyConstraint('parent_id', 'child_id'),
)

class ListNode(Node):
    __mapper_args__ = {'polymorphic_identity': 'list'}
    __tablename__ = 'nodes_list'
    id = Column(None, ForeignKey('nodes.id'), primary_key=True)
    items = relation(Node, secondary=nodes_list_nodes)
"
How do I strptime from a pattern like this?,">>> import time
>>> a=""Some Random text of undetermined length Jan 28, 1986""
>>> datetuple = a.rsplit("" "",3)[-3:]
>>> datetuple
['Jan', '28,', '1986']
>>> time.strptime(' '.join(datetuple),""%b %d, %Y"")
time.struct_time(tm_year=1986, tm_mon=1, tm_mday=28, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=1, tm_yday=28, tm_isdst=-1)
>>>
"
While-loop within a while-loop python," if any(re.search(s, sc) for s in strings for sc in stringscompare):
     same.append(dict)
"
Adding elements to BeautifulSoup's find_all list as a string,"[elem.get_text() for elem in soup.select('div.dinner p.first')]
"
Python 2d grid : Assigning values to coordinates in the grid,"x = np.arange(-5, 5, 0.1)
y = np.arange(-5, 5, 0.1)
xx, yy = meshgrid(x, y, sparse=True)
z = np.sin(xx**2 + yy**2) / (xx**2 + yy**2)
h = plt.contourf(x,y,z)
"
How to Extend Large Class Methods?,"def __init__(self, ex_arg1, ex_arg2, *args):
    super().__init__(*args)
    # ...
"
Time series with appending issue in pandas data frame,"df = df.append(df1)
print df.fillna(df2)
    a   b   c
z   1  31  31
y   2  41  52
x   3  51  23
w  41  24 NaN
v  55   3 NaN
u  16  57 NaN
"
round number to nearest integer,"round(3.0005, 3)"
Identifying that a variable is a new-style class in Python?,"def is_new_style(cls):
    return hasattr(cls, '__class__') \
           and \
           ('__dict__' in dir(cls) or hasattr(cls, '__slots__'))


class new_style(object):
    pass

class old_style():
    pass

print is_new_style(int)
print is_new_style(new_style)
print is_new_style(old_style)
"
How does Python interpreter look for types?,">>> [name for name in dir(__builtins__) 
     if isinstance(getattr(__builtins__,name), type)]
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 
 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 
 'EnvironmentError', 'Exception', 'FloatingPointError', 'FutureWarning', 
 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 
 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 
 'NameError', 'NotImplementedError', 'OSError', 'OverflowError', 
 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 
 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 
 'SystemExit', 'TabError', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 
 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 
 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', 'basestring', 
 'bool', 'buffer', 'bytearray', 'bytes', 'classmethod', 'complex', 'dict', 
 'enumerate', 'file', 'float', 'frozenset', 'int', 'list', 'long', 'memoryview', 
 'object', 'property', 'reversed', 'set', 'slice', 'staticmethod', 'str', 'super', 
 'tuple', 'type', 'unicode', 'xrange']
"
How to store the result of an executed shell command in a variable in python?,"import subprocess
output = subprocess.Popen(['awk', '/f89e7000/ {print $2}', 'syscall_list.txt'], stdout=subprocess.PIPE).communicate()[0]
"
Pandas: Remove rows at random without shuffling dataset,"import pandas as pd
import numpy as np
np.random.seed(10)

remove_n = 1
df = pd.DataFrame({""a"":[1,2,3,4], ""b"":[5,6,7,8]})
drop_indices = np.random.choice(df.index, remove_n, replace=False)
df_subset = df.drop(drop_indices)
"
Previous and next item of list python,"my_list[ (my_list.index(400) + 1) % len(my_list) ]
"
How to convert to a Python datetime object with JSON.loads?,">>> json_string = '{""last_updated"": {""$gte"": ""Thu, 1 Mar 2012 10:00:49 UTC""}}'
>>> dct = json.loads(json_string, object_hook=datetime_parser)
>>> dct
{u'last_updated': {u'$gte': datetime.datetime(2012, 3, 1, 10, 0, 49)}}


def datetime_parser(dct):
    for k, v in dct.items():
        if isinstance(v, basestring) and re.search(""\ UTC"", v):
            try:
                dct[k] = datetime.datetime.strptime(v, DATE_FORMAT)
            except:
                pass
    return dct
"
"Matplotlib_Venn, Multiple Venn diagrams same scale","from matplotlib_venn import venn2
from matplotlib.cbook import flatten
from matplotlib import pyplot as plt
import numpy as np

figure, axes = plt.subplots(2, 3, figsize=(11.69,5.5))

BSL_20=(313,10,76)
BSL_40=(384,17,150)
BSL_100=(665,8,378)
BSL_100CC=(860,23,879)
BSL_200=(585,17,758)

data = [BSL_20, BSL_40, BSL_100, BSL_100CC, BSL_200]
max_area = max(map(sum, data))

def set_venn_scale(vd, ax, true_area, reference_area=max_area):
    sx = np.sqrt(float(reference_area)/true_area)
    sy = max(vd.radii)*1.3
    ax.set_xlim(-sx, sx)
    ax.set_ylim(-sy, sy)

for a, d in zip(flatten(axes), data):
    vd = venn2(d, set_labels = ('150mm at 50%', '400mm at 25%'), ax=a)
    set_venn_scale(vd, a, sum(d))

axes[1,2].axis('off')
figure.tight_layout(pad=0.1)
plt.show()
"
n-dimensional sliding window with Pandas or Numpy,"In [44]: windowed.sum(axis=(1,2))
Out[44]: array([300, 425, 550, 675, 800, 925])
"
Pandas dataframe : Multiple Time/Date columns to single Date index,"import pandas as pd
import numpy as np
from pandas import melt

df = pd.DataFrame(np.random.randint(10, 1000, size=(2,12)), index=['PrinterBlue', 'PrinterBetter'], columns=pd.date_range('1-1', periods=12, freq='M'))

dft = df.T
dft[""date""] = dft.index
result = melt(dft, id_vars=[""date""])
result.columns = [""date"", ""brand"", ""sales""]
print (result)
"
How can I find a collision for a toy hash function?,"from __future__ import print_function
from random import choice, randrange, seed 

def hash_function(s=''):   # 'Hello World!' -> 7b2ea1ba
    a, b, c, d = 0xa0, 0xb1, 0x11, 0x4d

    for byte in bytearray(s):
        a ^= byte
        b = b ^ a ^ 0x55
        c = b ^ 0x94
        d = c ^ byte ^ 0x74

    return format(d<<24 | c<<16 | a<<8 | b, '08x') 

s = b'Hello World!'
print(s, hash_function(s))

#ASCII chars that print nicely
ascii = b''.join([chr(i) for i in range(33, 127)])

seed(37)

found = {}
for j in range(5000):
    #Build a random 4 byte random string
    s = b''.join([choice(ascii) for _ in range(4)])
    h = hash_function(s)
    if h in found:
        v = found[h]
        if v == s:
            #Same hash, but from the same source string
            continue
        print(h, found[h], s)
    found[h] = s
"
extracting n grams from huge text,"from nltk.util import ngrams

lm = {n:dict() for n in range(1,6)}
def extract_n_grams(sequence):
    for n in range(1,6):
        ngram = ngrams(sentence, n)
        # now you have an n-gram you can do what ever you want
        # yield ngram
        # you can count them for your language model?
        for item in ngram:
            lm[n][item] = lm[n].get(item, 0) + 1
"
FOR loop range to process certain number of files at a time,"synced = set(elt.text for elt in root.findall('synced/sfile'))
to_process = [f for f in os.listdir(filepath) if f.endswith('.txt') and f not in synched]

for filename in to_process[:synclimit]:
    # process
"
RegEx Python Find and Print to a new document,"from __future__ import print_function
import re
#NDoc = raw_input(""Enter name of to-be-made document"")   
#log = open(""C:\Users\XYZ\Desktop\Python\NDoc.txt"", ""w"")
#Need help with this^ How do I make new file instead of opening a file?

#nl = list()
#file = raw_input(""Enter a file to be sorted"")
xfile = open(""file"")

line = xfile.read()
l=line.strip()
l=re.sub(""\n"","""",l)
n=re.sub(""(\B)(?=((MTH|SCN|ENG|HST)[|]))"",""\n\n"",l)
print(n)
"
"How to use __setattr__ correctly, avoiding infinite recursion","class My(object):
    def __init__(self):
        self.device = self
"
python elementtree xml append,"import xml.etree.ElementTree as ET
tree=ET.parse('xml-file.txt')
root=tree.getroot()

for item in root.findall('Item'):
    itemid=item.find('ItemId')
    if(itemid.text=='second'):
        #add elements
"
How to update the state of tkiner menu cascade or command?,"widget.configure(state=""disabled"")
"
What is the pythonic way to add type information to an object's attributes?,"class TypeAdaptingProperty(object):
    def __init__(self, key, type_, factory=None):
        self.key = key
        self.type_ = type_
        if factory is None:
            self.factory = type_

    def __get__(self, instance, owner):
        if instance is None:
            return self
        return getattr(instance, self.key)

    def __set__(self, instance, value):
        if not isinstance(value, self.type_):
            value = self.factory(value)
        setattr(instance, self.key, value)

    def __delete__(self, instance):
        delattr(instance, self.key)

class Book(object):
    isbn = TypeAdaptingProperty('isbn_', ISBNNumber)

b = Book()
b.isbn = 123 # Does the equivalent of b.isbn = ISBNNumber(123)
"
Replace all words from word list with another string in python,">>> import re
>>> prohibitedWords = ['Some', 'Random', 'Words']
>>> big_regex = re.compile('|'.join(map(re.escape, prohibitedWords)))
>>> the_message = big_regex.sub(""<replaced>"", 'this message contains Some really Random Words')
>>> the_message
'this message contains <replaced> really <replaced> <replaced>'
"
"Read from file: read two lines, skip two lines","from itertools import islice
import collections

def consume(iterator, n):
    ""Advance the iterator n-steps ahead. If n is none, consume entirely.""
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        collections.deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)
"
Python list as a list indices,"
>>> import operator
>>> list_A = [1,3,4,54,3,5,6,2,6,77,73,39]
>>> list_B = [0,3,2,8]
>>> [list_A[i] for i in list_B]
[1, 54, 4, 6]
>>> list(operator.itemgetter(*list_B)(list_A))
[1, 54, 4, 6]
"
Create a column from a CSV list in Python 3,"with open('C:\Users\j\Desktop\helloworld.csv', 'r') as datafile:
    data = []
    for row in datafile:
       data.extend(item.strip() for item in row.split())
    print(data)
"
How can I find the authoritative DNS server for a domain using dnspython?,"import dns
import dns.name
import dns.query
import dns.resolver

def get_authoritative_nameserver(domain, log=lambda msg: None):
    n = dns.name.from_text(domain)

    depth = 2
    default = dns.resolver.get_default_resolver()
    nameserver = default.nameservers[0]

    last = False
    while not last:
        s = n.split(depth)

        last = s[0].to_unicode() == u'@'
        sub = s[1]

        log('Looking up %s on %s' % (sub, nameserver))
        query = dns.message.make_query(sub, dns.rdatatype.NS)
        response = dns.query.udp(query, nameserver)

        rcode = response.rcode()
        if rcode != dns.rcode.NOERROR:
            if rcode == dns.rcode.NXDOMAIN:
                raise Exception('%s does not exist.' % sub)
            else:
                raise Exception('Error %s' % dns.rcode.to_text(rcode))

        rrset = None
        if len(response.authority) > 0:
            rrset = response.authority[0]
        else:
            rrset = response.answer[0]

        rr = rrset[0]
        if rr.rdtype == dns.rdatatype.SOA:
            log('Same server is authoritative for %s' % sub)
        else:
            authority = rr.target
            log('%s is authoritative for %s' % (authority, sub))
            nameserver = default.query(authority).rrset[0].to_text()

        depth += 1

    return nameserver


import sys

def log(msg):
    print msg

print get_authoritative_nameserver(sys.argv[1], log)
"
"How to apply a modifier in Python, creating a new mesh?","bpy.ops.object.modifier_apply (modifier='EdgeSplit')
"
"Printing a list with a grammatically correct ""and""","tests = [[1], [1,2], [1,2,3], [""first"", ""second"", ""third"", ""forth""]

for test in tests:
    print ', '.join(map(str, test[:-1])) + (' and ' if len(test) > 1 else '') + str(test[-1])
"
Python itertools combinations iteration control,"from itertools import permutations

def getPass():
    return (''.join(p) for p in permutations('4$5%6^7&'))

for i in getPass():
    print(i)
    input('\ncontinue?')
"
"How can I loop through a list changing the list elements at each time step, adding or subtracting input values that are in the txt files?","V = [1,2,3,4,5]

f = open('Qin.txt')     # values in Qin.txt: 1, 3, 2 
fdata = map(float, f.readlines())
f.close()

g = open('Qout.txt')    # values in Qout.txt: 4, 5, 5 
gdata = map(float, g.readlines())
g.close()

output = [[v+fdata[i]-y for v in V] for i,y in enumerate(gdata)]
"
Format log messages as a tree,"import logging

# custom tree formatter
class TreeFormatter(logging.Formatter):
    formatPrefix = {} # map loggername, formatPrefix

    def format(self, record):
        s = """"
        # first time this name is encountered: create the prefix and print the name
        if not record.name in self.formatPrefix: 
            f = self.getFormatPrefix(record)
            s += ""%s \""%s\""\n"" % (f, record.name)

        # print the actual message
        s += ""%s %s: %s"" % (self.formatPrefix[record.name], record.levelname, record.msg) 
        return s


    # create the format prefix for the given package name 
    # (stored in self.formatPrefix[record.name])
    # and return the first line to print
    def getFormatPrefix(self, record):
        depth = record.name.count(""."")
        self.formatPrefix[record.name] = ""   |"" * (depth+1)

        if depth == 0:
            return ""<--""

        return ""%so<--"" % ( (""   |"" * depth)[:-1])
"
Get file syntax selection in sublime text 3 plugin,"syntax = self.view.settings().get(""syntax"")
syntax.endswith(""Perl.tmLanguage"") or syntax.endswith(""Perl.sublime-syntax"")
"
Using itertools.product and want to seed a value,"> cat prod2.py 

from itertools import count, imap

def make_product(*values):
    def fold((n, l), v):
        (n, m) = divmod(n, len(v))
        return (n, l + [v[m]])
    def product(n):
        (n, l) = reduce(fold, values, (n, []))
        if n > 0: raise StopIteration
        return tuple(l)
    return product

print list(imap(make_product(['a','b','c'], [1,2,3]), count()))
print list(imap(make_product(['a','b','c'], [1,2,3]), count(3)))

def product_from(n, *values):
    return imap(make_product(*values), count(n))

print list(product_from(4, ['a','b','c'], [1,2,3]))

> python prod2.py 
[('a', 1), ('b', 1), ('c', 1), ('a', 2), ('b', 2), ('c', 2), ('a', 3), ('b', 3), ('c', 3)]
[('a', 2), ('b', 2), ('c', 2), ('a', 3), ('b', 3), ('c', 3)]
[('b', 2), ('c', 2), ('a', 3), ('b', 3), ('c', 3)]
"
Iterate over a list that contain duplicate elements,"counts = collections.defaultdict(int) # Available since 2.5
for quals in qualsin:
    counts[quals] += 1
"
Convert a numpy array to an array of numpy arrays,"In [638]: a=np.arange(12).reshape(2,3,2)
In [639]: b=np.empty((2,3),dtype=object)
In [640]: for index in np.ndindex(b.shape):
    b[index]=a[index]
   .....:     
In [641]: b
Out[641]: 
array([[array([0, 1]), array([2, 3]), array([4, 5])],
       [array([6, 7]), array([8, 9]), array([10, 11])]], dtype=object)
"
Updating a Python list based on a search append,"scores_list[ind] = ""{} {}\n"".format(line.rstrip(), score)
"
string suffix replacement in python,"import re

regx = re.compile('at\\b')

ch = 'the fat cat was impressed by all the rats gathering at one corner of the great room'

print ch
print
print regx.sub('ATU',ch)
"
How can I check an array with a list of array values?,"class TicTacToeGame:
    """"""
    A class that implements a tic tac toe game
    """"""

    # This is a class variable that contains
    # a list of all the winning combos
    winningCombos = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
        [1, 4, 7],
        [2, 5, 8],
        [3, 6, 9],
        [1, 5, 9],
        [3, 5, 7]
    ]

    def __init__(self):
        """"""
        Init method. This gets called when you create a new game object
        We simply use this method to initialize all our instance variables
        """"""

        # The current player. Either X or O
        self.currentPlayer = 'X'

        # List of player x moves
        self.playerXMoves = []

        # List of player o moves
        self.playerOMoves = []

        # Whether or not the game has been won
        self.isWon = False

        # Whether or not the game is over
        self.isOver = False

        # The winning player
        self.winningPlayer = None

        # The number of moves played
        self.numberOfMovesPlayed = 0

    def doMakeAMoveAtPos(self, pos):
        """"""
        Makes a move in the game at the specified position
        1 is the first position, 5 is the center position, etc

        @param pos: The position (1 through 9)
        @type pos: int
        @rtype: None
        """"""

        # If the game has already been won
        if self.isWon:
            raise ValueError('The game has been won')

        # If the game is over, nobody won
        if self.isOver:
            raise ValueError('The game is a tie')

        # Make sure that the position is within range
        if pos < 1 or pos > 9:
            raise ValueError('Invalid position. Should be between 1 and 9')

        # Make sure the position isn't already taken
        if pos in self.playerXMoves or pos in self.playerOMoves:
            raise ValueError('The position: ' + str(pos) + ' is already taken')

        # Get the current player
        currentPlayer = self.currentPlayer

        # If the current player is X
        if currentPlayer == 'X':

            # Add the move and switch to player O
            currentPlayerMoves = self.playerXMoves
            currentPlayerMoves.append(pos)
            self.currentPlayer = 'O'

        # Otherwise, the current player is O
        else:

            # Add the move and switch to player X
            currentPlayerMoves = self.playerOMoves
            currentPlayerMoves.append(pos)
            self.currentPlayer = 'X'

        # Increment the number of plays.. You could just check the length of
        # playerXMoves and playerOMoves to get the total number of moves, but
        # we are going to keep track to avoid more code later
        self.numberOfMovesPlayed += 1

        # If the number of plays is 9, the game is over
        if self.numberOfMovesPlayed == 9:
            self.isOver = True

        # See if the game has been won

        # If there hasn't been enough moves to win yet, no winner
        if len(currentPlayerMoves) < 3:
            return

        # Iterate through each winning combo
        for winningCombo in self.winningCombos:

            # If each number is in the player's moves, the game has been won
            if set(winningCombo) <= set(currentPlayerMoves):

                self.isWon = True
                self.winningPlayer = currentPlayer
                return



# OK... Our Class has been defined.
# Now it's time to play tic tac toe.

# Define an input string. How you get this is up to you
# Change this to different numbers to see what you get.
inputString = '3 7 5 4 1 9 2 8 3 6 5 1 3 7 6 4 2 9 8 5 1 2 8 6 4 7 3 9'

# Parse the input string into a list of integers
moves = [int(move) for move in inputString.split()]

# Create the initial game
game = TicTacToeGame()

# Set the number of games to 1 (This is the first game after all)
numberOfGames = 1

# Go through all the moves 1 by 1
for pos in moves:

    # Try to make a move in the current game
    try:
        game.doMakeAMoveAtPos(pos)

    # But, since the input is unpredictable, we need to catch errors
    # What's to stop the input from being '1 1 1 1 1 1 1 1 1', etc
    # You can't keep playing position number 1 over and over
    except ValueError as exc:

        # Do what you want with the exception.
        # For this example, I'm just gonna print it
        # and move on the the next move
        print(exc)
        continue

    # If the game has been won
    if game.isWon:
        print('Game ' + str(numberOfGames) + ' Won On Move: ' + str(game.numberOfMovesPlayed) + ' Winning Player: ' + str(game.winningPlayer))

        # Since the game was won, create a new game
        game = TicTacToeGame()

        # And increment the game number
        numberOfGames += 1

    # If the game is a tie
    elif game.isOver:
        print('Game ' + str(numberOfGames) + ' Tie')

        # Since the game was a tie, create a new game
        game = TicTacToeGame()

        # And increment the game number
        numberOfGames += 1

# If there is an unfinished game, we can report this as well
if game.numberOfMovesPlayed > 0:
    print('Game ' + str(numberOfGames) + ' was not finished')
"
Python List Help (Find Biggest number),"(843168, 1000032L)
"
"Wanting to Change specific Characters from TextFile into Other Characters. Not trying to Write, only wanting to print out into the console",">>> import string
>>> instring = 'ABCD'
>>> instring.translate(string.maketrans('ACac','gtgt'))
'gBtD'
"
Unwrap element with beautifulsoup4: does it affect the .string of parent element?,"from bs4 import BeautifulSoup
import re

html = ''' 
<table>
<tr class=""title last "">
  <td>
   Lorem ipsum
  </td>
  <td>
  </td>
 </tr>
 <tr>
  <td>
   <span class=""caps"">dolor
   </span>
   sit amet
  </td>
  <td>
  </td>
 </tr>
 <tr>
  <td>
   consectetur adipiscing elit,
  </td>
  <td>
  </td>
 </tr>
 <tr>
  <td>
   sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
  </td>
  <td>
  </td>
 </tr>
 <tr>
  <td>
    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
  </td>
  <td>
  </td>
 </tr>
</table>
'''

soup = BeautifulSoup(html)

# remove <span> tag but keep content
spans = soup.find_all('span')
for tag in spans:
    tag.unwrap()

print('\n'.join(
  re.sub(r'\s+', ' ', td.text.strip()) 
    for td in soup.find_all('td') if td.text.strip()))
"
Help with speeding up dictionary sort loop in Python?,"for i, value in B_dict.items():
    k = value[0]
    if k in A_dict:
        outfile.write('{0}\t{1}\t{2}\t{3}\t{4}\t{5}\n'.format(
            i, k, A_dict[k], value[1], value[2], value[3])
"
Using .format() with tuples instead of dictionaries,"holiday_dictionary = {'data': datetime.date(2015, 3, 1), 'description': 'some description')
print(""{data:%d/%m} {description}"".format(**holiday_dictionary))
print(""{0[data]:%d/%m} {0[description]}"".format(holiday_dictionary))
"
Why only can get the whole sliced reverse list ommiting start and end?,">>> my_list[10::-1]
[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
"
Applying similar functions across multiple columns in python/pandas,"def annualize_spend(col,day,row):
    if (row['days']/(float(day)) < 1:
        return (row[col])/((row['days'])/float(day))
    else:
        return row[col]

spend_cols = ['spend_30day', 'spend_90day', 'spend_365day']
days_list = [30, 90, 365]

for col, day in zip(spend_cols, days_list):
    col = df.apply(lambda row,col=col,day=day: annualize_spend(col,day,row), axis = 1)
"
Is it possible to specify attribute names when creating an instance of namedtuple?,"def nt_from_kws(cls, **kw):
    return cls(*(kw[k] for k in cls._fields))
"
How to make a function with a parameter?,"home = 0
def basestate(base):
    if base == 0:
        return 1
    else:
        return 0

home = basestate(home)
print(home)
"
Web scraping: Expand/contract bounding box depending on results,"# Save visited boxes. Only for debugging purpose.
visited_boxes = []


def check_for_stores(bounding_box):
    """"""Function mocking real `ckeck_fo_stores` function by returning
    random list of ""stores""
    """"""
    import random
    randint = random.randint(1, 12)
    print 'Found {} stores for bounding box {}.'.format(randint, bounding_box)
    visited_boxes.append(bounding_box)
    return ['store'] * randint


def split_bounding_box(bounding_box, cell_axis_reduction_factor=2):
    """"""Returns generator of bounding box coordinates splitted
    from parent `bounding_box`

    :param bounding_box: tuple containing coordinates containing tuples of
          lower-left and upper-right corner coordinates,
          e.g. ((0, 5.2), (20.5, 14.0))
    :param cell_axis_reduction_factor: divide each axis in this param,
                                       in order to produce new box,
                                       meaning that in the end it will
                                       return `cell_axis_reduction_factor`**2 boxes
    :return: generator of bounding box coordinates

    """"""
    box_lc, box_rc = bounding_box
    box_lc_x, box_lc_y = box_lc
    box_rc_x, box_rc_y = box_rc

    cell_width = (box_rc_x - box_lc_x) / float(cell_axis_reduction_factor)
    cell_height = (box_rc_y - box_lc_y) / float(cell_axis_reduction_factor)

    for x_factor in xrange(cell_axis_reduction_factor):
        lc_x = box_lc_x + cell_width * x_factor
        rc_x = lc_x + cell_width

        for y_factor in xrange(cell_axis_reduction_factor):
            lc_y = box_lc_y + cell_height * y_factor
            rc_y = lc_y + cell_height

            yield ((lc_x, lc_y), (rc_x, rc_y))


def get_stores_in_box(bounding_box, result=None):
    """"""Returns list of stores found provided `bounding_box`.

    If there are more than or equal to 10 stores found in `bounding_box`,
    recursively splits current `bounding_box` into smaller one and checks
    stores in them.

    :param bounding_box: tuple containing coordinates containing tuples of
          lower-left and upper-right corner coordinates,
          e.g. ((0, 5.2), (20.5, 14.0))
    :param result: list containing found stores, found stores appended here;
                   used for recursive calls
    :return: list with found stores

    """"""
    if result is None:
        result = []

    print 'Checking for stores...'
    stores = check_for_stores(bounding_box)
    if len(stores) >= 10:
        print 'Stores number is more than or equal 10. Splitting bounding box...'
        for splitted_box_coords in split_bounding_box(bounding_box):
            get_stores_in_box(splitted_box_coords, result)
    else:
        print 'Stores number is less than 10. Saving results.'
        result += stores

    return result


stores = get_stores_in_box(((0, 1), (30, 20)))
print 'Found {} stores in total'.format(len(stores))
print 'Visited boxes: '
print visited_boxes
"
Comparing 2 lists consisting of dictionaries with unique keys in python,">>> list_1 = [{'unique_id':'001', 'key1':'AAA', 'key2':'BBB', 'key3':'EEE'}, 
              {'unique_id':'002', 'key1':'AAA', 'key2':'CCC', 'key3':'FFF'}]
>>> list_2 = [{'unique_id':'001', 'key1':'AAA', 'key2':'DDD', 'key3':'EEE'},
              {'unique_id':'002', 'key1':'AAA', 'key2':'CCC', 'key3':'FFF'}]
>>> pairs = zip(list_1, list_2)
>>> any(x != y for x, y in pairs)
True
"
Create list out of a particular element of sublists,">>> [var[0] for var in x]
[1, 4, 7]
>>> [var[2] for var in x]
[3, 6, 9]
"
What does this Perl XML filter look like in Python?,"curl -u $1:$2 --silent ""https://mail.google.com/mail/feed/atom"" |python -c ' 
import sys, re
for t,m in re.findall(r""<(title|name)>(.*)<\/\1>"",sys.stdin.read()):
    print ""\t"",m
'
"
Pandas set format for single dataframe,"for i in range(len(df.columns)):
    df[i] = df[i].map('${:,.2f}'.format)
"
How to find the number of edges bewteen any two nodes using networkx?,"for path in nx.all_simple_paths(gr, source=2, target=0):
    print(path)
# prints
# [2, 1, 0]
# [2, 3, 0]
"
Count by combination,"df1 = df1.drop_duplicates()
data = set()
for vid, grp in df1.groupby(['Vehicle_ID']):
    for c1, c2 in IT.combinations(grp['City'], 2):
        if c1 > c2:
            c1, c2 = c2, c1
        data.add((c1, c2, vid))
df = pd.DataFrame(list(data), columns=['City_x', 'City_y', 'Vehicle_Count'])
#   City_x City_y  Vehicle_Count
# 0      B      C              3
# 1      A      C              1
# 2      B      C              1
# 3      A      C              2
# 4      A      B              1
result = df.groupby(['City_x', 'City_y']).count()
"
Write file to directory based on variable in Python,"import os.path
file_name = row['file_root_name']+'.smil'
full_path = os.path.join(path, file_name)
output = open(full_path, 'w')
"
Python: scraping results of webpage of which results are generated server-side,"from selenium import webdriver
url = ""http://jassa.fr/""
browser = webdriver.Firefox()
browser.get(url)
form = browser.find_element_by_tag_name(""form"")
sequence = form.find_element_by_name(""sequence"")
sequence.clear()
sequence.send_keys(""ATTTAATTTA"")
form.submit()
"
Combination of combinations that cut of with the sum of 4,"import numpy as np

arr = np.indices((4, 4, 4, 4)).reshape(4,-1).T
mask = arr.sum(axis=1) < 5
res = arr[mask]
print(res)

#[[0 0 0 0]
# [0 0 0 1]
# [0 0 0 2]
# [0 0 0 3]
# [0 0 1 0]
#  ... 
# [3 0 0 1]
# [3 0 1 0]
# [3 1 0 0]]
"
list assignment index out of range (creating a minesweeper board),"def createBoard(rows, cols, mines):
    board = []
    for n_row in range(rows):
        board.append([])

    for n_row in range(rows):
        for n_col in range(cols):
            board[n_row].append(""C"")
    return board #add this line if you wish the function to actually return the board
"
How to make all non-date values null in Pandas,"import pandas as pd
xl2 = pd.ExcelFile('test.xlsx')
df2 = xl2.parse(""Sheet1"")
for col in ['date1', 'date2', 'date3']:
    df2[col] = pd.to_datetime(df2[col],coerce=True, infer_datetime_format=True)
df2
Out[8]: 
   x          y      date1      z      date2      date3
0  1        fum 2016-06-01      7 2015-09-01        NaT
1  2         fo 2016-06-02  alpha        NaT 2016-10-01
2  3         fi 2016-06-03      9 2015-09-03 2016-10-02
3  4        fee 2016-06-04     10        NaT        NaT
4  5  dumbledum 2016-06-05   beta        NaT 2015-10-03
5  6  dumbledee 2016-06-06     12 2015-09-04        NaT
"
Using line.rfind to find a changing variable,"line_number = 0 # a counter for line number
for line in lines:
  line_number = line_number + 1 # increment counter
"
How do I identify sequences of values in a boolean array?,">>> from itertools import accumulate, groupby
>>> [0] + list(accumulate(sum(1 for _ in g) for _,g in groupby(bool_array)))
[0, 5, 10, 13, 15, 19, 26]
"
"Produce a summary (""pivot""?) table","data = [('Apple',      'Coles',      1.50),
        ('Apple',      'Woolworths', 1.60),
        ('Apple',      'IGA',        1.70),
        ('Banana',     'Coles',      0.50),
        ('Banana',     'Woolworths', 0.60),
        ('Banana',     'IGA',        0.70),
        ('Cherry',     'Coles',      5.00),
        ('Date',       'Coles',      2.00),
        ('Date',       'Woolworths', 2.10),
        ('Elderberry', 'IGA',        10.00)]

from itertools import groupby, islice
from operator import itemgetter
from collections import defaultdict

stores = sorted(set(row[1] for row in data))
# probably splitting this up in multiple lines would be more readable
pivot = ((fruit, defaultdict(lambda: None, (islice(d, 1, None) for d in data))) for fruit, data in groupby(sorted(data), itemgetter(0)))

print 'Fruit'.ljust(12), '\t'.join(stores)
for fruit, prices in pivot:
    print fruit.ljust(12), '\t'.join(str(prices[s]) for s in stores)
"
"allow users to ""extend"" API functions","class hookable(object):
  def __init__(self, fn):
    self.pre = []
    self.post = []
    self.fn = fn
  def add_pre(self, hook):
    self.pre.append(hook)
  def add_post(self, hook):
    self.post.append(hook)
  def __call__(self, *args, **kwargs):
    for hook in self.pre:
      hook(*args, **kwargs)
    ret = self.fn(*args, **kwargs)
    for hook in self.post:
      hook(*args, **kwargs)
    return ret
"
"Pull from two dictionaires based on keys, sometimes key isn't in one dictionary in python 2.7","def getTotals():
    result = defaultdict(int)
    regexp = re.compile(r'(?:ttp_ws_sm|ttpv1)_(\d+)_')

    with open(os.path.join(source, 'ttp_13_08.csv'), 'r') as f:
        rows = csv.reader(f)

        #adds total values for each club code (from csv file)
        for row in rows:
            match = regexp.search(row[1])
            if match:
                result[match.group(1)] += int(row[13])
        data.update(result)

        for key in clubDict.viewkeys() & data:
            club_value, data_value = clubDict[key], data[key]
            if club_value == data_value:
                print 'match'
            else:
                print '{0}, {1}, {2}'.format(key, club_value, data_value)
"
Python and appending items to text and excel file,"Yvalues = [1, 2, 3, 4, 5]
file_out = open('file.csv','wb')
mywriter=csv.writer(file_out, delimiter = '\n')
mywriter.writerow(Yvalues)
file_out.close()
"
How can I change the font size using seaborn FacetGrid?,"import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
x = np.random.normal(size=37)
y = np.random.lognormal(size=37)

# defaults
sns.set()
fig, ax = plt.subplots()
ax.plot(x, y, marker='s', linestyle='none', label='small')
ax.legend(loc='upper left', bbox_to_anchor=(0, 1.1))
"
Trimming a string,myString.rstrip('\n\t')
List with tuples in python,"def hasWord(l, word):
    for w, wordclass in l:
        if w == word:
            return True
    return False

def hasTag(l, tag):
    for w, wordclass in l:
        if wordclass == tag:
            return True
    return False

if hasTag(your_list, 'JJ'): print your_list
"
Python Counter: print key whose count is x,"key_whose_count_is_10 = next(k for k, v in d.items() if v==10)
"
checking to see if same value in two lists,">>> A = [(12,23),(12,45),(12,23),(2,5),(1,2),(2,4),(7,34)]
>>> B = [(12,23),(12,45),(12,23),(2,5),(1,2),(2,66),(34,7)]
>>> set(B).intersection(A) # note: making the smaller list to a set is faster
set([(12, 45), (1, 2), (12, 23), (2, 5)])
"
Is there an elegant way to use struct and namedtuple instead of this?,">>> import struct
>>> from collections import namedtuple
>>> data = ""1""*24
>>> fmt = ""20si""
>>> Rec = namedtuple('Rec', 'text index') 
>>> r = Rec._make(struct.unpack_from(fmt, data))
>>> r
Rec(text='11111111111111111111', index=825307441)
>>>
"
Print a row of numbers and then have it make a new line and continue counting,"columns = 7
for i in range(1, 32):
 if i % columns != 0:
  print i,
 else:
  print i
"
Generating list with constraints,"import itertools

def generateLists(n, k):
    numberOfZeroes = n - k
    for numberOfOnes in range(0, k+1):
        numberOfNegativeOnes = k - numberOfOnes
        orderedList = [-1] * numberOfNegativeOnes + [0] * numberOfZeroes + [1] * numberOfOnes
        for possibleOrderings in itertools.permutations(orderedList):
            yield possibleOrderings

for i in generateLists(3, 2):
    print i
"
How to use Python to find out the words begin with vowels in a list?,"words_starting_with_vowel = [word for word in words if word[0] in 'aeiou']
"
Python: merge lists or data frames and overwrite missing values,">>> from itertools import izip, imap
>>> list(imap(lambda x: x[1] if not x[0] else x[0], izip(list1, list2)))
['MI', 'MS', 'NY', 'OH', 'AR', '']
"
Split a large flat file by first two characters on each line,"awk -F, '!($1 in files){files[$1]=$1 "".txt""} {print > files[$1]}
    END {for (f in files) close(files[$f])}' file
"
python: many to many groupings using iterator module,"def is_water_dwelling(animal):
    return animal in ('frog', 'fish')


def is_land_dwelling(animal):
    return animal in ('frog', 'human', 'giraffe')

animals = ('human', 'frog', 'fish', 'giraffe')

land_dwelling = (x for x in animals if is_land_dwelling(x))
water_dwelling = (x for x in animals if is_water_dwelling(x))

print list(land_dwelling)
print list(water_dwelling)
"
n-sphere coordinate system to Cartesian coordinate system,"def ct_dynamic(r, alpha):
    """"""alpha: the n-2 values between [0,\pi) and last one between [0,2\pi)
    """"""
    x = np.zeros(len(alpha) + 1)
    s = 1
    for e, a in enumerate(alpha):
        x[e] = s*np.cos(a)
        s *= np.sin(a)
    x[len(alpha)] = s
    return x*r
"
"How can I make a ""Recursive Factorial"" without using multiplication?","def rec_fac(n):
    if n == 1:
        return 1
    else:
        return sum([n for i in range(rec_fac(n-1))])
"
SQLAlchemy set default nullable=False,"from functools import partial
NullColumn = partial(Column,nullable=True)
"
How to access a specific row in a DataFrame,"first = df['tweet'].str.contains('first')
this = df['tweet'].str.contains('this')
fin = df['tweet'].str.contains('finally')
"
How do i rewrite these math python functions in ruby?,"Math.log [s.abs, 1].max, 10
Math.log10 [s.abs, 1].max  # or use Math.log10 and skip passing the base
"
How to remove symbols from a string with Python?,"re.sub('[^\\w]', ' ', s)"
How to recount number in each class from a read csv,"with open('myfile.csv', 'rb') as f_in, open('myfile_filtered.csv', 'wb') as f_out:
    reader = csv.reader(f_in)
    writer = csv.writer(f_out)
    writer.writerows(filter_data(reader))
"
Python if statement,"if width < 0 or width > 10000:
"
Using Python to calculate the probability of an output,"from __future__ import division # for getting a float result from int division
from collections import defaultdict
from random import randrange

TURNS = 150

def monopoly(turns):
    square = 0
    allsquares = defaultdict(lambda: 0)
    while turns > 0:
        roll = randrange(1,7) + randrange(1,7)
        square = square + roll
        if square > 39:
            square = square % 40 # this should be modulo 40 since there are 40 squares
        if square == 30:
            square = 10
        allsquares[square]+=1
        turns = turns - 1
    return allsquares

allsquares = monopoly(TURNS)
print ""The actual ratio for landing on each square in %d turns for this particular game instance was:"" % (TURNS, )
for i in xrange(40):
    print ""square %d - %.2f%%"" % (i, 100 * allsquares[i] / TURNS)
"
Python Regex Pattern Replacement,"def replaceToken(match):
    token = match.group()
    if len(token) == 3:
        return token
    else:
        return '[' + token + ']'

re.sub(r'(\[\[\])|(\[\]\])|\[|\]', replaceToken, 'foo[[bar]bloh')
"
Replace a pattern in CSV file Python,"import re
import csv
with open('file') as f:
    reader = csv.reader(f)
    for i in reader:
        print(re.sub(r'(,|^)(?:age\s*(?:\(years\))?:\s*(\d+)\s*(?:years)?)(?=,|$)', r'\1\2 years', ','.join(i)))
"
Need help with tuples in python,"ENCODING = 'utf-8'
print u' '.join((u'1S²',u'2S¹')).encode(ENCODING)
"
Python pandas: Getting the locations of a value in dataframe,"In [11]: np.argwhere(df)
Out[11]: 
array([[1, 0],
       [2, 1],
       [3, 1]])
"
Python -unicode- translate table doesn't remove chars,"translation_table = dict.fromkeys(map(ord, ')(@\n#$'), None)
bucket_list = [x.translate(translation_table) for x in bucket_list ]
"
Python - Return top 5 words with highest frequency,"import collections
def top5_words(text):
    counts = collections.Counter(text.split())
    return counts.most_common(5)
"
express binary literals,bin(21)
Construct DatetimeIndex if you only have year,"df.set_index(df.year.map(lambda x: datetime.datetime(x, 1, 1)))
"
How to solve several independent time series at the same time using scikit linear regression model,"from sklearn.linear_model import LinearRegression

LR = LinearRegression()
LR.fit(X1[:half], y1[:half])
R2_1 = LR.score(X1[half:],y1[half:])

LR.fit(X2[:half], y2[:half])
R2_2 = LR.score(X2[half:],y2[half:])
print R2_1, R2_2
0.912624422097 0.67247516054
"
Can I keep all Flask blueprints in one file?,"from werkzeug.utils import import_string

def create_app():
    app = Flask(__name__)
    # ...
    for name in ('users', 'posts'):
        bp = import_string('myapp.{0}.views:{1}'.format(name, name))
        app.register_blueprint(bp, prefix='/{0}'.format(name))
    # ...
"
Python SocketServer: sending to multiple clients?,"from __future__ import print_function

import asyncore
import collections
import logging
import socket


MAX_MESSAGE_LENGTH = 1024


class RemoteClient(asyncore.dispatcher):

    """"""Wraps a remote client socket.""""""

    def __init__(self, host, socket, address):
        asyncore.dispatcher.__init__(self, socket)
        self.host = host
        self.outbox = collections.deque()

    def say(self, message):
        self.outbox.append(message)

    def handle_read(self):
        client_message = self.recv(MAX_MESSAGE_LENGTH)
        self.host.broadcast(client_message)

    def handle_write(self):
        if not self.outbox:
            return
        message = self.outbox.popleft()
        if len(message) > MAX_MESSAGE_LENGTH:
            raise ValueError('Message too long')
        self.send(message)


class Host(asyncore.dispatcher):

    log = logging.getLogger('Host')

    def __init__(self, address=('localhost', 0)):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.bind(address)
        self.listen(1)
        self.remote_clients = []

    def handle_accept(self):
        socket, addr = self.accept() # For the remote client.
        self.log.info('Accepted client at %s', addr)
        self.remote_clients.append(RemoteClient(self, socket, addr))

    def handle_read(self):
        self.log.info('Received message: %s', self.read())

    def broadcast(self, message):
        self.log.info('Broadcasting message: %s', message)
        for remote_client in self.remote_clients:
            remote_client.say(message)


class Client(asyncore.dispatcher):

    def __init__(self, host_address, name):
        asyncore.dispatcher.__init__(self)
        self.log = logging.getLogger('Client (%7s)' % name)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.name = name
        self.log.info('Connecting to host at %s', host_address)
        self.connect(host_address)
        self.outbox = collections.deque()

    def say(self, message):
        self.outbox.append(message)
        self.log.info('Enqueued message: %s', message)

    def handle_write(self):
        if not self.outbox:
            return
        message = self.outbox.popleft()
        if len(message) > MAX_MESSAGE_LENGTH:
            raise ValueError('Message too long')
        self.send(message)

    def handle_read(self):
        message = self.recv(MAX_MESSAGE_LENGTH)
        self.log.info('Received message: %s', message)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    logging.info('Creating host')
    host = Host()
    logging.info('Creating clients')
    alice = Client(host.getsockname(), 'Alice')
    bob = Client(host.getsockname(), 'Bob')
    alice.say('Hello, everybody!')
    logging.info('Looping')
    asyncore.loop()
"
python 2.7 username with minimum and max,"from __future__ import print_function

while True:
    username = raw_input(""Please give me a username: "")
    if not any(c in username for c in '0123456789'):
        print(""Username needs to contain at least one number."")
        continue
    if len(username) >= 8:
        print(""Well done"")
    elif len(username) <= 1:
        print(""More characters please."")
        print(""Please try again, input your username again."")
        continue
    break
"
Is there any way to access variable like $var (similar to shell scripting) in python?,"src_path = ""/home/data/{pkg_name}/file.zip"".format(pkg_name=pkg_name)
"
compare lists with a list to get the list which is closest match to the list we are comparing,"def closest(seq, *args):
    # Cache information about `seq`.
    # We only really need to change one sequence.
    sm = SequenceMatcher(b=seq)
    def _ratio(x):
        sm.set_seq1(x)
        return sm.ratio()
    return max(args, key=_ratio)
"
What are cycles ? in relation to python,"class Child(object): pass

class Parent(object): pass

c = Child()
p = Parent()
c.parent = p
p.child = c
"
Subtract datetime.time objects stored in two separate lists,">>> import datetime
>>> from functools import partial
>>> list1 = [datetime.time(10, 20), datetime.time(13, 14)]
>>> list2 = [datetime.time(2, 15), datetime.time(4, 21)]
>>> comb = partial(datetime.datetime.combine, datetime.date.min)
>>> [comb(t1) - comb(t2) for t1, t2 in zip(list1, list2)]
[datetime.timedelta(0, 29100), datetime.timedelta(0, 31980)]
"
"Iterating over list of namedtuples, selecting restaurants",">>> def Collection_is_cheap(C, price):
...     result = []
...     for rest in C:
...         for dish in rest.menu:
...             if dish.price <= price:
...                 result.append(rest)
...                 break  # stop the rest.menu loop, go to the next
...     return result
... 
>>> print(Collection_is_cheap(collection, 28))
[Restaurant(name='Thai Dishes', cuisine='Thai', phone='334-4433', menu=(Dish(name='Mee Krob', price=12.5, calories=500), Dish(name='Larb Gai', price=11.0, calories=450))), Restaurant(name='Pascal', cuisine='French', phone='940-752-0107', menu=(Dish(name='Escargots', price=12.95, calories=250), Dish(name='Poached salmon', price=18.5, calories=550), Dish(name='Rack of lamb', price=24.0, calories=850), Dish(name='Marjolaine cake', price=8.5, calories=950)))]
"
Formatting files to be written,"import fileinput

results = []
for line in fileinput.input('input.txt', inplace=1):
    data = line.split()
    if data[-1].strip() == '0':
        print line.strip()
    else:
        results.append(tuple(map(int, data[:-1])) + ({'volume': float(data[-1])}, ))

print results
"
Qt/PyQt: How do I use a QMenu as a permanent widget?,"import sys
from PyQt4 import QtGui

class PermanentMenu(QtGui.QMenu):
    def hideEvent(self, event):
        self.show()


class Window(QtGui.QWidget):
    def __init__(self, parent=None):
        super(Window, self).__init__(parent)

        self.menu = PermanentMenu()

        self.menu.addAction('one')
        self.menu.addAction('two')

        self.submenu = self.menu.addMenu('submenu')
        self.submenu.addAction('sub one')
        self.submenu.addAction('sub two')

        self.submenu2 = self.menu.addMenu('submenu 2')
        self.submenu2.addAction('sub 2 one')
        self.submenu2.addAction('sub 2 two')

        layout = QtGui.QHBoxLayout()
        layout.addWidget(self.menu)
        self.setLayout(layout)

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)

    w = Window()
    w.show()

    sys.exit(app.exec_())
"
Get all elements in a list where the value is equal to certain value,"lst = [[3, 4.6575, 7.3725], 
       [3, 3.91, 5.694],
       [2, 3.986666666666667, 6.6433333333333335],
       [1, 3.9542857142857137, 5.674285714285714]]

# group the values in a dictionary
import collections
d = collections.defaultdict(list)
for item in lst:
    d[item[0]].append(item)
# find sum of values
for key, value in d.items():
    print [key] + map(sum, zip(*value)[1:])
"
How can I sum the product of two list items using for loop in python?,"sum(i * j for i, j in zip(a, b))"
How to recognize whether a script is running on a tty?,"sys.stdout.isatty()
"
Union of many Counters,"result = Counter()
for c in counters:
    result |= c
"
BeautifulSoup and &nbsp;,"html = ""<tag>&nbsp;</tag>""
from bs4 import BeautifulSoup
print BeautifulSoup(html).encode_contents(formatter='html')
"
Convert user input strings to raw string literal to construct regular expression,">>> re.escape(motif)
'\\\\section'
>>> re.escape('\n [hello world!]')
'\\\n\\ \\[hello\\ world\\!\\]'
"
Python: use string variable as search pattern in regex,">>> tgt='AGAGAGAGACGTACACAC'
>>> re.match(r'{}'.format('ACGT'), tgt)
>>> re.search(r'{}'.format('ACGT'), tgt)
<_sre.SRE_Match object at 0x10a5d6920>
"
special character at the begin who match with the end from every word [only regex],"import re
a = (""as-df-- as-df- as-df (as-df) 'as-df' asdf-asdf) (asd-f""
     ""asdf' asd-f' -asdf- %asdf%s asdf& $asdf$ +asdf+ asdf++ asdf''"")
b = re.sub(r""((?<=\s)|\A)(?P<chr>[-()+%&'$])([^\s]*)(?P=chr)((?=\s)|\Z)"",r""\3"",a)
print b
"
Python Numpy Array Operator x += y Different From x = x + y?,"v = np.array([1, 1, 1])
u_list = [v]

print(id(v))
for i in range(2):
    v = v + np.array([i, i, i])
    u_list.append(v)
    print(id(v))
"
urllib2.urlopen(): getting the size of the content,">>> result = urllib2.urlopen('http://www.spiegel.de')
>>> result.headers['content-length']
'181291'
"
Run a command every one second using threads in python,"import threading

def printit():
  threading.Timer(1.0, printit).start()
  #do your work here

printit()
"
Scraping content from AJAX onclick pop-up,"
...

# start session
session = requests.Session()

r = session.get(base_url)
soup = BeautifulSoup(r.text)

table = soup.find('table', {'id':'tableResultat'})
trs = table.findAll('tr')

for tr in trs:
    span = tr.find('span')
    cle = span.get('id')

    url = 'https://j2c-com.com/Euronaval14/catalogueWeb/ajaxSociete.php?cle=' + cle + '&rnd=' + generate_random_number(0,9999999999999999)
    pop = session.post(url)  # <-- the POST request here contains cookies returned by the first GET call

    print url
    print pop.text

    break
"
Converting Column with string separated values into rows,"In [107]: df
Out[107]: 
                var1   var2        var3
0        47429,47404  10700  1403298300
1  23030,23831,23147  99999  1403297100

In [108]: pd.concat((pd.Series((v, row['var2'], row['var3']), df.columns) for _, row in df.iterrows() for v in row['var1'].split(',')), axis=1).T
Out[108]: 
    var1   var2        var3
0  47429  10700  1403298300
1  47404  10700  1403298300
2  23030  99999  1403297100
3  23831  99999  1403297100
4  23147  99999  1403297100
"
Python Downloading Data File from Web-Scraped URL,"In [1]: import requests

In [2]: r = requests.get('http://nppes.viva-it.com/NPI_Files.html')

In [3]: import re

In [4]: re.findall('http.*NPPES.*\.zip', r.text)
Out[4]: 
['http://nppes.viva-it.com/NPPES_Data_Dissemination_March_2015.zip',
 'http://nppes.viva-it.com/NPPES_Deactivated_NPI_Report_031015.zip',
 'http://nppes.viva-it.com/NPPES_Data_Dissemination_030915_031515_Weekly.zip',
 'http://nppes.viva-it.com/NPPES_Data_Dissemination_031615_032215_Weekly.zip',
 'http://nppes.viva-it.com/NPPES_Data_Dissemination_032315_032915_Weekly.zip',
 'http://nppes.viva-it.com/NPPES_Data_Dissemination_033015_040515_Weekly.zip',
 'http://nppes.viva-it.com/NPPES_Data_Dissemination_100614_101214_Weekly.zip']
"
Python : efficient bytearray incrementation,"
>>> i = byte_array(4)
>>> next(i)
[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]
>>> next(i)
[[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1]]
"
Python string vowel counter,"function = lambda x: expression_here
"
How to avoid '\n' and '\t' escaping sequence when string is assigned to a variable,">>> s = r'C:\Users\Client\tests\doc_test_hard.docx'
>>> s
'C:\\Users\\Client\\tests\\doc_test_hard.docx'
"
Python: Iterate through an html file,"#!/usr/bin/env python

import sys

with open(""test.txt"") as file:
    for line in file:
        if ""got"" in line:
            print ""found: {0}"".format(line)
"
How can I match multiple elements enclosed in corner brackets with python regex?,"import re
str = '''<a href=""javascript:updateParent('higashino/index.html')"">東野 圭 吾「夢幻花」「白夜行」</a>他<br>'''
match = re.findall(r'「([^」]*?)」', str)
print(match)
"
Python; Dictionary iteration,"z = []
for k, v in b.iteritems():
    if v not in {""Supplementary"", ""Assignment"", ""Smith"", ""Bowen""}:
        z.append(k)
"
Punnett Square Function: Matching Items in Lists,">>> from itertools import product, izip
"
Mask zero values from pandas plot,"df[df.A != 0].plot()
df[df.B != 0].plot()
"
Everything after/before regex in Python,"@([^:]+)
"
How to read a RSA public key in PEM + PKCS#1 format,"from Crypto.PublicKey import RSA
from base64 import b64decode

key64 = b'MIGJAoGBAJNrHWRFgWLqgzSmLBq2G89exgi/Jk1NWhbFB9gHc9MLORmP3BOCJS9k\
onzT/+Dk1hdZf00JGgZeuJGoXK9PX3CIKQKRQRHpi5e1vmOCrmHN5VMOxGO4d+znJDEbNHOD\
ZR4HzsSdpQ9SGMSx7raJJedEIbr0IP6DgnWgiA7R1mUdAgMBAAE='

keyDER = b64decode(key64)
keyPub = RSA.importKey(keyDER)
"
Getting the indices of several elements in a NumPy array at once,">>> np.in1d(b, a).nonzero()[0]
array([0, 1, 4])
"
shorthand for [:alpha:] in python regex,">>> import re
>>> regex = re.compile(r""[^\W\d_]"", re.UNICODE)
>>> regex.findall(""aä12_"")
['a', 'ä']
"
"Example from ""Python for Data Analysis"", Chapter 2","def get_counts(sequence):
    counts = {}
    for x in sequence:
        if x in counts:
            counts[x] += 1
    else: #XXX wrong indentation
        counts[x] = 1 # it is run after the loop if there is no `break` 
    return counts
"
Use BeautifulSoup to extract text before the first child tag,"parsed.find('a').previousSibling # or something like that
"
parsing a file into a list of lists,"li = [line.strip()[1:-1].split() for line in file]
"
Length of tab character,"print repr('test\ttest 2'.expandtabs(8))
print repr('tessst\ttest 2'.expandtabs(8))
# output: 'test    test 2'
#         'tessst  test 2'
"
Sort dictionary values and discard those which do not have a value,">>> [v for k, v in sorted(x for x in dict1.items() if x[1])]
['2', '1', '3']
"
"What type of file is the ""sound fragment"" parameter for audioop?","wav = wave.open(""piano2.wav"")
print(audioop.avg(wav.readframes(wav.getnframes()), wav.getsampwidth()))

# if you don't call rewind, next readframes() call 
# will return nothing and audioop will fail

wav.rewind() 
print(audioop.max(wav.readframes(wav.getnframes()), wav.getsampwidth()))
"
Creating a list by searching for substrings in python,"filtered_list = [padded_name for padded_name in padded_names if any(padded_name.find(name) >= 0 for name in names)]
"
Flip non-zero values along each row of a lower triangular numpy array,"# row, column indices of the lower triangle of B
r, c = np.tril_indices_from(B)

# flip the column indices by subtracting them from r, which is equal to the number
# of nonzero elements in each row minus one
B[r, c] = B[r, r - c]

print(repr(B))
# array([[ 1.  ,  0.  ,  0.  ,  0.  ],
#        [ 0.75,  0.25,  0.  ,  0.  ],
#        [ 0.7 ,  0.2 ,  0.1 ,  0.  ],
#        [ 0.1 ,  0.4 ,  0.3 ,  0.2 ]])
"
"How to get text from inside a <span class=""className"">TEXT I WANT</span> in Python","from BeautifulSoup import BeautifulSoup

data='<span class=""rating-count"">TEXT I WANT</span>'
soup=BeautifulSoup(data)
t=soup.find('span',{'class':'rating-count'})
print t.text
"
How can we pass an attribute from child to parent?,"class IVone83c(object):
    def __init__(self):
        self.candidateList = ['goodbye']

    def resolve(self, SabxarUpa, candiList):
        #print(self.candidateList)
        print(self)
        self.candidateList.extend(candiList)


class IVone92c(IVone83c):

    def check(self,SabxarUpa, rule=None):
        self.candidateList = [IVone92c]
        iv83 = IVone83c()
        iv83.candidateList.extend(self.candidateList)
        self.candidateList = iv83.candidateList[:]
        print iv83.candidateList
        print self.candidateList
        #Where do you want to save iv83?

iv92 = IVone92c()
iv92.check('hello')

--output:--
['goodbye', <class '__main__.IVone92c'>]
['goodbye', <class '__main__.IVone92c'>]
"
Every possible combination of a multi-list,"import itertools

list_a = [(""A"",""<"",1), (""A"",""=="",5)]
list_b = [(""B"",""<"",5), (""B"",""=="",7), (""B"","">="",8)]
list_c = [(""C"",""<"",10),(""C"",""<="",6),(""C"","">"",4),(""C"",""<="",6)]

lists = [list_a, list_b, list_c]


for l in lists: l.insert(0, None)

for x in itertools.product(*lists):
    print list(filter(None, x))
"
Extract Only Unicode Characters from a String using Regular Expressions,"re.sub(ur""[^\u0900-\u097F]+"", """", mystring)
"
Adding lambda functions with the same operator in python,"def y(u):
    return u**(-2) + 8
"
how to locate the center of a bright spot in an image?,"import skimage.io
import skimage.segmentation
import numpy as np
import matplotlib.pyplot as plt

# Read in the image
# Note - intensities are floating point from [0,1]
im = skimage.io.imread('balls.jpg', True)

# Threshold the image first then clear the border
im_clear = skimage.segmentation.clear_border(im > (200.0/255.0))

# Determine where to split up the image
split_point = int(im.shape[1]/5)

# Show image in figure and hold to place dots in
plt.figure()
plt.imshow(np.dstack([im,im,im]))

# For each image...
for idx in range(5):

  # Extract sub image
  img = im_clear[:,idx*split_point:(idx+1)*split_point]

  # Find coordinates of thresholded image
  y,x = np.nonzero(img)

  # Find average
  xmean = x.mean()
  ymean = y.mean()

  # Plot on figure
  plt.plot(xmean + idx*split_point, ymean, 'r.', markersize=14)

# Show image and make sure axis is removed
plt.axis('off')
plt.show()
"
Updating array of dicts position field,"# Update the dictionary list entry matching the id in dictitem with a new position
def updatedictlist(dictlist, dictitem):

    # Get the dict item from the dict list matching the id in dictitem
    upditem = next(item for (index, item) in enumerate(dictlist) if item['_id'] == dictitem['_id'])

    # If there is a StopIteration exception then the dictitem position we 
    # are trying to update TO doesn't exist so we can go ahead and update
    # the dictitem with a new position without making any other changes.
    try:
        dstitem = next(item for (index, item) in enumerate(dictlist) \
                            if item['position'] == dictitem['position'])
    except StopIteration:
        # Update the dictlist and return the list.
        upditem['position'] = dictitem['position']
        return dictlist

    # We only want to update the values between range of values we care about
    # leaving the rest alone.
    rangelow, rangehigh = (min(upditem['position'], dstitem['position']), \
                           max(upditem['position'], dstitem['position']))

    # Since we are replacing a value it matters whether the destination is
    # ahead of us or behind us.
    direction = -1 if upditem['position'] - dstitem['position'] < 0 else 1

    # Shift the values that fall within the position range we are processing
    for item in dictlist:
        if (rangelow <= item['position'] <= rangehigh):
            item['position'] += direction

    # Finally process the dictitem we wanted to update
    upditem['position'] = dictitem['position']

    return dictlist

items = [{'position': 0, '_id': 'Bob'}, {'position': 1, '_id': 'Tom'}, {'position': 2, u'_id': 'Sam'}]
data = {'_id': 'Tom', 'position': 2}
print updatedictlist(copy.deepcopy(items), data)

data = {'_id': 'Bob', 'position': 2}
print updatedictlist(copy.deepcopy(items), data)
"
Python - workaround with sets,"n = 27
print ""{0:b}"".format(n).zfill(10) # prints ""0000011010""
"
"In Python, count unique key/value pairs in a dictionary","class DisjointSet:
    def __init__(self):
        self.parent = {}
        self.rank = {}

    def find(self, element):
        if element not in self.parent: # leader elements are not in `parent` dict
            return element
        leader = self.find(self.parent[element]) # search recursively
        self.parent[element] = leader # compress path by saving leader as parent
        return leader

    def union(self, leader1, leader2):
        rank1 = self.rank.get(leader1,0)
        rank2 = self.rank.get(leader2,0)

        if rank1 > rank2: # union by rank
            self.parent[leader2] = leader1
        elif rank2 > rank1:
            self.parent[leader1] = leader2
        else: # ranks are equal
            self.parent[leader2] = leader1 # favor leader1 arbitrarily
            self.rank[leader1] = rank1+1 # increment rank
"
Collecting a value from Json,">>> import json
>>> sample = '''\
... {
...     ""status"": ""success"",
...     ""data"": [
...         {
...             ""notes"": [],
...             ""handles"": {
...                 ""twitter"": [
...                     {
...                         ""networkinstance"": ""twitter"",
...                         ""Uid"": ""fefewf32ff32f232f3f"",
...                         ""id"": ""243425324242"",
...                         ""@class"": ""Provider""
...                     }
...                 ]
...             },
...             ""id"": ""g43g5434g43f2f3"",
...             ""tags"": []
...         }
...     ]
... }
... '''
>>> json_result = json.loads(sample)
>>> json_result['data'][0]['id']
u'g43g5434g43f2f3'
"
Finding which rows have all elements as zeros in a matrix with numpy,"In [20]: a
Out[20]: 
array([[0, 1, 0],
       [1, 0, 1],
       [0, 0, 0],
       [1, 1, 0],
       [0, 0, 0]])

In [21]: np.where(~a.any(axis=1))[0]
Out[21]: array([2, 4])
"
How do I return the index number for nth occurrence of a given value?,"def nth_index(sequence, n, value):
    i = -1
    for _ in xrange(n):
        i = sequence.index(value, i + 1)
    return i

 lst = [0,0,1,1,0,1,0,0,0,1,0,1,1,0,1,0]
 print nth_index(lst, 5, 1) # 11
"
Unit testing a method called during initialization?,"class Positive(object):
    def __init__(self, item):
        self._validate_item(item)
        self.item = item

    @staticmethod
    def _validate_item(item):
        if item <= 0:
            raise ValueError(""item should be positive."")
"
Reading multiple numbers from a text file,"with open(""datafile"") as f:
    for line in f:  #Line is a string
        #split the string on whitespace, return a list of numbers 
        # (as strings)
        numbers_str = line.split()
        #convert numbers to floats
        numbers_float = [float(x) for x in numbers_str]  #map(float,numbers_str) works too
"
Pandas: convert upper triangular dataframe by shifting rows to the left,"roller = lambda (i, x): np.roll(x, -i)
row_terator = enumerate(df.values)
rolled = map(roller, row_terator)
result = DataFrame(np.vstack(rolled), index=df.index, columns=df.columns)
"
Sum of two variables in RobotFramework,"*** Test Cases ***
sum of variables
  ${calculatedTotalPrice} =    set variable    ${42.42}
  ${productPrice1} =    set variable    ${43.15}
  ${calculatedTotalPrice} =    Evaluate    ${calculatedTotalPrice}+${productPrice1}
  log to console  ${calculatedTotalPrice}
"
"Remove all data in a DF by group based on a condition (pandas,python3)","def filter_enrollment(df):
    enrolled = df[df.Enrolled == 1].index.min()
    if pd.isnull(enrolled):
        return df
    else:
        return df[df.index <= enrolled]
"
Python: If in a For Loop,"points = itertools.product(range(0, 8 * a, a), repeat=3)
points = (p for p in points if p != (4 * a, 4 * a, 4 * a))
with open(""filename"", ""w"") as f:
    for id_p in enumerate(points, 1):
        f.write(""%4.d  1  4  %4.3f  %4.3f  %4.3f\n"" % id_p)
"
using python WeakSet to enable a callback functionality,"import weakref


class ClassA:
    def __init__(self):
        self._callbacks = []

    def registerCallback(self, callback):
        try:
            # methods
            callback_ref = weakref.ref(callback.__func__), weakref.ref(callback.__self__)
        except AttributeError:
            callback_ref = weakref.ref(callback), None
        self._callbacks.append(callback_ref)

    def __del__(self):
        for callback_ref in self._callbacks:
            callback, arg = callback_ref[0](), callback_ref[1]
            if arg is not None:
                # method
                arg = arg()
                if arg is None:
                    # instance is gone
                    continue
                callback(arg, self)
                continue
            else:
                if callback is None:
                    # callback has been deleted already
                    continue
                callback(self)
"
Python: extract strings between defined characters and store into a disctionary with lists,"import os

def extract(name):
    with open(name, ""rt"") as f:
        a = []
        for line in f:
            line = line.rstrip(""\r\n"")
            if line.startswith(""###### "") and line.endswith("" ######""):
                a.append(line[7:-7])
        return a

def create_dict(path):
    h = {}
    for name in os.listdir(path):
        a = extract(os.path.join(path, name))
        if a:
            h[name] = a
    return h
"
"SKLearn Kernel PCA ""Precomputed"" argument","def linear_kernel(X, Y):
    return X.dot(Y.T)

X = np.random.randn(10, 20)
gram = linear_kernel(X, X)
"
Sort numeric lines with thousand separators,"from locale import atof
import locale

locale.setlocale(locale.LC_ALL, 'de_DE')
import re

wrong_type = object()


def atof_try(x):
    try:
        return atof(x.split()[0])
    except ValueError:
        return wrong_type


def atof_pre(x, patt=re.compile(""^\d+"")):
    try:
        _atof = atof_try(x)
        if _atof is not wrong_type:
            return _atof
        temp = patt.search(x)
        return int(temp.group())
    except (ValueError, IndexError, AttributeError):
        return wrong_type


def merge_types(l, out):
    for ele in l:
        if atof_pre(ele) is not wrong_type:
            yield ele
        else:
            out.append(ele)
"
Stripping chars in python,">>> '<td>some test</td>'.replace('<td>', '')
'some test</td>'
"
Print out dictionary in a table format?,"for channel_number in channel_numbers:
    channel_data = band2['channel%d' % channel_number]
    column = [
        'Channel %d' % channel_number,
        str(channel_data[0]),
        '%s/%s' % (channel_data[1], channel_data[2]),
        str(channel_data[3])
    ]
    cell_widths = map(len, column)
    column_width = max(cell_widths)
    for i in range(len(column)):
        cell = column[i]
        padded_cell = cell + ' '*(column_width-len(cell))
        table[i].append(padded_cell)

for line in table:
    # If tabs don't make the columns align properly, try iterating through
    # column in line, and padding it with the appropriate number of spaces.
    print(' '.join(line))
"
how to make subprocess called with call/Popen inherit environment variables,"def source(script, update=True):
    """"""
    http://pythonwise.blogspot.fr/2010/04/sourcing-shell-script.html (Miki Tebeka)
    http://stackoverflow.com/questions/3503719/#comment28061110_3505826 (ahal)
    """"""
    import subprocess
    import os
    proc = subprocess.Popen(
        ['bash', '-c', 'set -a && source {} && env -0'.format(script)], 
        stdout=subprocess.PIPE, shell=False)
    output, err = proc.communicate()
    output = output.decode('utf8')
    env = dict((line.split(""="", 1) for line in output.split('\x00') if line))
    if update:
        os.environ.update(env)
    return env
"
Finding k-nearest neighbors for a given vector?,"def count_different_values(k_v1s, k_v2s):
    """"""kv1s and kv2s should be dictionaries mapping keys to 
    values.  count_different_values() returns the number of keys in 
    k_v1s and k_v2s that don't have the same value""""""
    ks = set(k_v1s.iterkeys()) | set(k_v2s.iterkeys())
    return sum(1 for k in ks if k_v1s.get(k) != k_v2s.get(k))


def sum_square_diffs(x0s, x1s):
    """"""x1s and x2s should be equal-lengthed sequences of numbers.
    sum_square_differences() returns the sum of the squared differences 
    of x1s and x2s.""""""
    sum((pow(x1-x2,2) for x1,x2 in zip(x1s,x2s)))

def incr(x_c, x, inc=1):
    """"""increments the value associated with key x in dictionary x_c
    by inc, or sets it to inc if key x is not in dictionary x_c.""""""
    x_c[x] = x_c.get(x, 0) + inc

def count_items(xs, x_c=None):
    """"""returns a dictionary x_c whose keys are the items in xs, and 
    whose values are the number of times each item occurs in xs.""""""
    if x_c == None:
        x_c = {}
    for x in xs:
        incr(x_c, x)
    return x_c

def second(xy):
    """"""returns the second element in a sequence""""""
    return xy[1]

def most_frequent(xs):
    """"""returns the most frequent item in xs""""""
    x_c = count_items(xs)
    return sorted(x_c.iteritems(), key=second, reverse=True)[0][0]


class kNN_classifier:
    """"""This is a k-nearest-neighbour classifer.""""""
    def __init__(self, train_data, k, distf):
        self.train_data = train_data
        self.k = min(k, len(train_data))
        self.distf = distf

    def classify(self, x):
        Ns = sorted(self.train_data, 
                    key=lambda xy: self.distf(xy[0], x))
        return most_frequent((y for x,y in Ns[:self.k]))

    def batch_classify(self, xs):
        return [self.classify(x) for x in xs]

def train(train_data, k=1, distf=count_different_values):
    """"""Returns a kNN_classifer that contains the data, the number of
    nearest neighbours k and the distance function""""""
    return kNN_classifier(train_data, k, distf)
"
Shared variable in python's multiprocessing,"import time
from multiprocessing import Process, Manager, Value

def foo(data, name=''):
    print type(data), data.value, name
    data.value += 1

if __name__ == ""__main__"":
    manager = Manager()
    x = manager.Value('i', 0)
    y = Value('i', 0)

    for i in range(5):
        Process(target=foo, args=(x, 'x')).start()
        Process(target=foo, args=(y, 'y')).start()

    print 'Before waiting: '
    print 'x = {0}'.format(x.value)
    print 'y = {0}'.format(y.value)

    time.sleep(5.0)
    print 'After waiting: '
    print 'x = {0}'.format(x.value)
    print 'y = {0}'.format(y.value)
"
change 2 byte in a string,">>> 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.replace('RS', '11', 1)
'ABCDEFGHIJKLMNOPQ11TUVWXYZ'
"
For loops and multiple conditions,"found = any(item==""the one I'm looking for"" for item in items)
"
Python - sort method parameter takes same precedence,"addressBook.contactsList.sort(key=lambda c: (c.lastName, c.firstName) if c.lastName else (c.firstName, ''))
"
Reading Specific Python list from a text file,"c={}
with open(""Sample.txt"") as f:
  for line in f:
   t=line.split(' : ')
   c.update({t[0]:t[1].split()})
for i in set(c.keys()) & set(A):  #gives set of matches between keys and A
  print c[1]
"
How do I convert to list of lists after reading from file in python,"lst2 = [6,7,8,9,10]
with open('test1.bin','ab') as f:
    pickle.dump(lst2,f)

with open('test1.bin','rb') as f1:
    lst3 = pickle.load(f1)
    print(lst3)
>> [1,2,3,4,5]
    lst4 = pickle.load(f1)
    print(lst4)
>> [6,7,8,9,10]
"
positional index using python,"import nltk

# Given a corpus of texts
text1 = 'Lorem ipsum FOO dolor BAR sit amet'
text2 = 'Ut enim ad FOO minim veniam, '
text3 = 'Duis aute irure dolor BAR in reprehenderit '
text4 = 'Excepteur sint occaecat BAR cupidatat non proident'

# We split the texts into tokens, and form a TextCollection
mytexts = (
    [nltk.word_tokenize(text) for text in [text1, text2, text3, text4]])
mycollection = nltk.TextCollection(mytexts)

# Given a new text
text = 'et FOO tu BAR Brute'
tokens = nltk.word_tokenize(text)

# for each token (roughly, word) in the new text, we compute the tf_idf
for word in tokens:
    print('{w}: {s}'.format(w = word,
                            s = mycollection.tf_idf(word,tokens)))
"
print variable and string,"var = input('Enter something:')
    print(""You entered: %s"") % (var)
"
Decorators with arguments,"def my_dec(x):
    def dec(func)
      def wrap(w):
        t=func(w)
        return t*x
      return wrap
    return dec
"
Sending e-mail after scrape in scrapy ,"def send_mail(self, message, title):
    print ""Sending mail...........""
    import smtplib
    from email.MIMEMultipart import MIMEMultipart
    from email.MIMEText import MIMEText
    gmailUser = 'mail_you_send_from@gmail.com'
    gmailPassword = 'password'
    recipient = 'mail_to_send_to'

    msg = MIMEMultipart()
    msg['From'] = gmailUser
    msg['To'] = recipient
    msg['Subject'] = title
    msg.attach(MIMEText(message))

    mailServer = smtplib.SMTP('smtp.gmail.com', 587)
    mailServer.ehlo()
    mailServer.starttls()
    mailServer.ehlo()
    mailServer.login(gmailUser, gmailPassword)
    mailServer.sendmail(gmailUser, recipient, msg.as_string())
    mailServer.close()
    print ""Mail sent""
"
NLTK count frequency of sub phrase,">>> string = ""I would like to install treehouses at my yard""
>>> string.count(""tall tree"")
1
>>> string.count("" tall tree "")
0
>>> string = ""The see a stall tree outside. A man is under the tall trees""
>>> string.count("" tall tree "")
0
>>> string = ""I see a tall tree outside. A man is under the tall tree""
>>> string.count("" tall tree "")
1
"
Beautiful soup select siblings not working,"from pprint import pprint
from urllib.request import urlopen

from bs4 import BeautifulSoup

URL = urlopen(""http://www.arrondissement.com/plateau_mont_royal/s1-alimentation/"")
soup = BeautifulSoup(URL, ""html.parser"")

data = {}
divisions = soup.select(""ul[name=divisions_form] ul > li"")
for division in divisions:
    data[division.a.get_text(strip=True)] = [
        subitem.a.get_text(strip=True) for subitem in division.select("".divisionDDM > li"")
    ]

pprint(data)
"
How can I detect if the caller passed any variables to my function in Python?,"def pv(var):
    (filename,line_number,function_name,text)=traceback.extract_stack()[-2]
    print('%s: %s'%(text[text.find('(')+1:-1],var))

x=5
pv(x)
# x: 5
"
"Regex to Filter out "">"" and ""=20"" from email.message_from_string","import re

chevrons = re.compile(""(?m)^[> ]*"")
stripped = re.sub(chevrons, """", decoded)
"
add the position of the element to the element in the list,"def add_position_to_content(lint):
    for i in range (len(lint)):
        lint[i] += i
    return lint
"
Passed argument/parameter in function is still being changed after removing the reference/alias,"from copy import deepcopy
list2 = deepcopy(list1)
"
Formating date in Web2py Python,"db.mytable.datetime_field.represent = lambda value, row: value.strftime(""format-here"")
"
Merge lists of different size with order,">>> list(izip_longest(L1,L2,L3,fillvalue='my_awesome_fillval'))
[(1.1, 2.1, 3.1), (1.2, 2.2, 3.2), (1.3, 2.3, 'my_awesome_fillval'), ('my_awesome_fillval', 2.4, 'my_awesome_fillval')]
"
Ensuring python equivalence of matlab's `fread`,"import numpy as np

def fread(fid, nelements, dtype):
     if dtype is np.str:
         dt = np.uint8  # WARNING: assuming 8-bit ASCII for np.str!
     else:
         dt = dtype

     data_array = np.fromfile(fid, dt, nelements)
     data_array.shape = (nelements, 1)

     return data_array

fid = open('test.bin', 'rb');

print fread(fid, 2, np.int16)
print fread(fid, 32, np.str)
print fread(fid, 2, np.int16)
"
Comparing 2 lists consisting of dictionaries with unique keys in python,">>> from operator import itemgetter
>>> list_1, list_2 = [sorted(l, key=itemgetter('unique_id')) 
                      for l in (list_1, list_2)]
"
Select Pandas rows based on list value,"In [11]: df = pd.DataFrame([[['urn:dew_point'], 1]], columns=['properties', 'id'])

In [12]: df
Out[12]:
        properties  id
0  [urn:dew_point]   1

In [13]: df[df['properties'].apply(lambda x: 'urn:dew_point' in x)]
Out[13]:
        properties  id
0  [urn:dew_point]   1
"
How to manage python threads results?,"class MyThread(threading.Thread):
    def __init__(self, ...):
        self.result = []
        ...

def main():
    # doStuffWith() returns a MyThread instance
    threads = [ doStuffWith(k).start() for k in arrayofkeywords[:maxThreads] ]
    for t in threads:
        t.join()
        ret = t.result
        # process return value here
"
What are the limitations of callback functions associated with Tkinter traces?,"from Tkinter import *

class App(object):
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        optionvalue = IntVar(master)
        optionvalue.set(2)
        optionvalue.trace(""w"", self.callbackfunc)
        self.optionmenu = OptionMenu(master, optionvalue, 1, 2, 3, 4)
        self.optionmenu.pack()
        self.state = []

    def callbackfunc(self, *args):
        self.state.append(args)
        print self.state


root = Tk()
app = App(root)
root.mainloop()
"
Using BeautifulSoup for html scraping,"# pip install selenium 
from selenium import webdriver
import time

driver = webdriver.Firefox()
driver.get(""http://voyager.jpl.nasa.gov/where/index.html"")
time.sleep(5)
elem = driver.find_element_by_class_name(""tr_dark"")
print elem.text
driver.close()
"
Make single column of numpy array another datatype,"dt = {'names': ['user', 'gender', 'number'], 'formats':['a10', 'a10', 'float']}
my_arr = np.array(dat, dt)  # dat is the list with tuples, see above
"
How to read complex numbers from file with numpy?,">>> import pandas as pd
>>> f.seek(0)
>>> pd.read_csv(f, delimiter=' ', index_col=0, names=['a', 'b'],
...             converters={1: parse_pair, 2: parse_pair})
             a           b
1  (1.2+0.16j)  (2.8+1.1j)
2  (2.85+6.9j)  (5.8+2.2j)
"
Python: Force pprint to display unicode strings as strings?,"import pprint

def no_unicode(object, context, maxlevels, level):
    """""" change unicode u'foo' to string 'foo' when pretty printing""""""
    if pprint._type(object) is unicode:
        object = str(object)
    return pprint._safe_repr(object, context, maxlevels, level)

mypprint = pprint.PrettyPrinter()
mypprint.format = no_unicode
"
regex to match file names blahblah_200901.csv (yyyymm),"m = re.match('blahblah(\d{4})(\d{2})', f)
if m:
    year = int(m.group(1))
    month = int(m.group(2))

    if (from_year, from_month) <= (year, month) <= (to_year, to_month):
        print(f)
"
Alternative to numpy.random.binomial that allows 64 bits or more?,"def approx_binomial(n, p, size=None):
    gaussian = np.random.normal(n*p, n*p*(1-p), size=size)
    # Add the continuity correction to sample at the midpoint of each integral bin.
    gaussian += 0.5
    if size is not None:
        binomial = gaussian.astype(np.int64)
    else:
        # scalar
        binomial = int(gaussian)
    return binomial
"
Efficiently select random non-zero column from each row of sparse matrix in scipy,"In [262]: Ml=M.tolil()

In [263]: Ml.data
Out[263]: 
array([[0.863902562935336], [], [0.8524430195076207, 0.8854932609233054],
       [0.7873736126927198], [], [0.9991856090158101], [],
       [0.8986252926235274, 0.8684252408594123], [0.2571477751356357],
       [0.4174032029993796, 0.3313750148434619]], dtype=object)

In [264]: Ml.rows
Out[264]: array([[1], [], [5, 8], [8], [], [9], [], [0, 3], [9], [4, 5]], dtype=object)

In [265]: [np.random.choice(x) for x in Ml.rows if x]
# some rows might not have any nonzero
Out[265]: [1, 5, 8, 9, 3, 9, 5]

In [268]: [np.random.choice(x.nonzero()[1]) for x in M if len(x.nonzero()[1])]
Out[268]: [1, 5, 8, 9, 0, 9, 4]
"
How to find the real user home directory using python?,os.path.expanduser('~user')
Numpy elementwise product of 3d array,"np.einsum('ijk,ikl->ijl', A, B)"
PyQt4 -— I want to use keyboard-shortcuts in my code,"class MainWindow (QtGui.QMainWindow): 
    def __init__ (self, parent = None): 
        QtGui.QMainWindow.__init__(self, parent)
        .
        .
        .
        self.myQCustomDialog = QCustomDialog() # <- From code 1
        ui = Ui_Dialog()                       # <- From code 1
        ui.setupUi(self.myQCustomDialog)       # <- From code 1
        self.setCentralWidget(self.myQCustomDialog) # <- Set to this central widget
        .
        .
        .
        self.connect(QtGui.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Escape), self), QtCore.SIGNAL('activated()'), self.down)

def down(self): 
    print 'DOWN!!!'
    # Or put code to implement from code 1
"
Python operators returning ints,"stack.push(1 if stack.pop() > stack.pop() else 0)
"
python: using nested lists as arguments,"for item in lst:
    func(*item)
"
In python replacing characters from multiple char maps,"all_of_unicode = set(range(0x10ffff))
iso_8859_2 = {ord(chr(i).decode('iso-8859-2')) for i in xrange(0xff)}
iso_8859_5 = {ord(chr(i).decode('iso-8859-5')) for i in xrange(0xff)}
# map the difference to None values
to_remove = dict.fromkeys(all_of_unicode - iso_8859_2 - iso_8859_5)
text_using_only_iso_8859_2_or_5 = unicodetext.translate(to_remove)
"
Having a Function change variable in Python 3.4?,"player1.health = min(player1.health, player1.max_health)
"
How to do a loop inside of a loop in python,"for b in range(56):
    for a in range(57):
        print ""a:"", a, ""b:"", b
"
Remove empty spaces inside <p> tags using BeautifulSoup,"for p in soup.find_all('p'):
    if p.string:
        p.string.replace_with(p.string.strip())
"
swap one element list to int,"a[2].keys()[0]
"
A function-like variable,">>> from itertools import izip, chain, count
>>> for name, number in izip(list1, chain(list2, (random.choice(list2) for _ in count()))):
    print name, number
"
Is there any smart way to combine overlapping paths in python?,">>> p1=""/root/d1/d2/d1/d2""
>>> p2=""d2/d1/d2/file.txt""
>>> p1+'/'+'/'.join([i for i in p2.split('/') if i not in p1.split('/')])
'/root/d1/d2/d1/d2/file.txt'
"
(Python) Formatting strings for struct.unpack?,"row = ['222','7']

struct.unpack('H', bytearray(map(int,row)))
Out[24]: (2014,)
"
Filling textarea with Python mechanize module,"#---------------------------------------------------
class TextControl(ScalarControl):
    """"""Textual input control.

    Covers:

    INPUT/TEXT
    INPUT/PASSWORD
    INPUT/HIDDEN
    TEXTAREA

    """"""
    def __init__(self, type, name, attrs, index=None):
        ScalarControl.__init__(self, type, name, attrs, index)
        if self.type == ""hidden"": self.readonly = True
        if self._value is None:
            self._value = """"

    def is_of_kind(self, kind): return kind == ""text""
"
Using Selenium to extract text...but text has 0 opacity,"browser.execute_script(""var a = document.getElementById('result-error').style; a.display = 'block'; a.visibility = 'visible'; a.opacity = 100;"")
el = browser.find_element_by_class_name(""one"")
print el.text
"
Replacing characters within a list,">>> finalPathList = [elem.replace(""\\"", ""/"") for elem in pathList]
>>> finalPathList
['C:/Users', 'C:/Documents', 'C:/Downloads/Test']
"
How to place numbers in a python list at the index of their magnitude,">>> import numpy as np
>>> l=[5,2,1,4,3]
>>> max_len=max(l)
>>> [[elem if elem-1==i else v for i,v in enumerate(arr)] for elem,arr in zip(l,[np.zeros(max_len) for _ in range(max_len)])]
[[0.0, 0.0, 0.0, 0.0, 5], [0.0, 2, 0.0, 0.0, 0.0], [1, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 4, 0.0], [0.0, 0.0, 3, 0.0, 0.0]]
"
Python Challenge Lvl 3 Explaination (warning spoilers!),"pat = re.compile('''
    [^A-Z]    # any character except a capital letter
    [A-Z]{3}  # three capital letters
    (         # the beginning of a capturing group
    [a-z]     # one lowercase letter 
    )         # the end of the group
    [A-Z]{3}  # three capital letters
    [^A-Z]    # any character except a capital letter
    ''', re.VERBOSE)
"
"Random split list, keeping the original order in new lists","def random_split(items, size):
    sample = set(random.sample(items, size))
    return sorted(sample), sorted(set(items) - sample)
"
Computing complex math equations in python,"In [1]: a = arange(50)

In [2]: b = ones(50) * 2

In [3]: a
Out[3]: 
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49])

In [4]: b
Out[4]: 
array([ 2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,
        2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,
        2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,
        2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.])

In [5]: a * b
Out[5]: 
array([  0.,   2.,   4.,   6.,   8.,  10.,  12.,  14.,  16.,  18.,  20.,
        22.,  24.,  26.,  28.,  30.,  32.,  34.,  36.,  38.,  40.,  42.,
        44.,  46.,  48.,  50.,  52.,  54.,  56.,  58.,  60.,  62.,  64.,
        66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,  82.,  84.,  86.,
        88.,  90.,  92.,  94.,  96.,  98.])

In [6]: (a * b).sum()
Out[6]: 2450.0
"
Using recursion to reverse a list in python?,"def reverseList(listXS):
    return [] if not listXS else listXS[-1:] + reverseList(listXS[:-1])
"
Remove duplicate rows in CSV comparing data in only two columns with Python,"with open(""test.csv"", encoding=""utf-8"") as f, open(""file_out.csv"", ""w"") as out:
    from collections import Counter
    from csv import reader, writer
    wr = writer(out)
    header = next(f) # get header
    # get count of each first/last name pair lowering each string
    counts = Counter((a.lower(), b.lower()) for a, b, *_ in reader(f))
    f.seek(0) # reset counter 
    out.write(next(f))  # write header ?
    # iterate over the file again, only keeping rows which have
    # unique first and second names
    wr.writerows(row for row in reader(f)
                   if counts[row[0].lower(),row[1].lower()] == 1)
"
How to dump all the variables in a file?,"json.dumps(locals(), default=repr)
"
Python decimal rounding,"from decimal import *

getcontext().prec = 6 
getcontext().rounding = ROUND_FLOOR

print Decimal(22)/Decimal(7)
"
How to improve the code with more elegant way and low memory consumed?,"import pandas as pd

#read subset from csv and remove duplicate indices
subset = pd.read_csv('8kx1.csv', index_col=[0]).index.unique()
print subset

#use subset as filter of columns
tp = pd.read_csv('input.csv',iterator=True, chunksize=1000, usecols=subset) 
df = pd.concat(tp, ignore_index=True)

print df.head()
print df.shape

#write to csv 
df.to_csv('output.csv',iterator=True, chunksize=1000)
"
How do I include quotation marks in a print statement if I am using a variable,"print(""The length of '{}' is {}"".format(word, word_length))
"
How to extract the verbs and all corresponding adverbs from a text?,"wnl = nltk.stem.WordNetLemmatizer()
...
for verb, adverb in pairs:
    verb = wnl.lemmatize(verb.lower(), ""v"")
    consolidated[verb].add(adverb)
"
Removing duplicates from a list of lists based on a comparison of an element of the inner lists,"l = [[1, 2, 3], [1, 3, 4], [1, 4, 5], [2, 4, 3], [2, 5, 6], [2, 1, 3]]
d = {}
for sub in l:
    k = sub[0]
    if k not in d or sub[1] < d[k][1]:
        d[k] = sub
"
Matching one-line JavaScript comments (//) with re,"code = r""""""// this is a comment
var x = 2 * 4 // and this is a comment too
var url = ""http://www.google.com/"" // and ""this"" too
url += 'but // this is not a comment' // however this one is
url += 'this ""is not a comment' + "" and ' neither is this "" // only this

bar = 'http://no.comments.com/' // these // are // comments
bar = 'text // string \' no // more //\\' // comments
bar = 'http://no.comments.com/'
bar = /var/ // comment

/* comment 1 */
bar = open() /* comment 2 */
bar = open() /* comment 2b */// another comment
bar = open( /* comment 3 */ file) // another comment 
""""""

parts = rx.findall(code)
print '*' * 80, '\nCode:\n\n', '\n'.join([x[0] for x in parts if x[0].strip()])
print '*' * 80, '\nMulti line comments:\n\n', '\n'.join([x[1] for x in parts if x[1].strip()])
print '*' * 80, '\nOne line comments:\n\n', '\n'.join([x[2] for x in parts if x[2].strip()])
"
Using BeautifulSoup to parse by id,"soup.find_all(""a"", id=re.compile(r""^link\d+$"")  # id starts with 'link' followed by one or more digits at the end of the value
soup.find_all(""a"", id=lambda value: value and value.startswith(""link""))  # id starts with 'link'
"
how to find most frequent string element in numpy ndarray?,">>> unique,pos = np.unique(A,return_inverse=True) #Finds all unique elements and their positions
>>> counts = np.bincount(pos)                     #Count the number of each unique element
>>> maxpos = counts.argmax()                      #Finds the positions of the maximum count

>>> (unique[maxpos],counts[maxpos])
('d', 2)
"
How to tweak the NLTK sentence tokenizer,"text = text.replace('?""', '? ""').replace('!""', '! ""').replace('.""', '. ""')
"
Get list of all paginated URL's from links in txt file in python requests,"import mechanize

import requests
from bs4 import BeautifulSoup, SoupStrainer
import urlparse

import pprint

#-- Mechanize --
br = mechanize.Browser()

def get_links_mechanize(root):
    links = []
    br.open(root)

    for link in br.links():
        try:
            if dict(link.attrs)['class'] == 'page':
                links.append(link.absolute_url)
        except:
            pass
    return links


#-- Requests / BeautifulSoup / urlparse --
def get_links_bs(root):
    links = []
    r = requests.get(root)

    for link in BeautifulSoup(r.text, parse_only=SoupStrainer('a')):
        if link.has_attr('href') and link.has_attr('class') and 'page' in link.get('class'):
            links.append(urlparse.urljoin(root, link.get('href')))

    return links


#with open(""C:\Users\Administrator\Desktop\\3.txt"",""r"") as f:
#    for root in f:
#        links = get_links(root) 
#        # <Do something with links>
root = 'http://www.apartmentguide.com/apartments/Alabama/Hartselle/'

print ""Mech:""
pprint.pprint( get_links_mechanize(root) )
print ""Requests/BS4/urlparse:""
pprint.pprint( get_links_bs(root) )
"
"in Python, dictionary sort by value, but only return key","[key for key,value in sorted(dic.items() ,key=lambda x : x[1]) if value < threshold]
"
Craps simulator Python,"class CrapsGame(object):
    def __init__(self):
        self.dice = pairOfDice()
        self.point = None
    def rolldice(self):
        self.dice.toss()
    def playagain(self):
        if input(""Roll again? (y/n): "").lower() == 'y':
            return True
        return False
    def score(self):
        result = self.dice.getTotal()
        if self.point:
            if result == 7:
                self.point = None
                # lose
            elif result == self.point:
                self.point = None
                # win
            else:
                # keep going
        else:
            if result in [7, 11]: # win
            elif result in [2,3,12]: # lose
            else:
                self.point = result
    def run(self):
        while True:
            self.rolldice()
            self.score()
            if not self.playagain():
                return

if __name__ == ""__main__"":
    game = CrapsGame()
    game.run()
"
Built-in method to Generate Random Strings of Fixed Length From Given Characters,"In [83]: import random

In [84]: '{:050b}'.format(random.randrange(1<<50))
Out[84]: '10011110110110000011111000011100101111101001001011'
"
Special cosine between scipy sparse matrices,"import numpy as np
Rip = np.array( [ i if j != 0 else 0 for i,j in zip(Ri,Rj) ] )
Rjp = np.array( [ j if i != 0 else 0 for i,j in zip(Ri,Rj) ] )
"
How read bits in 64 bit data put into corresponding bitfields in python,"class Register(object):
    def __init__(self,x):
        ## Reverse the input string then convert it to an integer
        x = int(x[2:][::-1],2)

        self.Bitfield1 = x & ((2**6)-1)
        x = x >> 6

        self.Bitfield2 = x & ((2**12)-1)
        x = x >> 12

        self.Bitfield3 = x & ((2**6)-1)
        x = x >> 6

        self.Bitfield4 = x & ((2**4)-1)
        x = x >> 4

        self.Bitfield5 = x & ((2**12)-1)
        x = x >> 12

        self.Bitfield6 = x & ((2**8)-1)
        x = x >> 8

        self.Bitfield7 = x & ((2**16)-1)

obj = Register('0b11011101110111011101110111011101110011001100110011001100110011001011101110111011101110111011101110101010101010101010101010101010')
"
Adding headers to a csv file,"from itertools import izip
zipped = izip(list1, list2, list3)
with open('existing.csv', 'rb') as infile, open('out_file.csv', 'wb') as outfile:
    reader = csv.reader(infile)
    headers = next(reader)
    writer = csv.writer(outfile)
    writer.writerow(headers+[""list1"", ""list2"", ""list3""])
    for  row in  reader:
        row.extend(next(zipped))
        writer.writerow(row)
"
Split Strings with Multiple Delimiters?,"""""""a;bcd,ef g"""""".replace(';', ' ').replace(',', ' ').split()"
Is it possible to have an if inside a tuple?,"A = (('parlament',) +
     (('queen/king',) if not country in ('england', 'sweden', …) else tuple()) +
     ('press', 'judges'))
"
How to use defaultdict to create a dictionary with a lambda function?,"class WTS(dict):
    def __missing__(self, key):
        return 1 if key[1] == somevalue else 0

wts = WTS()
"
How do you sort multiple columns of a CSV file using python?,"from operator import itemgetter
from itertools import groupby
from csv import reader


def min_z(iterable):
    # the data converted from strings to numbers
    floats = [[float(n) for n in row] for row in iterable]
    # the data sorted by x, y, z
    floats.sort(key=lambda (x, y, z, e): (x, y, z))
    # group the data by x, y
    grouped_floats = groupby(floats, key=itemgetter(slice(0, 2)))
    # return the first item from each group
    # because the data is sorted
    # the first item is the smallest z for the x, y group
    return [next(rowgroup) for xy, rowgroup in grouped_floats]


data = """"""-2.800000,-1.000000,5.470000,-0.26488315
-3.000000,1.000000,4.070000,-0.81185718
-2.800000,-1.000000,3.270000,1.29303723
-2.800000,-0.400000,4.870000,-0.51165026"""""".splitlines()


print min_z(reader(data))
"
Implementing a depth-first tree iterator in Python,"from collections import deque

def node_depth_first_iter(node):
    stack = deque([node])
    while stack:
        # Pop out the first element in the stack
        node = stack.popleft()
        yield node
        # push children onto the front of the stack.
        # Note that with a deque.extendleft, the first on in is the last
        # one out, so we need to push them in reverse order.
        stack.extendleft(reversed(node.children))
"
Python argparse: Force a list item to be unique,"import argparse

class UniqueAppendAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        unique_values = set(values)
        setattr(namespace, self.dest, unique_values)

servers = [""ApaServer"", ""BananServer"", ""GulServer"", ""SolServer"",
           ""RymdServer"", ""SkeppServer"", ""HavsServer"", ""SovServer"" ]
parser = argparse.ArgumentParser()
parser.add_argument('-o', '--only', nargs='*', choices=servers, action=UniqueAppendAction,
                    help='Space separated list of case sensitive server names to process')
print parser.parse_args()
"
regex to match a series of single Character followed by a single space,">>> re.search(r'\b(?:[a-zA-Z0-9]\s){2,}', 'My name is arun its A R U N jayapal. I am going to London.').group()
'A R U N '
"
sorting a dictionary key based on values after they are converted to integers,"mydict={'tom': '100','dick': '50','harry': '121','jim':'25'}
print sorted(mydict, key = lambda k: int(mydict[k]), reverse = True)
"
Create multi-level index pandas dataframe from delimited string column,">>> df = pd.DataFrame({
...     'col1': ['a, b', 'c, d'],
...     'col2': [100,50]
... }, index = ['A','B'])
"
How to get unigrams (words) from a list in python?,"list1.extend([u'punctuation\u2008space', u'NO-BREAKu\u00a0SPACE'])
unigram_pattern = re.compile('^\S+$', re.UNICODE)
unigrams = [word for word in list1 if unigram_pattern.match(word)]

>>> print unigrams
['evaporation', 'sunlight']
"
How to construct different-type-ones-to-many relationship?,"class A(Base):
    __tablename__ = 'as'

    id = Column(Integer, primary_key=True)
    name = Column(Unicode, nullable=False, unique=True)
    comments = relationship(""Comment"",
                    primaryjoin=""and_(A.id==Comment.id, ""
                        ""Comment.model=='A')"")

    def __init__(self, name):
        self.name = name

class Comment(Base):
    __tablename__ = 'comments'

    id = Column(Integer, primary_key=True)
    text = Column(UnicodeText, nullable=False)
    model = Column(String(50), nullable=False)

    def __init__(self, text):
        self.text = text
"
Behavior of Python's time.sleep(0) under linux - Does it cause a context switch?,"if (end_time && !end_time->tv_sec && !end_time->tv_nsec) {
    wait = NULL;
timed_out = 1;
}

if (end_time && !timed_out)
    slack = select_estimate_accuracy(end_time);
"
How do I add custom field to Python log format string?,"logging.info('Log message', extra={'app_name': 'myapp'})"
Parsing a url in Python,"url = 'http://www.example.com/wps/portal/!ut/p/c1/lYuxDJBMjBCNQ!!/?CompanyName=A1&tabOrder=7&chart_type=chart_oneDay&announcmentNumber=&isAnnual=/'
url = url.replace('Name=A1', 'Name=')
compaines = ['a1','a2','a3']
for ele in compaines:
    start = url.find(""CompanyName="") + 12
    newUrl1 = url[:start] + ele
    newUrl2 = newUrl1 + url[start:]
    print newUrl2
"
"Given two lists of strings, find the total number of strings in the second list which contains any string in the first list as substring",">>> sum(a in b for a in ListA for b in ListB)
4
"
Numpy Compare unequal rows and make both array of same dimension,">>> b[np.array([np.equal(*I) for I in zip(a[:,3],b[:,3])])]
array([[41641,  1428,     0,  2554],
       [44075,  1428,     0,  2555],
       [44901,  1428,     1,  2556],
       [45377,  1428,     0,  2557]])
"
BeatifulSoup HTML getting src link,"for link in soup.find_all(""a"", class_ = ""img-link""):
    for img in link.find_all(""a"", src=True):  # searching for img with src attribute
        print(img[""src""])
"
"Python: Compare two identical dictionaries by key, value","for k,v  in model_dict.items():
       if server_dict.get(k,object()) != v:
            print(k,v)
"
How to check whether the system is FreeBSD in a python script?,platform.system()
Is it possible to declare an optional and unique attribute for a class model in (Flask) SQLAlchemy?,"class MyModel(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    membership_id = db.Column(db.String)

    __table_args__ = (db.UniqueConstraint('membership_id'),)
"
"creating a text menu, user can't enter option again","elif choice == '4':
    import history
    get_choice()
"
Appending variable length columns in Pandas dataframe Python,"df = pd.DataFrame({'A': pd.Series(range(df.A.min(), df.A.max() + 1)),
                   'B': pd.Series(range(df.B.min(), df.B.max() + 1))})
"
How to get a value from json dictionary in python?,">>> a = b'{""username"":""test"",""available"":false,""status"":""unavailable"",""failed_reason"":null,""callback_url"":""http://www.twitter.com/""}'
>>> a = a.decode('utf-8')
>>> import json
>>> a = json.loads(a)
>>> a.get('username')
'test'
"
Setting a timeout during a loop in Python?,"p = Popen(...)
t = Timer(3, p.kill) # kill in 3 seconds
t.start()
p.communicate(...)
t.cancel() # no need to kill, the process is dead already
"
"Recognize the words ""AND"" and ""OR"" into a string",">>> re.split(r'\s+(?:AND|OR)\s+', 'Romeo Or Juliet', flags=re.I)
['Romeo', 'Juliet']
"
python: How do I assign values to letters?,"import string
values = dict()
for index, letter in enumerate(string.ascii_lowercase):
   values[letter] = index + 1
"
Python 3.5 - Yearly balance on loan,"from __future__ import print_function

# compute monthly payment
def pmt(rate, nper, pv):
    """"""
    rate    - annual interest rate
    nper    - # of periodic payments
    pv      - present value (principal loan amount)
    """"""
    return (rate * pv) / (1 - (1 + rate)**(-nper))

# compute future value (remaining balance)
def fv(rate, nper, pmt, pv):
    """"""
    rate    - annual interest rate
    nper    - # of periodic payments
    pmt     - monthly payment
    pv      - present value (principal loan amount)

    r1 = (1 + interest_rate) - will be used a few times below
    """"""
    r1 = 1 + rate
    return pv * r1**nper - pmt * (r1**nper -1) / rate


amount = 1000
int_rate = 4.5/100
term = 5
nper = 12
mtly_pmt = round(pmt(int_rate/nper, term*nper, amount), 2)

fmt = 'year {0:2d} {1:8.2f} {2:8.2f}'

for y in range(1, term + 1):
    print(fmt.format(
            y,
            fv(int_rate/nper, y*nper, mtly_pmt, amount),
            mtly_pmt * y * nper,
          )
    )
"
Comparing a string with a list of strings to find anagrams in Python,"def anagram(str1,str2):
    return sorted(str1) == sorted(str2):
"
Solving non-linear equations in python,"
import numpy as np
import scipy.optimize as opt

def main():
    nobservations = 4
    a, b, c = 3.0, 2.0, 1.0
    f, x, y, z = generate_data(nobservations, a, b, c)

    print 'Linear results (should be {}, {}, {}):'.format(a, b, c)
    print linear_invert(f, x, y, z)

    print 'Non-linear results (should be {}, {}, {}):'.format(a, b, c)
    print nonlinear_invert(f, x, y, z)

def generate_data(nobservations, a, b, c, noise_level=0.01):
    x, y, z = np.random.random((3, nobservations))
    noise = noise_level * np.random.normal(0, noise_level, nobservations)
    f = func(x, y, z, a, b, c) + noise
    return f, x, y, z

def func(x, y, z, a, b, c):
    f = (a**2
         + x * b**2
         + y * a * b * np.cos(c)
         + z * a * b * np.sin(c))
    return f

def linear_invert(f, x, y, z):
    G = np.vstack([np.ones_like(x), x, y, z]).T
    m, _, _, _ = np.linalg.lstsq(G, f)

    d, e, f, g = m
    a = np.sqrt(d)
    b = np.sqrt(e)
    c = np.arctan2(g, f) # Note that `c` will be in radians, not degrees
    return a, b, c

def nonlinear_invert(f, x, y, z):
    # ""curve_fit"" expects the function to take a slightly different form...
    def wrapped_func(observation_points, a, b, c):
        x, y, z = observation_points
        return func(x, y, z, a, b, c)

    xdata = np.vstack([x, y, z])
    model, cov = opt.curve_fit(wrapped_func, xdata, f)
    return model

main()
"
Most Common letter in a string,"for l in string.punctuation:
     if l in text:
        text = text.replace(l,'')
"
Creating a dictionary and adding a set as its value,"from collections import defaultdict
d = defaultdict(set)
for num in datasource:
    d[key].add(num)
"
How do i append a list with new data?,"import csv
from collections import defaultdict

with open(""file.csv"") as f:
    csvfile = csv.reader(f)
    names = defaultdict(list)
    for row in csvfile:
        curname = row[0]
        new_nums = row[1:4]
        name_nums = names.get(curname)
        if name_nums:
            del name_nums[:len(new_nums)]
        names[curname].extend(new_nums)

print(names)
"
Outputting a DataFrame instead of Series from a multiple return value groupby-apply operation,"s = x.groupby('ID1').apply(calc)
DataFrame(s.tolist(),index = s.index,columns = ['ID2','top3avg'])
"
Error when attempting to write cProfile information to file,"class Stats:
    """"""...""""""
    def __init__(self, *args, **kwds):
        # I can't figure out how to explictly specify a stream keyword arg
        # with *args:
        #   def __init__(self, *args, stream=sys.stdout): ...
        # so I use **kwds and sqauwk if something unexpected is passed in.
        self.stream = sys.stdout
        if ""stream"" in kwds:
            self.stream = kwds[""stream""]
            del kwds[""stream""]
        if kwds:
            keys = kwds.keys()
            keys.sort()
            extras = "", "".join([""%s=%s"" % (k, kwds[k]) for k in keys])
            raise ValueError, ""unrecognized keyword args: %s"" % extras
        if not len(args):
            arg = None
        else:
            arg = args[0]
            args = args[1:]
        self.init(arg)
        self.add(*args)
"
Dropping time from datetime <[M8] in Pandas,"In [11]: df = pd.DataFrame({""t"": pd.date_range('2014-01-01', periods=5, freq='H')})

In [12]: df
Out[12]:
                    t
0 2014-01-01 00:00:00
1 2014-01-01 01:00:00
2 2014-01-01 02:00:00
3 2014-01-01 03:00:00
4 2014-01-01 04:00:00

In [13]: pd.DatetimeIndex(df.t).normalize()
Out[13]:
<class 'pandas.tseries.index.DatetimeIndex'>
[2014-01-01, ..., 2014-01-01]
Length: 5, Freq: None, Timezone: None

In [14]: df['date'] = pd.DatetimeIndex(df.t).normalize()

In [15]: df
Out[15]:
                    t       date
0 2014-01-01 00:00:00 2014-01-01
1 2014-01-01 01:00:00 2014-01-01
2 2014-01-01 02:00:00 2014-01-01
3 2014-01-01 03:00:00 2014-01-01
4 2014-01-01 04:00:00 2014-01-01
"
Beginner Python: Extract List to integer,"def get_dollar_format_text(dol_and_cent):
    '''Returns the dollar and cents part of a money amount as
    a two element list of integers, where the first element is
    dollars and the second is cents.
    '''
    return [int(x) for x in str(dol_and_cent).split('.')]
"
wxPython - Play slider,"## NOTE: This is untested
def SliderDrawer(self):
    for i in range(0,self.Slider2.GetMax()):
        self.Slider2.SetValue(i+1)
        wx.Yield() ## Added the Yield function
        time.sleep(0.1) ## Increased time so that visual can be seen

def PlaySlider(self,event):
    wx.CallAfter(self.SliderDrawer)
    event.Skip()
"
"Given a large dataset in file A, how can I reference it in a simulation in file B?","with open(""file.dat"", ""r"") as data:
    for line in data:
        runFunction(line[0], line[1], line[2], line[3])
"
How do I sort a list of strings in Python?,mylist.sort()
Occurence frequency from a list against each row in Pandas dataframe,"import pandas as pd

# create frame with six columns of ints
df = pd.DataFrame({'a':[1,2,3,4,10],
                   'b':[8,5,3,2,11],
                   'c':[3,7,1,8,8],
                   'd':[3,7,1,8,8],
                   'e':[3,1,1,8,8],
                   'f':[7,7,1,8,8]})

# list of ints
base =[1,2,3,4,5,6]

# define function to count membership of list
def base_count(y):
    return sum(True for x in y if x in base)

# apply the function row wise using the axis =1 parameter
df.apply(base_count, axis=1)
"
can we code time in text widget?,"import datetime
from Tkinter import * # from tkinter import *   # Python 3.x

root = Tk()
root.geometry('500x500')
frame = Frame(root)
frame.pack(side=BOTTOM, fill=BOTH)

label = Label(frame)
label.pack(side=RIGHT)
label['text'] = datetime.datetime.now().strftime('%H:%M:%S')
root.mainloop()
"
"How to combine/merge mostly identical sublists into one, and append the non-identical part to the end of the list?","def foo(seq):
    from operator import itemgetter
    # | [['UserID', 'Amount', 'Email', {'week1': 1, 'week2': 10, 'week4': 14}], .|
    # V                                                                          V
    seq_dict = (grp[0][:3] + [dict(map(itemgetter(3,4), grp))] for grp in lst)
    # 'week4' | '4' | 4
    max_weeks = int(max(seq[0][-1])[4:])
    # | ['week1', 'week2', 'week3', 'week4'] |
    # V                                      V
    week_range = range(1, max_weeks + 1)
    return [items[:-1] + [items[-1].get(""week{}"".format(week), 0) 
                          for week in week_range]
            for items in seq_dict]
"
Get text surrounding regex match with python,"import collections
projects = collections.defaultdict(list)
contexts = collections.defaultdict(list)
for line in todo_list.splitlines():
    for item in re.findall(r'[+]\D\w+', line):
        projects[item].append(line)
    for item in re.findall(r'[@][A-Z]\w+', line):
        contexts[item].append(line)
"
Python - convert strings into json and combine,"def combine(dict1, dict2):
    if dict1['priority'] == dict2['priority'] and dict1['titles'] == dict2['titles']:
        return {
            'priority': dict1['priority'],
            'titles': dict1['titles'],
            'values': dict1['values'] + dict2['values']
        }
"
Check for a key pattern in a dictionary in python,"[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]"
I'm trying to implement a valid Regex pattern,"x = re.compile(""(%s|%s|%s)"" % (re.escape(userstring), re.escape(userStrHEX), re.escape(userStrASCII)), re.IGNORECASE)
"
Python implementation of Quicksort fails to sort the entire array,"def quickSort(arr):
    #Leftside
    less = []
    #pivot
    pivotList = []
    #rightside
    more = []
    #if the length of the array is one. then, there is no point in sorting it
    if len(arr) <= 1:
        return arr
    else:
    #sorting :)
        #Defines the pivot as the first element
        pivot = arr[0]
        for i in arr:
            #for each element in the array verify:
            if i < pivot:
                less.append(i)
            elif i > pivot:
                more.append(i)
            else:
                pivotList.append(i)
        #Define the Lists less (left side) and more (right side)
        less = quickSort(less)
        more = quickSort(more)
        #Return the actual array
        return less + pivotList + more

a = [7, 2, 5, 1, 29, 6, 4, 19, 11]
a = quickSort(a)
print a
"
Dictionary comprehension containing dictionary elements,"dict2 = { key : val[0] for key, val in dict1.items() }
"
Why/how does iterating over a list and calling 'pass' each time fix this function?,"    ids = list(assessment_entries_qs.values_list('id', flat=True))
"
Testing sentence against string of alphabet to see if all letters are in the sentence,"if set(alphabet) == set(sentence):
    print('pangram')
else:
    print('not pangram')
"
How do I remove hex values in a python string with regular expressions?,">>> re.sub(r'[^\x20-\x7e]', '', 'MagX\x00\x00\x00\x08\x01\x008\xe6\x7f')
'MagX8'
"
"Appending python dictionaries, without replacing if the value is empty","filtered_dict2 = {}
for k, v in dict2.items():
    if v:
        filtered_dict2[k] = v
dict1.update(filtered_dict2)
"
Python - for with counter,">>> menu = ['spam', 'ham', 'eggs', 'bacon', 'sausage', 'onions']
>>> # Reversed sequence
>>> for dish in reversed(menu):
...     print(dish)
... 
onions
sausage
bacon
eggs
ham
spam
>>> import itertools
>>> # Only every third
>>> for dish in itertools.islice(menu, None, None, 3):
...     print(dish)
... 
spam
bacon
>>> # In groups of 4
>>> for dish in itertools.izip_longest(*([iter(menu)] * 4)):
...     print(dish)
... 
('spam', 'ham', 'eggs', 'bacon')
('sausage', 'onions', None, None)
"
"Python Pandas - Compare 2 dataframes, multiple parameters","import pandas as pd
import io

temp1=u""""""Sample;Chr;Start;End;Value
S1;1;100;200;1
S1;2;200;250;1
S2;1;50;75;5
S2;2;150;225;4""""""
#after testing replace io.StringIO(temp1) to filename
dfline = pd.read_csv(io.StringIO(temp1), sep="";"")

temp2=u""""""Name;Chr;Position
P1;1;105
P2;1;60
P3;1;500
P4;2;25
P5;2;220
P6;2;240""""""
#after testing replace io.StringIO(temp2) to filename
mapfile = pd.read_csv(io.StringIO(temp2), sep="";"")
"
python 3.3 RE How to grab possible groups?,">>> import re
>>> inputtext = ""{% url 'a' b c e %}""
>>> [r[:1] + tuple(r[1].split()) 
...  for r in re.findall(r""{% url '(\w+)'((?:\s+\w+)*) %}"", inputtext)]
[('a', 'b', 'c', 'e')]
"
Get only those elements of array that match all elements of test array?,">>> np.where((arr == np.array([0,0,1])).all(axis=1))
(array([0]),)
"
Script to convert Huge Three column table into table,"d = {}
col_label_set = set()
row_label_set = set()
input =  open(""input.txt"")
output = open(""output.txt"",""w"")
for line in input:
    line = line.strip()
    splat = line.split(',')
    if len(splat) != 3:
        break # error message???
    k1, k2, v = splat
    try:
        subdict = d[k1]
    except KeyError:
        subdict = {}
        d[k1] = subdict
    subdict[k2] = v
    row_label_set.add(k1)
    col_label_set.add(k2)
col_labels = sorted(col_label_set)
row_labels = sorted(row_label_set
output.write(""\t"")
for v in col_labels::
    output.write(v + ""\t"")
output.write(""\n"")
for r in row_labels:
    output.write(r + ""\t"")
    for c in col_labels:
        output.write(d[r].get(c, """") + ""\t"")
    output.write(""\n"")
"
python replace random line in large file,"with open('myfile.txt', 'rb+') as f:
    f.seek(FIXED_LINE_LENGTH * line_number)
    f.write(new_line)
"
"Python: Get a list of all files and folders in a directory, the time of creation, the time of last modification. System independent solution?","import os,time

def get_information(directory):
    file_list = []
    for i in os.listdir(directory):
        a = os.stat(os.path.join(directory,i))
        file_list.append([i,time.ctime(a.st_atime),time.ctime(a.st_ctime)]) #[file,most_recent_access,created]
    return file_list

print get_information(""/"")
"
string split() in python 2.6,">>> strs = 'bacarat,baccarat\r'
>>> strs.replace('\r','').split(',')
['bacarat', 'baccarat']
"
How to Parse an orderedDict?,">>> from collections import OrderedDict
>>> od = OrderedDict([(u'attributes', OrderedDict([(u'type', u'Campaign__c'), (u'url', u'/services/data/v29.0/sobjects/Campaign__c/a0B9000000I6CDUEA3')])), (u'clicks__c', 0.0)])
>>> od.keys()
[u'attributes', u'clicks__c']
>>> od['clicks__c']
0.0
"
How to get href title from a element and delete all string?,">>> s = '< a href=""http://xxxx"">Some text< /a>'
>>> re.sub(r'<[^<>]*>', r'', s)
'Some text'
"
how to insert tabs instead of spaces when creating xml files in python,"from xml.dom import minidom
import xml.etree.cElementTree as ET

root = ET.Element(""root"")

doc = ET.SubElement(root, ""doc"")

field1 = ET.SubElement(doc, ""field1"")
field1.set(""name"", ""blah"")
field1.text = ""some value1""

field2 = ET.SubElement(doc, ""field2"")
field2.set(""name"", ""asdfasd"")
field2.text = ""some vlaue2""

dom = minidom.parseString(ET.tostring(root))
print dom.toprettyxml(indent='\t')
"
OOP - creating class adding to list then deleting,"std_delete = raw_input(""Student To Delete"")
for std in students:
    if std.studentID == std_delete:
        print ""Student ID %d has been deleted "" % std.studentID
        students.remove(std)
        break
"
How can I convert a SHA256 hash from integer to string and back?,"'{:x}'.format(i).zfill(64)
Out[67]: '00000000000000003258ec44ea34c98111234904ef7642608922f9b8b296067d'
"
Append a list of arrays as column to pandas Data Frame with same column indices,"L = list(data)
A = list(data)
data_frame = pd.DataFrame(L) 
data_frame['A'] = pd.Series(A, index=data_frame.index)
"
Delete Data from a pandas array that is out of range,"print df

#           x           y     z
#0  35.013930   48.775597  0.22
#1  42.015619  368.803652  0.00
#2   3.017302  349.831709  1.20
#3   5.018978  378.859767  2.20
#4   7.020646  300.887827  0.05
#5  23.022307   44.915887  0.23
"
"remove this unidentified character ""\"" from string python","remove = str.replace(""\\"", "" "")
"
Lxml equivalent for BeautifulSoup find(),"root = lxml.html.fromstring(html)
root.cssselect('span.some-class-name')
"
Pandas writing dataframe to other postgresql schema,"df.to_sql('test', engine, schema='a_schema')"
Aggregate text field from several lines (javascript/python),"fobj_in = io.StringIO(""""""Name1, Surname1  Team1
                  Team2
                  Team3
Name2, Surname2  Team2
                  Team4
Name3, Surname3  Team1
                  Team5"""""")

fobj_out = io.StringIO()

from collections import defaultdict

teams = defaultdict(list)

for line in fobj_in:
    items = line.split()
    if len(items) == 3:
        name = items[:2]
        team = items[2]
    else:
        team = items[0]
    teams[team].append(name)

for team_name in sorted(teams.keys()):
    fobj_out.write(team_name + ', ')
    for name in teams[team_name][:-1]:
        fobj_out.write('{} {}, '.format(name[0], name[1]))
    name = teams[team_name][-1]
    fobj_out.write('{} {}\n'.format(name[0], name[1]))


fobj_out.seek(0)
print(fobj_out.read())
"
how to show a loading message in tkinter,"class WidgetTest(unittest.TestCase):
    """"""Tests methods available in every ttk widget.""""""

    def setUp(self):
        support.root_deiconify()
        self.widget = ttk.Button(width=0, text=""Text"")
        self.widget.pack()
        self.widget.wait_visibility()
"
Sharing list between functions,"from Tkinter import Tk, Button

def run_command():
    machines_off = []
    # Some stuff .....
    machineName = ""foo""
    machines_off.append(machineName)
    # Some stuff ....
    wol_machines(machines_off)

def wol_machines(machines_off):
    print ""wol_machines was called""
    print ""contents of machines_off: "", machines_off
    # Some stuff ....

root = Tk()
a = Button(text=""do the first thing"", command=run_command)
b = Button(text=""do the second thing"", command=wol_machines)
a.pack()
b.pack()

root.mainloop()
"
Dynamic arguments in python write,"rows_to_keep = [1, 3, 5, 6]
...
for row in rdr:
    newrow = list()
    for n in rows_to_keep:
        newrow.append(row[n])
    wtr.writerow(newrow)
"
Get file content and make a list,"with open(""my_text_file.txt"", ""r"") as f:
    items = f.read()
    items = items.replace('\n', '').replace(' ', '')
    items = items.split("","")

    items = [i for i in items if i]
    if items:

        if len(items) == 1:
            print('You have {}'.format(items[0]))

        if len(items) > 1:
            last_item = items[-1]
            items_ex_last_item = items[:-1]
            print(""You have "" + ', '.join(items_ex_last_item) + "" and "" + last_item + ""."")

    else:
        print(""There is no item."")
"
How to turn a float into a list. (Python),"for i in str(-7.345): print i
-
7
.
3
4
5
"
grouping rows in list in pandas groupby,"In [1]:
# create the dataframe    
df = pd.DataFrame( {'a':['A','A','B','B','B','C'], 'b':[1,2,5,5,4,6]})
df
Out[1]:
   a  b
0  A  1
1  A  2
2  B  5
3  B  5
4  B  4
5  C  6

[6 rows x 2 columns]

In [2]:
# use groupby, select the group by column, select the secondary column and convert to list
df['c'] = df.apply(lambda row: df.groupby('a').get_group(row['a'])['b'].tolist(), axis=1)
df
Out[2]:
   a  b          c
0  A  1     [1, 2]
1  A  2     [1, 2]
2  B  5  [5, 5, 4]
3  B  5  [5, 5, 4]
4  B  4  [5, 5, 4]
5  C  6        [6]

[6 rows x 3 columns]

In [3]:
# drop duplicates
df.drop_duplicates(cols=['a'],inplace=True)
df
Out[3]:
   a  b          c
0  A  1     [1, 2]
2  B  5  [5, 5, 4]
5  C  6        [6]

[3 rows x 3 columns]

In [4]:
# drop the second column
df.drop(labels='b', axis=1)
Out[4]:
   a          c
0  A     [1, 2]
2  B  [5, 5, 4]
5  C        [6]

[3 rows x 2 columns]
"
"How to iterate with index elegantly in Python, for string-matching a list of substrings inside text?","s = 'cat dog cow dog' # Note 'dog' occurs multiply
s.find('dog')
4
s.find('cow')
8
s.find('cat')
0
"
Trying to post to a form that uses frames and retrieve the data using python,"import requests
import lxml.html

url = 'http://pro-161-70.ib.unicamp.br/~itaraju/cgi-bin/itaraju/bioinf/pimw.cgi'
payload = {
#    'arquivo': '', # remove it
    'opShowTitle': 'ON',
    'opShowSeq': 'ON',
    'opShowStat': 'ON',
    'opShowpimw': 'ON',
    'opGelVirtual': 'ON',
    'opMap': 'gel0.def',
    'opPK': 'Default',
    'tbCt': 3.55,
    'tbNt': 7,
    'tbArg': 12.01,
    'tbAsp': 4.06,
    'tbCys': 9,
    'tbGlu': 4.45,
    'tbHis': 5.985,
    'tbLys': 10.01,
    'tbTyr': 10.01,
    'tbSeq': '',
}

files = {'arquivo': open('sequence.fasta').read()}

#url = 'http://httpbin.org/post' # special portal for tests

# send POST    
r = requests.post(url, data=payload, files=files)

#print r.text

# convert HTML string into HTML tree
html = lxml.html.fromstring(r.text)

# get all images
imgs = html.cssselect('img')

# get second image
if len(imgs) > 1:
    url = 'http://pro-161-70.ib.unicamp.br/~itaraju/cgi-bin/itaraju/bioinf/' + imgs[1].attrib['src'].strip()

    print ""Downloading ..."",  url

    with open('output.gif', 'wb') as handle:
        r = requests.get(url, stream=True)

        if not r.ok:
            # Something went wrong
            pass

        for block in r.iter_content(1024):
            if not block:
                break

            handle.write(block)
            print '.',

        print 

# get data
for tr in html.cssselect('tr'):
    for td in tr.cssselect('tr'):
        print td.text_content().strip().replace('\n', ' | '),
    print 
"
Pymongo.find() only return answer,"result = db.col.find({""some"": ""condition""}, {""name"": 1})
print([document[""name""] for document in result])
"
python: break list into pieces when an empty entry is found,"In [22]: from itertools import groupby


In [23]: lst = [list(v) for k,v in groupby(l,key=bool) if k]

In [24]: lst[1]
Out[24]: [['abc', '2'], ['ff', 'a'], ['test', 'a']]

In [25]: lst[0]
Out[25]: [['blah', 'blah'], ['a', 'b']]
"
How to remove the punctuation in the middle of a word or numbers?,">>> import re
>>> [ re.sub(r'[{}]+'.format(punctuation),'',x ) for x in lis]
['helllo', 'intro']
>>> re.sub(r'[{}]+'.format(punctuation),'', strs)
'5678'
"
Numba : cell vars are not supported,"import numpy as np
import numba as nb
import math

def rownowaga(u, v):
    wymiar_x = len(u)
    wymiar_y = len(u[1])
    f = [[[0 for j in range(wymiar_y)] for i in range(wymiar_x)] for k in range(9)]
    cx = [0., 1., 0., -1., 0., 1., -1., -1., 1.]
    cy = [0., 0., 1., 0., -1., 1., 1., -1., -1.]
    w = [4./9, 1./9, 1./9, 1./9, 1./9, 1./36, 1./36, 1./36, 1./36] 
    for i in range( wymiar_x):
        for j in range (wymiar_y):
            for k in range(9):
                up = u[i][j]
                vp = v[i][j]
                udot = (up**2 + vp**2)
                cu = up*cx[k] + vp*cy[k]
                f[k][i][j] =  w[k] + w[k]*(3.0*cu + 4.5*cu**2 - 1.5*udot)
    return f

# Pull these out so that numba treats them as constant arrays
cx = np.array([0., 1., 0., -1., 0., 1., -1., -1., 1.])
cy = np.array([0., 0., 1., 0., -1., 1., 1., -1., -1.])
w = np.array([4./9, 1./9, 1./9, 1./9, 1./9, 1./36, 1./36, 1./36, 1./36]) 

@nb.jit(nopython=True)
def rownowaga_numba(u, v):
    wymiar_x = u.shape[0]
    wymiar_y = u[1].shape[0]
    f = np.zeros((9, wymiar_x, wymiar_y))

    for i in xrange( wymiar_x):
        for j in xrange (wymiar_y):
            for k in xrange(9):
                up = u[i,j]
                vp = v[i,j]
                udot = (up*up + vp*vp)
                cu = up*cx[k] + vp*cy[k]
                f[k,i,j] =  w[k] + w[k]*(3.0*cu + 4.5*cu**2 - 1.5*udot)
    return f
"
Python extract unique values from CSV,"from collections import Counter

with open('test.csv','r') as in_file, open('final.csv','w') as out_file:
    seen = set() # set for fast O(1) amortized lookup
    lines = Counter(file.readlines())
    seen = set(k for k in lines if lines[k] == 1)
    for itm in seen:
        out_file.write(itm)
"
Matching one set of values to another in a text file,"In [2]: from collections import defaultdict

In [3]: with open(""data1.txt"") as f:
   ...:     dic=defaultdict(list)
   ...:     for line in f:
   ...:         
   ...:         spl=line.split()
   ...:         dic[spl[2]].append(int(spl[0]))
   ...:     for name in dic:    
   ...:         print name,dic[name]
   ...:         
Roger [1961, 1962, 1963]
Jessica [1963, 1964, 1965, 1966]
"
Convert dataframe column to datetime for re-mapping,"df['Time'] = pd.to_datetime(df['Time'], format='%d/%m/%Y %H:%M', errors='coerce')
"
"text not showing up dynamically, pygame","import pygame
import sys
import random

pygame.init()
screen = pygame.display.set_mode((640, 480),0,32)
clock = pygame.time.Clock()

# create font only once
font = pygame.font.Font(None,30)

# it's always a good idea to cache all text surfaces, since calling 'Font.render' is
# an expensive function. You'll start to notice once your game becomes more complex
# and uses more text. Also, use python naming conventions
text_cache = {}
def make_text(title, text):
    key = ""{title}: {text}"".format(title=title, text=text)
    if not key in text_cache:
        text = font.render(key, 1,(0,0,0))
        text_cache[key] = text
        return text
    else:
        return text_cache[key]

# we use the 'Sprite' class because that makes drawing easy
class Button(pygame.sprite.Sprite):
    def __init__(self, rect, color, on_click):
        pygame.sprite.Sprite.__init__(self)
        self.rect = rect
        self.image = pygame.Surface((rect.w, rect.h))
        self.image.fill(color)
        self.on_click = on_click

# this happens when the first button is pressed
def toggle_score_handler(state):
    state['show_score'] = not state['show_score']

# this happens when the second button is pressed
def toggle_backcolor_handler(state):
    state['backcolor'] = random.choice(pygame.color.THECOLORS.values())
    state['score'] += 100

# here we create the buttons and keep them in a 'Group'
buttons = pygame.sprite.Group(Button(pygame.Rect(30, 30, 32, 32), (55, 155 ,0), toggle_score_handler),
                              Button(pygame.Rect(250, 250, 32, 32), (155, 0, 55), toggle_backcolor_handler))

# here's our game state. In a real 
# game you probably have a custom class
state = {'show_score': False,
         'score': 0,
         'backcolor': pygame.color.Color('White')}

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit()
        # you can check for the first mouse button with 'event.button == 1'
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            # to check if the mouse is inside the button, you 
            # can simple use the 'Rect.collidepoint' function
            for button in (b for b in buttons if b.rect.collidepoint(event.pos)):
                button.on_click(state)

    screen.fill(state['backcolor'])
    # draw all buttons by simple calling 'Group.draw'
    buttons.draw(screen)

    if state['show_score']:
        screen.blit(make_text(""score"", state['score']), (100, 30))

    pygame.display.update()
    clock.tick(60)
"
Wait until user stopped typing in Tkinter,"import tkinter as tk
import random

COLORS =[""red"", ""orange"", ""yellow"", ""green"", ""blue"", ""violet""]

class Application(tk.Frame): 

    def __init__(self,master):
        self.master = master
        tk.Frame.__init__(self)
        self.pack()

        self._after_id = None
        self.entry = tk.Entry(self)
        self.entry.pack()
        self.entry.bind('<Key>',self.handle_wait)

    def handle_wait(self,event):
        # cancel the old job
        if self._after_id is not None:
            self.after_cancel(self._after_id)

        # create a new job
        self._after_id = self.after(1000, self.change_color)

    def change_color(self):
        random_color = random.choice(COLORS)
        self.entry.config(background=random_color)

root = tk.Tk()
app = Application(root)
app.mainloop()
"
Preserving the distinctions between bools and floats when adding NaN to a pandas Series?,"s = Series([True])
s.append(Series([nan], index=[1], dtype=object))
"
is it possible to use a lambda as a dictionary default?,"finally:
  for f in files.values(): f.close()
"
Match mixture of characters and digits in Pandas,"import pandas as pd
from pandas import DataFrame
import re

df = DataFrame({'col1': {0: 'mf_lp_gn817_ml46',
 1: 'desktop_300x250_mf',
 2: 'desktop_300x250_mf',
 3: 'desktop_728x90_mf'},
 'col2': {0: 'd_nb_05340.gif ',
 1: 'mf_lp_fb824_ml46.html ',
 2: 'dd_lp_ig805.html ',
 3: 'mf_lp_fb824_ml46.html '}})

regex = r'_([a-z]{2}[0-9]{3})[_.]'
for index, row in df.iterrows():
    for column in row.keys():
        m = re.search(regex, row[column])
        if m is not None:
            df.ix[index, 'col3'] = m.group(1)
"
Python split string by pattern,">>> for match in repeat.finditer(""a-bb-cccccccc""):
...     print match.group(), match.start(), match.end()
... 
bb- 2 5
cccccccc 5 13
"
Removing duplicates within list without creating a new list while preserving order,"def remove(glist):
    seen = set()
    def unseen():
        for val in glist:
            if not val in seen:
                yield val
                seen.add(val)
    glist[:] = unseen()
    return glist # if you must
"
how to open a cmd shell in windows and issue commands to that shell using python,"import subprocess
process = subprocess.Popen('cmd /k ', shell=True, stdin=subprocess.PIPE,stdout=subprocess.PIPE,stderr=None)
process.stdin.write(""dir"") #passing command
stdOutput,stdError = process.communicate()
print stdOutput
process.stdin.close()
"
Using Python to Combine CSV Elements From Columns to Rows,"import pandas as pd
df = pd.read_csv(""stuff.dat"",sep=r""\s+"")
df[""ranks""] = df.reset_index().groupby(""Name"")[""index""].rank(""first"")
df2 = df.pivot_table(rows=[""Name"", ""URL"", ""Email""],
                     cols=""ranks"",
                     aggfunc=lambda x: x, fill_value='')
df2.columns = [c[0] + str(int(c[1])) for c in df2.columns.get_values()]
df2 = df2.reset_index()
"
python beginner - faster way to find and replace in large file?,"with open(""f1.txt"", ""r"") as infile1:
    udict = dict(line.strip().split(""\t"", 1) for line in infile1)
regex = re.compile(""|"".join(map(re.escape, udict)))
with open(""f2.txt"", ""r"") as infile2, open(""out.txt"", ""w"") as outfile:
    for line in infile2:
        outfile.write(regex.sub(lambda m: udict[m.group()], line))
"
How to pass an integer series as argument to a python function?,"print a, b, c, d
"
Good algorithm for computing volume or surface area in python,"import numpy as np
from tvtk.api import tvtk

def main():
    # Generate some data with anisotropic cells...
    # x,y,and z will range from -2 to 2, but with a 
    # different (20, 15, and 5 for x, y, and z) number of steps
    x,y,z = np.mgrid[-2:2:20j, -2:2:15j, -2:2:5j]
    r = np.sqrt(x**2 + y**2 + z**2)

    dx, dy, dz = [np.diff(it, axis=a)[0,0,0] for it, a in zip((x,y,z),(0,1,2))]

    # Your actual data is a binary (logical) array
    max_radius = 1.5
    data = (r <= max_radius).astype(np.int8)

    ideal_volume = 4.0 / 3 * max_radius**3 * np.pi
    coarse_volume = data.sum() * dx * dy * dz
    est_volume = vtk_volume(data, (dx, dy, dz), (x.min(), y.min(), z.min()))

    coarse_error = 100 * (coarse_volume - ideal_volume) / ideal_volume
    vtk_error = 100 * (est_volume - ideal_volume) / ideal_volume

    print 'Ideal volume', ideal_volume
    print 'Coarse approximation', coarse_volume, 'Error', coarse_error, '%'
    print 'VTK approximation', est_volume, 'Error', vtk_error, '%'

def vtk_volume(data, spacing=(1,1,1), origin=(0,0,0)):
    data[data == 0] = -1
    grid = tvtk.ImageData(spacing=spacing, origin=origin)
    grid.point_data.scalars = data.T.ravel() # It wants fortran order???
    grid.point_data.scalars.name = 'scalars'
    grid.dimensions = data.shape

    iso = tvtk.ImageMarchingCubes(input=grid)
    mass = tvtk.MassProperties(input=iso.output)
    return mass.volume

main()
"
How do I transform a multi-level list into a list of strings in Python?,"list(map(''.join, a))"
How to efficiently extract specific subsets of list elements in Python,"true_values = []
false_values = []
for bit, val in zip(bits, values):
    if bit:
        true_values.append(val)
    else:
        false_values.append(val)
"
Best practices method of implementing a django OR query from an iterable?,"slug = [""snakes"", ""snake-s"" ] # in the real world this is generated from directory structure on disk

# build the query
query = MyModel.objects
if hasattr(slug, ""__iter__""):
    q_list = []
    for s in slug:
        q_list.append(Q(slug=s))
    query = query.filter(reduce(operator.or_, q_list))
else:
    query = query.filter(slug=slug)
"
Extract links if anchor text contains keyword,"import re
from bs4 import BeautifulSoup

html = """"""
<html><head></head>
<body>
<a href='http://www.gurletins.com'>My HomePage</a>
<a href='http://www.gurletins.com/sections'>Sections</a>
</body>
</html>
""""""

soup = BeautifulSoup(html)
for a in soup.find_all(""a"", text=re.compile('Home')):
    print a['href']
"
Optional but conditional argument python,"def foo(*args, **kwargs):
    if 'foo' in args:
        do_this()
    elif 'bar' in args:
        do_that()
    else:
        raise ValueError()
"
For-loop to fill in node positions in an array for a cube,"from itertools import product

axis_labels = ['p','q','r']    
dimension = len(axis_labels)

for comb in product([0, 1], repeat=dimension):
    label = ''.join([axis_labels[i] for i in range(dimension) if comb[i]])
    if not label: label = '0'
    print label, list(comb)
"
How to parse a time,"s = 'PT1H28M26S'

hr, min = map(int, s.translate(None,""PTMS"")[:-2].split(""H""))
print(hr,min)
(1, 28)
"
Getting a time date range,"df = df.set_index('SAMPLE_TIME')
g1 =  df.groupby(lambda x: x.day).agg(sum)
print g1
    TempBottom  TempTop  TempOut  State  Bypass
5       97.375  111.624   87.750      2       2
23      98.062  111.624   87.687      2       2
25      49.312   55.812   43.812      1       1
"
Find number of characters trapped in a list,"[''.join(row).strip('0').count('0') for row in matrix]
"
python - get attribute to subclass,"def method(self, name='Thomas', age=27):
  the_age = age
  self.submethod(name, age=the_age)
"
Using Python list in a C extension,"from distutils.core import setup, Extension

lolan = Extension('lolan', sources = ['lolanmodule.c'])

setup (name = 'Example',
        version = '1.0',
        description = 'Just an exapmle',
        ext_modules = [lolan])
"
How to extract values with BeautifulSoup with no class,">>> soup.find('div', {'class': ''}).string
u'\n            Female\n        '
>>> soup.find('div', {'class': ''}).string.strip()
u'Female'
"
how does the python min function works,">>> min(['243', '172344', '6'], key=len)
# sort the list with key (call `len` on every element and sort based on that)
# sorted(['243', '172344', '6'], key=len)
# return the first element (lowest value)
# sorted(['243', '172344', '6'], key=len)[0]
6
"
Place object within a layer in Python - Maya,"import maya.cmds as cmds
if cmds.window(""RyanWindow"", exists=True):
    cmds.deleteUI(""RyanWindow"")

myWindow = cmds.window(t=""Ryan Window"", w=300, h=300)
form = cmds.formLayout()

print cmds.createDisplayLayer (name='Head_Control_Shapes', empty=True)
cmds.createDisplayLayer (name='Torso_Control_Shapes', empty=True)
cmds.createDisplayLayer (name='Arms_Control_Shapes', empty=True)
cmds.createDisplayLayer (name='Legs_Control_Shapes', empty=True)
cmds.createDisplayLayer (name='Other_Control_Shapes', empty=True)

cmds.setAttr ('Head_Control_Shapes.color', 4)
cmds.setAttr ('Torso_Control_Shapes.color', 12)
cmds.setAttr ('Arms_Control_Shapes.color', 13)
cmds.setAttr ('Legs_Control_Shapes.color', 31)
cmds.setAttr ('Other_Control_Shapes.color', 2)

cmds.columnLayout(adj=True)
cmds.text(""                         Custom Control Shape Creator v1                         "")
cmds.separator(height = 15, style='double' )
cmds.separator(height = 15, style='double' )
cmds.setParent( '..' )

tabs = cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)
cmds.formLayout( form, edit=True, attachForm=((tabs, 'top', 40), (tabs, 'left', 0), (tabs, 'bottom', 0), (tabs, 'right', 0)) )

tab1 = cmds.rowColumnLayout(numberOfColumns=3)
cmds.button(label='Circle', command=""makeCircle()"")
cmds.button(label='Square', command=""makeSquare()"")
cmds.button(label='Oval')
cmds.setParent( '..' )


def makeCircle():
    cmds.circle( nr=(0, 90, 1), c=(0, 0, 0) )


def makeSquare():
    cmds.circle( nr=(0, 90, 1), c=(0, 0, 0) )


cmds.showWindow(myWindow)
"
How do i make a while loop so it reads through every single line in .txt file before it decide what to?,"def addingcustomer(file_name,new_name):
    f=open(file_name,""r+"")
    for line in f:
        if new_name in line:
            f.close()
            return False
    # the name didn't exist
    f.write(new_name)
    f.write(""\n"")
    f.close()
    return True
"
How to extract raw html from a Scrapy selector?,">>> import scrapy
>>> t = """"""<html lang=""en"">
... <body>
... <div>
...     <script type=""text/javascript"">
...         var i = {a:['O&#39;Connor Park']}
...     </script>
...     
... </div>
... </body>
... </html>
... """"""
>>> selector = scrapy.Selector(text=t, type=""html"")
>>> 
>>> # extracting the <script> element as raw HTML
>>> selector.xpath('//div/script').extract_first()
u'<script type=""text/javascript"">\n        var i = {a:[\'O&#39;Connor Park\']}\n    </script>'
>>> 
>>> # only getting the text node inside the <script> element
>>> selector.xpath('//div/script/text()').extract_first()
u""\n        var i = {a:['O&#39;Connor Park']}\n    ""
>>> 
"
How to extract characters and numbers from every line of a file?,"second="""".join(re.findall(r'\d+',line))#extract second position numbers
"
python check if one before last digit is odd,"In [119]: i = '12345678901'

In [120]: int(i[-2])%2
Out[120]: 0

In [121]: int(i[-1])%2
Out[121]: 1
"
Weird behaviour with semicolon before function call in ipython/ipython notebook,"
In [2]: ,my_function a b c    # becomes my_function(""a"",""b"",""c"")

In [3]: ;my_function a b c    # becomes my_function(""a b c"")
"
Converting string to normal text,"import ast

s = """""" ""ABC1.2.3.4"",
    {
        ""abc"": ""4.5.6"",
        ""cde"": 
        [
            {
                ""efg"": ""7.8.9"",
                ""hij"": ""1234"",
            },
            {
                ""efg"": ""789"",
                ""hij"": ""5678"",
            }
        ]
    } """"""

data = ast.literal_eval(""[{}]"".format(s))
"
Using user input to call functions,"def move():
    print(""Test."")

func_dict = {'move':move}
if __name__ == ""__main__"":
    input(""Press enter to begin."")
    currentEnvironment = ""room"" #getNewEnvironment(environments)
    currentTimeOfDay = ""1 A.M."" #getTime(timeTicks, timeOfDay)
    print(""You are standing in the {0}. It is {1}."".format(currentEnvironment, currentTimeOfDay))
    command = input(""> "")
    func_dict[command]()
"
The best way to filter a dictionary in Python,"d = dict((k, v) for k, v in d.items() if v > 0)"
Calculate permutations,"def solve(d, target, total, keys, avoid):
  if total <= target:     # omit this check if values can be negative
    if keys:
      k = keys[0]
      for v in d[k]:
        if not (v in avoid):
          for s in solve(d, target, total+v, keys[1:], avoid.union([v]) ):
            yield s + [(k,v)]
    elif target == total:
      yield []

def test1():
  d = {'a':(1,2,3), 'b':(4,5), 'c':(1,3,5) }
  for s in solve(d, 10, 0, ""abc"", set([])):
    print s

def test2():
  d = {'a':(1,2,3), 'b':(1,2,3), 'c':(1,2,3) }
  for s in solve(d, 6, 0, ""abc"", set([])):
    print s
"
How to find text in a column with Python,">>> next(line.split()[-1] for line in s.split('\n') if 'NetName:' in line)
'LVLT-GOGL-8-8-8'
"
Python sorting a list of deeply nested dictionaries by value,"import datetime
result = sorted(conversations, key=lambda x: datetime.datetime.strptime(x['last_message']['sent_at'],'%Y-%m-%dT%H:%M:%S.%fZ'))
"
how to feed string to pyparsing line by line?,"with open(filename) as f:
     for line in f:
         PyparsingGrammar.parseString(line)
"
numpy.polyfit with adapted parameters,"import numpy as np
import matplotlib.pylab as plt

# generate some noisy data
x = np.arange(1000)
y = 0.0001234 * x**2 + 3*np.random.randn(len(x))

# do fit
M = np.column_stack((x**2,)) # construct design matrix
k, _, _, _ = np.linalg.lstsq(M, y) # least-square fit of M * k = y

# quick plot
plt.plot(x, y, '.', x, k*x**2, 'r', linewidth=3)
plt.legend(('measurement', 'fit'), loc=2)
plt.title('best fit: y = {:.8f} * x**2'.format(k[0]))
plt.show()
"
How do I display the language name instead of language code in Django?,"{% load i18n %}
{% get_language_info for ""en"" as lang %}
{{lang.name_local}} ({{lang.code}})
"
"python's "".format"" function","def trans(year, month, location):
    return dict(year=year, month=month, location=location)
"
How to find specific video html tag using beautiful soup?,"soup.find(""iframe"").get(""src"")
"
Remove certain consecutive duplicates in list,"from itertools import islice, izip, chain, tee
def compress(seq, x):
    seq, shift = tee(seq)
    shift = chain(islice(shift, 1, None), (object(),))
    return (i for i, j in izip(seq, shift) if (i, j) != (x, x))
"
Tkinter script: having trouble inserting text,"    self.button = Button(self, text=""Generate!"", 
                         command=lambda :self.gen_email(self.firstname.get(),
                                                self.lastname.get(),
                                                self.companyname.get()))
"
Values aren't stored in python program,"if section == 'A':
    if tickets >= 0 and tickets <= 300:
        getSectionA(tickets)
    else:
        while tickets < 0 or tickets > 300:
            print('Invalid, enter a value from  0 to 300')
            tickets = int(input('Enter amount of tickets sold: '))
        getSectionA(tickets)
"
Pythons 'with'-statement: correctly nest/derive classes with __enter__/__exit__,"import contextlib

class context_mixin:
    def __enter__(self):
         self.__context = self.context()
         return self.__context.__enter__()
    def __exit__(self, *args):
         return self.__context.__exit__(*args)

class class_a(context_mixin):
    @contextlib.contextmanager
    def context(self):
         print('class_a enter')
         try:
             yield self
         finally:
             print('class_a exit')

class class_b(class_a):
    @contextlib.contextmanager
    def context(self):
        with super().context():
            print('class_b enter')
            try:
                yield self
            finally:
                print('class_b exit')
"
Python 2 and 3 compatible method to convert bytes to integer,">>> import struct, array
>>> foo = b""\x00\xff""
>>> list(bytearray(foo))
[0, 255]
>>> struct.unpack('{}B'.format(len(foo)), foo)
(0, 255)
>>> array.array('B', foo)
array('B', [0, 255])
"
Is it possible to create a dictionary inside a function using python?,"def myfunction(list_a, list_b):
   dict1 = dict(zip(list_a, list_b))
   return copy.deepcopy(dict1)

my_dict = myfunction(some_list_a, some_list_b)
"
PySpark count values by condition,"exprs = [
    count(when(col(""is_fav"") == x, True)).alias(c)
    for (x, c) in [(1, ""fv""), (0, ""nfv"")]
]
gpd.agg(*exprs)
"
indexing spherical subset of 3d grid data in numpy,"import scipy.spatial as sp
x = np.linspace(0, Lx, Nx)
y = np.linspace(0, Ly, Ny)
z = np.linspace(0, Lz, Nz)

#Manipulate x,y,z here to obtain the dimensions you are looking for

center=np.array([x0,y0,z0])

#First mask the obvious points- may actually slow down your calculation depending.
x=x[abs(x-x0)<cutoff]
y=y[abs(y-y0)<cutoff]
z=z[abs(z-z0)<cutoff]


#Generate grid of points
X,Y,Z=np.meshgrid(x,y,z)
data=np.vstack((X.ravel(),Y.ravel(),Z.ravel())).T

distance=sp.distance.cdist(data,center.reshape(1,-1)).ravel()
points_in_sphere=data[distance<cutoff]
"
Writing and documenting a Python script with variable number of arguments,"import sys

for arg in sys.argv[2:]:
    print arg
"
Custom iteration behavior in dict subclass,"class Result(dict):
    def __iter__(self):
        for key in self.keys():
            if not(isinstance(key, str) and key.startswith(""_"")):
                yield key
"
How to convert a date string to different format,"datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')"
Python: Pass inequality as string in dict for evaluation,"def gt5(x):
    return x > 5
"
python ringtone maker : how to split files,"import mad

mf = mad.MadFile(""foo.mp3"")
track_length_in_milliseconds = mf.total_time()
"
Python - Check If string Is In bigger String,">>> def finder(s,w):
...   return [i for i,j in enumerate(re.findall(r'\b\w+\b',s,re.U)) if j==w]
... 
>>> finder(test_str,word)
[0, 3, 6, 7]
"
Map/Iterating through List of Python Object,">>> def start(list_of_entries):
...     map((lambda x:func(x.name,x.age)), list_of_entries)
"
Python: define multiple variables of same type?,"levels = [{}, {}, {}]"
Skip every specified line before importing to pandas,"from itertools import islice, chain
from collections import deque
import pandas as pd
import csv

def consume(iterator, n):
    ""Advance the iterator n-steps ahead. If n is none, consume entirely.""
    # Use functions that consume iterators at C speed.
    if n is None:
        # feed the entire iterator into a zero-length deque
        deque(iterator, maxlen=0)
    else:
        # advance to the empty slice starting at position n
        next(islice(iterator, n, n), None)


def parts(r, sec_len, skip):
    consume(r,skip)
    for sli in iter(lambda: list(islice(r, sec_len)), []):
        yield sli
        consume(r, skip)


with open(""test.txt"")as f:
    r = csv.reader(f)
    print(pd.DataFrame.from_records((chain.from_iterable(parts(r, 4, 2)))))
"
"Converting Python (PyKinect) Skeleton data to Points (X,Y)","import re

p2 = ""<x=-0.5478253364562988, y=-0.5376561880111694, z=1.7154035568237305, w=1.0>""
p2 = re.findall(""-?\d+.\d+"",p2)
p2_xy = p2[0],p2[1]
print (""p2"",p2_xy)
"
Adding tuple to dictionary only if condition is true,"json_c = [{k: v for k, v in d.iteritems() if v is not None} for d in json_c]
"
"Types for which ""is"" keyword may be equivalent to equality operator in Python",">>> ""foobar"" is ""foobar""   # The interpreter knows that the string literals are
True                       # equal and creates only one shared object.
>>> a = ""foobar""
>>> b = ""foobar""
>>> a is b        # ""foobar"" comes from the pool, so it is still the same object.
True
>>> b = ""foo""     # Here, we construct another string ""foobar"" dynamically that is
>>> b += ""bar""    # physically not the same as the pooled ""foobar"".
>>> a == b
True
>>> a is b
False
"
Bigquery - Insert new data row into table by python,"import uuid
def stream_data(self, table, data, schema):
    # first checks if table already exists. If it doesn't, then create it
    r = self.service.tables().list(projectId=your_project_id,
                                     datasetId=your_dataset_id).execute()
    table_exists = [row['tableReference']['tableId'] for row in
                    r['tables'] if
                    row['tableReference']['tableId'] == table]
    if not table_exists:
        body = {
            'tableReference': {
                'tableId': table,
                'projectId': your_project_id,
                'datasetId': your_dataset_id
            },
            'schema': schema
        }
        self.service.tables().insert(projectId=your_project_id,
                                     datasetId=your_dataset_id,
                                     body=body).execute()

    # with table created, now we can stream the data
    # to do so we'll use the tabledata().insertall() function.
    body = {
        'rows': [
            {
                'json': data,
                'insertId': str(uuid.uuid4())
            }
        ]
    }
    self.service.tabledata().insertAll(projectId=your_project_id),
                                       datasetId=your_dataset_id,
                                       tableId=table,
                                         body=body).execute(num_retries=5)
"
Find all files in directory with extension .txt,"for file in os.listdir('/mydir'):
    if file.endswith('.txt'):
        pass"
Changing python indexes in a string,">>> s = 'ab'
>>> s = s[:1]
>>> s
'a'
"
Ticking function grapher,"delta = maximum - minimum
factor = 10**math.ceil(math.log(delta,10))  # smallest power of 10 greater than delta
normalised_delta = delta / factor           # 0.1 <= normalised_delta < 1
if normalised_delta/5 >= 0.1:
  step_size = 0.1
elif normalised_delta/5 >= 0.05:
  step_size = 0.05
elif normalised_delta/20 <= 0.01:
  step_size = 0.01
step_size = step_size * factor
"
Class objects are irregular when assigning functions,"X.f
<unbound method X.f>
X.f.im_func
<function f at 0x023A52F0>
"
Summing elements in a list,sum(your_list)
what is the most efficient way to creating a dict with two lists?,"import itertools

x = ['a', 'b', 'c', 'd']
y = [1, 2, 3, 4]

method1 = dict(zip(x, y))
method2 = itertools.izip(x, y)
"
"How do I iterate over a Python dictionary, ordered by values?","import operator
sorted(dictionary.items(), key=operator.itemgetter(1))
"
strncmp in python,"if 'foobar'.endswith('bar'):
    print ""Yes sir :)""
"
Strange For Loop,"temp = []
for i in range(len(rows) - 2, -1, -1):
    for j in range(i + 1):
        temp.append((i, j))
for (i, j) in temp:
    rows[i][j] += max([rows[i + 1][j], rows[i + 1][j + 1]])
"
Python: gathering corresponding lines that meet certain condition from multiple files,"meta_list = dict((i, []) for i in range(0, num_lines))

for file in files:
    with open(file, 'rb') as f:
          line_num = 1 
          for line in f:
              if condition_met(line):
                  meta_list[line_num].append(float(line))   
              line_num = line_num + 1
"
Create lists python,"def makelists_py2(list_count):
    return [[] for _ in xrange(list_count)]
"
How to list an image sequence in an efficient way? Numercial sequence comparison in Python,"#!/usr/bin/env python

import itertools
import re

# This algorithm only works if DATA is sorted.
DATA = [""image_0001"", ""image_0002"", ""image_0003"",
        ""image_0010"", ""image_0011"",
        ""image_0011-1"", ""image_0011-2"", ""image_0011-3"",
        ""image_0100"", ""image_9999""]

def extract_number(name):
    # Match the last number in the name and return it as a string,
    # including leading zeroes (that's important for formatting below).
    return re.findall(r""\d+$"", name)[0]

def collapse_group(group):
    if len(group) == 1:
        return group[0][1]  # Unique names collapse to themselves.
    first = extract_number(group[0][1])  # Fetch range
    last = extract_number(group[-1][1])  # of this group.
    # Cheap way to compute the string length of the upper bound,
    # discarding leading zeroes.
    length = len(str(int(last)))
    # Now we have the length of the variable part of the names,
    # the rest is only formatting.
    return ""%s[%s-%s]"" % (group[0][1][:-length],
        first[-length:], last[-length:])

groups = [collapse_group(tuple(group)) \
    for key, group in itertools.groupby(enumerate(DATA),
        lambda(index, name): index - int(extract_number(name)))]

print groups
"
Python code structure & convention - Creating a elements for a list with a loop,"integers = [n for n in range(3, limit+1) if n % 2]
integers.insert(0, 2)
"
Why is my scoped_session raising an AttributeError: 'Session' object has no attribute 'remove',"import threading
from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker

_engine = create_engine('sqlite:///:memory:')
Session = scoped_session(sessionmaker(_engine))


def scoped_session_demo(remove=False):
    ids = []

    def push_ids():
        thread_name = threading.currentThread().getName()
        data = [thread_name]

        data.append(Session())
        if remove:
            Session.remove()
        data.append(Session())

        ids.append(data)

    t = threading.Thread(target=push_ids)
    t.start()
    t.join()

    push_ids()

    sub_thread, main_thread = ids

    sub_name, sub_session_a, sub_session_b = sub_thread
    main_name, main_session_a, main_session_b = main_thread

    print sub_name, sub_session_a == sub_session_b
    print main_name, main_session_a == main_session_b
    print sub_name, '==', main_name, sub_session_a == main_session_b


print 'Without remove:'
scoped_session_demo()
print 'With remove:'
scoped_session_demo(True)
"
"Python String template dict KeyError, how set detault value","from collections import defaultdict

print ""%(name)s, %(age)s"" % defaultdict(lambda: '', {""name"":'Bob'})
print ""%(name)s, %(age)s"" % defaultdict(lambda: '', name='Bob')
"
Python- insert a character into a string,""""""",+"""""".join(c.rsplit('+', 1))"
Convert from matplotlib to ggplot2 within python,"    import pandas as pd
at_k = range(1, 12)
df = pd.DataFrame({""at_k"": at_k, ""ndcg"": ndcg, ""rmse"": rmse, ""mae"": mae})
print df
"
How to generate all possible combinations from all permutations?,"from itertools import permutations, product

perms = permutations(range(2))
cartesian_tuples = product(perms, repeat=3)

# (((0, 1), (0, 1), (0, 1)),
#  ((0, 1), (0, 1), (1, 0)),
#  ((0, 1), (1, 0), (0, 1)),
#  ((0, 1), (1, 0), (1, 0)),
#  ((1, 0), (0, 1), (0, 1)),
#  ((1, 0), (0, 1), (1, 0)),
#  ((1, 0), (1, 0), (0, 1)),
#  ((1, 0), (1, 0), (1, 0)))
"
Defining dynamic functions to a string,"class O(object):
    c = str.capitalize
    r = str.replace
    s = str.strip

def process_line(line, *ops):
    i = iter(ops)
    while True:
        try:
            op = i.next()
            args = i.next()
        except StopIteration:
            break
        line = op(line, *args)
    return line
"
rolling mean in Pandas with fixed time window (instead of fixed nb. of observations),"
import numpy as np
import pandas as pd

N = 10
test = pd.DataFrame(np.random.randint(4, size=(N, 3)),
                    columns=['trader', 'stock', 'foo'],
                    index=pd.date_range('2000-1-1', periods=N))
test.index.names = ['date']
test = test.set_index(['trader', 'stock'], append=True)

test = test.unstack().unstack()

test = test.resample(""1D"")

test = test.fillna(0)

means = pd.rolling_mean(test, 50, 50)
means.columns = [('{}_norm'.format(col[0]),)+col[1:] for col in means.columns]
test = pd.concat([test, means], axis=1)

test = test.stack().stack()
test = test.reorder_levels(['trader', 'stock', 'date'])
test = test.sort_index()
print(test.head())
"
Python HTML table scrape (Print),"import urllib2

from bs4 import BeautifulSoup

soup = BeautifulSoup(urllib2.urlopen('http://www.premierleague.com/en-gb/matchday/league-table.html'))

for row in soup.select(""table.leagueTable tr.club-row""):
    cells = [cell.get_text(strip=True) for cell in row.find_all('td')]
    print cells
"
Norm along row in pandas,np.sqrt(np.square(df).sum(axis=1))
Iterate over two lists while i-1 condition is met in python,"for i, j, k in zip(list1, list2, [-1] + list2):
    if i > k:
        print(i, j)
"
check whether a file exists,print(os.path.isfile('/etc'))
Python dictionary failsafe,"if again != ('YES' or 'Y'):
"
"Instead of grid lines on a plot, can matplotlib print grid crosses?","import matplotlib.pyplot as plt

ax = plt.subplot(111)
ax.grid(clip_on=False, marker='o', markersize=10)
plt.savefig('crosses.png')
plt.show()
"
Python - Number with a variable part,"s = ""623746xyz3""
for xyz in range(1000):
    sxyz = s.replace('xyz', str(xyz))
    print int(sxyz)
"
Getting name of attributes with Scrapy XPATH,">>> selector.xpath('//element/@*').extract()
[u'value1', u'value2']
>>> selector.xpath('//element/@*').xpath('name()').extract()
[]
>>> 
"
How to change the location of the pointer in python?,"import ctypes
from ctypes import c_long, c_wchar_p, c_ulong, c_void_p


#==== GLOBAL VARIABLES ======================

gHandle = ctypes.windll.kernel32.GetStdHandle (c_long (-11))


def move (y, x):
   """"""Move cursor to position indicated by x and y.""""""
   value = (x + (y << 16)
   ctypes.windll.kernel32.SetConsoleCursorPosition (gHandle, c_ulong (value))


def addstr (string):
   """"""Write string""""""
   ctypes.windll.kernel32.WriteConsoleW (gHandle, c_wchar_p (string), c_ulong(len (string)), c_void_p (), None)
"
Resizing matrix getting rid of 0 entries - Python,"n_x = 4
n_y = 8
step = 4.

e = [['x' for _ in range(n_y)] for _ in range(n_x)]

# e:
# [['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],
#  ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],
#  ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'],
#  ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x']]



for i in range(n_x):
    for j in range(n_y):
        if ((i or j)%step != 0):
            e[i][j] = 0.

# e: 
# [['x', 0.0, 0.0, 0.0, 'x', 0.0, 0.0, 0.0],
#  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
#  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]


# map + filter
no_zeroes = list(map(lambda x: list(filter(lambda a: a != 0., x)), e))

# no_zeroes:
# [['x', 'x'], [], [], []]
"
python truncating a dictionary to get last elements,"d = {
   ""1"":""sdv"",""2"":""wefc"",""3"":""sdsdv"",""4"":""dvsdv"",
   ""5"":""igsdhc"",""6"":""gvvxAS"",""7"":""sdvsfdv"",""8"":""sdagf""
}

for key in sorted(d, key=int)[:6]:
    del d[key]

print d    
"
How to get different colors in python turtle,"points = [(40,50), (90,100), (30,200), (280,50), (90,100)]

for x,y in points:
    print(getColor())
    drawFace(x, y)
"
Python - return the list of lists in lst that contain only integers?,"return [sublist for sublist in lst if all(item % 2 == 0 for item in sublist)]
"
Trying to figure out longest path algorithm python,"from itertools import groupby, izip_longest

matrix_string = """"""
afaaf
rbaca
rlaff
""""""

def longest_repetition(row): 
    return max((sum(1 for item in group), letter) 
               for letter, group in groupby(row) 
               if letter is not None)

def main():
    matrix = [[letter for letter in row.strip()] 
              for row in matrix_string.strip().split('\n')]

    count, letter = max(
        max(longest_repetition(row) for row in matrix),
        max(longest_repetition(col) for col in izip_longest(*matrix))
    )

    print letter, count

if __name__ == '__main__':
    main()
"
String Formatting Easiest Prettiest,">>> myList=['one','two','three']
>>> 'The number {1} is larger than {0} but smaller than {2}.'.format(*myList)
'The number two is larger than one but smaller than three.'
>>>
"
os.chdir() is not working in mac,"directoryPath = os.path.join(directoryPath, directoryName)
"
Group m groups with regex,"import re

def make_pattern(template, wildcard=""n""):
    replacement_pattern = r""\b{0}\b(?:\s+{0}\b)*"".format(wildcard)
    def replacement_func(match):
        return ""("" + re.sub(wildcard, r""\w+"", match.group()) + "")""
    return re.sub(replacement_pattern, replacement_func, template)
"
printing dates in a log file,"import re

dateRegex = re.compile(r'^\w{3}\s\d\d?\s\d\d:\d\d:\d\d')
                             # ^^^^^^^ I added ? to cater for dates between 1 & 9

f = open(""logfile.log"",""r"")

for line in f.readlines():
    matches = re.findall(dateRegex,line)
    if matches:                # Check if there are matches
        print matches[0]       # Print first element of list returned by findall
"
How to add paired values in sub-lists separately?,">>> def paired_sum(a):
...     return [sum(a[i:i+2]) for i in xrange(0,len(a),2)]
... 
>>> [paired_sum(sublist) for sublist in a]
[[5, 9], [4, 9]]
>>> map(paired_sum, a)
[[5, 9], [4, 9]]
"
Gauss-Legendre Algorithm in python,"#!/usr/bin/env python
from __future__ import with_statement
import decimal


def pi_gauss_legendre():
    D = decimal.Decimal
    with decimal.localcontext() as ctx:
        ctx.prec += 2                
        a, b, t, p = 1, 1/D(2).sqrt(), 1/D(4), 1                
        pi = None
        while 1:
            an    = (a + b) / 2
            b     = (a * b).sqrt()
            t    -= p * (a - an) * (a - an)
            a, p  = an, 2*p
            piold = pi
            pi    = (a + b) * (a + b) / (4 * t)
            if pi == piold:  # equal within given precision
                break
    return +pi


decimal.getcontext().prec = 100
print pi_gauss_legendre()
"
PriorityQueue is very slow,"l = [(3, 1000), (4, 2000), (5, 500)]
estimated = sum(t[1] for t in l)
totalSize = sum(t[0] for t in l)
"
"Python: How exactly can you take a string, split it, reverse it and join it back together again?",">>> tmp = ""a,b,cde""
>>> tmp2 = tmp.split(',')
>>> tmp2.reverse()
>>> """".join(tmp2)
'cdeba'
"
Python turn list values into String,"In [217]: country = [u'USA']

In [218]: country = str(country[0])

In [219]: country
Out[219]: 'USA'
"
Python 3 concurrent.futures: How to add back failed futures to ThreadPoolExecutor?,"def player_url(url):
    # here. if timeout, return 1. otherwise do I/O and return 0.
    ...
    if timeout:
        return (1, url)
    else:
        return (0, url)

urls = [...]
with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
    while urls:
        future_to_url = executor.map(player_url, urls)
        urls = []  # Clear urls list, we'll re-add any timed out operations.
        for future in future_to_url:
            if future.result()[0] == 1:
                urls.append(future.result()[1]) # stick url into list
"
What is the most Pythonic way to provide a fall-back value in an assignment?,"a = vars().get('x',y)
"
Append elements of a set to a list in Python,"a.extend(b)
"
Generate a list of datetimes between an interval,"from datetime import date, datetime, timedelta

def perdelta(start, end, delta):
    curr = start
    while curr < end:
        yield curr
        curr += delta

>>> for result in perdelta(date(2011, 10, 10), date(2011, 12, 12), timedelta(days=4)):
...     print result
...
2011-10-10
2011-10-14
2011-10-18
2011-10-22
2011-10-26
2011-10-30
2011-11-03
2011-11-07
2011-11-11
2011-11-15
2011-11-19
2011-11-23
2011-11-27
2011-12-01
2011-12-05
2011-12-09
"
Python list of booleans comparison gives strange results,">>> [ai and bi for ai,bi in zip(a,b)]
[True, True, False]
"
Get specific object from a list with a certain parameter,"return next(account for account in self.accounts if account.type == 'equity')
"
remove extension in list python,"f = [os.path.splitext(e.name)[0] for e in os.scandir(r'C:\Users\username\Desktop\FOLDER')
     if e.is_file()]
"
Storing a random byte string in Python,">>> with open(""e:\\test"",""wb"") as fh:
        fh.write(randomByteString)
"
Write to file python - Linebreak issue (\n),"fileOutput = [(finalScore, ""-"", name, currentTime)]
with open(""highscores.txt"", ""a"") as f:
    for t in fileOutput:
        line = ' '.join(str(x) for x in t)
        f.write(line + ""\n"")
"
Django: Iterate over QuerySet by content of a field,"styles = Widget.objects.all().values_list('style', flat=True).distinct()
for group in WidgetGroup.objects.prefetch_related('widget_set').all():
    for style in styles:
        group_style_widgets = group.widget_set.filter(style=style)
        # Do something with group_style_widgets
"
python: how to find \r\n\r\n in one single search,"import re

linend = re.compile(r'\r\n\r\n|\n\n')
s = 'an example\n\nstring\n\nhere'
print linend.split(s, 1)
s = 'another\r\n\r\nexample\r\n\r\nhere'
print linend.split(s, 1)
"
Decryption algorithm for a previously made encryption algorithm - python,"orig_str = ""pass""
enc_str = """"
dec_str = """"

enc_table = {'s': '44', 'a': '11', 'p': '41'}
dec_table = dict (zip(enc_table.values(),enc_table.keys()))

print (""Original: "", orig_str)
# Encode
for i in orig_str:
    enc_str += enc_table[i];

print (""Encoded: "", enc_str)

while len(enc_str) > 0:
    sym = enc_str[:2]
    dec_str += dec_table[sym]
    enc_str = enc_str[2:]

print (""Decoded: "", dec_str)
"
"Upload files using SFTP in Python, but create directories if path doesn't exist","import os.path

def mkdir_p(sftp, remote_directory):
    """"""Change to this directory, recursively making new folders if needed.
    Returns True if any folders were created.""""""
    if remote_directory == '/':
        # absolute path so change directory to root
        sftp.chdir('/')
        return
    if remote_directory == '':
        # top-level relative directory must exist
        return
    try:
        sftp.chdir(remote_directory) # sub-directory exists
    except IOError:
        dirname, basename = os.path.split(remote_directory.rstrip('/'))
        mkdir_p(sftp, dirname) # make parent directories
        sftp.mkdir(basename) # sub-directory missing, so created it
        sftp.chdir(basename)
        return True

sftp = paramiko.SFTPClient.from_transport(transport)
mkdir_p(sftp, remote_path) 
sftp.put(local_path, '.')    # At this point, you are in remote_path
sftp.close()
"
Functional Python with Lists,"def todos_lista(lista, guarda):
    return all(map(guarda, lista))
"
Keeping some of the elements in a list,">>> a = ['a','b','c','d','e']
>>> [x for x in a if x in ['a', 'c', 'e' ]]
['a', 'c', 'e']
"
"What is the difference between using matrix multiplication with np.matrix arrays, and dot()/tensor() with np.arrays?","In [28]: m.T.shape, m.shape
Out[28]: ((3,), (3,))
In [29]: m.dot(C)
Out[29]: array([15, 18, 21])

In [30]: C.dot(m)
Out[30]: array([ 5, 14, 23])
"
How to instantiate a class function for not instantiated objects?,"f = ndarray.min
print f(a), f(b) 
"
comparing lists and storing index values if lists match,"wordsindict = ['somewhere', 'over', 'rainbow', 'bluebirds', 'fly', 'birds', 'fly', 'over', 'rainbow', 'why', 'why', 'double', 'time', 'population', 'long', 'takes', 'population', 'double', 'size', 'whoa', 'full', 'rainbow', 'way', 'double', 'rainbow', 'double', 'rainbow', 'way']

list2 = [['somewhere', 'over', 'rainbow', 'bluebirds', 'fly', 'birds', 'fly', 'over', 'rainbow', 'why', 'why'], ['double', 'time', 'population', 'long', 'takes', 'population', 'double', 'size'], ['whoa', 'full', 'rainbow', 'way', 'double', 'rainbow', 'double', 'rainbow', 'way']]
d = {}
for word in set(wordsindict):
    d[word] = []
    for i, l in enumerate(list2):
        for wordy_word in l:
            if wordy_word == word:
                d[word].append(i)
print(d)
"
Python: print unicode string stored as a variable,"import json
import re
import urllib.request
from urllib.parse import quote_plus


baseurl = ""https://en.wiktionary.org/w/api.php?action=query&titles={}&prop=revisions&rvprop=content&format=json""

def getIPAen(word):
    url = baseurl.format(quote_plus(word))
    jsondata = urllib.request.urlopen(url).read().decode('utf8')
    data = json.loads(jsondata)
    for page in data['query']['pages'].values():
        for revision in page['revisions']:
            if 'IPA' in revision['*']:
                ipa = re.search(r""{IPA\|/(.*?)/\|"", revision['*']).group(1)
                print(ipa)
"
inverted comma and string in python,">>> 'string' == ""string""
True
"
Python: searching through html file grabbing <a> tags with the href and text content,"soup = BeautifulSoup(html)

print([a[""href""] for a in soup.select(""a[href^=http]"")])
"
Generate in flight string from [A-z],">>> import string
>>> import random
>>> from itertools import islice, cycle
>>> def randstr():
...     return ''.join(islice(cycle(string.ascii_lowercase),
...                           random.randint(1, 50))).title()
...
>>> randstr()
'Abcdefghijklmnopq'
>>> randstr()
'Abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq'
>>> randstr()
'Abcdefghijklmnopqrs'    
"
Most Pythonic Way to Create Many New Columns in Pandas,"def cols_via_concat(df):
    df = pd.concat([df, df.apply(lambda row: pd.Series({i : i * row[i-100] for i in range(100, 150)}), axis=1)])
    return df


%timeit cols_via_concat(df)

1 loops, best of 3: 450 ms per loop

<class 'pandas.core.frame.DataFrame'>
Int64Index: 1000 entries, 0 to 999
Columns: 150 entries, 0 to 149
dtypes: float64(150)
memory usage: 1.2 MB
None
"
How to save an animation without showing the previous frames in the video?,"patches = []
patches.append(ax.add_patch( plt.Circle((xp[i],yp[i]),0.02,color='b') ))
"
Call Python class methods from the command line,"test_instance = test(filepath)
test_instance.method()
"
How do you extract a column from a multi-dimensional array?,[row[0] for row in a]
"Converting JSON String to Dictionary, Not List (Python)","import numpy
json1_file = open('json1')
json1_str = json1_file.read()
json1_data = json.loads(json1_str)[0]
datapoints = numpy.array(json1_data['datapoints'])
avg = datapoints[0:5,0].mean()
# avg is now 35.8
"
Merge many tsv files by common key using Python pandas,"In [12]: pd.concat([df1, df2], axis=1)
Out[12]: 
             144-93-02  144-93-01
1:14522:G:A        NaN          1
1:14653:C:T          1          1
1:14677:G:A          1        NaN
1:14907:A:G          1          1
"
check if element in values also in key in dict,"def tofunnystructure(classDict):
    finalStructure = {}
    keys = set(classDict.keys())

    for key, vals in classDict.iteritems():
        newval = {}

        value = [val for val in vals if val not in keys]
        if value:
            newval['value'] = value[0] if len(value) == 1 else value

        groups = [val for val in vals if val in keys]
        if groups:
            newval['group'] = groups[0] if len(groups) == 1 else groups

        finalStructure[key] = newval

    return finalStructure
"
counting 2*2 squares in n*n binary matrix,">>> from itertools import product
>>> count_squares([[1,1],[1,1]])
>>> def count_squares(A):
...     width, height = len(A[0]), len(A)
...     indices = product(range(width - 1), range(height - 1))
...     is_square = lambda x, y: all(A[a][b] == 1 for a, b in product((x, x + 1), (y, y + 1)))
...     return sum(1 for x, y in indices if is_square(x, y))
... 
>>> count_squares([[1,1],[1,1]])
1
>>> count_squares([[1, 1, 0, 1] , [1, 1, 1, 1], [1, 1, 1, 0], [0, 1, 1, 1]])
4
"
Python: Optimising a list comprehension which compares two integers,"import collections as coll
import itertools

add_dict = coll.defaultdict(list)
for atom_1, atom_2 in itertools.product(atoms_1, atoms_2):
    if atom_1 == atom_2: continue
    (atom_min, atom_max) = (atom_1, atom_2) if atom_1 < atom_2 else (atom_2, atom_1)
    add_dict[atom_min].append(atom_max)
"
combining list elements in a list,"In [45]: lis=[['a', 10, 20], ['b', 10, 20], ['a', 20, 100]]

In [46]: lis.sort(key=itemgetter(0)) #sort the list first

In [47]: lis
Out[47]: [['a', 10, 20], ['a', 20, 100], ['b', 10, 20]]

In [49]: [[k]+map(sum,zip(*[x[1:] for x in g])) for k,g in groupby(lis,key=itemgetter(0))]
Out[49]: [['a', 30, 120], ['b', 10, 20]]
"
Longest increasing subsequence,"def subsequence(seq):
    if not seq:
        return seq

    M = [None] * len(seq)    # offset by 1 (j -> j-1)
    P = [None] * len(seq)

    # Since we have at least one element in our list, we can start by 
    # knowing that the there's at least an increasing subsequence of length one:
    # the first element.
    L = 1
    M[0] = 0

    # Looping over the sequence starting from the second element
    for i in range(1, len(seq)):
        # Binary search: we want the largest j <= L
        #  such that seq[M[j]] < seq[i] (default j = 0),
        #  hence we want the lower bound at the end of the search process.
        lower = 0
        upper = L

        # Since the binary search will not look at the upper bound value,
        # we'll have to check that manually
        if seq[M[upper-1]] < seq[i]:
            j = upper

        else:
            # actual binary search loop
            while upper - lower > 1:
                mid = (upper + lower) // 2
                if seq[M[mid-1]] < seq[i]:
                    lower = mid
                else:
                    upper = mid

            j = lower    # this will also set the default value to 0

        P[i] = M[j-1]

        if j == L or seq[i] < seq[M[j]]:
            M[j] = i
            L = max(L, j+1)

    # Building the result: [seq[M[L-1]], seq[P[M[L-1]]], seq[P[P[M[L-1]]]], ...]
    result = []
    pos = M[L-1]
    for _ in range(L):
        result.append(seq[pos])
        pos = P[pos]

    return result[::-1]    # reversing
"
Getting current url,"def view2(request, form_class=MyForm, template_name='myapp/page2.html'):
    # app code here
    this_view = 'view2'
    render_to_response(template_name, locals(), RequestContext(request))
"
Nested loops with matrix - why does this second matrix at all?,"matrix = [[4,5,6,7],[2,4,9,3]]
for row in matrix:
  for element in row:
    print element
"
How to query the datastore by kind name as string using metadata,"from google.appengine.ext import db

model_class = db.class_for_kind(""my_model"")     # this method is not published
query = model_class.all()
print query.count()
"
Where does __import__ get alias names from?,"import foo
"
Is there an easy way to get next and prev values in a for-loop?,">>> a = range(10)
>>> for i, j in zip(a, a[1:]):
...  print i, j
... 
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
"
Converting text file to dictionary in python,"d = defaultdict(set)

with open(""romEdges.txt"") as fin:
    for line in fin:
        k, v = line.strip().split()
        d[k].add(v)
print d
"
How to clear empty keys in a dictionary with subdictionaries,"import json

s = '{""1"": ""\\""s\\u00f3 pra fude"", ""None"": null, ""Note"": [], ""N\\u00e3o reclama"": [], ""12.2"": null, ""666"": {}, ""merda 2"": [1, 2, 3], ""merda 1"": {}, ""T\\u00e9dio da nisso"": {""Note"": null}, ""Fudeu"": {""1"": null, ""2"": 1, ""3"": 2}, ""Quero $$$"": []}'

d = json.loads(s)
result = dict((k, v) for k, v in d.iteritems() if not v or k == ""Note"")
"
Python - Web Scraping - BeautifulSoup & CSV,"import requests
import csv
from bs4 import BeautifulSoup

BASE_URL = 'http://www.expatistan.com/cost-of-living/comparison/{home_city}/{city}'
home_city = 'Phoenix'

with open('City.txt') as input_file:
    with open(""Expatistan.csv"", ""w"") as output_file:
        writer = csv.writer(output_file)
        writer.writerow([""City"", ""Food"", ""Housing"", ""Clothes"", ""Transportation"", ""Personal Care"", ""Entertainment""])
        for line in input_file:
            city = line.strip()
            url = BASE_URL.format(home_city=home_city, city=city)
            soup = BeautifulSoup(requests.get(url).text)

            table = soup.find(""table"", class_=""comparison"")
            differences = []
            for title in table.find_all(""tr"", class_=""expandable""):
                percent_difference = title.find(""th"", class_=""percent"")
                if ""expensiver"" in percent_difference.span['class']:
                    differences.append('+' + percent_difference.span.string)
                else:
                    differences.append('-' + percent_difference.span.string)
            writer.writerow([city] + differences)
"
Python Pandas - replace values with NAN in multiple columns based on mutliple dates?,"df.where(df.apply(lambda x: x.index < pd.Timestamp(x.name[2])))
"
Should I assign a range outside of a loop in Python?,"import timeit

NUM_ITERATIONS = 5000
NUM_BENCHMARKS = 50

def a():
    x = 0
    for i in range(NUM_ITERATIONS):
        for j in range(NUM_ITERATIONS):
            x+=1
    return x

def b():
    x = 0
    r = range(NUM_ITERATIONS)
    for i in range(NUM_ITERATIONS):
        for j in r:
            x+=1
    return x

def c():
    x = 0
    r1 = range(NUM_ITERATIONS)
    r2 = range(NUM_ITERATIONS)
    for i in r1:
        for j in r2:
            x+=1
    return x

def d():
    x = 0
    for i in xrange(NUM_ITERATIONS):
        for j in xrange(NUM_ITERATIONS):
            x += 1
    return x

def e():
    x = 0
    r = xrange(NUM_ITERATIONS)
    for i in xrange(NUM_ITERATIONS):
        for j in r:
            x += 1
    return x

print ""A: %.4f"" % (timeit.timeit(a, number=NUM_BENCHMARKS))
print ""B: %.4f"" % (timeit.timeit(b, number=NUM_BENCHMARKS))
print ""C: %.4f"" % (timeit.timeit(c, number=NUM_BENCHMARKS))
print ""D: %.4f"" % (timeit.timeit(d, number=NUM_BENCHMARKS))
print ""E: %.4f"" % (timeit.timeit(e, number=NUM_BENCHMARKS))
"
Convert date to second from a reference - Python,"from datetime import datetime
import pytz
import calendar

dt = datetime.now(pytz.utc)
secs = calendar.timegm(dt.utctimetuple())
print dt, secs
"
splitting numpy array into 2 arrays,">>> A[:,[1,2]] # choose all rows from columns 1-2 (gives C)
array([[ 1,  2],
       [11, 12],
       [21, 22]])

>>> A[:,[0]+range(3, 10)] # choose all rows from columns 0, 3-9 (gives B)
array([[ 0,  3,  4,  5,  6,  7,  8,  9],
       [10, 13, 14, 15, 16, 17, 18, 19],
       [20, 23, 24, 25, 26, 27, 28, 29]])
"
Detect URLs changes in python,">>> example = requests.get(""https://periscope.tv/couchmode"", allow_redirects=True)
>>> example.status_code
200
>>> example.history
[<Response [307]>]
>>> example.history[0].url
u'https://periscope.tv/couchmode'
>>> example.url
u'https://periscope.tv/w/aZwcYHNlcnZpY2V8MURYeHl6WUFaUWdLTerSfgniRKoRgIPbfxxlbAGofYQNBd8WZZTEelJ0KavI?mode=couch'
"
"Sort python list with order of another, larger list","sorted(b, key=lambda v: a_dict.get(v, float('inf')))
"
Preserving original doctype and declaration of an lxml.etree parsed xml,"from lxml import etree
from StringIO import StringIO

xml_str = '''<?xml version=""1.0"" encoding=""iso-8859-1""?>
 <!DOCTYPE root SYSTEM ""test"" [ <!ENTITY tasty ""eggs""> ]>
  <root>
   <a>&tasty;</a>
 </root>
'''

# get the ElementTree using parse
parse_tree = etree.parse(StringIO(xml_str))
encoding = parse_tree.docinfo.encoding
result = etree.tostring(parse_tree, xml_declaration=True, encoding=encoding)
print ""%s\nparse ElementTree:\n%s\n"" % ('-'*20, result)

# get the ElementTree using fromstring
fromstring_tree = etree.fromstring(xml_str).getroottree()
encoding = fromstring_tree.docinfo.encoding
result = etree.tostring(fromstring_tree, xml_declaration=True, encoding=encoding)
print ""%s\nfromstring ElementTree:\n%s\n"" % ('-'*20, result)

# DOCTYPE is lost, and no access to encoding
fromstring_element = etree.fromstring(xml_str)
result = etree.tostring(fromstring_element, xml_declaration=True)
print ""%s\nfromstring Element:\n%s\n"" % ('-'*20, result)
"
calling the indexed position of a string,">>> import os.path
>>> path = 'C:\\Docs\\Bob\\blah\\blah\\blah'
>>> base = 'C:\\Docs'
>>> os.path.relpath(path, base)
'Bob\\blah\\blah\\blah'
"
How do i write the integers that in this file to the mynumbers.txt file?,"foo = """"
while (looping):
    #find n
    foo += str(n) + "" ""
outFile.write(foo)
"
Replacing punctuation in a data frame based on punctuation list,"In [41]:

import pandas as pd
pd.set_option('display.notebook_repr_html', False)
df = pd.DataFrame({'text':['test','%hgh&12','abc123!!!','porkyfries']})
df
Out[41]:
         text
0        test
1     %hgh&12
2   abc123!!!
3  porkyfries

[4 rows x 1 columns]
"
How does name resolution work when classes are derived across modules?,"class A(object):
  def test(self):
    print message

class B(A):
  pass

def main():
  global message
  message = ""hello""
  A().test()
  B().test()

  # resolve circular import by importing in local scope
  import mod2
  mod2.C().test()

if __name__ == ""__main__"":
  # break into mod1 namespace from __main__ namespace
  import mod1
  mod1.main()
"
Why are unparanthesized tuples in generators not allowed in the expression field?,"x = ('%s:%s:%s' % k, v, k for k, v in some_dict.items())
x = ('%s:%s:%s' % k, (v, k) for k, v in some_dict.items())
x = ('%s:%s:%s' % (k, v, k) for k, v in some_dict.items())
"
Pivot Tables or Group By for Pandas?,"In [30]: pd.pivot_table(df, index=['Col X'], columns=['Col Y'], aggfunc=len, fill_value=0)
Out[30]:
Col Y    cat 1  cat 2  cat 3
Col X
class 1      1      0      0
class 2      1      0      1
class 3      0      1      0
"
match float with comma and then replace comma with dot?,"import re
with open('input.txt', 'r+') as f:
    newf = re.sub(r'(\s+[+-]?[0-9]+),([0-9]+\s+)',r'\1.\2', f.read())
    f.seek(0)
    f.write(newf)
"
Numpy sorting by increasing datetime,"    unified = numpy.array([[datetime(2012,02,03,12,00,00), 4, 1],[datetime(2012,02,03,15,00,00), 5, 2],[datetime(2012,02,03,13,00,00), 2, 1]], dtype=object)
    >>> unified
        array([[2012-02-03 12:00:00, 4, 1],
               [2012-02-03 15:00:00, 5, 2],
               [2012-02-03 13:00:00, 2, 1]], dtype=object)

    >>> unified = numpy.array(sorted(unified, key=lambda x: x[0]))
    >>> unified
        array([[2012-02-03 12:00:00, 4, 1],
               [2012-02-03 13:00:00, 2, 1],
               [2012-02-03 15:00:00, 5, 2]], dtype=object)
"
How can i omit the redundant words in python condition loop,">>> obj = None
>>> obj = (obj,[1,2,3])[::cmp(bool(obj),0.5)]
>>> obj
[1, 2, 3]
>>> obj = True
>>> obj = (obj,[1,2,3])[::cmp(bool(obj),0.5)]
>>> obj
True
"
Accept a single string instead of normal parameters,"class Time:
    def __init__(self, hours=0, minutes=0, seconds=0, time_now=''):
        if hours == 'now':
            tmp_t = now()
            self.hour = tmp_t.hour
            self.min = tmp_t.min
            self.sec = tmp_t.sec
        else:
            t = abs(3600*hours + 60*minutes + seconds)
            self.hour = t//3600
            self.min = t//60%60
            self.sec = t%60
"
ValueError when adding row to Dataframe,"df = pandas.DataFrame(index=numpy.arange(0, 1), columns=required_indices_of_series)
#This just creates a dataframe with the right columns, but with values I need to modify, which I aim to do below.
print('1', df)
count = 0
for bond in bonds:
    #Some stuff here to get the Series Object `amounts` which is irrelevant.
    print('2', pandas.DataFrame(amounts).T)
    df.loc[count] = pandas.DataFrame(amounts).T.loc[<column>]
    count += 1
"
web scraping using beautifulsoup: separating values,"from bs4 import BeautifulSoup

content = '''
<a href=""/en/Members/"">Courtney, John  (Dem)</a>
<a href=""/en/Members/"">Clinton, Hilary  (Dem)</a>,
<a href=""/en/Members/"">Lee, Kevin  (Rep)</a>
'''

politicians = []
soup = BeautifulSoup(content)
for item in soup.find_all('a'):
    name, party = item.text.strip().rsplit('(')
    politicians.append((name.strip(), party.strip()[:-1])) 
"
How to find the iteration index in this loop,"animations = {
    action : {
        direction : (
            (duration, (i * len(directions) + j, x)) for x in frames
        ) for j, direction in enumerate(directions)
    } for i, action in enumerate(actions)
}
"
Simulating Fibonacci's Rabbits with multiple offsprings using python,"def step(state):
    return ''.join(['MNNN' if s == 'M' else 'M' for s in state])
"
Entering Parameters in Python,">>> import ast
>>> dumb_parameters = [""1,3,2"", ""4,5,6""]
>>> parameters = [ast.literal_eval(s) for s in dumb_parameters]
>>> parameters
[(1, 3, 2), (4, 5, 6)]
>>> random.triangular(*parameters[0])
2.2933615845752904
"
converting a string which contains both utf-8 encoded bytestrings and codepoints to utf-8 encoded string,"import re
D = {u'excerpt':u'...where we\xe2\x80\x99ll just have to wait and see, I\xe2\x80\x99m sure official announcements with start flowing in the coming months \u2013special\u2013...'}
s = D[u'excerpt']
print s
print re.sub(ur'[\xc2-\xf4][\x80-\xbf]+',lambda m: m.group(0).encode('latin1').decode('utf8'),s)
"
Python: sorting items in a dictionary by a part of a key?,"In [92]: sorted(d.items(), key=lambda (name, num): (name.rsplit(None, 1)[0], num))
Out[92]:
[('Mary XXIV', 24),
 ('Robert III', 3),
 ('Robert VIII', 8),
 ('Robert XV', 15),
 ('Usamec VII', 7),
 ('Usamec XL', 40),
 ('Usamec XLII', 42),
 ('Usamec XLIX', 49),
 ('Zemco III', 3)]
"
Precision of decimals in Python,"from decimal import Decimal

values = [
    ('tens',   Decimal(10)),
    ('fives',  Decimal(5)),
    ('ones',   Decimal(1)),
    ('tenths', Decimal('0.1'))
]

def get_digits(num):
    output_dict = {}
    for place, value in values:
        output_dict[place] = int(num // value)  # Cast from Decimal to int
        num = num % value
    return output_dict

num = Decimal('277.9')
print(get_digits(num))
# {'tens': 27, 'ones': 2, 'tenths': 9, 'fives': 1}

num = Decimal('277.6')
print(get_digits(num))
#{'tens': 27, 'ones': 2, 'tenths': 6, 'fives': 1}
"
Can .findall() match multiple values in python etree?,"log.xpath('.//(element1|element2)')
"
Unable to locate files with long names on Windows with Python,"short_unc=win32api.GetShortPathName(win32api.GetShortPathName(win32api.GetShortPathName(""\\\\K53\\Users\\Tolan\\testing\\xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"")+""\\xxxxxxxxxxxxxxxxxxxxxxxxdddddddddddddddddddddwgggggggggggggggggggggggggggggggggggxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"") + ""\\esssssssssssssssssssssggggggggggggggggggggggggggggggggggggggggggggggeee"")
>>> print(short_unc)
\\K53\Users\Tolan\testing\XXXXXX~1\XXXXXX~1\ESSSSS~1
>>> import os
>>> os.listdir(short_unc)
['test.txt']
"
Having more than one parameter with def in python,"def test_var_kwargs(farg, **kwargs):
    print ""formal arg:"", farg
    for key in kwargs:
        print ""another keyword arg: %s: %s"" % (key, kwargs[key])

test_var_kwargs(farg=1, myarg2=""two"", myarg3=3)
"
Randomly Interleave 2 Arrays In Python,"a = [1, 2, 3, 4]
b = [5, 6, 7, 8, 9]

c = []
tmp = [a]*len(a) + [b]*len(b)
while a and b:
    c.append(random.choice(tmp).pop(0))

c += a + b
"
Python - How to extract the last x elements from a list,my_list[-10:]
How to merge functions in python,"class DynamicMethods(object):
   def __init__(self):
      pass

   class HiddenImplementation(object):
      ''' we create a separate implementation class that:
         1. stores the 'type' of the call (or whatever else you need to
           store on a per-call basis) 
         2. define a __call__() method that lets us perform whatever our 
         dynamic method call needs to do. In this example, we just print 
         the kwargs we're passed along with the call 'type'.
      '''  
      def __init__(self, typeName):
         self.typeName = typeName

      def __call__(self, **kwargs):
         args = kwargs
         args['type'] = self.typeName
         for k, v in args.items():
            print ""{0}: {1}"".format(k, v)



   def __getattr__(self, name):
     ''' any time code looks up an attribute that the class doesn't have 
        explicitly, this will be called. If the attribute being looked up
        starts with 'get', we create a HiddenImplementation object and 
        return that.
     '''
      if name.startswith('get'):
         return self.HiddenImplementation(name)


if __name__ == ""__main__"":
   d = DynamicMethods()
   d.getId(a=1, b=2, c=3)
"
python modules with RubyPython,"RubyPython.start
nltk = RubyPython.import(""nltk"")
RubyPython.stop
"
xml filtering with python,"import lxml.etree
data='''\
<node1>
  <node2 a1=""x1""> ... </node2>
  <node2 a1=""x2""> ... </node2>
  <node2 a1=""x1""> ... </node2>
</node1>
'''
doc = lxml.etree.XML(data)
e=doc.find('node2/[@a1=""x2""]')
doc.remove(e)
print(lxml.etree.tostring(doc))

# <node1>
#   <node2 a1=""x1""> ... </node2>
#   <node2 a1=""x1""> ... </node2>
# </node1>
"
Searching list of strings using regular expressions in python,"def searcher(s):
    if COMPILED_REGEXP_OBJECT.search(s):
        return s

matching_strings = filter(searcher, YOUR_LIST_OF_STRING)
"
python can't specific xpath for <a> tag,"def parse(self, response):
    sel = Selector(response)
    sites = sel.xpath('//div[@class=""item paid-featured-item""]/div[@class=""listing-item""]')
    cars = []
    for site in sites:
        car = CarItem()
        car['ATitle']=site.xpath('.//div[@class=""block item-title""]/h3/span[@class=""title""]/a/text()').extract()
        cars.append(car)
    return cars
"
Creating all combinations of a string given character values from a dictionary in python,">>> [''.join(p) for p in product(*poss)]
['AAG', 'AAT', 'ATG', 'ATT']
"
"Python Pandas groupby function with dynamic parameters for monthly, hourly means","def datameans(df, avggrouper1, avggrouper2, startdate, enddate):  
    df_hour_means = df[startdate:enddate]      
    df_hour_means = df_hour_means.groupby(
        lambda x: (getattr(x,avggrouper1), getattr(x,avggrouper2))).mean()  
    print df_hour_means.to_string()
    df_hour_means.plot()
"
Extracting a table from webpage with regex,">>> import re
>>> content = '''
... [CONTENT BEFORE TABLE]
... <table border=""1"" cellpadding=""6"" bordercolor=""#000000"">
... [IP ADDRESSES AND OTHER INFO]
... </table>
... [CONTENT AFTER TABLE]
... '''
>>> pat = r""(.*)<table border=\""1\"" cellpadding=\""6\"" bordercolor=\""#000000\"">(.*)</table>(.*)""
>>> re.match(pat, content, re.DOTALL)
<_sre.SRE_Match object at 0x02520520>
>>> re.match(pat, content, re.DOTALL).group(2)
'\n[IP ADDRESSES AND OTHER INFO]\n'
>>>
"
Safe way to execute commands on linux server when part of command is from a user input,"import subprocess
p = subprocess.Popen([""/usr/bin/passwd"", username])
"
how to make qmenu item checkable pyqt4 python,"from PyQt4 import QtGui

app = QtGui.QApplication([])

w = QtGui.QMainWindow()
menu = QtGui.QMenu(""menu"", w)

menu.addAction(QtGui.QAction('50%', menu, checkable=True))
menu.addAction(QtGui.QAction('100%', menu, checkable=True))
menu.addAction(QtGui.QAction('200%', menu, checkable=True))
menu.addAction(QtGui.QAction('300%', menu, checkable=True))
menu.addAction(QtGui.QAction('400%', menu, checkable=True))

w.menuBar().addMenu(menu)
w.show()
app.exec_()
"
how to apply binary search in python on sorted list of string elements?,"import bisect, itertools

locations = [
    ""Aaaa|aaaa|Test"",
    ""Bbbb|bbbb|Test"",
    ""New Abbey|Ceredigion|United Kingdom"",
    ""New Albany|Indiana|United States"",
    ""New Albany|Kansas|United States"",
    ""New Albany|Mississippi|United States"",
    ""New Albany|Ohio|United States"",
    ""Zzzz|zzzz|Test""
    ]

search = ""New""
start_index = bisect.bisect_left(locations, search)
print list(itertools.takewhile(lambda x: x.startswith(search), itertools.islice(locations, start_index, None)))
"
Expanding algebraic powers in python (sympy),">>> a = Symbol('a')
>>> exp = a**2
>>> print(exp)
a**2
>>> print(pow_to_mul(exp))
a*a
"
Creating dictionaries from a text file,"fd = open('data.txt')
lines = [line.strip() for line in fd]
adict = {}
for line in lines:
  splitted = [i for i in line.split(',')]
  key = splitted[0]
  adict[key] = splitted[1:]
print adict
"
How to remove whitespace in BeautifulSoup,"re.sub('[\\ \\n]{2,}', '', yourstring)"
Strange behavior of MySQL SELECT,"import config
import MySQLdb
import multiprocessing as mp
import random
import string
import time

def random_string(n):
    return ''.join(random.choice(string.letters) for _ in range(n))

def generate_data():
    conn=MySQLdb.connect(
        host=config.HOST,user=config.USER,
        passwd=config.PASS,db='test')    
    cursor=conn.cursor()
    while True:
        with open('/tmp/test.dat','w') as f:
            for _ in range(20):
                f.write('{b}\n'.format(b=random_string(10)))
        # sql='LOCK TABLES foo WRITE'
        # cursor.execute(sql)
        sql=""LOAD DATA INFILE '/tmp/test.dat' INTO TABLE test.foo""
        cursor.execute(sql)
        conn.commit()
        # sql='UNLOCK TABLES'
        # cursor.execute(sql)        
        time.sleep(0.05)

def setup_innodb(connection):
    cursor=connection.cursor()
    sql='DROP TABLE IF EXISTS foo'
    cursor.execute(sql)
    sql='''\
        CREATE TABLE `foo` (
          `bar` varchar(10) NOT NULL
        ) ENGINE=InnoDB  
        '''
    cursor.execute(sql)
    connection.commit()

if __name__ == '__main__':
    NUMBER_OF_ITERATIONS = 20
    conn=MySQLdb.connect(
        host=config.HOST,user=config.USER,
        passwd=config.PASS,db='test')
    setup_innodb(conn)

    # Start a process which is ""simultaneously"" calling LOAD DATA INFILE
    proc=mp.Process(target=generate_data)
    proc.daemon=True
    proc.start()

    for i in range( NUMBER_OF_ITERATIONS ):
        cursor = conn.cursor()
        # sql='''SELECT field 
        #        FROM table 
        #        WHERE other_field = 0 
        #        LIMIT 10 LOCK IN SHARE MODE'''
        # sql='LOCK TABLES foo READ'
        # cursor.execute(sql)
        sql='''SELECT * 
               FROM foo
               LOCK IN SHARE MODE
               '''
        res = cursor.execute(sql)
        print '# of selected rows: ' + str(res)
        values = cursor.fetchall()
        # http://dev.mysql.com/doc/refman/5.0/en/innodb-locking-reads.html
        # Locks set by LOCK IN SHARE MODE and FOR UPDATE reads are released when
        # the transaction is committed or rolled back.
        conn.commit()
        time.sleep(0.1)

    conn.close()
    print 'DONE'
"
filter items by value in dict,"def filter_func(dic, filterdic):
    for k,v in filterdic.items():
        if k == 'items':
            if any(elemv in dic[k] for elemv in v):
                return True
        elif v == dic[k]:
            return True
    return False

def filter_cards(deck, filterdic):
    return list(filter(lambda dic, filterdic=filterdic: filter_func(dic, filterdic) , deck))
"
How to insert unescaped html fragment in Beautiful Soup 4,"c.wrap(soup.new_tag('div', **{'class': 'case'}))
"
Count since last occurence in NumPy,"Numpy one-liner:
x = numpy.array([0, 0, 5, 0, 0, 2, 1, 0, 0])
result = numpy.arange(len(x)) - numpy.maximum.accumulate(numpy.arange(len(x)) * (x > 0))
"
Why/how does iterating over a list and calling 'pass' each time fix this function?,"def auto_update_ratings(amounts, assessment_entries_qs, lowest_rating=-1):
    # assessment_entries_qs is an unevaluated QuerySet
    # from your calling code, it would probably generate a query like this:
    # SELECT * FROM assessments ORDER BY RANDOM()
    start = 0
    rating = lowest_rating
    ids = assessment_entries_qs.values_list('id', flat=True)
    # ids is a ValueQuerySet that adds ""SELECT id""
    # to the query that assessment_entries_qs would generate.
    # So ids is now something like:
    # SELECT id FROM assessments ORDER BY RANDOM()

    # we omit the loop

    for amount in amounts:
        end_mark = start + amount
        entries = ids[start:end_mark]
        # entries is now another QuerySet with a LIMIT clause added:
        # SELECT id FROM assessments ORDER BY RANDOM() LIMIT start,(start+end_mark)
        # When filter() gets a QuerySet, it adds a subquery
        a = assessment_entries_qs.filter(id__in=entries).update(rating=rating)
        # FINALLY, we now actually EXECUTE a query which is something like this:
        # UPDATE assessments SET rating=? WHERE id IN 
        # (SELECT id FROM assessments ORDER BY RANDOM() LIMIT start,(start+end_mark))
        start = end_mark
        rating += 1
"
"""Canonical"" offset from UTC using pytz?","import pytz
import datetime as DT
utcnow = DT.datetime.utcnow()

canonical = dict()
for name in pytz.all_timezones:
    tzone = pytz.timezone(name)
    try:
        dstoffset = tzone.dst(utcnow, is_dst=False)
    except TypeError:
        # pytz.utc.dst does not have a is_dst keyword argument
        dstoffset = tzone.dst(utcnow)
    if dstoffset == DT.timedelta(0):
        # utcnow happens to be in a non-DST period
        canonical[name] = tzone.localize(utcnow, is_dst=False).strftime('%z') 
    else:
        # step through the transition times until we find a non-DST datetime
        date = utcnow
        while True:
            date = date - DT.timedelta(days=1)
            dstoffset = tzone.dst(date, is_dst=False) 
            if dstoffset == DT.timedelta(0):
                canonical[name] = (tzone.localize(date, is_dst=False)
                                   .strftime('%z'))
                break

for name, utcoffset in canonical.iteritems():
    print('{} --> {}'.format(name, utcoffset)) 

# All timezones have been accounted for
assert len(canonical) == len(pytz.all_timezones)
"
Regular expression for multiple matching in a hierarchical string,">>> import re
>>> s = ""F21W2121/02""
>>> re.findall(r'^((((([A-Z])\d+)[A-Z])\d+)/\d+)$', s)
[('F21W2121/02', 'F21W2121', 'F21W', 'F21', 'F')]
>>> re.findall(r'^((((([A-Z])\d+)[A-Z])\d+)/\d+)$', ""G06Q30/00"")
[('G06Q30/00', 'G06Q30', 'G06Q', 'G06', 'G')]
"
Why fuction's not returning value?,"def main():
    print(""<------Initializing Updating Process------>"")
    srcFile ='abc_20160301_(file1).csv'
    update2new(srcFile) #the return is NOT captured here
    print('\nSuccessfully Executed [ {}]......'.format(str(srcFile)),end='\n')
    print (""OK"")
"
pandas dataframe - change values based on column heading,"from pandas import *
df = DataFrame([[0, 1, 1], [1, 1, 0], [1, 0, 1],], columns=['a','b','c'])

foo = []
for i in df.index:
    foo.append( df.columns[df.ix[i] == 1])
DataFrame(foo, index = df.index)
"
What is the advantage of a list comprehension over a for loop?,"def slower():
    result = []
    for elem in some_iterable:
        result.append(elem)
    return result

def faster():
    return [elem for elem in some_iterable]
"
Remove unwanted characters and convert to int in Python,"import re
text_ = re.sub(""[0-9]+"", "" "", text);
"
Random strings in Python,return ''.join(random.choice(string.lowercase) for i in range(length))
Is there an algorithm to find unique combinations of 2 lists? 5 lists?,"r=[''.join([str(elt) for elt in p]) for p in itertools.product(*(set(elt) for elt in (v,w,x,y,z)))]
"
Why does Python's tempfile method unlink() require a filename?,"x.close()
os.unlink(x.name)
"
"Python: Pokemon battle (classes, functions)","class Foo(object):
    def __init__(self,attr1,attr2):
        self.attr1 = attr1
        self.attr2 = attr2v
"
Numpy array [? 5 5] to five arrays with [? 5],"import numpy as np

aaa=np.array([[[ 0 , 1,  2,  3,  4],
 [ 5,  6,  7,  8,  9],
 [10, 11, 12, 13, 14],
 [15, 16, 17, 18, 19],
 [20, 21, 22, 23, 24]],
[[25, 26, 27, 28, 29],
 [30, 31, 32, 33, 34],
 [35, 36, 37, 38, 39],
 [40, 41, 42, 43, 44],
 [45, 46, 47, 48, 49]],
[[50, 51, 52, 53, 54],
 [55, 56, 57, 58, 59],
 [60, 61, 62, 63, 64],
 [65, 66, 67, 68, 69],
 [70, 71, 72, 73, 74]]])

bb= np.transpose(aaa,axes=[1,0,2])
print bb
"
list comprehension to create list of list,">>> a = [1,2,3,4,5]
>>> b = [[x, True if x == 4 else False] for x in a]
>>> b
[[1, False], [2, False], [3, False], [4, True], [5, False]]
"
Is comprehension possible here?,"{x: func(y) for x, y in l if isinstance(func(y), int)}
"
how can i find out the uploaded file name in python cgi,"def populenv(self):
        path = self.path
        dir, rest = '.', 'ciao'

        # find an explicit query string, if present.
        i = rest.rfind('?')
        if i >= 0:
            rest, query = rest[:i], rest[i+1:]
        else:
            query = ''

        # dissect the part after the directory name into a script name &
        # a possible additional path, to be stored in PATH_INFO.
        i = rest.find('/')
        if i >= 0:
            script, rest = rest[:i], rest[i:]
        else:
            script, rest = rest, ''

        # Reference: http://hoohoo.ncsa.uiuc.edu/cgi/env.html
        # XXX Much of the following could be prepared ahead of time!
        env = {}
        env['SERVER_SOFTWARE'] = self.version_string()
        env['SERVER_NAME'] = self.server.server_name
        env['GATEWAY_INTERFACE'] = 'CGI/1.1'
        env['SERVER_PROTOCOL'] = self.protocol_version
        env['SERVER_PORT'] = str(self.server.server_port)
        env['REQUEST_METHOD'] = self.command
        uqrest = urllib.unquote(rest)
        env['PATH_INFO'] = uqrest
        env['SCRIPT_NAME'] = 'ciao'
        if query:
            env['QUERY_STRING'] = query
        host = self.address_string()
        if host != self.client_address[0]:
            env['REMOTE_HOST'] = host
        env['REMOTE_ADDR'] = self.client_address[0]
        authorization = self.headers.getheader(""authorization"")
        if authorization:
            authorization = authorization.split()
            if len(authorization) == 2:
                import base64, binascii
                env['AUTH_TYPE'] = authorization[0]
                if authorization[0].lower() == ""basic"":
                    try:
                        authorization = base64.decodestring(authorization[1])
                    except binascii.Error:
                        pass
                    else:
                        authorization = authorization.split(':')
                        if len(authorization) == 2:
                            env['REMOTE_USER'] = authorization[0]
        # XXX REMOTE_IDENT
        if self.headers.typeheader is None:
            env['CONTENT_TYPE'] = self.headers.type
        else:
            env['CONTENT_TYPE'] = self.headers.typeheader
        length = self.headers.getheader('content-length')
        if length:
            env['CONTENT_LENGTH'] = length
        referer = self.headers.getheader('referer')
        if referer:
            env['HTTP_REFERER'] = referer
        accept = []
        for line in self.headers.getallmatchingheaders('accept'):
            if line[:1] in ""\t\n\r "":
                accept.append(line.strip())
            else:
                accept = accept + line[7:].split(',')
        env['HTTP_ACCEPT'] = ','.join(accept)
        ua = self.headers.getheader('user-agent')
        if ua:
            env['HTTP_USER_AGENT'] = ua
        co = filter(None, self.headers.getheaders('cookie'))
        if co:
            env['HTTP_COOKIE'] = ', '.join(co)
        # XXX Other HTTP_* headers
        # Since we're setting the env in the parent, provide empty
        # values to override previously set values
        for k in ('QUERY_STRING', 'REMOTE_HOST', 'CONTENT_LENGTH',
                  'HTTP_USER_AGENT', 'HTTP_COOKIE', 'HTTP_REFERER'):
            env.setdefault(k, """")
        os.environ.update(env)
"
Overwriting (updating) a pandas Series with values from another Series?,"In [1]: s1 = pd.Series([1, np.nan, 3, 4, 5, np.nan])

In [2]: s2 = pd.Series([7, 2, 3, np.nan, np.nan])
"
Delete image frame from 3d array,"import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

def main():
    # Set up 3D coordinates from -10 to 10 over a 200x100x100 ""open"" grid
    x, y, z = np.ogrid[-10:10:200j, -10:10:100j, -10:10:100j]

    # Generate a cube of interesting data
    data= np.sin(x*y*z) / (x*y*z)

    # Visualize it
    viewer = VolumeViewer(data)
    viewer.show()

class VolumeViewer(object):
    def __init__(self, data):
        self.data = data
        self.nframes = self.data.shape[0]

        # Setup the axes.
        self.fig, self.ax = plt.subplots()
        self.slider_ax = self.fig.add_axes([0.2, 0.03, 0.65, 0.03])

        # Make the slider
        self.slider = Slider(self.slider_ax, 'Frame', 1, self.nframes, 
                            valinit=1, valfmt='%1d/{}'.format(self.nframes))
        self.slider.on_changed(self.update)

        # Plot the first slice of the image
        self.im = self.ax.imshow(data[0,:,:])

    def update(self, value):
        frame = int(np.round(value - 1))

        # Update the image data
        dat = self.data[frame,:,:]
        self.im.set_data(dat)

        # Reset the image scaling bounds (this may not be necessary for you)
        self.im.set_clim([dat.min(), dat.max()])

        # Redraw the plot
        self.fig.canvas.draw()

    def show(self):
        plt.show()

if __name__ == '__main__':
    main()
"
printing tab-separated values of a list,"print('\t'.join(map(str, list)))"
Python: Alter elements of a list,"bool_list[:] = [False for item in bool_list]
"
Sort tuples by time interval? Python,"from __future__ import print_function

import datetime
import itertools


def iter_len(iterable):
    return sum(1 for __ in iterable)


def by_hour(item):  # Hour key
    timestamp = item[1]
    return '{}-{}'.format(timestamp.hour, (timestamp.hour+1) % 24)


def by_half_hour(item):  # Half-hour key
    timestamp = item[1]
    half_hour = timestamp.hour + (0.5 * (timestamp.minute // 30))
    return '{:.1f}-{:.1f}'.format(half_hour, (half_hour+0.5) % 24)


def get_results(data, key):  # Name this more appropriately
    data = sorted(data, key=key)
    for key, grouper in itertools.groupby(data, key):
        yield (key, iter_len(grouper))


data = [
    ('172.18.74.146', datetime.time(11, 28, 58)),
    ('10.227.211.244', datetime.time(11, 54, 19)),
    ('10.227.215.68', datetime.time(11, 54, 34)),
    ('10.227.209.139', datetime.time(12, 14, 47)),
    ('10.227.147.98', datetime.time(14, 47, 25)),
    ]

print('By Hour')
print(list(get_results(data, by_hour)))
print()
print(""By Half Hour"")
print(list(get_results(data, by_half_hour)))
"
What is going wrong? Nothing is printing in Python,"elif result == '7':
        result == '11'
else:
    print ""we got here""
"
Get attribute of all items in container python,"class A(object):
    def __init__(self, a):
        self.a = a
        self.b = a-1

class B(list):
    """"""
    Some customization of this class...
    """"""
    def __getattr__(self, name):
        return (getattr(item, name) for item in self)

bb = B([A(i) for i in range(10)])
print(list(bb.a))
print(list(bb.b))
"
Python remove or replace key,"def remove_sensitive(data,key):
    if key in data:
         data[key] = ""Not Stored!""
    return data
"
Deterministic and non uniform long string generation from seed,"translation = range(26)
random.shuffle(translation)  # ②
random_string = ''.join(chr(
  translation[random.randint(0, random.randint(1, 25))] + ord('a'))  # ①
  for _dummy in range(1000))
"
How to limit the number of identical log messages?,"import logging
import os
import re
import sys

from sre_parse import Pattern


class DuplicateFilter(logging.Filter):
    def __init__(self, match_against, reset_at_message, hide_at_count=5, name=''):
        super(DuplicateFilter, self).__init__(name)

        if isinstance(match_against, Pattern):
            self.match_against = match_against
        else:
            self.match_against = re.compile(match_against)

        if isinstance(reset_at_message, Pattern):
            self.reset_at_message = reset_at_message
        else:
            self.reset_at_message = re.compile(reset_at_message)

        self.hide_at_count = hide_at_count

        self.count = 0

    def filter(self, record: logging.LogRecord):
        _ = super(DuplicateFilter, self).filter(record)
        if not _:
            return _

        msg = record.getMessage()

        if self.match_against.match(msg):
            self.count += 1

            if self.count >= self.hide_at_count:
                return False

        elif self.reset_at_message.match(msg):
            record.msg = os.linesep.join([
                '{:d} more generated'.format(self.count - self.hide_at_count),
                record.msg
            ])
            self.count = 0

        return True

handler = logging.StreamHandler(sys.stdout)
handler.addFilter(DuplicateFilter('Filter me!', 'Reset at me'))

logging.basicConfig(level='INFO', handlers=[handler, ])

log = logging.getLogger()

for _ in range(10):
    log.info('Filter me!')

log.info('Reset at me')

for _ in range(3):
    log.info('Filter me!')
"
Change stride of numpy array (altering data),"n, m = 2, 4
dt1 = np.dtype([('R','u1'), ('G','u1'), ('B','u1'), ('A','u1')])
dt0 = np.dtype([('R','u1'), ('G','u1'), ('B','u1')])
X = np.arange(n*m*3,dtype='u1').reshape(n,m,3)
print repr(X)
X0 = np.zeros((n,m), dtype=dt0)
X0.data = X.data
print repr(X0)
X0.strides # (12, 3)

X1 = np.zeros((n,m), dtype=dt1)
F = np.zeros((n,m,1), dtype='u1')
X01 = np.concatenate([X, F], axis=2)
X1.data = X01.data
print repr(X1)
X1.strides # (12, 4)
"
How to add first name and last name to Django-registeration-redux registeration form?,"new_user = User.objects.create_user(username, email, password)
new_user.is_active = False
new_user.first_name = first_name
new_user.last_name = last_name
new_user.save()
"
Increment list based on number pattern,"In [14]: from itertools import *

In [15]: c=count(1)

In [16]: lis=[0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1]

In [17]: list(chain(*[list(g) if k!=1 else [next(c)]*len(list(g)) for k,g in groupby(lis)]))

Out[17]: [0, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 3, 0, 4, 4]
"
"Python Pandas, Resampling only specific hours","index_date = pd.date_range('2016-04-01', '2016-04-04')
index_date = pd.Series(index_date)
index_time = pd.date_range('09:30:00', '16:00:00', freq='78min')
index_time = pd.Series(index_time.time)

index = index_date.apply(
    lambda d: index_time.apply(
        lambda t: datetime.combine(d, t)
        )
    ).unstack().sort_values().reset_index(drop=True)
"
Python Joining csv files where key is first column value,"import csv
from collections import OrderedDict

with open('b.csv', 'rb') as f:
    r = csv.reader(f)
    dict2 = {row[0]: row[1:] for row in r}

with open('a.csv', 'rb') as f:
    r = csv.reader(f)
    dict1 = OrderedDict((row[0], row[1:]) for row in r)

result = OrderedDict()
for d in (dict1, dict2):
    for key, value in d.iteritems():
        result.setdefault(key, []).extend(value)

with open('ab_combined.csv', 'wb') as f:
    w = csv.writer(f)
    for key, value in result.iteritems():
        w.writerow([key] + value)
"
Automatic transformation from getter/setter to properties,"def make_properties(skip=None):
    if skip is None:
        skip=[]
    def f(c):
        from collections import defaultdict
        props=defaultdict(dict)
        for k,v in vars(c).items():
            if k.startswith(""Get""):
                props[k[3:]]['getter']=v
            if k.startswith(""Set""):
                props[k[3:]]['setter']=v
        for k,v in props.items():
            if k in skip:
                continue
            setattr(c,k,property(v.get('getter'),v.get('setter')))
        return c
    return f

@make_properties(skip=['Y'])
class C(object):
    def GetX(self):
        print ""GetX""
        return self._x

    def SetX(self, value):
        print ""SetX""
        self._x = value

    def GetY(self):
        print ""GetY""
        return self._y

    def SetY(self, value):
        print ""SetY""
        self._y = value

c=C()
c.X=5
c.X
c.Y=5
c.Y
"
What is the appropriate Python data structure to hold its items and a combined list of its items?,"AR = 'AR'
ARU = 'ARU'
ARC = 'ARC'
CON = 'CON'
CSR = 'CSR'
MCR = 'MCR'
USF = 'USF'

MATERIALS_SIMPLE = [
    AR,
    ARU,
    ARC,
    CON,
    CSR,
    MCR,
    USF,
]

MATERIALS = [
    [AR, ARU, ARC, MCR, CSR],
    [AR, ARU, ARC, MCR],
    [AR, ARU, ARC],
]
"
single line if statement - Python,"val_if_true if condition else val_if_false
"
Analysis of running time on recursive function,"from collections import Counter
c = Counter()
def fib3(n):
    c[n] += 1
    if n < 9980:
        return 1
    else:
        return fib3(n-1) + fib3(n-2) + fib3(n-3)

fib3(10000)
print c
"
Algorithm to generate spanning set,"def spanningsets(items):
    if not items: return
    if len(items) == 1:
        yield [[items[-1]]]
    else:
        for cc in spanningsets(items[:-1]):
            yield cc + [[items[-1]]]
            for i in range(len(cc)):
                yield cc[:i] + [cc[i] + [items[-1]]] + cc[i+1:]

for sset in spanningsets([1, 2, 3, 4]):
    print ' '.join(map(str, sset))
"
How to run an IPython magic from a script (or timing a Python script),"from IPython import get_ipython
ipython = get_ipython()
"
how to match lines between pattern using re module in python,"pat = re.compile('\\\\##### To extract from here ####'
                 '.*?'
                 '(?=\\\\##### To extract till here ####)',
                 re.DOTALL)
"
The most 'Pythonic' way to handle overloading,"class Text(object):
    def __init__(self, data):
        # handle data in whatever ""basic"" form you need

    @classmethod
    def fromFiles(cls, files):
        # process list of filenames into the form that `__init__` needs
        return cls(processed_data)

    @classmethod
    def fromSentences(cls, sentences):
        # process list of Sentence objects into the form that `__init__` needs
        return cls(processed_data)
"
python - appending different columns from a file to different lists?,">>> n = []
>>> for line in open(fname):
    els = line.split('\t')
    n.append(els[:2])
    n.append(els[2:])


>>> n
[['A', '3'], ['A', '6'], ['B', '6'], ['B', '9'], ['C', '0'], ['C', '2']]
"
python array conditional change on elements check numpy,"np.clip(Mat, 0, np.inf, out=Mat)
"
Use regular expression to remove contents in brackets in python,"print filter(str.isdigit, data)
# ['14147618', '6137776', '5943229', '2066613']
"
Why won't numpy matrix let me print its rows?,">>> arr = numpy.matrix([[x for x in range(5)] for y in range(5)])
>>> ele = numpy.asarray(arr)
>>> '|'.join(map(str,ele[0,]))
'0|1|2|3|4' # as per your example.
"
Removing items from list if is not in '<a href'?,"import urllib2
from bs4 import BeautifulSoup

url = 'http://www.millercenter.org/president/speeches'

date_soup = BeautifulSoup(urllib2.urlopen(url), ""lxml"")
speeches = date_soup.select('div#listing div.title a[href*=speeches]')

for speech in speeches:
    text = speech.get_text(strip=True)
    print(text)
"
How can I find all subclasses of a given class in Python?,"def all_subclasses(cls):
    return cls.__subclasses__() + [g for s in cls.__subclasses__()
                                   for g in all_subclasses(s)]

print(all_subclasses(vars()['Foo']))
# [<class '__main__.Bar'>, <class '__main__.Baz'>, <class '__main__.Bing'>]
"
"How to do an inverse `range`, i.e. create a compact range based on a set of numbers?","from itertools import groupby

def sub(x):
    return x[1] - x[0]

a = [5, 3, 7, 4, 1, 2, 9, 10]
ranges = []
for k, iterable in groupby(enumerate(sorted(a)), sub):
     rng = list(iterable)
     if len(rng) == 1:
         s = str(rng[0][1])
     else:
         s = ""%s-%s"" % (rng[0][1], rng[-1][1])
     ranges.append(s)
print ranges
"
Python code for finding unique path from tuple list,"p = [(0, 2), (2, 6), (6, 7), (7, 3), (3, 7), (7, 6), (6, 4), (4, 5), (5, 4), (4, 1), (1, 4), (4, 6), (6, 2)]
present = {}
output = []

for x in p:
    output.append(x[0])

    if frozenset(x) in present:
        break
    else:
        present[frozenset(x)] = 0

print output
"
Benchmarking memory consumption of Firefox vs Chrome in webdriver,"import os
import multiprocessing as mp
import contextlib
import time
import selenium.webdriver as webdriver
import selenium.webdriver.support.ui as UI
import selenium.webdriver.support.expected_conditions as EC
import psutil

def worker(browsername, args, N):
    start_mem = psutil.virtual_memory()
    Driver = getattr(webdriver, browsername)
    drivers = [Driver(*args) for i in range(N)]
    end_mem = psutil.virtual_memory()
    for driver in drivers:
        driver.quit()
    return end_mem.used - start_mem.used

if __name__ == '__main__':
    N = 10
    pool = mp.Pool(1)

    for driver, args in [('Firefox', ()),
                         ('Chrome', ()), 
                         ('PhantomJS', ('phantomjs',))]:
        used = pool.apply(worker, [driver, args, N])
        print('{:>10}: {}'.format(driver, used))
        time.sleep(5)

    pool.close()
    pool.join()
"
how to print the output returned from a function in new lines using python?,"Program
#!/usr/bin/env python
# 
# Counts the IP addresses of a log file.
# 
# Assumption: the IP address is logged in the first column.
# Example line: 10.1.10.190 http://example.com/t1 404
#

import sys

def extract_ip(line):
    '''Extracts the IP address from the line.
       Currently it is assumed, that the IP address is logged in
       the first column and the columns are space separated.'''
    return line.split()[0]

def increase_count(ip_dict, ip_addr):
    '''Increases the count of the IP address.
       If an IP address is not in the given dictionary,
       it is initially created and the count is set to 1.'''
    if ip_addr in ip_dict:
        ip_dict[ip_addr] += 1
    else:
        ip_dict[ip_addr] = 1

def read_ips(infilename):
    '''Read the IP addresses from the file and store (count)
       them in a dictionary - returns the dictionary.'''
    res_dict = {}
    log_file = file(infilename)
    for line in log_file:
        if line.isspace():
            continue
        ip_addr = extract_ip(line)
        increase_count(res_dict, ip_addr)
    return res_dict

def write_ips(outfilename, ip_dict):
    '''Write out the count and the IP addresses.'''
    out_file = file(outfilename, ""w"")
    for ip_addr, count in ip_dict.iteritems():
        out_file.write(""%5d\t%s\n"" % (count, ip_addr))
    out_file.close()

def parse_cmd_line_args():
    '''Return the in and out file name.
       If there are more or less than two parameters,
       an error is logged in the program is exited.'''
    if len(sys.argv)!=3:
        print(""Usage: %s [infilename] [outfilename]"" % sys.argv[0])
        sys.exit(1)
    return sys.argv[1], sys.argv[2]

def main():
    infilename, outfilename = parse_cmd_line_args()
    ip_dict = read_ips(infilename)
    write_ips(outfilename, ip_dict)

if __name__ == ""__main__"":
    main()
"
check if a value exist in a list,('a' in a)
Find Maximum Value in Nested Dictionary and return Key,"m = max(dictionary, key=lambda v: dictionary[v].get(value, float('-inf')))
"
Python: Sum of numbers,">>> key = [ord(d) for d in decrypt]
>>> print(key)
[104, 101, 108, 108, 111]
"
Using lxml to add a string as a sub element,"import lxml.etree as etree

xml = etree.Element('presentation')
format_xml = etree.SubElement(xml, 'format')
content_xml = etree.SubElement(xml, 'slides')
new = """"""<slide1>
    <title>My Presentation</title>
    <subtitle>A sample presentation</subtitle>
    <phrase>Some sample text
        <subphrase>Some more text</subphrase>
    </phrase>
</slide1>""""""


content_xml.append(etree.fromstring(new))


print(etree.tostring(xml,pretty_print=1))
"
Merge multiple dictionaries conditionally,"from collections import Counter
from operator import or_

max_dict = reduce(or_, map(Counter, original_dict_list))
"
Convert a hashcode to its binary representation,"int(str(temp)[2:])
"
Converting file to key/value dictionary,"dict(line.strip().split(',') for line in WDictionary)
"
Decode HTML entities in Python string?,">>> try:
...     # Python 2.6-2.7 
...     from HTMLParser import HTMLParser
... except ImportError:
...     # Python 3
...     from html.parser import HTMLParser
... 
>>> h = HTMLParser()
>>> print(h.unescape('&pound;682m'))
£682m
"
simplest way to generate xml in python,"from bs4 import Tag


d = {1: [1,2,3,4,5], 2: [2,3,4]}

root = Tag(name='html')
for key, values in d.iteritems():
    page = Tag(name='page')
    src = Tag(name='src')
    src.string = str(key)
    page.append(src)

    links = Tag(name='links')
    for value in values:
        link = Tag(name='link')
        link.string = str(value)
        links.append(link)

    page.append(links)
    root.append(page)

print root.prettify()
"
convert list of dict into list of list of dict,">>> import itertools
>>>
>>> l = [{'row':1}, {'row':2}, {'row':1}, {'row':3}, {'row':1}]
>>> row = lambda d: d['row']
>>> [list(grp) for _, grp in itertools.groupby(sorted(l, key=row), key=row)]
[[{'row': 1}, {'row': 1}, {'row': 1}], [{'row': 2}], [{'row': 3}]]
"
Add in words after line split and loop it?,"import itertools

extra = itertools.cycle(['fL', 'fD', 'dep', 'AOV'])
for line in fileLines:
    for word in line.split():
        print word, next(extra)
"
Parsing HTML span with Beautiful Soup,">>> names = []
>>> for el in hotels:
...     names.append(el.find('span').get_text(strip=True))
... 
>>> names
['The Westin Peachtree Plaza, Atlanta', 'Sheraton Atlanta Hotel']
>>> 
"
Resizing part of a list in python,">>> A = [1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> B = [10, 54]
>>> A = A[len(B):]
>>> A
[3, 4, 5, 6, 7, 8, 9]
"
Python formatting large values,"from math import log10

class Formatter(object):
    def __init__(self):
        self.formats = (('%1.1f', 0),
                        ('%2.1f', 0),
                        ('%1.2f K', 3),
                        ('%1.2f K', 3),
                        ('%2.1f K', 3),
                        ('%1.2f M', 6),
                        ('%1.2f M', 6),
                        ('%2.1f M', 6),
                        ('%1.2f B', 9),
                        ('%1.2f B', 9),
                        ('%2.1f B', 9),
                        ('%1.2f T', 12),
                        ('%1.2f T', 12),
                        ('%2.1f T', 12))

    def human_readable(self, x):
        if x == 0: return '0'
        magnitude = int(log10(abs(x)))
        if magnitude > 13: format_str, denominator_mag = '%i T', 12
        else: format_str, denominator_mag = self.formats[magnitude]
        return (format_str % (x * 1.0 / (10 ** denominator_mag))).lstrip('0')
"
python 3.3 RE How to grab possible groups?,"from itertools import chain

[r[:1] + tuple(chain(*re.findall(r'(\w+)\s*=\s*(\w+)', r[1])))
 for r in re.findall(r""{% url '(\w+)'((?:\s+\w+\s*=\s*\w+)*) \s*%}"", inputtext)]
"
Fancy String Formating,"def printGrid (it, columns):
    items = ['{} {}'.format (idx, item) for idx, item in enumerate (it) ]
    maxWidths = [max (4 + len (item) for item in items [col::columns] ) for col in range (columns) ]
    formatStr = ''.join ('{{:<{}}}'.format (width) for width in maxWidths)
    while True:
        if not items: break
        line = items [:columns]
        items = items [columns:]
        while len (line) < columns: line.append ('')
        print (formatStr.format (*line) )
"
Performance issue in python with nested loop,"import numpy as np
import numba as nb
import numpy

def func(re, ws, a, l, r):

    for x1 in range(a**l):
        for x2 in range(a**l):
            for x3 in range(a**l):
                f11 = 0
                cv1 = numpy.ndarray.sum(
                numpy.absolute(numpy.subtract(ws[x1], ws[x2])))
                cv2 = numpy.ndarray.sum(
                numpy.absolute(numpy.subtract(ws[x1], ws[x3])))
                if cv1 == 0:
                    f11 += 1
                if cv2 == 0:
                    f11 += 1
                re[x1][x2][x3] = 1.0*r/(a**l-2)*(numpy.product(numpy.absolute(
                            numpy.subtract((2*ws[x1]+ws[x2]+ws[x3]), 2)))-f11)
                f11 *= 1.0*(1-r)/2
                re[x1][x2][x3] += f11
"
Make an object immutable,"import collections as coll
s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
d = coll.defaultdict(tuple)
for k, v in s:
    d[k] = d[k] + (v,)

print(d)
# prints
defaultdict(<class 'tuple'>, {'yellow': (1, 3), 'blue': (2, 4), 'red': (1,)})
"
Dealing with missing data in Pandas and Numpy,"df.C.fillna(999, inplace=True)
df.D.replace('', np.NaN, inplace=True)
"
how to get the modified input back in a prefix notation,"import operator

def kenobi(l):
    ops = {'+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.div}

    for i in xrange(1,len(l)):
        if isinstance(l[i],list):
            l[i] = kenobi(l[i])

    return ops[l[0]](l[1],l[2])

print kenobi(['+',['-',['*',['*',5,5],['+',3,5]],8],2])

194
"
pythonic way to filter list for elements with unique length,">>> from more_itertools import unique_everseen
>>> list(unique_everseen(lst, key=len))
['bob', 'james', 'bill']
"
Python string extraction from Subprocess,"import subprocess, re

RE_MAC = re.compile(r'\bHWaddr\s+(((?(2):|)[\dA-Fa-f]{2}){6})\b')
match = RE_MAC.search(subprocess.check_output([""ifconfig"", ""wlan0""]))
if match:
    mac_addr = match.group(1)
"
python split and reverse text file,"class_num = input('Which class (1, 2, or 3)? ')
score_sort = input('Sort by name or score? ').lower().startswith('s')

with open(""Class "" + class_num + "".txt"", ""r"") as f:
    scores = {name.strip():float(score) for
              name,score in (line.strip().split(':') for line in f)}
    if score_sort:
        for name in sorted(scores, key=scores.get, reverse=True):
            print(scores.get(name), ':', name)
    else:
        for name in sorted(scores):
            print(name, ':', scores.get(name))
"
Python: How do I make n new lists from n inputs?,">>>numbers = [2, 4, 10]
>>>list_of_list = [list(range(1, n+1)) for n in numbers]
"
Multi-condition regex in Python,"In [12]: strs=""I am a string""

In [13]: spl=strs.split()    #use set(strs.split()) if the list returned is huge

In [14]: any(x in spl for x in lis)
Out[14]: True

In [15]: strs=""Iamastring""

In [16]: spl=strs.split()

In [17]: any(x in spl for x in lis)
Out[17]: False
"
"In a list of tuples, return tuple[1] if tuple[0] is a duplicate of another tuple[0] in the list",">>> pairs = [(""sumstring1"",""abc.txt""), (""sumstring2"",""def.txt""),
...          (""sumstring1"",""ghi.txt""), (""sumstring2"",""jkl.txt"")]
>>> dups = collections.defaultdict(set)
>>> for checksum, name in pairs:
...     dups[checksum].add(name)
>>> dups
defaultdict(<class 'set'>, {'sumstring1': {'ghi.txt', 'abc.txt'}, 'sumstring2': {'def.txt', 'jkl.txt'}})
"
How can I tell if a structure in Python has order?,">>> x = {1,2,3,-1}
>>> x
set([1, 2, 3, -1])
>>> [_ for _ in x]
[1, 2, 3, -1]
>>> x = {1,2,3,0}
>>> x
set([0, 1, 2, 3])
>>> [_ for _ in x]
[0, 1, 2, 3]
>>> import collections
>>> isinstance(x, collections.Iterable)
True
>>>
"
Python : efficiency concerns in parallel async calls to fetch data from web services,"import time
import itertools
import concurrent.futures
from concurrent.futures import ProcessPoolExecutor as Pool

def call_ws_1(group_id):
    return list(range(10000))

def call_ws_2(hosts):  # This worker now works on a list of hosts
    host_results = []
    for host in hosts:
        host_results.append(( host, ""{} property"".format(host)))  # returns a list of (host, property) tuples
    return host_results

def chunk_list(l):
    chunksize = len(l) // 16  # Break the list into smaller pieces
    it = [iter(l)] * chunksize
    for item in itertools.zip_longest(*it):
        yield tuple(filter(None, item))

def fetch_property(hosts):
    with Pool(max_workers=4) as executor:
        futs = []
        for chunk in chunk_list(hosts):
            futs.append(concurrent.futures.submit(call_ws_2, chunk))
        for future in concurrent.futures.as_completed(futs):
            try:
                 results = future.result()
            except Exception as exp:
                print(""Got %s"" % exp)
            else:
                for result in results:
                    host, property = result
                    # Save host and property to DB

def fetch_hosts(group_ids):
    with Pool(max_workers=4) as executor:
        future_to_grp_id = {executor.submit(call_ws_1, group_id): group_id for group_id in group_ids}
        for future in concurrent.futures.as_completed(future_to_grp_id):
            group_id = future_to_grp_id[future]
            try:
                hosts = future.result()#this is a list
            except Exception as exp:
                print(""Got %s"" % exp)
            else:
                print(""Fetching hosts for {}"".format(group_id))
                fetch_property(hosts)

if __name__ == ""__main__"":
    start = time.time()
    fetch_hosts(['a', 'b', 'c', 'd', 'e'])
    end = time.time()
    print(""Total time: {}"".format(end-start))
"
"Execute function when button is pressed, not when script runs","import tkinter
from tkinter.filedialog import askopenfilename
inputfile = None
def browse():
    global inputfile
    inputfile=askopenfilename()

def fileManipulator(outfile=""C:\\out\\File.kml""):
    global inputfile
    if inputfile is None:
        browse()
    #code that manipulates the file here
    file.save(outfile)

root=tkinter.Tk()
browseButton=tkinter.Button(root,text=""Browse"",command=browse)
browseButton.pack()
fileButton=tkinter.Button(root,text=""Manipulate file"",command=fileManipulator)
fileButton.pack()
root.mainloop()
"
Why don't Python's any/all return the found objects?,"first = lambda s: next((x for x in s if x), None)
"
pattern match list a with list b,">>> lis1 =  ['a', 'b', 'c'] 
>>> lis2 =  ['c','d','e','f','g','h']
>>> all(x in lis2 for x in lis1)
False
"
How to force genfromtxt read csv as record array?,"np.recfromcsv(datafile,delimiter='\t'))
"
Find all minimal elements in a list or set as weighted by a function,">>> from heapq import nsmallest
>>> s = {'abc', 'defg', 'hij', 'kl', 'mno', 'qr', 'stuv', 'wx', 'yz'}
>>> nsmallest(4, s, key=len)
['qr', 'kl', 'yz', 'wx']
"
Find the dimensions of a multidimensional Python array,"from numpy import array
l = [[2, 3], [4, 2], [3, 2]]
a = array(l)
print a.shape
"
Get values from Entry widgets and create list of variables Tkinter,"print(""Value %i = %s"" % (index, self.box[key].get())
"
unittest Passing Variable as Parameter,"import unittest

class Test(unittest.TestCase):
    def __init__(self, methodName = 'runTest'):
        unittest.TestCase.__init__(self, methodName)
        self.data = range(5)

    def test_getitem(self):
        self.assertEqual(self.data[1],1)

    def test_reversed(self):
        self.assertEqual(list(reversed(self.data)),[4,3,2,1,0])

if __name__ == '__main__':
    import sys
    sys.argv.insert(1,'--verbose')
    unittest.main(argv = sys.argv)
"
How can I call methods between two classes?,"class A(object):
    def __init__(self):
        self.b = B()
        self.c = C()
        self.b.cobj = self.c
        self.c.bobj = self.b

class B(object):
    def __init__(self, c):
        self.cobj = None

    def call_c(self):
        if self.cobj is not None:
            self.cobj.a_method_of_c()
        else:
            raise Exception(""B instance not fully initialized"")

class C(object):
    # similar to B
"
python to php code conversion,"def listspaces(str):
    return [i for i, c in enumerate(str) if c==' ']
"
How to extract all the link name from a html page,">>> url=""http://einstein.biz/""
>>> import urllib.request
>>> m = urllib.request.urlopen(url)
>>> from bs4 import BeautifulSoup
>>> soup = BeautifulSoup(m)
>>> s = soup.find_all('a')
>>> [i.string for i in s]
['Photo Gallery', 'Bio', 'Quotes', 'Links', 'Contact', 'official store', '日本語', None]
"
Using lxml or ??? to extract information from webpages,"from bs4 import BeautifulSoup

document_a = """"""
<html>
    <body>
        <p class=""author-name"">Some Name</p>
    </body>
</html>
""""""

document_b = """"""
<html>
    <body>
        <p rel=""author-name"">Some Name</p>
    </body>
</html>
""""""
def get_author(document):
    soup = BeautifulSoup(document_a)
    p = soup.find(class_=""author-name"")
    if not p:
        p = soup.find(rel=""author-name"")
        if not p:
            return ""No Author Found""
    return p.text

print ""author in first document:"", get_author(document_a)
print ""author in second document:"", get_author(document_b)
"
"insert element into list, move pre-existing elements","def insert(list1, var, i):
    for idx in range(len(list1)-1, i, -1):
        list1[idx] = list1[idx-1]
    list1[i] = var
"
Pandas fill np.nan issue,"def filler(series):
    avg = series._get_numeric_data().mean()
    series.fillna(series.mode().values[0] if np.isnan(avg) else avg, inplace=True)

dfna.apply(filler)
"
Convert a list to a dictionary in Python,"b = dict(zip(a[0::2], a[1::2]))
"
Generate all one step variations of a permutation,"def single_element_permutation(given, new):
    for i in xrange(len(given)):
        for ele in new:
            yield given[:i] + (ele,) + given[i+1:]

for e in single_element_permutation((0, 0, 0, 0, 0), range(5)):
    print e
"
Multithreading in python 2.7,"for region, directory_ids in direct_dict.iteritems():
    for dir in directory_ids:
        def done_callback(result):
            pass  # process result...

        pool.apply_async(describe_with_directory_workspaces,
                         (region, dir, username),
                         done_callback)
"
Python: sort list based on value present in dictionary,"class Obj:
    def __init__(self, name, freq):
        self.freq = freq
        self.name = name

    def __repr__(self):
        return self.name


obj1 = Obj('obj1',42)
obj2 = Obj('obj2',42)
obj3 = Obj('obj3',6)
obj4 = Obj('obj4',6)
obj5 = Obj('obj5',6)
obj6 = Obj('obj6',332)
obj7 = Obj('obj7',123)


x = [obj2, obj1, obj5, obj3, obj4]
y = {obj1:40, obj2:50, obj3:60, obj4:10, obj5:70, obj6:30, obj7:20}

print(sorted(x, key=lambda i: (i.freq, y.get(i, 0)), reverse=True))
"
_sha import in python hashlib,"    if COMPILED_WITH_PYDEBUG or not have_usable_openssl:
        # The _sha module implements the SHA1 hash algorithm.
        exts.append( Extension('_sha', ['shamodule.c']) )
        # The _md5 module implements the RSA Data Security, Inc. MD5
        # Message-Digest Algorithm, described in RFC 1321.  The
        # necessary files md5.c and md5.h are included here.
        exts.append( Extension('_md5',
                        sources = ['md5module.c', 'md5.c'],
                        depends = ['md5.h']) )
"
sort python list of dictionaires based on value of 2 keys,"product_list = sorted(product_list, key=lambda k: k['index'] if k['verifier'] == 1 else None)
"
Searching an attribute_A in a attribute_B-sorted list,"from operator import attrgetter

index = bisect_left(L, x, key=attrgetter('attr_a'))
"
fastest method of getting k smallest numbers in unsorted list of size N in python?,"heapq.nsmallest(k, range(len(input_list)), key=input_list.__getitem__)  # O(NlogK)
numpy.argpartition(numpy.array(input_list), k)[:k].tolist()  # O(N)
"
How to combine multiple defaultdict(Counter)?,"z = defaultdict(Counter)

for k,v in chain(x.iteritems(), y.iteritems()):
    z[k].update(v)
"
Python regex matching pattern not surrounded by double quotes,">>> s = 'keyword1 keyword2 title:hello title:world ""title:quoted"" keyword3'
>>> re.sub(r'\btitle:\w+\b', '', s, re.I)
'keyword1 keyword2   ""title:quoted"" keyword3'
"
How to convert a string to its Base-10 representation?,"int(s.encode('hex'), 16)"
Python list combination,"In [1]: nums = [1, 2, 3, 4]

In [2]: [(x, tuple(y for y in nums if y != x)) for x in nums]
Out[2]: [(1, (2, 3, 4)), (2, (1, 3, 4)), (3, (1, 2, 4)), (4, (1, 2, 3))]
"
Pythonic way to group items in a list,">>> from itertools import groupby
>>> from operator import itemgetter
>>> {k: list(g) for k, g in groupby(items, itemgetter('a'))}
{1: [{'a': 1, 'c': 8, 'b': 9},
     {'a': 1, 'c': 4, 'b': 5}],
 2: [{'a': 2, 'c': 1, 'b': 3},
     {'a': 2, 'c': 9, 'b': 7}],
 3: [{'a': 3, 'c': 2, 'b': 8}]}
"
Array item numbers for consecutive items,"def getPossibleSeats (line, row, num):
    if row != line[-1]:
        raise ValueError('Invalid row')

    for k, g in groupby(enumerate(line[:-1], 1), lambda x: x[1]):
        g = list(g)
        if k != '0' or len(g) < num:
            continue

        for i in range(len(g) - num + 1):
            yield ['{}{}'.format(row, s) for s, _ in g[i:i+num]]
"
Python extracting sentence containing 2 words,"import re
txt=""I like to eat apple. Me too. Let's go buy some apples.""
define_words = 'some apple'
print re.findall(r""([^.]*?%s[^.]*\.)"" % define_words,txt)  

Output: ["" Let's go buy some apples.""]
"
how to print the list of strings from the arrays,"import itertools
l1 = [1, 2, 3]
l2 = [4, 5, 6, 7]
listZipped = itertools.izip_longest(l1, l2)

for item in listZipped:
    print item
"
Use levenshtein distance for keys in defaultdict in python,">>> from itertools import combinations
>>> import difflib

>>> li=['AAAAAAACDCBA', 'CCCCCCATATAT', 'CCCCCCAGAGAG', 'CCCCCTACACAC', 'AAAAAAACACAC']
>>> d = defaultdict(list)
>>> for i in li:
...     d[i[:6]].append(i[6:])
... 
>>> keys=d.keys()
>>> for i,j in combinations(keys,2):
...      if difflib.SequenceMatcher(None,i, j).ratio()>0.8:
...         d[i].extend(d[j])
...         del d[j]
... 
>>> d
defaultdict(<type 'list'>, {'AAAAAA': ['ACDCBA', 'ACACAC'], 'CCCCCC': ['ATATAT', 'AGAGAG', 'ACACAC']})
>>> 
"
Python - How to use try/except statement in dictionary,"from itertools import izip_longest
dictionary = dict(izip_longest(('key1', 'key2', 'key3'), list_of_values[:3]))
"
Getting data from multiple links using scrapy,"import scrapy
from scrapy.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor


class BookmyshowSpider(CrawlSpider):
    name = ""bookmyshow""
    start_urls = ['https://in.bookmyshow.com/movies']
    allowed_domains = ['bookmyshow.com']
    rules = (Rule(SgmlLinkExtractor(allow=('https://in\.bookmyshow\.com/movies/.*', )), callback=""parse_items"", follow= True),)

    def parse_items(self, response):
        for sel in response.xpath('//div[contains(@class, ""movie-card"")]'):
            item = Ex1Item()
            item['Moviename'] = sel.xpath('.//a[@class=""__movie-name""]/text()').extract()
            item['Language'] = sel.xpath('/html/body/div[1]/div[2]/div/div[1]/div[2]/section[1]/div/div[2]/div[1]/div[1]/div/div/div[2]/div[2]/ul/li/text()').extract()
            item['Info'] = sel.xpath('.//div[@class=""__rounded-box __genre""]/text()').extract()
            item['Synopsis'] = sel.xpath('/html/body/div[1]/div[2]/div[1]/div[2]/div[4]/div[2]/div[2]/blockquote/text()').extract()
            item['Release'] = sel.xpath('.//span[@class=""__release-date""]/text()').extract()
            yield item
"
What would be the most pythonic way to make an attribute that can be used in a lambda?,"if not isinstance(val, ....) :  # fill this in with the CLASS of the event
"
Python comparing two uneven arrays,"for i in range(min(len(a), len(b)):
    if a[i] > b[i]:
        counter += 1
if len(a) > len(b):
    counter += (len(a) - len(b))
"
How to use filter() on a string and get multiple word occurences?,">>> names = ['Anna', 'Grant', 'Bob', 'David', 'Carrie', 'Barbara', 'Zach']
>>> b_names = filter(lambda s: s.startswith('B'), names)
>>> print b_names
#Output
['Bob', 'Barbara']
"
Custom ticks autoscaled when using imshow?,"import matplotlib.pyplot as plt
import numpy as np

def scale_xaxis(number):
    return(number+1001)

def my_form(x,pos):
    return '%d'%scale_xaxis(x)

data = np.array([range(10),range(10,20)])
fig = plt.figure(figsize=(3,5))
ax = fig.add_subplot(111)
ax.imshow(data,aspect='auto')
ax.autoscale(False)
ax.xaxis.set_major_locator(matplotlib.ticker.MultipleLocator(int(2)))
ax.xaxis.set_major_formatter(matplotlib.ticker.FuncFormatter(my_form))
"
Iterating over object instances of a given class in Python,"class IterRegistry(type):
    def __iter__(cls):
        return iter(cls._registry)

class Person(object):
    __metaclass__ = IterRegistry
    _registry = []

    def __init__(self, name):
        self._registry.append(self)
        self.name = name
"
how can i convert a string like 123245wkjsvd :/' to list and sort?,"# initial string
input_string = ""123245wkjsvd :/'""
# Convert string to list of characters
list_of_chars = list(input_string)
# Sort list
list_of_chars.sort()
# Convert to string
output_string = ''.join(list_of_chars)
"
Returning .txt file contents,">>> from operator import itemgetter
>>> max(l,key=itemgetter(1))
['820000000', '92']
>>> max(l,key=itemgetter(1))[0]
'820000000'
>>> min(l,key=itemgetter(1))[0]
'820000095'
>>> min(l,key=itemgetter(1))
['820000095', '54']
>>> min(l,key=itemgetter(1))[0]
'820000095'
"
"Python sys.argv to preserve ' ' or """"","python test.py ""blah='blah'""
"
Python for loop doesn't execute last iteration,"for i in range(len(m) - 1, 0, -1):
    m.insert(i, 99)
"
pset2 Python Problem3-UsingBisectionSearch.py,"In [1]: ans = 10    
In [2]: monthlyPayment = ans    
In [3]: id(ans) 
Out[3]: 9912448    
In [4]: id(monthlyPayment) # still the same objects
Out[4]: 9912448    
In [5]: ans += 10 # creates new object
In [6]: ans
Out[6]: 20    
In [7]: monthlyPayment # still has original value
Out[7]: 10  
In [8]: id(monthlyPayment)  # same id as original ans
Out[8]: 9912448     
In [9]: id(ans)  # new id because it is a new object
Out[9]: 9912208
"
Decorator to tag functions as callable,"class Selector(set):
    def tag(self, *tags):
        tags = set(tags)
        def decorator(func):
            if hasattr(func, ""_tags""):
                func._tags.update(tags)
            else:
                func._tags = tags
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                return func(*args, **kwargs) if self & func._tags else None
            wrapper._tags = func._tags
            return wrapper
        return decorator
"
Python: DictReader returning a list of dictionaries?,"def transposeListOfDicts(listOfDicts):
    keys = {}
    for d in listOfDicts:
        keys.update(d.iterkeys())

    return {key: [d.get(key, None) for d in listOfDicts] for key in keys}
"
"Python os.path.basename, strip parameters",">>> from shlex import shlex
>>> lex = shlex('C:\\test.exe --help')
>>> lex.whitespace_split = True
>>> lex.escape = ''
>>> list(lex)
['C:\\test.exe', '--help']
"
How to ensure solid contracts without strong typing?,"def enum_mapper(enum, mapper):
    assert not enum.symmetric_difference(mapper)
    return mapper.__getitem__
"
How to order these lines for a highscore table in Python,"import ast
from operator import itemgetter

def parse_item(s):
  name, score = ast.literal_eval(s)
  return name, int(score)

with open(""infile"", ""r"") as infile:
  items = [parse_item(line.strip()) for line in infile]

for item in sorted(items, key=itemgetter(1), reverse=True):
  print item
"
Inquiry about removing duplicates,"lst = a.split()  # automatically cleans up the whitespace for you
print(list(set(lst)))
"
numpy random usage validity,"import numpy as np

mu, sigma = 2.0, 0.5

# A and B will have different seeds and so different numbers
A = np.random.normal(mu, sigma, size=(1000, 1000))
B = np.random.normal(mu, sigma, size=(1000, 1000))

# But their statistical characteristics should be similar enough
print(mu, np.mean(A), np.mean(B))
print(sigma, np.std(A), np.std(B))
"
How to prevent a wrapper object wrapping itself?,"class A(object):
    def __new__(cls, obj):
        if isinstance(obj, cls):
            return obj
        rv = object.__new__(cls)

        # everything you would normally put in __init__
        # goes here instead
        rv._obj = obj
        return rv

    # for instance:
    def __repr__(self):
        return ""A({})"".format(repr(self._obj))
"
Pandas: Reconstruct dataframe from strings of key:value pairs,"s = df['0'].str.split(' ')

d = [dict(w.split(':', 1) for w in x) for x in s]
print d
#[{'baz': '3', 'foo': '1', 'bar': '2'}, {'baz': '5', 'bar': '4'}, {'foo': '6'}]

print pd.DataFrame.from_records(d).fillna(0)
#  bar baz foo
#0   2   3   1
#1   4   5   0
#2   0   0   6
"
How to check dynamic key in dictionary?,">>> d = {
    'gadget_1': 1, 'gadget_23': 4, 'manufacture_1': 6, 'manufacture_23': 3, 'gadget_56': 34,
    'name': 'xyz', 'price': 23, 'phone': '45345'
 }
>>> [k for k in d if k.startswith(('gadget_', 'manufacture_'))]
['gadget_23', 'gadget_56', 'manufacture_23', 'manufacture_1', 'gadget_1']
"
Replacing selected elements in a list in Python,"myiter = (100 if i in (0, 1, 3) else e for i, e in enumerate(mylist))
"
Write out from random sample,"indexes_samples = sorted(random.sample(range(len(lst)), 30))

for i in indexes_samples:
    lst[i]  # do what you want
"
Equivalent of count list function in numpy array,"count = np.all(listScore == np.array([2,0]),axis=1).sum()
"
pandas timeseries identification values based on date index,"import pandas as pd
import io
import numpy as np

data = r""""""date,value
2009-12-02 20:00:00,0.6
2009-12-02 20:30:00,0.7
2009-12-03 01:00:00,0.7
2009-12-03 02:30:00,0.7
2009-12-03 11:30:00,0.7
2009-12-03 12:00:00,1.4
2009-12-03 12:30:00,1.3""""""

df = pd.read_csv(io.StringIO(data), parse_dates=[0])
diff = df.date - df.date.shift(1)

sections = (diff > np.timedelta64(2, ""h"")).astype(int).cumsum()

def f(s):
    return s.iloc[[0, -1]].reset_index(drop=True)

print df.date.groupby(sections).apply(f).unstack()
"
Find minimum distance from point to complicated curve,"import shapely.geometry as geom
import numpy as np

coords = np.loadtxt('points.txt')

line = geom.LineString(coords)
point = geom.Point(0.8, 10.5)

# Note that ""line.distance(point)"" would be identical
print point.distance(line)
"
Efficiently filling NumPy array using lists of indices,"lens = [len(item) for item in data]
R = np.repeat(np.arange(len(lens)),lens)
C = np.searchsorted(column_data,np.concatenate(data))

out = np.zeros((len(data), len(column_data)))
out[R,C] = 1
"
Converting string to float,"    ...
    col_sums = [sum(int(num) for num in column) for column in columns]
    return col_sums[colnum]
"
How to split file into number of output files in Python 3?,"def get_line_counts(total_lines, number_of_files):
    base_size = total_lines // number_of_files
    line_count_list = [base_size for i in range(number_of_files)]
    files_with_an_extra_line = total_lines % number_of_files
    for i in range(files_with_an_extra_line):
        line_count_list[len(line_count_list) - (i + 1)] += 1
    return line_count_list


for i, n in enumerate(get_line_counts(13, 3)):
    print(""file {0} will contain {1} line(s)"".format(i, n))
"
Python function handle ala Matlab,"In [1]: def fn(x):
   ...:   return x**2 + 3*x - 4
   ...: 

In [2]: fn(4)
Out[2]: 24
"
Display 'Counter' results on seperate line (Python),"for key, c in sorted(count.items(), key=lambda i: a.index(i[0])):
    print(""{}: {}"".format(key, c))
"
"python and sqlite3, check if I can use fts5 extension?","def fts5_installed(cls):
    if sqlite3.sqlite_version_info[:3] < FTS5_MIN_VERSION:
        return False

    # Test in-memory DB to determine if the FTS5 extension is installed.
    tmp_db = sqlite3.connect(':memory:')
    try:
        tmp_db.execute('CREATE VIRTUAL TABLE fts5test USING fts5 (data);')
    except:
        try:
            sqlite3.enable_load_extension(True)
            sqlite3.load_extension('fts5')
        except:
            return False
        else:
            cls._meta.database.load_extension('fts5')
    finally:
        tmp_db.close()

    return True
"
How to serialize SqlAlchemy join query to JSON?,"class AlchemyEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, tuple):
            data = {}
            for obj in o:
                data.update(self.parse_sqlalchemy_object(obj))
            return data
        if isinstance(o.__class__, DeclarativeMeta):
            return self.parse_sqlalchemy_object(o)
        return json.JSONEncoder.default(self, o)

    def parse_sqlalchemy_object(self, o):
        data = {}
        fields = o.__json__() if hasattr(o, '__json__') else dir(o)
        for field in [f for f in fields if not f.startswith('_') and f not in ['metadata', 'query', 'query_class']]:
            value = o.__getattribute__(field)
            try:
                json.dumps(value)
                data[field] = value
            except TypeError:
                data[field] = None
        return data
"
Overwrite the previous print value in python?,"   sys.stdout.flush()
"
Functional Python - Multiple Dictionaries to One Dictionary,"d = defaultdict(lambda: [])
for school in a, b, c:
    for g in school['grades']:
        d[g].append(school)
"
how to dynamically read a specific cell value in a table using selenium and python,"from selenium import webdriver
import re

driver = webdriver.PhantomJS()
driver.set_window_size(1120, 550) #For bug
driver.get(""http://localhost:8000"")

pattern = r"""""" 
    \s*         #Match whitespace, 0 or more times, followed by...
    (\d+)       #a digit, one or more times, captured, followed by
    \s*         #whitespace, 0 or more times, followed by...
    [|]         #vertical bar, followed by...
    \s*         #whitespace, 0 or more times, followed by...
    \d+         #a digit, one or more times
""""""
regex = re.compile(pattern, re.X)

trs = driver.find_elements_by_xpath('//table[@id=""ambassadors-for-assignment""]/tbody/tr')
target_columns = [3, 4]

for target_column in target_columns:
    for tr in trs:
        target_column_xpath = './td[{}]'.format(target_column)  #VARY COLUMN HERE ***
        td = tr.find_element_by_xpath(target_column_xpath)
        match_obj = re.match(regex, td.text)

        if match_obj and match_obj.group(1) == '0':
            button_xpath = './/button[contains(concat("" "", normalize-space(@class), "" ""), "" btn-success "")]' 
            success_button = tr.find_element_by_xpath(button_xpath)
            #success_button.click()

            print ""column {}:"".format(target_column)
            print match_obj.group(0)
            print success_button.get_attribute('class')
            print
"
"Kivy: Is there a ""BoundedString"" property available for TextInputs?","class CustomInput(TextInput):

    max_chars = NumericProperty(10)

    def insert_text(self, substring, from_undo=False):
        if not from_undo and (len(self.text)+len(substring) > self.max_chars):
            return
        super(CustomInput, self).insert_text(substring, from_undo)
"
How could I extract the lengthy config from my controller/main code,"from ConfigParser import RawConfigParser

parser= RawConfigParser()
parser.read('demo.ini')

print 
#To retrieve all the sections 
print parser.sections()

print
#to retrieve options of a section
print parser.options('headers')

#To get value of each option in a section
for i in parser.options('headers'):
     print parser.get('headers',i) 
"
Numpy - add row to array,"A = array([[0, 1, 2], [0, 2, 0]])
X = array([[0, 1, 2], [1, 2, 0], [2, 1, 2], [3, 2, 0]])
"
Roughly approximate the width of a string of text in Python?,"def getApproximateArialStringWidth(st):
    size = 0 # in milinches
    for s in st:
        if s in 'lij|\' ': size += 37
        elif s in '![]fI.,:;/\\t': size += 50
        elif s in '`-(){}r""': size += 60
        elif s in '*^zcsJkvxy': size += 85
        elif s in 'aebdhnopqug#$L+<>=?_~FZT' + string.digits: size += 95
        elif s in 'BSPEAKVXY&UwNRCHD': size += 112
        elif s in 'QGOMm%W@': size += 135
        else: size += 50
    return size * 6 / 1000.0 # Convert to picas
"
String inside a string,"lst = ['foo', 'bar', 'foo bar']
lst2 = []

for l in lst:
    if ' ' in l:
        lst2.append(repr(l))
"
Finding network (external) IP addresses using Python,"import urllib, re

data = re.search('""([0-9.]*)""', urllib.urlopen(""http://ip.jsontest.com/"").read()).group(1)
print data
"
How do I draw a grid onto a plot in Python?,plt.grid(True)
Numpy: Fix array with rows of different lengths by filling the empty elements with zeros,"# Input object dtype array
data = np.array([[1, 2, 3, 4],
                 [2, 3, 1],
                 [5, 5, 5, 5],
                 [1, 1]])

# Get lengths of each row of data
lens = np.array([len(data[i]) for i in range(len(data))])

# Mask of valid places in each row
mask = np.arange(lens.size) < lens[:,None]

# Setup output array and put elements from data into masked positions
out = np.zeros(mask.shape)
out[mask] = np.hstack((data[:]))
"
How to manually sort a list of numbers in Python?,"a, b, c = 3, 1, 8

x = min(a, b, c)  # Smallest of the three
z = max(a, b, c)  # Largest of the three
y = (a + b + c) - (x + z)  # Since you have two of the three, you can solve for
                           # the third

print(a, b, c)
print(x, y, z)
"
How do I force recv() in Socket to NOT convert my hex values into ASCII if it can (python),">>> import binascii
>>> binascii.hexlify(s)
'1863d8d61f012018'
"
Converting python sparse matrix dict to scipy sparse matrix,"#!/usr/bin/env python3
#http://stackoverflow.com/questions/26335059/converting-python-sparse-matrix-dict-to-scipy-sparse-matrix

from scipy.sparse import csr_matrix, coo_matrix

def convert(term_dict):
    ''' Convert a dictionary with elements of form ('d1', 't1'): 12 to a CSR type matrix.
    The element ('d1', 't1'): 12 becomes entry (0, 0) = 12.
    * Conversion from 1-indexed to 0-indexed.
    * d is row
    * t is column.
    '''
    # Create the appropriate format for the COO format.
    data = []
    row = []
    col = []
    for k, v in term_dict.items():
        r = int(k[0][1:])
        c = int(k[1][1:])
        data.append(v)
        row.append(r-1)
        col.append(c-1)
    # Create the COO-matrix
    coo = coo_matrix((data,(row,col)))
    # Let Scipy convert COO to CSR format and return
    return csr_matrix(coo)

if __name__=='__main__':
    doc_term_dict = { ('d1','t1'): 12,             \
                ('d2','t3'): 10,             \
                ('d3','t2'):  5              \
                }   
    print(convert(doc_term_dict))
"
How to find dict value by Key in list,"next((d[searchtitle] for d in lst if searchtitle in d), None)
"
Python - workaround with sets,"n = 27
print ""{0:010b}"".format(n) # prints ""0000011010""
"
How to print all strings in a list on one line?,"lis = ['A', 'Quick', 'brown', 'fox', 'jump', 'over', 'the', 'lazy']
print(' '.join(lis))
"
"Np.cross produces wrong results, search for a working alternative","torsion = np.zeros((len(d1), 1)
idx = (tb !=0)
torsion[idx] = tt[idx] / tb[idx]
"
Find right URLs using Python and regex,"import re
strs = ['vk.com/albums54751623?z=photo54751623_341094858%2Fphotos54751623',
'vk.com/albums54751623',
'vk.com/id36375649',
'vk.com/id36375649',
'vk.com/id36375649?z=album-28413960_228518010',
'vk.com/tania_sevostianova'
]
print([x for x in strs if re.search(r'^vk\.com/(?!album)\w+$', x)])
# => ['vk.com/id36375649', 'vk.com/id36375649', 'vk.com/tania_sevostianova']
"
How to merge two Python dictionaries in a single expression?,"dict((k, v) for d in dicts for k, v in list(d.items()))"
Regex matching certain character in string pattern,"originalString = ""from:\t[name:\tString\nid:\tSequenceofNumber]""
fixedString = "",\t"".join(originalString.split(""\n""))
"
How to restart a simple coin tossing game,"while True: 
        choice = raw_input('What do you want? ')
        if choice == 'restart':
                continue
        else:
                break

print 'Break!' 
"
Python 3.3: Recursive version of a function,"def issorted(L):
    return all(x <= y for x, y in zip(L, L[1:]))
"
"Locate ""N Gram"" substrings that are smallest distance away from a target string N character long","import functools

def edit_distance(str1, str2): 
    #implement it here

f = functools.operator(edit_distance, target_string)
return min(f(s) for s in slices(string_))   # use slices from below
"
Python sort a JSON list by two key values,"sorted_list = sorted(json_list, key=lambda k: (int(k['id']),-int(k[""score""])))

[{'score': '100', 'id': '1'}, 
 {'score': '99', 'id': '1'}, 
 {'score': '100', 'id': '2'}, 
 {'score': '59', 'id': '2'},
 {'score': '89', 'id': '3'}, 
 {'score': '22', 'id': '3'}]
"
Can you combine two tkinter tk widgets?,"import tkinter as tk

class SubWindow(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        x = tk.Text(self)
        x.pack()

class MainWindow(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self)
        self.win1 = SubWindow(self)
        self.win1.pack(side=""left"")
        self.win2 = SubWindow(self)
        self.win2.pack(side=""right"")

if __name__ == ""__main__"":
    main = MainWindow()
    main.mainloop()
"
Key Value For Loop Template - Django Inquiry,"{% for key, values in obj_as_json.items %}
    {% for mydict in values %}
        {%for k,v in mydict.items %}
             ....
"
Assign array to key dictionary in python,"class ReturnList:
    def __init__(self):
        self.list = { 1: ""Item1"", 2: ""Item2"" }

redirect.returnKeys(ReturnList())
"
for loop in Python,"for i, item in enumerate(mylist):
    mylist[i] = item**2
"
Why is numpy/pandas returning only the first character when I use .astype(str),"In [3]: s = Series([1, 22, 333, 4444])

In [4]: s.map(str)
Out[4]:
0       1
1      22
2     333
3    4444
dtype: object
"
Splitting a string into words and punctuation,"re.findall('\\w+|[^\\w\\s]', text, re.UNICODE)"
"adding arrays inside dictionaries, inside more arrays?","def findItByColor(theColor):
    array=[]
    for x in fruits: 
        if theColor in x['color']:
            try:
                array.append(x['name']+"" ""+ str(x['weight']))
            except KeyError:
                size = ' '.join( [ '[Weight %s Mass %s]'
                                   % (str(item['weight']),str(item['mass']))
                         for item in x['size'] ])
                array.append( x['name']+"" ""+ size )
    return array

print findItByColor(""orange"")
"
How to Render Math Table Properly in IPython Notebook,"from sympy import latex
tl = map(lambda tc: '$'+latex(tc)+'$',t)
df = DataFrame(tl, index=['Situation 1', 'Situation 2'], columns=['Answer'])
df
"
Python finding string between 2 tags,"import re

myfile = open(files,'r');
filecontent = myfile.read();

results = re.compile('content(.*?)score', re.DOTALL | re.IGNORECASE).findall(filecontent)
print results
"
Downsample a 1D numpy array,"import numpy as np
a = np.array([1.,2,6,2,1,7])
R = 3
a.reshape(-1, R)
=> array([[ 1.,  2.,  6.],
         [ 2.,  1.,  7.]])

a.reshape(-1, R).mean(axis=1)
=> array([ 3.        ,  3.33333333])
"
merge and sum two dataframes where columns match python pandas,"In [18]:
df1.add(df).fillna(df1)

Out[18]:
   a   b   c   d
0  2   4   8   9
1  2  12  10   7
2  2  16  14  10
"
How to get data from mysql and extract data from web using spider in scrapy,"from scrapy.http import Request

class AmazonSpider(scrapy.Spider):
    name = ""amazon""
    allowed_domains = [""amazon.com""]

    def start_requests(self):
         connection = MySQLdb.connect(<connection params here>)
         cursor = connection.cursor()

         cursor.execute(""SELECT ProductDepartmentLilnk FROM amazon_project.ProductDepartment"")
         links = cursor.fetchall()

         for link in links:
              yield Request(link, callback=self.parse)

         cursor.close()

     ...
"
python re remove text between < (exclusive) and last / (inclusive) in a line,"code = '''#include <Box2D/Dynamics/Joints/b2DistanceJoint.h>
#include <Box2D/Dynamics/Joints/xyz.h> #include <Box2D/Dynamics/Joints/xyz.h>
#include <pqr.h>'''

code = re.sub(""(?:(?<=^)|(?<=[\n\r]))#include\s+<[^>]*/"", ""#include <"", code)
"
Find clusters of bacteria,"s = """"""\
                     ###                    \
                     #####                  \
                     #######                \
                    #######                 \
                     ######                 \
                     ###### ##              \
                     ####  #####            \
                       ## ######        ####\
                    #    ######       ####  \
                  ###  ##########    #####  \
                #######  ####  ##   ######  \
                ######### ##   #      ##### \
      #           ####   ###          ###   \
     #####        ####    #     ##     ##   \
     #####                    ######    #   \
    ######                   ########       \
     ####                     ########      \
                              #######       \
                              #######       \
""""""
representatives = {i: i for i, c in enumerate(s) if c == '#'}
nrows, ncols = 19, 44

def neighbours(idx):
    i, j = divmod(idx, ncols)
    if i > 0: yield idx - ncols
    if i < nrows - 1: yield idx + ncols
    if j > 0: yield idx - 1
    if j < ncols - 1: yield idx + 1

def representative(a):
    while representatives[a] != a: a = representatives[a]
    return a

def join(a, b):
    repr_a, repr_b = representative(a), representative(b)
    if repr_a != repr_b: representatives[repr_a] = repr_b

for idx in representatives:
    for n in neighbours(idx):
        if s[n] == '#': join(idx, n)

cluster_count = len(set(map(representative, representatives)))
"
Automated Action Birthday =19,"@api.model
def get_age_comp(self):
    self.search([('gender','=','m'), ('status', '=', 'underage'),
                 ('birth_date', '<=', date.today() - relativedelta(years=20))
                ]).write({'status': 'getCard'})
"
